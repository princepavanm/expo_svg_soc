
designtest_m3.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fc29 	bl	9a0 <main>
    bl    exit
     14e:	f001 fa65 	bl	161c <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00002cdf 	.word	0x00002cdf
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000078 	.word	0x20000078
    ldr     r0,=SystemInit
     168:	0000160d 	.word	0x0000160d

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <test>:
    result++;
  }
  return(result);
}
unsigned int test(unsigned int base, unsigned int offset, unsigned int range)
{
     1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     1f4:	4604      	mov	r4, r0
     1f6:	4691      	mov	r9, r2
  int cycles;
  unsigned int result;
  unsigned int addrvalues[4];

  addrvalues[0] = base;
  addrvalues[1] = base+range/2-4;
     1f8:	ea4f 0b52 	mov.w	fp, r2, lsr #1
  addrvalues[2] = base+range/2;
  addrvalues[3] = base+range-4;
  data=0;
  result=PASS;
  address_start = (base+offset);
     1fc:	1846      	adds	r6, r0, r1
  addrvalues[1] = base+range/2-4;
     1fe:	eb0b 0804 	add.w	r8, fp, r4
  address_end   = (address_start+range);
  printf("Start address 0x%08X\n",address_start);
     202:	4631      	mov	r1, r6
     204:	4837      	ldr	r0, [pc, #220]	; (2e4 <Stack_Size+0xe4>)
     206:	f001 fa25 	bl	1654 <iprintf>
  addrvalues[1] = base+range/2-4;
     20a:	f1a8 0504 	sub.w	r5, r8, #4
  printf("End address   0x%08X\n",address_end);
     20e:	eb09 0106 	add.w	r1, r9, r6
     212:	4835      	ldr	r0, [pc, #212]	; (2e8 <Stack_Size+0xe8>)
     214:	f001 fa1e 	bl	1654 <iprintf>
  addrvalues[3] = base+range-4;
     218:	f1a9 0904 	sub.w	r9, r9, #4
  //Write data
  for(ii = 0; ii < 4; ii = ii + 1)
  {
    data = data + 0x200211 * addrvalues[ii];
     21c:	eb05 3205 	add.w	r2, r5, r5, lsl #12
     220:	eb04 3104 	add.w	r1, r4, r4, lsl #12
  addrvalues[3] = base+range-4;
     224:	eb09 0304 	add.w	r3, r9, r4
    data = data + 0x200211 * addrvalues[ii];
     228:	eb05 1242 	add.w	r2, r5, r2, lsl #5
     22c:	eb04 1141 	add.w	r1, r4, r1, lsl #5
     230:	eb08 3608 	add.w	r6, r8, r8, lsl #12
     234:	eb04 1101 	add.w	r1, r4, r1, lsl #4
     238:	eb05 1502 	add.w	r5, r5, r2, lsl #4
     23c:	eb03 3703 	add.w	r7, r3, r3, lsl #12
     240:	eb08 1646 	add.w	r6, r8, r6, lsl #5
     244:	440d      	add	r5, r1
     246:	eb03 1747 	add.w	r7, r3, r7, lsl #5
     24a:	eb08 1606 	add.w	r6, r8, r6, lsl #4
     24e:	442e      	add	r6, r5
     250:	eb03 1307 	add.w	r3, r3, r7, lsl #4
     254:	199f      	adds	r7, r3, r6
    dout = data;
    *((volatile unsigned int *)addrvalues[ii]) = dout;
     256:	6021      	str	r1, [r4, #0]
     258:	f848 5c04 	str.w	r5, [r8, #-4]
     25c:	f84b 6004 	str.w	r6, [fp, r4]
     260:	f849 7004 	str.w	r7, [r9, r4]
  data = 0;
  for(ii = 0; ii < 4; ii = ii + 1)
  {
    data = data + 0x200211 * addrvalues[ii];
    dout = data;
    din = *((volatile unsigned int *)addrvalues[ii]);
     264:	6822      	ldr	r2, [r4, #0]
    cycles++;
    // Check and display errors
    if (din != dout)
     266:	428a      	cmp	r2, r1
     268:	d135      	bne.n	2d6 <Stack_Size+0xd6>
  status = PASS;
     26a:	f04f 0a00 	mov.w	sl, #0
    din = *((volatile unsigned int *)addrvalues[ii]);
     26e:	f858 2c04 	ldr.w	r2, [r8, #-4]
    if (din != dout)
     272:	42aa      	cmp	r2, r5
     274:	d005      	beq.n	282 <Stack_Size+0x82>
    {
      status++;
      printf("written = %x, read = %x\n", dout, din);
     276:	4629      	mov	r1, r5
     278:	481c      	ldr	r0, [pc, #112]	; (2ec <Stack_Size+0xec>)
      status++;
     27a:	f10a 0a01 	add.w	sl, sl, #1
      printf("written = %x, read = %x\n", dout, din);
     27e:	f001 f9e9 	bl	1654 <iprintf>
    din = *((volatile unsigned int *)addrvalues[ii]);
     282:	f85b 2004 	ldr.w	r2, [fp, r4]
    if (din != dout)
     286:	42b2      	cmp	r2, r6
     288:	d10d      	bne.n	2a6 <Stack_Size+0xa6>
    din = *((volatile unsigned int *)addrvalues[ii]);
     28a:	f859 2004 	ldr.w	r2, [r9, r4]
    if (din != dout)
     28e:	42ba      	cmp	r2, r7
     290:	d113      	bne.n	2ba <Stack_Size+0xba>
    }
  }
  //Report status
  if (status == PASS)
     292:	f1ba 0f00 	cmp.w	sl, #0
     296:	d116      	bne.n	2c6 <Stack_Size+0xc6>
  {
    printf("Pass %d locations tested\n",cycles);
     298:	2104      	movs	r1, #4
     29a:	4815      	ldr	r0, [pc, #84]	; (2f0 <Stack_Size+0xf0>)
     29c:	f001 f9da 	bl	1654 <iprintf>
  result=PASS;
     2a0:	4650      	mov	r0, sl
  } else {
    printf("Fail %d errors of %d locations\n",status,cycles);
    result++;
  }
  return(result);
}
     2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      printf("written = %x, read = %x\n", dout, din);
     2a6:	4631      	mov	r1, r6
     2a8:	4810      	ldr	r0, [pc, #64]	; (2ec <Stack_Size+0xec>)
     2aa:	f001 f9d3 	bl	1654 <iprintf>
    din = *((volatile unsigned int *)addrvalues[ii]);
     2ae:	f859 2004 	ldr.w	r2, [r9, r4]
      status++;
     2b2:	f10a 0a01 	add.w	sl, sl, #1
    if (din != dout)
     2b6:	4297      	cmp	r7, r2
     2b8:	d005      	beq.n	2c6 <Stack_Size+0xc6>
      printf("written = %x, read = %x\n", dout, din);
     2ba:	4639      	mov	r1, r7
     2bc:	480b      	ldr	r0, [pc, #44]	; (2ec <Stack_Size+0xec>)
      status++;
     2be:	f10a 0a01 	add.w	sl, sl, #1
      printf("written = %x, read = %x\n", dout, din);
     2c2:	f001 f9c7 	bl	1654 <iprintf>
    printf("Fail %d errors of %d locations\n",status,cycles);
     2c6:	4651      	mov	r1, sl
     2c8:	2204      	movs	r2, #4
     2ca:	480a      	ldr	r0, [pc, #40]	; (2f4 <Stack_Size+0xf4>)
     2cc:	f001 f9c2 	bl	1654 <iprintf>
    result++;
     2d0:	2001      	movs	r0, #1
}
     2d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      printf("written = %x, read = %x\n", dout, din);
     2d6:	4805      	ldr	r0, [pc, #20]	; (2ec <Stack_Size+0xec>)
     2d8:	f001 f9bc 	bl	1654 <iprintf>
      status++;
     2dc:	f04f 0a01 	mov.w	sl, #1
     2e0:	e7c5      	b.n	26e <Stack_Size+0x6e>
     2e2:	bf00      	nop
     2e4:	0000258c 	.word	0x0000258c
     2e8:	000025a4 	.word	0x000025a4
     2ec:	000025bc 	.word	0x000025bc
     2f0:	000025d8 	.word	0x000025d8
     2f4:	000025f4 	.word	0x000025f4

000002f8 <test_fpgareg>:

unsigned int test_fpgareg(unsigned int base)
{
     2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result=PASS;
  counter_start = CM3DS_MPS2_FPGASYS->COUNTCYC;
  printf("Base address 0x%08X\n",base);
  printf("Remap 0x%08X\n",*((volatile unsigned int *)CM3DS_MPS2_SYSCTRL_BASE));
  printf("Timer 0 ID 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER0_BASE + 0x0FE0)));
  printf("Timer 0 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER0_BASE + 0x0000)));
     2fc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  counter_start = CM3DS_MPS2_FPGASYS->COUNTCYC;
     300:	4c88      	ldr	r4, [pc, #544]	; (524 <test_fpgareg+0x22c>)
  printf("Base address 0x%08X\n",base);
     302:	4601      	mov	r1, r0
     304:	4888      	ldr	r0, [pc, #544]	; (528 <test_fpgareg+0x230>)
  counter_start = CM3DS_MPS2_FPGASYS->COUNTCYC;
     306:	69a7      	ldr	r7, [r4, #24]
  printf("Base address 0x%08X\n",base);
     308:	f001 f9a4 	bl	1654 <iprintf>
  printf("Remap 0x%08X\n",*((volatile unsigned int *)CM3DS_MPS2_SYSCTRL_BASE));
     30c:	4b87      	ldr	r3, [pc, #540]	; (52c <test_fpgareg+0x234>)
     30e:	4888      	ldr	r0, [pc, #544]	; (530 <test_fpgareg+0x238>)
     310:	6819      	ldr	r1, [r3, #0]
     312:	f001 f99f 	bl	1654 <iprintf>
  printf("Timer 0 ID 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER0_BASE + 0x0FE0)));
     316:	4b87      	ldr	r3, [pc, #540]	; (534 <test_fpgareg+0x23c>)
     318:	4887      	ldr	r0, [pc, #540]	; (538 <test_fpgareg+0x240>)
     31a:	6819      	ldr	r1, [r3, #0]
     31c:	f001 f99a 	bl	1654 <iprintf>
  printf("Timer 0 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER0_BASE + 0x0000)));
     320:	6829      	ldr	r1, [r5, #0]
     322:	4886      	ldr	r0, [pc, #536]	; (53c <test_fpgareg+0x244>)
     324:	f001 f996 	bl	1654 <iprintf>
  printf("Writing 0x55\n");
     328:	4885      	ldr	r0, [pc, #532]	; (540 <test_fpgareg+0x248>)
     32a:	f001 fa07 	bl	173c <puts>
  *((volatile unsigned int *)(CM3DS_MPS2_TIMER0_BASE + 0x0000)) = 0x55;
     32e:	2355      	movs	r3, #85	; 0x55
     330:	602b      	str	r3, [r5, #0]
  printf("Timer 0 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER0_BASE + 0x0000)));
     332:	6829      	ldr	r1, [r5, #0]
     334:	4881      	ldr	r0, [pc, #516]	; (53c <test_fpgareg+0x244>)
     336:	f001 f98d 	bl	1654 <iprintf>
  printf("Timer 1 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER1_BASE + 0x0000)));
     33a:	4b82      	ldr	r3, [pc, #520]	; (544 <test_fpgareg+0x24c>)
  printf("Counter 1Hz 0x%08X, 100Hz 0x%08X, Cycleup 0x%08X\n",
         CM3DS_MPS2_FPGASYS->COUNT1HZ,
         CM3DS_MPS2_FPGASYS->CNT100HZ,
         CM3DS_MPS2_FPGASYS->COUNTCYC);

  printf("EXT bus [15:0] = 0x%08X\n", CM3DS_MPS2_GPIO0->DATA);
     33c:	4e82      	ldr	r6, [pc, #520]	; (548 <test_fpgareg+0x250>)
  printf("Timer 1 0x%08X\n",*((volatile unsigned int *)(CM3DS_MPS2_TIMER1_BASE + 0x0000)));
     33e:	6819      	ldr	r1, [r3, #0]
     340:	4882      	ldr	r0, [pc, #520]	; (54c <test_fpgareg+0x254>)
     342:	f001 f987 	bl	1654 <iprintf>
  printf("Counter 1Hz 0x%08X, 100Hz 0x%08X, Cycleup 0x%08X\n",
     346:	6921      	ldr	r1, [r4, #16]
     348:	4881      	ldr	r0, [pc, #516]	; (550 <test_fpgareg+0x258>)
     34a:	6962      	ldr	r2, [r4, #20]
     34c:	69a3      	ldr	r3, [r4, #24]
     34e:	f001 f981 	bl	1654 <iprintf>
  printf("EXT bus [15:0] = 0x%08X\n", CM3DS_MPS2_GPIO0->DATA);
     352:	6831      	ldr	r1, [r6, #0]
     354:	487f      	ldr	r0, [pc, #508]	; (554 <test_fpgareg+0x25c>)
     356:	f001 f97d 	bl	1654 <iprintf>
  if (CM3DS_MPS2_GPIO0->DATA != 0x0000FFFF)
     35a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     35e:	6832      	ldr	r2, [r6, #0]
     360:	429a      	cmp	r2, r3
     362:	f040 80d2 	bne.w	50a <test_fpgareg+0x212>
     366:	2601      	movs	r6, #1
  result=PASS;
     368:	2500      	movs	r5, #0
  {
    printf("Fail\n");
    result++;
  }
  printf("EXT bus [31:16] = 0x%08X\n", CM3DS_MPS2_GPIO1->DATA);
     36a:	4c7b      	ldr	r4, [pc, #492]	; (558 <test_fpgareg+0x260>)
     36c:	487b      	ldr	r0, [pc, #492]	; (55c <test_fpgareg+0x264>)
     36e:	6821      	ldr	r1, [r4, #0]
     370:	f001 f970 	bl	1654 <iprintf>
  if (CM3DS_MPS2_GPIO1->DATA != 0x0000FFFF)
     374:	f64f 73ff 	movw	r3, #65535	; 0xffff
     378:	6822      	ldr	r2, [r4, #0]
     37a:	429a      	cmp	r2, r3
     37c:	d003      	beq.n	386 <test_fpgareg+0x8e>
  {
    printf("Fail\n");
     37e:	4878      	ldr	r0, [pc, #480]	; (560 <test_fpgareg+0x268>)
    result++;
     380:	4635      	mov	r5, r6
    printf("Fail\n");
     382:	f001 f9db 	bl	173c <puts>
  }
  printf("EXT bus [47:32] = 0x%08X\n", CM3DS_MPS2_GPIO2->DATA);
     386:	4c77      	ldr	r4, [pc, #476]	; (564 <test_fpgareg+0x26c>)
     388:	4877      	ldr	r0, [pc, #476]	; (568 <test_fpgareg+0x270>)
     38a:	6821      	ldr	r1, [r4, #0]
     38c:	f001 f962 	bl	1654 <iprintf>
  if (CM3DS_MPS2_GPIO2->DATA != 0x0000FFFF)
     390:	f64f 73ff 	movw	r3, #65535	; 0xffff
     394:	6822      	ldr	r2, [r4, #0]
     396:	429a      	cmp	r2, r3
     398:	d003      	beq.n	3a2 <test_fpgareg+0xaa>
  {
    printf("Fail\n");
     39a:	4871      	ldr	r0, [pc, #452]	; (560 <test_fpgareg+0x268>)
     39c:	f001 f9ce 	bl	173c <puts>
    result++;
     3a0:	3501      	adds	r5, #1
  }
  printf("EXT bus [51:48] = 0x%08X\n", CM3DS_MPS2_GPIO3->DATA);
     3a2:	4c72      	ldr	r4, [pc, #456]	; (56c <test_fpgareg+0x274>)
     3a4:	4872      	ldr	r0, [pc, #456]	; (570 <test_fpgareg+0x278>)
     3a6:	6821      	ldr	r1, [r4, #0]
     3a8:	f001 f954 	bl	1654 <iprintf>
  if (CM3DS_MPS2_GPIO3->DATA != 0x0000000F)
     3ac:	6823      	ldr	r3, [r4, #0]
     3ae:	2b0f      	cmp	r3, #15
     3b0:	d003      	beq.n	3ba <test_fpgareg+0xc2>
  {
    printf("Fail\n");
     3b2:	486b      	ldr	r0, [pc, #428]	; (560 <test_fpgareg+0x268>)
     3b4:	f001 f9c2 	bl	173c <puts>
    result++;
     3b8:	3501      	adds	r5, #1
  }

  printf("Zeroing bus (not yet enabled)\n");
     3ba:	486e      	ldr	r0, [pc, #440]	; (574 <test_fpgareg+0x27c>)
     3bc:	f001 f9be 	bl	173c <puts>

  CM3DS_MPS2_GPIO0->DATAOUT = 0x0;
     3c0:	2300      	movs	r3, #0
     3c2:	4c61      	ldr	r4, [pc, #388]	; (548 <test_fpgareg+0x250>)
  CM3DS_MPS2_GPIO1->DATAOUT = 0x0;
     3c4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 558 <test_fpgareg+0x260>
  CM3DS_MPS2_GPIO2->DATAOUT = 0x0;
     3c8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 564 <test_fpgareg+0x26c>
  CM3DS_MPS2_GPIO3->DATAOUT = 0x0;
     3cc:	4e67      	ldr	r6, [pc, #412]	; (56c <test_fpgareg+0x274>)
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0;
     3ce:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_GPIO1->DATAOUT = 0x0;
     3d0:	f8c9 3004 	str.w	r3, [r9, #4]
  CM3DS_MPS2_GPIO2->DATAOUT = 0x0;
     3d4:	f8c8 3004 	str.w	r3, [r8, #4]
  CM3DS_MPS2_GPIO3->DATAOUT = 0x0;
     3d8:	6073      	str	r3, [r6, #4]

  printf("EXT bus [15:0] = 0x%08X\n",CM3DS_MPS2_GPIO0->DATA);
     3da:	6821      	ldr	r1, [r4, #0]
     3dc:	485d      	ldr	r0, [pc, #372]	; (554 <test_fpgareg+0x25c>)
     3de:	f001 f939 	bl	1654 <iprintf>
  printf("EXT bus [31:16] = 0x%08X\n",CM3DS_MPS2_GPIO1->DATA);
     3e2:	f8d9 1000 	ldr.w	r1, [r9]
     3e6:	485d      	ldr	r0, [pc, #372]	; (55c <test_fpgareg+0x264>)
     3e8:	f001 f934 	bl	1654 <iprintf>
  printf("EXT bus [47:32] = 0x%08X\n",CM3DS_MPS2_GPIO2->DATA);
     3ec:	f8d8 1000 	ldr.w	r1, [r8]
     3f0:	485d      	ldr	r0, [pc, #372]	; (568 <test_fpgareg+0x270>)
     3f2:	f001 f92f 	bl	1654 <iprintf>
  printf("EXT bus [51:48] = 0x%08X\n",CM3DS_MPS2_GPIO3->DATA);
     3f6:	6831      	ldr	r1, [r6, #0]
     3f8:	485d      	ldr	r0, [pc, #372]	; (570 <test_fpgareg+0x278>)
     3fa:	f001 f92b 	bl	1654 <iprintf>


  CM3DS_MPS2_GPIO0->OUTENABLESET = 0x7FFE;
  CM3DS_MPS2_GPIO1->OUTENABLESET = 0xFB7F;
  CM3DS_MPS2_GPIO2->OUTENABLESET = 0xFDFF;
     3fe:	f64f 52ff 	movw	r2, #65023	; 0xfdff
  CM3DS_MPS2_GPIO3->OUTENABLESET = 0x000F;
     402:	230f      	movs	r3, #15
  CM3DS_MPS2_GPIO1->OUTENABLESET = 0xFB7F;
     404:	f64f 317f 	movw	r1, #64383	; 0xfb7f
  CM3DS_MPS2_GPIO0->OUTENABLESET = 0x7FFE;
     408:	f647 70fe 	movw	r0, #32766	; 0x7ffe
     40c:	6120      	str	r0, [r4, #16]
  CM3DS_MPS2_GPIO1->OUTENABLESET = 0xFB7F;
     40e:	f8c9 1010 	str.w	r1, [r9, #16]
  printf("Enabled bus drive\n");
     412:	4859      	ldr	r0, [pc, #356]	; (578 <test_fpgareg+0x280>)
  CM3DS_MPS2_GPIO2->OUTENABLESET = 0xFDFF;
     414:	f8c8 2010 	str.w	r2, [r8, #16]
  CM3DS_MPS2_GPIO3->OUTENABLESET = 0x000F;
     418:	6133      	str	r3, [r6, #16]
  printf("Enabled bus drive\n");
     41a:	f001 f98f 	bl	173c <puts>

  printf("EXT bus [15:0] = 0x%08X\n",CM3DS_MPS2_GPIO0->DATA);
     41e:	6821      	ldr	r1, [r4, #0]
     420:	484c      	ldr	r0, [pc, #304]	; (554 <test_fpgareg+0x25c>)
     422:	f001 f917 	bl	1654 <iprintf>
  if ((CM3DS_MPS2_GPIO0->DATA & CM3DS_MPS2_GPIO0->OUTENABLESET) == 0x0)
     426:	6822      	ldr	r2, [r4, #0]
     428:	6923      	ldr	r3, [r4, #16]
     42a:	421a      	tst	r2, r3
     42c:	d168      	bne.n	500 <test_fpgareg+0x208>
  {
    printf("Pass\n");
     42e:	4853      	ldr	r0, [pc, #332]	; (57c <test_fpgareg+0x284>)
     430:	f001 f984 	bl	173c <puts>
  } else {
    printf("Fail\n");
    result++;
  }

  printf("EXT bus [31:16] = 0x%08X\n",CM3DS_MPS2_GPIO1->DATA);
     434:	4c48      	ldr	r4, [pc, #288]	; (558 <test_fpgareg+0x260>)
     436:	4849      	ldr	r0, [pc, #292]	; (55c <test_fpgareg+0x264>)
     438:	6821      	ldr	r1, [r4, #0]
     43a:	f001 f90b 	bl	1654 <iprintf>
  if ((CM3DS_MPS2_GPIO1->DATA & CM3DS_MPS2_GPIO1->OUTENABLESET) == 0x0)
     43e:	6822      	ldr	r2, [r4, #0]
     440:	6923      	ldr	r3, [r4, #16]
     442:	421a      	tst	r2, r3
     444:	d157      	bne.n	4f6 <test_fpgareg+0x1fe>
  {
    printf("Pass\n");
     446:	484d      	ldr	r0, [pc, #308]	; (57c <test_fpgareg+0x284>)
     448:	f001 f978 	bl	173c <puts>
  } else {
    printf("Fail\n");
    result++;
  }

  printf("EXT bus [47:32] = 0x%08X\n",CM3DS_MPS2_GPIO2->DATA);
     44c:	4c45      	ldr	r4, [pc, #276]	; (564 <test_fpgareg+0x26c>)
     44e:	4846      	ldr	r0, [pc, #280]	; (568 <test_fpgareg+0x270>)
     450:	6821      	ldr	r1, [r4, #0]
     452:	f001 f8ff 	bl	1654 <iprintf>
  if ((CM3DS_MPS2_GPIO2->DATA & CM3DS_MPS2_GPIO2->OUTENABLESET) == 0x0)
     456:	6822      	ldr	r2, [r4, #0]
     458:	6923      	ldr	r3, [r4, #16]
     45a:	421a      	tst	r2, r3
     45c:	d146      	bne.n	4ec <test_fpgareg+0x1f4>
  {
    printf("Pass\n");
     45e:	4847      	ldr	r0, [pc, #284]	; (57c <test_fpgareg+0x284>)
     460:	f001 f96c 	bl	173c <puts>
  } else {
    printf("Fail\n");
    result++;
  }

  printf("EXT bus [51:48] = 0x%08X\n",CM3DS_MPS2_GPIO3->DATA);
     464:	4c41      	ldr	r4, [pc, #260]	; (56c <test_fpgareg+0x274>)
     466:	4842      	ldr	r0, [pc, #264]	; (570 <test_fpgareg+0x278>)
     468:	6821      	ldr	r1, [r4, #0]
     46a:	f001 f8f3 	bl	1654 <iprintf>

  if ((CM3DS_MPS2_GPIO3->DATA & CM3DS_MPS2_GPIO3->OUTENABLESET) == 0x0)
     46e:	6822      	ldr	r2, [r4, #0]
     470:	6923      	ldr	r3, [r4, #16]
     472:	421a      	tst	r2, r3
     474:	d135      	bne.n	4e2 <test_fpgareg+0x1ea>
  {
    printf("Pass\n");
     476:	4841      	ldr	r0, [pc, #260]	; (57c <test_fpgareg+0x284>)
     478:	f001 f960 	bl	173c <puts>
  }

#ifndef FPGA_IMAGE
  // On testbench only, buttons are looped back to LEDs.
  // This test will not work on MPS2 board
  printf("LEDs and buttons - Buttons are looped back from LEDs.\n");
     47c:	4840      	ldr	r0, [pc, #256]	; (580 <test_fpgareg+0x288>)
     47e:	f001 f95d 	bl	173c <puts>
  for (loopcounter = 0; loopcounter < 4; loopcounter = loopcounter + 1)
     482:	2400      	movs	r4, #0
  {
    printf("Setting LEDs to 0x%08X\n",loopcounter);
     484:	f8df 9100 	ldr.w	r9, [pc, #256]	; 588 <test_fpgareg+0x290>

    CM3DS_MPS2_FPGASYS->LEDS = loopcounter;
     488:	4e26      	ldr	r6, [pc, #152]	; (524 <test_fpgareg+0x22c>)

    printf("Buttons = 0x%08X\n",CM3DS_MPS2_FPGASYS->BUTTONS);
     48a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 58c <test_fpgareg+0x294>
    printf("Setting LEDs to 0x%08X\n",loopcounter);
     48e:	4621      	mov	r1, r4
     490:	4648      	mov	r0, r9
     492:	f001 f8df 	bl	1654 <iprintf>
    CM3DS_MPS2_FPGASYS->LEDS = loopcounter;
     496:	6034      	str	r4, [r6, #0]
    printf("Buttons = 0x%08X\n",CM3DS_MPS2_FPGASYS->BUTTONS);
     498:	68b1      	ldr	r1, [r6, #8]
     49a:	4640      	mov	r0, r8
     49c:	f001 f8da 	bl	1654 <iprintf>
      if (CM3DS_MPS2_FPGASYS->BUTTONS == loopcounter)
     4a0:	68b3      	ldr	r3, [r6, #8]
    {
      printf("Pass\n");
    } else {
      printf("Fail\n");
     4a2:	482f      	ldr	r0, [pc, #188]	; (560 <test_fpgareg+0x268>)
      if (CM3DS_MPS2_FPGASYS->BUTTONS == loopcounter)
     4a4:	429c      	cmp	r4, r3
     4a6:	d018      	beq.n	4da <test_fpgareg+0x1e2>
      printf("Fail\n");
     4a8:	f001 f948 	bl	173c <puts>
      result++;
     4ac:	3501      	adds	r5, #1
  for (loopcounter = 0; loopcounter < 4; loopcounter = loopcounter + 1)
     4ae:	3401      	adds	r4, #1
     4b0:	2c04      	cmp	r4, #4
     4b2:	d1ec      	bne.n	48e <test_fpgareg+0x196>
    }
  }

#endif

  printf("Counter 1Hz 0x%08X, 100Hz 0x%08X, Cycleup 0x%08X\n",
     4b4:	4c1b      	ldr	r4, [pc, #108]	; (524 <test_fpgareg+0x22c>)
     4b6:	4826      	ldr	r0, [pc, #152]	; (550 <test_fpgareg+0x258>)
     4b8:	6921      	ldr	r1, [r4, #16]
     4ba:	6962      	ldr	r2, [r4, #20]
     4bc:	69a3      	ldr	r3, [r4, #24]
     4be:	f001 f8c9 	bl	1654 <iprintf>
         CM3DS_MPS2_FPGASYS->COUNT1HZ,
         CM3DS_MPS2_FPGASYS->CNT100HZ,
         CM3DS_MPS2_FPGASYS->COUNTCYC);
  printf("Checking Cycleup counter is counting - ");
     4c2:	4830      	ldr	r0, [pc, #192]	; (584 <test_fpgareg+0x28c>)
     4c4:	f001 f8c6 	bl	1654 <iprintf>
  if (counter_start != CM3DS_MPS2_FPGASYS->COUNTCYC)
     4c8:	69a3      	ldr	r3, [r4, #24]
     4ca:	42bb      	cmp	r3, r7
     4cc:	d023      	beq.n	516 <test_fpgareg+0x21e>
    {
    printf("Pass\n");
     4ce:	482b      	ldr	r0, [pc, #172]	; (57c <test_fpgareg+0x284>)
     4d0:	f001 f934 	bl	173c <puts>
  } else {
    printf("Fail\n");
    result++;
  }
  return(result);
}
     4d4:	4628      	mov	r0, r5
     4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      printf("Pass\n");
     4da:	4828      	ldr	r0, [pc, #160]	; (57c <test_fpgareg+0x284>)
     4dc:	f001 f92e 	bl	173c <puts>
     4e0:	e7e5      	b.n	4ae <test_fpgareg+0x1b6>
    printf("Fail\n");
     4e2:	481f      	ldr	r0, [pc, #124]	; (560 <test_fpgareg+0x268>)
     4e4:	f001 f92a 	bl	173c <puts>
    result++;
     4e8:	3501      	adds	r5, #1
     4ea:	e7c7      	b.n	47c <test_fpgareg+0x184>
    printf("Fail\n");
     4ec:	481c      	ldr	r0, [pc, #112]	; (560 <test_fpgareg+0x268>)
     4ee:	f001 f925 	bl	173c <puts>
    result++;
     4f2:	3501      	adds	r5, #1
     4f4:	e7b6      	b.n	464 <test_fpgareg+0x16c>
    printf("Fail\n");
     4f6:	481a      	ldr	r0, [pc, #104]	; (560 <test_fpgareg+0x268>)
     4f8:	f001 f920 	bl	173c <puts>
    result++;
     4fc:	3501      	adds	r5, #1
     4fe:	e7a5      	b.n	44c <test_fpgareg+0x154>
    printf("Fail\n");
     500:	4817      	ldr	r0, [pc, #92]	; (560 <test_fpgareg+0x268>)
     502:	f001 f91b 	bl	173c <puts>
    result++;
     506:	3501      	adds	r5, #1
     508:	e794      	b.n	434 <test_fpgareg+0x13c>
    printf("Fail\n");
     50a:	4815      	ldr	r0, [pc, #84]	; (560 <test_fpgareg+0x268>)
     50c:	f001 f916 	bl	173c <puts>
     510:	2602      	movs	r6, #2
    result++;
     512:	2501      	movs	r5, #1
     514:	e729      	b.n	36a <test_fpgareg+0x72>
    result++;
     516:	3501      	adds	r5, #1
    printf("Fail\n");
     518:	4811      	ldr	r0, [pc, #68]	; (560 <test_fpgareg+0x268>)
     51a:	f001 f90f 	bl	173c <puts>
}
     51e:	4628      	mov	r0, r5
     520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     524:	40028000 	.word	0x40028000
     528:	00002614 	.word	0x00002614
     52c:	4001f000 	.word	0x4001f000
     530:	0000262c 	.word	0x0000262c
     534:	40000fe0 	.word	0x40000fe0
     538:	0000263c 	.word	0x0000263c
     53c:	00002650 	.word	0x00002650
     540:	00002660 	.word	0x00002660
     544:	40001000 	.word	0x40001000
     548:	40010000 	.word	0x40010000
     54c:	00002670 	.word	0x00002670
     550:	00002680 	.word	0x00002680
     554:	000026b4 	.word	0x000026b4
     558:	40011000 	.word	0x40011000
     55c:	000026d8 	.word	0x000026d8
     560:	000026d0 	.word	0x000026d0
     564:	40012000 	.word	0x40012000
     568:	000026f4 	.word	0x000026f4
     56c:	40013000 	.word	0x40013000
     570:	00002710 	.word	0x00002710
     574:	0000272c 	.word	0x0000272c
     578:	0000274c 	.word	0x0000274c
     57c:	00002760 	.word	0x00002760
     580:	00002768 	.word	0x00002768
     584:	000027cc 	.word	0x000027cc
     588:	000027a0 	.word	0x000027a0
     58c:	000027b8 	.word	0x000027b8

00000590 <test_scc>:

unsigned int test_scc(unsigned int base)
{
     590:	b570      	push	{r4, r5, r6, lr}
  unsigned int result;
  result=PASS;
  printf("Base address 0x%08X\n",base);
  printf("DLLLOCK     0x%08X\n",CM3DS_MPS2_SCC->SCC_DLLLOCK);
     592:	4c49      	ldr	r4, [pc, #292]	; (6b8 <test_scc+0x128>)
  printf("Base address 0x%08X\n",base);
     594:	4601      	mov	r1, r0
     596:	4849      	ldr	r0, [pc, #292]	; (6bc <test_scc+0x12c>)
     598:	f001 f85c 	bl	1654 <iprintf>
  printf("DLLLOCK     0x%08X\n",CM3DS_MPS2_SCC->SCC_DLLLOCK);
     59c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
     5a0:	4847      	ldr	r0, [pc, #284]	; (6c0 <test_scc+0x130>)
     5a2:	f001 f857 	bl	1654 <iprintf>
  printf("SCC_LED     0x%08X\n",CM3DS_MPS2_SCC->SCC_LED    );
     5a6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
     5aa:	4846      	ldr	r0, [pc, #280]	; (6c4 <test_scc+0x134>)
     5ac:	f001 f852 	bl	1654 <iprintf>
  printf("SCC_SW      0x%08X\n",CM3DS_MPS2_SCC->SCC_SW     );
     5b0:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
     5b4:	4844      	ldr	r0, [pc, #272]	; (6c8 <test_scc+0x138>)
     5b6:	f001 f84d 	bl	1654 <iprintf>
  printf("SCC_APBLOCK 0x%08X\n",CM3DS_MPS2_SCC->SCC_APBLOCK);
     5ba:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
     5be:	4843      	ldr	r0, [pc, #268]	; (6cc <test_scc+0x13c>)
     5c0:	f001 f848 	bl	1654 <iprintf>
  printf("SCC_AID     0x%08X\n",CM3DS_MPS2_SCC->SCC_AID    );
     5c4:	f8d4 1ff8 	ldr.w	r1, [r4, #4088]	; 0xff8
     5c8:	4841      	ldr	r0, [pc, #260]	; (6d0 <test_scc+0x140>)
     5ca:	f001 f843 	bl	1654 <iprintf>
  printf("SCC_ID      0x%08X\n",CM3DS_MPS2_SCC->SCC_ID     );
     5ce:	f8d4 1ffc 	ldr.w	r1, [r4, #4092]	; 0xffc
     5d2:	4840      	ldr	r0, [pc, #256]	; (6d4 <test_scc+0x144>)
     5d4:	f001 f83e 	bl	1654 <iprintf>
  printf("SYS_CFGDATA_SERIAL 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGDATA_SERIAL);
     5d8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
     5dc:	483e      	ldr	r0, [pc, #248]	; (6d8 <test_scc+0x148>)
     5de:	f001 f839 	bl	1654 <iprintf>
  printf("SYS_CFGDATA_APB 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGDATA_APB);
     5e2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
     5e6:	483d      	ldr	r0, [pc, #244]	; (6dc <test_scc+0x14c>)
     5e8:	f001 f834 	bl	1654 <iprintf>
  printf("SYS_CFGCTRL 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGCTRL);
     5ec:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
     5f0:	483b      	ldr	r0, [pc, #236]	; (6e0 <test_scc+0x150>)
     5f2:	f001 f82f 	bl	1654 <iprintf>
  printf("SYS_CFGSTAT 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGSTAT);
     5f6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
     5fa:	483a      	ldr	r0, [pc, #232]	; (6e4 <test_scc+0x154>)
     5fc:	f001 f82a 	bl	1654 <iprintf>

  printf("Writing 0xa5a5a5a5 to SYS_CFGDATA_APB\n");
     600:	4839      	ldr	r0, [pc, #228]	; (6e8 <test_scc+0x158>)
     602:	f001 f89b 	bl	173c <puts>
  CM3DS_MPS2_SCC->SYS_CFGDATA_APB = 0xa5a5a5a5;
     606:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
     60a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  printf("SYS_CFGDATA_APB 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGDATA_APB);
     60e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
     612:	4832      	ldr	r0, [pc, #200]	; (6dc <test_scc+0x14c>)
     614:	f001 f81e 	bl	1654 <iprintf>
  if (CM3DS_MPS2_SCC->SYS_CFGDATA_APB != 0xa5a5a5a5)
     618:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
     61c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
     620:	d143      	bne.n	6aa <test_scc+0x11a>
     622:	2601      	movs	r6, #1
  result=PASS;
     624:	2400      	movs	r4, #0
  {
    printf("Fail\n");
    result++;
  }
  printf("Writing 0xFFFFFFFF to SYS_CFGDATA_APB\n");
     626:	4831      	ldr	r0, [pc, #196]	; (6ec <test_scc+0x15c>)
     628:	f001 f888 	bl	173c <puts>
  CM3DS_MPS2_SCC->SYS_CFGDATA_APB = 0xFFFFFFFF;
     62c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     630:	4d21      	ldr	r5, [pc, #132]	; (6b8 <test_scc+0x128>)
  printf("SYS_CFGDATA_APB 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGDATA_APB);
     632:	482a      	ldr	r0, [pc, #168]	; (6dc <test_scc+0x14c>)
  CM3DS_MPS2_SCC->SYS_CFGDATA_APB = 0xFFFFFFFF;
     634:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
  printf("SYS_CFGDATA_APB 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGDATA_APB);
     638:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
     63c:	f001 f80a 	bl	1654 <iprintf>
  if (CM3DS_MPS2_SCC->SYS_CFGDATA_APB != 0xFFFFFFFF)
     640:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
     644:	3301      	adds	r3, #1
     646:	d003      	beq.n	650 <test_scc+0xc0>
  {
    printf("Fail\n");
     648:	4829      	ldr	r0, [pc, #164]	; (6f0 <test_scc+0x160>)
    result++;
     64a:	4634      	mov	r4, r6
    printf("Fail\n");
     64c:	f001 f876 	bl	173c <puts>
  }

  printf("Writing 0xa5a5a5a5 to SYS_CFGCTRL - Also triggers interrupt\n");
     650:	4828      	ldr	r0, [pc, #160]	; (6f4 <test_scc+0x164>)
     652:	f001 f873 	bl	173c <puts>
  CM3DS_MPS2_SCC->SYS_CFGCTRL = 0xa5a5a5a5;
     656:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
     65a:	4d17      	ldr	r5, [pc, #92]	; (6b8 <test_scc+0x128>)
  printf("SYS_CFGCTRL 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGCTRL);
     65c:	4820      	ldr	r0, [pc, #128]	; (6e0 <test_scc+0x150>)
  CM3DS_MPS2_SCC->SYS_CFGCTRL = 0xa5a5a5a5;
     65e:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
  printf("SYS_CFGCTRL 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGCTRL);
     662:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
     666:	f000 fff5 	bl	1654 <iprintf>
  if (CM3DS_MPS2_SCC->SYS_CFGCTRL != 0xa5a5a5a5)
     66a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
     66e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
     672:	d003      	beq.n	67c <test_scc+0xec>
  {
    printf("Fail\n");
     674:	481e      	ldr	r0, [pc, #120]	; (6f0 <test_scc+0x160>)
     676:	f001 f861 	bl	173c <puts>
    result++;
     67a:	3401      	adds	r4, #1
  }
  printf("Writing 0xFFFFFFFF to SYS_CFGCTRL\n");
     67c:	481e      	ldr	r0, [pc, #120]	; (6f8 <test_scc+0x168>)
     67e:	f001 f85d 	bl	173c <puts>
  CM3DS_MPS2_SCC->SYS_CFGCTRL = 0xFFFFFFFF;
     682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     686:	4d0c      	ldr	r5, [pc, #48]	; (6b8 <test_scc+0x128>)
  printf("SYS_CFGCTRL 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGCTRL);
     688:	4815      	ldr	r0, [pc, #84]	; (6e0 <test_scc+0x150>)
  CM3DS_MPS2_SCC->SYS_CFGCTRL = 0xFFFFFFFF;
     68a:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
  printf("SYS_CFGCTRL 0x%08X\n",CM3DS_MPS2_SCC->SYS_CFGCTRL);
     68e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
     692:	f000 ffdf 	bl	1654 <iprintf>
  if (CM3DS_MPS2_SCC->SYS_CFGCTRL != 0xFFFFFFFF)
     696:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
     69a:	3301      	adds	r3, #1
     69c:	d003      	beq.n	6a6 <test_scc+0x116>
  {
    printf("Fail\n");
     69e:	4814      	ldr	r0, [pc, #80]	; (6f0 <test_scc+0x160>)
     6a0:	f001 f84c 	bl	173c <puts>
    result++;
     6a4:	3401      	adds	r4, #1
  }
  return(result);
}
     6a6:	4620      	mov	r0, r4
     6a8:	bd70      	pop	{r4, r5, r6, pc}
    printf("Fail\n");
     6aa:	4811      	ldr	r0, [pc, #68]	; (6f0 <test_scc+0x160>)
     6ac:	f001 f846 	bl	173c <puts>
     6b0:	2602      	movs	r6, #2
    result++;
     6b2:	2401      	movs	r4, #1
     6b4:	e7b7      	b.n	626 <test_scc+0x96>
     6b6:	bf00      	nop
     6b8:	4002f000 	.word	0x4002f000
     6bc:	00002614 	.word	0x00002614
     6c0:	000027f4 	.word	0x000027f4
     6c4:	00002808 	.word	0x00002808
     6c8:	0000281c 	.word	0x0000281c
     6cc:	00002830 	.word	0x00002830
     6d0:	00002844 	.word	0x00002844
     6d4:	00002858 	.word	0x00002858
     6d8:	0000286c 	.word	0x0000286c
     6dc:	00002888 	.word	0x00002888
     6e0:	000028a0 	.word	0x000028a0
     6e4:	000028b4 	.word	0x000028b4
     6e8:	000028c8 	.word	0x000028c8
     6ec:	000028f0 	.word	0x000028f0
     6f0:	000026d0 	.word	0x000026d0
     6f4:	00002918 	.word	0x00002918
     6f8:	00002954 	.word	0x00002954

000006fc <listmemory>:

void listmemory(unsigned int base, unsigned int offset, unsigned int range)
{
     6fc:	b570      	push	{r4, r5, r6, lr}
  unsigned int addr;
  unsigned int address_start;
  unsigned int address_end;

  address_start = (base+offset);
     6fe:	1844      	adds	r4, r0, r1
  address_end   = (address_start+range);
     700:	18a5      	adds	r5, r4, r2
  printf("Start address 0x%08X\n",address_start);
     702:	4621      	mov	r1, r4
     704:	4809      	ldr	r0, [pc, #36]	; (72c <listmemory+0x30>)
     706:	f000 ffa5 	bl	1654 <iprintf>
  printf("End address   0x%08X\n",address_end);
     70a:	4629      	mov	r1, r5
     70c:	4808      	ldr	r0, [pc, #32]	; (730 <listmemory+0x34>)
     70e:	f000 ffa1 	bl	1654 <iprintf>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     712:	42ac      	cmp	r4, r5
     714:	d208      	bcs.n	728 <listmemory+0x2c>
  {
    printf("0x%08X contains 0x%08X\n",addr,*((volatile unsigned int *)addr));
     716:	4e07      	ldr	r6, [pc, #28]	; (734 <listmemory+0x38>)
     718:	6822      	ldr	r2, [r4, #0]
     71a:	4621      	mov	r1, r4
     71c:	4630      	mov	r0, r6
  for(addr = address_start; addr < address_end; addr = addr + 4)
     71e:	3404      	adds	r4, #4
    printf("0x%08X contains 0x%08X\n",addr,*((volatile unsigned int *)addr));
     720:	f000 ff98 	bl	1654 <iprintf>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     724:	42a5      	cmp	r5, r4
     726:	d8f7      	bhi.n	718 <listmemory+0x1c>
  }
  return;
}
     728:	bd70      	pop	{r4, r5, r6, pc}
     72a:	bf00      	nop
     72c:	0000258c 	.word	0x0000258c
     730:	000025a4 	.word	0x000025a4
     734:	00002978 	.word	0x00002978

00000738 <delay>:
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     738:	f3bf 8f6f 	isb	sy
     73c:	f3bf 8f6f 	isb	sy
     740:	f3bf 8f6f 	isb	sy
     744:	f3bf 8f6f 	isb	sy
     748:	f3bf 8f6f 	isb	sy
     74c:	f3bf 8f6f 	isb	sy
     750:	f3bf 8f6f 	isb	sy
     754:	f3bf 8f6f 	isb	sy
     758:	f3bf 8f6f 	isb	sy
     75c:	f3bf 8f6f 	isb	sy
  int i;
  for (i=0;i<10;i++){
    __ISB();
    }
  return;
}
     760:	4770      	bx	lr
     762:	bf00      	nop

00000764 <genAI2C_send_byte>:
void genAI2C_send_byte(unsigned char c, unsigned int address)
{
    int loop;
    for (loop = 0; loop < 8; loop++) {
        // apSleepus(1);
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     764:	2201      	movs	r2, #1
     766:	4b2e      	ldr	r3, [pc, #184]	; (820 <genAI2C_send_byte+0xbc>)
     768:	605a      	str	r2, [r3, #4]
        // apSleepus(1);
        if (c & (1 << (7 - loop)))
     76a:	09c2      	lsrs	r2, r0, #7
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     76c:	f04f 0202 	mov.w	r2, #2
        else
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     770:	bf0c      	ite	eq
     772:	605a      	streq	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     774:	601a      	strne	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     776:	2201      	movs	r2, #1
     778:	4b29      	ldr	r3, [pc, #164]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     77a:	0641      	lsls	r1, r0, #25
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     77c:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     77e:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     780:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     782:	f04f 0202 	mov.w	r2, #2
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     786:	bf54      	ite	pl
     788:	605a      	strpl	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     78a:	601a      	strmi	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     78c:	2201      	movs	r2, #1
     78e:	4b24      	ldr	r3, [pc, #144]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     790:	0681      	lsls	r1, r0, #26
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     792:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     794:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     796:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     798:	f04f 0202 	mov.w	r2, #2
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     79c:	bf54      	ite	pl
     79e:	605a      	strpl	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7a0:	601a      	strmi	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7a2:	2201      	movs	r2, #1
     7a4:	4b1e      	ldr	r3, [pc, #120]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     7a6:	06c1      	lsls	r1, r0, #27
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7a8:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7aa:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7ac:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7ae:	f04f 0202 	mov.w	r2, #2
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     7b2:	bf54      	ite	pl
     7b4:	605a      	strpl	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7b6:	601a      	strmi	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7b8:	2201      	movs	r2, #1
     7ba:	4b19      	ldr	r3, [pc, #100]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     7bc:	0701      	lsls	r1, r0, #28
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7be:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7c0:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7c2:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7c4:	f04f 0202 	mov.w	r2, #2
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     7c8:	bf54      	ite	pl
     7ca:	605a      	strpl	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7cc:	601a      	strmi	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7ce:	2201      	movs	r2, #1
     7d0:	4b13      	ldr	r3, [pc, #76]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     7d2:	0741      	lsls	r1, r0, #29
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7d4:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7d6:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7d8:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7da:	f04f 0202 	mov.w	r2, #2
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     7de:	bf54      	ite	pl
     7e0:	605a      	strpl	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7e2:	601a      	strmi	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7e4:	2201      	movs	r2, #1
     7e6:	4b0e      	ldr	r3, [pc, #56]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     7e8:	0781      	lsls	r1, r0, #30
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7ea:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7ec:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     7ee:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7f0:	f04f 0202 	mov.w	r2, #2
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     7f4:	bf54      	ite	pl
     7f6:	605a      	strpl	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     7f8:	601a      	strmi	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     7fa:	2201      	movs	r2, #1
     7fc:	4b08      	ldr	r3, [pc, #32]	; (820 <genAI2C_send_byte+0xbc>)
        if (c & (1 << (7 - loop)))
     7fe:	07c1      	lsls	r1, r0, #31
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     800:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     802:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     804:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     806:	f04f 0202 	mov.w	r2, #2
    }

    CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     80a:	f04f 0102 	mov.w	r1, #2
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     80e:	bf4c      	ite	mi
     810:	601a      	strmi	r2, [r3, #0]
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     812:	605a      	strpl	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     814:	2201      	movs	r2, #1
     816:	4b02      	ldr	r3, [pc, #8]	; (820 <genAI2C_send_byte+0xbc>)
     818:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     81a:	605a      	str	r2, [r3, #4]
    CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     81c:	6019      	str	r1, [r3, #0]
}
     81e:	4770      	bx	lr
     820:	40023000 	.word	0x40023000

00000824 <memcpy_LDM_STM>:
#else
/* Test function for read - for gcc */
unsigned int  memcpy_LDM_STM(unsigned int to, unsigned int* from, unsigned int size) __attribute__((naked));
unsigned int  memcpy_LDM_STM(unsigned int to, unsigned int* from, unsigned int size)
{
  __asm("  push  {r4-r7}\n"
     824:	b4f0      	push	{r4, r5, r6, r7}
     826:	2a08      	cmp	r2, #8
     828:	d105      	bne.n	836 <fail>
     82a:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
     82c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     82e:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
     830:	c0f0      	stmia	r0!, {r4, r5, r6, r7}

00000832 <sucess>:
     832:	2000      	movs	r0, #0
     834:	e000      	b.n	838 <return>

00000836 <fail>:
     836:	2001      	movs	r0, #1

00000838 <return>:
     838:	bcf0      	pop	{r4, r5, r6, r7}
     83a:	4770      	bx	lr

0000083c <burst_test>:
{
     83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     840:	b088      	sub	sp, #32
  unsigned int testvalues[] = {0x12345678,0xa5a5a5a5,0x00000000,0xFFFFFFFF,0x01011010,0x02022020,0x03033030,0x04044040};
     842:	466d      	mov	r5, sp
{
     844:	4607      	mov	r7, r0
     846:	460e      	mov	r6, r1
     848:	4690      	mov	r8, r2
  unsigned int testvalues[] = {0x12345678,0xa5a5a5a5,0x00000000,0xFFFFFFFF,0x01011010,0x02022020,0x03033030,0x04044040};
     84a:	4c50      	ldr	r4, [pc, #320]	; (98c <burst_test+0x150>)
     84c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     84e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     850:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  address_start = (base+offset);
     854:	19bc      	adds	r4, r7, r6
  unsigned int testvalues[] = {0x12345678,0xa5a5a5a5,0x00000000,0xFFFFFFFF,0x01011010,0x02022020,0x03033030,0x04044040};
     856:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  printf("Start address 0x%08X\n",address_start);
     85a:	4621      	mov	r1, r4
     85c:	484c      	ldr	r0, [pc, #304]	; (990 <burst_test+0x154>)
     85e:	f000 fef9 	bl	1654 <iprintf>
  printf("End address   0x%08X ignored\n",address_end);
     862:	eb04 0108 	add.w	r1, r4, r8
     866:	484b      	ldr	r0, [pc, #300]	; (994 <burst_test+0x158>)
     868:	f000 fef4 	bl	1654 <iprintf>
  result += memcpy_LDM_STM( address_start, testvalues_ptr, 8);
     86c:	4620      	mov	r0, r4
     86e:	2208      	movs	r2, #8
     870:	4669      	mov	r1, sp
     872:	f7ff ffd7 	bl	824 <memcpy_LDM_STM>
  address_end = (address_start+(8*4)); // Burst test limits range
     876:	f104 0320 	add.w	r3, r4, #32
  for(addr = address_start; addr < address_end; addr = addr + 4)
     87a:	429c      	cmp	r4, r3
  result += memcpy_LDM_STM( address_start, testvalues_ptr, 8);
     87c:	4605      	mov	r5, r0
  for(addr = address_start; addr < address_end; addr = addr + 4)
     87e:	f080 8083 	bcs.w	988 <burst_test+0x14c>
    din = *((volatile unsigned int *)addr);
     882:	59b9      	ldr	r1, [r7, r6]
    if (din != testvalues[cycles])
     884:	9a00      	ldr	r2, [sp, #0]
     886:	4291      	cmp	r1, r2
     888:	d05f      	beq.n	94a <burst_test+0x10e>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     88a:	3404      	adds	r4, #4
     88c:	42a3      	cmp	r3, r4
     88e:	d952      	bls.n	936 <burst_test+0xfa>
      status++;
     890:	2101      	movs	r1, #1
    din = *((volatile unsigned int *)addr);
     892:	6820      	ldr	r0, [r4, #0]
    if (din != testvalues[cycles])
     894:	9a01      	ldr	r2, [sp, #4]
  for(addr = address_start; addr < address_end; addr = addr + 4)
     896:	3404      	adds	r4, #4
    if (din != testvalues[cycles])
     898:	4290      	cmp	r0, r2
     89a:	d05d      	beq.n	958 <burst_test+0x11c>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     89c:	42a3      	cmp	r3, r4
      status++;
     89e:	f101 0101 	add.w	r1, r1, #1
    cycles++;
     8a2:	bf98      	it	ls
     8a4:	2202      	movls	r2, #2
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8a6:	d948      	bls.n	93a <burst_test+0xfe>
    din = *((volatile unsigned int *)addr);
     8a8:	6820      	ldr	r0, [r4, #0]
    if (din != testvalues[cycles])
     8aa:	9a02      	ldr	r2, [sp, #8]
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8ac:	3404      	adds	r4, #4
    if (din != testvalues[cycles])
     8ae:	4290      	cmp	r0, r2
     8b0:	d056      	beq.n	960 <burst_test+0x124>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8b2:	42a3      	cmp	r3, r4
      status++;
     8b4:	f101 0101 	add.w	r1, r1, #1
    cycles++;
     8b8:	bf98      	it	ls
     8ba:	2203      	movls	r2, #3
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8bc:	d93d      	bls.n	93a <burst_test+0xfe>
    din = *((volatile unsigned int *)addr);
     8be:	6820      	ldr	r0, [r4, #0]
    if (din != testvalues[cycles])
     8c0:	9a03      	ldr	r2, [sp, #12]
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8c2:	3404      	adds	r4, #4
    if (din != testvalues[cycles])
     8c4:	4290      	cmp	r0, r2
     8c6:	d04f      	beq.n	968 <burst_test+0x12c>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8c8:	42a3      	cmp	r3, r4
      status++;
     8ca:	f101 0101 	add.w	r1, r1, #1
    cycles++;
     8ce:	bf98      	it	ls
     8d0:	2204      	movls	r2, #4
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8d2:	d932      	bls.n	93a <burst_test+0xfe>
    din = *((volatile unsigned int *)addr);
     8d4:	6820      	ldr	r0, [r4, #0]
    if (din != testvalues[cycles])
     8d6:	9a04      	ldr	r2, [sp, #16]
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8d8:	3404      	adds	r4, #4
    if (din != testvalues[cycles])
     8da:	4290      	cmp	r0, r2
     8dc:	d048      	beq.n	970 <burst_test+0x134>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8de:	42a3      	cmp	r3, r4
      status++;
     8e0:	f101 0101 	add.w	r1, r1, #1
    cycles++;
     8e4:	bf98      	it	ls
     8e6:	2205      	movls	r2, #5
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8e8:	d927      	bls.n	93a <burst_test+0xfe>
    din = *((volatile unsigned int *)addr);
     8ea:	6820      	ldr	r0, [r4, #0]
    if (din != testvalues[cycles])
     8ec:	9a05      	ldr	r2, [sp, #20]
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8ee:	3404      	adds	r4, #4
    if (din != testvalues[cycles])
     8f0:	4290      	cmp	r0, r2
     8f2:	d041      	beq.n	978 <burst_test+0x13c>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8f4:	42a3      	cmp	r3, r4
      status++;
     8f6:	f101 0101 	add.w	r1, r1, #1
    cycles++;
     8fa:	bf98      	it	ls
     8fc:	2206      	movls	r2, #6
  for(addr = address_start; addr < address_end; addr = addr + 4)
     8fe:	d91c      	bls.n	93a <burst_test+0xfe>
    din = *((volatile unsigned int *)addr);
     900:	6820      	ldr	r0, [r4, #0]
    if (din != testvalues[cycles])
     902:	9a06      	ldr	r2, [sp, #24]
  for(addr = address_start; addr < address_end; addr = addr + 4)
     904:	3404      	adds	r4, #4
    if (din != testvalues[cycles])
     906:	4290      	cmp	r0, r2
     908:	d03a      	beq.n	980 <burst_test+0x144>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     90a:	42a3      	cmp	r3, r4
      status++;
     90c:	f101 0101 	add.w	r1, r1, #1
    cycles++;
     910:	bf98      	it	ls
     912:	2207      	movls	r2, #7
  for(addr = address_start; addr < address_end; addr = addr + 4)
     914:	d911      	bls.n	93a <burst_test+0xfe>
    din = *((volatile unsigned int *)addr);
     916:	6822      	ldr	r2, [r4, #0]
    if (din != testvalues[cycles])
     918:	9b07      	ldr	r3, [sp, #28]
     91a:	429a      	cmp	r2, r3
    cycles++;
     91c:	f04f 0208 	mov.w	r2, #8
      status++;
     920:	bf18      	it	ne
     922:	3101      	addne	r1, #1
  if (status == PASS)
     924:	b949      	cbnz	r1, 93a <burst_test+0xfe>
    printf("Pass %d locations tested\n",cycles);
     926:	4611      	mov	r1, r2
     928:	481b      	ldr	r0, [pc, #108]	; (998 <burst_test+0x15c>)
     92a:	f000 fe93 	bl	1654 <iprintf>
}
     92e:	4628      	mov	r0, r5
     930:	b008      	add	sp, #32
     932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cycles++;
     936:	2201      	movs	r2, #1
      status++;
     938:	4611      	mov	r1, r2
    result++;
     93a:	3501      	adds	r5, #1
    printf("Fail %d errors of %d locations\n",status,cycles);
     93c:	4817      	ldr	r0, [pc, #92]	; (99c <burst_test+0x160>)
     93e:	f000 fe89 	bl	1654 <iprintf>
}
     942:	4628      	mov	r0, r5
     944:	b008      	add	sp, #32
     946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for(addr = address_start; addr < address_end; addr = addr + 4)
     94a:	3404      	adds	r4, #4
     94c:	42a3      	cmp	r3, r4
  status = PASS;
     94e:	bf88      	it	hi
     950:	2100      	movhi	r1, #0
  for(addr = address_start; addr < address_end; addr = addr + 4)
     952:	d89e      	bhi.n	892 <burst_test+0x56>
    cycles++;
     954:	2201      	movs	r2, #1
     956:	e7e6      	b.n	926 <burst_test+0xea>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     958:	42a3      	cmp	r3, r4
     95a:	d8a5      	bhi.n	8a8 <burst_test+0x6c>
    cycles++;
     95c:	2202      	movs	r2, #2
     95e:	e7e1      	b.n	924 <burst_test+0xe8>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     960:	42a3      	cmp	r3, r4
     962:	d8ac      	bhi.n	8be <burst_test+0x82>
    cycles++;
     964:	2203      	movs	r2, #3
     966:	e7dd      	b.n	924 <burst_test+0xe8>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     968:	42a3      	cmp	r3, r4
     96a:	d8b3      	bhi.n	8d4 <burst_test+0x98>
    cycles++;
     96c:	2204      	movs	r2, #4
     96e:	e7d9      	b.n	924 <burst_test+0xe8>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     970:	42a3      	cmp	r3, r4
     972:	d8ba      	bhi.n	8ea <burst_test+0xae>
    cycles++;
     974:	2205      	movs	r2, #5
     976:	e7d5      	b.n	924 <burst_test+0xe8>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     978:	42a3      	cmp	r3, r4
     97a:	d8c1      	bhi.n	900 <burst_test+0xc4>
    cycles++;
     97c:	2206      	movs	r2, #6
     97e:	e7d1      	b.n	924 <burst_test+0xe8>
  for(addr = address_start; addr < address_end; addr = addr + 4)
     980:	42a3      	cmp	r3, r4
     982:	d8c8      	bhi.n	916 <burst_test+0xda>
    cycles++;
     984:	2207      	movs	r2, #7
     986:	e7cd      	b.n	924 <burst_test+0xe8>
  cycles = 0;
     988:	2200      	movs	r2, #0
     98a:	e7cc      	b.n	926 <burst_test+0xea>
     98c:	0000256c 	.word	0x0000256c
     990:	0000258c 	.word	0x0000258c
     994:	00002990 	.word	0x00002990
     998:	000025d8 	.word	0x000025d8
     99c:	000025f4 	.word	0x000025f4

000009a0 <main>:
        "  bx lr \n"  );
}
#endif

int main(void)
{
     9a0:	b538      	push	{r3, r4, r5, lr}

  unsigned val, addr;

  result=PASS;
  // UART init
  UartStdOutInit();
     9a2:	f000 f91b 	bl	bdc <UartStdOutInit>

  puts("\nSSE-050 - Design Test for Cortex-M3 - revision $Revision: 243483 $\n");
     9a6:	4866      	ldr	r0, [pc, #408]	; (b40 <main+0x1a0>)
     9a8:	f000 fec8 	bl	173c <puts>

  printf("*** Testing Audio\n");
     9ac:	4865      	ldr	r0, [pc, #404]	; (b44 <main+0x1a4>)
     9ae:	f000 fec5 	bl	173c <puts>
  CM3DS_MPS2_i2c_send_byte(0x65);
     9b2:	2065      	movs	r0, #101	; 0x65
     9b4:	f000 fa94 	bl	ee0 <CM3DS_MPS2_i2c_send_byte>

  printf("*** Single PSRAM read\n");
     9b8:	4863      	ldr	r0, [pc, #396]	; (b48 <main+0x1a8>)
     9ba:	f000 febf 	bl	173c <puts>
  addr = (CM3DS_MPS2_PSRAM_BASE+8);
  *((volatile unsigned short int *)addr) = (unsigned short int)0x55AA;
     9be:	f245 52aa 	movw	r2, #21930	; 0x55aa
     9c2:	4b62      	ldr	r3, [pc, #392]	; (b4c <main+0x1ac>)
  val = *((volatile unsigned short int *)addr);
  // Try reading again
  val = *((volatile unsigned short int *)addr);

  printf("*** Testing SCC registers\n");
     9c4:	4862      	ldr	r0, [pc, #392]	; (b50 <main+0x1b0>)
  *((volatile unsigned short int *)addr) = (unsigned short int)0x55AA;
     9c6:	801a      	strh	r2, [r3, #0]
  val = *((volatile unsigned short int *)addr);
     9c8:	881a      	ldrh	r2, [r3, #0]
  val = *((volatile unsigned short int *)addr);
     9ca:	881b      	ldrh	r3, [r3, #0]
  printf("*** Testing SCC registers\n");
     9cc:	f000 feb6 	bl	173c <puts>
  result += result + test_scc(CM3DS_MPS2_SCC_BASE);
     9d0:	4860      	ldr	r0, [pc, #384]	; (b54 <main+0x1b4>)
     9d2:	f7ff fddd 	bl	590 <test_scc>
     9d6:	4604      	mov	r4, r0
  printf("*** Testing Reading FPGA control registers\n");
     9d8:	485f      	ldr	r0, [pc, #380]	; (b58 <main+0x1b8>)
     9da:	f000 feaf 	bl	173c <puts>
  result += result + test_fpgareg(CM3DS_MPS2_FPGASYS_BASE);
     9de:	485f      	ldr	r0, [pc, #380]	; (b5c <main+0x1bc>)
     9e0:	f7ff fc8a 	bl	2f8 <test_fpgareg>
     9e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  printf("*** Sending data from LCD I2C\n");
     9e8:	485d      	ldr	r0, [pc, #372]	; (b60 <main+0x1c0>)
     9ea:	f000 fea7 	bl	173c <puts>
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     9ee:	2502      	movs	r5, #2
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9f0:	2201      	movs	r2, #1
     9f2:	4b5c      	ldr	r3, [pc, #368]	; (b64 <main+0x1c4>)
  genAI2C_send_byte(0x45,CM3DS_MPS2_CLCDTOUCH_BASE);
  printf("*** Testing PSRAM\n");
     9f4:	485c      	ldr	r0, [pc, #368]	; (b68 <main+0x1c8>)
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9f6:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     9f8:	605d      	str	r5, [r3, #4]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     9fa:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9fc:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9fe:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a00:	601d      	str	r5, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a02:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a04:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a06:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a08:	605d      	str	r5, [r3, #4]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a0a:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a0c:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a0e:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a10:	605d      	str	r5, [r3, #4]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a12:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a14:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a16:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a18:	605d      	str	r5, [r3, #4]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a1a:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a1c:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a1e:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a20:	601d      	str	r5, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a22:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a24:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a26:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a28:	605d      	str	r5, [r3, #4]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a2a:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a2c:	605a      	str	r2, [r3, #4]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a2e:	605a      	str	r2, [r3, #4]
            CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a30:	601d      	str	r5, [r3, #0]
        CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a32:	601a      	str	r2, [r3, #0]
        CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a34:	605a      	str	r2, [r3, #4]
    CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a36:	601d      	str	r5, [r3, #0]
  printf("*** Testing PSRAM\n");
     a38:	f000 fe80 	bl	173c <puts>
  result += test(CM3DS_MPS2_PSRAM_BASE,0x0,CM3DS_MPS2_PSRAM_SIZE);
     a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     a40:	2100      	movs	r1, #0
     a42:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
     a46:	f7ff fbd3 	bl	1f0 <test>
     a4a:	4404      	add	r4, r0
  printf("*** Testing PSRAM burst\n");
     a4c:	4847      	ldr	r0, [pc, #284]	; (b6c <main+0x1cc>)
     a4e:	f000 fe75 	bl	173c <puts>
  result += burst_test(CM3DS_MPS2_PSRAM_BASE,0x800000,CM3DS_MPS2_PSRAM_SIZE);
     a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     a56:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
     a5a:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
     a5e:	f7ff feed 	bl	83c <burst_test>
     a62:	4404      	add	r4, r0
#ifndef FPGA_IMAGE
  // Testbench has a memory in place of Ethernet, to prove accesses
  // So this test will not pass on the Ethernet
  printf("*** Testing Ethernet\n");
     a64:	4842      	ldr	r0, [pc, #264]	; (b70 <main+0x1d0>)
     a66:	f000 fe69 	bl	173c <puts>
  result += test(CM3DS_MPS2_ETH_BASE,0x0,ETH_SIZE);
     a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
     a6e:	2100      	movs	r1, #0
     a70:	4840      	ldr	r0, [pc, #256]	; (b74 <main+0x1d4>)
     a72:	f7ff fbbd 	bl	1f0 <test>
     a76:	4404      	add	r4, r0
#endif
  printf("*** Testing ZBT1\n");
     a78:	483f      	ldr	r0, [pc, #252]	; (b78 <main+0x1d8>)
     a7a:	f000 fe5f 	bl	173c <puts>
  result += test(CM3DS_MPS2_ZBT1_BASE,0x0,CM3DS_MPS2_ZBT1_SIZE);
     a7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     a82:	2100      	movs	r1, #0
     a84:	4610      	mov	r0, r2
     a86:	f7ff fbb3 	bl	1f0 <test>
     a8a:	4404      	add	r4, r0
  printf("*** Testing ZBT1 burst\n");
     a8c:	483b      	ldr	r0, [pc, #236]	; (b7c <main+0x1dc>)
     a8e:	f000 fe55 	bl	173c <puts>
  result += burst_test(CM3DS_MPS2_ZBT1_BASE,0x0,CM3DS_MPS2_ZBT1_SIZE);
     a92:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     a96:	2100      	movs	r1, #0
     a98:	4610      	mov	r0, r2
     a9a:	f7ff fecf 	bl	83c <burst_test>
     a9e:	4404      	add	r4, r0
  printf("*** Testing ZBT2 and ZBT3\n");
     aa0:	4837      	ldr	r0, [pc, #220]	; (b80 <main+0x1e0>)
     aa2:	f000 fe4b 	bl	173c <puts>
  result += test(CM3DS_MPS2_ZBT2_BASE,0x0,CM3DS_MPS2_ZBT2_SIZE);
     aa6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     aaa:	2100      	movs	r1, #0
     aac:	f04f 5001 	mov.w	r0, #541065216	; 0x20400000
     ab0:	f7ff fb9e 	bl	1f0 <test>
     ab4:	4404      	add	r4, r0
  printf("*** Testing block RAM\n");
     ab6:	4833      	ldr	r0, [pc, #204]	; (b84 <main+0x1e4>)
     ab8:	f000 fe40 	bl	173c <puts>
  result += test(CM3DS_MPS2_FLASH_BASE,0x0,CM3DS_MPS2_FLASH_SIZE);
     abc:	2100      	movs	r1, #0
     abe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     ac2:	4608      	mov	r0, r1
     ac4:	f7ff fb94 	bl	1f0 <test>
     ac8:	4404      	add	r4, r0

#ifndef FPGA_IMAGE
  // On testbench only, external SPI is self looped back.
  // This test will not work on MPS2 board
  printf("*** Testing external SPI: self loop back test\n");
     aca:	482f      	ldr	r0, [pc, #188]	; (b88 <main+0x1e8>)
     acc:	f000 fe36 	bl	173c <puts>
  // Program external SPI to master, Motorola SPI frame format SP0=0 SPH=0, data size 16bits, PCLKOUT half of PCLK
  // transmit 0xFFFF as data
  printf("Setting up external SPI\n");
     ad0:	482e      	ldr	r0, [pc, #184]	; (b8c <main+0x1ec>)
     ad2:	f000 fe33 	bl	173c <puts>
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0000)) = 0xF;
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0008)) = 0x5555;
     ad6:	f245 5155 	movw	r1, #21845	; 0x5555
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0000)) = 0xF;
     ada:	200f      	movs	r0, #15
     adc:	4b2c      	ldr	r3, [pc, #176]	; (b90 <main+0x1f0>)
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0008)) = 0x5555;
     ade:	4a2d      	ldr	r2, [pc, #180]	; (b94 <main+0x1f4>)
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0000)) = 0xF;
     ae0:	6018      	str	r0, [r3, #0]
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0008)) = 0x5555;
     ae2:	6011      	str	r1, [r2, #0]
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0010)) = 0x2;
  printf("Enable external SPI\n");
     ae4:	482c      	ldr	r0, [pc, #176]	; (b98 <main+0x1f8>)
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0010)) = 0x2;
     ae6:	611d      	str	r5, [r3, #16]
  printf("Enable external SPI\n");
     ae8:	f000 fe28 	bl	173c <puts>
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0004)) = 0x2;
     aec:	4b2b      	ldr	r3, [pc, #172]	; (b9c <main+0x1fc>)
  printf("Wait for receive data to be captured\n");
     aee:	482c      	ldr	r0, [pc, #176]	; (ba0 <main+0x200>)
  *((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0004)) = 0x2;
     af0:	601d      	str	r5, [r3, #0]
  printf("Wait for receive data to be captured\n");
     af2:	f000 fe23 	bl	173c <puts>
  while ((*((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x000c)) & 0x4) == 0);
     af6:	4a2b      	ldr	r2, [pc, #172]	; (ba4 <main+0x204>)
     af8:	6813      	ldr	r3, [r2, #0]
     afa:	075b      	lsls	r3, r3, #29
     afc:	d5fc      	bpl.n	af8 <main+0x158>
  printf("Check receive data is the same as tranmit data\n");
     afe:	482a      	ldr	r0, [pc, #168]	; (ba8 <main+0x208>)
     b00:	f000 fe1c 	bl	173c <puts>
  if (*((volatile unsigned int *)(CM3DS_MPS2_EXTSPI_BASE + 0x0008)) != 0x5555) {
     b04:	f245 5355 	movw	r3, #21845	; 0x5555
     b08:	4a22      	ldr	r2, [pc, #136]	; (b94 <main+0x1f4>)
     b0a:	6812      	ldr	r2, [r2, #0]
     b0c:	429a      	cmp	r2, r3
     b0e:	d003      	beq.n	b18 <main+0x178>
    printf("Fail\n");
     b10:	4826      	ldr	r0, [pc, #152]	; (bac <main+0x20c>)
     b12:	f000 fe13 	bl	173c <puts>
    result++;
     b16:	3401      	adds	r4, #1
  }
    printf("Pass\n");
     b18:	4825      	ldr	r0, [pc, #148]	; (bb0 <main+0x210>)
     b1a:	f000 fe0f 	bl	173c <puts>
#endif

  if (result == PASS)
     b1e:	b154      	cbz	r4, b36 <main+0x196>
  {
    printf("\n\n\n----------\n** TEST PASSED **\n----------\n\n\n\n");
  } else {
    if (result == 1)
     b20:	2c01      	cmp	r4, #1
    {
      printf("\n\n\nFail, %u failure\n\n\n\n",result);
     b22:	4621      	mov	r1, r4
     b24:	bf0c      	ite	eq
     b26:	4823      	ldreq	r0, [pc, #140]	; (bb4 <main+0x214>)
    } else {
      printf("\n\n\nFail, %u failures\n\n\n\n",result);
     b28:	4823      	ldrne	r0, [pc, #140]	; (bb8 <main+0x218>)
     b2a:	f000 fd93 	bl	1654 <iprintf>
    }
  }

  // End simulation
  UartEndSimulation();
     b2e:	f000 f86d 	bl	c0c <UartEndSimulation>
  }
     b32:	2000      	movs	r0, #0
     b34:	bd38      	pop	{r3, r4, r5, pc}
    printf("\n\n\n----------\n** TEST PASSED **\n----------\n\n\n\n");
     b36:	4821      	ldr	r0, [pc, #132]	; (bbc <main+0x21c>)
     b38:	f000 fe00 	bl	173c <puts>
     b3c:	e7f7      	b.n	b2e <main+0x18e>
     b3e:	bf00      	nop
     b40:	000029b0 	.word	0x000029b0
     b44:	000029f8 	.word	0x000029f8
     b48:	00002a0c 	.word	0x00002a0c
     b4c:	21000008 	.word	0x21000008
     b50:	00002a24 	.word	0x00002a24
     b54:	4002f000 	.word	0x4002f000
     b58:	00002a40 	.word	0x00002a40
     b5c:	40028000 	.word	0x40028000
     b60:	00002a6c 	.word	0x00002a6c
     b64:	40023000 	.word	0x40023000
     b68:	00002a8c 	.word	0x00002a8c
     b6c:	00002aa0 	.word	0x00002aa0
     b70:	00002ab8 	.word	0x00002ab8
     b74:	40200000 	.word	0x40200000
     b78:	00002ad0 	.word	0x00002ad0
     b7c:	00002ae4 	.word	0x00002ae4
     b80:	00002afc 	.word	0x00002afc
     b84:	00002b18 	.word	0x00002b18
     b88:	00002b30 	.word	0x00002b30
     b8c:	00002b60 	.word	0x00002b60
     b90:	40020000 	.word	0x40020000
     b94:	40020008 	.word	0x40020008
     b98:	00002b78 	.word	0x00002b78
     b9c:	40020004 	.word	0x40020004
     ba0:	00002b8c 	.word	0x00002b8c
     ba4:	4002000c 	.word	0x4002000c
     ba8:	00002bb4 	.word	0x00002bb4
     bac:	000026d0 	.word	0x000026d0
     bb0:	00002760 	.word	0x00002760
     bb4:	00002c14 	.word	0x00002c14
     bb8:	00002c2c 	.word	0x00002c2c
     bbc:	00002be4 	.word	0x00002be4

00000bc0 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     bc0:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     bc2:	4616      	mov	r6, r2
     bc4:	b13a      	cbz	r2, bd6 <_write+0x16>
     bc6:	1e4c      	subs	r4, r1, #1
     bc8:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     bca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     bce:	f000 f80d 	bl	bec <UartPutc>
  for (i=0; i<len;i++) {
     bd2:	42ac      	cmp	r4, r5
     bd4:	d1f9      	bne.n	bca <_write+0xa>
    }
  return len;
}
     bd6:	4630      	mov	r0, r6
     bd8:	bd70      	pop	{r4, r5, r6, pc}
     bda:	bf00      	nop

00000bdc <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     be0:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     be2:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     be4:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     be6:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     be8:	4770      	bx	lr
     bea:	bf00      	nop

00000bec <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     bec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     bf0:	6853      	ldr	r3, [r2, #4]
     bf2:	07db      	lsls	r3, r3, #31
     bf4:	d4fc      	bmi.n	bf0 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     bf6:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     bf8:	4770      	bx	lr
     bfa:	bf00      	nop

00000bfc <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     bfc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     c00:	6853      	ldr	r3, [r2, #4]
     c02:	079b      	lsls	r3, r3, #30
     c04:	d5fc      	bpl.n	c00 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     c06:	6810      	ldr	r0, [r2, #0]
}
     c08:	b2c0      	uxtb	r0, r0
     c0a:	4770      	bx	lr

00000c0c <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     c10:	685a      	ldr	r2, [r3, #4]
     c12:	07d2      	lsls	r2, r2, #31
     c14:	d4fc      	bmi.n	c10 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     c16:	2204      	movs	r2, #4
     c18:	601a      	str	r2, [r3, #0]
     c1a:	e7fe      	b.n	c1a <UartEndSimulation+0xe>

00000c1c <CM3DS_MPS2_timer_EnableIRQ>:
 * @brief  Enable the microcontroller timer interrupts.
 */

 void CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     c1c:	6803      	ldr	r3, [r0, #0]
     c1e:	f043 0308 	orr.w	r3, r3, #8
     c22:	6003      	str	r3, [r0, #0]
 }
     c24:	4770      	bx	lr
     c26:	bf00      	nop

00000c28 <CM3DS_MPS2_timer_DisableIRQ>:
 * @brief  Disable the microcontroller timer interrutps.
 */

 void CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     c28:	6803      	ldr	r3, [r0, #0]
     c2a:	f023 0308 	bic.w	r3, r3, #8
     c2e:	6003      	str	r3, [r0, #0]
 }
     c30:	4770      	bx	lr
     c32:	bf00      	nop

00000c34 <CM3DS_MPS2_timer_StartTimer>:
 * @brief  Start the Timer.
 */

 void CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     c34:	6803      	ldr	r3, [r0, #0]
     c36:	f043 0301 	orr.w	r3, r3, #1
     c3a:	6003      	str	r3, [r0, #0]
 }
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop

00000c40 <CM3DS_MPS2_timer_StopTimer>:
 * @brief  Stop the Timer.
 */

 void CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     c40:	6803      	ldr	r3, [r0, #0]
     c42:	f023 0301 	bic.w	r3, r3, #1
     c46:	6003      	str	r3, [r0, #0]
 }
     c48:	4770      	bx	lr
     c4a:	bf00      	nop

00000c4c <CM3DS_MPS2_timer_GetValue>:
 * @brief  Returns the current value of the timer.
 */

 uint32_t CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->VALUE;
     c4c:	6840      	ldr	r0, [r0, #4]
 }
     c4e:	4770      	bx	lr

00000c50 <CM3DS_MPS2_timer_SetValue>:
 * @brief  Sets the timer to the specified value.
 */

 void CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->VALUE = value;
     c50:	6041      	str	r1, [r0, #4]
 }
     c52:	4770      	bx	lr

00000c54 <CM3DS_MPS2_timer_GetReload>:
 * @brief  Returns the reload value of the timer. The reload value is the value which the timer is set to after an underflow occurs.
 */

 uint32_t CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->RELOAD;
     c54:	6880      	ldr	r0, [r0, #8]
 }
     c56:	4770      	bx	lr

00000c58 <CM3DS_MPS2_timer_SetReload>:
 * @brief  Sets the reload value of the timer to the specified value. The reload value is the value which the timer is set to after an underflow occurs.
 */

 void CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->RELOAD = value;
     c58:	6081      	str	r1, [r0, #8]
 }
     c5a:	4770      	bx	lr

00000c5c <CM3DS_MPS2_timer_ClearIRQ>:
 * @brief  Clears the timer IRQ if set.
 */

 void CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->INTCLEAR = CM3DS_MPS2_TIMER_INTCLEAR_Msk;
     c5c:	2301      	movs	r3, #1
     c5e:	60c3      	str	r3, [r0, #12]
 }
     c60:	4770      	bx	lr
     c62:	bf00      	nop

00000c64 <CM3DS_MPS2_timer_StatusIRQ>:
 * @brief  Returns the IRQ status of the timer in question.
 */

 uint32_t  CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->INTSTATUS;
     c64:	68c0      	ldr	r0, [r0, #12]
 }
     c66:	4770      	bx	lr

00000c68 <CM3DS_MPS2_timer_Init_IntClock>:
 */

  void CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     c68:	2300      	movs	r3, #0
     c6a:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     c6c:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     c6e:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                          /* non zero - enable IRQ */
     c70:	b912      	cbnz	r2, c78 <CM3DS_MPS2_timer_Init_IntClock+0x10>
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else{                                                                                   /* zero - do not enable IRQ */
         CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk);                                       /* enable timer */
     c72:	2301      	movs	r3, #1
     c74:	6003      	str	r3, [r0, #0]
        }
 }
     c76:	4770      	bx	lr
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
     c78:	2309      	movs	r3, #9
     c7a:	6003      	str	r3, [r0, #0]
     c7c:	4770      	bx	lr
     c7e:	bf00      	nop

00000c80 <CM3DS_MPS2_timer_Init_ExtClock>:
 */

 void CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     c80:	2300      	movs	r3, #0
     c82:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     c84:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     c86:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     c88:	b912      	cbnz	r2, c90 <CM3DS_MPS2_timer_Init_ExtClock+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk |CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     c8a:	2305      	movs	r3, #5
     c8c:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk);                                   /* enable timer */
         }
 }
     c8e:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     c90:	230d      	movs	r3, #13
     c92:	6003      	str	r3, [r0, #0]
     c94:	4770      	bx	lr
     c96:	bf00      	nop

00000c98 <CM3DS_MPS2_timer_Init_ExtEnable>:
 */

 void CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     c98:	2300      	movs	r3, #0
     c9a:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     c9c:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     c9e:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     ca0:	b912      	cbnz	r2, ca8 <CM3DS_MPS2_timer_Init_ExtEnable+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     ca2:	2303      	movs	r3, #3
     ca4:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk);                                    /* enable timer */
         }
 }
     ca6:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     ca8:	230b      	movs	r3, #11
     caa:	6003      	str	r3, [r0, #0]
     cac:	4770      	bx	lr
     cae:	bf00      	nop

00000cb0 <CM3DS_MPS2_uart_init>:
 * @return 1 if initialisation failed, 0 if successful.
 */

 uint32_t CM3DS_MPS2_uart_init(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, uint32_t divider, uint32_t tx_en,
                           uint32_t rx_en, uint32_t tx_irq_en, uint32_t rx_irq_en, uint32_t tx_ovrirq_en, uint32_t rx_ovrirq_en)
 {
     cb0:	b4f0      	push	{r4, r5, r6, r7}
       uint32_t new_ctrl=0;

       if (tx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_TXEN_Msk;
     cb2:	3200      	adds	r2, #0
     cb4:	bf18      	it	ne
     cb6:	2201      	movne	r2, #1
 {
     cb8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
     cbc:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
       if (rx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_RXEN_Msk;
     cc0:	b10b      	cbz	r3, cc6 <CM3DS_MPS2_uart_init+0x16>
     cc2:	f042 0202 	orr.w	r2, r2, #2
       if (tx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_TXIRQEN_Msk;
     cc6:	b10f      	cbz	r7, ccc <CM3DS_MPS2_uart_init+0x1c>
     cc8:	f042 0204 	orr.w	r2, r2, #4
       if (rx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_RXIRQEN_Msk;
     ccc:	b10e      	cbz	r6, cd2 <CM3DS_MPS2_uart_init+0x22>
     cce:	f042 0208 	orr.w	r2, r2, #8
       if (tx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_TXORIRQEN_Msk;
     cd2:	b10d      	cbz	r5, cd8 <CM3DS_MPS2_uart_init+0x28>
     cd4:	f042 0210 	orr.w	r2, r2, #16
       if (rx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_RXORIRQEN_Msk;
     cd8:	b10c      	cbz	r4, cde <CM3DS_MPS2_uart_init+0x2e>
     cda:	f042 0220 	orr.w	r2, r2, #32

       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     cde:	2300      	movs	r3, #0
       CM3DS_MPS2_UART->BAUDDIV = divider;
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */

       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
       else return 0;
 }
     ce0:	bcf0      	pop	{r4, r5, r6, r7}
       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     ce2:	6083      	str	r3, [r0, #8]
       CM3DS_MPS2_UART->BAUDDIV = divider;
     ce4:	6101      	str	r1, [r0, #16]
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */
     ce6:	6082      	str	r2, [r0, #8]
       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
     ce8:	6843      	ldr	r3, [r0, #4]
     cea:	f013 0f0c 	tst.w	r3, #12
 }
     cee:	bf14      	ite	ne
     cf0:	2001      	movne	r0, #1
     cf2:	2000      	moveq	r0, #0
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <CM3DS_MPS2_uart_GetRxBufferFull>:
 * @brief  Returns whether the RX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk)>> CM3DS_MPS2_UART_STATE_RXBF_Pos);
     cf8:	6840      	ldr	r0, [r0, #4]
 }
     cfa:	f3c0 0040 	ubfx	r0, r0, #1, #1
     cfe:	4770      	bx	lr

00000d00 <CM3DS_MPS2_uart_GetTxBufferFull>:
 * @brief  Returns whether the TX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk)>> CM3DS_MPS2_UART_STATE_TXBF_Pos);
     d00:	6840      	ldr	r0, [r0, #4]
 }
     d02:	f000 0001 	and.w	r0, r0, #1
     d06:	4770      	bx	lr

00000d08 <CM3DS_MPS2_uart_SendChar>:
 * @brief  Sends a character to the TX buffer for transmission.
 */

 void CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, char txchar)
 {
       while(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk);
     d08:	6843      	ldr	r3, [r0, #4]
     d0a:	07db      	lsls	r3, r3, #31
     d0c:	d4fc      	bmi.n	d08 <CM3DS_MPS2_uart_SendChar>
       CM3DS_MPS2_UART->DATA = (uint32_t)txchar;
     d0e:	6001      	str	r1, [r0, #0]
 }
     d10:	4770      	bx	lr
     d12:	bf00      	nop

00000d14 <CM3DS_MPS2_uart_ReceiveChar>:
 * @brief  returns the character from the RX buffer which has been received.
 */

 char CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       while(!(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk));
     d14:	6843      	ldr	r3, [r0, #4]
     d16:	079b      	lsls	r3, r3, #30
     d18:	d5fc      	bpl.n	d14 <CM3DS_MPS2_uart_ReceiveChar>
       return (char)(CM3DS_MPS2_UART->DATA);
     d1a:	6800      	ldr	r0, [r0, #0]
 }
     d1c:	b2c0      	uxtb	r0, r0
     d1e:	4770      	bx	lr

00000d20 <CM3DS_MPS2_uart_GetOverrunStatus>:
 */


 uint32_t CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     d20:	6840      	ldr	r0, [r0, #4]
 }
     d22:	f3c0 0081 	ubfx	r0, r0, #2, #2
     d26:	4770      	bx	lr

00000d28 <CM3DS_MPS2_uart_ClearOverrunStatus>:
 * @brief  Clears the overrun status of both the RX & TX buffers and then returns the current overrun status.
 */

 uint32_t CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->STATE = (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk);
     d28:	230c      	movs	r3, #12
     d2a:	6043      	str	r3, [r0, #4]
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     d2c:	6840      	ldr	r0, [r0, #4]
 }
     d2e:	f3c0 0081 	ubfx	r0, r0, #2, #2
     d32:	4770      	bx	lr

00000d34 <CM3DS_MPS2_uart_GetBaudDivider>:
 * @brief  Returns the current UART Baud rate divider. Note that the Baud rate divider is the difference between the clock frequency and the Baud frequency.
 */

 uint32_t CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return CM3DS_MPS2_UART->BAUDDIV;
     d34:	6900      	ldr	r0, [r0, #16]
 }
     d36:	4770      	bx	lr

00000d38 <CM3DS_MPS2_uart_GetTxIRQStatus>:
 * @brief  Returns the TX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_TXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_TXIRQ_Pos);
     d38:	68c0      	ldr	r0, [r0, #12]
 }
     d3a:	f000 0001 	and.w	r0, r0, #1
     d3e:	4770      	bx	lr

00000d40 <CM3DS_MPS2_uart_GetRxIRQStatus>:
 * @brief  Returns the RX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_RXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_RXIRQ_Pos);
     d40:	68c0      	ldr	r0, [r0, #12]
 }
     d42:	f3c0 0040 	ubfx	r0, r0, #1, #1
     d46:	4770      	bx	lr

00000d48 <CM3DS_MPS2_uart_ClearTxIRQ>:
 * @brief  Clears the TX buffer full interrupt status.
 */

 void CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_TXIRQ_Msk;
     d48:	2301      	movs	r3, #1
     d4a:	60c3      	str	r3, [r0, #12]
 }
     d4c:	4770      	bx	lr
     d4e:	bf00      	nop

00000d50 <CM3DS_MPS2_uart_ClearRxIRQ>:
 * @brief  Clears the RX interrupt status.
 */

 void CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_RXIRQ_Msk;
     d50:	2302      	movs	r3, #2
     d52:	60c3      	str	r3, [r0, #12]
 }
     d54:	4770      	bx	lr
     d56:	bf00      	nop

00000d58 <CM3DS_MPS2_gpio_SetOutEnable>:
 * @brief  Sets pins on a port as an output. Set the bit corresponding to the pin number to 1 for output i.e. Set bit 1 of outenable to 1 to set pin 1 as an output. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableset)
 {
       CM3DS_MPS2_GPIO->OUTENABLESET = outenableset;
     d58:	6101      	str	r1, [r0, #16]
 }
     d5a:	4770      	bx	lr

00000d5c <CM3DS_MPS2_gpio_ClrOutEnable>:
 * @brief  Sets pins on a port as an input. Set the bit corresponding to the pin number to 1 for input i.e. Set bit 1 of outenable to 1 to set pin 1 as an input. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableclr)
 {
       CM3DS_MPS2_GPIO->OUTENABLECLR = outenableclr;
     d5c:	6141      	str	r1, [r0, #20]
 }
     d5e:	4770      	bx	lr

00000d60 <CM3DS_MPS2_gpio_GetOutEnable>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set as inputs or outputs i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is an output.
 */

 uint32_t CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->OUTENABLESET;
     d60:	6900      	ldr	r0, [r0, #16]
 }
     d62:	4770      	bx	lr

00000d64 <CM3DS_MPS2_gpio_SetAltFunc>:
 * @brief  enables the alternative function for pins. Set the bit corresponding to the pin number to 1 for alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to its alternative function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncset)
 {
       CM3DS_MPS2_GPIO->ALTFUNCSET = AltFuncset;
     d64:	6181      	str	r1, [r0, #24]
 }
     d66:	4770      	bx	lr

00000d68 <CM3DS_MPS2_gpio_ClrAltFunc>:
 * @brief  disables the alternative function for pins. Set the bit corresponding to the pin number to 1 to disable alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to the orignal output function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncclr)
 {
       CM3DS_MPS2_GPIO->ALTFUNCCLR = AltFuncclr;
     d68:	61c1      	str	r1, [r0, #28]
 }
     d6a:	4770      	bx	lr

00000d6c <CM3DS_MPS2_gpio_GetAltFunc>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set to their alternative or their original output functionality i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is set to its alternative function.
 */

 uint32_t CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->ALTFUNCSET;
     d6c:	6980      	ldr	r0, [r0, #24]
 }
     d6e:	4770      	bx	lr

00000d70 <CM3DS_MPS2_gpio_IntClear>:
 * @brief  Clears the interrupt flag for the specified pin and then returns the new interrupt status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTCLEAR = (1 << Num);
     d70:	2301      	movs	r3, #1
     d72:	fa03 f101 	lsl.w	r1, r3, r1
     d76:	6381      	str	r1, [r0, #56]	; 0x38

       return CM3DS_MPS2_GPIO->INTSTATUS;
     d78:	6b80      	ldr	r0, [r0, #56]	; 0x38
 }
     d7a:	4770      	bx	lr

00000d7c <CM3DS_MPS2_gpio_SetIntEnable>:
 * @brief  Enables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENSET = (1 << Num);
     d7c:	2301      	movs	r3, #1
     d7e:	fa03 f101 	lsl.w	r1, r3, r1
     d82:	6201      	str	r1, [r0, #32]

       return CM3DS_MPS2_GPIO->INTENSET;
     d84:	6a00      	ldr	r0, [r0, #32]
 }
     d86:	4770      	bx	lr

00000d88 <CM3DS_MPS2_gpio_ClrIntEnable>:
 * @brief  Disables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

  uint32_t CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENCLR = (1 << Num);
     d88:	2301      	movs	r3, #1
     d8a:	fa03 f101 	lsl.w	r1, r3, r1
     d8e:	6241      	str	r1, [r0, #36]	; 0x24

       return CM3DS_MPS2_GPIO->INTENCLR;
     d90:	6a40      	ldr	r0, [r0, #36]	; 0x24
 }
     d92:	4770      	bx	lr

00000d94 <CM3DS_MPS2_gpio_SetIntHighLevel>:
 * @brief  Changes the interrupt type for the specified pin to a high level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num); /* Clear INT TYPE bit */
     d94:	2301      	movs	r3, #1
     d96:	fa03 f101 	lsl.w	r1, r3, r1
     d9a:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     d9c:	6301      	str	r1, [r0, #48]	; 0x30
 }
     d9e:	4770      	bx	lr

00000da0 <CM3DS_MPS2_gpio_SetIntRisingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a rising edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num); /* Set INT TYPE bit */
     da0:	2301      	movs	r3, #1
     da2:	fa03 f101 	lsl.w	r1, r3, r1
     da6:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     da8:	6301      	str	r1, [r0, #48]	; 0x30
 }
     daa:	4770      	bx	lr

00000dac <CM3DS_MPS2_gpio_SetIntLowLevel>:
 * @brief  Changes the interrupt type for the specified pin to a low level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num);  /* Clear INT TYPE bit */
     dac:	2301      	movs	r3, #1
     dae:	fa03 f101 	lsl.w	r1, r3, r1
     db2:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     db4:	6341      	str	r1, [r0, #52]	; 0x34
 }
     db6:	4770      	bx	lr

00000db8 <CM3DS_MPS2_gpio_SetIntFallingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a falling edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num);  /* Set INT TYPE bit */
     db8:	2301      	movs	r3, #1
     dba:	fa03 f101 	lsl.w	r1, r3, r1
     dbe:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     dc0:	6341      	str	r1, [r0, #52]	; 0x34
 }
     dc2:	4770      	bx	lr

00000dc4 <CM3DS_MPS2_gpio_MaskedWrite>:
 * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
 */

 void CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t value, uint32_t mask)
 {
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     dc4:	b2d3      	uxtb	r3, r2
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     dc6:	f3c2 2207 	ubfx	r2, r2, #8, #8
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     dca:	f503 7380 	add.w	r3, r3, #256	; 0x100
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     dce:	f502 7200 	add.w	r2, r2, #512	; 0x200
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     dd2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     dd6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 }
     dda:	4770      	bx	lr

00000ddc <CM3DS_MPS2_i2s_config>:
                uint32_t rx_enable, uint32_t rx_int_enable, uint32_t rx_waterlevel)
 {
   uint32_t i2s_control_val;
   // TX water level range from 3 to 0
   // Generate IRQ if TX Fifo space > TX water level
   if (tx_waterlevel > 3) return 1; // Error if out of range
     ddc:	2b03      	cmp	r3, #3
     dde:	d820      	bhi.n	e22 <CM3DS_MPS2_i2s_config+0x46>
 {
     de0:	b410      	push	{r4}
   // RX water level range from 4 to 1
   // Generate IRQ if RX Fifo space < RX water level
   if ((rx_waterlevel > 4)||(rx_waterlevel == 0)) return 1; // Error if out of range
     de2:	9c03      	ldr	r4, [sp, #12]
     de4:	3c01      	subs	r4, #1
     de6:	2c03      	cmp	r4, #3
     de8:	d818      	bhi.n	e1c <CM3DS_MPS2_i2s_config+0x40>
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
                      (tx_waterlevel << CM3DS_MPS2_I2S_CONTROL_TXWLVL_Pos) |
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
                  (tx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXEN_Pos;
     dea:	f001 0401 	and.w	r4, r1, #1
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     dee:	9901      	ldr	r1, [sp, #4]
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
     df0:	0052      	lsls	r2, r2, #1
     df2:	f002 0202 	and.w	r2, r2, #2
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     df6:	0089      	lsls	r1, r1, #2
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     df8:	4322      	orrs	r2, r4
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     dfa:	f001 0104 	and.w	r1, r1, #4
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     dfe:	430a      	orrs	r2, r1
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     e00:	9902      	ldr	r1, [sp, #8]
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     e02:	9c03      	ldr	r4, [sp, #12]
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     e04:	00c9      	lsls	r1, r1, #3
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     e06:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     e0a:	f001 0108 	and.w	r1, r1, #8
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     e0e:	430a      	orrs	r2, r1
     e10:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

   pI2S->CONTROL  = i2s_control_val;
     e14:	6003      	str	r3, [r0, #0]
   return 0;
 }
     e16:	bc10      	pop	{r4}
   return 0;
     e18:	2000      	movs	r0, #0
 }
     e1a:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     e1c:	2001      	movs	r0, #1
 }
     e1e:	bc10      	pop	{r4}
     e20:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     e22:	2001      	movs	r0, #1
 }
     e24:	4770      	bx	lr
     e26:	bf00      	nop

00000e28 <CM3DS_MPS2_i2s_tx_fifo_empty>:

 int CM3DS_MPS2_i2s_tx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_TXEmpty_Pos;
     e28:	6840      	ldr	r0, [r0, #4]
   }
     e2a:	f3c0 0080 	ubfx	r0, r0, #2, #1
     e2e:	4770      	bx	lr

00000e30 <CM3DS_MPS2_i2s_tx_fifo_full>:

 int CM3DS_MPS2_i2s_tx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXFull_Pos;
     e30:	6840      	ldr	r0, [r0, #4]
   }
     e32:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     e36:	4770      	bx	lr

00000e38 <CM3DS_MPS2_i2s_rx_fifo_empty>:

 int CM3DS_MPS2_i2s_rx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_RXEmpty_Pos;
     e38:	6840      	ldr	r0, [r0, #4]
   }
     e3a:	f3c0 1000 	ubfx	r0, r0, #4, #1
     e3e:	4770      	bx	lr

00000e40 <CM3DS_MPS2_i2s_rx_fifo_full>:

 int CM3DS_MPS2_i2s_rx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXFull_Pos;
     e40:	6840      	ldr	r0, [r0, #4]
   }
     e42:	f3c0 1040 	ubfx	r0, r0, #5, #1
     e46:	4770      	bx	lr

00000e48 <CM3DS_MPS2_i2s_rx_irq_alert>:

 int CM3DS_MPS2_i2s_rx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXIRQ_Pos;
     e48:	6840      	ldr	r0, [r0, #4]
   }
     e4a:	f3c0 0040 	ubfx	r0, r0, #1, #1
     e4e:	4770      	bx	lr

00000e50 <CM3DS_MPS2_i2s_tx_irq_alert>:

 int CM3DS_MPS2_i2s_tx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXIRQ_Pos;
     e50:	6840      	ldr	r0, [r0, #4]
   }
     e52:	f000 0001 	and.w	r0, r0, #1
     e56:	4770      	bx	lr

00000e58 <CM3DS_MPS2_i2s_tx_stop>:

 int CM3DS_MPS2_i2s_tx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     e58:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     e5a:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     e5c:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     e5e:	f023 0301 	bic.w	r3, r3, #1
     e62:	6013      	str	r3, [r2, #0]
   }
     e64:	4770      	bx	lr
     e66:	bf00      	nop

00000e68 <CM3DS_MPS2_i2s_rx_stop>:

 int CM3DS_MPS2_i2s_rx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     e68:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     e6a:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     e6c:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     e6e:	f023 0304 	bic.w	r3, r3, #4
     e72:	6013      	str	r3, [r2, #0]
   }
     e74:	4770      	bx	lr
     e76:	bf00      	nop

00000e78 <CM3DS_MPS2_i2s_get_tx_error>:

 int CM3DS_MPS2_i2s_get_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_TXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_TXERR_Pos);
     e78:	6880      	ldr	r0, [r0, #8]
   }
     e7a:	f000 0001 	and.w	r0, r0, #1
     e7e:	4770      	bx	lr

00000e80 <CM3DS_MPS2_i2s_get_rx_error>:

 int CM3DS_MPS2_i2s_get_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_RXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_RXERR_Pos);
     e80:	6880      	ldr	r0, [r0, #8]
   }
     e82:	f3c0 0040 	ubfx	r0, r0, #1, #1
     e86:	4770      	bx	lr

00000e88 <CM3DS_MPS2_i2s_clear_tx_error>:

 void CM3DS_MPS2_i2s_clear_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_TXERR_Msk;
     e88:	2301      	movs	r3, #1
     e8a:	6083      	str	r3, [r0, #8]
   return;
   }
     e8c:	4770      	bx	lr
     e8e:	bf00      	nop

00000e90 <CM3DS_MPS2_i2s_clear_rx_error>:

 void CM3DS_MPS2_i2s_clear_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_RXERR_Msk;
     e90:	2302      	movs	r3, #2
     e92:	6083      	str	r3, [r0, #8]
   return;;
   }
     e94:	4770      	bx	lr
     e96:	bf00      	nop

00000e98 <CM3DS_MPS2_i2s_fifo_reset>:

 void CM3DS_MPS2_i2s_fifo_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     e98:	6803      	ldr	r3, [r0, #0]
     e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     e9e:	6003      	str	r3, [r0, #0]
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     ea0:	6803      	ldr	r3, [r0, #0]
     ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     ea6:	6003      	str	r3, [r0, #0]
   return;
   }
     ea8:	4770      	bx	lr
     eaa:	bf00      	nop

00000eac <CM3DS_MPS2_i2s_codec_reset>:

 void CM3DS_MPS2_i2s_codec_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   int i;
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     eac:	6803      	ldr	r3, [r0, #0]
     eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     eb2:	6003      	str	r3, [r0, #0]
  __ASM volatile ("nop");
     eb4:	bf00      	nop
     eb6:	bf00      	nop
     eb8:	bf00      	nop
     eba:	bf00      	nop
     ebc:	bf00      	nop
     ebe:	bf00      	nop
   for (i=0;i<6;i++) { // delay loop
     __NOP();
     }
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     ec0:	6803      	ldr	r3, [r0, #0]
     ec2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
     ec6:	6003      	str	r3, [r0, #0]
   return;
   }
     ec8:	4770      	bx	lr
     eca:	bf00      	nop

00000ecc <CM3DS_MPS2_i2s_speed_config>:

 int CM3DS_MPS2_i2s_speed_config(CM3DS_MPS2_I2S_TypeDef *pI2S, uint32_t divide_ratio){
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     ecc:	f240 33ed 	movw	r3, #1005	; 0x3ed
     ed0:	f1a1 0212 	sub.w	r2, r1, #18
     ed4:	429a      	cmp	r2, r3
   if (divide_ratio > 0x3FF) return 1; // Error: Divide ratio too large (only 10 bits)

   pI2S->DIVIDE = divide_ratio;
     ed6:	bf9a      	itte	ls
     ed8:	60c1      	strls	r1, [r0, #12]
   return 0;
     eda:	2000      	movls	r0, #0
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     edc:	2001      	movhi	r0, #1
   }
     ede:	4770      	bx	lr

00000ee0 <CM3DS_MPS2_i2c_send_byte>:
 {
     int loop;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ee0:	2201      	movs	r2, #1
     ee2:	4b2e      	ldr	r3, [pc, #184]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
     ee4:	605a      	str	r2, [r3, #4]
         // apSleepus(1);
         if (c & (1 << (7 - loop)))
     ee6:	09c2      	lsrs	r2, r0, #7
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ee8:	f04f 0202 	mov.w	r2, #2
         else
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eec:	bf0c      	ite	eq
     eee:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef0:	601a      	strne	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ef2:	2201      	movs	r2, #1
     ef4:	4b29      	ldr	r3, [pc, #164]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     ef6:	0641      	lsls	r1, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ef8:	601a      	str	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     efa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     efc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     efe:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f02:	bf54      	ite	pl
     f04:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f06:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f08:	2201      	movs	r2, #1
     f0a:	4b24      	ldr	r3, [pc, #144]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f0c:	0681      	lsls	r1, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f0e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f10:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f12:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f14:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f18:	bf54      	ite	pl
     f1a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f1c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f1e:	2201      	movs	r2, #1
     f20:	4b1e      	ldr	r3, [pc, #120]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f22:	06c1      	lsls	r1, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f24:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f26:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f28:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f2a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f2e:	bf54      	ite	pl
     f30:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f32:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f34:	2201      	movs	r2, #1
     f36:	4b19      	ldr	r3, [pc, #100]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f38:	0701      	lsls	r1, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f3a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f3c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f3e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f40:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f44:	bf54      	ite	pl
     f46:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f48:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f4a:	2201      	movs	r2, #1
     f4c:	4b13      	ldr	r3, [pc, #76]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f4e:	0741      	lsls	r1, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f50:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f52:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f54:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f56:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f5a:	bf54      	ite	pl
     f5c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f5e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f60:	2201      	movs	r2, #1
     f62:	4b0e      	ldr	r3, [pc, #56]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f64:	0781      	lsls	r1, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f66:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f68:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f6a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f6c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f70:	bf54      	ite	pl
     f72:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f74:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f76:	2201      	movs	r2, #1
     f78:	4b08      	ldr	r3, [pc, #32]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f7a:	07c1      	lsls	r1, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f7c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f7e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f80:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f82:	f04f 0202 	mov.w	r2, #2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f86:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f8a:	bf4c      	ite	mi
     f8c:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f8e:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f90:	2201      	movs	r2, #1
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <CM3DS_MPS2_i2c_send_byte+0xbc>)
     f94:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f96:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f98:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
 }
     f9a:	4770      	bx	lr
     f9c:	40023000 	.word	0x40023000

00000fa0 <CM3DS_MPS2_i2c_receive_byte>:
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     data         = 0;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fa0:	2201      	movs	r2, #1
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fa2:	2103      	movs	r1, #3
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fa4:	2002      	movs	r0, #2
     fa6:	4b2c      	ldr	r3, [pc, #176]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     fa8:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     faa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fac:	6019      	str	r1, [r3, #0]
         // apSleepus(1);
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fae:	6818      	ldr	r0, [r3, #0]
             data += (1 << (7 - loop));
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fb4:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb6:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fb8:	2103      	movs	r1, #3
     data         = 0;
     fba:	f010 0f02 	tst.w	r0, #2
     fbe:	bf14      	ite	ne
     fc0:	2080      	movne	r0, #128	; 0x80
     fc2:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc8:	4b23      	ldr	r3, [pc, #140]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     fca:	bf48      	it	mi
     fcc:	3040      	addmi	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fce:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fd0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fd2:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fd4:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fd6:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fd8:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fda:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fde:	4b1e      	ldr	r3, [pc, #120]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     fe0:	bf48      	it	mi
     fe2:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fe8:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fea:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fec:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fee:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff0:	f04f 0201 	mov.w	r2, #1
     ff4:	4b18      	ldr	r3, [pc, #96]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     ff6:	bf48      	it	mi
     ff8:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ffa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ffc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     ffe:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1000:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1002:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1008:	4b13      	ldr	r3, [pc, #76]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
    100a:	bf48      	it	mi
    100c:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    100e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1010:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1012:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1014:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1016:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1018:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    101a:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    101e:	4b0e      	ldr	r3, [pc, #56]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
    1020:	bf48      	it	mi
    1022:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1024:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1026:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1028:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    102a:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    102c:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    102e:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1030:	f04f 0201 	mov.w	r2, #1
    1034:	4b08      	ldr	r3, [pc, #32]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
    1036:	bf48      	it	mi
    1038:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    103a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    103c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    103e:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1040:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1042:	2101      	movs	r1, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1044:	079b      	lsls	r3, r3, #30
             data += (1 << (7 - loop));
    1046:	bf48      	it	mi
    1048:	1880      	addmi	r0, r0, r2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    104a:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    104c:	4b02      	ldr	r3, [pc, #8]	; (1058 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     // apSleepus(1);

     return data;
 }
    104e:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1050:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1052:	605a      	str	r2, [r3, #4]
 }
    1054:	4770      	bx	lr
    1056:	bf00      	nop
    1058:	40023000 	.word	0x40023000

0000105c <CM3DS_MPS2_i2c_receive_ack>:
     int nack;

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    105c:	2201      	movs	r2, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    105e:	2102      	movs	r1, #2
    1060:	4b06      	ldr	r3, [pc, #24]	; (107c <CM3DS_MPS2_i2c_receive_ack+0x20>)
    1062:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1064:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1066:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1068:	6818      	ldr	r0, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    106a:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     if(nack==0)
    106c:	f010 0f02 	tst.w	r0, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1070:	6019      	str	r1, [r3, #0]
         return 1;

     return 0;
 }
    1072:	bf0c      	ite	eq
    1074:	4610      	moveq	r0, r2
    1076:	2000      	movne	r0, #0
    1078:	4770      	bx	lr
    107a:	bf00      	nop
    107c:	40023000 	.word	0x40023000

00001080 <CM3DS_MPS2_i2c_send_ack>:

 // Write the acknowledge bit
 void CM3DS_MPS2_i2c_send_ack(void)
 {
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1080:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1082:	2102      	movs	r1, #2
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <CM3DS_MPS2_i2c_send_ack+0x14>)
    1086:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1088:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    108a:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    108c:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    108e:	6059      	str	r1, [r3, #4]
     // apSleepus(1);
 }
    1090:	4770      	bx	lr
    1092:	bf00      	nop
    1094:	40023000 	.word	0x40023000

00001098 <CM3DS_MPS2_i2c_read>:

 // Write data stream and read one byte
 unsigned char CM3DS_MPS2_i2c_read(unsigned char reg_addr, unsigned char sadr)
 {
    1098:	b430      	push	{r4, r5}

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    109a:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    109c:	2401      	movs	r4, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    109e:	2503      	movs	r5, #3
    10a0:	4b91      	ldr	r3, [pc, #580]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
    10a2:	601d      	str	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10a4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a6:	605c      	str	r4, [r3, #4]
         if (c & (1 << (7 - loop)))
    10a8:	09cc      	lsrs	r4, r1, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10aa:	bf0c      	ite	eq
    10ac:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10ae:	601a      	strne	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10b0:	2201      	movs	r2, #1
    10b2:	4b8d      	ldr	r3, [pc, #564]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10b4:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10b6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ba:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10bc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10c0:	bf54      	ite	pl
    10c2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10c4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10c6:	2201      	movs	r2, #1
    10c8:	4b87      	ldr	r3, [pc, #540]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10ca:	068d      	lsls	r5, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10cc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ce:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10d2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10d6:	bf54      	ite	pl
    10d8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10da:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10dc:	2201      	movs	r2, #1
    10de:	4b82      	ldr	r3, [pc, #520]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10e0:	06cc      	lsls	r4, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10e2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10e8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10ec:	bf54      	ite	pl
    10ee:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10f0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10f2:	2201      	movs	r2, #1
    10f4:	4b7c      	ldr	r3, [pc, #496]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10f6:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10f8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10fa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10fc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10fe:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1102:	bf54      	ite	pl
    1104:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1106:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1108:	2201      	movs	r2, #1
    110a:	4b77      	ldr	r3, [pc, #476]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    110c:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    110e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1110:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1112:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1114:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1118:	bf54      	ite	pl
    111a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    111c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    111e:	2201      	movs	r2, #1
    1120:	4b71      	ldr	r3, [pc, #452]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1122:	078d      	lsls	r5, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1124:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1126:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1128:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    112a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    112e:	bf54      	ite	pl
    1130:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1132:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1134:	2201      	movs	r2, #1
    1136:	4b6c      	ldr	r3, [pc, #432]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1138:	07cc      	lsls	r4, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    113a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    113c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    113e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1140:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1144:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1148:	bf4c      	ite	mi
    114a:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    114c:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    114e:	2201      	movs	r2, #1
    1150:	4b65      	ldr	r3, [pc, #404]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
    1152:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1154:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1156:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1158:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    115a:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    115c:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    115e:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1160:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1162:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1164:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    1166:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1168:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    116c:	bf0c      	ite	eq
    116e:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1170:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1172:	4b5d      	ldr	r3, [pc, #372]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1174:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1176:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1178:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    117a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    117c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1180:	bf54      	ite	pl
    1182:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1184:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1186:	2201      	movs	r2, #1
    1188:	4b57      	ldr	r3, [pc, #348]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    118a:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    118c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    118e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1190:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1192:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1196:	bf54      	ite	pl
    1198:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    119a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    119c:	2201      	movs	r2, #1
    119e:	4b52      	ldr	r3, [pc, #328]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11a0:	06c5      	lsls	r5, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11a2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11a4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11a6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11a8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11ac:	bf54      	ite	pl
    11ae:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11b0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11b2:	2201      	movs	r2, #1
    11b4:	4b4c      	ldr	r3, [pc, #304]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11b6:	0704      	lsls	r4, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11b8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11ba:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11bc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11be:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11c2:	bf54      	ite	pl
    11c4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11c6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11c8:	2201      	movs	r2, #1
    11ca:	4b47      	ldr	r3, [pc, #284]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11cc:	0745      	lsls	r5, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ce:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11d0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11d2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11d4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11d8:	bf54      	ite	pl
    11da:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11dc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11de:	2201      	movs	r2, #1
    11e0:	4b41      	ldr	r3, [pc, #260]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11e2:	0784      	lsls	r4, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11e4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ea:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11ee:	bf54      	ite	pl
    11f0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11f2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11f4:	2201      	movs	r2, #1
    11f6:	4b3c      	ldr	r3, [pc, #240]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11f8:	07c0      	lsls	r0, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11fa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11fc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11fe:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1200:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1204:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1208:	bf4c      	ite	mi
    120a:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    120c:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    120e:	2201      	movs	r2, #1
     CM3DS_MPS2_i2c_send_byte(reg_addr);
     CM3DS_MPS2_i2c_receive_ack();

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    1210:	2403      	movs	r4, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1212:	4b35      	ldr	r3, [pc, #212]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
    1214:	4311      	orrs	r1, r2
    1216:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1218:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    121a:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    121c:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    121e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1220:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1222:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1224:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1226:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    1228:	601c      	str	r4, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    122a:	6058      	str	r0, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    122c:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    122e:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1230:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1234:	bf0c      	ite	eq
    1236:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1238:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    123a:	4b2b      	ldr	r3, [pc, #172]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    123c:	064d      	lsls	r5, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    123e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1240:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1242:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1244:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1248:	bf54      	ite	pl
    124a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    124c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    124e:	2201      	movs	r2, #1
    1250:	4b25      	ldr	r3, [pc, #148]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1252:	068c      	lsls	r4, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1254:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1256:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1258:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    125a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    125e:	bf54      	ite	pl
    1260:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1262:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1264:	2201      	movs	r2, #1
    1266:	4b20      	ldr	r3, [pc, #128]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1268:	06c8      	lsls	r0, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    126a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    126c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    126e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1270:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1274:	bf54      	ite	pl
    1276:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1278:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    127a:	2201      	movs	r2, #1
    127c:	4b1a      	ldr	r3, [pc, #104]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    127e:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1280:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1282:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1284:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1286:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    128a:	bf54      	ite	pl
    128c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    128e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1290:	2201      	movs	r2, #1
    1292:	4b15      	ldr	r3, [pc, #84]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1294:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1296:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1298:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    129a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    129c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12a0:	bf54      	ite	pl
    12a2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12a4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12a6:	2201      	movs	r2, #1
    12a8:	4b0f      	ldr	r3, [pc, #60]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    12aa:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ac:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ae:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12b0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12b2:	f04f 0202 	mov.w	r2, #2
    12b6:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12ba:	bf54      	ite	pl
    12bc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12be:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12c0:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12c2:	2003      	movs	r0, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <CM3DS_MPS2_i2c_read+0x250>)
    12c6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12c8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ca:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12cc:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ce:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12d0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12d2:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12d4:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12d6:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12d8:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    12da:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12dc:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12de:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12e0:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12e2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12e4:	6018      	str	r0, [r3, #0]
    12e6:	e001      	b.n	12ec <CM3DS_MPS2_i2c_read+0x254>
    12e8:	40023000 	.word	0x40023000
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12ec:	6819      	ldr	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12f0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12f2:	6018      	str	r0, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12f4:	681b      	ldr	r3, [r3, #0]
     data         = 0;
    12f6:	f011 0f02 	tst.w	r1, #2
    12fa:	bf14      	ite	ne
    12fc:	2080      	movne	r0, #128	; 0x80
    12fe:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1300:	079b      	lsls	r3, r3, #30
    1302:	d500      	bpl.n	1306 <CM3DS_MPS2_i2c_read+0x26e>
             data += (1 << (7 - loop));
    1304:	3040      	adds	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1306:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1308:	2103      	movs	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    130a:	4b27      	ldr	r3, [pc, #156]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
    130c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    130e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1310:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1312:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1314:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1316:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1318:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    131c:	4b22      	ldr	r3, [pc, #136]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    131e:	bf48      	it	mi
    1320:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1322:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1324:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1326:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1328:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    132a:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    132c:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    132e:	f04f 0201 	mov.w	r2, #1
    1332:	4b1d      	ldr	r3, [pc, #116]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1334:	bf48      	it	mi
    1336:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1338:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    133a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    133c:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    133e:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1340:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1346:	4b18      	ldr	r3, [pc, #96]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1348:	bf48      	it	mi
    134a:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    134c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    134e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1350:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1352:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1354:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1356:	681b      	ldr	r3, [r3, #0]
    1358:	079d      	lsls	r5, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    135a:	4b13      	ldr	r3, [pc, #76]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    135c:	bf48      	it	mi
    135e:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1360:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1362:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1364:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1366:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1368:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    136a:	681b      	ldr	r3, [r3, #0]
    136c:	079c      	lsls	r4, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    136e:	4b0e      	ldr	r3, [pc, #56]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1370:	bf48      	it	mi
    1372:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1374:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1376:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1378:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	0799      	lsls	r1, r3, #30
    137e:	d500      	bpl.n	1382 <CM3DS_MPS2_i2c_read+0x2ea>
             data += (1 << (7 - loop));
    1380:	4410      	add	r0, r2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1382:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);

     return rxdata;
 }
    1384:	bc30      	pop	{r4, r5}
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1386:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1388:	4b07      	ldr	r3, [pc, #28]	; (13a8 <CM3DS_MPS2_i2c_read+0x310>)
     return rxdata;
    138a:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    138c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    138e:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1390:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1392:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1394:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1396:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1398:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    139a:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    139c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    139e:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13a0:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13a2:	6019      	str	r1, [r3, #0]
 }
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop
    13a8:	40023000 	.word	0x40023000

000013ac <CM3DS_MPS2_i2c_write>:

 // Write data stream and write one byte
 void CM3DS_MPS2_i2c_write(unsigned char reg_addr, unsigned char data_byte, unsigned char sadr)
 {
    13ac:	b470      	push	{r4, r5, r6}
     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    13ae:	2603      	movs	r6, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13b0:	2501      	movs	r5, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13b2:	2402      	movs	r4, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    13b4:	4b90      	ldr	r3, [pc, #576]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
    13b6:	601e      	str	r6, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13b8:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13ba:	605d      	str	r5, [r3, #4]
         if (c & (1 << (7 - loop)))
    13bc:	09d5      	lsrs	r5, r2, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13be:	bf0c      	ite	eq
    13c0:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13c2:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13c4:	2401      	movs	r4, #1
    13c6:	4b8c      	ldr	r3, [pc, #560]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    13c8:	0655      	lsls	r5, r2, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13ca:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13cc:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13ce:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13d0:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13d4:	bf54      	ite	pl
    13d6:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13d8:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13da:	2401      	movs	r4, #1
    13dc:	4b86      	ldr	r3, [pc, #536]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    13de:	0696      	lsls	r6, r2, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13e0:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13e2:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13e4:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13e6:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13ea:	bf54      	ite	pl
    13ec:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13ee:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13f0:	2401      	movs	r4, #1
    13f2:	4b81      	ldr	r3, [pc, #516]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    13f4:	06d5      	lsls	r5, r2, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13f6:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13f8:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13fa:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13fc:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1400:	bf54      	ite	pl
    1402:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1404:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1406:	2401      	movs	r4, #1
    1408:	4b7b      	ldr	r3, [pc, #492]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    140a:	0716      	lsls	r6, r2, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    140c:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    140e:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1410:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1412:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1416:	bf54      	ite	pl
    1418:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    141a:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    141c:	2401      	movs	r4, #1
    141e:	4b76      	ldr	r3, [pc, #472]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1420:	0755      	lsls	r5, r2, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1422:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1424:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1426:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1428:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    142c:	bf54      	ite	pl
    142e:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1430:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1432:	2401      	movs	r4, #1
    1434:	4b70      	ldr	r3, [pc, #448]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1436:	0796      	lsls	r6, r2, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1438:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    143a:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    143c:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    143e:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1442:	bf54      	ite	pl
    1444:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1446:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1448:	2401      	movs	r4, #1
         if (c & (1 << (7 - loop)))
    144a:	f012 0f01 	tst.w	r2, #1
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    144e:	f04f 0202 	mov.w	r2, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1452:	4b69      	ldr	r3, [pc, #420]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
    1454:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1456:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1458:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    145a:	bf14      	ite	ne
    145c:	601a      	strne	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    145e:	605a      	streq	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1460:	2402      	movs	r4, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1462:	2201      	movs	r2, #1
    1464:	4b64      	ldr	r3, [pc, #400]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
    1466:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1468:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    146a:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    146c:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    146e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1470:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1472:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1474:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1476:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1478:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    147a:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    147c:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1480:	bf0c      	ite	eq
    1482:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1484:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1486:	4b5c      	ldr	r3, [pc, #368]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1488:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    148a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    148c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    148e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1490:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1494:	bf54      	ite	pl
    1496:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1498:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    149a:	2201      	movs	r2, #1
    149c:	4b56      	ldr	r3, [pc, #344]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    149e:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14a0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14a2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14a4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14a6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14aa:	bf54      	ite	pl
    14ac:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14ae:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14b0:	2201      	movs	r2, #1
    14b2:	4b51      	ldr	r3, [pc, #324]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    14b4:	06c6      	lsls	r6, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14b6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14b8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14ba:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14bc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14c0:	bf54      	ite	pl
    14c2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14c4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14c6:	2201      	movs	r2, #1
    14c8:	4b4b      	ldr	r3, [pc, #300]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    14ca:	0705      	lsls	r5, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14cc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14ce:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14d0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14d2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14d6:	bf54      	ite	pl
    14d8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14da:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14dc:	2201      	movs	r2, #1
    14de:	4b46      	ldr	r3, [pc, #280]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    14e0:	0744      	lsls	r4, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14e2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14e4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14e6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14e8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14ec:	bf54      	ite	pl
    14ee:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14f0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14f2:	2201      	movs	r2, #1
    14f4:	4b40      	ldr	r3, [pc, #256]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    14f6:	0786      	lsls	r6, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14f8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14fa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14fc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14fe:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1502:	bf54      	ite	pl
    1504:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1506:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1508:	2201      	movs	r2, #1
    150a:	4b3b      	ldr	r3, [pc, #236]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    150c:	07c5      	lsls	r5, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    150e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1510:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1512:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1514:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1518:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    151c:	bf4c      	ite	mi
    151e:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1520:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1522:	2201      	movs	r2, #1
    1524:	4b34      	ldr	r3, [pc, #208]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
    1526:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1528:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    152a:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    152c:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    152e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1530:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1532:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1534:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1536:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1538:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    153a:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    153c:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1540:	bf0c      	ite	eq
    1542:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1544:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1546:	4b2c      	ldr	r3, [pc, #176]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1548:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    154a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    154c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    154e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1550:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1554:	bf54      	ite	pl
    1556:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1558:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    155a:	2201      	movs	r2, #1
    155c:	4b26      	ldr	r3, [pc, #152]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    155e:	0688      	lsls	r0, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1560:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1562:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1564:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1566:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    156a:	bf54      	ite	pl
    156c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    156e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1570:	2201      	movs	r2, #1
    1572:	4b21      	ldr	r3, [pc, #132]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1574:	06ce      	lsls	r6, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1576:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1578:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    157a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    157c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1580:	bf54      	ite	pl
    1582:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1584:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1586:	2201      	movs	r2, #1
    1588:	4b1b      	ldr	r3, [pc, #108]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    158a:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    158c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    158e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1590:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1592:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1596:	bf54      	ite	pl
    1598:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    159a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    159c:	2201      	movs	r2, #1
    159e:	4b16      	ldr	r3, [pc, #88]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    15a0:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15a2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15a4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15a6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15a8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    15ac:	bf54      	ite	pl
    15ae:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15b0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15b2:	2201      	movs	r2, #1
    15b4:	4b10      	ldr	r3, [pc, #64]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    15b6:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15b8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15ba:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15bc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15be:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    15c2:	bf54      	ite	pl
    15c4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15c6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15c8:	2201      	movs	r2, #1
    15ca:	4b0b      	ldr	r3, [pc, #44]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    15cc:	07c9      	lsls	r1, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15ce:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15d0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15d2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15d4:	f04f 0202 	mov.w	r2, #2
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
 }
    15d8:	bc70      	pop	{r4, r5, r6}
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15da:	bf4c      	ite	mi
    15dc:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    15de:	605a      	strpl	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15e0:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15e2:	2201      	movs	r2, #1
    15e4:	4b04      	ldr	r3, [pc, #16]	; (15f8 <CM3DS_MPS2_i2c_write+0x24c>)
    15e6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15e8:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15ea:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15ec:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    15ee:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    15f0:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    15f2:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    15f4:	6019      	str	r1, [r3, #0]
 }
    15f6:	4770      	bx	lr
    15f8:	40023000 	.word	0x40023000

000015fc <SystemCoreClockUpdate>:
    15fc:	4b01      	ldr	r3, [pc, #4]	; (1604 <SystemCoreClockUpdate+0x8>)
    15fe:	4a02      	ldr	r2, [pc, #8]	; (1608 <SystemCoreClockUpdate+0xc>)
    1600:	601a      	str	r2, [r3, #0]
    1602:	4770      	bx	lr
    1604:	20000000 	.word	0x20000000
    1608:	017d7840 	.word	0x017d7840

0000160c <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    160c:	4b01      	ldr	r3, [pc, #4]	; (1614 <SystemInit+0x8>)
    160e:	4a02      	ldr	r2, [pc, #8]	; (1618 <SystemInit+0xc>)
    1610:	601a      	str	r2, [r3, #0]

}
    1612:	4770      	bx	lr
    1614:	20000000 	.word	0x20000000
    1618:	017d7840 	.word	0x017d7840

0000161c <exit>:
    161c:	b508      	push	{r3, lr}
    161e:	4b07      	ldr	r3, [pc, #28]	; (163c <exit+0x20>)
    1620:	4604      	mov	r4, r0
    1622:	b113      	cbz	r3, 162a <exit+0xe>
    1624:	2100      	movs	r1, #0
    1626:	f3af 8000 	nop.w
    162a:	4b05      	ldr	r3, [pc, #20]	; (1640 <exit+0x24>)
    162c:	6818      	ldr	r0, [r3, #0]
    162e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1630:	b103      	cbz	r3, 1634 <exit+0x18>
    1632:	4798      	blx	r3
    1634:	4620      	mov	r0, r4
    1636:	f000 ff93 	bl	2560 <_exit>
    163a:	bf00      	nop
    163c:	00000000 	.word	0x00000000
    1640:	00002c48 	.word	0x00002c48

00001644 <memset>:
    1644:	4603      	mov	r3, r0
    1646:	4402      	add	r2, r0
    1648:	4293      	cmp	r3, r2
    164a:	d100      	bne.n	164e <memset+0xa>
    164c:	4770      	bx	lr
    164e:	f803 1b01 	strb.w	r1, [r3], #1
    1652:	e7f9      	b.n	1648 <memset+0x4>

00001654 <iprintf>:
    1654:	b40f      	push	{r0, r1, r2, r3}
    1656:	4b0a      	ldr	r3, [pc, #40]	; (1680 <iprintf+0x2c>)
    1658:	b513      	push	{r0, r1, r4, lr}
    165a:	681c      	ldr	r4, [r3, #0]
    165c:	b124      	cbz	r4, 1668 <iprintf+0x14>
    165e:	69a3      	ldr	r3, [r4, #24]
    1660:	b913      	cbnz	r3, 1668 <iprintf+0x14>
    1662:	4620      	mov	r0, r4
    1664:	f000 fa22 	bl	1aac <__sinit>
    1668:	ab05      	add	r3, sp, #20
    166a:	9a04      	ldr	r2, [sp, #16]
    166c:	68a1      	ldr	r1, [r4, #8]
    166e:	4620      	mov	r0, r4
    1670:	9301      	str	r3, [sp, #4]
    1672:	f000 fbd7 	bl	1e24 <_vfiprintf_r>
    1676:	b002      	add	sp, #8
    1678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    167c:	b004      	add	sp, #16
    167e:	4770      	bx	lr
    1680:	20000004 	.word	0x20000004

00001684 <_puts_r>:
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	460e      	mov	r6, r1
    1688:	4605      	mov	r5, r0
    168a:	b118      	cbz	r0, 1694 <_puts_r+0x10>
    168c:	6983      	ldr	r3, [r0, #24]
    168e:	b90b      	cbnz	r3, 1694 <_puts_r+0x10>
    1690:	f000 fa0c 	bl	1aac <__sinit>
    1694:	69ab      	ldr	r3, [r5, #24]
    1696:	68ac      	ldr	r4, [r5, #8]
    1698:	b913      	cbnz	r3, 16a0 <_puts_r+0x1c>
    169a:	4628      	mov	r0, r5
    169c:	f000 fa06 	bl	1aac <__sinit>
    16a0:	4b23      	ldr	r3, [pc, #140]	; (1730 <_puts_r+0xac>)
    16a2:	429c      	cmp	r4, r3
    16a4:	d117      	bne.n	16d6 <_puts_r+0x52>
    16a6:	686c      	ldr	r4, [r5, #4]
    16a8:	89a3      	ldrh	r3, [r4, #12]
    16aa:	071b      	lsls	r3, r3, #28
    16ac:	d51d      	bpl.n	16ea <_puts_r+0x66>
    16ae:	6923      	ldr	r3, [r4, #16]
    16b0:	b1db      	cbz	r3, 16ea <_puts_r+0x66>
    16b2:	3e01      	subs	r6, #1
    16b4:	68a3      	ldr	r3, [r4, #8]
    16b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    16ba:	3b01      	subs	r3, #1
    16bc:	60a3      	str	r3, [r4, #8]
    16be:	b9e9      	cbnz	r1, 16fc <_puts_r+0x78>
    16c0:	2b00      	cmp	r3, #0
    16c2:	da2e      	bge.n	1722 <_puts_r+0x9e>
    16c4:	4622      	mov	r2, r4
    16c6:	210a      	movs	r1, #10
    16c8:	4628      	mov	r0, r5
    16ca:	f000 f83f 	bl	174c <__swbuf_r>
    16ce:	3001      	adds	r0, #1
    16d0:	d011      	beq.n	16f6 <_puts_r+0x72>
    16d2:	200a      	movs	r0, #10
    16d4:	e011      	b.n	16fa <_puts_r+0x76>
    16d6:	4b17      	ldr	r3, [pc, #92]	; (1734 <_puts_r+0xb0>)
    16d8:	429c      	cmp	r4, r3
    16da:	d101      	bne.n	16e0 <_puts_r+0x5c>
    16dc:	68ac      	ldr	r4, [r5, #8]
    16de:	e7e3      	b.n	16a8 <_puts_r+0x24>
    16e0:	4b15      	ldr	r3, [pc, #84]	; (1738 <_puts_r+0xb4>)
    16e2:	429c      	cmp	r4, r3
    16e4:	bf08      	it	eq
    16e6:	68ec      	ldreq	r4, [r5, #12]
    16e8:	e7de      	b.n	16a8 <_puts_r+0x24>
    16ea:	4621      	mov	r1, r4
    16ec:	4628      	mov	r0, r5
    16ee:	f000 f87f 	bl	17f0 <__swsetup_r>
    16f2:	2800      	cmp	r0, #0
    16f4:	d0dd      	beq.n	16b2 <_puts_r+0x2e>
    16f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	2b00      	cmp	r3, #0
    16fe:	da04      	bge.n	170a <_puts_r+0x86>
    1700:	69a2      	ldr	r2, [r4, #24]
    1702:	429a      	cmp	r2, r3
    1704:	dc06      	bgt.n	1714 <_puts_r+0x90>
    1706:	290a      	cmp	r1, #10
    1708:	d004      	beq.n	1714 <_puts_r+0x90>
    170a:	6823      	ldr	r3, [r4, #0]
    170c:	1c5a      	adds	r2, r3, #1
    170e:	6022      	str	r2, [r4, #0]
    1710:	7019      	strb	r1, [r3, #0]
    1712:	e7cf      	b.n	16b4 <_puts_r+0x30>
    1714:	4622      	mov	r2, r4
    1716:	4628      	mov	r0, r5
    1718:	f000 f818 	bl	174c <__swbuf_r>
    171c:	3001      	adds	r0, #1
    171e:	d1c9      	bne.n	16b4 <_puts_r+0x30>
    1720:	e7e9      	b.n	16f6 <_puts_r+0x72>
    1722:	200a      	movs	r0, #10
    1724:	6823      	ldr	r3, [r4, #0]
    1726:	1c5a      	adds	r2, r3, #1
    1728:	6022      	str	r2, [r4, #0]
    172a:	7018      	strb	r0, [r3, #0]
    172c:	e7e5      	b.n	16fa <_puts_r+0x76>
    172e:	bf00      	nop
    1730:	00002c6c 	.word	0x00002c6c
    1734:	00002c8c 	.word	0x00002c8c
    1738:	00002c4c 	.word	0x00002c4c

0000173c <puts>:
    173c:	4b02      	ldr	r3, [pc, #8]	; (1748 <puts+0xc>)
    173e:	4601      	mov	r1, r0
    1740:	6818      	ldr	r0, [r3, #0]
    1742:	f7ff bf9f 	b.w	1684 <_puts_r>
    1746:	bf00      	nop
    1748:	20000004 	.word	0x20000004

0000174c <__swbuf_r>:
    174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    174e:	460e      	mov	r6, r1
    1750:	4614      	mov	r4, r2
    1752:	4605      	mov	r5, r0
    1754:	b118      	cbz	r0, 175e <__swbuf_r+0x12>
    1756:	6983      	ldr	r3, [r0, #24]
    1758:	b90b      	cbnz	r3, 175e <__swbuf_r+0x12>
    175a:	f000 f9a7 	bl	1aac <__sinit>
    175e:	4b21      	ldr	r3, [pc, #132]	; (17e4 <__swbuf_r+0x98>)
    1760:	429c      	cmp	r4, r3
    1762:	d12a      	bne.n	17ba <__swbuf_r+0x6e>
    1764:	686c      	ldr	r4, [r5, #4]
    1766:	69a3      	ldr	r3, [r4, #24]
    1768:	60a3      	str	r3, [r4, #8]
    176a:	89a3      	ldrh	r3, [r4, #12]
    176c:	071a      	lsls	r2, r3, #28
    176e:	d52e      	bpl.n	17ce <__swbuf_r+0x82>
    1770:	6923      	ldr	r3, [r4, #16]
    1772:	b363      	cbz	r3, 17ce <__swbuf_r+0x82>
    1774:	6923      	ldr	r3, [r4, #16]
    1776:	6820      	ldr	r0, [r4, #0]
    1778:	b2f6      	uxtb	r6, r6
    177a:	1ac0      	subs	r0, r0, r3
    177c:	6963      	ldr	r3, [r4, #20]
    177e:	4637      	mov	r7, r6
    1780:	4283      	cmp	r3, r0
    1782:	dc04      	bgt.n	178e <__swbuf_r+0x42>
    1784:	4621      	mov	r1, r4
    1786:	4628      	mov	r0, r5
    1788:	f000 f926 	bl	19d8 <_fflush_r>
    178c:	bb28      	cbnz	r0, 17da <__swbuf_r+0x8e>
    178e:	68a3      	ldr	r3, [r4, #8]
    1790:	3001      	adds	r0, #1
    1792:	3b01      	subs	r3, #1
    1794:	60a3      	str	r3, [r4, #8]
    1796:	6823      	ldr	r3, [r4, #0]
    1798:	1c5a      	adds	r2, r3, #1
    179a:	6022      	str	r2, [r4, #0]
    179c:	701e      	strb	r6, [r3, #0]
    179e:	6963      	ldr	r3, [r4, #20]
    17a0:	4283      	cmp	r3, r0
    17a2:	d004      	beq.n	17ae <__swbuf_r+0x62>
    17a4:	89a3      	ldrh	r3, [r4, #12]
    17a6:	07db      	lsls	r3, r3, #31
    17a8:	d519      	bpl.n	17de <__swbuf_r+0x92>
    17aa:	2e0a      	cmp	r6, #10
    17ac:	d117      	bne.n	17de <__swbuf_r+0x92>
    17ae:	4621      	mov	r1, r4
    17b0:	4628      	mov	r0, r5
    17b2:	f000 f911 	bl	19d8 <_fflush_r>
    17b6:	b190      	cbz	r0, 17de <__swbuf_r+0x92>
    17b8:	e00f      	b.n	17da <__swbuf_r+0x8e>
    17ba:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <__swbuf_r+0x9c>)
    17bc:	429c      	cmp	r4, r3
    17be:	d101      	bne.n	17c4 <__swbuf_r+0x78>
    17c0:	68ac      	ldr	r4, [r5, #8]
    17c2:	e7d0      	b.n	1766 <__swbuf_r+0x1a>
    17c4:	4b09      	ldr	r3, [pc, #36]	; (17ec <__swbuf_r+0xa0>)
    17c6:	429c      	cmp	r4, r3
    17c8:	bf08      	it	eq
    17ca:	68ec      	ldreq	r4, [r5, #12]
    17cc:	e7cb      	b.n	1766 <__swbuf_r+0x1a>
    17ce:	4621      	mov	r1, r4
    17d0:	4628      	mov	r0, r5
    17d2:	f000 f80d 	bl	17f0 <__swsetup_r>
    17d6:	2800      	cmp	r0, #0
    17d8:	d0cc      	beq.n	1774 <__swbuf_r+0x28>
    17da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    17de:	4638      	mov	r0, r7
    17e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17e2:	bf00      	nop
    17e4:	00002c6c 	.word	0x00002c6c
    17e8:	00002c8c 	.word	0x00002c8c
    17ec:	00002c4c 	.word	0x00002c4c

000017f0 <__swsetup_r>:
    17f0:	4b32      	ldr	r3, [pc, #200]	; (18bc <__swsetup_r+0xcc>)
    17f2:	b570      	push	{r4, r5, r6, lr}
    17f4:	681d      	ldr	r5, [r3, #0]
    17f6:	4606      	mov	r6, r0
    17f8:	460c      	mov	r4, r1
    17fa:	b125      	cbz	r5, 1806 <__swsetup_r+0x16>
    17fc:	69ab      	ldr	r3, [r5, #24]
    17fe:	b913      	cbnz	r3, 1806 <__swsetup_r+0x16>
    1800:	4628      	mov	r0, r5
    1802:	f000 f953 	bl	1aac <__sinit>
    1806:	4b2e      	ldr	r3, [pc, #184]	; (18c0 <__swsetup_r+0xd0>)
    1808:	429c      	cmp	r4, r3
    180a:	d10f      	bne.n	182c <__swsetup_r+0x3c>
    180c:	686c      	ldr	r4, [r5, #4]
    180e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1812:	b29a      	uxth	r2, r3
    1814:	0715      	lsls	r5, r2, #28
    1816:	d42c      	bmi.n	1872 <__swsetup_r+0x82>
    1818:	06d0      	lsls	r0, r2, #27
    181a:	d411      	bmi.n	1840 <__swsetup_r+0x50>
    181c:	2209      	movs	r2, #9
    181e:	6032      	str	r2, [r6, #0]
    1820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1824:	81a3      	strh	r3, [r4, #12]
    1826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    182a:	e03e      	b.n	18aa <__swsetup_r+0xba>
    182c:	4b25      	ldr	r3, [pc, #148]	; (18c4 <__swsetup_r+0xd4>)
    182e:	429c      	cmp	r4, r3
    1830:	d101      	bne.n	1836 <__swsetup_r+0x46>
    1832:	68ac      	ldr	r4, [r5, #8]
    1834:	e7eb      	b.n	180e <__swsetup_r+0x1e>
    1836:	4b24      	ldr	r3, [pc, #144]	; (18c8 <__swsetup_r+0xd8>)
    1838:	429c      	cmp	r4, r3
    183a:	bf08      	it	eq
    183c:	68ec      	ldreq	r4, [r5, #12]
    183e:	e7e6      	b.n	180e <__swsetup_r+0x1e>
    1840:	0751      	lsls	r1, r2, #29
    1842:	d512      	bpl.n	186a <__swsetup_r+0x7a>
    1844:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1846:	b141      	cbz	r1, 185a <__swsetup_r+0x6a>
    1848:	f104 0344 	add.w	r3, r4, #68	; 0x44
    184c:	4299      	cmp	r1, r3
    184e:	d002      	beq.n	1856 <__swsetup_r+0x66>
    1850:	4630      	mov	r0, r6
    1852:	f000 fa19 	bl	1c88 <_free_r>
    1856:	2300      	movs	r3, #0
    1858:	6363      	str	r3, [r4, #52]	; 0x34
    185a:	89a3      	ldrh	r3, [r4, #12]
    185c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1860:	81a3      	strh	r3, [r4, #12]
    1862:	2300      	movs	r3, #0
    1864:	6063      	str	r3, [r4, #4]
    1866:	6923      	ldr	r3, [r4, #16]
    1868:	6023      	str	r3, [r4, #0]
    186a:	89a3      	ldrh	r3, [r4, #12]
    186c:	f043 0308 	orr.w	r3, r3, #8
    1870:	81a3      	strh	r3, [r4, #12]
    1872:	6923      	ldr	r3, [r4, #16]
    1874:	b94b      	cbnz	r3, 188a <__swsetup_r+0x9a>
    1876:	89a3      	ldrh	r3, [r4, #12]
    1878:	f403 7320 	and.w	r3, r3, #640	; 0x280
    187c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1880:	d003      	beq.n	188a <__swsetup_r+0x9a>
    1882:	4621      	mov	r1, r4
    1884:	4630      	mov	r0, r6
    1886:	f000 f9bf 	bl	1c08 <__smakebuf_r>
    188a:	89a2      	ldrh	r2, [r4, #12]
    188c:	f012 0301 	ands.w	r3, r2, #1
    1890:	d00c      	beq.n	18ac <__swsetup_r+0xbc>
    1892:	2300      	movs	r3, #0
    1894:	60a3      	str	r3, [r4, #8]
    1896:	6963      	ldr	r3, [r4, #20]
    1898:	425b      	negs	r3, r3
    189a:	61a3      	str	r3, [r4, #24]
    189c:	6923      	ldr	r3, [r4, #16]
    189e:	b953      	cbnz	r3, 18b6 <__swsetup_r+0xc6>
    18a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    18a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    18a8:	d1ba      	bne.n	1820 <__swsetup_r+0x30>
    18aa:	bd70      	pop	{r4, r5, r6, pc}
    18ac:	0792      	lsls	r2, r2, #30
    18ae:	bf58      	it	pl
    18b0:	6963      	ldrpl	r3, [r4, #20]
    18b2:	60a3      	str	r3, [r4, #8]
    18b4:	e7f2      	b.n	189c <__swsetup_r+0xac>
    18b6:	2000      	movs	r0, #0
    18b8:	e7f7      	b.n	18aa <__swsetup_r+0xba>
    18ba:	bf00      	nop
    18bc:	20000004 	.word	0x20000004
    18c0:	00002c6c 	.word	0x00002c6c
    18c4:	00002c8c 	.word	0x00002c8c
    18c8:	00002c4c 	.word	0x00002c4c

000018cc <__sflush_r>:
    18cc:	898a      	ldrh	r2, [r1, #12]
    18ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18d2:	4605      	mov	r5, r0
    18d4:	0710      	lsls	r0, r2, #28
    18d6:	460c      	mov	r4, r1
    18d8:	d458      	bmi.n	198c <__sflush_r+0xc0>
    18da:	684b      	ldr	r3, [r1, #4]
    18dc:	2b00      	cmp	r3, #0
    18de:	dc05      	bgt.n	18ec <__sflush_r+0x20>
    18e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    18e2:	2b00      	cmp	r3, #0
    18e4:	dc02      	bgt.n	18ec <__sflush_r+0x20>
    18e6:	2000      	movs	r0, #0
    18e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    18ee:	2e00      	cmp	r6, #0
    18f0:	d0f9      	beq.n	18e6 <__sflush_r+0x1a>
    18f2:	2300      	movs	r3, #0
    18f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    18f8:	682f      	ldr	r7, [r5, #0]
    18fa:	6a21      	ldr	r1, [r4, #32]
    18fc:	602b      	str	r3, [r5, #0]
    18fe:	d032      	beq.n	1966 <__sflush_r+0x9a>
    1900:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1902:	89a3      	ldrh	r3, [r4, #12]
    1904:	075a      	lsls	r2, r3, #29
    1906:	d505      	bpl.n	1914 <__sflush_r+0x48>
    1908:	6863      	ldr	r3, [r4, #4]
    190a:	1ac0      	subs	r0, r0, r3
    190c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    190e:	b10b      	cbz	r3, 1914 <__sflush_r+0x48>
    1910:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1912:	1ac0      	subs	r0, r0, r3
    1914:	2300      	movs	r3, #0
    1916:	4602      	mov	r2, r0
    1918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    191a:	6a21      	ldr	r1, [r4, #32]
    191c:	4628      	mov	r0, r5
    191e:	47b0      	blx	r6
    1920:	1c43      	adds	r3, r0, #1
    1922:	89a3      	ldrh	r3, [r4, #12]
    1924:	d106      	bne.n	1934 <__sflush_r+0x68>
    1926:	6829      	ldr	r1, [r5, #0]
    1928:	291d      	cmp	r1, #29
    192a:	d848      	bhi.n	19be <__sflush_r+0xf2>
    192c:	4a29      	ldr	r2, [pc, #164]	; (19d4 <__sflush_r+0x108>)
    192e:	40ca      	lsrs	r2, r1
    1930:	07d6      	lsls	r6, r2, #31
    1932:	d544      	bpl.n	19be <__sflush_r+0xf2>
    1934:	2200      	movs	r2, #0
    1936:	6062      	str	r2, [r4, #4]
    1938:	6922      	ldr	r2, [r4, #16]
    193a:	04d9      	lsls	r1, r3, #19
    193c:	6022      	str	r2, [r4, #0]
    193e:	d504      	bpl.n	194a <__sflush_r+0x7e>
    1940:	1c42      	adds	r2, r0, #1
    1942:	d101      	bne.n	1948 <__sflush_r+0x7c>
    1944:	682b      	ldr	r3, [r5, #0]
    1946:	b903      	cbnz	r3, 194a <__sflush_r+0x7e>
    1948:	6560      	str	r0, [r4, #84]	; 0x54
    194a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    194c:	602f      	str	r7, [r5, #0]
    194e:	2900      	cmp	r1, #0
    1950:	d0c9      	beq.n	18e6 <__sflush_r+0x1a>
    1952:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1956:	4299      	cmp	r1, r3
    1958:	d002      	beq.n	1960 <__sflush_r+0x94>
    195a:	4628      	mov	r0, r5
    195c:	f000 f994 	bl	1c88 <_free_r>
    1960:	2000      	movs	r0, #0
    1962:	6360      	str	r0, [r4, #52]	; 0x34
    1964:	e7c0      	b.n	18e8 <__sflush_r+0x1c>
    1966:	2301      	movs	r3, #1
    1968:	4628      	mov	r0, r5
    196a:	47b0      	blx	r6
    196c:	1c41      	adds	r1, r0, #1
    196e:	d1c8      	bne.n	1902 <__sflush_r+0x36>
    1970:	682b      	ldr	r3, [r5, #0]
    1972:	2b00      	cmp	r3, #0
    1974:	d0c5      	beq.n	1902 <__sflush_r+0x36>
    1976:	2b1d      	cmp	r3, #29
    1978:	d001      	beq.n	197e <__sflush_r+0xb2>
    197a:	2b16      	cmp	r3, #22
    197c:	d101      	bne.n	1982 <__sflush_r+0xb6>
    197e:	602f      	str	r7, [r5, #0]
    1980:	e7b1      	b.n	18e6 <__sflush_r+0x1a>
    1982:	89a3      	ldrh	r3, [r4, #12]
    1984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1988:	81a3      	strh	r3, [r4, #12]
    198a:	e7ad      	b.n	18e8 <__sflush_r+0x1c>
    198c:	690f      	ldr	r7, [r1, #16]
    198e:	2f00      	cmp	r7, #0
    1990:	d0a9      	beq.n	18e6 <__sflush_r+0x1a>
    1992:	0793      	lsls	r3, r2, #30
    1994:	bf18      	it	ne
    1996:	2300      	movne	r3, #0
    1998:	680e      	ldr	r6, [r1, #0]
    199a:	bf08      	it	eq
    199c:	694b      	ldreq	r3, [r1, #20]
    199e:	eba6 0807 	sub.w	r8, r6, r7
    19a2:	600f      	str	r7, [r1, #0]
    19a4:	608b      	str	r3, [r1, #8]
    19a6:	f1b8 0f00 	cmp.w	r8, #0
    19aa:	dd9c      	ble.n	18e6 <__sflush_r+0x1a>
    19ac:	4643      	mov	r3, r8
    19ae:	463a      	mov	r2, r7
    19b0:	6a21      	ldr	r1, [r4, #32]
    19b2:	4628      	mov	r0, r5
    19b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    19b6:	47b0      	blx	r6
    19b8:	2800      	cmp	r0, #0
    19ba:	dc06      	bgt.n	19ca <__sflush_r+0xfe>
    19bc:	89a3      	ldrh	r3, [r4, #12]
    19be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19c2:	81a3      	strh	r3, [r4, #12]
    19c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    19c8:	e78e      	b.n	18e8 <__sflush_r+0x1c>
    19ca:	4407      	add	r7, r0
    19cc:	eba8 0800 	sub.w	r8, r8, r0
    19d0:	e7e9      	b.n	19a6 <__sflush_r+0xda>
    19d2:	bf00      	nop
    19d4:	20400001 	.word	0x20400001

000019d8 <_fflush_r>:
    19d8:	b538      	push	{r3, r4, r5, lr}
    19da:	690b      	ldr	r3, [r1, #16]
    19dc:	4605      	mov	r5, r0
    19de:	460c      	mov	r4, r1
    19e0:	b1db      	cbz	r3, 1a1a <_fflush_r+0x42>
    19e2:	b118      	cbz	r0, 19ec <_fflush_r+0x14>
    19e4:	6983      	ldr	r3, [r0, #24]
    19e6:	b90b      	cbnz	r3, 19ec <_fflush_r+0x14>
    19e8:	f000 f860 	bl	1aac <__sinit>
    19ec:	4b0c      	ldr	r3, [pc, #48]	; (1a20 <_fflush_r+0x48>)
    19ee:	429c      	cmp	r4, r3
    19f0:	d109      	bne.n	1a06 <_fflush_r+0x2e>
    19f2:	686c      	ldr	r4, [r5, #4]
    19f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    19f8:	b17b      	cbz	r3, 1a1a <_fflush_r+0x42>
    19fa:	4621      	mov	r1, r4
    19fc:	4628      	mov	r0, r5
    19fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a02:	f7ff bf63 	b.w	18cc <__sflush_r>
    1a06:	4b07      	ldr	r3, [pc, #28]	; (1a24 <_fflush_r+0x4c>)
    1a08:	429c      	cmp	r4, r3
    1a0a:	d101      	bne.n	1a10 <_fflush_r+0x38>
    1a0c:	68ac      	ldr	r4, [r5, #8]
    1a0e:	e7f1      	b.n	19f4 <_fflush_r+0x1c>
    1a10:	4b05      	ldr	r3, [pc, #20]	; (1a28 <_fflush_r+0x50>)
    1a12:	429c      	cmp	r4, r3
    1a14:	bf08      	it	eq
    1a16:	68ec      	ldreq	r4, [r5, #12]
    1a18:	e7ec      	b.n	19f4 <_fflush_r+0x1c>
    1a1a:	2000      	movs	r0, #0
    1a1c:	bd38      	pop	{r3, r4, r5, pc}
    1a1e:	bf00      	nop
    1a20:	00002c6c 	.word	0x00002c6c
    1a24:	00002c8c 	.word	0x00002c8c
    1a28:	00002c4c 	.word	0x00002c4c

00001a2c <std>:
    1a2c:	2300      	movs	r3, #0
    1a2e:	b510      	push	{r4, lr}
    1a30:	4604      	mov	r4, r0
    1a32:	e9c0 3300 	strd	r3, r3, [r0]
    1a36:	6083      	str	r3, [r0, #8]
    1a38:	8181      	strh	r1, [r0, #12]
    1a3a:	6643      	str	r3, [r0, #100]	; 0x64
    1a3c:	81c2      	strh	r2, [r0, #14]
    1a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1a42:	6183      	str	r3, [r0, #24]
    1a44:	4619      	mov	r1, r3
    1a46:	2208      	movs	r2, #8
    1a48:	305c      	adds	r0, #92	; 0x5c
    1a4a:	f7ff fdfb 	bl	1644 <memset>
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <std+0x38>)
    1a50:	6224      	str	r4, [r4, #32]
    1a52:	6263      	str	r3, [r4, #36]	; 0x24
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <std+0x3c>)
    1a56:	62a3      	str	r3, [r4, #40]	; 0x28
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <std+0x40>)
    1a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <std+0x44>)
    1a5e:	6323      	str	r3, [r4, #48]	; 0x30
    1a60:	bd10      	pop	{r4, pc}
    1a62:	bf00      	nop
    1a64:	0000237d 	.word	0x0000237d
    1a68:	0000239f 	.word	0x0000239f
    1a6c:	000023d7 	.word	0x000023d7
    1a70:	000023fb 	.word	0x000023fb

00001a74 <_cleanup_r>:
    1a74:	4901      	ldr	r1, [pc, #4]	; (1a7c <_cleanup_r+0x8>)
    1a76:	f000 b885 	b.w	1b84 <_fwalk_reent>
    1a7a:	bf00      	nop
    1a7c:	000019d9 	.word	0x000019d9

00001a80 <__sfmoreglue>:
    1a80:	b570      	push	{r4, r5, r6, lr}
    1a82:	2568      	movs	r5, #104	; 0x68
    1a84:	1e4a      	subs	r2, r1, #1
    1a86:	4355      	muls	r5, r2
    1a88:	460e      	mov	r6, r1
    1a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1a8e:	f000 f947 	bl	1d20 <_malloc_r>
    1a92:	4604      	mov	r4, r0
    1a94:	b140      	cbz	r0, 1aa8 <__sfmoreglue+0x28>
    1a96:	2100      	movs	r1, #0
    1a98:	e9c0 1600 	strd	r1, r6, [r0]
    1a9c:	300c      	adds	r0, #12
    1a9e:	60a0      	str	r0, [r4, #8]
    1aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1aa4:	f7ff fdce 	bl	1644 <memset>
    1aa8:	4620      	mov	r0, r4
    1aaa:	bd70      	pop	{r4, r5, r6, pc}

00001aac <__sinit>:
    1aac:	6983      	ldr	r3, [r0, #24]
    1aae:	b510      	push	{r4, lr}
    1ab0:	4604      	mov	r4, r0
    1ab2:	bb33      	cbnz	r3, 1b02 <__sinit+0x56>
    1ab4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    1ab8:	6503      	str	r3, [r0, #80]	; 0x50
    1aba:	4b12      	ldr	r3, [pc, #72]	; (1b04 <__sinit+0x58>)
    1abc:	4a12      	ldr	r2, [pc, #72]	; (1b08 <__sinit+0x5c>)
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	6282      	str	r2, [r0, #40]	; 0x28
    1ac2:	4298      	cmp	r0, r3
    1ac4:	bf04      	itt	eq
    1ac6:	2301      	moveq	r3, #1
    1ac8:	6183      	streq	r3, [r0, #24]
    1aca:	f000 f81f 	bl	1b0c <__sfp>
    1ace:	6060      	str	r0, [r4, #4]
    1ad0:	4620      	mov	r0, r4
    1ad2:	f000 f81b 	bl	1b0c <__sfp>
    1ad6:	60a0      	str	r0, [r4, #8]
    1ad8:	4620      	mov	r0, r4
    1ada:	f000 f817 	bl	1b0c <__sfp>
    1ade:	2200      	movs	r2, #0
    1ae0:	60e0      	str	r0, [r4, #12]
    1ae2:	2104      	movs	r1, #4
    1ae4:	6860      	ldr	r0, [r4, #4]
    1ae6:	f7ff ffa1 	bl	1a2c <std>
    1aea:	2201      	movs	r2, #1
    1aec:	2109      	movs	r1, #9
    1aee:	68a0      	ldr	r0, [r4, #8]
    1af0:	f7ff ff9c 	bl	1a2c <std>
    1af4:	2202      	movs	r2, #2
    1af6:	2112      	movs	r1, #18
    1af8:	68e0      	ldr	r0, [r4, #12]
    1afa:	f7ff ff97 	bl	1a2c <std>
    1afe:	2301      	movs	r3, #1
    1b00:	61a3      	str	r3, [r4, #24]
    1b02:	bd10      	pop	{r4, pc}
    1b04:	00002c48 	.word	0x00002c48
    1b08:	00001a75 	.word	0x00001a75

00001b0c <__sfp>:
    1b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b0e:	4b1b      	ldr	r3, [pc, #108]	; (1b7c <__sfp+0x70>)
    1b10:	4607      	mov	r7, r0
    1b12:	681e      	ldr	r6, [r3, #0]
    1b14:	69b3      	ldr	r3, [r6, #24]
    1b16:	b913      	cbnz	r3, 1b1e <__sfp+0x12>
    1b18:	4630      	mov	r0, r6
    1b1a:	f7ff ffc7 	bl	1aac <__sinit>
    1b1e:	3648      	adds	r6, #72	; 0x48
    1b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    1b24:	3b01      	subs	r3, #1
    1b26:	d503      	bpl.n	1b30 <__sfp+0x24>
    1b28:	6833      	ldr	r3, [r6, #0]
    1b2a:	b133      	cbz	r3, 1b3a <__sfp+0x2e>
    1b2c:	6836      	ldr	r6, [r6, #0]
    1b2e:	e7f7      	b.n	1b20 <__sfp+0x14>
    1b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1b34:	b16d      	cbz	r5, 1b52 <__sfp+0x46>
    1b36:	3468      	adds	r4, #104	; 0x68
    1b38:	e7f4      	b.n	1b24 <__sfp+0x18>
    1b3a:	2104      	movs	r1, #4
    1b3c:	4638      	mov	r0, r7
    1b3e:	f7ff ff9f 	bl	1a80 <__sfmoreglue>
    1b42:	6030      	str	r0, [r6, #0]
    1b44:	2800      	cmp	r0, #0
    1b46:	d1f1      	bne.n	1b2c <__sfp+0x20>
    1b48:	230c      	movs	r3, #12
    1b4a:	4604      	mov	r4, r0
    1b4c:	603b      	str	r3, [r7, #0]
    1b4e:	4620      	mov	r0, r4
    1b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b52:	4b0b      	ldr	r3, [pc, #44]	; (1b80 <__sfp+0x74>)
    1b54:	6665      	str	r5, [r4, #100]	; 0x64
    1b56:	e9c4 5500 	strd	r5, r5, [r4]
    1b5a:	60a5      	str	r5, [r4, #8]
    1b5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    1b60:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1b64:	2208      	movs	r2, #8
    1b66:	4629      	mov	r1, r5
    1b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1b6c:	f7ff fd6a 	bl	1644 <memset>
    1b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    1b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    1b78:	e7e9      	b.n	1b4e <__sfp+0x42>
    1b7a:	bf00      	nop
    1b7c:	00002c48 	.word	0x00002c48
    1b80:	ffff0001 	.word	0xffff0001

00001b84 <_fwalk_reent>:
    1b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b88:	4680      	mov	r8, r0
    1b8a:	4689      	mov	r9, r1
    1b8c:	2600      	movs	r6, #0
    1b8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1b92:	b914      	cbnz	r4, 1b9a <_fwalk_reent+0x16>
    1b94:	4630      	mov	r0, r6
    1b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    1b9e:	3f01      	subs	r7, #1
    1ba0:	d501      	bpl.n	1ba6 <_fwalk_reent+0x22>
    1ba2:	6824      	ldr	r4, [r4, #0]
    1ba4:	e7f5      	b.n	1b92 <_fwalk_reent+0xe>
    1ba6:	89ab      	ldrh	r3, [r5, #12]
    1ba8:	2b01      	cmp	r3, #1
    1baa:	d907      	bls.n	1bbc <_fwalk_reent+0x38>
    1bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1bb0:	3301      	adds	r3, #1
    1bb2:	d003      	beq.n	1bbc <_fwalk_reent+0x38>
    1bb4:	4629      	mov	r1, r5
    1bb6:	4640      	mov	r0, r8
    1bb8:	47c8      	blx	r9
    1bba:	4306      	orrs	r6, r0
    1bbc:	3568      	adds	r5, #104	; 0x68
    1bbe:	e7ee      	b.n	1b9e <_fwalk_reent+0x1a>

00001bc0 <__swhatbuf_r>:
    1bc0:	b570      	push	{r4, r5, r6, lr}
    1bc2:	460e      	mov	r6, r1
    1bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1bc8:	b096      	sub	sp, #88	; 0x58
    1bca:	2900      	cmp	r1, #0
    1bcc:	4614      	mov	r4, r2
    1bce:	461d      	mov	r5, r3
    1bd0:	da07      	bge.n	1be2 <__swhatbuf_r+0x22>
    1bd2:	2300      	movs	r3, #0
    1bd4:	602b      	str	r3, [r5, #0]
    1bd6:	89b3      	ldrh	r3, [r6, #12]
    1bd8:	061a      	lsls	r2, r3, #24
    1bda:	d410      	bmi.n	1bfe <__swhatbuf_r+0x3e>
    1bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1be0:	e00e      	b.n	1c00 <__swhatbuf_r+0x40>
    1be2:	466a      	mov	r2, sp
    1be4:	f000 fc30 	bl	2448 <_fstat_r>
    1be8:	2800      	cmp	r0, #0
    1bea:	dbf2      	blt.n	1bd2 <__swhatbuf_r+0x12>
    1bec:	9a01      	ldr	r2, [sp, #4]
    1bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1bf6:	425a      	negs	r2, r3
    1bf8:	415a      	adcs	r2, r3
    1bfa:	602a      	str	r2, [r5, #0]
    1bfc:	e7ee      	b.n	1bdc <__swhatbuf_r+0x1c>
    1bfe:	2340      	movs	r3, #64	; 0x40
    1c00:	2000      	movs	r0, #0
    1c02:	6023      	str	r3, [r4, #0]
    1c04:	b016      	add	sp, #88	; 0x58
    1c06:	bd70      	pop	{r4, r5, r6, pc}

00001c08 <__smakebuf_r>:
    1c08:	898b      	ldrh	r3, [r1, #12]
    1c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1c0c:	079d      	lsls	r5, r3, #30
    1c0e:	4606      	mov	r6, r0
    1c10:	460c      	mov	r4, r1
    1c12:	d507      	bpl.n	1c24 <__smakebuf_r+0x1c>
    1c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1c18:	6023      	str	r3, [r4, #0]
    1c1a:	6123      	str	r3, [r4, #16]
    1c1c:	2301      	movs	r3, #1
    1c1e:	6163      	str	r3, [r4, #20]
    1c20:	b002      	add	sp, #8
    1c22:	bd70      	pop	{r4, r5, r6, pc}
    1c24:	ab01      	add	r3, sp, #4
    1c26:	466a      	mov	r2, sp
    1c28:	f7ff ffca 	bl	1bc0 <__swhatbuf_r>
    1c2c:	9900      	ldr	r1, [sp, #0]
    1c2e:	4605      	mov	r5, r0
    1c30:	4630      	mov	r0, r6
    1c32:	f000 f875 	bl	1d20 <_malloc_r>
    1c36:	b948      	cbnz	r0, 1c4c <__smakebuf_r+0x44>
    1c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c3c:	059a      	lsls	r2, r3, #22
    1c3e:	d4ef      	bmi.n	1c20 <__smakebuf_r+0x18>
    1c40:	f023 0303 	bic.w	r3, r3, #3
    1c44:	f043 0302 	orr.w	r3, r3, #2
    1c48:	81a3      	strh	r3, [r4, #12]
    1c4a:	e7e3      	b.n	1c14 <__smakebuf_r+0xc>
    1c4c:	4b0d      	ldr	r3, [pc, #52]	; (1c84 <__smakebuf_r+0x7c>)
    1c4e:	62b3      	str	r3, [r6, #40]	; 0x28
    1c50:	89a3      	ldrh	r3, [r4, #12]
    1c52:	6020      	str	r0, [r4, #0]
    1c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1c58:	81a3      	strh	r3, [r4, #12]
    1c5a:	9b00      	ldr	r3, [sp, #0]
    1c5c:	6120      	str	r0, [r4, #16]
    1c5e:	6163      	str	r3, [r4, #20]
    1c60:	9b01      	ldr	r3, [sp, #4]
    1c62:	b15b      	cbz	r3, 1c7c <__smakebuf_r+0x74>
    1c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1c68:	4630      	mov	r0, r6
    1c6a:	f000 fbff 	bl	246c <_isatty_r>
    1c6e:	b128      	cbz	r0, 1c7c <__smakebuf_r+0x74>
    1c70:	89a3      	ldrh	r3, [r4, #12]
    1c72:	f023 0303 	bic.w	r3, r3, #3
    1c76:	f043 0301 	orr.w	r3, r3, #1
    1c7a:	81a3      	strh	r3, [r4, #12]
    1c7c:	89a3      	ldrh	r3, [r4, #12]
    1c7e:	431d      	orrs	r5, r3
    1c80:	81a5      	strh	r5, [r4, #12]
    1c82:	e7cd      	b.n	1c20 <__smakebuf_r+0x18>
    1c84:	00001a75 	.word	0x00001a75

00001c88 <_free_r>:
    1c88:	b538      	push	{r3, r4, r5, lr}
    1c8a:	4605      	mov	r5, r0
    1c8c:	2900      	cmp	r1, #0
    1c8e:	d043      	beq.n	1d18 <_free_r+0x90>
    1c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1c94:	1f0c      	subs	r4, r1, #4
    1c96:	2b00      	cmp	r3, #0
    1c98:	bfb8      	it	lt
    1c9a:	18e4      	addlt	r4, r4, r3
    1c9c:	f000 fc16 	bl	24cc <__malloc_lock>
    1ca0:	4a1e      	ldr	r2, [pc, #120]	; (1d1c <_free_r+0x94>)
    1ca2:	6813      	ldr	r3, [r2, #0]
    1ca4:	4610      	mov	r0, r2
    1ca6:	b933      	cbnz	r3, 1cb6 <_free_r+0x2e>
    1ca8:	6063      	str	r3, [r4, #4]
    1caa:	6014      	str	r4, [r2, #0]
    1cac:	4628      	mov	r0, r5
    1cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1cb2:	f000 bc0c 	b.w	24ce <__malloc_unlock>
    1cb6:	42a3      	cmp	r3, r4
    1cb8:	d90b      	bls.n	1cd2 <_free_r+0x4a>
    1cba:	6821      	ldr	r1, [r4, #0]
    1cbc:	1862      	adds	r2, r4, r1
    1cbe:	4293      	cmp	r3, r2
    1cc0:	bf01      	itttt	eq
    1cc2:	681a      	ldreq	r2, [r3, #0]
    1cc4:	685b      	ldreq	r3, [r3, #4]
    1cc6:	1852      	addeq	r2, r2, r1
    1cc8:	6022      	streq	r2, [r4, #0]
    1cca:	6063      	str	r3, [r4, #4]
    1ccc:	6004      	str	r4, [r0, #0]
    1cce:	e7ed      	b.n	1cac <_free_r+0x24>
    1cd0:	4613      	mov	r3, r2
    1cd2:	685a      	ldr	r2, [r3, #4]
    1cd4:	b10a      	cbz	r2, 1cda <_free_r+0x52>
    1cd6:	42a2      	cmp	r2, r4
    1cd8:	d9fa      	bls.n	1cd0 <_free_r+0x48>
    1cda:	6819      	ldr	r1, [r3, #0]
    1cdc:	1858      	adds	r0, r3, r1
    1cde:	42a0      	cmp	r0, r4
    1ce0:	d10b      	bne.n	1cfa <_free_r+0x72>
    1ce2:	6820      	ldr	r0, [r4, #0]
    1ce4:	4401      	add	r1, r0
    1ce6:	1858      	adds	r0, r3, r1
    1ce8:	4282      	cmp	r2, r0
    1cea:	6019      	str	r1, [r3, #0]
    1cec:	d1de      	bne.n	1cac <_free_r+0x24>
    1cee:	6810      	ldr	r0, [r2, #0]
    1cf0:	6852      	ldr	r2, [r2, #4]
    1cf2:	4401      	add	r1, r0
    1cf4:	6019      	str	r1, [r3, #0]
    1cf6:	605a      	str	r2, [r3, #4]
    1cf8:	e7d8      	b.n	1cac <_free_r+0x24>
    1cfa:	d902      	bls.n	1d02 <_free_r+0x7a>
    1cfc:	230c      	movs	r3, #12
    1cfe:	602b      	str	r3, [r5, #0]
    1d00:	e7d4      	b.n	1cac <_free_r+0x24>
    1d02:	6820      	ldr	r0, [r4, #0]
    1d04:	1821      	adds	r1, r4, r0
    1d06:	428a      	cmp	r2, r1
    1d08:	bf01      	itttt	eq
    1d0a:	6811      	ldreq	r1, [r2, #0]
    1d0c:	6852      	ldreq	r2, [r2, #4]
    1d0e:	1809      	addeq	r1, r1, r0
    1d10:	6021      	streq	r1, [r4, #0]
    1d12:	6062      	str	r2, [r4, #4]
    1d14:	605c      	str	r4, [r3, #4]
    1d16:	e7c9      	b.n	1cac <_free_r+0x24>
    1d18:	bd38      	pop	{r3, r4, r5, pc}
    1d1a:	bf00      	nop
    1d1c:	20000068 	.word	0x20000068

00001d20 <_malloc_r>:
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	1ccd      	adds	r5, r1, #3
    1d24:	f025 0503 	bic.w	r5, r5, #3
    1d28:	3508      	adds	r5, #8
    1d2a:	2d0c      	cmp	r5, #12
    1d2c:	bf38      	it	cc
    1d2e:	250c      	movcc	r5, #12
    1d30:	2d00      	cmp	r5, #0
    1d32:	4606      	mov	r6, r0
    1d34:	db01      	blt.n	1d3a <_malloc_r+0x1a>
    1d36:	42a9      	cmp	r1, r5
    1d38:	d903      	bls.n	1d42 <_malloc_r+0x22>
    1d3a:	230c      	movs	r3, #12
    1d3c:	6033      	str	r3, [r6, #0]
    1d3e:	2000      	movs	r0, #0
    1d40:	bd70      	pop	{r4, r5, r6, pc}
    1d42:	f000 fbc3 	bl	24cc <__malloc_lock>
    1d46:	4a21      	ldr	r2, [pc, #132]	; (1dcc <_malloc_r+0xac>)
    1d48:	6814      	ldr	r4, [r2, #0]
    1d4a:	4621      	mov	r1, r4
    1d4c:	b991      	cbnz	r1, 1d74 <_malloc_r+0x54>
    1d4e:	4c20      	ldr	r4, [pc, #128]	; (1dd0 <_malloc_r+0xb0>)
    1d50:	6823      	ldr	r3, [r4, #0]
    1d52:	b91b      	cbnz	r3, 1d5c <_malloc_r+0x3c>
    1d54:	4630      	mov	r0, r6
    1d56:	f000 fb01 	bl	235c <_sbrk_r>
    1d5a:	6020      	str	r0, [r4, #0]
    1d5c:	4629      	mov	r1, r5
    1d5e:	4630      	mov	r0, r6
    1d60:	f000 fafc 	bl	235c <_sbrk_r>
    1d64:	1c43      	adds	r3, r0, #1
    1d66:	d124      	bne.n	1db2 <_malloc_r+0x92>
    1d68:	230c      	movs	r3, #12
    1d6a:	4630      	mov	r0, r6
    1d6c:	6033      	str	r3, [r6, #0]
    1d6e:	f000 fbae 	bl	24ce <__malloc_unlock>
    1d72:	e7e4      	b.n	1d3e <_malloc_r+0x1e>
    1d74:	680b      	ldr	r3, [r1, #0]
    1d76:	1b5b      	subs	r3, r3, r5
    1d78:	d418      	bmi.n	1dac <_malloc_r+0x8c>
    1d7a:	2b0b      	cmp	r3, #11
    1d7c:	d90f      	bls.n	1d9e <_malloc_r+0x7e>
    1d7e:	600b      	str	r3, [r1, #0]
    1d80:	18cc      	adds	r4, r1, r3
    1d82:	50cd      	str	r5, [r1, r3]
    1d84:	4630      	mov	r0, r6
    1d86:	f000 fba2 	bl	24ce <__malloc_unlock>
    1d8a:	f104 000b 	add.w	r0, r4, #11
    1d8e:	1d23      	adds	r3, r4, #4
    1d90:	f020 0007 	bic.w	r0, r0, #7
    1d94:	1ac3      	subs	r3, r0, r3
    1d96:	d0d3      	beq.n	1d40 <_malloc_r+0x20>
    1d98:	425a      	negs	r2, r3
    1d9a:	50e2      	str	r2, [r4, r3]
    1d9c:	e7d0      	b.n	1d40 <_malloc_r+0x20>
    1d9e:	684b      	ldr	r3, [r1, #4]
    1da0:	428c      	cmp	r4, r1
    1da2:	bf16      	itet	ne
    1da4:	6063      	strne	r3, [r4, #4]
    1da6:	6013      	streq	r3, [r2, #0]
    1da8:	460c      	movne	r4, r1
    1daa:	e7eb      	b.n	1d84 <_malloc_r+0x64>
    1dac:	460c      	mov	r4, r1
    1dae:	6849      	ldr	r1, [r1, #4]
    1db0:	e7cc      	b.n	1d4c <_malloc_r+0x2c>
    1db2:	1cc4      	adds	r4, r0, #3
    1db4:	f024 0403 	bic.w	r4, r4, #3
    1db8:	42a0      	cmp	r0, r4
    1dba:	d005      	beq.n	1dc8 <_malloc_r+0xa8>
    1dbc:	1a21      	subs	r1, r4, r0
    1dbe:	4630      	mov	r0, r6
    1dc0:	f000 facc 	bl	235c <_sbrk_r>
    1dc4:	3001      	adds	r0, #1
    1dc6:	d0cf      	beq.n	1d68 <_malloc_r+0x48>
    1dc8:	6025      	str	r5, [r4, #0]
    1dca:	e7db      	b.n	1d84 <_malloc_r+0x64>
    1dcc:	20000068 	.word	0x20000068
    1dd0:	2000006c 	.word	0x2000006c

00001dd4 <__sfputc_r>:
    1dd4:	6893      	ldr	r3, [r2, #8]
    1dd6:	b410      	push	{r4}
    1dd8:	3b01      	subs	r3, #1
    1dda:	2b00      	cmp	r3, #0
    1ddc:	6093      	str	r3, [r2, #8]
    1dde:	da07      	bge.n	1df0 <__sfputc_r+0x1c>
    1de0:	6994      	ldr	r4, [r2, #24]
    1de2:	42a3      	cmp	r3, r4
    1de4:	db01      	blt.n	1dea <__sfputc_r+0x16>
    1de6:	290a      	cmp	r1, #10
    1de8:	d102      	bne.n	1df0 <__sfputc_r+0x1c>
    1dea:	bc10      	pop	{r4}
    1dec:	f7ff bcae 	b.w	174c <__swbuf_r>
    1df0:	6813      	ldr	r3, [r2, #0]
    1df2:	1c58      	adds	r0, r3, #1
    1df4:	6010      	str	r0, [r2, #0]
    1df6:	7019      	strb	r1, [r3, #0]
    1df8:	4608      	mov	r0, r1
    1dfa:	bc10      	pop	{r4}
    1dfc:	4770      	bx	lr

00001dfe <__sfputs_r>:
    1dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e00:	4606      	mov	r6, r0
    1e02:	460f      	mov	r7, r1
    1e04:	4614      	mov	r4, r2
    1e06:	18d5      	adds	r5, r2, r3
    1e08:	42ac      	cmp	r4, r5
    1e0a:	d101      	bne.n	1e10 <__sfputs_r+0x12>
    1e0c:	2000      	movs	r0, #0
    1e0e:	e007      	b.n	1e20 <__sfputs_r+0x22>
    1e10:	463a      	mov	r2, r7
    1e12:	f814 1b01 	ldrb.w	r1, [r4], #1
    1e16:	4630      	mov	r0, r6
    1e18:	f7ff ffdc 	bl	1dd4 <__sfputc_r>
    1e1c:	1c43      	adds	r3, r0, #1
    1e1e:	d1f3      	bne.n	1e08 <__sfputs_r+0xa>
    1e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001e24 <_vfiprintf_r>:
    1e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e28:	b09d      	sub	sp, #116	; 0x74
    1e2a:	460c      	mov	r4, r1
    1e2c:	4617      	mov	r7, r2
    1e2e:	9303      	str	r3, [sp, #12]
    1e30:	4606      	mov	r6, r0
    1e32:	b118      	cbz	r0, 1e3c <_vfiprintf_r+0x18>
    1e34:	6983      	ldr	r3, [r0, #24]
    1e36:	b90b      	cbnz	r3, 1e3c <_vfiprintf_r+0x18>
    1e38:	f7ff fe38 	bl	1aac <__sinit>
    1e3c:	4b7b      	ldr	r3, [pc, #492]	; (202c <_vfiprintf_r+0x208>)
    1e3e:	429c      	cmp	r4, r3
    1e40:	d157      	bne.n	1ef2 <_vfiprintf_r+0xce>
    1e42:	6874      	ldr	r4, [r6, #4]
    1e44:	89a3      	ldrh	r3, [r4, #12]
    1e46:	0718      	lsls	r0, r3, #28
    1e48:	d55d      	bpl.n	1f06 <_vfiprintf_r+0xe2>
    1e4a:	6923      	ldr	r3, [r4, #16]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d05a      	beq.n	1f06 <_vfiprintf_r+0xe2>
    1e50:	2300      	movs	r3, #0
    1e52:	9309      	str	r3, [sp, #36]	; 0x24
    1e54:	2320      	movs	r3, #32
    1e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1e5a:	2330      	movs	r3, #48	; 0x30
    1e5c:	f04f 0b01 	mov.w	fp, #1
    1e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1e64:	46b8      	mov	r8, r7
    1e66:	4645      	mov	r5, r8
    1e68:	f815 3b01 	ldrb.w	r3, [r5], #1
    1e6c:	b10b      	cbz	r3, 1e72 <_vfiprintf_r+0x4e>
    1e6e:	2b25      	cmp	r3, #37	; 0x25
    1e70:	d154      	bne.n	1f1c <_vfiprintf_r+0xf8>
    1e72:	ebb8 0a07 	subs.w	sl, r8, r7
    1e76:	d00b      	beq.n	1e90 <_vfiprintf_r+0x6c>
    1e78:	4653      	mov	r3, sl
    1e7a:	463a      	mov	r2, r7
    1e7c:	4621      	mov	r1, r4
    1e7e:	4630      	mov	r0, r6
    1e80:	f7ff ffbd 	bl	1dfe <__sfputs_r>
    1e84:	3001      	adds	r0, #1
    1e86:	f000 80c2 	beq.w	200e <_vfiprintf_r+0x1ea>
    1e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e8c:	4453      	add	r3, sl
    1e8e:	9309      	str	r3, [sp, #36]	; 0x24
    1e90:	f898 3000 	ldrb.w	r3, [r8]
    1e94:	2b00      	cmp	r3, #0
    1e96:	f000 80ba 	beq.w	200e <_vfiprintf_r+0x1ea>
    1e9a:	2300      	movs	r3, #0
    1e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1ea4:	9304      	str	r3, [sp, #16]
    1ea6:	9307      	str	r3, [sp, #28]
    1ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1eac:	931a      	str	r3, [sp, #104]	; 0x68
    1eae:	46a8      	mov	r8, r5
    1eb0:	2205      	movs	r2, #5
    1eb2:	f818 1b01 	ldrb.w	r1, [r8], #1
    1eb6:	485e      	ldr	r0, [pc, #376]	; (2030 <_vfiprintf_r+0x20c>)
    1eb8:	f000 fafa 	bl	24b0 <memchr>
    1ebc:	9b04      	ldr	r3, [sp, #16]
    1ebe:	bb78      	cbnz	r0, 1f20 <_vfiprintf_r+0xfc>
    1ec0:	06d9      	lsls	r1, r3, #27
    1ec2:	bf44      	itt	mi
    1ec4:	2220      	movmi	r2, #32
    1ec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1eca:	071a      	lsls	r2, r3, #28
    1ecc:	bf44      	itt	mi
    1ece:	222b      	movmi	r2, #43	; 0x2b
    1ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1ed4:	782a      	ldrb	r2, [r5, #0]
    1ed6:	2a2a      	cmp	r2, #42	; 0x2a
    1ed8:	d02a      	beq.n	1f30 <_vfiprintf_r+0x10c>
    1eda:	46a8      	mov	r8, r5
    1edc:	2000      	movs	r0, #0
    1ede:	250a      	movs	r5, #10
    1ee0:	9a07      	ldr	r2, [sp, #28]
    1ee2:	4641      	mov	r1, r8
    1ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
    1ee8:	3b30      	subs	r3, #48	; 0x30
    1eea:	2b09      	cmp	r3, #9
    1eec:	d969      	bls.n	1fc2 <_vfiprintf_r+0x19e>
    1eee:	b360      	cbz	r0, 1f4a <_vfiprintf_r+0x126>
    1ef0:	e024      	b.n	1f3c <_vfiprintf_r+0x118>
    1ef2:	4b50      	ldr	r3, [pc, #320]	; (2034 <_vfiprintf_r+0x210>)
    1ef4:	429c      	cmp	r4, r3
    1ef6:	d101      	bne.n	1efc <_vfiprintf_r+0xd8>
    1ef8:	68b4      	ldr	r4, [r6, #8]
    1efa:	e7a3      	b.n	1e44 <_vfiprintf_r+0x20>
    1efc:	4b4e      	ldr	r3, [pc, #312]	; (2038 <_vfiprintf_r+0x214>)
    1efe:	429c      	cmp	r4, r3
    1f00:	bf08      	it	eq
    1f02:	68f4      	ldreq	r4, [r6, #12]
    1f04:	e79e      	b.n	1e44 <_vfiprintf_r+0x20>
    1f06:	4621      	mov	r1, r4
    1f08:	4630      	mov	r0, r6
    1f0a:	f7ff fc71 	bl	17f0 <__swsetup_r>
    1f0e:	2800      	cmp	r0, #0
    1f10:	d09e      	beq.n	1e50 <_vfiprintf_r+0x2c>
    1f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f16:	b01d      	add	sp, #116	; 0x74
    1f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f1c:	46a8      	mov	r8, r5
    1f1e:	e7a2      	b.n	1e66 <_vfiprintf_r+0x42>
    1f20:	4a43      	ldr	r2, [pc, #268]	; (2030 <_vfiprintf_r+0x20c>)
    1f22:	4645      	mov	r5, r8
    1f24:	1a80      	subs	r0, r0, r2
    1f26:	fa0b f000 	lsl.w	r0, fp, r0
    1f2a:	4318      	orrs	r0, r3
    1f2c:	9004      	str	r0, [sp, #16]
    1f2e:	e7be      	b.n	1eae <_vfiprintf_r+0x8a>
    1f30:	9a03      	ldr	r2, [sp, #12]
    1f32:	1d11      	adds	r1, r2, #4
    1f34:	6812      	ldr	r2, [r2, #0]
    1f36:	9103      	str	r1, [sp, #12]
    1f38:	2a00      	cmp	r2, #0
    1f3a:	db01      	blt.n	1f40 <_vfiprintf_r+0x11c>
    1f3c:	9207      	str	r2, [sp, #28]
    1f3e:	e004      	b.n	1f4a <_vfiprintf_r+0x126>
    1f40:	4252      	negs	r2, r2
    1f42:	f043 0302 	orr.w	r3, r3, #2
    1f46:	9207      	str	r2, [sp, #28]
    1f48:	9304      	str	r3, [sp, #16]
    1f4a:	f898 3000 	ldrb.w	r3, [r8]
    1f4e:	2b2e      	cmp	r3, #46	; 0x2e
    1f50:	d10e      	bne.n	1f70 <_vfiprintf_r+0x14c>
    1f52:	f898 3001 	ldrb.w	r3, [r8, #1]
    1f56:	2b2a      	cmp	r3, #42	; 0x2a
    1f58:	d138      	bne.n	1fcc <_vfiprintf_r+0x1a8>
    1f5a:	9b03      	ldr	r3, [sp, #12]
    1f5c:	f108 0802 	add.w	r8, r8, #2
    1f60:	1d1a      	adds	r2, r3, #4
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	9203      	str	r2, [sp, #12]
    1f66:	2b00      	cmp	r3, #0
    1f68:	bfb8      	it	lt
    1f6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1f6e:	9305      	str	r3, [sp, #20]
    1f70:	4d32      	ldr	r5, [pc, #200]	; (203c <_vfiprintf_r+0x218>)
    1f72:	2203      	movs	r2, #3
    1f74:	f898 1000 	ldrb.w	r1, [r8]
    1f78:	4628      	mov	r0, r5
    1f7a:	f000 fa99 	bl	24b0 <memchr>
    1f7e:	b140      	cbz	r0, 1f92 <_vfiprintf_r+0x16e>
    1f80:	2340      	movs	r3, #64	; 0x40
    1f82:	1b40      	subs	r0, r0, r5
    1f84:	fa03 f000 	lsl.w	r0, r3, r0
    1f88:	9b04      	ldr	r3, [sp, #16]
    1f8a:	f108 0801 	add.w	r8, r8, #1
    1f8e:	4303      	orrs	r3, r0
    1f90:	9304      	str	r3, [sp, #16]
    1f92:	f898 1000 	ldrb.w	r1, [r8]
    1f96:	2206      	movs	r2, #6
    1f98:	4829      	ldr	r0, [pc, #164]	; (2040 <_vfiprintf_r+0x21c>)
    1f9a:	f108 0701 	add.w	r7, r8, #1
    1f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1fa2:	f000 fa85 	bl	24b0 <memchr>
    1fa6:	2800      	cmp	r0, #0
    1fa8:	d037      	beq.n	201a <_vfiprintf_r+0x1f6>
    1faa:	4b26      	ldr	r3, [pc, #152]	; (2044 <_vfiprintf_r+0x220>)
    1fac:	bb1b      	cbnz	r3, 1ff6 <_vfiprintf_r+0x1d2>
    1fae:	9b03      	ldr	r3, [sp, #12]
    1fb0:	3307      	adds	r3, #7
    1fb2:	f023 0307 	bic.w	r3, r3, #7
    1fb6:	3308      	adds	r3, #8
    1fb8:	9303      	str	r3, [sp, #12]
    1fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fbc:	444b      	add	r3, r9
    1fbe:	9309      	str	r3, [sp, #36]	; 0x24
    1fc0:	e750      	b.n	1e64 <_vfiprintf_r+0x40>
    1fc2:	fb05 3202 	mla	r2, r5, r2, r3
    1fc6:	2001      	movs	r0, #1
    1fc8:	4688      	mov	r8, r1
    1fca:	e78a      	b.n	1ee2 <_vfiprintf_r+0xbe>
    1fcc:	2300      	movs	r3, #0
    1fce:	250a      	movs	r5, #10
    1fd0:	4619      	mov	r1, r3
    1fd2:	f108 0801 	add.w	r8, r8, #1
    1fd6:	9305      	str	r3, [sp, #20]
    1fd8:	4640      	mov	r0, r8
    1fda:	f810 2b01 	ldrb.w	r2, [r0], #1
    1fde:	3a30      	subs	r2, #48	; 0x30
    1fe0:	2a09      	cmp	r2, #9
    1fe2:	d903      	bls.n	1fec <_vfiprintf_r+0x1c8>
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d0c3      	beq.n	1f70 <_vfiprintf_r+0x14c>
    1fe8:	9105      	str	r1, [sp, #20]
    1fea:	e7c1      	b.n	1f70 <_vfiprintf_r+0x14c>
    1fec:	fb05 2101 	mla	r1, r5, r1, r2
    1ff0:	2301      	movs	r3, #1
    1ff2:	4680      	mov	r8, r0
    1ff4:	e7f0      	b.n	1fd8 <_vfiprintf_r+0x1b4>
    1ff6:	ab03      	add	r3, sp, #12
    1ff8:	9300      	str	r3, [sp, #0]
    1ffa:	4622      	mov	r2, r4
    1ffc:	4b12      	ldr	r3, [pc, #72]	; (2048 <_vfiprintf_r+0x224>)
    1ffe:	a904      	add	r1, sp, #16
    2000:	4630      	mov	r0, r6
    2002:	f3af 8000 	nop.w
    2006:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    200a:	4681      	mov	r9, r0
    200c:	d1d5      	bne.n	1fba <_vfiprintf_r+0x196>
    200e:	89a3      	ldrh	r3, [r4, #12]
    2010:	065b      	lsls	r3, r3, #25
    2012:	f53f af7e 	bmi.w	1f12 <_vfiprintf_r+0xee>
    2016:	9809      	ldr	r0, [sp, #36]	; 0x24
    2018:	e77d      	b.n	1f16 <_vfiprintf_r+0xf2>
    201a:	ab03      	add	r3, sp, #12
    201c:	9300      	str	r3, [sp, #0]
    201e:	4622      	mov	r2, r4
    2020:	4b09      	ldr	r3, [pc, #36]	; (2048 <_vfiprintf_r+0x224>)
    2022:	a904      	add	r1, sp, #16
    2024:	4630      	mov	r0, r6
    2026:	f000 f887 	bl	2138 <_printf_i>
    202a:	e7ec      	b.n	2006 <_vfiprintf_r+0x1e2>
    202c:	00002c6c 	.word	0x00002c6c
    2030:	00002cac 	.word	0x00002cac
    2034:	00002c8c 	.word	0x00002c8c
    2038:	00002c4c 	.word	0x00002c4c
    203c:	00002cb2 	.word	0x00002cb2
    2040:	00002cb6 	.word	0x00002cb6
    2044:	00000000 	.word	0x00000000
    2048:	00001dff 	.word	0x00001dff

0000204c <_printf_common>:
    204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2050:	4691      	mov	r9, r2
    2052:	461f      	mov	r7, r3
    2054:	688a      	ldr	r2, [r1, #8]
    2056:	690b      	ldr	r3, [r1, #16]
    2058:	4606      	mov	r6, r0
    205a:	4293      	cmp	r3, r2
    205c:	bfb8      	it	lt
    205e:	4613      	movlt	r3, r2
    2060:	f8c9 3000 	str.w	r3, [r9]
    2064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2068:	460c      	mov	r4, r1
    206a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    206e:	b112      	cbz	r2, 2076 <_printf_common+0x2a>
    2070:	3301      	adds	r3, #1
    2072:	f8c9 3000 	str.w	r3, [r9]
    2076:	6823      	ldr	r3, [r4, #0]
    2078:	0699      	lsls	r1, r3, #26
    207a:	bf42      	ittt	mi
    207c:	f8d9 3000 	ldrmi.w	r3, [r9]
    2080:	3302      	addmi	r3, #2
    2082:	f8c9 3000 	strmi.w	r3, [r9]
    2086:	6825      	ldr	r5, [r4, #0]
    2088:	f015 0506 	ands.w	r5, r5, #6
    208c:	d107      	bne.n	209e <_printf_common+0x52>
    208e:	f104 0a19 	add.w	sl, r4, #25
    2092:	68e3      	ldr	r3, [r4, #12]
    2094:	f8d9 2000 	ldr.w	r2, [r9]
    2098:	1a9b      	subs	r3, r3, r2
    209a:	42ab      	cmp	r3, r5
    209c:	dc29      	bgt.n	20f2 <_printf_common+0xa6>
    209e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    20a2:	6822      	ldr	r2, [r4, #0]
    20a4:	3300      	adds	r3, #0
    20a6:	bf18      	it	ne
    20a8:	2301      	movne	r3, #1
    20aa:	0692      	lsls	r2, r2, #26
    20ac:	d42e      	bmi.n	210c <_printf_common+0xc0>
    20ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
    20b2:	4639      	mov	r1, r7
    20b4:	4630      	mov	r0, r6
    20b6:	47c0      	blx	r8
    20b8:	3001      	adds	r0, #1
    20ba:	d021      	beq.n	2100 <_printf_common+0xb4>
    20bc:	6823      	ldr	r3, [r4, #0]
    20be:	68e5      	ldr	r5, [r4, #12]
    20c0:	f003 0306 	and.w	r3, r3, #6
    20c4:	2b04      	cmp	r3, #4
    20c6:	bf18      	it	ne
    20c8:	2500      	movne	r5, #0
    20ca:	f8d9 2000 	ldr.w	r2, [r9]
    20ce:	f04f 0900 	mov.w	r9, #0
    20d2:	bf08      	it	eq
    20d4:	1aad      	subeq	r5, r5, r2
    20d6:	68a3      	ldr	r3, [r4, #8]
    20d8:	6922      	ldr	r2, [r4, #16]
    20da:	bf08      	it	eq
    20dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    20e0:	4293      	cmp	r3, r2
    20e2:	bfc4      	itt	gt
    20e4:	1a9b      	subgt	r3, r3, r2
    20e6:	18ed      	addgt	r5, r5, r3
    20e8:	341a      	adds	r4, #26
    20ea:	454d      	cmp	r5, r9
    20ec:	d11a      	bne.n	2124 <_printf_common+0xd8>
    20ee:	2000      	movs	r0, #0
    20f0:	e008      	b.n	2104 <_printf_common+0xb8>
    20f2:	2301      	movs	r3, #1
    20f4:	4652      	mov	r2, sl
    20f6:	4639      	mov	r1, r7
    20f8:	4630      	mov	r0, r6
    20fa:	47c0      	blx	r8
    20fc:	3001      	adds	r0, #1
    20fe:	d103      	bne.n	2108 <_printf_common+0xbc>
    2100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2108:	3501      	adds	r5, #1
    210a:	e7c2      	b.n	2092 <_printf_common+0x46>
    210c:	2030      	movs	r0, #48	; 0x30
    210e:	18e1      	adds	r1, r4, r3
    2110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2114:	1c5a      	adds	r2, r3, #1
    2116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    211a:	4422      	add	r2, r4
    211c:	3302      	adds	r3, #2
    211e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2122:	e7c4      	b.n	20ae <_printf_common+0x62>
    2124:	2301      	movs	r3, #1
    2126:	4622      	mov	r2, r4
    2128:	4639      	mov	r1, r7
    212a:	4630      	mov	r0, r6
    212c:	47c0      	blx	r8
    212e:	3001      	adds	r0, #1
    2130:	d0e6      	beq.n	2100 <_printf_common+0xb4>
    2132:	f109 0901 	add.w	r9, r9, #1
    2136:	e7d8      	b.n	20ea <_printf_common+0x9e>

00002138 <_printf_i>:
    2138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    213c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    2140:	460c      	mov	r4, r1
    2142:	7e09      	ldrb	r1, [r1, #24]
    2144:	b085      	sub	sp, #20
    2146:	296e      	cmp	r1, #110	; 0x6e
    2148:	4617      	mov	r7, r2
    214a:	4606      	mov	r6, r0
    214c:	4698      	mov	r8, r3
    214e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2150:	f000 80b3 	beq.w	22ba <_printf_i+0x182>
    2154:	d822      	bhi.n	219c <_printf_i+0x64>
    2156:	2963      	cmp	r1, #99	; 0x63
    2158:	d036      	beq.n	21c8 <_printf_i+0x90>
    215a:	d80a      	bhi.n	2172 <_printf_i+0x3a>
    215c:	2900      	cmp	r1, #0
    215e:	f000 80b9 	beq.w	22d4 <_printf_i+0x19c>
    2162:	2958      	cmp	r1, #88	; 0x58
    2164:	f000 8083 	beq.w	226e <_printf_i+0x136>
    2168:	f104 0542 	add.w	r5, r4, #66	; 0x42
    216c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2170:	e032      	b.n	21d8 <_printf_i+0xa0>
    2172:	2964      	cmp	r1, #100	; 0x64
    2174:	d001      	beq.n	217a <_printf_i+0x42>
    2176:	2969      	cmp	r1, #105	; 0x69
    2178:	d1f6      	bne.n	2168 <_printf_i+0x30>
    217a:	6820      	ldr	r0, [r4, #0]
    217c:	6813      	ldr	r3, [r2, #0]
    217e:	0605      	lsls	r5, r0, #24
    2180:	f103 0104 	add.w	r1, r3, #4
    2184:	d52a      	bpl.n	21dc <_printf_i+0xa4>
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	6011      	str	r1, [r2, #0]
    218a:	2b00      	cmp	r3, #0
    218c:	da03      	bge.n	2196 <_printf_i+0x5e>
    218e:	222d      	movs	r2, #45	; 0x2d
    2190:	425b      	negs	r3, r3
    2192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2196:	486f      	ldr	r0, [pc, #444]	; (2354 <_printf_i+0x21c>)
    2198:	220a      	movs	r2, #10
    219a:	e039      	b.n	2210 <_printf_i+0xd8>
    219c:	2973      	cmp	r1, #115	; 0x73
    219e:	f000 809d 	beq.w	22dc <_printf_i+0x1a4>
    21a2:	d808      	bhi.n	21b6 <_printf_i+0x7e>
    21a4:	296f      	cmp	r1, #111	; 0x6f
    21a6:	d020      	beq.n	21ea <_printf_i+0xb2>
    21a8:	2970      	cmp	r1, #112	; 0x70
    21aa:	d1dd      	bne.n	2168 <_printf_i+0x30>
    21ac:	6823      	ldr	r3, [r4, #0]
    21ae:	f043 0320 	orr.w	r3, r3, #32
    21b2:	6023      	str	r3, [r4, #0]
    21b4:	e003      	b.n	21be <_printf_i+0x86>
    21b6:	2975      	cmp	r1, #117	; 0x75
    21b8:	d017      	beq.n	21ea <_printf_i+0xb2>
    21ba:	2978      	cmp	r1, #120	; 0x78
    21bc:	d1d4      	bne.n	2168 <_printf_i+0x30>
    21be:	2378      	movs	r3, #120	; 0x78
    21c0:	4865      	ldr	r0, [pc, #404]	; (2358 <_printf_i+0x220>)
    21c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    21c6:	e055      	b.n	2274 <_printf_i+0x13c>
    21c8:	6813      	ldr	r3, [r2, #0]
    21ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
    21ce:	1d19      	adds	r1, r3, #4
    21d0:	681b      	ldr	r3, [r3, #0]
    21d2:	6011      	str	r1, [r2, #0]
    21d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    21d8:	2301      	movs	r3, #1
    21da:	e08c      	b.n	22f6 <_printf_i+0x1be>
    21dc:	681b      	ldr	r3, [r3, #0]
    21de:	f010 0f40 	tst.w	r0, #64	; 0x40
    21e2:	6011      	str	r1, [r2, #0]
    21e4:	bf18      	it	ne
    21e6:	b21b      	sxthne	r3, r3
    21e8:	e7cf      	b.n	218a <_printf_i+0x52>
    21ea:	6813      	ldr	r3, [r2, #0]
    21ec:	6825      	ldr	r5, [r4, #0]
    21ee:	1d18      	adds	r0, r3, #4
    21f0:	6010      	str	r0, [r2, #0]
    21f2:	0628      	lsls	r0, r5, #24
    21f4:	d501      	bpl.n	21fa <_printf_i+0xc2>
    21f6:	681b      	ldr	r3, [r3, #0]
    21f8:	e002      	b.n	2200 <_printf_i+0xc8>
    21fa:	0668      	lsls	r0, r5, #25
    21fc:	d5fb      	bpl.n	21f6 <_printf_i+0xbe>
    21fe:	881b      	ldrh	r3, [r3, #0]
    2200:	296f      	cmp	r1, #111	; 0x6f
    2202:	bf14      	ite	ne
    2204:	220a      	movne	r2, #10
    2206:	2208      	moveq	r2, #8
    2208:	4852      	ldr	r0, [pc, #328]	; (2354 <_printf_i+0x21c>)
    220a:	2100      	movs	r1, #0
    220c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    2210:	6865      	ldr	r5, [r4, #4]
    2212:	2d00      	cmp	r5, #0
    2214:	60a5      	str	r5, [r4, #8]
    2216:	f2c0 8095 	blt.w	2344 <_printf_i+0x20c>
    221a:	6821      	ldr	r1, [r4, #0]
    221c:	f021 0104 	bic.w	r1, r1, #4
    2220:	6021      	str	r1, [r4, #0]
    2222:	2b00      	cmp	r3, #0
    2224:	d13d      	bne.n	22a2 <_printf_i+0x16a>
    2226:	2d00      	cmp	r5, #0
    2228:	f040 808e 	bne.w	2348 <_printf_i+0x210>
    222c:	4665      	mov	r5, ip
    222e:	2a08      	cmp	r2, #8
    2230:	d10b      	bne.n	224a <_printf_i+0x112>
    2232:	6823      	ldr	r3, [r4, #0]
    2234:	07db      	lsls	r3, r3, #31
    2236:	d508      	bpl.n	224a <_printf_i+0x112>
    2238:	6923      	ldr	r3, [r4, #16]
    223a:	6862      	ldr	r2, [r4, #4]
    223c:	429a      	cmp	r2, r3
    223e:	bfde      	ittt	le
    2240:	2330      	movle	r3, #48	; 0x30
    2242:	f805 3c01 	strble.w	r3, [r5, #-1]
    2246:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    224a:	ebac 0305 	sub.w	r3, ip, r5
    224e:	6123      	str	r3, [r4, #16]
    2250:	f8cd 8000 	str.w	r8, [sp]
    2254:	463b      	mov	r3, r7
    2256:	aa03      	add	r2, sp, #12
    2258:	4621      	mov	r1, r4
    225a:	4630      	mov	r0, r6
    225c:	f7ff fef6 	bl	204c <_printf_common>
    2260:	3001      	adds	r0, #1
    2262:	d14d      	bne.n	2300 <_printf_i+0x1c8>
    2264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2268:	b005      	add	sp, #20
    226a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    226e:	4839      	ldr	r0, [pc, #228]	; (2354 <_printf_i+0x21c>)
    2270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    2274:	6813      	ldr	r3, [r2, #0]
    2276:	6821      	ldr	r1, [r4, #0]
    2278:	1d1d      	adds	r5, r3, #4
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	6015      	str	r5, [r2, #0]
    227e:	060a      	lsls	r2, r1, #24
    2280:	d50b      	bpl.n	229a <_printf_i+0x162>
    2282:	07ca      	lsls	r2, r1, #31
    2284:	bf44      	itt	mi
    2286:	f041 0120 	orrmi.w	r1, r1, #32
    228a:	6021      	strmi	r1, [r4, #0]
    228c:	b91b      	cbnz	r3, 2296 <_printf_i+0x15e>
    228e:	6822      	ldr	r2, [r4, #0]
    2290:	f022 0220 	bic.w	r2, r2, #32
    2294:	6022      	str	r2, [r4, #0]
    2296:	2210      	movs	r2, #16
    2298:	e7b7      	b.n	220a <_printf_i+0xd2>
    229a:	064d      	lsls	r5, r1, #25
    229c:	bf48      	it	mi
    229e:	b29b      	uxthmi	r3, r3
    22a0:	e7ef      	b.n	2282 <_printf_i+0x14a>
    22a2:	4665      	mov	r5, ip
    22a4:	fbb3 f1f2 	udiv	r1, r3, r2
    22a8:	fb02 3311 	mls	r3, r2, r1, r3
    22ac:	5cc3      	ldrb	r3, [r0, r3]
    22ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
    22b2:	460b      	mov	r3, r1
    22b4:	2900      	cmp	r1, #0
    22b6:	d1f5      	bne.n	22a4 <_printf_i+0x16c>
    22b8:	e7b9      	b.n	222e <_printf_i+0xf6>
    22ba:	6813      	ldr	r3, [r2, #0]
    22bc:	6825      	ldr	r5, [r4, #0]
    22be:	1d18      	adds	r0, r3, #4
    22c0:	6961      	ldr	r1, [r4, #20]
    22c2:	6010      	str	r0, [r2, #0]
    22c4:	0628      	lsls	r0, r5, #24
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	d501      	bpl.n	22ce <_printf_i+0x196>
    22ca:	6019      	str	r1, [r3, #0]
    22cc:	e002      	b.n	22d4 <_printf_i+0x19c>
    22ce:	066a      	lsls	r2, r5, #25
    22d0:	d5fb      	bpl.n	22ca <_printf_i+0x192>
    22d2:	8019      	strh	r1, [r3, #0]
    22d4:	2300      	movs	r3, #0
    22d6:	4665      	mov	r5, ip
    22d8:	6123      	str	r3, [r4, #16]
    22da:	e7b9      	b.n	2250 <_printf_i+0x118>
    22dc:	6813      	ldr	r3, [r2, #0]
    22de:	1d19      	adds	r1, r3, #4
    22e0:	6011      	str	r1, [r2, #0]
    22e2:	681d      	ldr	r5, [r3, #0]
    22e4:	6862      	ldr	r2, [r4, #4]
    22e6:	2100      	movs	r1, #0
    22e8:	4628      	mov	r0, r5
    22ea:	f000 f8e1 	bl	24b0 <memchr>
    22ee:	b108      	cbz	r0, 22f4 <_printf_i+0x1bc>
    22f0:	1b40      	subs	r0, r0, r5
    22f2:	6060      	str	r0, [r4, #4]
    22f4:	6863      	ldr	r3, [r4, #4]
    22f6:	6123      	str	r3, [r4, #16]
    22f8:	2300      	movs	r3, #0
    22fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    22fe:	e7a7      	b.n	2250 <_printf_i+0x118>
    2300:	6923      	ldr	r3, [r4, #16]
    2302:	462a      	mov	r2, r5
    2304:	4639      	mov	r1, r7
    2306:	4630      	mov	r0, r6
    2308:	47c0      	blx	r8
    230a:	3001      	adds	r0, #1
    230c:	d0aa      	beq.n	2264 <_printf_i+0x12c>
    230e:	6823      	ldr	r3, [r4, #0]
    2310:	079b      	lsls	r3, r3, #30
    2312:	d413      	bmi.n	233c <_printf_i+0x204>
    2314:	68e0      	ldr	r0, [r4, #12]
    2316:	9b03      	ldr	r3, [sp, #12]
    2318:	4298      	cmp	r0, r3
    231a:	bfb8      	it	lt
    231c:	4618      	movlt	r0, r3
    231e:	e7a3      	b.n	2268 <_printf_i+0x130>
    2320:	2301      	movs	r3, #1
    2322:	464a      	mov	r2, r9
    2324:	4639      	mov	r1, r7
    2326:	4630      	mov	r0, r6
    2328:	47c0      	blx	r8
    232a:	3001      	adds	r0, #1
    232c:	d09a      	beq.n	2264 <_printf_i+0x12c>
    232e:	3501      	adds	r5, #1
    2330:	68e3      	ldr	r3, [r4, #12]
    2332:	9a03      	ldr	r2, [sp, #12]
    2334:	1a9b      	subs	r3, r3, r2
    2336:	42ab      	cmp	r3, r5
    2338:	dcf2      	bgt.n	2320 <_printf_i+0x1e8>
    233a:	e7eb      	b.n	2314 <_printf_i+0x1dc>
    233c:	2500      	movs	r5, #0
    233e:	f104 0919 	add.w	r9, r4, #25
    2342:	e7f5      	b.n	2330 <_printf_i+0x1f8>
    2344:	2b00      	cmp	r3, #0
    2346:	d1ac      	bne.n	22a2 <_printf_i+0x16a>
    2348:	7803      	ldrb	r3, [r0, #0]
    234a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    234e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2352:	e76c      	b.n	222e <_printf_i+0xf6>
    2354:	00002cbd 	.word	0x00002cbd
    2358:	00002cce 	.word	0x00002cce

0000235c <_sbrk_r>:
    235c:	b538      	push	{r3, r4, r5, lr}
    235e:	2300      	movs	r3, #0
    2360:	4c05      	ldr	r4, [pc, #20]	; (2378 <_sbrk_r+0x1c>)
    2362:	4605      	mov	r5, r0
    2364:	4608      	mov	r0, r1
    2366:	6023      	str	r3, [r4, #0]
    2368:	f000 f8ec 	bl	2544 <_sbrk>
    236c:	1c43      	adds	r3, r0, #1
    236e:	d102      	bne.n	2376 <_sbrk_r+0x1a>
    2370:	6823      	ldr	r3, [r4, #0]
    2372:	b103      	cbz	r3, 2376 <_sbrk_r+0x1a>
    2374:	602b      	str	r3, [r5, #0]
    2376:	bd38      	pop	{r3, r4, r5, pc}
    2378:	20000074 	.word	0x20000074

0000237c <__sread>:
    237c:	b510      	push	{r4, lr}
    237e:	460c      	mov	r4, r1
    2380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2384:	f000 f8a4 	bl	24d0 <_read_r>
    2388:	2800      	cmp	r0, #0
    238a:	bfab      	itete	ge
    238c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    238e:	89a3      	ldrhlt	r3, [r4, #12]
    2390:	181b      	addge	r3, r3, r0
    2392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2396:	bfac      	ite	ge
    2398:	6563      	strge	r3, [r4, #84]	; 0x54
    239a:	81a3      	strhlt	r3, [r4, #12]
    239c:	bd10      	pop	{r4, pc}

0000239e <__swrite>:
    239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23a2:	461f      	mov	r7, r3
    23a4:	898b      	ldrh	r3, [r1, #12]
    23a6:	4605      	mov	r5, r0
    23a8:	05db      	lsls	r3, r3, #23
    23aa:	460c      	mov	r4, r1
    23ac:	4616      	mov	r6, r2
    23ae:	d505      	bpl.n	23bc <__swrite+0x1e>
    23b0:	2302      	movs	r3, #2
    23b2:	2200      	movs	r2, #0
    23b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    23b8:	f000 f868 	bl	248c <_lseek_r>
    23bc:	89a3      	ldrh	r3, [r4, #12]
    23be:	4632      	mov	r2, r6
    23c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    23c4:	81a3      	strh	r3, [r4, #12]
    23c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    23ca:	463b      	mov	r3, r7
    23cc:	4628      	mov	r0, r5
    23ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    23d2:	f000 b817 	b.w	2404 <_write_r>

000023d6 <__sseek>:
    23d6:	b510      	push	{r4, lr}
    23d8:	460c      	mov	r4, r1
    23da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    23de:	f000 f855 	bl	248c <_lseek_r>
    23e2:	1c43      	adds	r3, r0, #1
    23e4:	89a3      	ldrh	r3, [r4, #12]
    23e6:	bf15      	itete	ne
    23e8:	6560      	strne	r0, [r4, #84]	; 0x54
    23ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    23ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    23f2:	81a3      	strheq	r3, [r4, #12]
    23f4:	bf18      	it	ne
    23f6:	81a3      	strhne	r3, [r4, #12]
    23f8:	bd10      	pop	{r4, pc}

000023fa <__sclose>:
    23fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    23fe:	f000 b813 	b.w	2428 <_close_r>
	...

00002404 <_write_r>:
    2404:	b538      	push	{r3, r4, r5, lr}
    2406:	4605      	mov	r5, r0
    2408:	4608      	mov	r0, r1
    240a:	4611      	mov	r1, r2
    240c:	2200      	movs	r2, #0
    240e:	4c05      	ldr	r4, [pc, #20]	; (2424 <_write_r+0x20>)
    2410:	6022      	str	r2, [r4, #0]
    2412:	461a      	mov	r2, r3
    2414:	f7fe fbd4 	bl	bc0 <_write>
    2418:	1c43      	adds	r3, r0, #1
    241a:	d102      	bne.n	2422 <_write_r+0x1e>
    241c:	6823      	ldr	r3, [r4, #0]
    241e:	b103      	cbz	r3, 2422 <_write_r+0x1e>
    2420:	602b      	str	r3, [r5, #0]
    2422:	bd38      	pop	{r3, r4, r5, pc}
    2424:	20000074 	.word	0x20000074

00002428 <_close_r>:
    2428:	b538      	push	{r3, r4, r5, lr}
    242a:	2300      	movs	r3, #0
    242c:	4c05      	ldr	r4, [pc, #20]	; (2444 <_close_r+0x1c>)
    242e:	4605      	mov	r5, r0
    2430:	4608      	mov	r0, r1
    2432:	6023      	str	r3, [r4, #0]
    2434:	f000 f85e 	bl	24f4 <_close>
    2438:	1c43      	adds	r3, r0, #1
    243a:	d102      	bne.n	2442 <_close_r+0x1a>
    243c:	6823      	ldr	r3, [r4, #0]
    243e:	b103      	cbz	r3, 2442 <_close_r+0x1a>
    2440:	602b      	str	r3, [r5, #0]
    2442:	bd38      	pop	{r3, r4, r5, pc}
    2444:	20000074 	.word	0x20000074

00002448 <_fstat_r>:
    2448:	b538      	push	{r3, r4, r5, lr}
    244a:	2300      	movs	r3, #0
    244c:	4c06      	ldr	r4, [pc, #24]	; (2468 <_fstat_r+0x20>)
    244e:	4605      	mov	r5, r0
    2450:	4608      	mov	r0, r1
    2452:	4611      	mov	r1, r2
    2454:	6023      	str	r3, [r4, #0]
    2456:	f000 f855 	bl	2504 <_fstat>
    245a:	1c43      	adds	r3, r0, #1
    245c:	d102      	bne.n	2464 <_fstat_r+0x1c>
    245e:	6823      	ldr	r3, [r4, #0]
    2460:	b103      	cbz	r3, 2464 <_fstat_r+0x1c>
    2462:	602b      	str	r3, [r5, #0]
    2464:	bd38      	pop	{r3, r4, r5, pc}
    2466:	bf00      	nop
    2468:	20000074 	.word	0x20000074

0000246c <_isatty_r>:
    246c:	b538      	push	{r3, r4, r5, lr}
    246e:	2300      	movs	r3, #0
    2470:	4c05      	ldr	r4, [pc, #20]	; (2488 <_isatty_r+0x1c>)
    2472:	4605      	mov	r5, r0
    2474:	4608      	mov	r0, r1
    2476:	6023      	str	r3, [r4, #0]
    2478:	f000 f84c 	bl	2514 <_isatty>
    247c:	1c43      	adds	r3, r0, #1
    247e:	d102      	bne.n	2486 <_isatty_r+0x1a>
    2480:	6823      	ldr	r3, [r4, #0]
    2482:	b103      	cbz	r3, 2486 <_isatty_r+0x1a>
    2484:	602b      	str	r3, [r5, #0]
    2486:	bd38      	pop	{r3, r4, r5, pc}
    2488:	20000074 	.word	0x20000074

0000248c <_lseek_r>:
    248c:	b538      	push	{r3, r4, r5, lr}
    248e:	4605      	mov	r5, r0
    2490:	4608      	mov	r0, r1
    2492:	4611      	mov	r1, r2
    2494:	2200      	movs	r2, #0
    2496:	4c05      	ldr	r4, [pc, #20]	; (24ac <_lseek_r+0x20>)
    2498:	6022      	str	r2, [r4, #0]
    249a:	461a      	mov	r2, r3
    249c:	f000 f842 	bl	2524 <_lseek>
    24a0:	1c43      	adds	r3, r0, #1
    24a2:	d102      	bne.n	24aa <_lseek_r+0x1e>
    24a4:	6823      	ldr	r3, [r4, #0]
    24a6:	b103      	cbz	r3, 24aa <_lseek_r+0x1e>
    24a8:	602b      	str	r3, [r5, #0]
    24aa:	bd38      	pop	{r3, r4, r5, pc}
    24ac:	20000074 	.word	0x20000074

000024b0 <memchr>:
    24b0:	b510      	push	{r4, lr}
    24b2:	b2c9      	uxtb	r1, r1
    24b4:	4402      	add	r2, r0
    24b6:	4290      	cmp	r0, r2
    24b8:	4603      	mov	r3, r0
    24ba:	d101      	bne.n	24c0 <memchr+0x10>
    24bc:	2300      	movs	r3, #0
    24be:	e003      	b.n	24c8 <memchr+0x18>
    24c0:	781c      	ldrb	r4, [r3, #0]
    24c2:	3001      	adds	r0, #1
    24c4:	428c      	cmp	r4, r1
    24c6:	d1f6      	bne.n	24b6 <memchr+0x6>
    24c8:	4618      	mov	r0, r3
    24ca:	bd10      	pop	{r4, pc}

000024cc <__malloc_lock>:
    24cc:	4770      	bx	lr

000024ce <__malloc_unlock>:
    24ce:	4770      	bx	lr

000024d0 <_read_r>:
    24d0:	b538      	push	{r3, r4, r5, lr}
    24d2:	4605      	mov	r5, r0
    24d4:	4608      	mov	r0, r1
    24d6:	4611      	mov	r1, r2
    24d8:	2200      	movs	r2, #0
    24da:	4c05      	ldr	r4, [pc, #20]	; (24f0 <_read_r+0x20>)
    24dc:	6022      	str	r2, [r4, #0]
    24de:	461a      	mov	r2, r3
    24e0:	f000 f828 	bl	2534 <_read>
    24e4:	1c43      	adds	r3, r0, #1
    24e6:	d102      	bne.n	24ee <_read_r+0x1e>
    24e8:	6823      	ldr	r3, [r4, #0]
    24ea:	b103      	cbz	r3, 24ee <_read_r+0x1e>
    24ec:	602b      	str	r3, [r5, #0]
    24ee:	bd38      	pop	{r3, r4, r5, pc}
    24f0:	20000074 	.word	0x20000074

000024f4 <_close>:
    24f4:	2258      	movs	r2, #88	; 0x58
    24f6:	4b02      	ldr	r3, [pc, #8]	; (2500 <_close+0xc>)
    24f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    24fc:	601a      	str	r2, [r3, #0]
    24fe:	4770      	bx	lr
    2500:	20000074 	.word	0x20000074

00002504 <_fstat>:
    2504:	2258      	movs	r2, #88	; 0x58
    2506:	4b02      	ldr	r3, [pc, #8]	; (2510 <_fstat+0xc>)
    2508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    250c:	601a      	str	r2, [r3, #0]
    250e:	4770      	bx	lr
    2510:	20000074 	.word	0x20000074

00002514 <_isatty>:
    2514:	2258      	movs	r2, #88	; 0x58
    2516:	4b02      	ldr	r3, [pc, #8]	; (2520 <_isatty+0xc>)
    2518:	2000      	movs	r0, #0
    251a:	601a      	str	r2, [r3, #0]
    251c:	4770      	bx	lr
    251e:	bf00      	nop
    2520:	20000074 	.word	0x20000074

00002524 <_lseek>:
    2524:	2258      	movs	r2, #88	; 0x58
    2526:	4b02      	ldr	r3, [pc, #8]	; (2530 <_lseek+0xc>)
    2528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    252c:	601a      	str	r2, [r3, #0]
    252e:	4770      	bx	lr
    2530:	20000074 	.word	0x20000074

00002534 <_read>:
    2534:	2258      	movs	r2, #88	; 0x58
    2536:	4b02      	ldr	r3, [pc, #8]	; (2540 <_read+0xc>)
    2538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    253c:	601a      	str	r2, [r3, #0]
    253e:	4770      	bx	lr
    2540:	20000074 	.word	0x20000074

00002544 <_sbrk>:
    2544:	4a04      	ldr	r2, [pc, #16]	; (2558 <_sbrk+0x14>)
    2546:	4905      	ldr	r1, [pc, #20]	; (255c <_sbrk+0x18>)
    2548:	6813      	ldr	r3, [r2, #0]
    254a:	2b00      	cmp	r3, #0
    254c:	bf08      	it	eq
    254e:	460b      	moveq	r3, r1
    2550:	4418      	add	r0, r3
    2552:	6010      	str	r0, [r2, #0]
    2554:	4618      	mov	r0, r3
    2556:	4770      	bx	lr
    2558:	20000070 	.word	0x20000070
    255c:	20000078 	.word	0x20000078

00002560 <_exit>:
    2560:	e7fe      	b.n	2560 <_exit>
    2562:	bf00      	nop

00002564 <_init>:
    2564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2566:	bf00      	nop

00002568 <_fini>:
    2568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    256a:	bf00      	nop
    256c:	12345678 	.word	0x12345678
    2570:	a5a5a5a5 	.word	0xa5a5a5a5
    2574:	00000000 	.word	0x00000000
    2578:	ffffffff 	.word	0xffffffff
    257c:	01011010 	.word	0x01011010
    2580:	02022020 	.word	0x02022020
    2584:	03033030 	.word	0x03033030
    2588:	04044040 	.word	0x04044040
    258c:	72617453 	.word	0x72617453
    2590:	64612074 	.word	0x64612074
    2594:	73657264 	.word	0x73657264
    2598:	78302073 	.word	0x78302073
    259c:	58383025 	.word	0x58383025
    25a0:	0000000a 	.word	0x0000000a
    25a4:	20646e45 	.word	0x20646e45
    25a8:	72646461 	.word	0x72646461
    25ac:	20737365 	.word	0x20737365
    25b0:	78302020 	.word	0x78302020
    25b4:	58383025 	.word	0x58383025
    25b8:	0000000a 	.word	0x0000000a
    25bc:	74697277 	.word	0x74697277
    25c0:	206e6574 	.word	0x206e6574
    25c4:	7825203d 	.word	0x7825203d
    25c8:	6572202c 	.word	0x6572202c
    25cc:	3d206461 	.word	0x3d206461
    25d0:	0a782520 	.word	0x0a782520
    25d4:	00000000 	.word	0x00000000
    25d8:	73736150 	.word	0x73736150
    25dc:	20642520 	.word	0x20642520
    25e0:	61636f6c 	.word	0x61636f6c
    25e4:	6e6f6974 	.word	0x6e6f6974
    25e8:	65742073 	.word	0x65742073
    25ec:	64657473 	.word	0x64657473
    25f0:	0000000a 	.word	0x0000000a
    25f4:	6c696146 	.word	0x6c696146
    25f8:	20642520 	.word	0x20642520
    25fc:	6f727265 	.word	0x6f727265
    2600:	6f207372 	.word	0x6f207372
    2604:	64252066 	.word	0x64252066
    2608:	636f6c20 	.word	0x636f6c20
    260c:	6f697461 	.word	0x6f697461
    2610:	000a736e 	.word	0x000a736e
    2614:	65736142 	.word	0x65736142
    2618:	64646120 	.word	0x64646120
    261c:	73736572 	.word	0x73736572
    2620:	25783020 	.word	0x25783020
    2624:	0a583830 	.word	0x0a583830
    2628:	00000000 	.word	0x00000000
    262c:	616d6552 	.word	0x616d6552
    2630:	78302070 	.word	0x78302070
    2634:	58383025 	.word	0x58383025
    2638:	0000000a 	.word	0x0000000a
    263c:	656d6954 	.word	0x656d6954
    2640:	20302072 	.word	0x20302072
    2644:	30204449 	.word	0x30204449
    2648:	38302578 	.word	0x38302578
    264c:	00000a58 	.word	0x00000a58
    2650:	656d6954 	.word	0x656d6954
    2654:	20302072 	.word	0x20302072
    2658:	30257830 	.word	0x30257830
    265c:	000a5838 	.word	0x000a5838
    2660:	74697257 	.word	0x74697257
    2664:	20676e69 	.word	0x20676e69
    2668:	35357830 	.word	0x35357830
    266c:	00000000 	.word	0x00000000
    2670:	656d6954 	.word	0x656d6954
    2674:	20312072 	.word	0x20312072
    2678:	30257830 	.word	0x30257830
    267c:	000a5838 	.word	0x000a5838
    2680:	6e756f43 	.word	0x6e756f43
    2684:	20726574 	.word	0x20726574
    2688:	207a4831 	.word	0x207a4831
    268c:	30257830 	.word	0x30257830
    2690:	202c5838 	.word	0x202c5838
    2694:	48303031 	.word	0x48303031
    2698:	7830207a 	.word	0x7830207a
    269c:	58383025 	.word	0x58383025
    26a0:	7943202c 	.word	0x7943202c
    26a4:	75656c63 	.word	0x75656c63
    26a8:	78302070 	.word	0x78302070
    26ac:	58383025 	.word	0x58383025
    26b0:	0000000a 	.word	0x0000000a
    26b4:	20545845 	.word	0x20545845
    26b8:	20737562 	.word	0x20737562
    26bc:	3a35315b 	.word	0x3a35315b
    26c0:	3d205d30 	.word	0x3d205d30
    26c4:	25783020 	.word	0x25783020
    26c8:	0a583830 	.word	0x0a583830
    26cc:	00000000 	.word	0x00000000
    26d0:	6c696146 	.word	0x6c696146
    26d4:	00000000 	.word	0x00000000
    26d8:	20545845 	.word	0x20545845
    26dc:	20737562 	.word	0x20737562
    26e0:	3a31335b 	.word	0x3a31335b
    26e4:	205d3631 	.word	0x205d3631
    26e8:	7830203d 	.word	0x7830203d
    26ec:	58383025 	.word	0x58383025
    26f0:	0000000a 	.word	0x0000000a
    26f4:	20545845 	.word	0x20545845
    26f8:	20737562 	.word	0x20737562
    26fc:	3a37345b 	.word	0x3a37345b
    2700:	205d3233 	.word	0x205d3233
    2704:	7830203d 	.word	0x7830203d
    2708:	58383025 	.word	0x58383025
    270c:	0000000a 	.word	0x0000000a
    2710:	20545845 	.word	0x20545845
    2714:	20737562 	.word	0x20737562
    2718:	3a31355b 	.word	0x3a31355b
    271c:	205d3834 	.word	0x205d3834
    2720:	7830203d 	.word	0x7830203d
    2724:	58383025 	.word	0x58383025
    2728:	0000000a 	.word	0x0000000a
    272c:	6f72655a 	.word	0x6f72655a
    2730:	20676e69 	.word	0x20676e69
    2734:	20737562 	.word	0x20737562
    2738:	746f6e28 	.word	0x746f6e28
    273c:	74657920 	.word	0x74657920
    2740:	616e6520 	.word	0x616e6520
    2744:	64656c62 	.word	0x64656c62
    2748:	00000029 	.word	0x00000029
    274c:	62616e45 	.word	0x62616e45
    2750:	2064656c 	.word	0x2064656c
    2754:	20737562 	.word	0x20737562
    2758:	76697264 	.word	0x76697264
    275c:	00000065 	.word	0x00000065
    2760:	73736150 	.word	0x73736150
    2764:	00000000 	.word	0x00000000
    2768:	7344454c 	.word	0x7344454c
    276c:	646e6120 	.word	0x646e6120
    2770:	74756220 	.word	0x74756220
    2774:	736e6f74 	.word	0x736e6f74
    2778:	42202d20 	.word	0x42202d20
    277c:	6f747475 	.word	0x6f747475
    2780:	6120736e 	.word	0x6120736e
    2784:	6c206572 	.word	0x6c206572
    2788:	65706f6f 	.word	0x65706f6f
    278c:	61622064 	.word	0x61622064
    2790:	66206b63 	.word	0x66206b63
    2794:	206d6f72 	.word	0x206d6f72
    2798:	7344454c 	.word	0x7344454c
    279c:	0000002e 	.word	0x0000002e
    27a0:	74746553 	.word	0x74746553
    27a4:	20676e69 	.word	0x20676e69
    27a8:	7344454c 	.word	0x7344454c
    27ac:	206f7420 	.word	0x206f7420
    27b0:	30257830 	.word	0x30257830
    27b4:	000a5838 	.word	0x000a5838
    27b8:	74747542 	.word	0x74747542
    27bc:	20736e6f 	.word	0x20736e6f
    27c0:	7830203d 	.word	0x7830203d
    27c4:	58383025 	.word	0x58383025
    27c8:	0000000a 	.word	0x0000000a
    27cc:	63656843 	.word	0x63656843
    27d0:	676e696b 	.word	0x676e696b
    27d4:	63794320 	.word	0x63794320
    27d8:	7075656c 	.word	0x7075656c
    27dc:	756f6320 	.word	0x756f6320
    27e0:	7265746e 	.word	0x7265746e
    27e4:	20736920 	.word	0x20736920
    27e8:	6e756f63 	.word	0x6e756f63
    27ec:	676e6974 	.word	0x676e6974
    27f0:	00202d20 	.word	0x00202d20
    27f4:	4c4c4c44 	.word	0x4c4c4c44
    27f8:	204b434f 	.word	0x204b434f
    27fc:	20202020 	.word	0x20202020
    2800:	30257830 	.word	0x30257830
    2804:	000a5838 	.word	0x000a5838
    2808:	5f434353 	.word	0x5f434353
    280c:	2044454c 	.word	0x2044454c
    2810:	20202020 	.word	0x20202020
    2814:	30257830 	.word	0x30257830
    2818:	000a5838 	.word	0x000a5838
    281c:	5f434353 	.word	0x5f434353
    2820:	20205753 	.word	0x20205753
    2824:	20202020 	.word	0x20202020
    2828:	30257830 	.word	0x30257830
    282c:	000a5838 	.word	0x000a5838
    2830:	5f434353 	.word	0x5f434353
    2834:	4c425041 	.word	0x4c425041
    2838:	204b434f 	.word	0x204b434f
    283c:	30257830 	.word	0x30257830
    2840:	000a5838 	.word	0x000a5838
    2844:	5f434353 	.word	0x5f434353
    2848:	20444941 	.word	0x20444941
    284c:	20202020 	.word	0x20202020
    2850:	30257830 	.word	0x30257830
    2854:	000a5838 	.word	0x000a5838
    2858:	5f434353 	.word	0x5f434353
    285c:	20204449 	.word	0x20204449
    2860:	20202020 	.word	0x20202020
    2864:	30257830 	.word	0x30257830
    2868:	000a5838 	.word	0x000a5838
    286c:	5f535953 	.word	0x5f535953
    2870:	44474643 	.word	0x44474643
    2874:	5f415441 	.word	0x5f415441
    2878:	49524553 	.word	0x49524553
    287c:	30204c41 	.word	0x30204c41
    2880:	38302578 	.word	0x38302578
    2884:	00000a58 	.word	0x00000a58
    2888:	5f535953 	.word	0x5f535953
    288c:	44474643 	.word	0x44474643
    2890:	5f415441 	.word	0x5f415441
    2894:	20425041 	.word	0x20425041
    2898:	30257830 	.word	0x30257830
    289c:	000a5838 	.word	0x000a5838
    28a0:	5f535953 	.word	0x5f535953
    28a4:	43474643 	.word	0x43474643
    28a8:	204c5254 	.word	0x204c5254
    28ac:	30257830 	.word	0x30257830
    28b0:	000a5838 	.word	0x000a5838
    28b4:	5f535953 	.word	0x5f535953
    28b8:	53474643 	.word	0x53474643
    28bc:	20544154 	.word	0x20544154
    28c0:	30257830 	.word	0x30257830
    28c4:	000a5838 	.word	0x000a5838
    28c8:	74697257 	.word	0x74697257
    28cc:	20676e69 	.word	0x20676e69
    28d0:	35617830 	.word	0x35617830
    28d4:	35613561 	.word	0x35613561
    28d8:	74203561 	.word	0x74203561
    28dc:	5953206f 	.word	0x5953206f
    28e0:	46435f53 	.word	0x46435f53
    28e4:	54414447 	.word	0x54414447
    28e8:	50415f41 	.word	0x50415f41
    28ec:	00000042 	.word	0x00000042
    28f0:	74697257 	.word	0x74697257
    28f4:	20676e69 	.word	0x20676e69
    28f8:	46467830 	.word	0x46467830
    28fc:	46464646 	.word	0x46464646
    2900:	74204646 	.word	0x74204646
    2904:	5953206f 	.word	0x5953206f
    2908:	46435f53 	.word	0x46435f53
    290c:	54414447 	.word	0x54414447
    2910:	50415f41 	.word	0x50415f41
    2914:	00000042 	.word	0x00000042
    2918:	74697257 	.word	0x74697257
    291c:	20676e69 	.word	0x20676e69
    2920:	35617830 	.word	0x35617830
    2924:	35613561 	.word	0x35613561
    2928:	74203561 	.word	0x74203561
    292c:	5953206f 	.word	0x5953206f
    2930:	46435f53 	.word	0x46435f53
    2934:	52544347 	.word	0x52544347
    2938:	202d204c 	.word	0x202d204c
    293c:	6f736c41 	.word	0x6f736c41
    2940:	69727420 	.word	0x69727420
    2944:	72656767 	.word	0x72656767
    2948:	6e692073 	.word	0x6e692073
    294c:	72726574 	.word	0x72726574
    2950:	00747075 	.word	0x00747075
    2954:	74697257 	.word	0x74697257
    2958:	20676e69 	.word	0x20676e69
    295c:	46467830 	.word	0x46467830
    2960:	46464646 	.word	0x46464646
    2964:	74204646 	.word	0x74204646
    2968:	5953206f 	.word	0x5953206f
    296c:	46435f53 	.word	0x46435f53
    2970:	52544347 	.word	0x52544347
    2974:	0000004c 	.word	0x0000004c
    2978:	30257830 	.word	0x30257830
    297c:	63205838 	.word	0x63205838
    2980:	61746e6f 	.word	0x61746e6f
    2984:	20736e69 	.word	0x20736e69
    2988:	30257830 	.word	0x30257830
    298c:	000a5838 	.word	0x000a5838
    2990:	20646e45 	.word	0x20646e45
    2994:	72646461 	.word	0x72646461
    2998:	20737365 	.word	0x20737365
    299c:	78302020 	.word	0x78302020
    29a0:	58383025 	.word	0x58383025
    29a4:	6e676920 	.word	0x6e676920
    29a8:	6465726f 	.word	0x6465726f
    29ac:	0000000a 	.word	0x0000000a
    29b0:	4553530a 	.word	0x4553530a
    29b4:	3035302d 	.word	0x3035302d
    29b8:	44202d20 	.word	0x44202d20
    29bc:	67697365 	.word	0x67697365
    29c0:	6554206e 	.word	0x6554206e
    29c4:	66207473 	.word	0x66207473
    29c8:	4320726f 	.word	0x4320726f
    29cc:	6574726f 	.word	0x6574726f
    29d0:	334d2d78 	.word	0x334d2d78
    29d4:	72202d20 	.word	0x72202d20
    29d8:	73697665 	.word	0x73697665
    29dc:	206e6f69 	.word	0x206e6f69
    29e0:	76655224 	.word	0x76655224
    29e4:	6f697369 	.word	0x6f697369
    29e8:	32203a6e 	.word	0x32203a6e
    29ec:	38343334 	.word	0x38343334
    29f0:	0a242033 	.word	0x0a242033
    29f4:	00000000 	.word	0x00000000
    29f8:	202a2a2a 	.word	0x202a2a2a
    29fc:	74736554 	.word	0x74736554
    2a00:	20676e69 	.word	0x20676e69
    2a04:	69647541 	.word	0x69647541
    2a08:	0000006f 	.word	0x0000006f
    2a0c:	202a2a2a 	.word	0x202a2a2a
    2a10:	676e6953 	.word	0x676e6953
    2a14:	5020656c 	.word	0x5020656c
    2a18:	4d415253 	.word	0x4d415253
    2a1c:	61657220 	.word	0x61657220
    2a20:	00000064 	.word	0x00000064
    2a24:	202a2a2a 	.word	0x202a2a2a
    2a28:	74736554 	.word	0x74736554
    2a2c:	20676e69 	.word	0x20676e69
    2a30:	20434353 	.word	0x20434353
    2a34:	69676572 	.word	0x69676572
    2a38:	72657473 	.word	0x72657473
    2a3c:	00000073 	.word	0x00000073
    2a40:	202a2a2a 	.word	0x202a2a2a
    2a44:	74736554 	.word	0x74736554
    2a48:	20676e69 	.word	0x20676e69
    2a4c:	64616552 	.word	0x64616552
    2a50:	20676e69 	.word	0x20676e69
    2a54:	41475046 	.word	0x41475046
    2a58:	6e6f6320 	.word	0x6e6f6320
    2a5c:	6c6f7274 	.word	0x6c6f7274
    2a60:	67657220 	.word	0x67657220
    2a64:	65747369 	.word	0x65747369
    2a68:	00007372 	.word	0x00007372
    2a6c:	202a2a2a 	.word	0x202a2a2a
    2a70:	646e6553 	.word	0x646e6553
    2a74:	20676e69 	.word	0x20676e69
    2a78:	61746164 	.word	0x61746164
    2a7c:	6f726620 	.word	0x6f726620
    2a80:	434c206d 	.word	0x434c206d
    2a84:	32492044 	.word	0x32492044
    2a88:	00000043 	.word	0x00000043
    2a8c:	202a2a2a 	.word	0x202a2a2a
    2a90:	74736554 	.word	0x74736554
    2a94:	20676e69 	.word	0x20676e69
    2a98:	41525350 	.word	0x41525350
    2a9c:	0000004d 	.word	0x0000004d
    2aa0:	202a2a2a 	.word	0x202a2a2a
    2aa4:	74736554 	.word	0x74736554
    2aa8:	20676e69 	.word	0x20676e69
    2aac:	41525350 	.word	0x41525350
    2ab0:	7562204d 	.word	0x7562204d
    2ab4:	00747372 	.word	0x00747372
    2ab8:	202a2a2a 	.word	0x202a2a2a
    2abc:	74736554 	.word	0x74736554
    2ac0:	20676e69 	.word	0x20676e69
    2ac4:	65687445 	.word	0x65687445
    2ac8:	74656e72 	.word	0x74656e72
    2acc:	00000000 	.word	0x00000000
    2ad0:	202a2a2a 	.word	0x202a2a2a
    2ad4:	74736554 	.word	0x74736554
    2ad8:	20676e69 	.word	0x20676e69
    2adc:	3154425a 	.word	0x3154425a
    2ae0:	00000000 	.word	0x00000000
    2ae4:	202a2a2a 	.word	0x202a2a2a
    2ae8:	74736554 	.word	0x74736554
    2aec:	20676e69 	.word	0x20676e69
    2af0:	3154425a 	.word	0x3154425a
    2af4:	72756220 	.word	0x72756220
    2af8:	00007473 	.word	0x00007473
    2afc:	202a2a2a 	.word	0x202a2a2a
    2b00:	74736554 	.word	0x74736554
    2b04:	20676e69 	.word	0x20676e69
    2b08:	3254425a 	.word	0x3254425a
    2b0c:	646e6120 	.word	0x646e6120
    2b10:	54425a20 	.word	0x54425a20
    2b14:	00000033 	.word	0x00000033
    2b18:	202a2a2a 	.word	0x202a2a2a
    2b1c:	74736554 	.word	0x74736554
    2b20:	20676e69 	.word	0x20676e69
    2b24:	636f6c62 	.word	0x636f6c62
    2b28:	4152206b 	.word	0x4152206b
    2b2c:	0000004d 	.word	0x0000004d
    2b30:	202a2a2a 	.word	0x202a2a2a
    2b34:	74736554 	.word	0x74736554
    2b38:	20676e69 	.word	0x20676e69
    2b3c:	65747865 	.word	0x65747865
    2b40:	6c616e72 	.word	0x6c616e72
    2b44:	49505320 	.word	0x49505320
    2b48:	6573203a 	.word	0x6573203a
    2b4c:	6c20666c 	.word	0x6c20666c
    2b50:	20706f6f 	.word	0x20706f6f
    2b54:	6b636162 	.word	0x6b636162
    2b58:	73657420 	.word	0x73657420
    2b5c:	00000074 	.word	0x00000074
    2b60:	74746553 	.word	0x74746553
    2b64:	20676e69 	.word	0x20676e69
    2b68:	65207075 	.word	0x65207075
    2b6c:	72657478 	.word	0x72657478
    2b70:	206c616e 	.word	0x206c616e
    2b74:	00495053 	.word	0x00495053
    2b78:	62616e45 	.word	0x62616e45
    2b7c:	6520656c 	.word	0x6520656c
    2b80:	72657478 	.word	0x72657478
    2b84:	206c616e 	.word	0x206c616e
    2b88:	00495053 	.word	0x00495053
    2b8c:	74696157 	.word	0x74696157
    2b90:	726f6620 	.word	0x726f6620
    2b94:	63657220 	.word	0x63657220
    2b98:	65766965 	.word	0x65766965
    2b9c:	74616420 	.word	0x74616420
    2ba0:	6f742061 	.word	0x6f742061
    2ba4:	20656220 	.word	0x20656220
    2ba8:	74706163 	.word	0x74706163
    2bac:	64657275 	.word	0x64657275
    2bb0:	00000000 	.word	0x00000000
    2bb4:	63656843 	.word	0x63656843
    2bb8:	6572206b 	.word	0x6572206b
    2bbc:	76696563 	.word	0x76696563
    2bc0:	61642065 	.word	0x61642065
    2bc4:	69206174 	.word	0x69206174
    2bc8:	68742073 	.word	0x68742073
    2bcc:	61732065 	.word	0x61732065
    2bd0:	6120656d 	.word	0x6120656d
    2bd4:	72742073 	.word	0x72742073
    2bd8:	696d6e61 	.word	0x696d6e61
    2bdc:	61642074 	.word	0x61642074
    2be0:	00006174 	.word	0x00006174
    2be4:	2d0a0a0a 	.word	0x2d0a0a0a
    2be8:	2d2d2d2d 	.word	0x2d2d2d2d
    2bec:	2d2d2d2d 	.word	0x2d2d2d2d
    2bf0:	2a2a0a2d 	.word	0x2a2a0a2d
    2bf4:	53455420 	.word	0x53455420
    2bf8:	41502054 	.word	0x41502054
    2bfc:	44455353 	.word	0x44455353
    2c00:	0a2a2a20 	.word	0x0a2a2a20
    2c04:	2d2d2d2d 	.word	0x2d2d2d2d
    2c08:	2d2d2d2d 	.word	0x2d2d2d2d
    2c0c:	0a0a2d2d 	.word	0x0a0a2d2d
    2c10:	0000000a 	.word	0x0000000a
    2c14:	460a0a0a 	.word	0x460a0a0a
    2c18:	2c6c6961 	.word	0x2c6c6961
    2c1c:	20752520 	.word	0x20752520
    2c20:	6c696166 	.word	0x6c696166
    2c24:	0a657275 	.word	0x0a657275
    2c28:	000a0a0a 	.word	0x000a0a0a
    2c2c:	460a0a0a 	.word	0x460a0a0a
    2c30:	2c6c6961 	.word	0x2c6c6961
    2c34:	20752520 	.word	0x20752520
    2c38:	6c696166 	.word	0x6c696166
    2c3c:	73657275 	.word	0x73657275
    2c40:	0a0a0a0a 	.word	0x0a0a0a0a
    2c44:	00000000 	.word	0x00000000

00002c48 <_global_impure_ptr>:
    2c48:	20000008                                ... 

00002c4c <__sf_fake_stderr>:
	...

00002c6c <__sf_fake_stdin>:
	...

00002c8c <__sf_fake_stdout>:
	...
    2cac:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2cbc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2ccc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2cdc:	                                         ef.
