
dualtimer_demo.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	0000291d 	.word	0x0000291d
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f002 fdf5 	bl	2d38 <main>
    bl    exit
     14e:	f002 feaf 	bl	2eb0 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00003fc8 	.word	0x00003fc8
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	2000009c 	.word	0x2000009c
    ldr     r0,=SystemInit
     168:	00002ea1 	.word	0x00002ea1

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <TIMER1_Handler+0x2>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <dualtimer_id_check>:
{
unsigned char dualtimer_id;
#define HW32_REG(ADDRESS)  (*((volatile unsigned long  *)(ADDRESS)))
#define HW8_REG(ADDRESS)   (*((volatile unsigned char  *)(ADDRESS)))

 dualtimer_id = HW8_REG(CM3DS_MPS2_DUALTIMER_BASE  + 0xFE8) & 0x07;
     1f0:	4a09      	ldr	r2, [pc, #36]	; (218 <Stack_Size+0x18>)

 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
     1f2:	4b0a      	ldr	r3, [pc, #40]	; (21c <Stack_Size+0x1c>)
 dualtimer_id = HW8_REG(CM3DS_MPS2_DUALTIMER_BASE  + 0xFE8) & 0x07;
     1f4:	7810      	ldrb	r0, [r2, #0]
 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
     1f6:	681b      	ldr	r3, [r3, #0]
 dualtimer_id = HW8_REG(CM3DS_MPS2_DUALTIMER_BASE  + 0xFE8) & 0x07;
     1f8:	b2c0      	uxtb	r0, r0
 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
     1fa:	2b23      	cmp	r3, #35	; 0x23
     1fc:	d001      	beq.n	202 <Stack_Size+0x2>
     (HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE4) != 0xB8) ||
     (dualtimer_id != 0x03))
   return 1; /* part ID & ARM ID does not match dual timer */
     1fe:	2001      	movs	r0, #1
 else
   return 0;
}
     200:	4770      	bx	lr
     (HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE4) != 0xB8) ||
     202:	4b07      	ldr	r3, [pc, #28]	; (220 <Stack_Size+0x20>)
     204:	681b      	ldr	r3, [r3, #0]
 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
     206:	2bb8      	cmp	r3, #184	; 0xb8
     208:	d1f9      	bne.n	1fe <dualtimer_id_check+0xe>
     (HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE4) != 0xB8) ||
     20a:	f000 0007 	and.w	r0, r0, #7
     20e:	3803      	subs	r0, #3
     210:	bf18      	it	ne
     212:	2001      	movne	r0, #1
     214:	4770      	bx	lr
     216:	bf00      	nop
     218:	40002fe8 	.word	0x40002fe8
     21c:	40002fe0 	.word	0x40002fe0
     220:	40002fe4 	.word	0x40002fe4

00000224 <dualtimer_16_free_running_demo>:
/* ----------------------------------------------------------------- */
void dualtimer_16_free_running_demo(CM3DS_MPS2_DUALTIMER_SINGLE_TypeDef *CM3DS_MPS2_DUALTIMERx)
{
     224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int read_value;
  unsigned int i;

  /* Clear software variables for interrupt tests */
  dtimer_irq_expected = 0;
     228:	f04f 0b00 	mov.w	fp, #0
     22c:	4b93      	ldr	r3, [pc, #588]	; (47c <dualtimer_16_free_running_demo+0x258>)
  dtimer1_irq_occurred = 0;
     22e:	4e94      	ldr	r6, [pc, #592]	; (480 <dualtimer_16_free_running_demo+0x25c>)
  dtimer2_irq_occurred = 0;
     230:	4d94      	ldr	r5, [pc, #592]	; (484 <dualtimer_16_free_running_demo+0x260>)
{
     232:	4604      	mov	r4, r0
     234:	4f94      	ldr	r7, [pc, #592]	; (488 <dualtimer_16_free_running_demo+0x264>)

  /* ------------------------------------------------------------- */
  puts ("16-bit free running mode, prescale = 1:1, no interrupt");
     236:	4895      	ldr	r0, [pc, #596]	; (48c <dualtimer_16_free_running_demo+0x268>)
  dtimer_irq_expected = 0;
     238:	f8c3 b000 	str.w	fp, [r3]
  dtimer1_irq_occurred = 0;
     23c:	f8c6 b000 	str.w	fp, [r6]
  dtimer2_irq_occurred = 0;
     240:	f8c5 b000 	str.w	fp, [r5]
  puts ("16-bit free running mode, prescale = 1:1, no interrupt");
     244:	f002 feac 	bl	2fa0 <puts>
  int ctrl_val;
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
   /* Previous timer activities might have trigger interrupt flag,
   so need to clear it */
  dualtimer_irq_clear(CM3DS_MPS2_DUALTIMERx);
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     248:	f241 3288 	movw	r2, #5000	; 0x1388

  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
            CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;

  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     24c:	2380      	movs	r3, #128	; 0x80
    puts(text_buf);
     24e:	46b8      	mov	r8, r7
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     250:	f04f 0a0a 	mov.w	sl, #10
  unsigned int mask = 0xF0000000UL;
  int          nibble;

  /* extra space in front for indent */
  for (length=0;length<2; length++){
    text[length]  =' ';     /* space */
     254:	f04f 0920 	mov.w	r9, #32
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     258:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     25c:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     260:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     262:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
     264:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
     266:	f887 9000 	strb.w	r9, [r7]
    }
    length = 2;
  /* Remove leading zero */
  while (((mask & value)==0) & (i!=7)) {
     26a:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
     26e:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
     272:	f040 832d 	bne.w	8d0 <dualtimer_16_free_running_demo+0x6ac>
  int          i=0;
     276:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
     278:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
     27c:	e001      	b.n	282 <dualtimer_16_free_running_demo+0x5e>
    i ++;
    mask = mask >> 4;
     27e:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
     280:	468c      	mov	ip, r1
    mask = mask >> 4;
     282:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
     286:	ea10 0b03 	ands.w	fp, r0, r3
     28a:	bf0c      	ite	eq
     28c:	2201      	moveq	r2, #1
     28e:	2200      	movne	r2, #0
    i ++;
     290:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
     294:	2907      	cmp	r1, #7
     296:	bf0c      	ite	eq
     298:	2200      	moveq	r2, #0
     29a:	f002 0201 	andne.w	r2, r2, #1
     29e:	2a00      	cmp	r2, #0
     2a0:	d1ed      	bne.n	27e <dualtimer_16_free_running_demo+0x5a>
    }
  while (i!=8) {
     2a2:	2908      	cmp	r1, #8
     2a4:	f000 80be 	beq.w	424 <dualtimer_16_free_running_demo+0x200>
     2a8:	f1c1 0207 	rsb	r2, r1, #7
     2ac:	f10c 0c02 	add.w	ip, ip, #2
     2b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
     2b4:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     2b6:	fa2b fb02 	lsr.w	fp, fp, r2
     2ba:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     2be:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     2c2:	bfd4      	ite	le
     2c4:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     2c6:	3257      	addgt	r2, #87	; 0x57
     2c8:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     2ca:	f1bc 0f08 	cmp.w	ip, #8
     2ce:	70ba      	strb	r2, [r7, #2]
     2d0:	f000 8309 	beq.w	8e6 <dualtimer_16_free_running_demo+0x6c2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     2d4:	f1cc 0c07 	rsb	ip, ip, #7
     2d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
     2dc:	ea00 0e0e 	and.w	lr, r0, lr
     2e0:	fa2e fc0c 	lsr.w	ip, lr, ip
     2e4:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     2e8:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     2ec:	bfd4      	ite	le
     2ee:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     2f2:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
     2f6:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     2f8:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     2fc:	2a08      	cmp	r2, #8
     2fe:	f887 c003 	strb.w	ip, [r7, #3]
    length++;
    mask = mask>> 4;
     302:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
     306:	f000 82f6 	beq.w	8f6 <dualtimer_16_free_running_demo+0x6d2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     30a:	f1c2 0207 	rsb	r2, r2, #7
     30e:	ea00 0c0c 	and.w	ip, r0, ip
     312:	0092      	lsls	r2, r2, #2
     314:	fa2c f202 	lsr.w	r2, ip, r2
     318:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     31c:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     31e:	bfd4      	ite	le
     320:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     324:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     328:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     32a:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     32e:	2a08      	cmp	r2, #8
     330:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
     334:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
     338:	f000 82e1 	beq.w	8fe <dualtimer_16_free_running_demo+0x6da>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     33c:	f1c2 0207 	rsb	r2, r2, #7
     340:	ea00 0c0c 	and.w	ip, r0, ip
     344:	0092      	lsls	r2, r2, #2
     346:	fa2c f202 	lsr.w	r2, ip, r2
     34a:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     34e:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     350:	bfd4      	ite	le
     352:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     356:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     35a:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     35c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     360:	2a08      	cmp	r2, #8
     362:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
     366:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
     36a:	f000 82d0 	beq.w	90e <dualtimer_16_free_running_demo+0x6ea>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     36e:	f1c2 0207 	rsb	r2, r2, #7
     372:	ea00 0c0c 	and.w	ip, r0, ip
     376:	0092      	lsls	r2, r2, #2
     378:	fa2c f202 	lsr.w	r2, ip, r2
     37c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     380:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     382:	bfd4      	ite	le
     384:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     388:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     38c:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     38e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     392:	2a08      	cmp	r2, #8
     394:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
     398:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
     39c:	f000 82b9 	beq.w	912 <dualtimer_16_free_running_demo+0x6ee>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     3a0:	f1c2 0207 	rsb	r2, r2, #7
     3a4:	ea00 0c0c 	and.w	ip, r0, ip
     3a8:	0092      	lsls	r2, r2, #2
     3aa:	fa2c f202 	lsr.w	r2, ip, r2
     3ae:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     3b2:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     3b4:	bfd4      	ite	le
     3b6:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     3ba:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     3be:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     3c0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     3c4:	2a08      	cmp	r2, #8
     3c6:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
     3ca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
     3ce:	f000 82a8 	beq.w	922 <dualtimer_16_free_running_demo+0x6fe>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     3d2:	f1c2 0207 	rsb	r2, r2, #7
     3d6:	ea00 0c0c 	and.w	ip, r0, ip
     3da:	0092      	lsls	r2, r2, #2
     3dc:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     3e0:	2a09      	cmp	r2, #9
     3e2:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     3e6:	bfd4      	ite	le
     3e8:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     3ec:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
     3f0:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     3f2:	2901      	cmp	r1, #1
     3f4:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
     3f6:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
     3fa:	f000 829a 	beq.w	932 <dualtimer_16_free_running_demo+0x70e>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     3fe:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
     402:	4003      	ands	r3, r0
     404:	0090      	lsls	r0, r2, #2
     406:	40c3      	lsrs	r3, r0
     408:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     40a:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     40c:	bfd4      	ite	le
     40e:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     412:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
     416:	b2db      	uxtb	r3, r3
     418:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
     41a:	2900      	cmp	r1, #0
     41c:	f000 828b 	beq.w	936 <dualtimer_16_free_running_demo+0x712>
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     420:	2330      	movs	r3, #48	; 0x30
     422:	72bb      	strb	r3, [r7, #10]
  while (i!=8) {
     424:	2302      	movs	r3, #2
    }
  text[length]=(char) 0; /* null termination */
     426:	2200      	movs	r2, #0
    puts(text_buf);
     428:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
     42a:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
     42c:	f002 fdb8 	bl	2fa0 <puts>
  while (i<10){
     430:	f1ba 0a01 	subs.w	sl, sl, #1
     434:	f47f af16 	bne.w	264 <dualtimer_16_free_running_demo+0x40>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     438:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit free running mode, prescale = 1:16, no interrupt");
     43a:	4815      	ldr	r0, [pc, #84]	; (490 <dualtimer_16_free_running_demo+0x26c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     43c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     440:	60a3      	str	r3, [r4, #8]
  puts ("16-bit free running mode, prescale = 1:16, no interrupt");
     442:	f002 fdad 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     446:	22c8      	movs	r2, #200	; 0xc8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     448:	2384      	movs	r3, #132	; 0x84
     44a:	f04f 0b0a 	mov.w	fp, #10
    text[length]  =' ';     /* space */
     44e:	f04f 0920 	mov.w	r9, #32
    puts(text_buf);
     452:	f8df 8034 	ldr.w	r8, [pc, #52]	; 488 <dualtimer_16_free_running_demo+0x264>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     456:	f8c4 a008 	str.w	sl, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     45a:	f8c4 a00c 	str.w	sl, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     45e:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     460:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
     462:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
     464:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
     468:	f010 4a70 	ands.w	sl, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
     46c:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
     470:	f040 8225 	bne.w	8be <dualtimer_16_free_running_demo+0x69a>
  int          i=0;
     474:	46d4      	mov	ip, sl
  unsigned int mask = 0xF0000000UL;
     476:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
     47a:	e00d      	b.n	498 <dualtimer_16_free_running_demo+0x274>
     47c:	20000094 	.word	0x20000094
     480:	20000090 	.word	0x20000090
     484:	2000008c 	.word	0x2000008c
     488:	20000078 	.word	0x20000078
     48c:	0000382c 	.word	0x0000382c
     490:	00003864 	.word	0x00003864
    mask = mask >> 4;
     494:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
     496:	468c      	mov	ip, r1
    mask = mask >> 4;
     498:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
     49c:	ea10 0a03 	ands.w	sl, r0, r3
     4a0:	bf0c      	ite	eq
     4a2:	2201      	moveq	r2, #1
     4a4:	2200      	movne	r2, #0
    i ++;
     4a6:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
     4aa:	2907      	cmp	r1, #7
     4ac:	bf0c      	ite	eq
     4ae:	2200      	moveq	r2, #0
     4b0:	f002 0201 	andne.w	r2, r2, #1
     4b4:	2a00      	cmp	r2, #0
     4b6:	d1ed      	bne.n	494 <dualtimer_16_free_running_demo+0x270>
  while (i!=8) {
     4b8:	2908      	cmp	r1, #8
     4ba:	f000 80be 	beq.w	63a <dualtimer_16_free_running_demo+0x416>
     4be:	f1c1 0207 	rsb	r2, r1, #7
     4c2:	f10c 0c02 	add.w	ip, ip, #2
     4c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
     4ca:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     4cc:	fa2a fa02 	lsr.w	sl, sl, r2
     4d0:	fa5f f28a 	uxtb.w	r2, sl
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     4d4:	f1ba 0f09 	cmp.w	sl, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     4d8:	bfd4      	ite	le
     4da:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     4dc:	3257      	addgt	r2, #87	; 0x57
     4de:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     4e0:	f1bc 0f08 	cmp.w	ip, #8
     4e4:	70ba      	strb	r2, [r7, #2]
     4e6:	f000 81fc 	beq.w	8e2 <dualtimer_16_free_running_demo+0x6be>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     4ea:	f1cc 0c07 	rsb	ip, ip, #7
     4ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
     4f2:	ea00 0e0e 	and.w	lr, r0, lr
     4f6:	fa2e fc0c 	lsr.w	ip, lr, ip
     4fa:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     4fe:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     502:	bfd4      	ite	le
     504:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     508:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
     50c:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     50e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     512:	2a08      	cmp	r2, #8
     514:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
     518:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
     51c:	f000 81e9 	beq.w	8f2 <dualtimer_16_free_running_demo+0x6ce>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     520:	f1c2 0207 	rsb	r2, r2, #7
     524:	ea00 0c0c 	and.w	ip, r0, ip
     528:	0092      	lsls	r2, r2, #2
     52a:	fa2c f202 	lsr.w	r2, ip, r2
     52e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     532:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     534:	bfd4      	ite	le
     536:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     53a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     53e:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     540:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     544:	2a08      	cmp	r2, #8
     546:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
     54a:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
     54e:	f000 81d8 	beq.w	902 <dualtimer_16_free_running_demo+0x6de>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     552:	f1c2 0207 	rsb	r2, r2, #7
     556:	ea00 0c0c 	and.w	ip, r0, ip
     55a:	0092      	lsls	r2, r2, #2
     55c:	fa2c f202 	lsr.w	r2, ip, r2
     560:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     564:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     566:	bfd4      	ite	le
     568:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     56c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     570:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     572:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     576:	2a08      	cmp	r2, #8
     578:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
     57c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
     580:	f000 81c1 	beq.w	906 <dualtimer_16_free_running_demo+0x6e2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     584:	f1c2 0207 	rsb	r2, r2, #7
     588:	ea00 0c0c 	and.w	ip, r0, ip
     58c:	0092      	lsls	r2, r2, #2
     58e:	fa2c f202 	lsr.w	r2, ip, r2
     592:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     596:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     598:	bfd4      	ite	le
     59a:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     59e:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     5a2:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     5a4:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     5a8:	2a08      	cmp	r2, #8
     5aa:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
     5ae:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
     5b2:	f000 81b0 	beq.w	916 <dualtimer_16_free_running_demo+0x6f2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     5b6:	f1c2 0207 	rsb	r2, r2, #7
     5ba:	ea00 0c0c 	and.w	ip, r0, ip
     5be:	0092      	lsls	r2, r2, #2
     5c0:	fa2c f202 	lsr.w	r2, ip, r2
     5c4:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     5c8:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     5ca:	bfd4      	ite	le
     5cc:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     5d0:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     5d4:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     5d6:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     5da:	2a08      	cmp	r2, #8
     5dc:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
     5e0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
     5e4:	f000 819f 	beq.w	926 <dualtimer_16_free_running_demo+0x702>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     5e8:	f1c2 0207 	rsb	r2, r2, #7
     5ec:	ea00 0c0c 	and.w	ip, r0, ip
     5f0:	0092      	lsls	r2, r2, #2
     5f2:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     5f6:	2a09      	cmp	r2, #9
     5f8:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     5fc:	bfd4      	ite	le
     5fe:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     602:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
     606:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     608:	2901      	cmp	r1, #1
     60a:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
     60c:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
     610:	f000 818d 	beq.w	92e <dualtimer_16_free_running_demo+0x70a>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     614:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
     618:	4003      	ands	r3, r0
     61a:	0090      	lsls	r0, r2, #2
     61c:	40c3      	lsrs	r3, r0
     61e:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     620:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     622:	bfd4      	ite	le
     624:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     628:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
     62c:	b2db      	uxtb	r3, r3
     62e:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
     630:	2900      	cmp	r1, #0
     632:	f47f aef5 	bne.w	420 <dualtimer_16_free_running_demo+0x1fc>
     636:	230a      	movs	r3, #10
     638:	e000      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     63a:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
     63c:	2200      	movs	r2, #0
    puts(text_buf);
     63e:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
     640:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
     642:	f002 fcad 	bl	2fa0 <puts>
  while (i<10){
     646:	f1bb 0b01 	subs.w	fp, fp, #1
     64a:	f47f af0a 	bne.w	462 <dualtimer_16_free_running_demo+0x23e>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     64e:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit free running mode, prescale = 1:256, no interrupt");
     650:	48ba      	ldr	r0, [pc, #744]	; (93c <dualtimer_16_free_running_demo+0x718>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     656:	60a3      	str	r3, [r4, #8]
  puts ("16-bit free running mode, prescale = 1:256, no interrupt");
     658:	f002 fca2 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     65c:	2214      	movs	r2, #20
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     65e:	2388      	movs	r3, #136	; 0x88
     660:	f04f 090a 	mov.w	r9, #10
    text[length]  =' ';     /* space */
     664:	f04f 0a20 	mov.w	sl, #32
    puts(text_buf);
     668:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 950 <dualtimer_16_free_running_demo+0x72c>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     66c:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     670:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     674:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     676:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
     678:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
     67a:	f887 a000 	strb.w	sl, [r7]
  while (((mask & value)==0) & (i!=7)) {
     67e:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
     682:	f887 a001 	strb.w	sl, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
     686:	f040 8111 	bne.w	8ac <dualtimer_16_free_running_demo+0x688>
  int          i=0;
     68a:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
     68c:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
     690:	e001      	b.n	696 <dualtimer_16_free_running_demo+0x472>
    mask = mask >> 4;
     692:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
     694:	468c      	mov	ip, r1
    mask = mask >> 4;
     696:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
     69a:	ea10 0b03 	ands.w	fp, r0, r3
     69e:	bf0c      	ite	eq
     6a0:	2201      	moveq	r2, #1
     6a2:	2200      	movne	r2, #0
    i ++;
     6a4:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
     6a8:	2907      	cmp	r1, #7
     6aa:	bf0c      	ite	eq
     6ac:	2200      	moveq	r2, #0
     6ae:	f002 0201 	andne.w	r2, r2, #1
     6b2:	2a00      	cmp	r2, #0
     6b4:	d1ed      	bne.n	692 <dualtimer_16_free_running_demo+0x46e>
  while (i!=8) {
     6b6:	2908      	cmp	r1, #8
     6b8:	f000 80be 	beq.w	838 <dualtimer_16_free_running_demo+0x614>
     6bc:	f1c1 0207 	rsb	r2, r1, #7
     6c0:	f10c 0c02 	add.w	ip, ip, #2
     6c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
     6c8:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     6ca:	fa2b fb02 	lsr.w	fp, fp, r2
     6ce:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     6d2:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     6d6:	bfd4      	ite	le
     6d8:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     6da:	3257      	addgt	r2, #87	; 0x57
     6dc:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     6de:	f1bc 0f08 	cmp.w	ip, #8
     6e2:	70ba      	strb	r2, [r7, #2]
     6e4:	f000 8101 	beq.w	8ea <dualtimer_16_free_running_demo+0x6c6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     6e8:	f1cc 0c07 	rsb	ip, ip, #7
     6ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
     6f0:	ea00 0e0e 	and.w	lr, r0, lr
     6f4:	fa2e fc0c 	lsr.w	ip, lr, ip
     6f8:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     6fc:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     700:	bfd4      	ite	le
     702:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     706:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
     70a:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     70c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     710:	2a08      	cmp	r2, #8
     712:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
     716:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
     71a:	f000 80e8 	beq.w	8ee <dualtimer_16_free_running_demo+0x6ca>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     71e:	f1c2 0207 	rsb	r2, r2, #7
     722:	ea00 0c0c 	and.w	ip, r0, ip
     726:	0092      	lsls	r2, r2, #2
     728:	fa2c f202 	lsr.w	r2, ip, r2
     72c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     730:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     732:	bfd4      	ite	le
     734:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     738:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     73c:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     73e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     742:	2a08      	cmp	r2, #8
     744:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
     748:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
     74c:	f000 80d5 	beq.w	8fa <dualtimer_16_free_running_demo+0x6d6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     750:	f1c2 0207 	rsb	r2, r2, #7
     754:	ea00 0c0c 	and.w	ip, r0, ip
     758:	0092      	lsls	r2, r2, #2
     75a:	fa2c f202 	lsr.w	r2, ip, r2
     75e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     762:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     764:	bfd4      	ite	le
     766:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     76a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     76e:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     770:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     774:	2a08      	cmp	r2, #8
     776:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
     77a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
     77e:	f000 80c4 	beq.w	90a <dualtimer_16_free_running_demo+0x6e6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     782:	f1c2 0207 	rsb	r2, r2, #7
     786:	ea00 0c0c 	and.w	ip, r0, ip
     78a:	0092      	lsls	r2, r2, #2
     78c:	fa2c f202 	lsr.w	r2, ip, r2
     790:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     794:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     796:	bfd4      	ite	le
     798:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     79c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     7a0:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     7a2:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     7a6:	2a08      	cmp	r2, #8
     7a8:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
     7ac:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
     7b0:	f000 80b3 	beq.w	91a <dualtimer_16_free_running_demo+0x6f6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     7b4:	f1c2 0207 	rsb	r2, r2, #7
     7b8:	ea00 0c0c 	and.w	ip, r0, ip
     7bc:	0092      	lsls	r2, r2, #2
     7be:	fa2c f202 	lsr.w	r2, ip, r2
     7c2:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     7c6:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     7c8:	bfd4      	ite	le
     7ca:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     7ce:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     7d2:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     7d4:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     7d8:	2a08      	cmp	r2, #8
     7da:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
     7de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
     7e2:	f000 809c 	beq.w	91e <dualtimer_16_free_running_demo+0x6fa>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     7e6:	f1c2 0207 	rsb	r2, r2, #7
     7ea:	ea00 0c0c 	and.w	ip, r0, ip
     7ee:	0092      	lsls	r2, r2, #2
     7f0:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     7f4:	2a09      	cmp	r2, #9
     7f6:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     7fa:	bfd4      	ite	le
     7fc:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     800:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
     804:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     806:	2901      	cmp	r1, #1
     808:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
     80a:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
     80e:	f000 808c 	beq.w	92a <dualtimer_16_free_running_demo+0x706>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     812:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
     816:	4003      	ands	r3, r0
     818:	0090      	lsls	r0, r2, #2
     81a:	40c3      	lsrs	r3, r0
     81c:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     81e:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     820:	bfd4      	ite	le
     822:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     826:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
     82a:	b2db      	uxtb	r3, r3
     82c:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
     82e:	2900      	cmp	r1, #0
     830:	f47f adf6 	bne.w	420 <dualtimer_16_free_running_demo+0x1fc>
     834:	230a      	movs	r3, #10
     836:	e000      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     838:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
     83a:	2200      	movs	r2, #0
    puts(text_buf);
     83c:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
     83e:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
     840:	f002 fbae 	bl	2fa0 <puts>
  while (i<10){
     844:	f1b9 0901 	subs.w	r9, r9, #1
     848:	f47f af16 	bne.w	678 <dualtimer_16_free_running_demo+0x454>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     84c:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit free running mode, prescale = 1:1, with interrupt");
     84e:	483c      	ldr	r0, [pc, #240]	; (940 <dualtimer_16_free_running_demo+0x71c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     854:	60a3      	str	r3, [r4, #8]
  puts ("16-bit free running mode, prescale = 1:1, with interrupt");
     856:	f002 fba3 	bl	2fa0 <puts>
  dtimer_irq_expected = 1;
     85a:	2101      	movs	r1, #1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     85c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     860:	f241 3288 	movw	r2, #5000	; 0x1388
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     864:	23a0      	movs	r3, #160	; 0xa0
  dtimer_irq_expected = 1;
     866:	4f37      	ldr	r7, [pc, #220]	; (944 <dualtimer_16_free_running_demo+0x720>)
     868:	6039      	str	r1, [r7, #0]
     86a:	4937      	ldr	r1, [pc, #220]	; (948 <dualtimer_16_free_running_demo+0x724>)
     86c:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     86e:	f8c4 9008 	str.w	r9, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     872:	f8c4 900c 	str.w	r9, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     876:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     878:	60a3      	str	r3, [r4, #8]
    while ((dtimer1_irq_occurred + dtimer2_irq_occurred)==0);
     87a:	6833      	ldr	r3, [r6, #0]
     87c:	682a      	ldr	r2, [r5, #0]
     87e:	42d3      	cmn	r3, r2
     880:	d0fb      	beq.n	87a <dualtimer_16_free_running_demo+0x656>
    dtimer1_irq_occurred = 0;
     882:	2700      	movs	r7, #0
    puts ("  IRQ");
     884:	4831      	ldr	r0, [pc, #196]	; (94c <dualtimer_16_free_running_demo+0x728>)
    dtimer1_irq_occurred = 0;
     886:	6037      	str	r7, [r6, #0]
    dtimer2_irq_occurred = 0;
     888:	602f      	str	r7, [r5, #0]
    puts ("  IRQ");
     88a:	f002 fb89 	bl	2fa0 <puts>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     88e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     892:	68a3      	ldr	r3, [r4, #8]
     894:	4a2c      	ldr	r2, [pc, #176]	; (948 <dualtimer_16_free_running_demo+0x724>)
     896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     89a:	60a3      	str	r3, [r4, #8]
  dtimer_irq_expected = 0;
     89c:	4b29      	ldr	r3, [pc, #164]	; (944 <dualtimer_16_free_running_demo+0x720>)
     89e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
     8a2:	601f      	str	r7, [r3, #0]
  dtimer1_irq_occurred = 0;
     8a4:	6037      	str	r7, [r6, #0]
  dtimer2_irq_occurred = 0;
     8a6:	602f      	str	r7, [r5, #0]
}
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (((mask & value)==0) & (i!=7)) {
     8ac:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
     8b0:	f04f 0c01 	mov.w	ip, #1
     8b4:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
     8b6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
     8ba:	2100      	movs	r1, #0
     8bc:	e705      	b.n	6ca <dualtimer_16_free_running_demo+0x4a6>
  while (((mask & value)==0) & (i!=7)) {
     8be:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
     8c2:	f04f 0c01 	mov.w	ip, #1
     8c6:	221c      	movs	r2, #28
  int          i=0;
     8c8:	2100      	movs	r1, #0
  unsigned int mask = 0xF0000000UL;
     8ca:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
     8ce:	e5fd      	b.n	4cc <dualtimer_16_free_running_demo+0x2a8>
  while (((mask & value)==0) & (i!=7)) {
     8d0:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
     8d4:	f04f 0c01 	mov.w	ip, #1
     8d8:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
     8da:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
     8de:	2100      	movs	r1, #0
     8e0:	e4e9      	b.n	2b6 <dualtimer_16_free_running_demo+0x92>
  while (i!=8) {
     8e2:	2303      	movs	r3, #3
     8e4:	e6aa      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     8e6:	2303      	movs	r3, #3
     8e8:	e59d      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     8ea:	2303      	movs	r3, #3
     8ec:	e7a5      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     8ee:	2304      	movs	r3, #4
     8f0:	e7a3      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     8f2:	2304      	movs	r3, #4
     8f4:	e6a2      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     8f6:	2304      	movs	r3, #4
     8f8:	e595      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     8fa:	2305      	movs	r3, #5
     8fc:	e79d      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     8fe:	2305      	movs	r3, #5
     900:	e591      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     902:	2305      	movs	r3, #5
     904:	e69a      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     906:	2306      	movs	r3, #6
     908:	e698      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     90a:	2306      	movs	r3, #6
     90c:	e795      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     90e:	2306      	movs	r3, #6
     910:	e589      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     912:	2307      	movs	r3, #7
     914:	e587      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     916:	2307      	movs	r3, #7
     918:	e690      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     91a:	2307      	movs	r3, #7
     91c:	e78d      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     91e:	4613      	mov	r3, r2
     920:	e78b      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     922:	4613      	mov	r3, r2
     924:	e57f      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     926:	4613      	mov	r3, r2
     928:	e688      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     92a:	2309      	movs	r3, #9
     92c:	e785      	b.n	83a <dualtimer_16_free_running_demo+0x616>
     92e:	2309      	movs	r3, #9
     930:	e684      	b.n	63c <dualtimer_16_free_running_demo+0x418>
     932:	2309      	movs	r3, #9
     934:	e577      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     936:	230a      	movs	r3, #10
     938:	e575      	b.n	426 <dualtimer_16_free_running_demo+0x202>
     93a:	bf00      	nop
     93c:	0000389c 	.word	0x0000389c
     940:	000038d8 	.word	0x000038d8
     944:	20000094 	.word	0x20000094
     948:	e000e100 	.word	0xe000e100
     94c:	00003914 	.word	0x00003914
     950:	20000078 	.word	0x20000078

00000954 <dualtimer_32_free_running_demo>:
{
     954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dtimer_irq_expected = 0;
     958:	f04f 0b00 	mov.w	fp, #0
     95c:	4b93      	ldr	r3, [pc, #588]	; (bac <dualtimer_32_free_running_demo+0x258>)
  dtimer1_irq_occurred = 0;
     95e:	4e94      	ldr	r6, [pc, #592]	; (bb0 <dualtimer_32_free_running_demo+0x25c>)
  dtimer2_irq_occurred = 0;
     960:	4d94      	ldr	r5, [pc, #592]	; (bb4 <dualtimer_32_free_running_demo+0x260>)
{
     962:	4604      	mov	r4, r0
     964:	4f94      	ldr	r7, [pc, #592]	; (bb8 <dualtimer_32_free_running_demo+0x264>)
  puts ("32-bit free running mode, prescale = 1:1, no interrupt");
     966:	4895      	ldr	r0, [pc, #596]	; (bbc <dualtimer_32_free_running_demo+0x268>)
  dtimer_irq_expected = 0;
     968:	f8c3 b000 	str.w	fp, [r3]
  dtimer1_irq_occurred = 0;
     96c:	f8c6 b000 	str.w	fp, [r6]
  dtimer2_irq_occurred = 0;
     970:	f8c5 b000 	str.w	fp, [r5]
  puts ("32-bit free running mode, prescale = 1:1, no interrupt");
     974:	f002 fb14 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     978:	f241 3288 	movw	r2, #5000	; 0x1388
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     97c:	2382      	movs	r3, #130	; 0x82
    puts(text_buf);
     97e:	46b8      	mov	r8, r7
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     980:	f04f 0a0a 	mov.w	sl, #10
    text[length]  =' ';     /* space */
     984:	f04f 0920 	mov.w	r9, #32
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     988:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     98c:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     990:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     992:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
     994:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
     996:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
     99a:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
     99e:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
     9a2:	f040 832d 	bne.w	1000 <dualtimer_32_free_running_demo+0x6ac>
  int          i=0;
     9a6:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
     9a8:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
     9ac:	e001      	b.n	9b2 <dualtimer_32_free_running_demo+0x5e>
    mask = mask >> 4;
     9ae:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
     9b0:	468c      	mov	ip, r1
    mask = mask >> 4;
     9b2:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
     9b6:	ea10 0b03 	ands.w	fp, r0, r3
     9ba:	bf0c      	ite	eq
     9bc:	2201      	moveq	r2, #1
     9be:	2200      	movne	r2, #0
    i ++;
     9c0:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
     9c4:	2907      	cmp	r1, #7
     9c6:	bf0c      	ite	eq
     9c8:	2200      	moveq	r2, #0
     9ca:	f002 0201 	andne.w	r2, r2, #1
     9ce:	2a00      	cmp	r2, #0
     9d0:	d1ed      	bne.n	9ae <dualtimer_32_free_running_demo+0x5a>
  while (i!=8) {
     9d2:	2908      	cmp	r1, #8
     9d4:	f000 80be 	beq.w	b54 <dualtimer_32_free_running_demo+0x200>
     9d8:	f1c1 0207 	rsb	r2, r1, #7
     9dc:	f10c 0c02 	add.w	ip, ip, #2
     9e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
     9e4:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     9e6:	fa2b fb02 	lsr.w	fp, fp, r2
     9ea:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     9ee:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     9f2:	bfd4      	ite	le
     9f4:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     9f6:	3257      	addgt	r2, #87	; 0x57
     9f8:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     9fa:	f1bc 0f08 	cmp.w	ip, #8
     9fe:	70ba      	strb	r2, [r7, #2]
     a00:	f000 8309 	beq.w	1016 <dualtimer_32_free_running_demo+0x6c2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     a04:	f1cc 0c07 	rsb	ip, ip, #7
     a08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
     a0c:	ea00 0e0e 	and.w	lr, r0, lr
     a10:	fa2e fc0c 	lsr.w	ip, lr, ip
     a14:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a18:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     a1c:	bfd4      	ite	le
     a1e:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a22:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
     a26:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a28:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     a2c:	2a08      	cmp	r2, #8
     a2e:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
     a32:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
     a36:	f000 82f6 	beq.w	1026 <dualtimer_32_free_running_demo+0x6d2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     a3a:	f1c2 0207 	rsb	r2, r2, #7
     a3e:	ea00 0c0c 	and.w	ip, r0, ip
     a42:	0092      	lsls	r2, r2, #2
     a44:	fa2c f202 	lsr.w	r2, ip, r2
     a48:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a4c:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     a4e:	bfd4      	ite	le
     a50:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a54:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     a58:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a5a:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     a5e:	2a08      	cmp	r2, #8
     a60:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
     a64:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
     a68:	f000 82e1 	beq.w	102e <dualtimer_32_free_running_demo+0x6da>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     a6c:	f1c2 0207 	rsb	r2, r2, #7
     a70:	ea00 0c0c 	and.w	ip, r0, ip
     a74:	0092      	lsls	r2, r2, #2
     a76:	fa2c f202 	lsr.w	r2, ip, r2
     a7a:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a7e:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     a80:	bfd4      	ite	le
     a82:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a86:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     a8a:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     a8c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     a90:	2a08      	cmp	r2, #8
     a92:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
     a96:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
     a9a:	f000 82d0 	beq.w	103e <dualtimer_32_free_running_demo+0x6ea>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     a9e:	f1c2 0207 	rsb	r2, r2, #7
     aa2:	ea00 0c0c 	and.w	ip, r0, ip
     aa6:	0092      	lsls	r2, r2, #2
     aa8:	fa2c f202 	lsr.w	r2, ip, r2
     aac:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ab0:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     ab2:	bfd4      	ite	le
     ab4:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ab8:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     abc:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     abe:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     ac2:	2a08      	cmp	r2, #8
     ac4:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
     ac8:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
     acc:	f000 82b9 	beq.w	1042 <dualtimer_32_free_running_demo+0x6ee>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     ad0:	f1c2 0207 	rsb	r2, r2, #7
     ad4:	ea00 0c0c 	and.w	ip, r0, ip
     ad8:	0092      	lsls	r2, r2, #2
     ada:	fa2c f202 	lsr.w	r2, ip, r2
     ade:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ae2:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     ae4:	bfd4      	ite	le
     ae6:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     aea:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     aee:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     af0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     af4:	2a08      	cmp	r2, #8
     af6:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
     afa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
     afe:	f000 82a8 	beq.w	1052 <dualtimer_32_free_running_demo+0x6fe>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     b02:	f1c2 0207 	rsb	r2, r2, #7
     b06:	ea00 0c0c 	and.w	ip, r0, ip
     b0a:	0092      	lsls	r2, r2, #2
     b0c:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     b10:	2a09      	cmp	r2, #9
     b12:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     b16:	bfd4      	ite	le
     b18:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     b1c:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
     b20:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     b22:	2901      	cmp	r1, #1
     b24:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
     b26:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
     b2a:	f000 829a 	beq.w	1062 <dualtimer_32_free_running_demo+0x70e>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     b2e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
     b32:	4003      	ands	r3, r0
     b34:	0090      	lsls	r0, r2, #2
     b36:	40c3      	lsrs	r3, r0
     b38:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     b3a:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     b3c:	bfd4      	ite	le
     b3e:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     b42:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
     b46:	b2db      	uxtb	r3, r3
     b48:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
     b4a:	2900      	cmp	r1, #0
     b4c:	f000 828b 	beq.w	1066 <dualtimer_32_free_running_demo+0x712>
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     b50:	2330      	movs	r3, #48	; 0x30
     b52:	72bb      	strb	r3, [r7, #10]
  while (i!=8) {
     b54:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
     b56:	2200      	movs	r2, #0
    puts(text_buf);
     b58:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
     b5a:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
     b5c:	f002 fa20 	bl	2fa0 <puts>
  while (i<10){
     b60:	f1ba 0a01 	subs.w	sl, sl, #1
     b64:	f47f af16 	bne.w	994 <dualtimer_32_free_running_demo+0x40>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     b68:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit free running mode, prescale = 1:16, no interrupt");
     b6a:	4815      	ldr	r0, [pc, #84]	; (bc0 <dualtimer_32_free_running_demo+0x26c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     b70:	60a3      	str	r3, [r4, #8]
  puts ("32-bit free running mode, prescale = 1:16, no interrupt");
     b72:	f002 fa15 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     b76:	22c8      	movs	r2, #200	; 0xc8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     b78:	2386      	movs	r3, #134	; 0x86
     b7a:	f04f 0b0a 	mov.w	fp, #10
    text[length]  =' ';     /* space */
     b7e:	f04f 0920 	mov.w	r9, #32
    puts(text_buf);
     b82:	f8df 8034 	ldr.w	r8, [pc, #52]	; bb8 <dualtimer_32_free_running_demo+0x264>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     b86:	f8c4 a008 	str.w	sl, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     b8a:	f8c4 a00c 	str.w	sl, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     b8e:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     b90:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
     b92:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
     b94:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
     b98:	f010 4a70 	ands.w	sl, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
     b9c:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
     ba0:	f040 8225 	bne.w	fee <dualtimer_32_free_running_demo+0x69a>
  int          i=0;
     ba4:	46d4      	mov	ip, sl
  unsigned int mask = 0xF0000000UL;
     ba6:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
     baa:	e00d      	b.n	bc8 <dualtimer_32_free_running_demo+0x274>
     bac:	20000094 	.word	0x20000094
     bb0:	20000090 	.word	0x20000090
     bb4:	2000008c 	.word	0x2000008c
     bb8:	20000078 	.word	0x20000078
     bbc:	0000391c 	.word	0x0000391c
     bc0:	00003954 	.word	0x00003954
    mask = mask >> 4;
     bc4:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
     bc6:	468c      	mov	ip, r1
    mask = mask >> 4;
     bc8:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
     bcc:	ea10 0a03 	ands.w	sl, r0, r3
     bd0:	bf0c      	ite	eq
     bd2:	2201      	moveq	r2, #1
     bd4:	2200      	movne	r2, #0
    i ++;
     bd6:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
     bda:	2907      	cmp	r1, #7
     bdc:	bf0c      	ite	eq
     bde:	2200      	moveq	r2, #0
     be0:	f002 0201 	andne.w	r2, r2, #1
     be4:	2a00      	cmp	r2, #0
     be6:	d1ed      	bne.n	bc4 <dualtimer_32_free_running_demo+0x270>
  while (i!=8) {
     be8:	2908      	cmp	r1, #8
     bea:	f000 80be 	beq.w	d6a <dualtimer_32_free_running_demo+0x416>
     bee:	f1c1 0207 	rsb	r2, r1, #7
     bf2:	f10c 0c02 	add.w	ip, ip, #2
     bf6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
     bfa:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     bfc:	fa2a fa02 	lsr.w	sl, sl, r2
     c00:	fa5f f28a 	uxtb.w	r2, sl
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c04:	f1ba 0f09 	cmp.w	sl, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     c08:	bfd4      	ite	le
     c0a:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c0c:	3257      	addgt	r2, #87	; 0x57
     c0e:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     c10:	f1bc 0f08 	cmp.w	ip, #8
     c14:	70ba      	strb	r2, [r7, #2]
     c16:	f000 81fc 	beq.w	1012 <dualtimer_32_free_running_demo+0x6be>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     c1a:	f1cc 0c07 	rsb	ip, ip, #7
     c1e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
     c22:	ea00 0e0e 	and.w	lr, r0, lr
     c26:	fa2e fc0c 	lsr.w	ip, lr, ip
     c2a:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c2e:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     c32:	bfd4      	ite	le
     c34:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c38:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
     c3c:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c3e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     c42:	2a08      	cmp	r2, #8
     c44:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
     c48:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
     c4c:	f000 81e9 	beq.w	1022 <dualtimer_32_free_running_demo+0x6ce>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     c50:	f1c2 0207 	rsb	r2, r2, #7
     c54:	ea00 0c0c 	and.w	ip, r0, ip
     c58:	0092      	lsls	r2, r2, #2
     c5a:	fa2c f202 	lsr.w	r2, ip, r2
     c5e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c62:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     c64:	bfd4      	ite	le
     c66:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c6a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     c6e:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c70:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     c74:	2a08      	cmp	r2, #8
     c76:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
     c7a:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
     c7e:	f000 81d8 	beq.w	1032 <dualtimer_32_free_running_demo+0x6de>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     c82:	f1c2 0207 	rsb	r2, r2, #7
     c86:	ea00 0c0c 	and.w	ip, r0, ip
     c8a:	0092      	lsls	r2, r2, #2
     c8c:	fa2c f202 	lsr.w	r2, ip, r2
     c90:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c94:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     c96:	bfd4      	ite	le
     c98:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     c9c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     ca0:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ca2:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     ca6:	2a08      	cmp	r2, #8
     ca8:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
     cac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
     cb0:	f000 81c1 	beq.w	1036 <dualtimer_32_free_running_demo+0x6e2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     cb4:	f1c2 0207 	rsb	r2, r2, #7
     cb8:	ea00 0c0c 	and.w	ip, r0, ip
     cbc:	0092      	lsls	r2, r2, #2
     cbe:	fa2c f202 	lsr.w	r2, ip, r2
     cc2:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     cc6:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     cc8:	bfd4      	ite	le
     cca:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     cce:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     cd2:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     cd4:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     cd8:	2a08      	cmp	r2, #8
     cda:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
     cde:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
     ce2:	f000 81b0 	beq.w	1046 <dualtimer_32_free_running_demo+0x6f2>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     ce6:	f1c2 0207 	rsb	r2, r2, #7
     cea:	ea00 0c0c 	and.w	ip, r0, ip
     cee:	0092      	lsls	r2, r2, #2
     cf0:	fa2c f202 	lsr.w	r2, ip, r2
     cf4:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     cf8:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     cfa:	bfd4      	ite	le
     cfc:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     d00:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     d04:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     d06:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     d0a:	2a08      	cmp	r2, #8
     d0c:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
     d10:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
     d14:	f000 819f 	beq.w	1056 <dualtimer_32_free_running_demo+0x702>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     d18:	f1c2 0207 	rsb	r2, r2, #7
     d1c:	ea00 0c0c 	and.w	ip, r0, ip
     d20:	0092      	lsls	r2, r2, #2
     d22:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     d26:	2a09      	cmp	r2, #9
     d28:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     d2c:	bfd4      	ite	le
     d2e:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     d32:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
     d36:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     d38:	2901      	cmp	r1, #1
     d3a:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
     d3c:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
     d40:	f000 818d 	beq.w	105e <dualtimer_32_free_running_demo+0x70a>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     d44:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
     d48:	4003      	ands	r3, r0
     d4a:	0090      	lsls	r0, r2, #2
     d4c:	40c3      	lsrs	r3, r0
     d4e:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     d50:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     d52:	bfd4      	ite	le
     d54:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     d58:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
     d5c:	b2db      	uxtb	r3, r3
     d5e:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
     d60:	2900      	cmp	r1, #0
     d62:	f47f aef5 	bne.w	b50 <dualtimer_32_free_running_demo+0x1fc>
     d66:	230a      	movs	r3, #10
     d68:	e000      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
     d6a:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
     d6c:	2200      	movs	r2, #0
    puts(text_buf);
     d6e:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
     d70:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
     d72:	f002 f915 	bl	2fa0 <puts>
  while (i<10){
     d76:	f1bb 0b01 	subs.w	fp, fp, #1
     d7a:	f47f af0a 	bne.w	b92 <dualtimer_32_free_running_demo+0x23e>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     d7e:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit free running mode, prescale = 1:256, no interrupt");
     d80:	48ba      	ldr	r0, [pc, #744]	; (106c <dualtimer_32_free_running_demo+0x718>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     d86:	60a3      	str	r3, [r4, #8]
  puts ("32-bit free running mode, prescale = 1:256, no interrupt");
     d88:	f002 f90a 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     d8c:	2214      	movs	r2, #20
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     d8e:	238a      	movs	r3, #138	; 0x8a
     d90:	f04f 090a 	mov.w	r9, #10
    text[length]  =' ';     /* space */
     d94:	f04f 0a20 	mov.w	sl, #32
    puts(text_buf);
     d98:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 1080 <dualtimer_32_free_running_demo+0x72c>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     d9c:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     da0:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     da4:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     da6:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
     da8:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
     daa:	f887 a000 	strb.w	sl, [r7]
  while (((mask & value)==0) & (i!=7)) {
     dae:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
     db2:	f887 a001 	strb.w	sl, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
     db6:	f040 8111 	bne.w	fdc <dualtimer_32_free_running_demo+0x688>
  int          i=0;
     dba:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
     dbc:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
     dc0:	e001      	b.n	dc6 <dualtimer_32_free_running_demo+0x472>
    mask = mask >> 4;
     dc2:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
     dc4:	468c      	mov	ip, r1
    mask = mask >> 4;
     dc6:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
     dca:	ea10 0b03 	ands.w	fp, r0, r3
     dce:	bf0c      	ite	eq
     dd0:	2201      	moveq	r2, #1
     dd2:	2200      	movne	r2, #0
    i ++;
     dd4:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
     dd8:	2907      	cmp	r1, #7
     dda:	bf0c      	ite	eq
     ddc:	2200      	moveq	r2, #0
     dde:	f002 0201 	andne.w	r2, r2, #1
     de2:	2a00      	cmp	r2, #0
     de4:	d1ed      	bne.n	dc2 <dualtimer_32_free_running_demo+0x46e>
  while (i!=8) {
     de6:	2908      	cmp	r1, #8
     de8:	f000 80be 	beq.w	f68 <dualtimer_32_free_running_demo+0x614>
     dec:	f1c1 0207 	rsb	r2, r1, #7
     df0:	f10c 0c02 	add.w	ip, ip, #2
     df4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
     df8:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     dfa:	fa2b fb02 	lsr.w	fp, fp, r2
     dfe:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e02:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     e06:	bfd4      	ite	le
     e08:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e0a:	3257      	addgt	r2, #87	; 0x57
     e0c:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     e0e:	f1bc 0f08 	cmp.w	ip, #8
     e12:	70ba      	strb	r2, [r7, #2]
     e14:	f000 8101 	beq.w	101a <dualtimer_32_free_running_demo+0x6c6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     e18:	f1cc 0c07 	rsb	ip, ip, #7
     e1c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
     e20:	ea00 0e0e 	and.w	lr, r0, lr
     e24:	fa2e fc0c 	lsr.w	ip, lr, ip
     e28:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e2c:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     e30:	bfd4      	ite	le
     e32:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e36:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
     e3a:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e3c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     e40:	2a08      	cmp	r2, #8
     e42:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
     e46:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
     e4a:	f000 80e8 	beq.w	101e <dualtimer_32_free_running_demo+0x6ca>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     e4e:	f1c2 0207 	rsb	r2, r2, #7
     e52:	ea00 0c0c 	and.w	ip, r0, ip
     e56:	0092      	lsls	r2, r2, #2
     e58:	fa2c f202 	lsr.w	r2, ip, r2
     e5c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e60:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     e62:	bfd4      	ite	le
     e64:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e68:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     e6c:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e6e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     e72:	2a08      	cmp	r2, #8
     e74:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
     e78:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
     e7c:	f000 80d5 	beq.w	102a <dualtimer_32_free_running_demo+0x6d6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     e80:	f1c2 0207 	rsb	r2, r2, #7
     e84:	ea00 0c0c 	and.w	ip, r0, ip
     e88:	0092      	lsls	r2, r2, #2
     e8a:	fa2c f202 	lsr.w	r2, ip, r2
     e8e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e92:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     e94:	bfd4      	ite	le
     e96:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     e9a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     e9e:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ea0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     ea4:	2a08      	cmp	r2, #8
     ea6:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
     eaa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
     eae:	f000 80c4 	beq.w	103a <dualtimer_32_free_running_demo+0x6e6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     eb2:	f1c2 0207 	rsb	r2, r2, #7
     eb6:	ea00 0c0c 	and.w	ip, r0, ip
     eba:	0092      	lsls	r2, r2, #2
     ebc:	fa2c f202 	lsr.w	r2, ip, r2
     ec0:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ec4:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     ec6:	bfd4      	ite	le
     ec8:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ecc:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     ed0:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ed2:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     ed6:	2a08      	cmp	r2, #8
     ed8:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
     edc:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
     ee0:	f000 80b3 	beq.w	104a <dualtimer_32_free_running_demo+0x6f6>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     ee4:	f1c2 0207 	rsb	r2, r2, #7
     ee8:	ea00 0c0c 	and.w	ip, r0, ip
     eec:	0092      	lsls	r2, r2, #2
     eee:	fa2c f202 	lsr.w	r2, ip, r2
     ef2:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     ef6:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     ef8:	bfd4      	ite	le
     efa:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     efe:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
     f02:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     f04:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
     f08:	2a08      	cmp	r2, #8
     f0a:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
     f0e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
     f12:	f000 809c 	beq.w	104e <dualtimer_32_free_running_demo+0x6fa>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     f16:	f1c2 0207 	rsb	r2, r2, #7
     f1a:	ea00 0c0c 	and.w	ip, r0, ip
     f1e:	0092      	lsls	r2, r2, #2
     f20:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     f24:	2a09      	cmp	r2, #9
     f26:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     f2a:	bfd4      	ite	le
     f2c:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     f30:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
     f34:	b2d2      	uxtb	r2, r2
  while (i!=8) {
     f36:	2901      	cmp	r1, #1
     f38:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
     f3a:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
     f3e:	f000 808c 	beq.w	105a <dualtimer_32_free_running_demo+0x706>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
     f42:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
     f46:	4003      	ands	r3, r0
     f48:	0090      	lsls	r0, r2, #2
     f4a:	40c3      	lsrs	r3, r0
     f4c:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     f4e:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
     f50:	bfd4      	ite	le
     f52:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
     f56:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
     f5a:	b2db      	uxtb	r3, r3
     f5c:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
     f5e:	2900      	cmp	r1, #0
     f60:	f47f adf6 	bne.w	b50 <dualtimer_32_free_running_demo+0x1fc>
     f64:	230a      	movs	r3, #10
     f66:	e000      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
     f68:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
     f6a:	2200      	movs	r2, #0
    puts(text_buf);
     f6c:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
     f6e:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
     f70:	f002 f816 	bl	2fa0 <puts>
  while (i<10){
     f74:	f1b9 0901 	subs.w	r9, r9, #1
     f78:	f47f af16 	bne.w	da8 <dualtimer_32_free_running_demo+0x454>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     f7c:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit free running mode, prescale = 1:1, with interrupt");
     f7e:	483c      	ldr	r0, [pc, #240]	; (1070 <dualtimer_32_free_running_demo+0x71c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     f84:	60a3      	str	r3, [r4, #8]
  puts ("32-bit free running mode, prescale = 1:1, with interrupt");
     f86:	f002 f80b 	bl	2fa0 <puts>
  dtimer_irq_expected = 1;
     f8a:	2101      	movs	r1, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     f8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     f90:	f241 3288 	movw	r2, #5000	; 0x1388
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     f94:	23a2      	movs	r3, #162	; 0xa2
  dtimer_irq_expected = 1;
     f96:	4f37      	ldr	r7, [pc, #220]	; (1074 <dualtimer_32_free_running_demo+0x720>)
     f98:	6039      	str	r1, [r7, #0]
     f9a:	4937      	ldr	r1, [pc, #220]	; (1078 <dualtimer_32_free_running_demo+0x724>)
     f9c:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
     f9e:	f8c4 9008 	str.w	r9, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
     fa2:	f8c4 900c 	str.w	r9, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
     fa6:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
     fa8:	60a3      	str	r3, [r4, #8]
    while ((dtimer1_irq_occurred + dtimer2_irq_occurred)==0);
     faa:	6833      	ldr	r3, [r6, #0]
     fac:	682a      	ldr	r2, [r5, #0]
     fae:	42d3      	cmn	r3, r2
     fb0:	d0fb      	beq.n	faa <dualtimer_32_free_running_demo+0x656>
    dtimer1_irq_occurred = 0;
     fb2:	2700      	movs	r7, #0
    puts ("  IRQ");
     fb4:	4831      	ldr	r0, [pc, #196]	; (107c <dualtimer_32_free_running_demo+0x728>)
    dtimer1_irq_occurred = 0;
     fb6:	6037      	str	r7, [r6, #0]
    dtimer2_irq_occurred = 0;
     fb8:	602f      	str	r7, [r5, #0]
    puts ("  IRQ");
     fba:	f001 fff1 	bl	2fa0 <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
     fc2:	68a3      	ldr	r3, [r4, #8]
     fc4:	4a2c      	ldr	r2, [pc, #176]	; (1078 <dualtimer_32_free_running_demo+0x724>)
     fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     fca:	60a3      	str	r3, [r4, #8]
  dtimer_irq_expected = 0;
     fcc:	4b29      	ldr	r3, [pc, #164]	; (1074 <dualtimer_32_free_running_demo+0x720>)
     fce:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
     fd2:	601f      	str	r7, [r3, #0]
  dtimer1_irq_occurred = 0;
     fd4:	6037      	str	r7, [r6, #0]
  dtimer2_irq_occurred = 0;
     fd6:	602f      	str	r7, [r5, #0]
}
     fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (((mask & value)==0) & (i!=7)) {
     fdc:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
     fe0:	f04f 0c01 	mov.w	ip, #1
     fe4:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
     fe6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
     fea:	2100      	movs	r1, #0
     fec:	e705      	b.n	dfa <dualtimer_32_free_running_demo+0x4a6>
  while (((mask & value)==0) & (i!=7)) {
     fee:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
     ff2:	f04f 0c01 	mov.w	ip, #1
     ff6:	221c      	movs	r2, #28
  int          i=0;
     ff8:	2100      	movs	r1, #0
  unsigned int mask = 0xF0000000UL;
     ffa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
     ffe:	e5fd      	b.n	bfc <dualtimer_32_free_running_demo+0x2a8>
  while (((mask & value)==0) & (i!=7)) {
    1000:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1004:	f04f 0c01 	mov.w	ip, #1
    1008:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    100a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    100e:	2100      	movs	r1, #0
    1010:	e4e9      	b.n	9e6 <dualtimer_32_free_running_demo+0x92>
  while (i!=8) {
    1012:	2303      	movs	r3, #3
    1014:	e6aa      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    1016:	2303      	movs	r3, #3
    1018:	e59d      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    101a:	2303      	movs	r3, #3
    101c:	e7a5      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    101e:	2304      	movs	r3, #4
    1020:	e7a3      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    1022:	2304      	movs	r3, #4
    1024:	e6a2      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    1026:	2304      	movs	r3, #4
    1028:	e595      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    102a:	2305      	movs	r3, #5
    102c:	e79d      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    102e:	2305      	movs	r3, #5
    1030:	e591      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    1032:	2305      	movs	r3, #5
    1034:	e69a      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    1036:	2306      	movs	r3, #6
    1038:	e698      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    103a:	2306      	movs	r3, #6
    103c:	e795      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    103e:	2306      	movs	r3, #6
    1040:	e589      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    1042:	2307      	movs	r3, #7
    1044:	e587      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    1046:	2307      	movs	r3, #7
    1048:	e690      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    104a:	2307      	movs	r3, #7
    104c:	e78d      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    104e:	4613      	mov	r3, r2
    1050:	e78b      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    1052:	4613      	mov	r3, r2
    1054:	e57f      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    1056:	4613      	mov	r3, r2
    1058:	e688      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    105a:	2309      	movs	r3, #9
    105c:	e785      	b.n	f6a <dualtimer_32_free_running_demo+0x616>
    105e:	2309      	movs	r3, #9
    1060:	e684      	b.n	d6c <dualtimer_32_free_running_demo+0x418>
    1062:	2309      	movs	r3, #9
    1064:	e577      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    1066:	230a      	movs	r3, #10
    1068:	e575      	b.n	b56 <dualtimer_32_free_running_demo+0x202>
    106a:	bf00      	nop
    106c:	0000398c 	.word	0x0000398c
    1070:	000039c8 	.word	0x000039c8
    1074:	20000094 	.word	0x20000094
    1078:	e000e100 	.word	0xe000e100
    107c:	00003914 	.word	0x00003914
    1080:	20000078 	.word	0x20000078

00001084 <dualtimer_16_periodic_demo>:
{
    1084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dtimer_irq_expected = 0;
    1088:	f04f 0b00 	mov.w	fp, #0
    108c:	4b93      	ldr	r3, [pc, #588]	; (12dc <dualtimer_16_periodic_demo+0x258>)
  dtimer1_irq_occurred = 0;
    108e:	4e94      	ldr	r6, [pc, #592]	; (12e0 <dualtimer_16_periodic_demo+0x25c>)
  dtimer2_irq_occurred = 0;
    1090:	4d94      	ldr	r5, [pc, #592]	; (12e4 <dualtimer_16_periodic_demo+0x260>)
{
    1092:	4604      	mov	r4, r0
    1094:	4f94      	ldr	r7, [pc, #592]	; (12e8 <dualtimer_16_periodic_demo+0x264>)
  puts ("16-bit periodic mode, prescale = 1:1, no interrupt");
    1096:	4895      	ldr	r0, [pc, #596]	; (12ec <dualtimer_16_periodic_demo+0x268>)
  dtimer_irq_expected = 0;
    1098:	f8c3 b000 	str.w	fp, [r3]
  dtimer1_irq_occurred = 0;
    109c:	f8c6 b000 	str.w	fp, [r6]
  dtimer2_irq_occurred = 0;
    10a0:	f8c5 b000 	str.w	fp, [r5]
  puts ("16-bit periodic mode, prescale = 1:1, no interrupt");
    10a4:	f001 ff7c 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    10a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    10ac:	23c0      	movs	r3, #192	; 0xc0
    puts(text_buf);
    10ae:	46b8      	mov	r8, r7
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    10b0:	f04f 0a0a 	mov.w	sl, #10
    text[length]  =' ';     /* space */
    10b4:	f04f 0920 	mov.w	r9, #32
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    10b8:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    10bc:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    10c0:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    10c2:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    10c4:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    10c6:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
    10ca:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    10ce:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
    10d2:	f040 8336 	bne.w	1742 <dualtimer_16_periodic_demo+0x6be>
  int          i=0;
    10d6:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
    10d8:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    10dc:	e001      	b.n	10e2 <dualtimer_16_periodic_demo+0x5e>
    mask = mask >> 4;
    10de:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    10e0:	468c      	mov	ip, r1
    mask = mask >> 4;
    10e2:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    10e6:	ea10 0b03 	ands.w	fp, r0, r3
    10ea:	bf0c      	ite	eq
    10ec:	2201      	moveq	r2, #1
    10ee:	2200      	movne	r2, #0
    i ++;
    10f0:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    10f4:	2907      	cmp	r1, #7
    10f6:	bf0c      	ite	eq
    10f8:	2200      	moveq	r2, #0
    10fa:	f002 0201 	andne.w	r2, r2, #1
    10fe:	2a00      	cmp	r2, #0
    1100:	d1ed      	bne.n	10de <dualtimer_16_periodic_demo+0x5a>
  while (i!=8) {
    1102:	2908      	cmp	r1, #8
    1104:	f000 80be 	beq.w	1284 <dualtimer_16_periodic_demo+0x200>
    1108:	f1c1 0207 	rsb	r2, r1, #7
    110c:	f10c 0c02 	add.w	ip, ip, #2
    1110:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    1114:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1116:	fa2b fb02 	lsr.w	fp, fp, r2
    111a:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    111e:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1122:	bfd4      	ite	le
    1124:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1126:	3257      	addgt	r2, #87	; 0x57
    1128:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    112a:	f1bc 0f08 	cmp.w	ip, #8
    112e:	70ba      	strb	r2, [r7, #2]
    1130:	f000 8312 	beq.w	1758 <dualtimer_16_periodic_demo+0x6d4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1134:	f1cc 0c07 	rsb	ip, ip, #7
    1138:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    113c:	ea00 0e0e 	and.w	lr, r0, lr
    1140:	fa2e fc0c 	lsr.w	ip, lr, ip
    1144:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1148:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    114c:	bfd4      	ite	le
    114e:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1152:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    1156:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1158:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    115c:	2a08      	cmp	r2, #8
    115e:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
    1162:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    1166:	f000 82ff 	beq.w	1768 <dualtimer_16_periodic_demo+0x6e4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    116a:	f1c2 0207 	rsb	r2, r2, #7
    116e:	ea00 0c0c 	and.w	ip, r0, ip
    1172:	0092      	lsls	r2, r2, #2
    1174:	fa2c f202 	lsr.w	r2, ip, r2
    1178:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    117c:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    117e:	bfd4      	ite	le
    1180:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1184:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1188:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    118a:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    118e:	2a08      	cmp	r2, #8
    1190:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
    1194:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    1198:	f000 82ea 	beq.w	1770 <dualtimer_16_periodic_demo+0x6ec>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    119c:	f1c2 0207 	rsb	r2, r2, #7
    11a0:	ea00 0c0c 	and.w	ip, r0, ip
    11a4:	0092      	lsls	r2, r2, #2
    11a6:	fa2c f202 	lsr.w	r2, ip, r2
    11aa:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    11ae:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    11b0:	bfd4      	ite	le
    11b2:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    11b6:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    11ba:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    11bc:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    11c0:	2a08      	cmp	r2, #8
    11c2:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
    11c6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    11ca:	f000 82d9 	beq.w	1780 <dualtimer_16_periodic_demo+0x6fc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    11ce:	f1c2 0207 	rsb	r2, r2, #7
    11d2:	ea00 0c0c 	and.w	ip, r0, ip
    11d6:	0092      	lsls	r2, r2, #2
    11d8:	fa2c f202 	lsr.w	r2, ip, r2
    11dc:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    11e0:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    11e2:	bfd4      	ite	le
    11e4:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    11e8:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    11ec:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    11ee:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    11f2:	2a08      	cmp	r2, #8
    11f4:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
    11f8:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    11fc:	f000 82c2 	beq.w	1784 <dualtimer_16_periodic_demo+0x700>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1200:	f1c2 0207 	rsb	r2, r2, #7
    1204:	ea00 0c0c 	and.w	ip, r0, ip
    1208:	0092      	lsls	r2, r2, #2
    120a:	fa2c f202 	lsr.w	r2, ip, r2
    120e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1212:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1214:	bfd4      	ite	le
    1216:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    121a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    121e:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1220:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1224:	2a08      	cmp	r2, #8
    1226:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
    122a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    122e:	f000 82b1 	beq.w	1794 <dualtimer_16_periodic_demo+0x710>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1232:	f1c2 0207 	rsb	r2, r2, #7
    1236:	ea00 0c0c 	and.w	ip, r0, ip
    123a:	0092      	lsls	r2, r2, #2
    123c:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1240:	2a09      	cmp	r2, #9
    1242:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1246:	bfd4      	ite	le
    1248:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    124c:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    1250:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1252:	2901      	cmp	r1, #1
    1254:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
    1256:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    125a:	f000 82a3 	beq.w	17a4 <dualtimer_16_periodic_demo+0x720>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    125e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    1262:	4003      	ands	r3, r0
    1264:	0090      	lsls	r0, r2, #2
    1266:	40c3      	lsrs	r3, r0
    1268:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    126a:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    126c:	bfd4      	ite	le
    126e:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1272:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    1276:	b2db      	uxtb	r3, r3
    1278:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
    127a:	2900      	cmp	r1, #0
    127c:	f000 8294 	beq.w	17a8 <dualtimer_16_periodic_demo+0x724>
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1280:	2330      	movs	r3, #48	; 0x30
    1282:	72bb      	strb	r3, [r7, #10]
  while (i!=8) {
    1284:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    1286:	2200      	movs	r2, #0
    puts(text_buf);
    1288:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
    128a:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
    128c:	f001 fe88 	bl	2fa0 <puts>
  while (i<10){
    1290:	f1ba 0a01 	subs.w	sl, sl, #1
    1294:	f47f af16 	bne.w	10c4 <dualtimer_16_periodic_demo+0x40>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1298:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit periodic mode, prescale = 1:16, no interrupt");
    129a:	4815      	ldr	r0, [pc, #84]	; (12f0 <dualtimer_16_periodic_demo+0x26c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    129c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    12a0:	60a3      	str	r3, [r4, #8]
  puts ("16-bit periodic mode, prescale = 1:16, no interrupt");
    12a2:	f001 fe7d 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    12a6:	22c8      	movs	r2, #200	; 0xc8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    12a8:	23c4      	movs	r3, #196	; 0xc4
    12aa:	f04f 0b0a 	mov.w	fp, #10
    text[length]  =' ';     /* space */
    12ae:	f04f 0920 	mov.w	r9, #32
    puts(text_buf);
    12b2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12e8 <dualtimer_16_periodic_demo+0x264>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    12b6:	f8c4 a008 	str.w	sl, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    12ba:	f8c4 a00c 	str.w	sl, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    12be:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    12c0:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    12c2:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    12c4:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
    12c8:	f010 4a70 	ands.w	sl, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    12cc:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
    12d0:	f040 822e 	bne.w	1730 <dualtimer_16_periodic_demo+0x6ac>
  int          i=0;
    12d4:	46d4      	mov	ip, sl
  unsigned int mask = 0xF0000000UL;
    12d6:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    12da:	e00d      	b.n	12f8 <dualtimer_16_periodic_demo+0x274>
    12dc:	20000094 	.word	0x20000094
    12e0:	20000090 	.word	0x20000090
    12e4:	2000008c 	.word	0x2000008c
    12e8:	20000078 	.word	0x20000078
    12ec:	00003a04 	.word	0x00003a04
    12f0:	00003a38 	.word	0x00003a38
    mask = mask >> 4;
    12f4:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    12f6:	468c      	mov	ip, r1
    mask = mask >> 4;
    12f8:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    12fc:	ea10 0a03 	ands.w	sl, r0, r3
    1300:	bf0c      	ite	eq
    1302:	2201      	moveq	r2, #1
    1304:	2200      	movne	r2, #0
    i ++;
    1306:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    130a:	2907      	cmp	r1, #7
    130c:	bf0c      	ite	eq
    130e:	2200      	moveq	r2, #0
    1310:	f002 0201 	andne.w	r2, r2, #1
    1314:	2a00      	cmp	r2, #0
    1316:	d1ed      	bne.n	12f4 <dualtimer_16_periodic_demo+0x270>
  while (i!=8) {
    1318:	2908      	cmp	r1, #8
    131a:	f000 80be 	beq.w	149a <dualtimer_16_periodic_demo+0x416>
    131e:	f1c1 0207 	rsb	r2, r1, #7
    1322:	f10c 0c02 	add.w	ip, ip, #2
    1326:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    132a:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    132c:	fa2a fa02 	lsr.w	sl, sl, r2
    1330:	fa5f f28a 	uxtb.w	r2, sl
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1334:	f1ba 0f09 	cmp.w	sl, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1338:	bfd4      	ite	le
    133a:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    133c:	3257      	addgt	r2, #87	; 0x57
    133e:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1340:	f1bc 0f08 	cmp.w	ip, #8
    1344:	70ba      	strb	r2, [r7, #2]
    1346:	f000 8205 	beq.w	1754 <dualtimer_16_periodic_demo+0x6d0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    134a:	f1cc 0c07 	rsb	ip, ip, #7
    134e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1352:	ea00 0e0e 	and.w	lr, r0, lr
    1356:	fa2e fc0c 	lsr.w	ip, lr, ip
    135a:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    135e:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1362:	bfd4      	ite	le
    1364:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1368:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    136c:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    136e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1372:	2a08      	cmp	r2, #8
    1374:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
    1378:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    137c:	f000 81f2 	beq.w	1764 <dualtimer_16_periodic_demo+0x6e0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1380:	f1c2 0207 	rsb	r2, r2, #7
    1384:	ea00 0c0c 	and.w	ip, r0, ip
    1388:	0092      	lsls	r2, r2, #2
    138a:	fa2c f202 	lsr.w	r2, ip, r2
    138e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1392:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1394:	bfd4      	ite	le
    1396:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    139a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    139e:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    13a0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    13a4:	2a08      	cmp	r2, #8
    13a6:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
    13aa:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    13ae:	f000 81e1 	beq.w	1774 <dualtimer_16_periodic_demo+0x6f0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    13b2:	f1c2 0207 	rsb	r2, r2, #7
    13b6:	ea00 0c0c 	and.w	ip, r0, ip
    13ba:	0092      	lsls	r2, r2, #2
    13bc:	fa2c f202 	lsr.w	r2, ip, r2
    13c0:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    13c4:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    13c6:	bfd4      	ite	le
    13c8:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    13cc:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    13d0:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    13d2:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    13d6:	2a08      	cmp	r2, #8
    13d8:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
    13dc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    13e0:	f000 81ca 	beq.w	1778 <dualtimer_16_periodic_demo+0x6f4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    13e4:	f1c2 0207 	rsb	r2, r2, #7
    13e8:	ea00 0c0c 	and.w	ip, r0, ip
    13ec:	0092      	lsls	r2, r2, #2
    13ee:	fa2c f202 	lsr.w	r2, ip, r2
    13f2:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    13f6:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    13f8:	bfd4      	ite	le
    13fa:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    13fe:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1402:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1404:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1408:	2a08      	cmp	r2, #8
    140a:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
    140e:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    1412:	f000 81b9 	beq.w	1788 <dualtimer_16_periodic_demo+0x704>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1416:	f1c2 0207 	rsb	r2, r2, #7
    141a:	ea00 0c0c 	and.w	ip, r0, ip
    141e:	0092      	lsls	r2, r2, #2
    1420:	fa2c f202 	lsr.w	r2, ip, r2
    1424:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1428:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    142a:	bfd4      	ite	le
    142c:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1430:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1434:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1436:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    143a:	2a08      	cmp	r2, #8
    143c:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
    1440:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    1444:	f000 81a8 	beq.w	1798 <dualtimer_16_periodic_demo+0x714>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1448:	f1c2 0207 	rsb	r2, r2, #7
    144c:	ea00 0c0c 	and.w	ip, r0, ip
    1450:	0092      	lsls	r2, r2, #2
    1452:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1456:	2a09      	cmp	r2, #9
    1458:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    145c:	bfd4      	ite	le
    145e:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1462:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    1466:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1468:	2901      	cmp	r1, #1
    146a:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
    146c:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    1470:	f000 8196 	beq.w	17a0 <dualtimer_16_periodic_demo+0x71c>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1474:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    1478:	4003      	ands	r3, r0
    147a:	0090      	lsls	r0, r2, #2
    147c:	40c3      	lsrs	r3, r0
    147e:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1480:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1482:	bfd4      	ite	le
    1484:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1488:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    148c:	b2db      	uxtb	r3, r3
    148e:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
    1490:	2900      	cmp	r1, #0
    1492:	f47f aef5 	bne.w	1280 <dualtimer_16_periodic_demo+0x1fc>
    1496:	230a      	movs	r3, #10
    1498:	e000      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    149a:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    149c:	2200      	movs	r2, #0
    puts(text_buf);
    149e:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
    14a0:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
    14a2:	f001 fd7d 	bl	2fa0 <puts>
  while (i<10){
    14a6:	f1bb 0b01 	subs.w	fp, fp, #1
    14aa:	f47f af0a 	bne.w	12c2 <dualtimer_16_periodic_demo+0x23e>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    14ae:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit periodic mode, prescale = 1:256, no interrupt");
    14b0:	48be      	ldr	r0, [pc, #760]	; (17ac <dualtimer_16_periodic_demo+0x728>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    14b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    14b6:	60a3      	str	r3, [r4, #8]
  puts ("16-bit periodic mode, prescale = 1:256, no interrupt");
    14b8:	f001 fd72 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    14bc:	2214      	movs	r2, #20
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    14be:	23c8      	movs	r3, #200	; 0xc8
    14c0:	f04f 090a 	mov.w	r9, #10
    text[length]  =' ';     /* space */
    14c4:	f04f 0a20 	mov.w	sl, #32
    puts(text_buf);
    14c8:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 17bc <dualtimer_16_periodic_demo+0x738>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    14cc:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    14d0:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    14d4:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    14d6:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    14d8:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    14da:	f887 a000 	strb.w	sl, [r7]
  while (((mask & value)==0) & (i!=7)) {
    14de:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    14e2:	f887 a001 	strb.w	sl, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
    14e6:	f040 811a 	bne.w	171e <dualtimer_16_periodic_demo+0x69a>
  int          i=0;
    14ea:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
    14ec:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    14f0:	e001      	b.n	14f6 <dualtimer_16_periodic_demo+0x472>
    mask = mask >> 4;
    14f2:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    14f4:	468c      	mov	ip, r1
    mask = mask >> 4;
    14f6:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    14fa:	ea10 0b03 	ands.w	fp, r0, r3
    14fe:	bf0c      	ite	eq
    1500:	2201      	moveq	r2, #1
    1502:	2200      	movne	r2, #0
    i ++;
    1504:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    1508:	2907      	cmp	r1, #7
    150a:	bf0c      	ite	eq
    150c:	2200      	moveq	r2, #0
    150e:	f002 0201 	andne.w	r2, r2, #1
    1512:	2a00      	cmp	r2, #0
    1514:	d1ed      	bne.n	14f2 <dualtimer_16_periodic_demo+0x46e>
  while (i!=8) {
    1516:	2908      	cmp	r1, #8
    1518:	f000 80be 	beq.w	1698 <dualtimer_16_periodic_demo+0x614>
    151c:	f1c1 0207 	rsb	r2, r1, #7
    1520:	f10c 0c02 	add.w	ip, ip, #2
    1524:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    1528:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    152a:	fa2b fb02 	lsr.w	fp, fp, r2
    152e:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1532:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1536:	bfd4      	ite	le
    1538:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    153a:	3257      	addgt	r2, #87	; 0x57
    153c:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    153e:	f1bc 0f08 	cmp.w	ip, #8
    1542:	70ba      	strb	r2, [r7, #2]
    1544:	f000 810a 	beq.w	175c <dualtimer_16_periodic_demo+0x6d8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1548:	f1cc 0c07 	rsb	ip, ip, #7
    154c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1550:	ea00 0e0e 	and.w	lr, r0, lr
    1554:	fa2e fc0c 	lsr.w	ip, lr, ip
    1558:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    155c:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1560:	bfd4      	ite	le
    1562:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1566:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    156a:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    156c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1570:	2a08      	cmp	r2, #8
    1572:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
    1576:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    157a:	f000 80f1 	beq.w	1760 <dualtimer_16_periodic_demo+0x6dc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    157e:	f1c2 0207 	rsb	r2, r2, #7
    1582:	ea00 0c0c 	and.w	ip, r0, ip
    1586:	0092      	lsls	r2, r2, #2
    1588:	fa2c f202 	lsr.w	r2, ip, r2
    158c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1590:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1592:	bfd4      	ite	le
    1594:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1598:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    159c:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    159e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    15a2:	2a08      	cmp	r2, #8
    15a4:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
    15a8:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    15ac:	f000 80de 	beq.w	176c <dualtimer_16_periodic_demo+0x6e8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    15b0:	f1c2 0207 	rsb	r2, r2, #7
    15b4:	ea00 0c0c 	and.w	ip, r0, ip
    15b8:	0092      	lsls	r2, r2, #2
    15ba:	fa2c f202 	lsr.w	r2, ip, r2
    15be:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    15c2:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    15c4:	bfd4      	ite	le
    15c6:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    15ca:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    15ce:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    15d0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    15d4:	2a08      	cmp	r2, #8
    15d6:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
    15da:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    15de:	f000 80cd 	beq.w	177c <dualtimer_16_periodic_demo+0x6f8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    15e2:	f1c2 0207 	rsb	r2, r2, #7
    15e6:	ea00 0c0c 	and.w	ip, r0, ip
    15ea:	0092      	lsls	r2, r2, #2
    15ec:	fa2c f202 	lsr.w	r2, ip, r2
    15f0:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    15f4:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    15f6:	bfd4      	ite	le
    15f8:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    15fc:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1600:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1602:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1606:	2a08      	cmp	r2, #8
    1608:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
    160c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    1610:	f000 80bc 	beq.w	178c <dualtimer_16_periodic_demo+0x708>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1614:	f1c2 0207 	rsb	r2, r2, #7
    1618:	ea00 0c0c 	and.w	ip, r0, ip
    161c:	0092      	lsls	r2, r2, #2
    161e:	fa2c f202 	lsr.w	r2, ip, r2
    1622:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1626:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1628:	bfd4      	ite	le
    162a:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    162e:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1632:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1634:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1638:	2a08      	cmp	r2, #8
    163a:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
    163e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    1642:	f000 80a5 	beq.w	1790 <dualtimer_16_periodic_demo+0x70c>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1646:	f1c2 0207 	rsb	r2, r2, #7
    164a:	ea00 0c0c 	and.w	ip, r0, ip
    164e:	0092      	lsls	r2, r2, #2
    1650:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1654:	2a09      	cmp	r2, #9
    1656:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    165a:	bfd4      	ite	le
    165c:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1660:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    1664:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1666:	2901      	cmp	r1, #1
    1668:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
    166a:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    166e:	f000 8095 	beq.w	179c <dualtimer_16_periodic_demo+0x718>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1672:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    1676:	4003      	ands	r3, r0
    1678:	0090      	lsls	r0, r2, #2
    167a:	40c3      	lsrs	r3, r0
    167c:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    167e:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1680:	bfd4      	ite	le
    1682:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1686:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    168a:	b2db      	uxtb	r3, r3
    168c:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
    168e:	2900      	cmp	r1, #0
    1690:	f47f adf6 	bne.w	1280 <dualtimer_16_periodic_demo+0x1fc>
    1694:	230a      	movs	r3, #10
    1696:	e000      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1698:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    169a:	2200      	movs	r2, #0
    puts(text_buf);
    169c:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
    169e:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
    16a0:	f001 fc7e 	bl	2fa0 <puts>
  while (i<10){
    16a4:	f1b9 0901 	subs.w	r9, r9, #1
    16a8:	f47f af16 	bne.w	14d8 <dualtimer_16_periodic_demo+0x454>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    16ac:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit periodic mode, prescale = 1:1, with interrupt x4");
    16ae:	4840      	ldr	r0, [pc, #256]	; (17b0 <dualtimer_16_periodic_demo+0x72c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    16b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    16b4:	60a3      	str	r3, [r4, #8]
  puts ("16-bit periodic mode, prescale = 1:1, with interrupt x4");
    16b6:	f001 fc73 	bl	2fa0 <puts>
  dtimer_irq_expected = 1;
    16ba:	2101      	movs	r1, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    16bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    16c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    16c4:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
    dtimer1_irq_occurred = 0;
    16c8:	46ca      	mov	sl, r9
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    16ca:	2704      	movs	r7, #4
  dtimer_irq_expected = 1;
    16cc:	4b39      	ldr	r3, [pc, #228]	; (17b4 <dualtimer_16_periodic_demo+0x730>)
    puts ("  IRQ");
    16ce:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 17c0 <dualtimer_16_periodic_demo+0x73c>
  dtimer_irq_expected = 1;
    16d2:	6019      	str	r1, [r3, #0]
    16d4:	4938      	ldr	r1, [pc, #224]	; (17b8 <dualtimer_16_periodic_demo+0x734>)
    16d6:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    16d8:	f8c4 9008 	str.w	r9, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    16dc:	f8c4 900c 	str.w	r9, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    16e0:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    16e2:	f8c4 c008 	str.w	ip, [r4, #8]
    while ((dtimer1_irq_occurred + dtimer2_irq_occurred)==0);
    16e6:	6833      	ldr	r3, [r6, #0]
    16e8:	682a      	ldr	r2, [r5, #0]
    16ea:	42d3      	cmn	r3, r2
    16ec:	d0fb      	beq.n	16e6 <dualtimer_16_periodic_demo+0x662>
    puts ("  IRQ");
    16ee:	4640      	mov	r0, r8
    dtimer1_irq_occurred = 0;
    16f0:	f8c6 a000 	str.w	sl, [r6]
    dtimer2_irq_occurred = 0;
    16f4:	f8c5 a000 	str.w	sl, [r5]
    puts ("  IRQ");
    16f8:	f001 fc52 	bl	2fa0 <puts>
  while (i<4){
    16fc:	3f01      	subs	r7, #1
    16fe:	d1f2      	bne.n	16e6 <dualtimer_16_periodic_demo+0x662>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1700:	f44f 6180 	mov.w	r1, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1704:	68a3      	ldr	r3, [r4, #8]
    1706:	4a2c      	ldr	r2, [pc, #176]	; (17b8 <dualtimer_16_periodic_demo+0x734>)
    1708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    170c:	60a3      	str	r3, [r4, #8]
  dtimer_irq_expected = 0;
    170e:	4b29      	ldr	r3, [pc, #164]	; (17b4 <dualtimer_16_periodic_demo+0x730>)
    1710:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    1714:	601f      	str	r7, [r3, #0]
  dtimer1_irq_occurred = 0;
    1716:	6037      	str	r7, [r6, #0]
  dtimer2_irq_occurred = 0;
    1718:	602f      	str	r7, [r5, #0]
}
    171a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (((mask & value)==0) & (i!=7)) {
    171e:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1722:	f04f 0c01 	mov.w	ip, #1
    1726:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    1728:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    172c:	2100      	movs	r1, #0
    172e:	e6fc      	b.n	152a <dualtimer_16_periodic_demo+0x4a6>
  while (((mask & value)==0) & (i!=7)) {
    1730:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1734:	f04f 0c01 	mov.w	ip, #1
    1738:	221c      	movs	r2, #28
  int          i=0;
    173a:	2100      	movs	r1, #0
  unsigned int mask = 0xF0000000UL;
    173c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    1740:	e5f4      	b.n	132c <dualtimer_16_periodic_demo+0x2a8>
  while (((mask & value)==0) & (i!=7)) {
    1742:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1746:	f04f 0c01 	mov.w	ip, #1
    174a:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    174c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    1750:	2100      	movs	r1, #0
    1752:	e4e0      	b.n	1116 <dualtimer_16_periodic_demo+0x92>
  while (i!=8) {
    1754:	2303      	movs	r3, #3
    1756:	e6a1      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    1758:	2303      	movs	r3, #3
    175a:	e594      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    175c:	2303      	movs	r3, #3
    175e:	e79c      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1760:	2304      	movs	r3, #4
    1762:	e79a      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1764:	2304      	movs	r3, #4
    1766:	e699      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    1768:	2304      	movs	r3, #4
    176a:	e58c      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    176c:	2305      	movs	r3, #5
    176e:	e794      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1770:	2305      	movs	r3, #5
    1772:	e588      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    1774:	2305      	movs	r3, #5
    1776:	e691      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    1778:	2306      	movs	r3, #6
    177a:	e68f      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    177c:	2306      	movs	r3, #6
    177e:	e78c      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1780:	2306      	movs	r3, #6
    1782:	e580      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    1784:	2307      	movs	r3, #7
    1786:	e57e      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    1788:	2307      	movs	r3, #7
    178a:	e687      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    178c:	2307      	movs	r3, #7
    178e:	e784      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1790:	4613      	mov	r3, r2
    1792:	e782      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    1794:	4613      	mov	r3, r2
    1796:	e576      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    1798:	4613      	mov	r3, r2
    179a:	e67f      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    179c:	2309      	movs	r3, #9
    179e:	e77c      	b.n	169a <dualtimer_16_periodic_demo+0x616>
    17a0:	2309      	movs	r3, #9
    17a2:	e67b      	b.n	149c <dualtimer_16_periodic_demo+0x418>
    17a4:	2309      	movs	r3, #9
    17a6:	e56e      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    17a8:	230a      	movs	r3, #10
    17aa:	e56c      	b.n	1286 <dualtimer_16_periodic_demo+0x202>
    17ac:	00003a6c 	.word	0x00003a6c
    17b0:	00003aa4 	.word	0x00003aa4
    17b4:	20000094 	.word	0x20000094
    17b8:	e000e100 	.word	0xe000e100
    17bc:	20000078 	.word	0x20000078
    17c0:	00003914 	.word	0x00003914

000017c4 <dualtimer_32_periodic_demo>:
{
    17c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dtimer_irq_expected = 0;
    17c8:	f04f 0b00 	mov.w	fp, #0
    17cc:	4b93      	ldr	r3, [pc, #588]	; (1a1c <dualtimer_32_periodic_demo+0x258>)
  dtimer1_irq_occurred = 0;
    17ce:	4e94      	ldr	r6, [pc, #592]	; (1a20 <dualtimer_32_periodic_demo+0x25c>)
  dtimer2_irq_occurred = 0;
    17d0:	4d94      	ldr	r5, [pc, #592]	; (1a24 <dualtimer_32_periodic_demo+0x260>)
{
    17d2:	4604      	mov	r4, r0
    17d4:	4f94      	ldr	r7, [pc, #592]	; (1a28 <dualtimer_32_periodic_demo+0x264>)
  puts ("32-bit periodic mode, prescale = 1:1, no interrupt");
    17d6:	4895      	ldr	r0, [pc, #596]	; (1a2c <dualtimer_32_periodic_demo+0x268>)
  dtimer_irq_expected = 0;
    17d8:	f8c3 b000 	str.w	fp, [r3]
  dtimer1_irq_occurred = 0;
    17dc:	f8c6 b000 	str.w	fp, [r6]
  dtimer2_irq_occurred = 0;
    17e0:	f8c5 b000 	str.w	fp, [r5]
  puts ("32-bit periodic mode, prescale = 1:1, no interrupt");
    17e4:	f001 fbdc 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    17e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    17ec:	23c2      	movs	r3, #194	; 0xc2
    puts(text_buf);
    17ee:	46b8      	mov	r8, r7
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    17f0:	f04f 0a0a 	mov.w	sl, #10
    text[length]  =' ';     /* space */
    17f4:	f04f 0920 	mov.w	r9, #32
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    17f8:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    17fc:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1800:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1802:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    1804:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    1806:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
    180a:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    180e:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
    1812:	f040 8336 	bne.w	1e82 <dualtimer_32_periodic_demo+0x6be>
  int          i=0;
    1816:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
    1818:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    181c:	e001      	b.n	1822 <dualtimer_32_periodic_demo+0x5e>
    mask = mask >> 4;
    181e:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    1820:	468c      	mov	ip, r1
    mask = mask >> 4;
    1822:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    1826:	ea10 0b03 	ands.w	fp, r0, r3
    182a:	bf0c      	ite	eq
    182c:	2201      	moveq	r2, #1
    182e:	2200      	movne	r2, #0
    i ++;
    1830:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    1834:	2907      	cmp	r1, #7
    1836:	bf0c      	ite	eq
    1838:	2200      	moveq	r2, #0
    183a:	f002 0201 	andne.w	r2, r2, #1
    183e:	2a00      	cmp	r2, #0
    1840:	d1ed      	bne.n	181e <dualtimer_32_periodic_demo+0x5a>
  while (i!=8) {
    1842:	2908      	cmp	r1, #8
    1844:	f000 80be 	beq.w	19c4 <dualtimer_32_periodic_demo+0x200>
    1848:	f1c1 0207 	rsb	r2, r1, #7
    184c:	f10c 0c02 	add.w	ip, ip, #2
    1850:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    1854:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1856:	fa2b fb02 	lsr.w	fp, fp, r2
    185a:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    185e:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1862:	bfd4      	ite	le
    1864:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1866:	3257      	addgt	r2, #87	; 0x57
    1868:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    186a:	f1bc 0f08 	cmp.w	ip, #8
    186e:	70ba      	strb	r2, [r7, #2]
    1870:	f000 8312 	beq.w	1e98 <dualtimer_32_periodic_demo+0x6d4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1874:	f1cc 0c07 	rsb	ip, ip, #7
    1878:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    187c:	ea00 0e0e 	and.w	lr, r0, lr
    1880:	fa2e fc0c 	lsr.w	ip, lr, ip
    1884:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1888:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    188c:	bfd4      	ite	le
    188e:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1892:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    1896:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1898:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    189c:	2a08      	cmp	r2, #8
    189e:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
    18a2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    18a6:	f000 82ff 	beq.w	1ea8 <dualtimer_32_periodic_demo+0x6e4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    18aa:	f1c2 0207 	rsb	r2, r2, #7
    18ae:	ea00 0c0c 	and.w	ip, r0, ip
    18b2:	0092      	lsls	r2, r2, #2
    18b4:	fa2c f202 	lsr.w	r2, ip, r2
    18b8:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    18bc:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    18be:	bfd4      	ite	le
    18c0:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    18c4:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    18c8:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    18ca:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    18ce:	2a08      	cmp	r2, #8
    18d0:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
    18d4:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    18d8:	f000 82ea 	beq.w	1eb0 <dualtimer_32_periodic_demo+0x6ec>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    18dc:	f1c2 0207 	rsb	r2, r2, #7
    18e0:	ea00 0c0c 	and.w	ip, r0, ip
    18e4:	0092      	lsls	r2, r2, #2
    18e6:	fa2c f202 	lsr.w	r2, ip, r2
    18ea:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    18ee:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    18f0:	bfd4      	ite	le
    18f2:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    18f6:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    18fa:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    18fc:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1900:	2a08      	cmp	r2, #8
    1902:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
    1906:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    190a:	f000 82d9 	beq.w	1ec0 <dualtimer_32_periodic_demo+0x6fc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    190e:	f1c2 0207 	rsb	r2, r2, #7
    1912:	ea00 0c0c 	and.w	ip, r0, ip
    1916:	0092      	lsls	r2, r2, #2
    1918:	fa2c f202 	lsr.w	r2, ip, r2
    191c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1920:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1922:	bfd4      	ite	le
    1924:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1928:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    192c:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    192e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1932:	2a08      	cmp	r2, #8
    1934:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
    1938:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    193c:	f000 82c2 	beq.w	1ec4 <dualtimer_32_periodic_demo+0x700>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1940:	f1c2 0207 	rsb	r2, r2, #7
    1944:	ea00 0c0c 	and.w	ip, r0, ip
    1948:	0092      	lsls	r2, r2, #2
    194a:	fa2c f202 	lsr.w	r2, ip, r2
    194e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1952:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1954:	bfd4      	ite	le
    1956:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    195a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    195e:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1960:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1964:	2a08      	cmp	r2, #8
    1966:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
    196a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    196e:	f000 82b1 	beq.w	1ed4 <dualtimer_32_periodic_demo+0x710>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1972:	f1c2 0207 	rsb	r2, r2, #7
    1976:	ea00 0c0c 	and.w	ip, r0, ip
    197a:	0092      	lsls	r2, r2, #2
    197c:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1980:	2a09      	cmp	r2, #9
    1982:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1986:	bfd4      	ite	le
    1988:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    198c:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    1990:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1992:	2901      	cmp	r1, #1
    1994:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
    1996:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    199a:	f000 82a3 	beq.w	1ee4 <dualtimer_32_periodic_demo+0x720>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    199e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    19a2:	4003      	ands	r3, r0
    19a4:	0090      	lsls	r0, r2, #2
    19a6:	40c3      	lsrs	r3, r0
    19a8:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    19aa:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    19ac:	bfd4      	ite	le
    19ae:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    19b2:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    19b6:	b2db      	uxtb	r3, r3
    19b8:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
    19ba:	2900      	cmp	r1, #0
    19bc:	f000 8294 	beq.w	1ee8 <dualtimer_32_periodic_demo+0x724>
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    19c0:	2330      	movs	r3, #48	; 0x30
    19c2:	72bb      	strb	r3, [r7, #10]
  while (i!=8) {
    19c4:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    19c6:	2200      	movs	r2, #0
    puts(text_buf);
    19c8:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
    19ca:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
    19cc:	f001 fae8 	bl	2fa0 <puts>
  while (i<10){
    19d0:	f1ba 0a01 	subs.w	sl, sl, #1
    19d4:	f47f af16 	bne.w	1804 <dualtimer_32_periodic_demo+0x40>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    19d8:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit periodic mode, prescale = 1:16, no interrupt");
    19da:	4815      	ldr	r0, [pc, #84]	; (1a30 <dualtimer_32_periodic_demo+0x26c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    19dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    19e0:	60a3      	str	r3, [r4, #8]
  puts ("32-bit periodic mode, prescale = 1:16, no interrupt");
    19e2:	f001 fadd 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    19e6:	22c8      	movs	r2, #200	; 0xc8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    19e8:	23c6      	movs	r3, #198	; 0xc6
    19ea:	f04f 0b0a 	mov.w	fp, #10
    text[length]  =' ';     /* space */
    19ee:	f04f 0920 	mov.w	r9, #32
    puts(text_buf);
    19f2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1a28 <dualtimer_32_periodic_demo+0x264>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    19f6:	f8c4 a008 	str.w	sl, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    19fa:	f8c4 a00c 	str.w	sl, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    19fe:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1a00:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    1a02:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    1a04:	f887 9000 	strb.w	r9, [r7]
  while (((mask & value)==0) & (i!=7)) {
    1a08:	f010 4a70 	ands.w	sl, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    1a0c:	f887 9001 	strb.w	r9, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
    1a10:	f040 822e 	bne.w	1e70 <dualtimer_32_periodic_demo+0x6ac>
  int          i=0;
    1a14:	46d4      	mov	ip, sl
  unsigned int mask = 0xF0000000UL;
    1a16:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    1a1a:	e00d      	b.n	1a38 <dualtimer_32_periodic_demo+0x274>
    1a1c:	20000094 	.word	0x20000094
    1a20:	20000090 	.word	0x20000090
    1a24:	2000008c 	.word	0x2000008c
    1a28:	20000078 	.word	0x20000078
    1a2c:	00003adc 	.word	0x00003adc
    1a30:	00003b10 	.word	0x00003b10
    mask = mask >> 4;
    1a34:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    1a36:	468c      	mov	ip, r1
    mask = mask >> 4;
    1a38:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    1a3c:	ea10 0a03 	ands.w	sl, r0, r3
    1a40:	bf0c      	ite	eq
    1a42:	2201      	moveq	r2, #1
    1a44:	2200      	movne	r2, #0
    i ++;
    1a46:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    1a4a:	2907      	cmp	r1, #7
    1a4c:	bf0c      	ite	eq
    1a4e:	2200      	moveq	r2, #0
    1a50:	f002 0201 	andne.w	r2, r2, #1
    1a54:	2a00      	cmp	r2, #0
    1a56:	d1ed      	bne.n	1a34 <dualtimer_32_periodic_demo+0x270>
  while (i!=8) {
    1a58:	2908      	cmp	r1, #8
    1a5a:	f000 80be 	beq.w	1bda <dualtimer_32_periodic_demo+0x416>
    1a5e:	f1c1 0207 	rsb	r2, r1, #7
    1a62:	f10c 0c02 	add.w	ip, ip, #2
    1a66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    1a6a:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1a6c:	fa2a fa02 	lsr.w	sl, sl, r2
    1a70:	fa5f f28a 	uxtb.w	r2, sl
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1a74:	f1ba 0f09 	cmp.w	sl, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1a78:	bfd4      	ite	le
    1a7a:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1a7c:	3257      	addgt	r2, #87	; 0x57
    1a7e:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1a80:	f1bc 0f08 	cmp.w	ip, #8
    1a84:	70ba      	strb	r2, [r7, #2]
    1a86:	f000 8205 	beq.w	1e94 <dualtimer_32_periodic_demo+0x6d0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1a8a:	f1cc 0c07 	rsb	ip, ip, #7
    1a8e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1a92:	ea00 0e0e 	and.w	lr, r0, lr
    1a96:	fa2e fc0c 	lsr.w	ip, lr, ip
    1a9a:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1a9e:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1aa2:	bfd4      	ite	le
    1aa4:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1aa8:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    1aac:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1aae:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1ab2:	2a08      	cmp	r2, #8
    1ab4:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
    1ab8:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    1abc:	f000 81f2 	beq.w	1ea4 <dualtimer_32_periodic_demo+0x6e0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1ac0:	f1c2 0207 	rsb	r2, r2, #7
    1ac4:	ea00 0c0c 	and.w	ip, r0, ip
    1ac8:	0092      	lsls	r2, r2, #2
    1aca:	fa2c f202 	lsr.w	r2, ip, r2
    1ace:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1ad2:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1ad4:	bfd4      	ite	le
    1ad6:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1ada:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1ade:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1ae0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1ae4:	2a08      	cmp	r2, #8
    1ae6:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
    1aea:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    1aee:	f000 81e1 	beq.w	1eb4 <dualtimer_32_periodic_demo+0x6f0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1af2:	f1c2 0207 	rsb	r2, r2, #7
    1af6:	ea00 0c0c 	and.w	ip, r0, ip
    1afa:	0092      	lsls	r2, r2, #2
    1afc:	fa2c f202 	lsr.w	r2, ip, r2
    1b00:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b04:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1b06:	bfd4      	ite	le
    1b08:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b0c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1b10:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b12:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1b16:	2a08      	cmp	r2, #8
    1b18:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
    1b1c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    1b20:	f000 81ca 	beq.w	1eb8 <dualtimer_32_periodic_demo+0x6f4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1b24:	f1c2 0207 	rsb	r2, r2, #7
    1b28:	ea00 0c0c 	and.w	ip, r0, ip
    1b2c:	0092      	lsls	r2, r2, #2
    1b2e:	fa2c f202 	lsr.w	r2, ip, r2
    1b32:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b36:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1b38:	bfd4      	ite	le
    1b3a:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b3e:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1b42:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b44:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1b48:	2a08      	cmp	r2, #8
    1b4a:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
    1b4e:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    1b52:	f000 81b9 	beq.w	1ec8 <dualtimer_32_periodic_demo+0x704>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1b56:	f1c2 0207 	rsb	r2, r2, #7
    1b5a:	ea00 0c0c 	and.w	ip, r0, ip
    1b5e:	0092      	lsls	r2, r2, #2
    1b60:	fa2c f202 	lsr.w	r2, ip, r2
    1b64:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b68:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1b6a:	bfd4      	ite	le
    1b6c:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b70:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1b74:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b76:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1b7a:	2a08      	cmp	r2, #8
    1b7c:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
    1b80:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    1b84:	f000 81a8 	beq.w	1ed8 <dualtimer_32_periodic_demo+0x714>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1b88:	f1c2 0207 	rsb	r2, r2, #7
    1b8c:	ea00 0c0c 	and.w	ip, r0, ip
    1b90:	0092      	lsls	r2, r2, #2
    1b92:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1b96:	2a09      	cmp	r2, #9
    1b98:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1b9c:	bfd4      	ite	le
    1b9e:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1ba2:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    1ba6:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1ba8:	2901      	cmp	r1, #1
    1baa:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
    1bac:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    1bb0:	f000 8196 	beq.w	1ee0 <dualtimer_32_periodic_demo+0x71c>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1bb4:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    1bb8:	4003      	ands	r3, r0
    1bba:	0090      	lsls	r0, r2, #2
    1bbc:	40c3      	lsrs	r3, r0
    1bbe:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1bc0:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1bc2:	bfd4      	ite	le
    1bc4:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1bc8:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    1bcc:	b2db      	uxtb	r3, r3
    1bce:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
    1bd0:	2900      	cmp	r1, #0
    1bd2:	f47f aef5 	bne.w	19c0 <dualtimer_32_periodic_demo+0x1fc>
    1bd6:	230a      	movs	r3, #10
    1bd8:	e000      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1bda:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    1bdc:	2200      	movs	r2, #0
    puts(text_buf);
    1bde:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
    1be0:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
    1be2:	f001 f9dd 	bl	2fa0 <puts>
  while (i<10){
    1be6:	f1bb 0b01 	subs.w	fp, fp, #1
    1bea:	f47f af0a 	bne.w	1a02 <dualtimer_32_periodic_demo+0x23e>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1bee:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit periodic mode, prescale = 1:256, no interrupt");
    1bf0:	48be      	ldr	r0, [pc, #760]	; (1eec <dualtimer_32_periodic_demo+0x728>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1bf6:	60a3      	str	r3, [r4, #8]
  puts ("32-bit periodic mode, prescale = 1:256, no interrupt");
    1bf8:	f001 f9d2 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1bfc:	2214      	movs	r2, #20
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1bfe:	23ca      	movs	r3, #202	; 0xca
    1c00:	f04f 090a 	mov.w	r9, #10
    text[length]  =' ';     /* space */
    1c04:	f04f 0a20 	mov.w	sl, #32
    puts(text_buf);
    1c08:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 1efc <dualtimer_32_periodic_demo+0x738>
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    1c0c:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    1c10:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1c14:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1c16:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    1c18:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    1c1a:	f887 a000 	strb.w	sl, [r7]
  while (((mask & value)==0) & (i!=7)) {
    1c1e:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    1c22:	f887 a001 	strb.w	sl, [r7, #1]
  while (((mask & value)==0) & (i!=7)) {
    1c26:	f040 811a 	bne.w	1e5e <dualtimer_32_periodic_demo+0x69a>
  int          i=0;
    1c2a:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
    1c2c:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    1c30:	e001      	b.n	1c36 <dualtimer_32_periodic_demo+0x472>
    mask = mask >> 4;
    1c32:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    1c34:	468c      	mov	ip, r1
    mask = mask >> 4;
    1c36:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    1c3a:	ea10 0b03 	ands.w	fp, r0, r3
    1c3e:	bf0c      	ite	eq
    1c40:	2201      	moveq	r2, #1
    1c42:	2200      	movne	r2, #0
    i ++;
    1c44:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    1c48:	2907      	cmp	r1, #7
    1c4a:	bf0c      	ite	eq
    1c4c:	2200      	moveq	r2, #0
    1c4e:	f002 0201 	andne.w	r2, r2, #1
    1c52:	2a00      	cmp	r2, #0
    1c54:	d1ed      	bne.n	1c32 <dualtimer_32_periodic_demo+0x46e>
  while (i!=8) {
    1c56:	2908      	cmp	r1, #8
    1c58:	f000 80be 	beq.w	1dd8 <dualtimer_32_periodic_demo+0x614>
    1c5c:	f1c1 0207 	rsb	r2, r1, #7
    1c60:	f10c 0c02 	add.w	ip, ip, #2
    1c64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    1c68:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1c6a:	fa2b fb02 	lsr.w	fp, fp, r2
    1c6e:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1c72:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1c76:	bfd4      	ite	le
    1c78:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1c7a:	3257      	addgt	r2, #87	; 0x57
    1c7c:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1c7e:	f1bc 0f08 	cmp.w	ip, #8
    1c82:	70ba      	strb	r2, [r7, #2]
    1c84:	f000 810a 	beq.w	1e9c <dualtimer_32_periodic_demo+0x6d8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1c88:	f1cc 0c07 	rsb	ip, ip, #7
    1c8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1c90:	ea00 0e0e 	and.w	lr, r0, lr
    1c94:	fa2e fc0c 	lsr.w	ip, lr, ip
    1c98:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1c9c:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1ca0:	bfd4      	ite	le
    1ca2:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1ca6:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    1caa:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1cac:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1cb0:	2a08      	cmp	r2, #8
    1cb2:	f887 c003 	strb.w	ip, [r7, #3]
    mask = mask>> 4;
    1cb6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    1cba:	f000 80f1 	beq.w	1ea0 <dualtimer_32_periodic_demo+0x6dc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1cbe:	f1c2 0207 	rsb	r2, r2, #7
    1cc2:	ea00 0c0c 	and.w	ip, r0, ip
    1cc6:	0092      	lsls	r2, r2, #2
    1cc8:	fa2c f202 	lsr.w	r2, ip, r2
    1ccc:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1cd0:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1cd2:	bfd4      	ite	le
    1cd4:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1cd8:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1cdc:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1cde:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1ce2:	2a08      	cmp	r2, #8
    1ce4:	f887 c004 	strb.w	ip, [r7, #4]
    mask = mask>> 4;
    1ce8:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    1cec:	f000 80de 	beq.w	1eac <dualtimer_32_periodic_demo+0x6e8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1cf0:	f1c2 0207 	rsb	r2, r2, #7
    1cf4:	ea00 0c0c 	and.w	ip, r0, ip
    1cf8:	0092      	lsls	r2, r2, #2
    1cfa:	fa2c f202 	lsr.w	r2, ip, r2
    1cfe:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d02:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1d04:	bfd4      	ite	le
    1d06:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d0a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1d0e:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d10:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1d14:	2a08      	cmp	r2, #8
    1d16:	f887 c005 	strb.w	ip, [r7, #5]
    mask = mask>> 4;
    1d1a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    1d1e:	f000 80cd 	beq.w	1ebc <dualtimer_32_periodic_demo+0x6f8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1d22:	f1c2 0207 	rsb	r2, r2, #7
    1d26:	ea00 0c0c 	and.w	ip, r0, ip
    1d2a:	0092      	lsls	r2, r2, #2
    1d2c:	fa2c f202 	lsr.w	r2, ip, r2
    1d30:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d34:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1d36:	bfd4      	ite	le
    1d38:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d3c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1d40:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d42:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1d46:	2a08      	cmp	r2, #8
    1d48:	f887 c006 	strb.w	ip, [r7, #6]
    mask = mask>> 4;
    1d4c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    1d50:	f000 80bc 	beq.w	1ecc <dualtimer_32_periodic_demo+0x708>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1d54:	f1c2 0207 	rsb	r2, r2, #7
    1d58:	ea00 0c0c 	and.w	ip, r0, ip
    1d5c:	0092      	lsls	r2, r2, #2
    1d5e:	fa2c f202 	lsr.w	r2, ip, r2
    1d62:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d66:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1d68:	bfd4      	ite	le
    1d6a:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d6e:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    1d72:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d74:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1d78:	2a08      	cmp	r2, #8
    1d7a:	f887 c007 	strb.w	ip, [r7, #7]
    mask = mask>> 4;
    1d7e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    1d82:	f000 80a5 	beq.w	1ed0 <dualtimer_32_periodic_demo+0x70c>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1d86:	f1c2 0207 	rsb	r2, r2, #7
    1d8a:	ea00 0c0c 	and.w	ip, r0, ip
    1d8e:	0092      	lsls	r2, r2, #2
    1d90:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1d94:	2a09      	cmp	r2, #9
    1d96:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1d9a:	bfd4      	ite	le
    1d9c:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1da0:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    1da4:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1da6:	2901      	cmp	r1, #1
    1da8:	723a      	strb	r2, [r7, #8]
    mask = mask>> 4;
    1daa:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    1dae:	f000 8095 	beq.w	1edc <dualtimer_32_periodic_demo+0x718>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1db2:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    1db6:	4003      	ands	r3, r0
    1db8:	0090      	lsls	r0, r2, #2
    1dba:	40c3      	lsrs	r3, r0
    1dbc:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1dbe:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1dc0:	bfd4      	ite	le
    1dc2:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1dc6:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    1dca:	b2db      	uxtb	r3, r3
    1dcc:	727b      	strb	r3, [r7, #9]
  while (i!=8) {
    1dce:	2900      	cmp	r1, #0
    1dd0:	f47f adf6 	bne.w	19c0 <dualtimer_32_periodic_demo+0x1fc>
    1dd4:	230a      	movs	r3, #10
    1dd6:	e000      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1dd8:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    1dda:	2200      	movs	r2, #0
    puts(text_buf);
    1ddc:	4640      	mov	r0, r8
  text[length]=(char) 0; /* null termination */
    1dde:	54fa      	strb	r2, [r7, r3]
    puts(text_buf);
    1de0:	f001 f8de 	bl	2fa0 <puts>
  while (i<10){
    1de4:	f1b9 0901 	subs.w	r9, r9, #1
    1de8:	f47f af16 	bne.w	1c18 <dualtimer_32_periodic_demo+0x454>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1dec:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit periodic mode, prescale = 1:1, with interrupt x4");
    1dee:	4840      	ldr	r0, [pc, #256]	; (1ef0 <dualtimer_32_periodic_demo+0x72c>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1df4:	60a3      	str	r3, [r4, #8]
  puts ("32-bit periodic mode, prescale = 1:1, with interrupt x4");
    1df6:	f001 f8d3 	bl	2fa0 <puts>
  dtimer_irq_expected = 1;
    1dfa:	2101      	movs	r1, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1dfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1e00:	f640 32b8 	movw	r2, #3000	; 0xbb8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1e04:	f04f 0ce2 	mov.w	ip, #226	; 0xe2
    dtimer1_irq_occurred = 0;
    1e08:	46ca      	mov	sl, r9
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1e0a:	2704      	movs	r7, #4
  dtimer_irq_expected = 1;
    1e0c:	4b39      	ldr	r3, [pc, #228]	; (1ef4 <dualtimer_32_periodic_demo+0x730>)
    puts ("  IRQ");
    1e0e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1f00 <dualtimer_32_periodic_demo+0x73c>
  dtimer_irq_expected = 1;
    1e12:	6019      	str	r1, [r3, #0]
    1e14:	4938      	ldr	r1, [pc, #224]	; (1ef8 <dualtimer_32_periodic_demo+0x734>)
    1e16:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    1e18:	f8c4 9008 	str.w	r9, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    1e1c:	f8c4 900c 	str.w	r9, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1e20:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1e22:	f8c4 c008 	str.w	ip, [r4, #8]
    while ((dtimer1_irq_occurred + dtimer2_irq_occurred)==0);
    1e26:	6833      	ldr	r3, [r6, #0]
    1e28:	682a      	ldr	r2, [r5, #0]
    1e2a:	42d3      	cmn	r3, r2
    1e2c:	d0fb      	beq.n	1e26 <dualtimer_32_periodic_demo+0x662>
    puts ("  IRQ");
    1e2e:	4640      	mov	r0, r8
    dtimer1_irq_occurred = 0;
    1e30:	f8c6 a000 	str.w	sl, [r6]
    dtimer2_irq_occurred = 0;
    1e34:	f8c5 a000 	str.w	sl, [r5]
    puts ("  IRQ");
    1e38:	f001 f8b2 	bl	2fa0 <puts>
  while (i<4){
    1e3c:	3f01      	subs	r7, #1
    1e3e:	d1f2      	bne.n	1e26 <dualtimer_32_periodic_demo+0x662>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    1e44:	68a3      	ldr	r3, [r4, #8]
    1e46:	4a2c      	ldr	r2, [pc, #176]	; (1ef8 <dualtimer_32_periodic_demo+0x734>)
    1e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1e4c:	60a3      	str	r3, [r4, #8]
  dtimer_irq_expected = 0;
    1e4e:	4b29      	ldr	r3, [pc, #164]	; (1ef4 <dualtimer_32_periodic_demo+0x730>)
    1e50:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    1e54:	601f      	str	r7, [r3, #0]
  dtimer1_irq_occurred = 0;
    1e56:	6037      	str	r7, [r6, #0]
  dtimer2_irq_occurred = 0;
    1e58:	602f      	str	r7, [r5, #0]
}
    1e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (((mask & value)==0) & (i!=7)) {
    1e5e:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1e62:	f04f 0c01 	mov.w	ip, #1
    1e66:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    1e68:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    1e6c:	2100      	movs	r1, #0
    1e6e:	e6fc      	b.n	1c6a <dualtimer_32_periodic_demo+0x4a6>
  while (((mask & value)==0) & (i!=7)) {
    1e70:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1e74:	f04f 0c01 	mov.w	ip, #1
    1e78:	221c      	movs	r2, #28
  int          i=0;
    1e7a:	2100      	movs	r1, #0
  unsigned int mask = 0xF0000000UL;
    1e7c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    1e80:	e5f4      	b.n	1a6c <dualtimer_32_periodic_demo+0x2a8>
  while (((mask & value)==0) & (i!=7)) {
    1e82:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    1e86:	f04f 0c01 	mov.w	ip, #1
    1e8a:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    1e8c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    1e90:	2100      	movs	r1, #0
    1e92:	e4e0      	b.n	1856 <dualtimer_32_periodic_demo+0x92>
  while (i!=8) {
    1e94:	2303      	movs	r3, #3
    1e96:	e6a1      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1e98:	2303      	movs	r3, #3
    1e9a:	e594      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1e9c:	2303      	movs	r3, #3
    1e9e:	e79c      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1ea0:	2304      	movs	r3, #4
    1ea2:	e79a      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1ea4:	2304      	movs	r3, #4
    1ea6:	e699      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1ea8:	2304      	movs	r3, #4
    1eaa:	e58c      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1eac:	2305      	movs	r3, #5
    1eae:	e794      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1eb0:	2305      	movs	r3, #5
    1eb2:	e588      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1eb4:	2305      	movs	r3, #5
    1eb6:	e691      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1eb8:	2306      	movs	r3, #6
    1eba:	e68f      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1ebc:	2306      	movs	r3, #6
    1ebe:	e78c      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1ec0:	2306      	movs	r3, #6
    1ec2:	e580      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1ec4:	2307      	movs	r3, #7
    1ec6:	e57e      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1ec8:	2307      	movs	r3, #7
    1eca:	e687      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1ecc:	2307      	movs	r3, #7
    1ece:	e784      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1ed0:	4613      	mov	r3, r2
    1ed2:	e782      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1ed4:	4613      	mov	r3, r2
    1ed6:	e576      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1ed8:	4613      	mov	r3, r2
    1eda:	e67f      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1edc:	2309      	movs	r3, #9
    1ede:	e77c      	b.n	1dda <dualtimer_32_periodic_demo+0x616>
    1ee0:	2309      	movs	r3, #9
    1ee2:	e67b      	b.n	1bdc <dualtimer_32_periodic_demo+0x418>
    1ee4:	2309      	movs	r3, #9
    1ee6:	e56e      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1ee8:	230a      	movs	r3, #10
    1eea:	e56c      	b.n	19c6 <dualtimer_32_periodic_demo+0x202>
    1eec:	00003b44 	.word	0x00003b44
    1ef0:	00003b7c 	.word	0x00003b7c
    1ef4:	20000094 	.word	0x20000094
    1ef8:	e000e100 	.word	0xe000e100
    1efc:	20000078 	.word	0x20000078
    1f00:	00003914 	.word	0x00003914

00001f04 <dualtimer_16_one_shot_demo>:
{
    1f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dtimer_irq_expected = 0;
    1f08:	f04f 0a00 	mov.w	sl, #0
    1f0c:	4b96      	ldr	r3, [pc, #600]	; (2168 <dualtimer_16_one_shot_demo+0x264>)
  dtimer1_irq_occurred = 0;
    1f0e:	4e97      	ldr	r6, [pc, #604]	; (216c <dualtimer_16_one_shot_demo+0x268>)
  dtimer2_irq_occurred = 0;
    1f10:	4d97      	ldr	r5, [pc, #604]	; (2170 <dualtimer_16_one_shot_demo+0x26c>)
{
    1f12:	4604      	mov	r4, r0
    1f14:	f8df 8264 	ldr.w	r8, [pc, #612]	; 217c <dualtimer_16_one_shot_demo+0x278>
  puts ("16-bit one shot mode, prescale = 1:1, no interrupt");
    1f18:	4896      	ldr	r0, [pc, #600]	; (2174 <dualtimer_16_one_shot_demo+0x270>)
  dtimer_irq_expected = 0;
    1f1a:	f8c3 a000 	str.w	sl, [r3]
  dtimer1_irq_occurred = 0;
    1f1e:	f8c6 a000 	str.w	sl, [r6]
  dtimer2_irq_occurred = 0;
    1f22:	f8c5 a000 	str.w	sl, [r5]
  puts ("16-bit one shot mode, prescale = 1:1, no interrupt");
    1f26:	f001 f83b 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1f2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1f2e:	23c1      	movs	r3, #193	; 0xc1
    puts(text_buf);
    1f30:	4647      	mov	r7, r8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1f32:	f04f 0b0a 	mov.w	fp, #10
    text[length]  =' ';     /* space */
    1f36:	f04f 0920 	mov.w	r9, #32
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    1f3a:	f8c4 a008 	str.w	sl, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    1f3e:	f8c4 a00c 	str.w	sl, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    1f42:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    1f44:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    1f46:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    1f48:	f888 9000 	strb.w	r9, [r8]
  while (((mask & value)==0) & (i!=7)) {
    1f4c:	f010 4a70 	ands.w	sl, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    1f50:	f888 9001 	strb.w	r9, [r8, #1]
  while (((mask & value)==0) & (i!=7)) {
    1f54:	f040 822d 	bne.w	23b2 <dualtimer_16_one_shot_demo+0x4ae>
  int          i=0;
    1f58:	46d4      	mov	ip, sl
  unsigned int mask = 0xF0000000UL;
    1f5a:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    1f5e:	e001      	b.n	1f64 <dualtimer_16_one_shot_demo+0x60>
    mask = mask >> 4;
    1f60:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    1f62:	468c      	mov	ip, r1
    mask = mask >> 4;
    1f64:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    1f68:	ea10 0a03 	ands.w	sl, r0, r3
    1f6c:	bf0c      	ite	eq
    1f6e:	2201      	moveq	r2, #1
    1f70:	2200      	movne	r2, #0
    i ++;
    1f72:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    1f76:	2907      	cmp	r1, #7
    1f78:	bf0c      	ite	eq
    1f7a:	2200      	moveq	r2, #0
    1f7c:	f002 0201 	andne.w	r2, r2, #1
    1f80:	2a00      	cmp	r2, #0
    1f82:	d1ed      	bne.n	1f60 <dualtimer_16_one_shot_demo+0x5c>
  while (i!=8) {
    1f84:	2908      	cmp	r1, #8
    1f86:	f000 80c2 	beq.w	210e <dualtimer_16_one_shot_demo+0x20a>
    1f8a:	f1c1 0207 	rsb	r2, r1, #7
    1f8e:	f10c 0c02 	add.w	ip, ip, #2
    1f92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    1f96:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1f98:	fa2a fa02 	lsr.w	sl, sl, r2
    1f9c:	fa5f f28a 	uxtb.w	r2, sl
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1fa0:	f1ba 0f09 	cmp.w	sl, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1fa4:	bfd4      	ite	le
    1fa6:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1fa8:	3257      	addgt	r2, #87	; 0x57
    1faa:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    1fac:	f1bc 0f08 	cmp.w	ip, #8
    1fb0:	f888 2002 	strb.w	r2, [r8, #2]
    1fb4:	f000 8208 	beq.w	23c8 <dualtimer_16_one_shot_demo+0x4c4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1fb8:	f1cc 0c07 	rsb	ip, ip, #7
    1fbc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1fc0:	ea00 0e0e 	and.w	lr, r0, lr
    1fc4:	fa2e fc0c 	lsr.w	ip, lr, ip
    1fc8:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1fcc:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    1fd0:	bfd4      	ite	le
    1fd2:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1fd6:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    1fda:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    1fdc:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    1fe0:	2a08      	cmp	r2, #8
    1fe2:	f888 c003 	strb.w	ip, [r8, #3]
    mask = mask>> 4;
    1fe6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    1fea:	f000 81f1 	beq.w	23d0 <dualtimer_16_one_shot_demo+0x4cc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    1fee:	f1c2 0207 	rsb	r2, r2, #7
    1ff2:	ea00 0c0c 	and.w	ip, r0, ip
    1ff6:	0092      	lsls	r2, r2, #2
    1ff8:	fa2c f202 	lsr.w	r2, ip, r2
    1ffc:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2000:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2002:	bfd4      	ite	le
    2004:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2008:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    200c:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    200e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2012:	2a08      	cmp	r2, #8
    2014:	f888 c004 	strb.w	ip, [r8, #4]
    mask = mask>> 4;
    2018:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    201c:	f000 81dc 	beq.w	23d8 <dualtimer_16_one_shot_demo+0x4d4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2020:	f1c2 0207 	rsb	r2, r2, #7
    2024:	ea00 0c0c 	and.w	ip, r0, ip
    2028:	0092      	lsls	r2, r2, #2
    202a:	fa2c f202 	lsr.w	r2, ip, r2
    202e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2032:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2034:	bfd4      	ite	le
    2036:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    203a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    203e:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2040:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2044:	2a08      	cmp	r2, #8
    2046:	f888 c005 	strb.w	ip, [r8, #5]
    mask = mask>> 4;
    204a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    204e:	f000 81c7 	beq.w	23e0 <dualtimer_16_one_shot_demo+0x4dc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2052:	f1c2 0207 	rsb	r2, r2, #7
    2056:	ea00 0c0c 	and.w	ip, r0, ip
    205a:	0092      	lsls	r2, r2, #2
    205c:	fa2c f202 	lsr.w	r2, ip, r2
    2060:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2064:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2066:	bfd4      	ite	le
    2068:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    206c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    2070:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2072:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2076:	2a08      	cmp	r2, #8
    2078:	f888 c006 	strb.w	ip, [r8, #6]
    mask = mask>> 4;
    207c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    2080:	f000 81b2 	beq.w	23e8 <dualtimer_16_one_shot_demo+0x4e4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2084:	f1c2 0207 	rsb	r2, r2, #7
    2088:	ea00 0c0c 	and.w	ip, r0, ip
    208c:	0092      	lsls	r2, r2, #2
    208e:	fa2c f202 	lsr.w	r2, ip, r2
    2092:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2096:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2098:	bfd4      	ite	le
    209a:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    209e:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    20a2:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    20a4:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    20a8:	2a08      	cmp	r2, #8
    20aa:	f888 c007 	strb.w	ip, [r8, #7]
    mask = mask>> 4;
    20ae:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    20b2:	f000 819d 	beq.w	23f0 <dualtimer_16_one_shot_demo+0x4ec>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    20b6:	f1c2 0207 	rsb	r2, r2, #7
    20ba:	ea00 0c0c 	and.w	ip, r0, ip
    20be:	0092      	lsls	r2, r2, #2
    20c0:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    20c4:	2a09      	cmp	r2, #9
    20c6:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    20ca:	bfd4      	ite	le
    20cc:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    20d0:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    20d4:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    20d6:	2901      	cmp	r1, #1
    20d8:	f888 2008 	strb.w	r2, [r8, #8]
    mask = mask>> 4;
    20dc:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    20e0:	f000 818a 	beq.w	23f8 <dualtimer_16_one_shot_demo+0x4f4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    20e4:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    20e8:	4003      	ands	r3, r0
    20ea:	0090      	lsls	r0, r2, #2
    20ec:	40c3      	lsrs	r3, r0
    20ee:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    20f0:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    20f2:	bfd4      	ite	le
    20f4:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    20f8:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    20fc:	b2db      	uxtb	r3, r3
    20fe:	f888 3009 	strb.w	r3, [r8, #9]
  while (i!=8) {
    2102:	2900      	cmp	r1, #0
    2104:	f000 817a 	beq.w	23fc <dualtimer_16_one_shot_demo+0x4f8>
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2108:	2330      	movs	r3, #48	; 0x30
    210a:	f888 300a 	strb.w	r3, [r8, #10]
  while (i!=8) {
    210e:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    2110:	2200      	movs	r2, #0
    puts(text_buf);
    2112:	4638      	mov	r0, r7
  text[length]=(char) 0; /* null termination */
    2114:	f808 2003 	strb.w	r2, [r8, r3]
    puts(text_buf);
    2118:	f000 ff42 	bl	2fa0 <puts>
  while (i<10){
    211c:	f1bb 0b01 	subs.w	fp, fp, #1
    2120:	f47f af11 	bne.w	1f46 <dualtimer_16_one_shot_demo+0x42>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2124:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit one shot mode, prescale = 1:16, no interrupt");
    2126:	4814      	ldr	r0, [pc, #80]	; (2178 <dualtimer_16_one_shot_demo+0x274>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    212c:	60a3      	str	r3, [r4, #8]
  puts ("16-bit one shot mode, prescale = 1:16, no interrupt");
    212e:	f000 ff37 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2132:	2264      	movs	r2, #100	; 0x64
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2134:	23c5      	movs	r3, #197	; 0xc5
    2136:	f04f 090a 	mov.w	r9, #10
    text[length]  =' ';     /* space */
    213a:	f04f 0a20 	mov.w	sl, #32
    puts(text_buf);
    213e:	4f0f      	ldr	r7, [pc, #60]	; (217c <dualtimer_16_one_shot_demo+0x278>)
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2140:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2144:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2148:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    214a:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    214c:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    214e:	f888 a000 	strb.w	sl, [r8]
  while (((mask & value)==0) & (i!=7)) {
    2152:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    2156:	f888 a001 	strb.w	sl, [r8, #1]
  while (((mask & value)==0) & (i!=7)) {
    215a:	f040 8121 	bne.w	23a0 <dualtimer_16_one_shot_demo+0x49c>
  int          i=0;
    215e:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
    2160:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    2164:	e00e      	b.n	2184 <dualtimer_16_one_shot_demo+0x280>
    2166:	bf00      	nop
    2168:	20000094 	.word	0x20000094
    216c:	20000090 	.word	0x20000090
    2170:	2000008c 	.word	0x2000008c
    2174:	00003bb4 	.word	0x00003bb4
    2178:	00003be8 	.word	0x00003be8
    217c:	20000078 	.word	0x20000078
    mask = mask >> 4;
    2180:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    2182:	468c      	mov	ip, r1
    mask = mask >> 4;
    2184:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    2188:	ea10 0b03 	ands.w	fp, r0, r3
    218c:	bf0c      	ite	eq
    218e:	2201      	moveq	r2, #1
    2190:	2200      	movne	r2, #0
    i ++;
    2192:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    2196:	2907      	cmp	r1, #7
    2198:	bf0c      	ite	eq
    219a:	2200      	moveq	r2, #0
    219c:	f002 0201 	andne.w	r2, r2, #1
    21a0:	2a00      	cmp	r2, #0
    21a2:	d1ed      	bne.n	2180 <dualtimer_16_one_shot_demo+0x27c>
  while (i!=8) {
    21a4:	2908      	cmp	r1, #8
    21a6:	f000 80c0 	beq.w	232a <dualtimer_16_one_shot_demo+0x426>
    21aa:	f1c1 0207 	rsb	r2, r1, #7
    21ae:	f10c 0c02 	add.w	ip, ip, #2
    21b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    21b6:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    21b8:	fa2b fb02 	lsr.w	fp, fp, r2
    21bc:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    21c0:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    21c4:	bfd4      	ite	le
    21c6:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    21c8:	3257      	addgt	r2, #87	; 0x57
    21ca:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    21cc:	f1bc 0f08 	cmp.w	ip, #8
    21d0:	f888 2002 	strb.w	r2, [r8, #2]
    21d4:	f000 80f6 	beq.w	23c4 <dualtimer_16_one_shot_demo+0x4c0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    21d8:	f1cc 0c07 	rsb	ip, ip, #7
    21dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    21e0:	ea00 0e0e 	and.w	lr, r0, lr
    21e4:	fa2e fc0c 	lsr.w	ip, lr, ip
    21e8:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    21ec:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    21f0:	bfd4      	ite	le
    21f2:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    21f6:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    21fa:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    21fc:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2200:	2a08      	cmp	r2, #8
    2202:	f888 c003 	strb.w	ip, [r8, #3]
    mask = mask>> 4;
    2206:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    220a:	f000 80df 	beq.w	23cc <dualtimer_16_one_shot_demo+0x4c8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    220e:	f1c2 0207 	rsb	r2, r2, #7
    2212:	ea00 0c0c 	and.w	ip, r0, ip
    2216:	0092      	lsls	r2, r2, #2
    2218:	fa2c f202 	lsr.w	r2, ip, r2
    221c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2220:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2222:	bfd4      	ite	le
    2224:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2228:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    222c:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    222e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2232:	2a08      	cmp	r2, #8
    2234:	f888 c004 	strb.w	ip, [r8, #4]
    mask = mask>> 4;
    2238:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    223c:	f000 80ca 	beq.w	23d4 <dualtimer_16_one_shot_demo+0x4d0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2240:	f1c2 0207 	rsb	r2, r2, #7
    2244:	ea00 0c0c 	and.w	ip, r0, ip
    2248:	0092      	lsls	r2, r2, #2
    224a:	fa2c f202 	lsr.w	r2, ip, r2
    224e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2252:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2254:	bfd4      	ite	le
    2256:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    225a:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    225e:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2260:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2264:	2a08      	cmp	r2, #8
    2266:	f888 c005 	strb.w	ip, [r8, #5]
    mask = mask>> 4;
    226a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    226e:	f000 80b5 	beq.w	23dc <dualtimer_16_one_shot_demo+0x4d8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2272:	f1c2 0207 	rsb	r2, r2, #7
    2276:	ea00 0c0c 	and.w	ip, r0, ip
    227a:	0092      	lsls	r2, r2, #2
    227c:	fa2c f202 	lsr.w	r2, ip, r2
    2280:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2284:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2286:	bfd4      	ite	le
    2288:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    228c:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    2290:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2292:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2296:	2a08      	cmp	r2, #8
    2298:	f888 c006 	strb.w	ip, [r8, #6]
    mask = mask>> 4;
    229c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    22a0:	f000 80a0 	beq.w	23e4 <dualtimer_16_one_shot_demo+0x4e0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    22a4:	f1c2 0207 	rsb	r2, r2, #7
    22a8:	ea00 0c0c 	and.w	ip, r0, ip
    22ac:	0092      	lsls	r2, r2, #2
    22ae:	fa2c f202 	lsr.w	r2, ip, r2
    22b2:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    22b6:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    22b8:	bfd4      	ite	le
    22ba:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    22be:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    22c2:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    22c4:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    22c8:	2a08      	cmp	r2, #8
    22ca:	f888 c007 	strb.w	ip, [r8, #7]
    mask = mask>> 4;
    22ce:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    22d2:	f000 808b 	beq.w	23ec <dualtimer_16_one_shot_demo+0x4e8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    22d6:	f1c2 0207 	rsb	r2, r2, #7
    22da:	ea00 0c0c 	and.w	ip, r0, ip
    22de:	0092      	lsls	r2, r2, #2
    22e0:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    22e4:	2a09      	cmp	r2, #9
    22e6:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    22ea:	bfd4      	ite	le
    22ec:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    22f0:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    22f4:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    22f6:	2901      	cmp	r1, #1
    22f8:	f888 2008 	strb.w	r2, [r8, #8]
    mask = mask>> 4;
    22fc:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    2300:	d078      	beq.n	23f4 <dualtimer_16_one_shot_demo+0x4f0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2302:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    2306:	4003      	ands	r3, r0
    2308:	0090      	lsls	r0, r2, #2
    230a:	40c3      	lsrs	r3, r0
    230c:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    230e:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2310:	bfd4      	ite	le
    2312:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2316:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    231a:	b2db      	uxtb	r3, r3
    231c:	f888 3009 	strb.w	r3, [r8, #9]
  while (i!=8) {
    2320:	2900      	cmp	r1, #0
    2322:	f47f aef1 	bne.w	2108 <dualtimer_16_one_shot_demo+0x204>
    2326:	230a      	movs	r3, #10
    2328:	e000      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    232a:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    232c:	2200      	movs	r2, #0
    puts(text_buf);
    232e:	4638      	mov	r0, r7
  text[length]=(char) 0; /* null termination */
    2330:	f808 2003 	strb.w	r2, [r8, r3]
    puts(text_buf);
    2334:	f000 fe34 	bl	2fa0 <puts>
  while (i<10){
    2338:	f1b9 0901 	subs.w	r9, r9, #1
    233c:	f47f af06 	bne.w	214c <dualtimer_16_one_shot_demo+0x248>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2340:	68a3      	ldr	r3, [r4, #8]
  puts ("16-bit one shot mode, prescale = 1:1, with interrupt");
    2342:	482f      	ldr	r0, [pc, #188]	; (2400 <dualtimer_16_one_shot_demo+0x4fc>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2348:	60a3      	str	r3, [r4, #8]
  puts ("16-bit one shot mode, prescale = 1:1, with interrupt");
    234a:	f000 fe29 	bl	2fa0 <puts>
  dtimer_irq_expected = 1;
    234e:	2101      	movs	r1, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2350:	f44f 6080 	mov.w	r0, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2354:	f640 32b8 	movw	r2, #3000	; 0xbb8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2358:	23e1      	movs	r3, #225	; 0xe1
  dtimer_irq_expected = 1;
    235a:	4f2a      	ldr	r7, [pc, #168]	; (2404 <dualtimer_16_one_shot_demo+0x500>)
    235c:	6039      	str	r1, [r7, #0]
    235e:	492a      	ldr	r1, [pc, #168]	; (2408 <dualtimer_16_one_shot_demo+0x504>)
    2360:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2362:	f8c4 9008 	str.w	r9, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2366:	f8c4 900c 	str.w	r9, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    236a:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    236c:	60a3      	str	r3, [r4, #8]
    while ((dtimer1_irq_occurred + dtimer2_irq_occurred)==0);
    236e:	6833      	ldr	r3, [r6, #0]
    2370:	682a      	ldr	r2, [r5, #0]
    2372:	42d3      	cmn	r3, r2
    2374:	d0fb      	beq.n	236e <dualtimer_16_one_shot_demo+0x46a>
    dtimer1_irq_occurred = 0;
    2376:	2700      	movs	r7, #0
    puts ("  IRQ");
    2378:	4824      	ldr	r0, [pc, #144]	; (240c <dualtimer_16_one_shot_demo+0x508>)
    dtimer1_irq_occurred = 0;
    237a:	6037      	str	r7, [r6, #0]
    dtimer2_irq_occurred = 0;
    237c:	602f      	str	r7, [r5, #0]
    puts ("  IRQ");
    237e:	f000 fe0f 	bl	2fa0 <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2382:	f44f 6180 	mov.w	r1, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2386:	68a3      	ldr	r3, [r4, #8]
    2388:	4a1f      	ldr	r2, [pc, #124]	; (2408 <dualtimer_16_one_shot_demo+0x504>)
    238a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    238e:	60a3      	str	r3, [r4, #8]
  dtimer_irq_expected = 0;
    2390:	4b1c      	ldr	r3, [pc, #112]	; (2404 <dualtimer_16_one_shot_demo+0x500>)
    2392:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    2396:	601f      	str	r7, [r3, #0]
  dtimer1_irq_occurred = 0;
    2398:	6037      	str	r7, [r6, #0]
  dtimer2_irq_occurred = 0;
    239a:	602f      	str	r7, [r5, #0]
}
    239c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (((mask & value)==0) & (i!=7)) {
    23a0:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    23a4:	f04f 0c01 	mov.w	ip, #1
    23a8:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    23aa:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    23ae:	2100      	movs	r1, #0
    23b0:	e702      	b.n	21b8 <dualtimer_16_one_shot_demo+0x2b4>
  while (((mask & value)==0) & (i!=7)) {
    23b2:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    23b6:	f04f 0c01 	mov.w	ip, #1
    23ba:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    23bc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    23c0:	2100      	movs	r1, #0
    23c2:	e5e9      	b.n	1f98 <dualtimer_16_one_shot_demo+0x94>
  while (i!=8) {
    23c4:	2303      	movs	r3, #3
    23c6:	e7b1      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23c8:	2303      	movs	r3, #3
    23ca:	e6a1      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23cc:	2304      	movs	r3, #4
    23ce:	e7ad      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23d0:	2304      	movs	r3, #4
    23d2:	e69d      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23d4:	2305      	movs	r3, #5
    23d6:	e7a9      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23d8:	2305      	movs	r3, #5
    23da:	e699      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23dc:	2306      	movs	r3, #6
    23de:	e7a5      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23e0:	2306      	movs	r3, #6
    23e2:	e695      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23e4:	2307      	movs	r3, #7
    23e6:	e7a1      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23e8:	2307      	movs	r3, #7
    23ea:	e691      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23ec:	4613      	mov	r3, r2
    23ee:	e79d      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23f0:	4613      	mov	r3, r2
    23f2:	e68d      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23f4:	2309      	movs	r3, #9
    23f6:	e799      	b.n	232c <dualtimer_16_one_shot_demo+0x428>
    23f8:	2309      	movs	r3, #9
    23fa:	e689      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    23fc:	230a      	movs	r3, #10
    23fe:	e687      	b.n	2110 <dualtimer_16_one_shot_demo+0x20c>
    2400:	00003c1c 	.word	0x00003c1c
    2404:	20000094 	.word	0x20000094
    2408:	e000e100 	.word	0xe000e100
    240c:	00003914 	.word	0x00003914

00002410 <dualtimer_32_one_shot_demo>:
{
    2410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dtimer_irq_expected = 0;
    2414:	f04f 0a00 	mov.w	sl, #0
    2418:	4b96      	ldr	r3, [pc, #600]	; (2674 <dualtimer_32_one_shot_demo+0x264>)
  dtimer1_irq_occurred = 0;
    241a:	4e97      	ldr	r6, [pc, #604]	; (2678 <dualtimer_32_one_shot_demo+0x268>)
  dtimer2_irq_occurred = 0;
    241c:	4d97      	ldr	r5, [pc, #604]	; (267c <dualtimer_32_one_shot_demo+0x26c>)
{
    241e:	4604      	mov	r4, r0
    2420:	f8df 8264 	ldr.w	r8, [pc, #612]	; 2688 <dualtimer_32_one_shot_demo+0x278>
  puts ("32-bit one shot mode, prescale = 1:1, no interrupt");
    2424:	4896      	ldr	r0, [pc, #600]	; (2680 <dualtimer_32_one_shot_demo+0x270>)
  dtimer_irq_expected = 0;
    2426:	f8c3 a000 	str.w	sl, [r3]
  dtimer1_irq_occurred = 0;
    242a:	f8c6 a000 	str.w	sl, [r6]
  dtimer2_irq_occurred = 0;
    242e:	f8c5 a000 	str.w	sl, [r5]
  puts ("32-bit one shot mode, prescale = 1:1, no interrupt");
    2432:	f000 fdb5 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2436:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    243a:	23c3      	movs	r3, #195	; 0xc3
    puts(text_buf);
    243c:	4647      	mov	r7, r8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    243e:	f04f 0b0a 	mov.w	fp, #10
    text[length]  =' ';     /* space */
    2442:	f04f 0920 	mov.w	r9, #32
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2446:	f8c4 a008 	str.w	sl, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    244a:	f8c4 a00c 	str.w	sl, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    244e:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2450:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    2452:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    2454:	f888 9000 	strb.w	r9, [r8]
  while (((mask & value)==0) & (i!=7)) {
    2458:	f010 4a70 	ands.w	sl, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    245c:	f888 9001 	strb.w	r9, [r8, #1]
  while (((mask & value)==0) & (i!=7)) {
    2460:	f040 822d 	bne.w	28be <dualtimer_32_one_shot_demo+0x4ae>
  int          i=0;
    2464:	46d4      	mov	ip, sl
  unsigned int mask = 0xF0000000UL;
    2466:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    246a:	e001      	b.n	2470 <dualtimer_32_one_shot_demo+0x60>
    mask = mask >> 4;
    246c:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    246e:	468c      	mov	ip, r1
    mask = mask >> 4;
    2470:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    2474:	ea10 0a03 	ands.w	sl, r0, r3
    2478:	bf0c      	ite	eq
    247a:	2201      	moveq	r2, #1
    247c:	2200      	movne	r2, #0
    i ++;
    247e:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    2482:	2907      	cmp	r1, #7
    2484:	bf0c      	ite	eq
    2486:	2200      	moveq	r2, #0
    2488:	f002 0201 	andne.w	r2, r2, #1
    248c:	2a00      	cmp	r2, #0
    248e:	d1ed      	bne.n	246c <dualtimer_32_one_shot_demo+0x5c>
  while (i!=8) {
    2490:	2908      	cmp	r1, #8
    2492:	f000 80c2 	beq.w	261a <dualtimer_32_one_shot_demo+0x20a>
    2496:	f1c1 0207 	rsb	r2, r1, #7
    249a:	f10c 0c02 	add.w	ip, ip, #2
    249e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    24a2:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    24a4:	fa2a fa02 	lsr.w	sl, sl, r2
    24a8:	fa5f f28a 	uxtb.w	r2, sl
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    24ac:	f1ba 0f09 	cmp.w	sl, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    24b0:	bfd4      	ite	le
    24b2:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    24b4:	3257      	addgt	r2, #87	; 0x57
    24b6:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    24b8:	f1bc 0f08 	cmp.w	ip, #8
    24bc:	f888 2002 	strb.w	r2, [r8, #2]
    24c0:	f000 8208 	beq.w	28d4 <dualtimer_32_one_shot_demo+0x4c4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    24c4:	f1cc 0c07 	rsb	ip, ip, #7
    24c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    24cc:	ea00 0e0e 	and.w	lr, r0, lr
    24d0:	fa2e fc0c 	lsr.w	ip, lr, ip
    24d4:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    24d8:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    24dc:	bfd4      	ite	le
    24de:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    24e2:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    24e6:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    24e8:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    24ec:	2a08      	cmp	r2, #8
    24ee:	f888 c003 	strb.w	ip, [r8, #3]
    mask = mask>> 4;
    24f2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    24f6:	f000 81f1 	beq.w	28dc <dualtimer_32_one_shot_demo+0x4cc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    24fa:	f1c2 0207 	rsb	r2, r2, #7
    24fe:	ea00 0c0c 	and.w	ip, r0, ip
    2502:	0092      	lsls	r2, r2, #2
    2504:	fa2c f202 	lsr.w	r2, ip, r2
    2508:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    250c:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    250e:	bfd4      	ite	le
    2510:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2514:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    2518:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    251a:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    251e:	2a08      	cmp	r2, #8
    2520:	f888 c004 	strb.w	ip, [r8, #4]
    mask = mask>> 4;
    2524:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    2528:	f000 81dc 	beq.w	28e4 <dualtimer_32_one_shot_demo+0x4d4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    252c:	f1c2 0207 	rsb	r2, r2, #7
    2530:	ea00 0c0c 	and.w	ip, r0, ip
    2534:	0092      	lsls	r2, r2, #2
    2536:	fa2c f202 	lsr.w	r2, ip, r2
    253a:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    253e:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2540:	bfd4      	ite	le
    2542:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2546:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    254a:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    254c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2550:	2a08      	cmp	r2, #8
    2552:	f888 c005 	strb.w	ip, [r8, #5]
    mask = mask>> 4;
    2556:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    255a:	f000 81c7 	beq.w	28ec <dualtimer_32_one_shot_demo+0x4dc>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    255e:	f1c2 0207 	rsb	r2, r2, #7
    2562:	ea00 0c0c 	and.w	ip, r0, ip
    2566:	0092      	lsls	r2, r2, #2
    2568:	fa2c f202 	lsr.w	r2, ip, r2
    256c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2570:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2572:	bfd4      	ite	le
    2574:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2578:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    257c:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    257e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2582:	2a08      	cmp	r2, #8
    2584:	f888 c006 	strb.w	ip, [r8, #6]
    mask = mask>> 4;
    2588:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    258c:	f000 81b2 	beq.w	28f4 <dualtimer_32_one_shot_demo+0x4e4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2590:	f1c2 0207 	rsb	r2, r2, #7
    2594:	ea00 0c0c 	and.w	ip, r0, ip
    2598:	0092      	lsls	r2, r2, #2
    259a:	fa2c f202 	lsr.w	r2, ip, r2
    259e:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    25a2:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    25a4:	bfd4      	ite	le
    25a6:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    25aa:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    25ae:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    25b0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    25b4:	2a08      	cmp	r2, #8
    25b6:	f888 c007 	strb.w	ip, [r8, #7]
    mask = mask>> 4;
    25ba:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    25be:	f000 819d 	beq.w	28fc <dualtimer_32_one_shot_demo+0x4ec>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    25c2:	f1c2 0207 	rsb	r2, r2, #7
    25c6:	ea00 0c0c 	and.w	ip, r0, ip
    25ca:	0092      	lsls	r2, r2, #2
    25cc:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    25d0:	2a09      	cmp	r2, #9
    25d2:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    25d6:	bfd4      	ite	le
    25d8:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    25dc:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    25e0:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    25e2:	2901      	cmp	r1, #1
    25e4:	f888 2008 	strb.w	r2, [r8, #8]
    mask = mask>> 4;
    25e8:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    25ec:	f000 818a 	beq.w	2904 <dualtimer_32_one_shot_demo+0x4f4>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    25f0:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    25f4:	4003      	ands	r3, r0
    25f6:	0090      	lsls	r0, r2, #2
    25f8:	40c3      	lsrs	r3, r0
    25fa:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    25fc:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    25fe:	bfd4      	ite	le
    2600:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2604:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    2608:	b2db      	uxtb	r3, r3
    260a:	f888 3009 	strb.w	r3, [r8, #9]
  while (i!=8) {
    260e:	2900      	cmp	r1, #0
    2610:	f000 817a 	beq.w	2908 <dualtimer_32_one_shot_demo+0x4f8>
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2614:	2330      	movs	r3, #48	; 0x30
    2616:	f888 300a 	strb.w	r3, [r8, #10]
  while (i!=8) {
    261a:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    261c:	2200      	movs	r2, #0
    puts(text_buf);
    261e:	4638      	mov	r0, r7
  text[length]=(char) 0; /* null termination */
    2620:	f808 2003 	strb.w	r2, [r8, r3]
    puts(text_buf);
    2624:	f000 fcbc 	bl	2fa0 <puts>
  while (i<10){
    2628:	f1bb 0b01 	subs.w	fp, fp, #1
    262c:	f47f af11 	bne.w	2452 <dualtimer_32_one_shot_demo+0x42>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2630:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit one shot mode, prescale = 1:16, no interrupt");
    2632:	4814      	ldr	r0, [pc, #80]	; (2684 <dualtimer_32_one_shot_demo+0x274>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2638:	60a3      	str	r3, [r4, #8]
  puts ("32-bit one shot mode, prescale = 1:16, no interrupt");
    263a:	f000 fcb1 	bl	2fa0 <puts>
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    263e:	2264      	movs	r2, #100	; 0x64
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2640:	23c7      	movs	r3, #199	; 0xc7
    2642:	f04f 090a 	mov.w	r9, #10
    text[length]  =' ';     /* space */
    2646:	f04f 0a20 	mov.w	sl, #32
    puts(text_buf);
    264a:	4f0f      	ldr	r7, [pc, #60]	; (2688 <dualtimer_32_one_shot_demo+0x278>)
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    264c:	f8c4 b008 	str.w	fp, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2650:	f8c4 b00c 	str.w	fp, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2654:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2656:	60a3      	str	r3, [r4, #8]
    read_value = CM3DS_MPS2_DUALTIMERx->TimerValue;
    2658:	6860      	ldr	r0, [r4, #4]
    text[length]  =' ';     /* space */
    265a:	f888 a000 	strb.w	sl, [r8]
  while (((mask & value)==0) & (i!=7)) {
    265e:	f010 4b70 	ands.w	fp, r0, #4026531840	; 0xf0000000
    text[length]  =' ';     /* space */
    2662:	f888 a001 	strb.w	sl, [r8, #1]
  while (((mask & value)==0) & (i!=7)) {
    2666:	f040 8121 	bne.w	28ac <dualtimer_32_one_shot_demo+0x49c>
  int          i=0;
    266a:	46dc      	mov	ip, fp
  unsigned int mask = 0xF0000000UL;
    266c:	f04f 4e70 	mov.w	lr, #4026531840	; 0xf0000000
    2670:	e00e      	b.n	2690 <dualtimer_32_one_shot_demo+0x280>
    2672:	bf00      	nop
    2674:	20000094 	.word	0x20000094
    2678:	20000090 	.word	0x20000090
    267c:	2000008c 	.word	0x2000008c
    2680:	00003c54 	.word	0x00003c54
    2684:	00003c88 	.word	0x00003c88
    2688:	20000078 	.word	0x20000078
    mask = mask >> 4;
    268c:	469e      	mov	lr, r3
  while (((mask & value)==0) & (i!=7)) {
    268e:	468c      	mov	ip, r1
    mask = mask >> 4;
    2690:	ea4f 131e 	mov.w	r3, lr, lsr #4
  while (((mask & value)==0) & (i!=7)) {
    2694:	ea10 0b03 	ands.w	fp, r0, r3
    2698:	bf0c      	ite	eq
    269a:	2201      	moveq	r2, #1
    269c:	2200      	movne	r2, #0
    i ++;
    269e:	f10c 0101 	add.w	r1, ip, #1
  while (((mask & value)==0) & (i!=7)) {
    26a2:	2907      	cmp	r1, #7
    26a4:	bf0c      	ite	eq
    26a6:	2200      	moveq	r2, #0
    26a8:	f002 0201 	andne.w	r2, r2, #1
    26ac:	2a00      	cmp	r2, #0
    26ae:	d1ed      	bne.n	268c <dualtimer_32_one_shot_demo+0x27c>
  while (i!=8) {
    26b0:	2908      	cmp	r1, #8
    26b2:	f000 80c0 	beq.w	2836 <dualtimer_32_one_shot_demo+0x426>
    26b6:	f1c1 0207 	rsb	r2, r1, #7
    26ba:	f10c 0c02 	add.w	ip, ip, #2
    26be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    26c2:	0092      	lsls	r2, r2, #2
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    26c4:	fa2b fb02 	lsr.w	fp, fp, r2
    26c8:	fa5f f28b 	uxtb.w	r2, fp
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    26cc:	f1bb 0f09 	cmp.w	fp, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    26d0:	bfd4      	ite	le
    26d2:	3230      	addle	r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    26d4:	3257      	addgt	r2, #87	; 0x57
    26d6:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    26d8:	f1bc 0f08 	cmp.w	ip, #8
    26dc:	f888 2002 	strb.w	r2, [r8, #2]
    26e0:	f000 80f6 	beq.w	28d0 <dualtimer_32_one_shot_demo+0x4c0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    26e4:	f1cc 0c07 	rsb	ip, ip, #7
    26e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    26ec:	ea00 0e0e 	and.w	lr, r0, lr
    26f0:	fa2e fc0c 	lsr.w	ip, lr, ip
    26f4:	fa5f f28c 	uxtb.w	r2, ip
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    26f8:	f1bc 0f09 	cmp.w	ip, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    26fc:	bfd4      	ite	le
    26fe:	f102 0c30 	addle.w	ip, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2702:	f102 0c57 	addgt.w	ip, r2, #87	; 0x57
    i++;
    2706:	1c8a      	adds	r2, r1, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2708:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    270c:	2a08      	cmp	r2, #8
    270e:	f888 c003 	strb.w	ip, [r8, #3]
    mask = mask>> 4;
    2712:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  while (i!=8) {
    2716:	f000 80df 	beq.w	28d8 <dualtimer_32_one_shot_demo+0x4c8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    271a:	f1c2 0207 	rsb	r2, r2, #7
    271e:	ea00 0c0c 	and.w	ip, r0, ip
    2722:	0092      	lsls	r2, r2, #2
    2724:	fa2c f202 	lsr.w	r2, ip, r2
    2728:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    272c:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    272e:	bfd4      	ite	le
    2730:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2734:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    2738:	1cca      	adds	r2, r1, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    273a:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    273e:	2a08      	cmp	r2, #8
    2740:	f888 c004 	strb.w	ip, [r8, #4]
    mask = mask>> 4;
    2744:	ea4f 3c13 	mov.w	ip, r3, lsr #12
  while (i!=8) {
    2748:	f000 80ca 	beq.w	28e0 <dualtimer_32_one_shot_demo+0x4d0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    274c:	f1c2 0207 	rsb	r2, r2, #7
    2750:	ea00 0c0c 	and.w	ip, r0, ip
    2754:	0092      	lsls	r2, r2, #2
    2756:	fa2c f202 	lsr.w	r2, ip, r2
    275a:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    275e:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2760:	bfd4      	ite	le
    2762:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2766:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    276a:	1d0a      	adds	r2, r1, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    276c:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    2770:	2a08      	cmp	r2, #8
    2772:	f888 c005 	strb.w	ip, [r8, #5]
    mask = mask>> 4;
    2776:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  while (i!=8) {
    277a:	f000 80b5 	beq.w	28e8 <dualtimer_32_one_shot_demo+0x4d8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    277e:	f1c2 0207 	rsb	r2, r2, #7
    2782:	ea00 0c0c 	and.w	ip, r0, ip
    2786:	0092      	lsls	r2, r2, #2
    2788:	fa2c f202 	lsr.w	r2, ip, r2
    278c:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2790:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2792:	bfd4      	ite	le
    2794:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2798:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    279c:	1d4a      	adds	r2, r1, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    279e:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    27a2:	2a08      	cmp	r2, #8
    27a4:	f888 c006 	strb.w	ip, [r8, #6]
    mask = mask>> 4;
    27a8:	ea4f 5c13 	mov.w	ip, r3, lsr #20
  while (i!=8) {
    27ac:	f000 80a0 	beq.w	28f0 <dualtimer_32_one_shot_demo+0x4e0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    27b0:	f1c2 0207 	rsb	r2, r2, #7
    27b4:	ea00 0c0c 	and.w	ip, r0, ip
    27b8:	0092      	lsls	r2, r2, #2
    27ba:	fa2c f202 	lsr.w	r2, ip, r2
    27be:	fa5f fc82 	uxtb.w	ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    27c2:	2a09      	cmp	r2, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    27c4:	bfd4      	ite	le
    27c6:	f10c 0c30 	addle.w	ip, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    27ca:	f10c 0c57 	addgt.w	ip, ip, #87	; 0x57
    i++;
    27ce:	1d8a      	adds	r2, r1, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    27d0:	fa5f fc8c 	uxtb.w	ip, ip
  while (i!=8) {
    27d4:	2a08      	cmp	r2, #8
    27d6:	f888 c007 	strb.w	ip, [r8, #7]
    mask = mask>> 4;
    27da:	ea4f 6c13 	mov.w	ip, r3, lsr #24
  while (i!=8) {
    27de:	f000 808b 	beq.w	28f8 <dualtimer_32_one_shot_demo+0x4e8>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    27e2:	f1c2 0207 	rsb	r2, r2, #7
    27e6:	ea00 0c0c 	and.w	ip, r0, ip
    27ea:	0092      	lsls	r2, r2, #2
    27ec:	fa2c f202 	lsr.w	r2, ip, r2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    27f0:	2a09      	cmp	r2, #9
    27f2:	fa5f fc82 	uxtb.w	ip, r2
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    27f6:	bfd4      	ite	le
    27f8:	f10c 0230 	addle.w	r2, ip, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    27fc:	f10c 0257 	addgt.w	r2, ip, #87	; 0x57
    2800:	b2d2      	uxtb	r2, r2
  while (i!=8) {
    2802:	2901      	cmp	r1, #1
    2804:	f888 2008 	strb.w	r2, [r8, #8]
    mask = mask>> 4;
    2808:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    280c:	d078      	beq.n	2900 <dualtimer_32_one_shot_demo+0x4f0>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    280e:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
    2812:	4003      	ands	r3, r0
    2814:	0090      	lsls	r0, r2, #2
    2816:	40c3      	lsrs	r3, r0
    2818:	b2da      	uxtb	r2, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    281a:	2b09      	cmp	r3, #9
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    281c:	bfd4      	ite	le
    281e:	f102 0330 	addle.w	r3, r2, #48	; 0x30
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2822:	f102 0357 	addgt.w	r3, r2, #87	; 0x57
    2826:	b2db      	uxtb	r3, r3
    2828:	f888 3009 	strb.w	r3, [r8, #9]
  while (i!=8) {
    282c:	2900      	cmp	r1, #0
    282e:	f47f aef1 	bne.w	2614 <dualtimer_32_one_shot_demo+0x204>
    2832:	230a      	movs	r3, #10
    2834:	e000      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    2836:	2302      	movs	r3, #2
  text[length]=(char) 0; /* null termination */
    2838:	2200      	movs	r2, #0
    puts(text_buf);
    283a:	4638      	mov	r0, r7
  text[length]=(char) 0; /* null termination */
    283c:	f808 2003 	strb.w	r2, [r8, r3]
    puts(text_buf);
    2840:	f000 fbae 	bl	2fa0 <puts>
  while (i<10){
    2844:	f1b9 0901 	subs.w	r9, r9, #1
    2848:	f47f af06 	bne.w	2658 <dualtimer_32_one_shot_demo+0x248>
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    284c:	68a3      	ldr	r3, [r4, #8]
  puts ("32-bit one shot mode, prescale = 1:1, with interrupt");
    284e:	482f      	ldr	r0, [pc, #188]	; (290c <dualtimer_32_one_shot_demo+0x4fc>)
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2854:	60a3      	str	r3, [r4, #8]
  puts ("32-bit one shot mode, prescale = 1:1, with interrupt");
    2856:	f000 fba3 	bl	2fa0 <puts>
  dtimer_irq_expected = 1;
    285a:	2101      	movs	r1, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    285c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2860:	f640 32b8 	movw	r2, #3000	; 0xbb8
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2864:	23e3      	movs	r3, #227	; 0xe3
  dtimer_irq_expected = 1;
    2866:	4f2a      	ldr	r7, [pc, #168]	; (2910 <dualtimer_32_one_shot_demo+0x500>)
    2868:	6039      	str	r1, [r7, #0]
    286a:	492a      	ldr	r1, [pc, #168]	; (2914 <dualtimer_32_one_shot_demo+0x504>)
    286c:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    286e:	f8c4 9008 	str.w	r9, [r4, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2872:	f8c4 900c 	str.w	r9, [r4, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2876:	6022      	str	r2, [r4, #0]
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2878:	60a3      	str	r3, [r4, #8]
    while ((dtimer1_irq_occurred + dtimer2_irq_occurred)==0);
    287a:	6833      	ldr	r3, [r6, #0]
    287c:	682a      	ldr	r2, [r5, #0]
    287e:	42d3      	cmn	r3, r2
    2880:	d0fb      	beq.n	287a <dualtimer_32_one_shot_demo+0x46a>
    dtimer1_irq_occurred = 0;
    2882:	2700      	movs	r7, #0
    puts ("  IRQ");
    2884:	4824      	ldr	r0, [pc, #144]	; (2918 <dualtimer_32_one_shot_demo+0x508>)
    dtimer1_irq_occurred = 0;
    2886:	6037      	str	r7, [r6, #0]
    dtimer2_irq_occurred = 0;
    2888:	602f      	str	r7, [r5, #0]
    puts ("  IRQ");
    288a:	f000 fb89 	bl	2fa0 <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    288e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2892:	68a3      	ldr	r3, [r4, #8]
    2894:	4a1f      	ldr	r2, [pc, #124]	; (2914 <dualtimer_32_one_shot_demo+0x504>)
    2896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    289a:	60a3      	str	r3, [r4, #8]
  dtimer_irq_expected = 0;
    289c:	4b1c      	ldr	r3, [pc, #112]	; (2910 <dualtimer_32_one_shot_demo+0x500>)
    289e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    28a2:	601f      	str	r7, [r3, #0]
  dtimer1_irq_occurred = 0;
    28a4:	6037      	str	r7, [r6, #0]
  dtimer2_irq_occurred = 0;
    28a6:	602f      	str	r7, [r5, #0]
}
    28a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (((mask & value)==0) & (i!=7)) {
    28ac:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    28b0:	f04f 0c01 	mov.w	ip, #1
    28b4:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    28b6:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    28ba:	2100      	movs	r1, #0
    28bc:	e702      	b.n	26c4 <dualtimer_32_one_shot_demo+0x2b4>
  while (((mask & value)==0) & (i!=7)) {
    28be:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
    28c2:	f04f 0c01 	mov.w	ip, #1
    28c6:	221c      	movs	r2, #28
  unsigned int mask = 0xF0000000UL;
    28c8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    28cc:	2100      	movs	r1, #0
    28ce:	e5e9      	b.n	24a4 <dualtimer_32_one_shot_demo+0x94>
  while (i!=8) {
    28d0:	2303      	movs	r3, #3
    28d2:	e7b1      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    28d4:	2303      	movs	r3, #3
    28d6:	e6a1      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    28d8:	2304      	movs	r3, #4
    28da:	e7ad      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    28dc:	2304      	movs	r3, #4
    28de:	e69d      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    28e0:	2305      	movs	r3, #5
    28e2:	e7a9      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    28e4:	2305      	movs	r3, #5
    28e6:	e699      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    28e8:	2306      	movs	r3, #6
    28ea:	e7a5      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    28ec:	2306      	movs	r3, #6
    28ee:	e695      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    28f0:	2307      	movs	r3, #7
    28f2:	e7a1      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    28f4:	2307      	movs	r3, #7
    28f6:	e691      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    28f8:	4613      	mov	r3, r2
    28fa:	e79d      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    28fc:	4613      	mov	r3, r2
    28fe:	e68d      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    2900:	2309      	movs	r3, #9
    2902:	e799      	b.n	2838 <dualtimer_32_one_shot_demo+0x428>
    2904:	2309      	movs	r3, #9
    2906:	e689      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    2908:	230a      	movs	r3, #10
    290a:	e687      	b.n	261c <dualtimer_32_one_shot_demo+0x20c>
    290c:	00003cbc 	.word	0x00003cbc
    2910:	20000094 	.word	0x20000094
    2914:	e000e100 	.word	0xe000e100
    2918:	00003914 	.word	0x00003914

0000291c <DUALTIMER_HANDLER>:
{
    291c:	b508      	push	{r3, lr}
if (dtimer_integration_test==0) { /* Normal operation mode */
    291e:	4b1e      	ldr	r3, [pc, #120]	; (2998 <DUALTIMER_HANDLER+0x7c>)
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	b9bb      	cbnz	r3, 2954 <DUALTIMER_HANDLER+0x38>
  if (CM3DS_MPS2_DUALTIMER1->TimerMIS != 0){
    2924:	4a1d      	ldr	r2, [pc, #116]	; (299c <DUALTIMER_HANDLER+0x80>)
    2926:	6951      	ldr	r1, [r2, #20]
    2928:	b139      	cbz	r1, 293a <DUALTIMER_HANDLER+0x1e>
    dtimer1_irq_occurred++;
    292a:	491d      	ldr	r1, [pc, #116]	; (29a0 <DUALTIMER_HANDLER+0x84>)
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    292c:	60d3      	str	r3, [r2, #12]
    dtimer1_irq_occurred++;
    292e:	680b      	ldr	r3, [r1, #0]
    if (dtimer_irq_expected==0) {
    2930:	4a1c      	ldr	r2, [pc, #112]	; (29a4 <DUALTIMER_HANDLER+0x88>)
    dtimer1_irq_occurred++;
    2932:	3301      	adds	r3, #1
    2934:	600b      	str	r3, [r1, #0]
    if (dtimer_irq_expected==0) {
    2936:	6813      	ldr	r3, [r2, #0]
    2938:	b323      	cbz	r3, 2984 <DUALTIMER_HANDLER+0x68>
  if (CM3DS_MPS2_DUALTIMER2->TimerMIS != 0){
    293a:	4b1b      	ldr	r3, [pc, #108]	; (29a8 <DUALTIMER_HANDLER+0x8c>)
    293c:	695a      	ldr	r2, [r3, #20]
    293e:	b142      	cbz	r2, 2952 <DUALTIMER_HANDLER+0x36>
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2940:	2100      	movs	r1, #0
    dtimer2_irq_occurred++;
    2942:	4a1a      	ldr	r2, [pc, #104]	; (29ac <DUALTIMER_HANDLER+0x90>)
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2944:	60d9      	str	r1, [r3, #12]
    dtimer2_irq_occurred++;
    2946:	6813      	ldr	r3, [r2, #0]
    if (dtimer_irq_expected==0) {
    2948:	4916      	ldr	r1, [pc, #88]	; (29a4 <DUALTIMER_HANDLER+0x88>)
    dtimer2_irq_occurred++;
    294a:	3301      	adds	r3, #1
    294c:	6013      	str	r3, [r2, #0]
    if (dtimer_irq_expected==0) {
    294e:	680b      	ldr	r3, [r1, #0]
    2950:	b18b      	cbz	r3, 2976 <DUALTIMER_HANDLER+0x5a>
}
    2952:	bd08      	pop	{r3, pc}
  CM3DS_MPS2_DUALTIMER->ITOP=0;
    2954:	2200      	movs	r2, #0
    2956:	4b11      	ldr	r3, [pc, #68]	; (299c <DUALTIMER_HANDLER+0x80>)
  dtimer1_irq_occurred++;
    2958:	4911      	ldr	r1, [pc, #68]	; (29a0 <DUALTIMER_HANDLER+0x84>)
  CM3DS_MPS2_DUALTIMER->ITOP=0;
    295a:	f8c3 2f04 	str.w	r2, [r3, #3844]	; 0xf04
  dtimer1_irq_occurred++;
    295e:	680b      	ldr	r3, [r1, #0]
  dtimer2_irq_occurred++;
    2960:	4a12      	ldr	r2, [pc, #72]	; (29ac <DUALTIMER_HANDLER+0x90>)
  dtimer1_irq_occurred++;
    2962:	3301      	adds	r3, #1
    2964:	600b      	str	r3, [r1, #0]
  dtimer2_irq_occurred++;
    2966:	6813      	ldr	r3, [r2, #0]
  puts ("  [Dualtimer interrupt triggered]");
    2968:	4811      	ldr	r0, [pc, #68]	; (29b0 <DUALTIMER_HANDLER+0x94>)
  dtimer2_irq_occurred++;
    296a:	3301      	adds	r3, #1
    296c:	6013      	str	r3, [r2, #0]
}
    296e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  puts ("  [Dualtimer interrupt triggered]");
    2972:	f000 bb15 	b.w	2fa0 <puts>
      puts("ERROR: Unexpected dual timer 2 IRQ");
    2976:	480f      	ldr	r0, [pc, #60]	; (29b4 <DUALTIMER_HANDLER+0x98>)
    2978:	f000 fb12 	bl	2fa0 <puts>
}
    297c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      UartEndSimulation(); /* Simulation stops in UartEndSimulation */
    2980:	f000 ba7e 	b.w	2e80 <UartEndSimulation>
      puts("ERROR: Unexpected dual timer 1 IRQ");
    2984:	480c      	ldr	r0, [pc, #48]	; (29b8 <DUALTIMER_HANDLER+0x9c>)
    2986:	f000 fb0b 	bl	2fa0 <puts>
      UartEndSimulation(); /* Simulation stops in UartEndSimulation */
    298a:	f000 fa79 	bl	2e80 <UartEndSimulation>
  if (CM3DS_MPS2_DUALTIMER2->TimerMIS != 0){
    298e:	4b06      	ldr	r3, [pc, #24]	; (29a8 <DUALTIMER_HANDLER+0x8c>)
    2990:	695a      	ldr	r2, [r3, #20]
    2992:	2a00      	cmp	r2, #0
    2994:	d1d4      	bne.n	2940 <DUALTIMER_HANDLER+0x24>
    2996:	e7dc      	b.n	2952 <DUALTIMER_HANDLER+0x36>
    2998:	20000068 	.word	0x20000068
    299c:	40002000 	.word	0x40002000
    29a0:	20000090 	.word	0x20000090
    29a4:	20000094 	.word	0x20000094
    29a8:	40002020 	.word	0x40002020
    29ac:	2000008c 	.word	0x2000008c
    29b0:	00003d3c 	.word	0x00003d3c
    29b4:	00003d18 	.word	0x00003d18
    29b8:	00003cf4 	.word	0x00003cf4

000029bc <dualtimer_setup_freerunning16>:
{
    29bc:	b410      	push	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    29be:	2400      	movs	r4, #0
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    29c0:	015b      	lsls	r3, r3, #5
    29c2:	f003 0320 	and.w	r3, r3, #32
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    29c6:	0092      	lsls	r2, r2, #2
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    29c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    29cc:	f002 020c 	and.w	r2, r2, #12
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    29d0:	4313      	orrs	r3, r2
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    29d2:	6084      	str	r4, [r0, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    29d4:	60c4      	str	r4, [r0, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    29d6:	6001      	str	r1, [r0, #0]
}
    29d8:	bc10      	pop	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    29da:	6083      	str	r3, [r0, #8]
}
    29dc:	4770      	bx	lr
    29de:	bf00      	nop

000029e0 <dualtimer_setup_freerunning32>:
{
    29e0:	b410      	push	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    29e2:	2400      	movs	r4, #0
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    29e4:	015b      	lsls	r3, r3, #5
    29e6:	f003 0320 	and.w	r3, r3, #32
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    29ea:	0092      	lsls	r2, r2, #2
            CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk |
    29ec:	f043 0382 	orr.w	r3, r3, #130	; 0x82
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    29f0:	f002 020c 	and.w	r2, r2, #12
            CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk |
    29f4:	4313      	orrs	r3, r2
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    29f6:	6084      	str	r4, [r0, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    29f8:	60c4      	str	r4, [r0, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    29fa:	6001      	str	r1, [r0, #0]
}
    29fc:	bc10      	pop	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    29fe:	6083      	str	r3, [r0, #8]
}
    2a00:	4770      	bx	lr
    2a02:	bf00      	nop

00002a04 <dualtimer_setup_periodic16>:
{
    2a04:	b410      	push	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a06:	2400      	movs	r4, #0
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    2a08:	015b      	lsls	r3, r3, #5
    2a0a:	f003 0320 	and.w	r3, r3, #32
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a0e:	0092      	lsls	r2, r2, #2
            CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk |
    2a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a14:	f002 020c 	and.w	r2, r2, #12
            CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk |
    2a18:	4313      	orrs	r3, r2
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a1a:	6084      	str	r4, [r0, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2a1c:	60c4      	str	r4, [r0, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2a1e:	6001      	str	r1, [r0, #0]
}
    2a20:	bc10      	pop	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2a22:	6083      	str	r3, [r0, #8]
}
    2a24:	4770      	bx	lr
    2a26:	bf00      	nop

00002a28 <dualtimer_setup_periodic32>:
{
    2a28:	b410      	push	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a2a:	2400      	movs	r4, #0
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    2a2c:	015b      	lsls	r3, r3, #5
    2a2e:	f003 0320 	and.w	r3, r3, #32
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a32:	0092      	lsls	r2, r2, #2
            CM3DS_MPS2_DUALTIMER_CTRL_MODE_Msk|
    2a34:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a38:	f002 020c 	and.w	r2, r2, #12
            CM3DS_MPS2_DUALTIMER_CTRL_MODE_Msk|
    2a3c:	4313      	orrs	r3, r2
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a3e:	6084      	str	r4, [r0, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2a40:	60c4      	str	r4, [r0, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2a42:	6001      	str	r1, [r0, #0]
}
    2a44:	bc10      	pop	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2a46:	6083      	str	r3, [r0, #8]
}
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop

00002a4c <dualtimer_setup_oneshot16>:
{
    2a4c:	b410      	push	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a4e:	2400      	movs	r4, #0
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    2a50:	015b      	lsls	r3, r3, #5
    2a52:	f003 0320 	and.w	r3, r3, #32
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a56:	0092      	lsls	r2, r2, #2
            CM3DS_MPS2_DUALTIMER_CTRL_MODE_Msk |
    2a58:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a5c:	f002 020c 	and.w	r2, r2, #12
            CM3DS_MPS2_DUALTIMER_CTRL_MODE_Msk |
    2a60:	4313      	orrs	r3, r2
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a62:	6084      	str	r4, [r0, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2a64:	60c4      	str	r4, [r0, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2a66:	6001      	str	r1, [r0, #0]
}
    2a68:	bc10      	pop	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2a6a:	6083      	str	r3, [r0, #8]
}
    2a6c:	4770      	bx	lr
    2a6e:	bf00      	nop

00002a70 <dualtimer_setup_oneshot32>:
{
    2a70:	b410      	push	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a72:	2400      	movs	r4, #0
             (interrupt & 0x1) << CM3DS_MPS2_DUALTIMER_CTRL_INTEN_Pos |
    2a74:	015b      	lsls	r3, r3, #5
    2a76:	f003 0320 	and.w	r3, r3, #32
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a7a:	0092      	lsls	r2, r2, #2
            CM3DS_MPS2_DUALTIMER_CTRL_ONESHOOT_Msk|
    2a7c:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
  ctrl_val = (prescale  & 0x3) << CM3DS_MPS2_DUALTIMER_CTRL_PRESCALE_Pos |
    2a80:	f002 020c 	and.w	r2, r2, #12
            CM3DS_MPS2_DUALTIMER_CTRL_ONESHOOT_Msk|
    2a84:	4313      	orrs	r3, r2
  CM3DS_MPS2_DUALTIMERx->TimerControl = 0; /* Disable during programming */
    2a86:	6084      	str	r4, [r0, #8]
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2a88:	60c4      	str	r4, [r0, #12]
  CM3DS_MPS2_DUALTIMERx->TimerLoad    = cycle;
    2a8a:	6001      	str	r1, [r0, #0]
}
    2a8c:	bc10      	pop	{r4}
  CM3DS_MPS2_DUALTIMERx->TimerControl = ctrl_val;
    2a8e:	6083      	str	r3, [r0, #8]
}
    2a90:	4770      	bx	lr
    2a92:	bf00      	nop

00002a94 <dualtimer_integration_test>:
{
    2a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  puts ("Integration test demo");
    2a98:	483c      	ldr	r0, [pc, #240]	; (2b8c <dualtimer_integration_test+0xf8>)
    2a9a:	f000 fa81 	bl	2fa0 <puts>
  dtimer_integration_test = 1;
    2a9e:	2401      	movs	r4, #1
  dtimer_irq_expected = 0;
    2aa0:	2000      	movs	r0, #0
  CM3DS_MPS2_DUALTIMER->ITOP=0; // Ensure interrupts are not asserted before start
    2aa2:	4b3b      	ldr	r3, [pc, #236]	; (2b90 <dualtimer_integration_test+0xfc>)
  dtimer_integration_test = 1;
    2aa4:	4d3b      	ldr	r5, [pc, #236]	; (2b94 <dualtimer_integration_test+0x100>)
  dtimer_irq_expected = 0;
    2aa6:	4a3c      	ldr	r2, [pc, #240]	; (2b98 <dualtimer_integration_test+0x104>)
  dtimer1_irq_occurred = 0;
    2aa8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 2bbc <dualtimer_integration_test+0x128>
  dtimer2_irq_occurred = 0;
    2aac:	4f3b      	ldr	r7, [pc, #236]	; (2b9c <dualtimer_integration_test+0x108>)
  dtimer_integration_test = 1;
    2aae:	602c      	str	r4, [r5, #0]
  dtimer_irq_expected = 0;
    2ab0:	6010      	str	r0, [r2, #0]
  dtimer1_irq_occurred = 0;
    2ab2:	f8c8 0000 	str.w	r0, [r8]
  dtimer2_irq_occurred = 0;
    2ab6:	6038      	str	r0, [r7, #0]
  CM3DS_MPS2_DUALTIMER->ITOP=0; // Ensure interrupts are not asserted before start
    2ab8:	f8c3 0f04 	str.w	r0, [r3, #3844]	; 0xf04
  CM3DS_MPS2_DUALTIMER->ITCR=1; // Enable integration test mode
    2abc:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
  if (CM3DS_MPS2_DUALTIMER->ITCR == 0) {
    2ac0:	f8d3 6f00 	ldr.w	r6, [r3, #3840]	; 0xf00
    2ac4:	b37e      	cbz	r6, 2b26 <dualtimer_integration_test+0x92>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2ac6:	f44f 6680 	mov.w	r6, #1024	; 0x400
    2aca:	4935      	ldr	r1, [pc, #212]	; (2ba0 <dualtimer_integration_test+0x10c>)
     dtimer_integration_test = 1;
    2acc:	602c      	str	r4, [r5, #0]
     dtimer_irq_expected = 1;
    2ace:	6014      	str	r4, [r2, #0]
    2ad0:	600e      	str	r6, [r1, #0]
     CM3DS_MPS2_DUALTIMER->ITOP=1; // Set timer 1 interrupt
    2ad2:	f8c3 4f04 	str.w	r4, [r3, #3844]	; 0xf04
     CM3DS_MPS2_DUALTIMER->ITOP=0; // Deassert timer 1 interrupt
    2ad6:	f8c3 0f04 	str.w	r0, [r3, #3844]	; 0xf04
     if (dtimer1_irq_occurred == 0) {
    2ada:	f8d8 3000 	ldr.w	r3, [r8]
    2ade:	b1f3      	cbz	r3, 2b1e <dualtimer_integration_test+0x8a>
  int result = 0;
    2ae0:	4604      	mov	r4, r0
     dtimer1_irq_occurred = 0; /* clear variables */
    2ae2:	2300      	movs	r3, #0
     CM3DS_MPS2_DUALTIMER->ITOP=2; // Set timer 2 interrupt
    2ae4:	2202      	movs	r2, #2
    2ae6:	4e2a      	ldr	r6, [pc, #168]	; (2b90 <dualtimer_integration_test+0xfc>)
     dtimer1_irq_occurred = 0; /* clear variables */
    2ae8:	f8c8 3000 	str.w	r3, [r8]
     dtimer2_irq_occurred = 0;
    2aec:	603b      	str	r3, [r7, #0]
     CM3DS_MPS2_DUALTIMER->ITOP=2; // Set timer 2 interrupt
    2aee:	f8c6 2f04 	str.w	r2, [r6, #3844]	; 0xf04
     CM3DS_MPS2_DUALTIMER->ITOP=0; // Deassert timer 2 interrupt
    2af2:	f8c6 3f04 	str.w	r3, [r6, #3844]	; 0xf04
     if (dtimer2_irq_occurred == 0) {
    2af6:	683f      	ldr	r7, [r7, #0]
    2af8:	b32f      	cbz	r7, 2b46 <dualtimer_integration_test+0xb2>
     CM3DS_MPS2_DUALTIMER->ITCR = 0;  // Disable integration test mode
    2afa:	f8c6 3f00 	str.w	r3, [r6, #3840]	; 0xf00
     if (CM3DS_MPS2_DUALTIMER->ITCR != 0) {
    2afe:	f8d6 3f00 	ldr.w	r3, [r6, #3840]	; 0xf00
    2b02:	bb43      	cbnz	r3, 2b56 <dualtimer_integration_test+0xc2>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2b08:	4a25      	ldr	r2, [pc, #148]	; (2ba0 <dualtimer_integration_test+0x10c>)
  dtimer_integration_test = 0;
    2b0a:	602b      	str	r3, [r5, #0]
    2b0c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  if (result != 0) {
    2b10:	b994      	cbnz	r4, 2b38 <dualtimer_integration_test+0xa4>
    puts ("Integration test completed successfully\n");
    2b12:	4824      	ldr	r0, [pc, #144]	; (2ba4 <dualtimer_integration_test+0x110>)
    2b14:	f000 fa44 	bl	2fa0 <puts>
}
    2b18:	4620      	mov	r0, r4
    2b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       puts ("  - Integration Test operation 1 failed");
    2b1e:	4822      	ldr	r0, [pc, #136]	; (2ba8 <dualtimer_integration_test+0x114>)
    2b20:	f000 fa3e 	bl	2fa0 <puts>
    2b24:	e7dd      	b.n	2ae2 <dualtimer_integration_test+0x4e>
     puts ("  - Integration Test Control Register read error");
    2b26:	4821      	ldr	r0, [pc, #132]	; (2bac <dualtimer_integration_test+0x118>)
    2b28:	f000 fa3a 	bl	2fa0 <puts>
    2b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2b30:	4b1b      	ldr	r3, [pc, #108]	; (2ba0 <dualtimer_integration_test+0x10c>)
  dtimer_integration_test = 0;
    2b32:	602e      	str	r6, [r5, #0]
    2b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    puts ("ERROR: Integration test failed\n");
    2b38:	481d      	ldr	r0, [pc, #116]	; (2bb0 <dualtimer_integration_test+0x11c>)
    2b3a:	f000 fa31 	bl	2fa0 <puts>
    return (1);
    2b3e:	2401      	movs	r4, #1
}
    2b40:	4620      	mov	r0, r4
    2b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       puts ("  - Integration Test operation 2 failed");
    2b46:	481b      	ldr	r0, [pc, #108]	; (2bb4 <dualtimer_integration_test+0x120>)
    2b48:	f000 fa2a 	bl	2fa0 <puts>
     CM3DS_MPS2_DUALTIMER->ITCR = 0;  // Disable integration test mode
    2b4c:	f8c6 7f00 	str.w	r7, [r6, #3840]	; 0xf00
     if (CM3DS_MPS2_DUALTIMER->ITCR != 0) {
    2b50:	f8d6 3f00 	ldr.w	r3, [r6, #3840]	; 0xf00
    2b54:	b173      	cbz	r3, 2b74 <dualtimer_integration_test+0xe0>
      puts ("  - Integration Control clear error");
    2b56:	4818      	ldr	r0, [pc, #96]	; (2bb8 <dualtimer_integration_test+0x124>)
    2b58:	f000 fa22 	bl	2fa0 <puts>
  dtimer_integration_test = 0;
    2b5c:	2100      	movs	r1, #0
    2b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2b62:	4b0f      	ldr	r3, [pc, #60]	; (2ba0 <dualtimer_integration_test+0x10c>)
    2b64:	6029      	str	r1, [r5, #0]
    puts ("ERROR: Integration test failed\n");
    2b66:	4812      	ldr	r0, [pc, #72]	; (2bb0 <dualtimer_integration_test+0x11c>)
    2b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2b6c:	f000 fa18 	bl	2fa0 <puts>
    return (1);
    2b70:	2401      	movs	r4, #1
    2b72:	e7e5      	b.n	2b40 <dualtimer_integration_test+0xac>
    2b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2b78:	4a09      	ldr	r2, [pc, #36]	; (2ba0 <dualtimer_integration_test+0x10c>)
  dtimer_integration_test = 0;
    2b7a:	602b      	str	r3, [r5, #0]
    puts ("ERROR: Integration test failed\n");
    2b7c:	480c      	ldr	r0, [pc, #48]	; (2bb0 <dualtimer_integration_test+0x11c>)
    2b7e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    2b82:	f000 fa0d 	bl	2fa0 <puts>
    return (1);
    2b86:	2401      	movs	r4, #1
    2b88:	e7da      	b.n	2b40 <dualtimer_integration_test+0xac>
    2b8a:	bf00      	nop
    2b8c:	00003d60 	.word	0x00003d60
    2b90:	40002000 	.word	0x40002000
    2b94:	20000068 	.word	0x20000068
    2b98:	20000094 	.word	0x20000094
    2b9c:	2000008c 	.word	0x2000008c
    2ba0:	e000e100 	.word	0xe000e100
    2ba4:	00003e40 	.word	0x00003e40
    2ba8:	00003dac 	.word	0x00003dac
    2bac:	00003d78 	.word	0x00003d78
    2bb0:	00003e20 	.word	0x00003e20
    2bb4:	00003dd4 	.word	0x00003dd4
    2bb8:	00003dfc 	.word	0x00003dfc
    2bbc:	20000090 	.word	0x20000090

00002bc0 <dualtimer_start>:
  CM3DS_MPS2_DUALTIMERx->TimerControl |= CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2bc0:	6883      	ldr	r3, [r0, #8]
    2bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2bc6:	6083      	str	r3, [r0, #8]
}
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop

00002bcc <dualtimer_stop>:
  CM3DS_MPS2_DUALTIMERx->TimerControl &= ~CM3DS_MPS2_DUALTIMER_CTRL_EN_Msk;
    2bcc:	6883      	ldr	r3, [r0, #8]
    2bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2bd2:	6083      	str	r3, [r0, #8]
}
    2bd4:	4770      	bx	lr
    2bd6:	bf00      	nop

00002bd8 <dualtimer_irq_clear>:
  CM3DS_MPS2_DUALTIMERx->TimerIntClr = 0;
    2bd8:	2300      	movs	r3, #0
    2bda:	60c3      	str	r3, [r0, #12]
}
    2bdc:	4770      	bx	lr
    2bde:	bf00      	nop

00002be0 <int_to_hex>:
    text[length]  =' ';     /* space */
    2be0:	2320      	movs	r3, #32
  while (((mask & value)==0) & (i!=7)) {
    2be2:	f010 4270 	ands.w	r2, r0, #4026531840	; 0xf0000000
{
    2be6:	b430      	push	{r4, r5}
    text[length]  =' ';     /* space */
    2be8:	700b      	strb	r3, [r1, #0]
    2bea:	704b      	strb	r3, [r1, #1]
  while (((mask & value)==0) & (i!=7)) {
    2bec:	f040 809e 	bne.w	2d2c <int_to_hex+0x14c>
  unsigned int mask = 0xF0000000UL;
    2bf0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    2bf4:	e001      	b.n	2bfa <int_to_hex+0x1a>
  while (((mask & value)==0) & (i!=7)) {
    2bf6:	2a07      	cmp	r2, #7
    2bf8:	d005      	beq.n	2c06 <int_to_hex+0x26>
    mask = mask >> 4;
    2bfa:	091b      	lsrs	r3, r3, #4
  while (((mask & value)==0) & (i!=7)) {
    2bfc:	ea10 0403 	ands.w	r4, r0, r3
    i ++;
    2c00:	f102 0201 	add.w	r2, r2, #1
  while (((mask & value)==0) & (i!=7)) {
    2c04:	d0f7      	beq.n	2bf6 <int_to_hex+0x16>
  while (i!=8) {
    2c06:	2a08      	cmp	r2, #8
    2c08:	f000 808b 	beq.w	2d22 <int_to_hex+0x142>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2c0c:	f1c2 0507 	rsb	r5, r2, #7
    2c10:	00ad      	lsls	r5, r5, #2
    2c12:	40ec      	lsrs	r4, r5
    2c14:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c16:	2c09      	cmp	r4, #9
    i++;
    2c18:	f102 0401 	add.w	r4, r2, #1
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c1c:	bfcc      	ite	gt
    2c1e:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c20:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2c22:	2c08      	cmp	r4, #8
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c24:	708d      	strb	r5, [r1, #2]
    mask = mask>> 4;
    2c26:	ea4f 1513 	mov.w	r5, r3, lsr #4
  while (i!=8) {
    2c2a:	d074      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2c2c:	f1c4 0407 	rsb	r4, r4, #7
    2c30:	4005      	ands	r5, r0
    2c32:	00a4      	lsls	r4, r4, #2
    2c34:	fa25 f404 	lsr.w	r4, r5, r4
    2c38:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c3a:	2c09      	cmp	r4, #9
    i++;
    2c3c:	f102 0402 	add.w	r4, r2, #2
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c40:	bfcc      	ite	gt
    2c42:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c44:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2c46:	2c08      	cmp	r4, #8
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c48:	70cd      	strb	r5, [r1, #3]
    mask = mask>> 4;
    2c4a:	ea4f 2513 	mov.w	r5, r3, lsr #8
  while (i!=8) {
    2c4e:	d062      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2c50:	f1c4 0407 	rsb	r4, r4, #7
    2c54:	4005      	ands	r5, r0
    2c56:	00a4      	lsls	r4, r4, #2
    2c58:	fa25 f404 	lsr.w	r4, r5, r4
    2c5c:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c5e:	2c09      	cmp	r4, #9
    i++;
    2c60:	f102 0403 	add.w	r4, r2, #3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c64:	bfcc      	ite	gt
    2c66:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c68:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2c6a:	2c08      	cmp	r4, #8
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c6c:	710d      	strb	r5, [r1, #4]
    mask = mask>> 4;
    2c6e:	ea4f 3513 	mov.w	r5, r3, lsr #12
  while (i!=8) {
    2c72:	d050      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2c74:	f1c4 0407 	rsb	r4, r4, #7
    2c78:	4005      	ands	r5, r0
    2c7a:	00a4      	lsls	r4, r4, #2
    2c7c:	fa25 f404 	lsr.w	r4, r5, r4
    2c80:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c82:	2c09      	cmp	r4, #9
    i++;
    2c84:	f102 0404 	add.w	r4, r2, #4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2c88:	bfcc      	ite	gt
    2c8a:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c8c:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2c8e:	2c08      	cmp	r4, #8
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2c90:	714d      	strb	r5, [r1, #5]
    mask = mask>> 4;
    2c92:	ea4f 4513 	mov.w	r5, r3, lsr #16
  while (i!=8) {
    2c96:	d03e      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2c98:	f1c4 0407 	rsb	r4, r4, #7
    2c9c:	4005      	ands	r5, r0
    2c9e:	00a4      	lsls	r4, r4, #2
    2ca0:	fa25 f404 	lsr.w	r4, r5, r4
    2ca4:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2ca6:	2c09      	cmp	r4, #9
    i++;
    2ca8:	f102 0405 	add.w	r4, r2, #5
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2cac:	bfcc      	ite	gt
    2cae:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2cb0:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2cb2:	2c08      	cmp	r4, #8
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2cb4:	718d      	strb	r5, [r1, #6]
    mask = mask>> 4;
    2cb6:	ea4f 5513 	mov.w	r5, r3, lsr #20
  while (i!=8) {
    2cba:	d02c      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2cbc:	f1c4 0407 	rsb	r4, r4, #7
    2cc0:	4005      	ands	r5, r0
    2cc2:	00a4      	lsls	r4, r4, #2
    2cc4:	fa25 f404 	lsr.w	r4, r5, r4
    2cc8:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2cca:	2c09      	cmp	r4, #9
    i++;
    2ccc:	f102 0406 	add.w	r4, r2, #6
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2cd0:	bfcc      	ite	gt
    2cd2:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2cd4:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2cd6:	2c08      	cmp	r4, #8
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2cd8:	71cd      	strb	r5, [r1, #7]
    mask = mask>> 4;
    2cda:	ea4f 6513 	mov.w	r5, r3, lsr #24
  while (i!=8) {
    2cde:	d01a      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2ce0:	f1c4 0407 	rsb	r4, r4, #7
    2ce4:	4005      	ands	r5, r0
    2ce6:	00a4      	lsls	r4, r4, #2
    2ce8:	fa25 f404 	lsr.w	r4, r5, r4
    2cec:	b2e5      	uxtb	r5, r4
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2cee:	2c09      	cmp	r4, #9
    2cf0:	bfcc      	ite	gt
    2cf2:	3557      	addgt	r5, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2cf4:	3530      	addle	r5, #48	; 0x30
  while (i!=8) {
    2cf6:	2a01      	cmp	r2, #1
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2cf8:	720d      	strb	r5, [r1, #8]
    mask = mask>> 4;
    2cfa:	ea4f 7313 	mov.w	r3, r3, lsr #28
  while (i!=8) {
    2cfe:	d00a      	beq.n	2d16 <int_to_hex+0x136>
    nibble  = (mask & value) >> ((7-i)*4); /* shift to LSB */
    2d00:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
    2d04:	4003      	ands	r3, r0
    2d06:	00a0      	lsls	r0, r4, #2
    2d08:	40c3      	lsrs	r3, r0
    2d0a:	b2d8      	uxtb	r0, r3
    if (nibble>9) text[length] = (char) (nibble+87); // Convert to ASCII a to f
    2d0c:	2b09      	cmp	r3, #9
    2d0e:	bfcc      	ite	gt
    2d10:	3057      	addgt	r0, #87	; 0x57
    else          text[length] = (char) (nibble+48); // Convert to ASCII 0 to 9
    2d12:	3030      	addle	r0, #48	; 0x30
    2d14:	7248      	strb	r0, [r1, #9]
  text[length]=(char) 0; /* null termination */
    2d16:	2300      	movs	r3, #0
  return;
}
    2d18:	bc30      	pop	{r4, r5}
    2d1a:	f1c2 020a 	rsb	r2, r2, #10
  text[length]=(char) 0; /* null termination */
    2d1e:	548b      	strb	r3, [r1, r2]
}
    2d20:	4770      	bx	lr
  while (i!=8) {
    2d22:	2202      	movs	r2, #2
}
    2d24:	bc30      	pop	{r4, r5}
  text[length]=(char) 0; /* null termination */
    2d26:	2300      	movs	r3, #0
    2d28:	548b      	strb	r3, [r1, r2]
}
    2d2a:	4770      	bx	lr
    2d2c:	4614      	mov	r4, r2
  unsigned int mask = 0xF0000000UL;
    2d2e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
  int          i=0;
    2d32:	2200      	movs	r2, #0
    2d34:	e76a      	b.n	2c0c <int_to_hex+0x2c>
    2d36:	bf00      	nop

00002d38 <main>:
{
    2d38:	b508      	push	{r3, lr}
  UartStdOutInit();
    2d3a:	f000 f889 	bl	2e50 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - Dual Timer Demo - revision $Revision: 242484 $\n");
    2d3e:	4830      	ldr	r0, [pc, #192]	; (2e00 <main+0xc8>)
    2d40:	f000 f92e 	bl	2fa0 <puts>
 dualtimer_id = HW8_REG(CM3DS_MPS2_DUALTIMER_BASE  + 0xFE8) & 0x07;
    2d44:	4b2f      	ldr	r3, [pc, #188]	; (2e04 <main+0xcc>)
 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
    2d46:	4a30      	ldr	r2, [pc, #192]	; (2e08 <main+0xd0>)
 dualtimer_id = HW8_REG(CM3DS_MPS2_DUALTIMER_BASE  + 0xFE8) & 0x07;
    2d48:	781b      	ldrb	r3, [r3, #0]
 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
    2d4a:	6812      	ldr	r2, [r2, #0]
    2d4c:	2a23      	cmp	r2, #35	; 0x23
    2d4e:	d103      	bne.n	2d58 <main+0x20>
     (HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE4) != 0xB8) ||
    2d50:	4a2e      	ldr	r2, [pc, #184]	; (2e0c <main+0xd4>)
    2d52:	6812      	ldr	r2, [r2, #0]
 if ((HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE0) != 0x23) ||
    2d54:	2ab8      	cmp	r2, #184	; 0xb8
    2d56:	d006      	beq.n	2d66 <main+0x2e>
    puts ("** TEST SKIPPED ** Dual timer not present.\n");
    2d58:	482d      	ldr	r0, [pc, #180]	; (2e10 <main+0xd8>)
    2d5a:	f000 f921 	bl	2fa0 <puts>
    UartEndSimulation();
    2d5e:	f000 f88f 	bl	2e80 <UartEndSimulation>
}
    2d62:	2000      	movs	r0, #0
    2d64:	bd08      	pop	{r3, pc}
    2d66:	b2db      	uxtb	r3, r3
     (HW32_REG(CM3DS_MPS2_DUALTIMER_BASE + 0xFE4) != 0xB8) ||
    2d68:	f003 0307 	and.w	r3, r3, #7
    2d6c:	2b03      	cmp	r3, #3
    2d6e:	d1f3      	bne.n	2d58 <main+0x20>
  puts ("\n--------------------------------");
    2d70:	4828      	ldr	r0, [pc, #160]	; (2e14 <main+0xdc>)
    2d72:	f000 f915 	bl	2fa0 <puts>
  puts ("Timer 1");
    2d76:	4828      	ldr	r0, [pc, #160]	; (2e18 <main+0xe0>)
    2d78:	f000 f912 	bl	2fa0 <puts>
  puts ("--------------------------------\n");
    2d7c:	4827      	ldr	r0, [pc, #156]	; (2e1c <main+0xe4>)
    2d7e:	f000 f90f 	bl	2fa0 <puts>
  dualtimer_16_free_running_demo(CM3DS_MPS2_DUALTIMER1);
    2d82:	4827      	ldr	r0, [pc, #156]	; (2e20 <main+0xe8>)
    2d84:	f7fd fa4e 	bl	224 <dualtimer_16_free_running_demo>
  dualtimer_16_periodic_demo(CM3DS_MPS2_DUALTIMER1);
    2d88:	4825      	ldr	r0, [pc, #148]	; (2e20 <main+0xe8>)
    2d8a:	f7fe f97b 	bl	1084 <dualtimer_16_periodic_demo>
  dualtimer_16_one_shot_demo(CM3DS_MPS2_DUALTIMER1);
    2d8e:	4824      	ldr	r0, [pc, #144]	; (2e20 <main+0xe8>)
    2d90:	f7ff f8b8 	bl	1f04 <dualtimer_16_one_shot_demo>
  dualtimer_32_free_running_demo(CM3DS_MPS2_DUALTIMER1);
    2d94:	4822      	ldr	r0, [pc, #136]	; (2e20 <main+0xe8>)
    2d96:	f7fd fddd 	bl	954 <dualtimer_32_free_running_demo>
  dualtimer_32_periodic_demo(CM3DS_MPS2_DUALTIMER1);
    2d9a:	4821      	ldr	r0, [pc, #132]	; (2e20 <main+0xe8>)
    2d9c:	f7fe fd12 	bl	17c4 <dualtimer_32_periodic_demo>
  dualtimer_32_one_shot_demo(CM3DS_MPS2_DUALTIMER1);
    2da0:	481f      	ldr	r0, [pc, #124]	; (2e20 <main+0xe8>)
    2da2:	f7ff fb35 	bl	2410 <dualtimer_32_one_shot_demo>
  puts ("\n--------------------------------");
    2da6:	481b      	ldr	r0, [pc, #108]	; (2e14 <main+0xdc>)
    2da8:	f000 f8fa 	bl	2fa0 <puts>
  puts ("Timer 2");
    2dac:	481d      	ldr	r0, [pc, #116]	; (2e24 <main+0xec>)
    2dae:	f000 f8f7 	bl	2fa0 <puts>
  puts ("--------------------------------\n");
    2db2:	481a      	ldr	r0, [pc, #104]	; (2e1c <main+0xe4>)
    2db4:	f000 f8f4 	bl	2fa0 <puts>
  dualtimer_16_free_running_demo(CM3DS_MPS2_DUALTIMER2);
    2db8:	481b      	ldr	r0, [pc, #108]	; (2e28 <main+0xf0>)
    2dba:	f7fd fa33 	bl	224 <dualtimer_16_free_running_demo>
  dualtimer_16_periodic_demo(CM3DS_MPS2_DUALTIMER2);
    2dbe:	481a      	ldr	r0, [pc, #104]	; (2e28 <main+0xf0>)
    2dc0:	f7fe f960 	bl	1084 <dualtimer_16_periodic_demo>
  dualtimer_16_one_shot_demo(CM3DS_MPS2_DUALTIMER2);
    2dc4:	4818      	ldr	r0, [pc, #96]	; (2e28 <main+0xf0>)
    2dc6:	f7ff f89d 	bl	1f04 <dualtimer_16_one_shot_demo>
  dualtimer_32_free_running_demo(CM3DS_MPS2_DUALTIMER2);
    2dca:	4817      	ldr	r0, [pc, #92]	; (2e28 <main+0xf0>)
    2dcc:	f7fd fdc2 	bl	954 <dualtimer_32_free_running_demo>
  dualtimer_32_periodic_demo(CM3DS_MPS2_DUALTIMER2);
    2dd0:	4815      	ldr	r0, [pc, #84]	; (2e28 <main+0xf0>)
    2dd2:	f7fe fcf7 	bl	17c4 <dualtimer_32_periodic_demo>
  dualtimer_32_one_shot_demo(CM3DS_MPS2_DUALTIMER2);
    2dd6:	4814      	ldr	r0, [pc, #80]	; (2e28 <main+0xf0>)
    2dd8:	f7ff fb1a 	bl	2410 <dualtimer_32_one_shot_demo>
  puts ("\n--------------------------------");
    2ddc:	480d      	ldr	r0, [pc, #52]	; (2e14 <main+0xdc>)
    2dde:	f000 f8df 	bl	2fa0 <puts>
  puts ("Integration test");
    2de2:	4812      	ldr	r0, [pc, #72]	; (2e2c <main+0xf4>)
    2de4:	f000 f8dc 	bl	2fa0 <puts>
  puts ("--------------------------------\n");
    2de8:	480c      	ldr	r0, [pc, #48]	; (2e1c <main+0xe4>)
    2dea:	f000 f8d9 	bl	2fa0 <puts>
  dualtimer_integration_test();
    2dee:	f7ff fe51 	bl	2a94 <dualtimer_integration_test>
  puts ("** TEST PASSED ** \n");
    2df2:	480f      	ldr	r0, [pc, #60]	; (2e30 <main+0xf8>)
    2df4:	f000 f8d4 	bl	2fa0 <puts>
  UartEndSimulation();
    2df8:	f000 f842 	bl	2e80 <UartEndSimulation>
    2dfc:	e7b1      	b.n	2d62 <main+0x2a>
    2dfe:	bf00      	nop
    2e00:	00003e6c 	.word	0x00003e6c
    2e04:	40002fe8 	.word	0x40002fe8
    2e08:	40002fe0 	.word	0x40002fe0
    2e0c:	40002fe4 	.word	0x40002fe4
    2e10:	00003f38 	.word	0x00003f38
    2e14:	00003eb8 	.word	0x00003eb8
    2e18:	00003edc 	.word	0x00003edc
    2e1c:	00003ee4 	.word	0x00003ee4
    2e20:	40002000 	.word	0x40002000
    2e24:	00003f08 	.word	0x00003f08
    2e28:	40002020 	.word	0x40002020
    2e2c:	00003f10 	.word	0x00003f10
    2e30:	00003f24 	.word	0x00003f24

00002e34 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
    2e34:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
    2e36:	4616      	mov	r6, r2
    2e38:	b13a      	cbz	r2, 2e4a <_write+0x16>
    2e3a:	1e4c      	subs	r4, r1, #1
    2e3c:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
    2e3e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    2e42:	f000 f80d 	bl	2e60 <UartPutc>
  for (i=0; i<len;i++) {
    2e46:	42ac      	cmp	r4, r5
    2e48:	d1f9      	bne.n	2e3e <_write+0xa>
    }
  return len;
}
    2e4a:	4630      	mov	r0, r6
    2e4c:	bd70      	pop	{r4, r5, r6, pc}
    2e4e:	bf00      	nop

00002e50 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
    2e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e54:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
    2e56:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
    2e58:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
    2e5a:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
    2e5c:	4770      	bx	lr
    2e5e:	bf00      	nop

00002e60 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
    2e60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    2e64:	6853      	ldr	r3, [r2, #4]
    2e66:	07db      	lsls	r3, r3, #31
    2e68:	d4fc      	bmi.n	2e64 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
    2e6a:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop

00002e70 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
    2e70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    2e74:	6853      	ldr	r3, [r2, #4]
    2e76:	079b      	lsls	r3, r3, #30
    2e78:	d5fc      	bpl.n	2e74 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
    2e7a:	6810      	ldr	r0, [r2, #0]
}
    2e7c:	b2c0      	uxtb	r0, r0
    2e7e:	4770      	bx	lr

00002e80 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
    2e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2e84:	685a      	ldr	r2, [r3, #4]
    2e86:	07d2      	lsls	r2, r2, #31
    2e88:	d4fc      	bmi.n	2e84 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
    2e8a:	2204      	movs	r2, #4
    2e8c:	601a      	str	r2, [r3, #0]
    2e8e:	e7fe      	b.n	2e8e <UartEndSimulation+0xe>

00002e90 <SystemCoreClockUpdate>:
    2e90:	4b01      	ldr	r3, [pc, #4]	; (2e98 <SystemCoreClockUpdate+0x8>)
    2e92:	4a02      	ldr	r2, [pc, #8]	; (2e9c <SystemCoreClockUpdate+0xc>)
    2e94:	601a      	str	r2, [r3, #0]
    2e96:	4770      	bx	lr
    2e98:	20000000 	.word	0x20000000
    2e9c:	017d7840 	.word	0x017d7840

00002ea0 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    2ea0:	4b01      	ldr	r3, [pc, #4]	; (2ea8 <SystemInit+0x8>)
    2ea2:	4a02      	ldr	r2, [pc, #8]	; (2eac <SystemInit+0xc>)
    2ea4:	601a      	str	r2, [r3, #0]

}
    2ea6:	4770      	bx	lr
    2ea8:	20000000 	.word	0x20000000
    2eac:	017d7840 	.word	0x017d7840

00002eb0 <exit>:
    2eb0:	b508      	push	{r3, lr}
    2eb2:	4b07      	ldr	r3, [pc, #28]	; (2ed0 <exit+0x20>)
    2eb4:	4604      	mov	r4, r0
    2eb6:	b113      	cbz	r3, 2ebe <exit+0xe>
    2eb8:	2100      	movs	r1, #0
    2eba:	f3af 8000 	nop.w
    2ebe:	4b05      	ldr	r3, [pc, #20]	; (2ed4 <exit+0x24>)
    2ec0:	6818      	ldr	r0, [r3, #0]
    2ec2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2ec4:	b103      	cbz	r3, 2ec8 <exit+0x18>
    2ec6:	4798      	blx	r3
    2ec8:	4620      	mov	r0, r4
    2eca:	f000 fca9 	bl	3820 <_exit>
    2ece:	bf00      	nop
    2ed0:	00000000 	.word	0x00000000
    2ed4:	00003f64 	.word	0x00003f64

00002ed8 <memset>:
    2ed8:	4603      	mov	r3, r0
    2eda:	4402      	add	r2, r0
    2edc:	4293      	cmp	r3, r2
    2ede:	d100      	bne.n	2ee2 <memset+0xa>
    2ee0:	4770      	bx	lr
    2ee2:	f803 1b01 	strb.w	r1, [r3], #1
    2ee6:	e7f9      	b.n	2edc <memset+0x4>

00002ee8 <_puts_r>:
    2ee8:	b570      	push	{r4, r5, r6, lr}
    2eea:	460e      	mov	r6, r1
    2eec:	4605      	mov	r5, r0
    2eee:	b118      	cbz	r0, 2ef8 <_puts_r+0x10>
    2ef0:	6983      	ldr	r3, [r0, #24]
    2ef2:	b90b      	cbnz	r3, 2ef8 <_puts_r+0x10>
    2ef4:	f000 fa0c 	bl	3310 <__sinit>
    2ef8:	69ab      	ldr	r3, [r5, #24]
    2efa:	68ac      	ldr	r4, [r5, #8]
    2efc:	b913      	cbnz	r3, 2f04 <_puts_r+0x1c>
    2efe:	4628      	mov	r0, r5
    2f00:	f000 fa06 	bl	3310 <__sinit>
    2f04:	4b23      	ldr	r3, [pc, #140]	; (2f94 <_puts_r+0xac>)
    2f06:	429c      	cmp	r4, r3
    2f08:	d117      	bne.n	2f3a <_puts_r+0x52>
    2f0a:	686c      	ldr	r4, [r5, #4]
    2f0c:	89a3      	ldrh	r3, [r4, #12]
    2f0e:	071b      	lsls	r3, r3, #28
    2f10:	d51d      	bpl.n	2f4e <_puts_r+0x66>
    2f12:	6923      	ldr	r3, [r4, #16]
    2f14:	b1db      	cbz	r3, 2f4e <_puts_r+0x66>
    2f16:	3e01      	subs	r6, #1
    2f18:	68a3      	ldr	r3, [r4, #8]
    2f1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2f1e:	3b01      	subs	r3, #1
    2f20:	60a3      	str	r3, [r4, #8]
    2f22:	b9e9      	cbnz	r1, 2f60 <_puts_r+0x78>
    2f24:	2b00      	cmp	r3, #0
    2f26:	da2e      	bge.n	2f86 <_puts_r+0x9e>
    2f28:	4622      	mov	r2, r4
    2f2a:	210a      	movs	r1, #10
    2f2c:	4628      	mov	r0, r5
    2f2e:	f000 f83f 	bl	2fb0 <__swbuf_r>
    2f32:	3001      	adds	r0, #1
    2f34:	d011      	beq.n	2f5a <_puts_r+0x72>
    2f36:	200a      	movs	r0, #10
    2f38:	e011      	b.n	2f5e <_puts_r+0x76>
    2f3a:	4b17      	ldr	r3, [pc, #92]	; (2f98 <_puts_r+0xb0>)
    2f3c:	429c      	cmp	r4, r3
    2f3e:	d101      	bne.n	2f44 <_puts_r+0x5c>
    2f40:	68ac      	ldr	r4, [r5, #8]
    2f42:	e7e3      	b.n	2f0c <_puts_r+0x24>
    2f44:	4b15      	ldr	r3, [pc, #84]	; (2f9c <_puts_r+0xb4>)
    2f46:	429c      	cmp	r4, r3
    2f48:	bf08      	it	eq
    2f4a:	68ec      	ldreq	r4, [r5, #12]
    2f4c:	e7de      	b.n	2f0c <_puts_r+0x24>
    2f4e:	4621      	mov	r1, r4
    2f50:	4628      	mov	r0, r5
    2f52:	f000 f87f 	bl	3054 <__swsetup_r>
    2f56:	2800      	cmp	r0, #0
    2f58:	d0dd      	beq.n	2f16 <_puts_r+0x2e>
    2f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f5e:	bd70      	pop	{r4, r5, r6, pc}
    2f60:	2b00      	cmp	r3, #0
    2f62:	da04      	bge.n	2f6e <_puts_r+0x86>
    2f64:	69a2      	ldr	r2, [r4, #24]
    2f66:	429a      	cmp	r2, r3
    2f68:	dc06      	bgt.n	2f78 <_puts_r+0x90>
    2f6a:	290a      	cmp	r1, #10
    2f6c:	d004      	beq.n	2f78 <_puts_r+0x90>
    2f6e:	6823      	ldr	r3, [r4, #0]
    2f70:	1c5a      	adds	r2, r3, #1
    2f72:	6022      	str	r2, [r4, #0]
    2f74:	7019      	strb	r1, [r3, #0]
    2f76:	e7cf      	b.n	2f18 <_puts_r+0x30>
    2f78:	4622      	mov	r2, r4
    2f7a:	4628      	mov	r0, r5
    2f7c:	f000 f818 	bl	2fb0 <__swbuf_r>
    2f80:	3001      	adds	r0, #1
    2f82:	d1c9      	bne.n	2f18 <_puts_r+0x30>
    2f84:	e7e9      	b.n	2f5a <_puts_r+0x72>
    2f86:	200a      	movs	r0, #10
    2f88:	6823      	ldr	r3, [r4, #0]
    2f8a:	1c5a      	adds	r2, r3, #1
    2f8c:	6022      	str	r2, [r4, #0]
    2f8e:	7018      	strb	r0, [r3, #0]
    2f90:	e7e5      	b.n	2f5e <_puts_r+0x76>
    2f92:	bf00      	nop
    2f94:	00003f88 	.word	0x00003f88
    2f98:	00003fa8 	.word	0x00003fa8
    2f9c:	00003f68 	.word	0x00003f68

00002fa0 <puts>:
    2fa0:	4b02      	ldr	r3, [pc, #8]	; (2fac <puts+0xc>)
    2fa2:	4601      	mov	r1, r0
    2fa4:	6818      	ldr	r0, [r3, #0]
    2fa6:	f7ff bf9f 	b.w	2ee8 <_puts_r>
    2faa:	bf00      	nop
    2fac:	20000004 	.word	0x20000004

00002fb0 <__swbuf_r>:
    2fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fb2:	460e      	mov	r6, r1
    2fb4:	4614      	mov	r4, r2
    2fb6:	4605      	mov	r5, r0
    2fb8:	b118      	cbz	r0, 2fc2 <__swbuf_r+0x12>
    2fba:	6983      	ldr	r3, [r0, #24]
    2fbc:	b90b      	cbnz	r3, 2fc2 <__swbuf_r+0x12>
    2fbe:	f000 f9a7 	bl	3310 <__sinit>
    2fc2:	4b21      	ldr	r3, [pc, #132]	; (3048 <__swbuf_r+0x98>)
    2fc4:	429c      	cmp	r4, r3
    2fc6:	d12a      	bne.n	301e <__swbuf_r+0x6e>
    2fc8:	686c      	ldr	r4, [r5, #4]
    2fca:	69a3      	ldr	r3, [r4, #24]
    2fcc:	60a3      	str	r3, [r4, #8]
    2fce:	89a3      	ldrh	r3, [r4, #12]
    2fd0:	071a      	lsls	r2, r3, #28
    2fd2:	d52e      	bpl.n	3032 <__swbuf_r+0x82>
    2fd4:	6923      	ldr	r3, [r4, #16]
    2fd6:	b363      	cbz	r3, 3032 <__swbuf_r+0x82>
    2fd8:	6923      	ldr	r3, [r4, #16]
    2fda:	6820      	ldr	r0, [r4, #0]
    2fdc:	b2f6      	uxtb	r6, r6
    2fde:	1ac0      	subs	r0, r0, r3
    2fe0:	6963      	ldr	r3, [r4, #20]
    2fe2:	4637      	mov	r7, r6
    2fe4:	4283      	cmp	r3, r0
    2fe6:	dc04      	bgt.n	2ff2 <__swbuf_r+0x42>
    2fe8:	4621      	mov	r1, r4
    2fea:	4628      	mov	r0, r5
    2fec:	f000 f926 	bl	323c <_fflush_r>
    2ff0:	bb28      	cbnz	r0, 303e <__swbuf_r+0x8e>
    2ff2:	68a3      	ldr	r3, [r4, #8]
    2ff4:	3001      	adds	r0, #1
    2ff6:	3b01      	subs	r3, #1
    2ff8:	60a3      	str	r3, [r4, #8]
    2ffa:	6823      	ldr	r3, [r4, #0]
    2ffc:	1c5a      	adds	r2, r3, #1
    2ffe:	6022      	str	r2, [r4, #0]
    3000:	701e      	strb	r6, [r3, #0]
    3002:	6963      	ldr	r3, [r4, #20]
    3004:	4283      	cmp	r3, r0
    3006:	d004      	beq.n	3012 <__swbuf_r+0x62>
    3008:	89a3      	ldrh	r3, [r4, #12]
    300a:	07db      	lsls	r3, r3, #31
    300c:	d519      	bpl.n	3042 <__swbuf_r+0x92>
    300e:	2e0a      	cmp	r6, #10
    3010:	d117      	bne.n	3042 <__swbuf_r+0x92>
    3012:	4621      	mov	r1, r4
    3014:	4628      	mov	r0, r5
    3016:	f000 f911 	bl	323c <_fflush_r>
    301a:	b190      	cbz	r0, 3042 <__swbuf_r+0x92>
    301c:	e00f      	b.n	303e <__swbuf_r+0x8e>
    301e:	4b0b      	ldr	r3, [pc, #44]	; (304c <__swbuf_r+0x9c>)
    3020:	429c      	cmp	r4, r3
    3022:	d101      	bne.n	3028 <__swbuf_r+0x78>
    3024:	68ac      	ldr	r4, [r5, #8]
    3026:	e7d0      	b.n	2fca <__swbuf_r+0x1a>
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <__swbuf_r+0xa0>)
    302a:	429c      	cmp	r4, r3
    302c:	bf08      	it	eq
    302e:	68ec      	ldreq	r4, [r5, #12]
    3030:	e7cb      	b.n	2fca <__swbuf_r+0x1a>
    3032:	4621      	mov	r1, r4
    3034:	4628      	mov	r0, r5
    3036:	f000 f80d 	bl	3054 <__swsetup_r>
    303a:	2800      	cmp	r0, #0
    303c:	d0cc      	beq.n	2fd8 <__swbuf_r+0x28>
    303e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    3042:	4638      	mov	r0, r7
    3044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3046:	bf00      	nop
    3048:	00003f88 	.word	0x00003f88
    304c:	00003fa8 	.word	0x00003fa8
    3050:	00003f68 	.word	0x00003f68

00003054 <__swsetup_r>:
    3054:	4b32      	ldr	r3, [pc, #200]	; (3120 <__swsetup_r+0xcc>)
    3056:	b570      	push	{r4, r5, r6, lr}
    3058:	681d      	ldr	r5, [r3, #0]
    305a:	4606      	mov	r6, r0
    305c:	460c      	mov	r4, r1
    305e:	b125      	cbz	r5, 306a <__swsetup_r+0x16>
    3060:	69ab      	ldr	r3, [r5, #24]
    3062:	b913      	cbnz	r3, 306a <__swsetup_r+0x16>
    3064:	4628      	mov	r0, r5
    3066:	f000 f953 	bl	3310 <__sinit>
    306a:	4b2e      	ldr	r3, [pc, #184]	; (3124 <__swsetup_r+0xd0>)
    306c:	429c      	cmp	r4, r3
    306e:	d10f      	bne.n	3090 <__swsetup_r+0x3c>
    3070:	686c      	ldr	r4, [r5, #4]
    3072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3076:	b29a      	uxth	r2, r3
    3078:	0715      	lsls	r5, r2, #28
    307a:	d42c      	bmi.n	30d6 <__swsetup_r+0x82>
    307c:	06d0      	lsls	r0, r2, #27
    307e:	d411      	bmi.n	30a4 <__swsetup_r+0x50>
    3080:	2209      	movs	r2, #9
    3082:	6032      	str	r2, [r6, #0]
    3084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3088:	81a3      	strh	r3, [r4, #12]
    308a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    308e:	e03e      	b.n	310e <__swsetup_r+0xba>
    3090:	4b25      	ldr	r3, [pc, #148]	; (3128 <__swsetup_r+0xd4>)
    3092:	429c      	cmp	r4, r3
    3094:	d101      	bne.n	309a <__swsetup_r+0x46>
    3096:	68ac      	ldr	r4, [r5, #8]
    3098:	e7eb      	b.n	3072 <__swsetup_r+0x1e>
    309a:	4b24      	ldr	r3, [pc, #144]	; (312c <__swsetup_r+0xd8>)
    309c:	429c      	cmp	r4, r3
    309e:	bf08      	it	eq
    30a0:	68ec      	ldreq	r4, [r5, #12]
    30a2:	e7e6      	b.n	3072 <__swsetup_r+0x1e>
    30a4:	0751      	lsls	r1, r2, #29
    30a6:	d512      	bpl.n	30ce <__swsetup_r+0x7a>
    30a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    30aa:	b141      	cbz	r1, 30be <__swsetup_r+0x6a>
    30ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
    30b0:	4299      	cmp	r1, r3
    30b2:	d002      	beq.n	30ba <__swsetup_r+0x66>
    30b4:	4630      	mov	r0, r6
    30b6:	f000 fa19 	bl	34ec <_free_r>
    30ba:	2300      	movs	r3, #0
    30bc:	6363      	str	r3, [r4, #52]	; 0x34
    30be:	89a3      	ldrh	r3, [r4, #12]
    30c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    30c4:	81a3      	strh	r3, [r4, #12]
    30c6:	2300      	movs	r3, #0
    30c8:	6063      	str	r3, [r4, #4]
    30ca:	6923      	ldr	r3, [r4, #16]
    30cc:	6023      	str	r3, [r4, #0]
    30ce:	89a3      	ldrh	r3, [r4, #12]
    30d0:	f043 0308 	orr.w	r3, r3, #8
    30d4:	81a3      	strh	r3, [r4, #12]
    30d6:	6923      	ldr	r3, [r4, #16]
    30d8:	b94b      	cbnz	r3, 30ee <__swsetup_r+0x9a>
    30da:	89a3      	ldrh	r3, [r4, #12]
    30dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
    30e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    30e4:	d003      	beq.n	30ee <__swsetup_r+0x9a>
    30e6:	4621      	mov	r1, r4
    30e8:	4630      	mov	r0, r6
    30ea:	f000 f9bf 	bl	346c <__smakebuf_r>
    30ee:	89a2      	ldrh	r2, [r4, #12]
    30f0:	f012 0301 	ands.w	r3, r2, #1
    30f4:	d00c      	beq.n	3110 <__swsetup_r+0xbc>
    30f6:	2300      	movs	r3, #0
    30f8:	60a3      	str	r3, [r4, #8]
    30fa:	6963      	ldr	r3, [r4, #20]
    30fc:	425b      	negs	r3, r3
    30fe:	61a3      	str	r3, [r4, #24]
    3100:	6923      	ldr	r3, [r4, #16]
    3102:	b953      	cbnz	r3, 311a <__swsetup_r+0xc6>
    3104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3108:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    310c:	d1ba      	bne.n	3084 <__swsetup_r+0x30>
    310e:	bd70      	pop	{r4, r5, r6, pc}
    3110:	0792      	lsls	r2, r2, #30
    3112:	bf58      	it	pl
    3114:	6963      	ldrpl	r3, [r4, #20]
    3116:	60a3      	str	r3, [r4, #8]
    3118:	e7f2      	b.n	3100 <__swsetup_r+0xac>
    311a:	2000      	movs	r0, #0
    311c:	e7f7      	b.n	310e <__swsetup_r+0xba>
    311e:	bf00      	nop
    3120:	20000004 	.word	0x20000004
    3124:	00003f88 	.word	0x00003f88
    3128:	00003fa8 	.word	0x00003fa8
    312c:	00003f68 	.word	0x00003f68

00003130 <__sflush_r>:
    3130:	898a      	ldrh	r2, [r1, #12]
    3132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3136:	4605      	mov	r5, r0
    3138:	0710      	lsls	r0, r2, #28
    313a:	460c      	mov	r4, r1
    313c:	d458      	bmi.n	31f0 <__sflush_r+0xc0>
    313e:	684b      	ldr	r3, [r1, #4]
    3140:	2b00      	cmp	r3, #0
    3142:	dc05      	bgt.n	3150 <__sflush_r+0x20>
    3144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3146:	2b00      	cmp	r3, #0
    3148:	dc02      	bgt.n	3150 <__sflush_r+0x20>
    314a:	2000      	movs	r0, #0
    314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    3152:	2e00      	cmp	r6, #0
    3154:	d0f9      	beq.n	314a <__sflush_r+0x1a>
    3156:	2300      	movs	r3, #0
    3158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    315c:	682f      	ldr	r7, [r5, #0]
    315e:	6a21      	ldr	r1, [r4, #32]
    3160:	602b      	str	r3, [r5, #0]
    3162:	d032      	beq.n	31ca <__sflush_r+0x9a>
    3164:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3166:	89a3      	ldrh	r3, [r4, #12]
    3168:	075a      	lsls	r2, r3, #29
    316a:	d505      	bpl.n	3178 <__sflush_r+0x48>
    316c:	6863      	ldr	r3, [r4, #4]
    316e:	1ac0      	subs	r0, r0, r3
    3170:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3172:	b10b      	cbz	r3, 3178 <__sflush_r+0x48>
    3174:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3176:	1ac0      	subs	r0, r0, r3
    3178:	2300      	movs	r3, #0
    317a:	4602      	mov	r2, r0
    317c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    317e:	6a21      	ldr	r1, [r4, #32]
    3180:	4628      	mov	r0, r5
    3182:	47b0      	blx	r6
    3184:	1c43      	adds	r3, r0, #1
    3186:	89a3      	ldrh	r3, [r4, #12]
    3188:	d106      	bne.n	3198 <__sflush_r+0x68>
    318a:	6829      	ldr	r1, [r5, #0]
    318c:	291d      	cmp	r1, #29
    318e:	d848      	bhi.n	3222 <__sflush_r+0xf2>
    3190:	4a29      	ldr	r2, [pc, #164]	; (3238 <__sflush_r+0x108>)
    3192:	40ca      	lsrs	r2, r1
    3194:	07d6      	lsls	r6, r2, #31
    3196:	d544      	bpl.n	3222 <__sflush_r+0xf2>
    3198:	2200      	movs	r2, #0
    319a:	6062      	str	r2, [r4, #4]
    319c:	6922      	ldr	r2, [r4, #16]
    319e:	04d9      	lsls	r1, r3, #19
    31a0:	6022      	str	r2, [r4, #0]
    31a2:	d504      	bpl.n	31ae <__sflush_r+0x7e>
    31a4:	1c42      	adds	r2, r0, #1
    31a6:	d101      	bne.n	31ac <__sflush_r+0x7c>
    31a8:	682b      	ldr	r3, [r5, #0]
    31aa:	b903      	cbnz	r3, 31ae <__sflush_r+0x7e>
    31ac:	6560      	str	r0, [r4, #84]	; 0x54
    31ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    31b0:	602f      	str	r7, [r5, #0]
    31b2:	2900      	cmp	r1, #0
    31b4:	d0c9      	beq.n	314a <__sflush_r+0x1a>
    31b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
    31ba:	4299      	cmp	r1, r3
    31bc:	d002      	beq.n	31c4 <__sflush_r+0x94>
    31be:	4628      	mov	r0, r5
    31c0:	f000 f994 	bl	34ec <_free_r>
    31c4:	2000      	movs	r0, #0
    31c6:	6360      	str	r0, [r4, #52]	; 0x34
    31c8:	e7c0      	b.n	314c <__sflush_r+0x1c>
    31ca:	2301      	movs	r3, #1
    31cc:	4628      	mov	r0, r5
    31ce:	47b0      	blx	r6
    31d0:	1c41      	adds	r1, r0, #1
    31d2:	d1c8      	bne.n	3166 <__sflush_r+0x36>
    31d4:	682b      	ldr	r3, [r5, #0]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d0c5      	beq.n	3166 <__sflush_r+0x36>
    31da:	2b1d      	cmp	r3, #29
    31dc:	d001      	beq.n	31e2 <__sflush_r+0xb2>
    31de:	2b16      	cmp	r3, #22
    31e0:	d101      	bne.n	31e6 <__sflush_r+0xb6>
    31e2:	602f      	str	r7, [r5, #0]
    31e4:	e7b1      	b.n	314a <__sflush_r+0x1a>
    31e6:	89a3      	ldrh	r3, [r4, #12]
    31e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    31ec:	81a3      	strh	r3, [r4, #12]
    31ee:	e7ad      	b.n	314c <__sflush_r+0x1c>
    31f0:	690f      	ldr	r7, [r1, #16]
    31f2:	2f00      	cmp	r7, #0
    31f4:	d0a9      	beq.n	314a <__sflush_r+0x1a>
    31f6:	0793      	lsls	r3, r2, #30
    31f8:	bf18      	it	ne
    31fa:	2300      	movne	r3, #0
    31fc:	680e      	ldr	r6, [r1, #0]
    31fe:	bf08      	it	eq
    3200:	694b      	ldreq	r3, [r1, #20]
    3202:	eba6 0807 	sub.w	r8, r6, r7
    3206:	600f      	str	r7, [r1, #0]
    3208:	608b      	str	r3, [r1, #8]
    320a:	f1b8 0f00 	cmp.w	r8, #0
    320e:	dd9c      	ble.n	314a <__sflush_r+0x1a>
    3210:	4643      	mov	r3, r8
    3212:	463a      	mov	r2, r7
    3214:	6a21      	ldr	r1, [r4, #32]
    3216:	4628      	mov	r0, r5
    3218:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    321a:	47b0      	blx	r6
    321c:	2800      	cmp	r0, #0
    321e:	dc06      	bgt.n	322e <__sflush_r+0xfe>
    3220:	89a3      	ldrh	r3, [r4, #12]
    3222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3226:	81a3      	strh	r3, [r4, #12]
    3228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    322c:	e78e      	b.n	314c <__sflush_r+0x1c>
    322e:	4407      	add	r7, r0
    3230:	eba8 0800 	sub.w	r8, r8, r0
    3234:	e7e9      	b.n	320a <__sflush_r+0xda>
    3236:	bf00      	nop
    3238:	20400001 	.word	0x20400001

0000323c <_fflush_r>:
    323c:	b538      	push	{r3, r4, r5, lr}
    323e:	690b      	ldr	r3, [r1, #16]
    3240:	4605      	mov	r5, r0
    3242:	460c      	mov	r4, r1
    3244:	b1db      	cbz	r3, 327e <_fflush_r+0x42>
    3246:	b118      	cbz	r0, 3250 <_fflush_r+0x14>
    3248:	6983      	ldr	r3, [r0, #24]
    324a:	b90b      	cbnz	r3, 3250 <_fflush_r+0x14>
    324c:	f000 f860 	bl	3310 <__sinit>
    3250:	4b0c      	ldr	r3, [pc, #48]	; (3284 <_fflush_r+0x48>)
    3252:	429c      	cmp	r4, r3
    3254:	d109      	bne.n	326a <_fflush_r+0x2e>
    3256:	686c      	ldr	r4, [r5, #4]
    3258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    325c:	b17b      	cbz	r3, 327e <_fflush_r+0x42>
    325e:	4621      	mov	r1, r4
    3260:	4628      	mov	r0, r5
    3262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3266:	f7ff bf63 	b.w	3130 <__sflush_r>
    326a:	4b07      	ldr	r3, [pc, #28]	; (3288 <_fflush_r+0x4c>)
    326c:	429c      	cmp	r4, r3
    326e:	d101      	bne.n	3274 <_fflush_r+0x38>
    3270:	68ac      	ldr	r4, [r5, #8]
    3272:	e7f1      	b.n	3258 <_fflush_r+0x1c>
    3274:	4b05      	ldr	r3, [pc, #20]	; (328c <_fflush_r+0x50>)
    3276:	429c      	cmp	r4, r3
    3278:	bf08      	it	eq
    327a:	68ec      	ldreq	r4, [r5, #12]
    327c:	e7ec      	b.n	3258 <_fflush_r+0x1c>
    327e:	2000      	movs	r0, #0
    3280:	bd38      	pop	{r3, r4, r5, pc}
    3282:	bf00      	nop
    3284:	00003f88 	.word	0x00003f88
    3288:	00003fa8 	.word	0x00003fa8
    328c:	00003f68 	.word	0x00003f68

00003290 <std>:
    3290:	2300      	movs	r3, #0
    3292:	b510      	push	{r4, lr}
    3294:	4604      	mov	r4, r0
    3296:	e9c0 3300 	strd	r3, r3, [r0]
    329a:	6083      	str	r3, [r0, #8]
    329c:	8181      	strh	r1, [r0, #12]
    329e:	6643      	str	r3, [r0, #100]	; 0x64
    32a0:	81c2      	strh	r2, [r0, #14]
    32a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
    32a6:	6183      	str	r3, [r0, #24]
    32a8:	4619      	mov	r1, r3
    32aa:	2208      	movs	r2, #8
    32ac:	305c      	adds	r0, #92	; 0x5c
    32ae:	f7ff fe13 	bl	2ed8 <memset>
    32b2:	4b05      	ldr	r3, [pc, #20]	; (32c8 <std+0x38>)
    32b4:	6224      	str	r4, [r4, #32]
    32b6:	6263      	str	r3, [r4, #36]	; 0x24
    32b8:	4b04      	ldr	r3, [pc, #16]	; (32cc <std+0x3c>)
    32ba:	62a3      	str	r3, [r4, #40]	; 0x28
    32bc:	4b04      	ldr	r3, [pc, #16]	; (32d0 <std+0x40>)
    32be:	62e3      	str	r3, [r4, #44]	; 0x2c
    32c0:	4b04      	ldr	r3, [pc, #16]	; (32d4 <std+0x44>)
    32c2:	6323      	str	r3, [r4, #48]	; 0x30
    32c4:	bd10      	pop	{r4, pc}
    32c6:	bf00      	nop
    32c8:	00003659 	.word	0x00003659
    32cc:	0000367b 	.word	0x0000367b
    32d0:	000036b3 	.word	0x000036b3
    32d4:	000036d7 	.word	0x000036d7

000032d8 <_cleanup_r>:
    32d8:	4901      	ldr	r1, [pc, #4]	; (32e0 <_cleanup_r+0x8>)
    32da:	f000 b885 	b.w	33e8 <_fwalk_reent>
    32de:	bf00      	nop
    32e0:	0000323d 	.word	0x0000323d

000032e4 <__sfmoreglue>:
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	2568      	movs	r5, #104	; 0x68
    32e8:	1e4a      	subs	r2, r1, #1
    32ea:	4355      	muls	r5, r2
    32ec:	460e      	mov	r6, r1
    32ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
    32f2:	f000 f947 	bl	3584 <_malloc_r>
    32f6:	4604      	mov	r4, r0
    32f8:	b140      	cbz	r0, 330c <__sfmoreglue+0x28>
    32fa:	2100      	movs	r1, #0
    32fc:	e9c0 1600 	strd	r1, r6, [r0]
    3300:	300c      	adds	r0, #12
    3302:	60a0      	str	r0, [r4, #8]
    3304:	f105 0268 	add.w	r2, r5, #104	; 0x68
    3308:	f7ff fde6 	bl	2ed8 <memset>
    330c:	4620      	mov	r0, r4
    330e:	bd70      	pop	{r4, r5, r6, pc}

00003310 <__sinit>:
    3310:	6983      	ldr	r3, [r0, #24]
    3312:	b510      	push	{r4, lr}
    3314:	4604      	mov	r4, r0
    3316:	bb33      	cbnz	r3, 3366 <__sinit+0x56>
    3318:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    331c:	6503      	str	r3, [r0, #80]	; 0x50
    331e:	4b12      	ldr	r3, [pc, #72]	; (3368 <__sinit+0x58>)
    3320:	4a12      	ldr	r2, [pc, #72]	; (336c <__sinit+0x5c>)
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	6282      	str	r2, [r0, #40]	; 0x28
    3326:	4298      	cmp	r0, r3
    3328:	bf04      	itt	eq
    332a:	2301      	moveq	r3, #1
    332c:	6183      	streq	r3, [r0, #24]
    332e:	f000 f81f 	bl	3370 <__sfp>
    3332:	6060      	str	r0, [r4, #4]
    3334:	4620      	mov	r0, r4
    3336:	f000 f81b 	bl	3370 <__sfp>
    333a:	60a0      	str	r0, [r4, #8]
    333c:	4620      	mov	r0, r4
    333e:	f000 f817 	bl	3370 <__sfp>
    3342:	2200      	movs	r2, #0
    3344:	60e0      	str	r0, [r4, #12]
    3346:	2104      	movs	r1, #4
    3348:	6860      	ldr	r0, [r4, #4]
    334a:	f7ff ffa1 	bl	3290 <std>
    334e:	2201      	movs	r2, #1
    3350:	2109      	movs	r1, #9
    3352:	68a0      	ldr	r0, [r4, #8]
    3354:	f7ff ff9c 	bl	3290 <std>
    3358:	2202      	movs	r2, #2
    335a:	2112      	movs	r1, #18
    335c:	68e0      	ldr	r0, [r4, #12]
    335e:	f7ff ff97 	bl	3290 <std>
    3362:	2301      	movs	r3, #1
    3364:	61a3      	str	r3, [r4, #24]
    3366:	bd10      	pop	{r4, pc}
    3368:	00003f64 	.word	0x00003f64
    336c:	000032d9 	.word	0x000032d9

00003370 <__sfp>:
    3370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3372:	4b1b      	ldr	r3, [pc, #108]	; (33e0 <__sfp+0x70>)
    3374:	4607      	mov	r7, r0
    3376:	681e      	ldr	r6, [r3, #0]
    3378:	69b3      	ldr	r3, [r6, #24]
    337a:	b913      	cbnz	r3, 3382 <__sfp+0x12>
    337c:	4630      	mov	r0, r6
    337e:	f7ff ffc7 	bl	3310 <__sinit>
    3382:	3648      	adds	r6, #72	; 0x48
    3384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    3388:	3b01      	subs	r3, #1
    338a:	d503      	bpl.n	3394 <__sfp+0x24>
    338c:	6833      	ldr	r3, [r6, #0]
    338e:	b133      	cbz	r3, 339e <__sfp+0x2e>
    3390:	6836      	ldr	r6, [r6, #0]
    3392:	e7f7      	b.n	3384 <__sfp+0x14>
    3394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3398:	b16d      	cbz	r5, 33b6 <__sfp+0x46>
    339a:	3468      	adds	r4, #104	; 0x68
    339c:	e7f4      	b.n	3388 <__sfp+0x18>
    339e:	2104      	movs	r1, #4
    33a0:	4638      	mov	r0, r7
    33a2:	f7ff ff9f 	bl	32e4 <__sfmoreglue>
    33a6:	6030      	str	r0, [r6, #0]
    33a8:	2800      	cmp	r0, #0
    33aa:	d1f1      	bne.n	3390 <__sfp+0x20>
    33ac:	230c      	movs	r3, #12
    33ae:	4604      	mov	r4, r0
    33b0:	603b      	str	r3, [r7, #0]
    33b2:	4620      	mov	r0, r4
    33b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33b6:	4b0b      	ldr	r3, [pc, #44]	; (33e4 <__sfp+0x74>)
    33b8:	6665      	str	r5, [r4, #100]	; 0x64
    33ba:	e9c4 5500 	strd	r5, r5, [r4]
    33be:	60a5      	str	r5, [r4, #8]
    33c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
    33c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
    33c8:	2208      	movs	r2, #8
    33ca:	4629      	mov	r1, r5
    33cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    33d0:	f7ff fd82 	bl	2ed8 <memset>
    33d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    33d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    33dc:	e7e9      	b.n	33b2 <__sfp+0x42>
    33de:	bf00      	nop
    33e0:	00003f64 	.word	0x00003f64
    33e4:	ffff0001 	.word	0xffff0001

000033e8 <_fwalk_reent>:
    33e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    33ec:	4680      	mov	r8, r0
    33ee:	4689      	mov	r9, r1
    33f0:	2600      	movs	r6, #0
    33f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
    33f6:	b914      	cbnz	r4, 33fe <_fwalk_reent+0x16>
    33f8:	4630      	mov	r0, r6
    33fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    3402:	3f01      	subs	r7, #1
    3404:	d501      	bpl.n	340a <_fwalk_reent+0x22>
    3406:	6824      	ldr	r4, [r4, #0]
    3408:	e7f5      	b.n	33f6 <_fwalk_reent+0xe>
    340a:	89ab      	ldrh	r3, [r5, #12]
    340c:	2b01      	cmp	r3, #1
    340e:	d907      	bls.n	3420 <_fwalk_reent+0x38>
    3410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    3414:	3301      	adds	r3, #1
    3416:	d003      	beq.n	3420 <_fwalk_reent+0x38>
    3418:	4629      	mov	r1, r5
    341a:	4640      	mov	r0, r8
    341c:	47c8      	blx	r9
    341e:	4306      	orrs	r6, r0
    3420:	3568      	adds	r5, #104	; 0x68
    3422:	e7ee      	b.n	3402 <_fwalk_reent+0x1a>

00003424 <__swhatbuf_r>:
    3424:	b570      	push	{r4, r5, r6, lr}
    3426:	460e      	mov	r6, r1
    3428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    342c:	b096      	sub	sp, #88	; 0x58
    342e:	2900      	cmp	r1, #0
    3430:	4614      	mov	r4, r2
    3432:	461d      	mov	r5, r3
    3434:	da07      	bge.n	3446 <__swhatbuf_r+0x22>
    3436:	2300      	movs	r3, #0
    3438:	602b      	str	r3, [r5, #0]
    343a:	89b3      	ldrh	r3, [r6, #12]
    343c:	061a      	lsls	r2, r3, #24
    343e:	d410      	bmi.n	3462 <__swhatbuf_r+0x3e>
    3440:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3444:	e00e      	b.n	3464 <__swhatbuf_r+0x40>
    3446:	466a      	mov	r2, sp
    3448:	f000 f96c 	bl	3724 <_fstat_r>
    344c:	2800      	cmp	r0, #0
    344e:	dbf2      	blt.n	3436 <__swhatbuf_r+0x12>
    3450:	9a01      	ldr	r2, [sp, #4]
    3452:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3456:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    345a:	425a      	negs	r2, r3
    345c:	415a      	adcs	r2, r3
    345e:	602a      	str	r2, [r5, #0]
    3460:	e7ee      	b.n	3440 <__swhatbuf_r+0x1c>
    3462:	2340      	movs	r3, #64	; 0x40
    3464:	2000      	movs	r0, #0
    3466:	6023      	str	r3, [r4, #0]
    3468:	b016      	add	sp, #88	; 0x58
    346a:	bd70      	pop	{r4, r5, r6, pc}

0000346c <__smakebuf_r>:
    346c:	898b      	ldrh	r3, [r1, #12]
    346e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3470:	079d      	lsls	r5, r3, #30
    3472:	4606      	mov	r6, r0
    3474:	460c      	mov	r4, r1
    3476:	d507      	bpl.n	3488 <__smakebuf_r+0x1c>
    3478:	f104 0347 	add.w	r3, r4, #71	; 0x47
    347c:	6023      	str	r3, [r4, #0]
    347e:	6123      	str	r3, [r4, #16]
    3480:	2301      	movs	r3, #1
    3482:	6163      	str	r3, [r4, #20]
    3484:	b002      	add	sp, #8
    3486:	bd70      	pop	{r4, r5, r6, pc}
    3488:	ab01      	add	r3, sp, #4
    348a:	466a      	mov	r2, sp
    348c:	f7ff ffca 	bl	3424 <__swhatbuf_r>
    3490:	9900      	ldr	r1, [sp, #0]
    3492:	4605      	mov	r5, r0
    3494:	4630      	mov	r0, r6
    3496:	f000 f875 	bl	3584 <_malloc_r>
    349a:	b948      	cbnz	r0, 34b0 <__smakebuf_r+0x44>
    349c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34a0:	059a      	lsls	r2, r3, #22
    34a2:	d4ef      	bmi.n	3484 <__smakebuf_r+0x18>
    34a4:	f023 0303 	bic.w	r3, r3, #3
    34a8:	f043 0302 	orr.w	r3, r3, #2
    34ac:	81a3      	strh	r3, [r4, #12]
    34ae:	e7e3      	b.n	3478 <__smakebuf_r+0xc>
    34b0:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <__smakebuf_r+0x7c>)
    34b2:	62b3      	str	r3, [r6, #40]	; 0x28
    34b4:	89a3      	ldrh	r3, [r4, #12]
    34b6:	6020      	str	r0, [r4, #0]
    34b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    34bc:	81a3      	strh	r3, [r4, #12]
    34be:	9b00      	ldr	r3, [sp, #0]
    34c0:	6120      	str	r0, [r4, #16]
    34c2:	6163      	str	r3, [r4, #20]
    34c4:	9b01      	ldr	r3, [sp, #4]
    34c6:	b15b      	cbz	r3, 34e0 <__smakebuf_r+0x74>
    34c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    34cc:	4630      	mov	r0, r6
    34ce:	f000 f93b 	bl	3748 <_isatty_r>
    34d2:	b128      	cbz	r0, 34e0 <__smakebuf_r+0x74>
    34d4:	89a3      	ldrh	r3, [r4, #12]
    34d6:	f023 0303 	bic.w	r3, r3, #3
    34da:	f043 0301 	orr.w	r3, r3, #1
    34de:	81a3      	strh	r3, [r4, #12]
    34e0:	89a3      	ldrh	r3, [r4, #12]
    34e2:	431d      	orrs	r5, r3
    34e4:	81a5      	strh	r5, [r4, #12]
    34e6:	e7cd      	b.n	3484 <__smakebuf_r+0x18>
    34e8:	000032d9 	.word	0x000032d9

000034ec <_free_r>:
    34ec:	b538      	push	{r3, r4, r5, lr}
    34ee:	4605      	mov	r5, r0
    34f0:	2900      	cmp	r1, #0
    34f2:	d043      	beq.n	357c <_free_r+0x90>
    34f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    34f8:	1f0c      	subs	r4, r1, #4
    34fa:	2b00      	cmp	r3, #0
    34fc:	bfb8      	it	lt
    34fe:	18e4      	addlt	r4, r4, r3
    3500:	f000 f944 	bl	378c <__malloc_lock>
    3504:	4a1e      	ldr	r2, [pc, #120]	; (3580 <_free_r+0x94>)
    3506:	6813      	ldr	r3, [r2, #0]
    3508:	4610      	mov	r0, r2
    350a:	b933      	cbnz	r3, 351a <_free_r+0x2e>
    350c:	6063      	str	r3, [r4, #4]
    350e:	6014      	str	r4, [r2, #0]
    3510:	4628      	mov	r0, r5
    3512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3516:	f000 b93a 	b.w	378e <__malloc_unlock>
    351a:	42a3      	cmp	r3, r4
    351c:	d90b      	bls.n	3536 <_free_r+0x4a>
    351e:	6821      	ldr	r1, [r4, #0]
    3520:	1862      	adds	r2, r4, r1
    3522:	4293      	cmp	r3, r2
    3524:	bf01      	itttt	eq
    3526:	681a      	ldreq	r2, [r3, #0]
    3528:	685b      	ldreq	r3, [r3, #4]
    352a:	1852      	addeq	r2, r2, r1
    352c:	6022      	streq	r2, [r4, #0]
    352e:	6063      	str	r3, [r4, #4]
    3530:	6004      	str	r4, [r0, #0]
    3532:	e7ed      	b.n	3510 <_free_r+0x24>
    3534:	4613      	mov	r3, r2
    3536:	685a      	ldr	r2, [r3, #4]
    3538:	b10a      	cbz	r2, 353e <_free_r+0x52>
    353a:	42a2      	cmp	r2, r4
    353c:	d9fa      	bls.n	3534 <_free_r+0x48>
    353e:	6819      	ldr	r1, [r3, #0]
    3540:	1858      	adds	r0, r3, r1
    3542:	42a0      	cmp	r0, r4
    3544:	d10b      	bne.n	355e <_free_r+0x72>
    3546:	6820      	ldr	r0, [r4, #0]
    3548:	4401      	add	r1, r0
    354a:	1858      	adds	r0, r3, r1
    354c:	4282      	cmp	r2, r0
    354e:	6019      	str	r1, [r3, #0]
    3550:	d1de      	bne.n	3510 <_free_r+0x24>
    3552:	6810      	ldr	r0, [r2, #0]
    3554:	6852      	ldr	r2, [r2, #4]
    3556:	4401      	add	r1, r0
    3558:	6019      	str	r1, [r3, #0]
    355a:	605a      	str	r2, [r3, #4]
    355c:	e7d8      	b.n	3510 <_free_r+0x24>
    355e:	d902      	bls.n	3566 <_free_r+0x7a>
    3560:	230c      	movs	r3, #12
    3562:	602b      	str	r3, [r5, #0]
    3564:	e7d4      	b.n	3510 <_free_r+0x24>
    3566:	6820      	ldr	r0, [r4, #0]
    3568:	1821      	adds	r1, r4, r0
    356a:	428a      	cmp	r2, r1
    356c:	bf01      	itttt	eq
    356e:	6811      	ldreq	r1, [r2, #0]
    3570:	6852      	ldreq	r2, [r2, #4]
    3572:	1809      	addeq	r1, r1, r0
    3574:	6021      	streq	r1, [r4, #0]
    3576:	6062      	str	r2, [r4, #4]
    3578:	605c      	str	r4, [r3, #4]
    357a:	e7c9      	b.n	3510 <_free_r+0x24>
    357c:	bd38      	pop	{r3, r4, r5, pc}
    357e:	bf00      	nop
    3580:	2000006c 	.word	0x2000006c

00003584 <_malloc_r>:
    3584:	b570      	push	{r4, r5, r6, lr}
    3586:	1ccd      	adds	r5, r1, #3
    3588:	f025 0503 	bic.w	r5, r5, #3
    358c:	3508      	adds	r5, #8
    358e:	2d0c      	cmp	r5, #12
    3590:	bf38      	it	cc
    3592:	250c      	movcc	r5, #12
    3594:	2d00      	cmp	r5, #0
    3596:	4606      	mov	r6, r0
    3598:	db01      	blt.n	359e <_malloc_r+0x1a>
    359a:	42a9      	cmp	r1, r5
    359c:	d903      	bls.n	35a6 <_malloc_r+0x22>
    359e:	230c      	movs	r3, #12
    35a0:	6033      	str	r3, [r6, #0]
    35a2:	2000      	movs	r0, #0
    35a4:	bd70      	pop	{r4, r5, r6, pc}
    35a6:	f000 f8f1 	bl	378c <__malloc_lock>
    35aa:	4a21      	ldr	r2, [pc, #132]	; (3630 <_malloc_r+0xac>)
    35ac:	6814      	ldr	r4, [r2, #0]
    35ae:	4621      	mov	r1, r4
    35b0:	b991      	cbnz	r1, 35d8 <_malloc_r+0x54>
    35b2:	4c20      	ldr	r4, [pc, #128]	; (3634 <_malloc_r+0xb0>)
    35b4:	6823      	ldr	r3, [r4, #0]
    35b6:	b91b      	cbnz	r3, 35c0 <_malloc_r+0x3c>
    35b8:	4630      	mov	r0, r6
    35ba:	f000 f83d 	bl	3638 <_sbrk_r>
    35be:	6020      	str	r0, [r4, #0]
    35c0:	4629      	mov	r1, r5
    35c2:	4630      	mov	r0, r6
    35c4:	f000 f838 	bl	3638 <_sbrk_r>
    35c8:	1c43      	adds	r3, r0, #1
    35ca:	d124      	bne.n	3616 <_malloc_r+0x92>
    35cc:	230c      	movs	r3, #12
    35ce:	4630      	mov	r0, r6
    35d0:	6033      	str	r3, [r6, #0]
    35d2:	f000 f8dc 	bl	378e <__malloc_unlock>
    35d6:	e7e4      	b.n	35a2 <_malloc_r+0x1e>
    35d8:	680b      	ldr	r3, [r1, #0]
    35da:	1b5b      	subs	r3, r3, r5
    35dc:	d418      	bmi.n	3610 <_malloc_r+0x8c>
    35de:	2b0b      	cmp	r3, #11
    35e0:	d90f      	bls.n	3602 <_malloc_r+0x7e>
    35e2:	600b      	str	r3, [r1, #0]
    35e4:	18cc      	adds	r4, r1, r3
    35e6:	50cd      	str	r5, [r1, r3]
    35e8:	4630      	mov	r0, r6
    35ea:	f000 f8d0 	bl	378e <__malloc_unlock>
    35ee:	f104 000b 	add.w	r0, r4, #11
    35f2:	1d23      	adds	r3, r4, #4
    35f4:	f020 0007 	bic.w	r0, r0, #7
    35f8:	1ac3      	subs	r3, r0, r3
    35fa:	d0d3      	beq.n	35a4 <_malloc_r+0x20>
    35fc:	425a      	negs	r2, r3
    35fe:	50e2      	str	r2, [r4, r3]
    3600:	e7d0      	b.n	35a4 <_malloc_r+0x20>
    3602:	684b      	ldr	r3, [r1, #4]
    3604:	428c      	cmp	r4, r1
    3606:	bf16      	itet	ne
    3608:	6063      	strne	r3, [r4, #4]
    360a:	6013      	streq	r3, [r2, #0]
    360c:	460c      	movne	r4, r1
    360e:	e7eb      	b.n	35e8 <_malloc_r+0x64>
    3610:	460c      	mov	r4, r1
    3612:	6849      	ldr	r1, [r1, #4]
    3614:	e7cc      	b.n	35b0 <_malloc_r+0x2c>
    3616:	1cc4      	adds	r4, r0, #3
    3618:	f024 0403 	bic.w	r4, r4, #3
    361c:	42a0      	cmp	r0, r4
    361e:	d005      	beq.n	362c <_malloc_r+0xa8>
    3620:	1a21      	subs	r1, r4, r0
    3622:	4630      	mov	r0, r6
    3624:	f000 f808 	bl	3638 <_sbrk_r>
    3628:	3001      	adds	r0, #1
    362a:	d0cf      	beq.n	35cc <_malloc_r+0x48>
    362c:	6025      	str	r5, [r4, #0]
    362e:	e7db      	b.n	35e8 <_malloc_r+0x64>
    3630:	2000006c 	.word	0x2000006c
    3634:	20000070 	.word	0x20000070

00003638 <_sbrk_r>:
    3638:	b538      	push	{r3, r4, r5, lr}
    363a:	2300      	movs	r3, #0
    363c:	4c05      	ldr	r4, [pc, #20]	; (3654 <_sbrk_r+0x1c>)
    363e:	4605      	mov	r5, r0
    3640:	4608      	mov	r0, r1
    3642:	6023      	str	r3, [r4, #0]
    3644:	f000 f8de 	bl	3804 <_sbrk>
    3648:	1c43      	adds	r3, r0, #1
    364a:	d102      	bne.n	3652 <_sbrk_r+0x1a>
    364c:	6823      	ldr	r3, [r4, #0]
    364e:	b103      	cbz	r3, 3652 <_sbrk_r+0x1a>
    3650:	602b      	str	r3, [r5, #0]
    3652:	bd38      	pop	{r3, r4, r5, pc}
    3654:	20000098 	.word	0x20000098

00003658 <__sread>:
    3658:	b510      	push	{r4, lr}
    365a:	460c      	mov	r4, r1
    365c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3660:	f000 f896 	bl	3790 <_read_r>
    3664:	2800      	cmp	r0, #0
    3666:	bfab      	itete	ge
    3668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    366a:	89a3      	ldrhlt	r3, [r4, #12]
    366c:	181b      	addge	r3, r3, r0
    366e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    3672:	bfac      	ite	ge
    3674:	6563      	strge	r3, [r4, #84]	; 0x54
    3676:	81a3      	strhlt	r3, [r4, #12]
    3678:	bd10      	pop	{r4, pc}

0000367a <__swrite>:
    367a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    367e:	461f      	mov	r7, r3
    3680:	898b      	ldrh	r3, [r1, #12]
    3682:	4605      	mov	r5, r0
    3684:	05db      	lsls	r3, r3, #23
    3686:	460c      	mov	r4, r1
    3688:	4616      	mov	r6, r2
    368a:	d505      	bpl.n	3698 <__swrite+0x1e>
    368c:	2302      	movs	r3, #2
    368e:	2200      	movs	r2, #0
    3690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3694:	f000 f868 	bl	3768 <_lseek_r>
    3698:	89a3      	ldrh	r3, [r4, #12]
    369a:	4632      	mov	r2, r6
    369c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    36a0:	81a3      	strh	r3, [r4, #12]
    36a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    36a6:	463b      	mov	r3, r7
    36a8:	4628      	mov	r0, r5
    36aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36ae:	f000 b817 	b.w	36e0 <_write_r>

000036b2 <__sseek>:
    36b2:	b510      	push	{r4, lr}
    36b4:	460c      	mov	r4, r1
    36b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    36ba:	f000 f855 	bl	3768 <_lseek_r>
    36be:	1c43      	adds	r3, r0, #1
    36c0:	89a3      	ldrh	r3, [r4, #12]
    36c2:	bf15      	itete	ne
    36c4:	6560      	strne	r0, [r4, #84]	; 0x54
    36c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    36ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    36ce:	81a3      	strheq	r3, [r4, #12]
    36d0:	bf18      	it	ne
    36d2:	81a3      	strhne	r3, [r4, #12]
    36d4:	bd10      	pop	{r4, pc}

000036d6 <__sclose>:
    36d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    36da:	f000 b813 	b.w	3704 <_close_r>
	...

000036e0 <_write_r>:
    36e0:	b538      	push	{r3, r4, r5, lr}
    36e2:	4605      	mov	r5, r0
    36e4:	4608      	mov	r0, r1
    36e6:	4611      	mov	r1, r2
    36e8:	2200      	movs	r2, #0
    36ea:	4c05      	ldr	r4, [pc, #20]	; (3700 <_write_r+0x20>)
    36ec:	6022      	str	r2, [r4, #0]
    36ee:	461a      	mov	r2, r3
    36f0:	f7ff fba0 	bl	2e34 <_write>
    36f4:	1c43      	adds	r3, r0, #1
    36f6:	d102      	bne.n	36fe <_write_r+0x1e>
    36f8:	6823      	ldr	r3, [r4, #0]
    36fa:	b103      	cbz	r3, 36fe <_write_r+0x1e>
    36fc:	602b      	str	r3, [r5, #0]
    36fe:	bd38      	pop	{r3, r4, r5, pc}
    3700:	20000098 	.word	0x20000098

00003704 <_close_r>:
    3704:	b538      	push	{r3, r4, r5, lr}
    3706:	2300      	movs	r3, #0
    3708:	4c05      	ldr	r4, [pc, #20]	; (3720 <_close_r+0x1c>)
    370a:	4605      	mov	r5, r0
    370c:	4608      	mov	r0, r1
    370e:	6023      	str	r3, [r4, #0]
    3710:	f000 f850 	bl	37b4 <_close>
    3714:	1c43      	adds	r3, r0, #1
    3716:	d102      	bne.n	371e <_close_r+0x1a>
    3718:	6823      	ldr	r3, [r4, #0]
    371a:	b103      	cbz	r3, 371e <_close_r+0x1a>
    371c:	602b      	str	r3, [r5, #0]
    371e:	bd38      	pop	{r3, r4, r5, pc}
    3720:	20000098 	.word	0x20000098

00003724 <_fstat_r>:
    3724:	b538      	push	{r3, r4, r5, lr}
    3726:	2300      	movs	r3, #0
    3728:	4c06      	ldr	r4, [pc, #24]	; (3744 <_fstat_r+0x20>)
    372a:	4605      	mov	r5, r0
    372c:	4608      	mov	r0, r1
    372e:	4611      	mov	r1, r2
    3730:	6023      	str	r3, [r4, #0]
    3732:	f000 f847 	bl	37c4 <_fstat>
    3736:	1c43      	adds	r3, r0, #1
    3738:	d102      	bne.n	3740 <_fstat_r+0x1c>
    373a:	6823      	ldr	r3, [r4, #0]
    373c:	b103      	cbz	r3, 3740 <_fstat_r+0x1c>
    373e:	602b      	str	r3, [r5, #0]
    3740:	bd38      	pop	{r3, r4, r5, pc}
    3742:	bf00      	nop
    3744:	20000098 	.word	0x20000098

00003748 <_isatty_r>:
    3748:	b538      	push	{r3, r4, r5, lr}
    374a:	2300      	movs	r3, #0
    374c:	4c05      	ldr	r4, [pc, #20]	; (3764 <_isatty_r+0x1c>)
    374e:	4605      	mov	r5, r0
    3750:	4608      	mov	r0, r1
    3752:	6023      	str	r3, [r4, #0]
    3754:	f000 f83e 	bl	37d4 <_isatty>
    3758:	1c43      	adds	r3, r0, #1
    375a:	d102      	bne.n	3762 <_isatty_r+0x1a>
    375c:	6823      	ldr	r3, [r4, #0]
    375e:	b103      	cbz	r3, 3762 <_isatty_r+0x1a>
    3760:	602b      	str	r3, [r5, #0]
    3762:	bd38      	pop	{r3, r4, r5, pc}
    3764:	20000098 	.word	0x20000098

00003768 <_lseek_r>:
    3768:	b538      	push	{r3, r4, r5, lr}
    376a:	4605      	mov	r5, r0
    376c:	4608      	mov	r0, r1
    376e:	4611      	mov	r1, r2
    3770:	2200      	movs	r2, #0
    3772:	4c05      	ldr	r4, [pc, #20]	; (3788 <_lseek_r+0x20>)
    3774:	6022      	str	r2, [r4, #0]
    3776:	461a      	mov	r2, r3
    3778:	f000 f834 	bl	37e4 <_lseek>
    377c:	1c43      	adds	r3, r0, #1
    377e:	d102      	bne.n	3786 <_lseek_r+0x1e>
    3780:	6823      	ldr	r3, [r4, #0]
    3782:	b103      	cbz	r3, 3786 <_lseek_r+0x1e>
    3784:	602b      	str	r3, [r5, #0]
    3786:	bd38      	pop	{r3, r4, r5, pc}
    3788:	20000098 	.word	0x20000098

0000378c <__malloc_lock>:
    378c:	4770      	bx	lr

0000378e <__malloc_unlock>:
    378e:	4770      	bx	lr

00003790 <_read_r>:
    3790:	b538      	push	{r3, r4, r5, lr}
    3792:	4605      	mov	r5, r0
    3794:	4608      	mov	r0, r1
    3796:	4611      	mov	r1, r2
    3798:	2200      	movs	r2, #0
    379a:	4c05      	ldr	r4, [pc, #20]	; (37b0 <_read_r+0x20>)
    379c:	6022      	str	r2, [r4, #0]
    379e:	461a      	mov	r2, r3
    37a0:	f000 f828 	bl	37f4 <_read>
    37a4:	1c43      	adds	r3, r0, #1
    37a6:	d102      	bne.n	37ae <_read_r+0x1e>
    37a8:	6823      	ldr	r3, [r4, #0]
    37aa:	b103      	cbz	r3, 37ae <_read_r+0x1e>
    37ac:	602b      	str	r3, [r5, #0]
    37ae:	bd38      	pop	{r3, r4, r5, pc}
    37b0:	20000098 	.word	0x20000098

000037b4 <_close>:
    37b4:	2258      	movs	r2, #88	; 0x58
    37b6:	4b02      	ldr	r3, [pc, #8]	; (37c0 <_close+0xc>)
    37b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37bc:	601a      	str	r2, [r3, #0]
    37be:	4770      	bx	lr
    37c0:	20000098 	.word	0x20000098

000037c4 <_fstat>:
    37c4:	2258      	movs	r2, #88	; 0x58
    37c6:	4b02      	ldr	r3, [pc, #8]	; (37d0 <_fstat+0xc>)
    37c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37cc:	601a      	str	r2, [r3, #0]
    37ce:	4770      	bx	lr
    37d0:	20000098 	.word	0x20000098

000037d4 <_isatty>:
    37d4:	2258      	movs	r2, #88	; 0x58
    37d6:	4b02      	ldr	r3, [pc, #8]	; (37e0 <_isatty+0xc>)
    37d8:	2000      	movs	r0, #0
    37da:	601a      	str	r2, [r3, #0]
    37dc:	4770      	bx	lr
    37de:	bf00      	nop
    37e0:	20000098 	.word	0x20000098

000037e4 <_lseek>:
    37e4:	2258      	movs	r2, #88	; 0x58
    37e6:	4b02      	ldr	r3, [pc, #8]	; (37f0 <_lseek+0xc>)
    37e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37ec:	601a      	str	r2, [r3, #0]
    37ee:	4770      	bx	lr
    37f0:	20000098 	.word	0x20000098

000037f4 <_read>:
    37f4:	2258      	movs	r2, #88	; 0x58
    37f6:	4b02      	ldr	r3, [pc, #8]	; (3800 <_read+0xc>)
    37f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37fc:	601a      	str	r2, [r3, #0]
    37fe:	4770      	bx	lr
    3800:	20000098 	.word	0x20000098

00003804 <_sbrk>:
    3804:	4a04      	ldr	r2, [pc, #16]	; (3818 <_sbrk+0x14>)
    3806:	4905      	ldr	r1, [pc, #20]	; (381c <_sbrk+0x18>)
    3808:	6813      	ldr	r3, [r2, #0]
    380a:	2b00      	cmp	r3, #0
    380c:	bf08      	it	eq
    380e:	460b      	moveq	r3, r1
    3810:	4418      	add	r0, r3
    3812:	6010      	str	r0, [r2, #0]
    3814:	4618      	mov	r0, r3
    3816:	4770      	bx	lr
    3818:	20000074 	.word	0x20000074
    381c:	200000a0 	.word	0x200000a0

00003820 <_exit>:
    3820:	e7fe      	b.n	3820 <_exit>
    3822:	bf00      	nop

00003824 <_init>:
    3824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3826:	bf00      	nop

00003828 <_fini>:
    3828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    382a:	bf00      	nop
    382c:	622d3631 	.word	0x622d3631
    3830:	66207469 	.word	0x66207469
    3834:	20656572 	.word	0x20656572
    3838:	6e6e7572 	.word	0x6e6e7572
    383c:	20676e69 	.word	0x20676e69
    3840:	65646f6d 	.word	0x65646f6d
    3844:	7270202c 	.word	0x7270202c
    3848:	61637365 	.word	0x61637365
    384c:	3d20656c 	.word	0x3d20656c
    3850:	313a3120 	.word	0x313a3120
    3854:	6f6e202c 	.word	0x6f6e202c
    3858:	746e6920 	.word	0x746e6920
    385c:	75727265 	.word	0x75727265
    3860:	00007470 	.word	0x00007470
    3864:	622d3631 	.word	0x622d3631
    3868:	66207469 	.word	0x66207469
    386c:	20656572 	.word	0x20656572
    3870:	6e6e7572 	.word	0x6e6e7572
    3874:	20676e69 	.word	0x20676e69
    3878:	65646f6d 	.word	0x65646f6d
    387c:	7270202c 	.word	0x7270202c
    3880:	61637365 	.word	0x61637365
    3884:	3d20656c 	.word	0x3d20656c
    3888:	313a3120 	.word	0x313a3120
    388c:	6e202c36 	.word	0x6e202c36
    3890:	6e69206f 	.word	0x6e69206f
    3894:	72726574 	.word	0x72726574
    3898:	00747075 	.word	0x00747075
    389c:	622d3631 	.word	0x622d3631
    38a0:	66207469 	.word	0x66207469
    38a4:	20656572 	.word	0x20656572
    38a8:	6e6e7572 	.word	0x6e6e7572
    38ac:	20676e69 	.word	0x20676e69
    38b0:	65646f6d 	.word	0x65646f6d
    38b4:	7270202c 	.word	0x7270202c
    38b8:	61637365 	.word	0x61637365
    38bc:	3d20656c 	.word	0x3d20656c
    38c0:	323a3120 	.word	0x323a3120
    38c4:	202c3635 	.word	0x202c3635
    38c8:	69206f6e 	.word	0x69206f6e
    38cc:	7265746e 	.word	0x7265746e
    38d0:	74707572 	.word	0x74707572
    38d4:	00000000 	.word	0x00000000
    38d8:	622d3631 	.word	0x622d3631
    38dc:	66207469 	.word	0x66207469
    38e0:	20656572 	.word	0x20656572
    38e4:	6e6e7572 	.word	0x6e6e7572
    38e8:	20676e69 	.word	0x20676e69
    38ec:	65646f6d 	.word	0x65646f6d
    38f0:	7270202c 	.word	0x7270202c
    38f4:	61637365 	.word	0x61637365
    38f8:	3d20656c 	.word	0x3d20656c
    38fc:	313a3120 	.word	0x313a3120
    3900:	6977202c 	.word	0x6977202c
    3904:	69206874 	.word	0x69206874
    3908:	7265746e 	.word	0x7265746e
    390c:	74707572 	.word	0x74707572
    3910:	00000000 	.word	0x00000000
    3914:	52492020 	.word	0x52492020
    3918:	00000051 	.word	0x00000051
    391c:	622d3233 	.word	0x622d3233
    3920:	66207469 	.word	0x66207469
    3924:	20656572 	.word	0x20656572
    3928:	6e6e7572 	.word	0x6e6e7572
    392c:	20676e69 	.word	0x20676e69
    3930:	65646f6d 	.word	0x65646f6d
    3934:	7270202c 	.word	0x7270202c
    3938:	61637365 	.word	0x61637365
    393c:	3d20656c 	.word	0x3d20656c
    3940:	313a3120 	.word	0x313a3120
    3944:	6f6e202c 	.word	0x6f6e202c
    3948:	746e6920 	.word	0x746e6920
    394c:	75727265 	.word	0x75727265
    3950:	00007470 	.word	0x00007470
    3954:	622d3233 	.word	0x622d3233
    3958:	66207469 	.word	0x66207469
    395c:	20656572 	.word	0x20656572
    3960:	6e6e7572 	.word	0x6e6e7572
    3964:	20676e69 	.word	0x20676e69
    3968:	65646f6d 	.word	0x65646f6d
    396c:	7270202c 	.word	0x7270202c
    3970:	61637365 	.word	0x61637365
    3974:	3d20656c 	.word	0x3d20656c
    3978:	313a3120 	.word	0x313a3120
    397c:	6e202c36 	.word	0x6e202c36
    3980:	6e69206f 	.word	0x6e69206f
    3984:	72726574 	.word	0x72726574
    3988:	00747075 	.word	0x00747075
    398c:	622d3233 	.word	0x622d3233
    3990:	66207469 	.word	0x66207469
    3994:	20656572 	.word	0x20656572
    3998:	6e6e7572 	.word	0x6e6e7572
    399c:	20676e69 	.word	0x20676e69
    39a0:	65646f6d 	.word	0x65646f6d
    39a4:	7270202c 	.word	0x7270202c
    39a8:	61637365 	.word	0x61637365
    39ac:	3d20656c 	.word	0x3d20656c
    39b0:	323a3120 	.word	0x323a3120
    39b4:	202c3635 	.word	0x202c3635
    39b8:	69206f6e 	.word	0x69206f6e
    39bc:	7265746e 	.word	0x7265746e
    39c0:	74707572 	.word	0x74707572
    39c4:	00000000 	.word	0x00000000
    39c8:	622d3233 	.word	0x622d3233
    39cc:	66207469 	.word	0x66207469
    39d0:	20656572 	.word	0x20656572
    39d4:	6e6e7572 	.word	0x6e6e7572
    39d8:	20676e69 	.word	0x20676e69
    39dc:	65646f6d 	.word	0x65646f6d
    39e0:	7270202c 	.word	0x7270202c
    39e4:	61637365 	.word	0x61637365
    39e8:	3d20656c 	.word	0x3d20656c
    39ec:	313a3120 	.word	0x313a3120
    39f0:	6977202c 	.word	0x6977202c
    39f4:	69206874 	.word	0x69206874
    39f8:	7265746e 	.word	0x7265746e
    39fc:	74707572 	.word	0x74707572
    3a00:	00000000 	.word	0x00000000
    3a04:	622d3631 	.word	0x622d3631
    3a08:	70207469 	.word	0x70207469
    3a0c:	6f697265 	.word	0x6f697265
    3a10:	20636964 	.word	0x20636964
    3a14:	65646f6d 	.word	0x65646f6d
    3a18:	7270202c 	.word	0x7270202c
    3a1c:	61637365 	.word	0x61637365
    3a20:	3d20656c 	.word	0x3d20656c
    3a24:	313a3120 	.word	0x313a3120
    3a28:	6f6e202c 	.word	0x6f6e202c
    3a2c:	746e6920 	.word	0x746e6920
    3a30:	75727265 	.word	0x75727265
    3a34:	00007470 	.word	0x00007470
    3a38:	622d3631 	.word	0x622d3631
    3a3c:	70207469 	.word	0x70207469
    3a40:	6f697265 	.word	0x6f697265
    3a44:	20636964 	.word	0x20636964
    3a48:	65646f6d 	.word	0x65646f6d
    3a4c:	7270202c 	.word	0x7270202c
    3a50:	61637365 	.word	0x61637365
    3a54:	3d20656c 	.word	0x3d20656c
    3a58:	313a3120 	.word	0x313a3120
    3a5c:	6e202c36 	.word	0x6e202c36
    3a60:	6e69206f 	.word	0x6e69206f
    3a64:	72726574 	.word	0x72726574
    3a68:	00747075 	.word	0x00747075
    3a6c:	622d3631 	.word	0x622d3631
    3a70:	70207469 	.word	0x70207469
    3a74:	6f697265 	.word	0x6f697265
    3a78:	20636964 	.word	0x20636964
    3a7c:	65646f6d 	.word	0x65646f6d
    3a80:	7270202c 	.word	0x7270202c
    3a84:	61637365 	.word	0x61637365
    3a88:	3d20656c 	.word	0x3d20656c
    3a8c:	323a3120 	.word	0x323a3120
    3a90:	202c3635 	.word	0x202c3635
    3a94:	69206f6e 	.word	0x69206f6e
    3a98:	7265746e 	.word	0x7265746e
    3a9c:	74707572 	.word	0x74707572
    3aa0:	00000000 	.word	0x00000000
    3aa4:	622d3631 	.word	0x622d3631
    3aa8:	70207469 	.word	0x70207469
    3aac:	6f697265 	.word	0x6f697265
    3ab0:	20636964 	.word	0x20636964
    3ab4:	65646f6d 	.word	0x65646f6d
    3ab8:	7270202c 	.word	0x7270202c
    3abc:	61637365 	.word	0x61637365
    3ac0:	3d20656c 	.word	0x3d20656c
    3ac4:	313a3120 	.word	0x313a3120
    3ac8:	6977202c 	.word	0x6977202c
    3acc:	69206874 	.word	0x69206874
    3ad0:	7265746e 	.word	0x7265746e
    3ad4:	74707572 	.word	0x74707572
    3ad8:	00347820 	.word	0x00347820
    3adc:	622d3233 	.word	0x622d3233
    3ae0:	70207469 	.word	0x70207469
    3ae4:	6f697265 	.word	0x6f697265
    3ae8:	20636964 	.word	0x20636964
    3aec:	65646f6d 	.word	0x65646f6d
    3af0:	7270202c 	.word	0x7270202c
    3af4:	61637365 	.word	0x61637365
    3af8:	3d20656c 	.word	0x3d20656c
    3afc:	313a3120 	.word	0x313a3120
    3b00:	6f6e202c 	.word	0x6f6e202c
    3b04:	746e6920 	.word	0x746e6920
    3b08:	75727265 	.word	0x75727265
    3b0c:	00007470 	.word	0x00007470
    3b10:	622d3233 	.word	0x622d3233
    3b14:	70207469 	.word	0x70207469
    3b18:	6f697265 	.word	0x6f697265
    3b1c:	20636964 	.word	0x20636964
    3b20:	65646f6d 	.word	0x65646f6d
    3b24:	7270202c 	.word	0x7270202c
    3b28:	61637365 	.word	0x61637365
    3b2c:	3d20656c 	.word	0x3d20656c
    3b30:	313a3120 	.word	0x313a3120
    3b34:	6e202c36 	.word	0x6e202c36
    3b38:	6e69206f 	.word	0x6e69206f
    3b3c:	72726574 	.word	0x72726574
    3b40:	00747075 	.word	0x00747075
    3b44:	622d3233 	.word	0x622d3233
    3b48:	70207469 	.word	0x70207469
    3b4c:	6f697265 	.word	0x6f697265
    3b50:	20636964 	.word	0x20636964
    3b54:	65646f6d 	.word	0x65646f6d
    3b58:	7270202c 	.word	0x7270202c
    3b5c:	61637365 	.word	0x61637365
    3b60:	3d20656c 	.word	0x3d20656c
    3b64:	323a3120 	.word	0x323a3120
    3b68:	202c3635 	.word	0x202c3635
    3b6c:	69206f6e 	.word	0x69206f6e
    3b70:	7265746e 	.word	0x7265746e
    3b74:	74707572 	.word	0x74707572
    3b78:	00000000 	.word	0x00000000
    3b7c:	622d3233 	.word	0x622d3233
    3b80:	70207469 	.word	0x70207469
    3b84:	6f697265 	.word	0x6f697265
    3b88:	20636964 	.word	0x20636964
    3b8c:	65646f6d 	.word	0x65646f6d
    3b90:	7270202c 	.word	0x7270202c
    3b94:	61637365 	.word	0x61637365
    3b98:	3d20656c 	.word	0x3d20656c
    3b9c:	313a3120 	.word	0x313a3120
    3ba0:	6977202c 	.word	0x6977202c
    3ba4:	69206874 	.word	0x69206874
    3ba8:	7265746e 	.word	0x7265746e
    3bac:	74707572 	.word	0x74707572
    3bb0:	00347820 	.word	0x00347820
    3bb4:	622d3631 	.word	0x622d3631
    3bb8:	6f207469 	.word	0x6f207469
    3bbc:	7320656e 	.word	0x7320656e
    3bc0:	20746f68 	.word	0x20746f68
    3bc4:	65646f6d 	.word	0x65646f6d
    3bc8:	7270202c 	.word	0x7270202c
    3bcc:	61637365 	.word	0x61637365
    3bd0:	3d20656c 	.word	0x3d20656c
    3bd4:	313a3120 	.word	0x313a3120
    3bd8:	6f6e202c 	.word	0x6f6e202c
    3bdc:	746e6920 	.word	0x746e6920
    3be0:	75727265 	.word	0x75727265
    3be4:	00007470 	.word	0x00007470
    3be8:	622d3631 	.word	0x622d3631
    3bec:	6f207469 	.word	0x6f207469
    3bf0:	7320656e 	.word	0x7320656e
    3bf4:	20746f68 	.word	0x20746f68
    3bf8:	65646f6d 	.word	0x65646f6d
    3bfc:	7270202c 	.word	0x7270202c
    3c00:	61637365 	.word	0x61637365
    3c04:	3d20656c 	.word	0x3d20656c
    3c08:	313a3120 	.word	0x313a3120
    3c0c:	6e202c36 	.word	0x6e202c36
    3c10:	6e69206f 	.word	0x6e69206f
    3c14:	72726574 	.word	0x72726574
    3c18:	00747075 	.word	0x00747075
    3c1c:	622d3631 	.word	0x622d3631
    3c20:	6f207469 	.word	0x6f207469
    3c24:	7320656e 	.word	0x7320656e
    3c28:	20746f68 	.word	0x20746f68
    3c2c:	65646f6d 	.word	0x65646f6d
    3c30:	7270202c 	.word	0x7270202c
    3c34:	61637365 	.word	0x61637365
    3c38:	3d20656c 	.word	0x3d20656c
    3c3c:	313a3120 	.word	0x313a3120
    3c40:	6977202c 	.word	0x6977202c
    3c44:	69206874 	.word	0x69206874
    3c48:	7265746e 	.word	0x7265746e
    3c4c:	74707572 	.word	0x74707572
    3c50:	00000000 	.word	0x00000000
    3c54:	622d3233 	.word	0x622d3233
    3c58:	6f207469 	.word	0x6f207469
    3c5c:	7320656e 	.word	0x7320656e
    3c60:	20746f68 	.word	0x20746f68
    3c64:	65646f6d 	.word	0x65646f6d
    3c68:	7270202c 	.word	0x7270202c
    3c6c:	61637365 	.word	0x61637365
    3c70:	3d20656c 	.word	0x3d20656c
    3c74:	313a3120 	.word	0x313a3120
    3c78:	6f6e202c 	.word	0x6f6e202c
    3c7c:	746e6920 	.word	0x746e6920
    3c80:	75727265 	.word	0x75727265
    3c84:	00007470 	.word	0x00007470
    3c88:	622d3233 	.word	0x622d3233
    3c8c:	6f207469 	.word	0x6f207469
    3c90:	7320656e 	.word	0x7320656e
    3c94:	20746f68 	.word	0x20746f68
    3c98:	65646f6d 	.word	0x65646f6d
    3c9c:	7270202c 	.word	0x7270202c
    3ca0:	61637365 	.word	0x61637365
    3ca4:	3d20656c 	.word	0x3d20656c
    3ca8:	313a3120 	.word	0x313a3120
    3cac:	6e202c36 	.word	0x6e202c36
    3cb0:	6e69206f 	.word	0x6e69206f
    3cb4:	72726574 	.word	0x72726574
    3cb8:	00747075 	.word	0x00747075
    3cbc:	622d3233 	.word	0x622d3233
    3cc0:	6f207469 	.word	0x6f207469
    3cc4:	7320656e 	.word	0x7320656e
    3cc8:	20746f68 	.word	0x20746f68
    3ccc:	65646f6d 	.word	0x65646f6d
    3cd0:	7270202c 	.word	0x7270202c
    3cd4:	61637365 	.word	0x61637365
    3cd8:	3d20656c 	.word	0x3d20656c
    3cdc:	313a3120 	.word	0x313a3120
    3ce0:	6977202c 	.word	0x6977202c
    3ce4:	69206874 	.word	0x69206874
    3ce8:	7265746e 	.word	0x7265746e
    3cec:	74707572 	.word	0x74707572
    3cf0:	00000000 	.word	0x00000000
    3cf4:	4f525245 	.word	0x4f525245
    3cf8:	55203a52 	.word	0x55203a52
    3cfc:	7078656e 	.word	0x7078656e
    3d00:	65746365 	.word	0x65746365
    3d04:	75642064 	.word	0x75642064
    3d08:	74206c61 	.word	0x74206c61
    3d0c:	72656d69 	.word	0x72656d69
    3d10:	49203120 	.word	0x49203120
    3d14:	00005152 	.word	0x00005152
    3d18:	4f525245 	.word	0x4f525245
    3d1c:	55203a52 	.word	0x55203a52
    3d20:	7078656e 	.word	0x7078656e
    3d24:	65746365 	.word	0x65746365
    3d28:	75642064 	.word	0x75642064
    3d2c:	74206c61 	.word	0x74206c61
    3d30:	72656d69 	.word	0x72656d69
    3d34:	49203220 	.word	0x49203220
    3d38:	00005152 	.word	0x00005152
    3d3c:	445b2020 	.word	0x445b2020
    3d40:	746c6175 	.word	0x746c6175
    3d44:	72656d69 	.word	0x72656d69
    3d48:	746e6920 	.word	0x746e6920
    3d4c:	75727265 	.word	0x75727265
    3d50:	74207470 	.word	0x74207470
    3d54:	67676972 	.word	0x67676972
    3d58:	64657265 	.word	0x64657265
    3d5c:	0000005d 	.word	0x0000005d
    3d60:	65746e49 	.word	0x65746e49
    3d64:	74617267 	.word	0x74617267
    3d68:	206e6f69 	.word	0x206e6f69
    3d6c:	74736574 	.word	0x74736574
    3d70:	6d656420 	.word	0x6d656420
    3d74:	0000006f 	.word	0x0000006f
    3d78:	202d2020 	.word	0x202d2020
    3d7c:	65746e49 	.word	0x65746e49
    3d80:	74617267 	.word	0x74617267
    3d84:	206e6f69 	.word	0x206e6f69
    3d88:	74736554 	.word	0x74736554
    3d8c:	6e6f4320 	.word	0x6e6f4320
    3d90:	6c6f7274 	.word	0x6c6f7274
    3d94:	67655220 	.word	0x67655220
    3d98:	65747369 	.word	0x65747369
    3d9c:	65722072 	.word	0x65722072
    3da0:	65206461 	.word	0x65206461
    3da4:	726f7272 	.word	0x726f7272
    3da8:	00000000 	.word	0x00000000
    3dac:	202d2020 	.word	0x202d2020
    3db0:	65746e49 	.word	0x65746e49
    3db4:	74617267 	.word	0x74617267
    3db8:	206e6f69 	.word	0x206e6f69
    3dbc:	74736554 	.word	0x74736554
    3dc0:	65706f20 	.word	0x65706f20
    3dc4:	69746172 	.word	0x69746172
    3dc8:	31206e6f 	.word	0x31206e6f
    3dcc:	69616620 	.word	0x69616620
    3dd0:	0064656c 	.word	0x0064656c
    3dd4:	202d2020 	.word	0x202d2020
    3dd8:	65746e49 	.word	0x65746e49
    3ddc:	74617267 	.word	0x74617267
    3de0:	206e6f69 	.word	0x206e6f69
    3de4:	74736554 	.word	0x74736554
    3de8:	65706f20 	.word	0x65706f20
    3dec:	69746172 	.word	0x69746172
    3df0:	32206e6f 	.word	0x32206e6f
    3df4:	69616620 	.word	0x69616620
    3df8:	0064656c 	.word	0x0064656c
    3dfc:	202d2020 	.word	0x202d2020
    3e00:	65746e49 	.word	0x65746e49
    3e04:	74617267 	.word	0x74617267
    3e08:	206e6f69 	.word	0x206e6f69
    3e0c:	746e6f43 	.word	0x746e6f43
    3e10:	206c6f72 	.word	0x206c6f72
    3e14:	61656c63 	.word	0x61656c63
    3e18:	72652072 	.word	0x72652072
    3e1c:	00726f72 	.word	0x00726f72
    3e20:	4f525245 	.word	0x4f525245
    3e24:	49203a52 	.word	0x49203a52
    3e28:	6765746e 	.word	0x6765746e
    3e2c:	69746172 	.word	0x69746172
    3e30:	74206e6f 	.word	0x74206e6f
    3e34:	20747365 	.word	0x20747365
    3e38:	6c696166 	.word	0x6c696166
    3e3c:	000a6465 	.word	0x000a6465
    3e40:	65746e49 	.word	0x65746e49
    3e44:	74617267 	.word	0x74617267
    3e48:	206e6f69 	.word	0x206e6f69
    3e4c:	74736574 	.word	0x74736574
    3e50:	6d6f6320 	.word	0x6d6f6320
    3e54:	74656c70 	.word	0x74656c70
    3e58:	73206465 	.word	0x73206465
    3e5c:	65636375 	.word	0x65636375
    3e60:	75667373 	.word	0x75667373
    3e64:	0a796c6c 	.word	0x0a796c6c
    3e68:	00000000 	.word	0x00000000
    3e6c:	726f430a 	.word	0x726f430a
    3e70:	2d786574 	.word	0x2d786574
    3e74:	4420334d 	.word	0x4420334d
    3e78:	67697365 	.word	0x67697365
    3e7c:	6174536e 	.word	0x6174536e
    3e80:	2d207472 	.word	0x2d207472
    3e84:	61754420 	.word	0x61754420
    3e88:	6954206c 	.word	0x6954206c
    3e8c:	2072656d 	.word	0x2072656d
    3e90:	6f6d6544 	.word	0x6f6d6544
    3e94:	72202d20 	.word	0x72202d20
    3e98:	73697665 	.word	0x73697665
    3e9c:	206e6f69 	.word	0x206e6f69
    3ea0:	76655224 	.word	0x76655224
    3ea4:	6f697369 	.word	0x6f697369
    3ea8:	32203a6e 	.word	0x32203a6e
    3eac:	38343234 	.word	0x38343234
    3eb0:	0a242034 	.word	0x0a242034
    3eb4:	00000000 	.word	0x00000000
    3eb8:	2d2d2d0a 	.word	0x2d2d2d0a
    3ebc:	2d2d2d2d 	.word	0x2d2d2d2d
    3ec0:	2d2d2d2d 	.word	0x2d2d2d2d
    3ec4:	2d2d2d2d 	.word	0x2d2d2d2d
    3ec8:	2d2d2d2d 	.word	0x2d2d2d2d
    3ecc:	2d2d2d2d 	.word	0x2d2d2d2d
    3ed0:	2d2d2d2d 	.word	0x2d2d2d2d
    3ed4:	2d2d2d2d 	.word	0x2d2d2d2d
    3ed8:	0000002d 	.word	0x0000002d
    3edc:	656d6954 	.word	0x656d6954
    3ee0:	00312072 	.word	0x00312072
    3ee4:	2d2d2d2d 	.word	0x2d2d2d2d
    3ee8:	2d2d2d2d 	.word	0x2d2d2d2d
    3eec:	2d2d2d2d 	.word	0x2d2d2d2d
    3ef0:	2d2d2d2d 	.word	0x2d2d2d2d
    3ef4:	2d2d2d2d 	.word	0x2d2d2d2d
    3ef8:	2d2d2d2d 	.word	0x2d2d2d2d
    3efc:	2d2d2d2d 	.word	0x2d2d2d2d
    3f00:	2d2d2d2d 	.word	0x2d2d2d2d
    3f04:	0000000a 	.word	0x0000000a
    3f08:	656d6954 	.word	0x656d6954
    3f0c:	00322072 	.word	0x00322072
    3f10:	65746e49 	.word	0x65746e49
    3f14:	74617267 	.word	0x74617267
    3f18:	206e6f69 	.word	0x206e6f69
    3f1c:	74736574 	.word	0x74736574
    3f20:	00000000 	.word	0x00000000
    3f24:	54202a2a 	.word	0x54202a2a
    3f28:	20545345 	.word	0x20545345
    3f2c:	53534150 	.word	0x53534150
    3f30:	2a204445 	.word	0x2a204445
    3f34:	000a202a 	.word	0x000a202a
    3f38:	54202a2a 	.word	0x54202a2a
    3f3c:	20545345 	.word	0x20545345
    3f40:	50494b53 	.word	0x50494b53
    3f44:	20444550 	.word	0x20444550
    3f48:	44202a2a 	.word	0x44202a2a
    3f4c:	206c6175 	.word	0x206c6175
    3f50:	656d6974 	.word	0x656d6974
    3f54:	6f6e2072 	.word	0x6f6e2072
    3f58:	72702074 	.word	0x72702074
    3f5c:	6e657365 	.word	0x6e657365
    3f60:	000a2e74 	.word	0x000a2e74

00003f64 <_global_impure_ptr>:
    3f64:	20000008                                ... 

00003f68 <__sf_fake_stderr>:
	...

00003f88 <__sf_fake_stdin>:
	...

00003fa8 <__sf_fake_stdout>:
	...
