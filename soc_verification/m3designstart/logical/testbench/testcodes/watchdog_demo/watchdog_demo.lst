
watchdog_demo.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	00000391 	.word	0x00000391
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fa6d 	bl	628 <main>
    bl    exit
     14e:	f000 fb2b 	bl	7a8 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00001c23 	.word	0x00001c23
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000088 	.word	0x20000088
    ldr     r0,=SystemInit
     168:	00000799 	.word	0x00000799
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <Reset_Handler+0x48>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <watchdog_id_check>:
{
unsigned char wdog_id;
#define HW32_REG(ADDRESS)  (*((volatile unsigned long  *)(ADDRESS)))
#define HW8_REG(ADDRESS)   (*((volatile unsigned char  *)(ADDRESS)))

wdog_id = HW8_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE8) & 0x07;
     1f0:	4a09      	ldr	r2, [pc, #36]	; (218 <Stack_Size+0x18>)

if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     1f2:	4b0a      	ldr	r3, [pc, #40]	; (21c <Stack_Size+0x1c>)
wdog_id = HW8_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE8) & 0x07;
     1f4:	7810      	ldrb	r0, [r2, #0]
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     1f6:	681b      	ldr	r3, [r3, #0]
wdog_id = HW8_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE8) & 0x07;
     1f8:	b2c0      	uxtb	r0, r0
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     1fa:	2b24      	cmp	r3, #36	; 0x24
     1fc:	d001      	beq.n	202 <Stack_Size+0x2>
    (HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE4) != 0xB8) ||
    (wdog_id != 0x03))
  return 1; /* part ID & ARM ID does not match */
     1fe:	2001      	movs	r0, #1
else
  return 0;
}
     200:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE4) != 0xB8) ||
     202:	4b07      	ldr	r3, [pc, #28]	; (220 <Stack_Size+0x20>)
     204:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     206:	2bb8      	cmp	r3, #184	; 0xb8
     208:	d1f9      	bne.n	1fe <watchdog_id_check+0xe>
    (HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE4) != 0xB8) ||
     20a:	f000 0007 	and.w	r0, r0, #7
     20e:	3803      	subs	r0, #3
     210:	bf18      	it	ne
     212:	2001      	movne	r0, #1
     214:	4770      	bx	lr
     216:	bf00      	nop
     218:	40008fe8 	.word	0x40008fe8
     21c:	40008fe0 	.word	0x40008fe0
     220:	40008fe4 	.word	0x40008fe4

00000224 <sysctrl_id_check>:
int sysctrl_id_check(void)
{ /* CM3DS_MPS2 SysCtrl part ID range from 826 to 829 */
if ((HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) < 0x26) ||
     224:	4b07      	ldr	r3, [pc, #28]	; (244 <sysctrl_id_check+0x20>)
     226:	681a      	ldr	r2, [r3, #0]
     228:	2a25      	cmp	r2, #37	; 0x25
     22a:	d908      	bls.n	23e <sysctrl_id_check+0x1a>
    (HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) > 0x29) ||
     22c:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) < 0x26) ||
     22e:	2b29      	cmp	r3, #41	; 0x29
     230:	d805      	bhi.n	23e <sysctrl_id_check+0x1a>
    (HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE4) != 0xB8))
     232:	4b05      	ldr	r3, [pc, #20]	; (248 <sysctrl_id_check+0x24>)
     234:	6818      	ldr	r0, [r3, #0]
    (HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) > 0x29) ||
     236:	38b8      	subs	r0, #184	; 0xb8
     238:	bf18      	it	ne
     23a:	2001      	movne	r0, #1
     23c:	4770      	bx	lr
  return 1; /* part ID does not match */
     23e:	2001      	movs	r0, #1
else
  return 0;
}
     240:	4770      	bx	lr
     242:	bf00      	nop
     244:	4001ffe0 	.word	0x4001ffe0
     248:	4001ffe4 	.word	0x4001ffe4

0000024c <main_prog_part_2>:


/* ----------------------------------------------------------------- */
/* Second part of the main test program - execute after watchdog reset */
void main_prog_part_2(void)
{
     24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result=0;
  unsigned int read_data;
  puts("Main program part 2");
     24e:	483d      	ldr	r0, [pc, #244]	; (344 <main_prog_part_2+0xf8>)
  puts("- Watchdog reset completed");
  read_data = CM3DS_MPS2_SYSCON->RSTINFO;
     250:	4c3d      	ldr	r4, [pc, #244]	; (348 <main_prog_part_2+0xfc>)
  puts("Main program part 2");
     252:	f000 fb39 	bl	8c8 <puts>
  puts("- Watchdog reset completed");
     256:	483d      	ldr	r0, [pc, #244]	; (34c <main_prog_part_2+0x100>)
     258:	f000 fb36 	bl	8c8 <puts>
  read_data = CM3DS_MPS2_SYSCON->RSTINFO;
     25c:	6925      	ldr	r5, [r4, #16]
  printf ("  SYSCON->RSTINFO = %x\n", read_data);
     25e:	483c      	ldr	r0, [pc, #240]	; (350 <main_prog_part_2+0x104>)
     260:	4629      	mov	r1, r5
     262:	f000 fabd 	bl	7e0 <iprintf>

  if (read_data != CM3DS_MPS2_SYSCON_RSTINFO_WDOGRESETREQ_Msk) {
     266:	2d02      	cmp	r5, #2
     268:	d054      	beq.n	314 <main_prog_part_2+0xc8>
     result++;
  }
  puts("- Clear reset info");
     26a:	483a      	ldr	r0, [pc, #232]	; (354 <main_prog_part_2+0x108>)
     26c:	f000 fb2c 	bl	8c8 <puts>
  CM3DS_MPS2_SYSCON->RSTINFO = CM3DS_MPS2_SYSCON_RSTINFO_WDOGRESETREQ_Msk;
     270:	2302      	movs	r3, #2
     272:	6123      	str	r3, [r4, #16]
  read_data = CM3DS_MPS2_SYSCON->RSTINFO;
     274:	6924      	ldr	r4, [r4, #16]
  printf ("  SYSCON->RSTINFO = %x\n", read_data);
     276:	4836      	ldr	r0, [pc, #216]	; (350 <main_prog_part_2+0x104>)
     278:	4621      	mov	r1, r4
     27a:	f000 fab1 	bl	7e0 <iprintf>
     result++;
     27e:	2c00      	cmp	r4, #0
     280:	bf14      	ite	ne
     282:	2502      	movne	r5, #2
     284:	2501      	moveq	r5, #1
  {
     result++;
  }

  if (result != 0) {
    puts ("ERROR: reset info register value incorrect.\n");
     286:	4834      	ldr	r0, [pc, #208]	; (358 <main_prog_part_2+0x10c>)
     288:	f000 fb1e 	bl	8c8 <puts>
      registers. You can also use integration test register to generate reset
      but this will cause this part of the test running again and again, so we
      will not demonstrate it here.
   */

  puts("Testing generation of NMI using integration test register");
     28c:	4833      	ldr	r0, [pc, #204]	; (35c <main_prog_part_2+0x110>)
     28e:	f000 fb1b 	bl	8c8 <puts>
  reset_test = 0;
     292:	2300      	movs	r3, #0
  integration_test = 1;
     294:	2201      	movs	r2, #1
  reset_test = 0;
     296:	4e32      	ldr	r6, [pc, #200]	; (360 <main_prog_part_2+0x114>)
}
/* ----------------------------------------------------------------- */
/* Unlock watchdog access */
void watchdog_unlock(void)
{
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     298:	4c32      	ldr	r4, [pc, #200]	; (364 <main_prog_part_2+0x118>)
  reset_test = 0;
     29a:	6033      	str	r3, [r6, #0]
  integration_test = 1;
     29c:	4f32      	ldr	r7, [pc, #200]	; (368 <main_prog_part_2+0x11c>)
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     29e:	4e33      	ldr	r6, [pc, #204]	; (36c <main_prog_part_2+0x120>)
  nmi_expected = 0;
     2a0:	4833      	ldr	r0, [pc, #204]	; (370 <main_prog_part_2+0x124>)
  nmi_occurred = 0;
     2a2:	4934      	ldr	r1, [pc, #208]	; (374 <main_prog_part_2+0x128>)
  integration_test = 1;
     2a4:	603a      	str	r2, [r7, #0]
  nmi_expected = 0;
     2a6:	6003      	str	r3, [r0, #0]
  nmi_occurred = 0;
     2a8:	600b      	str	r3, [r1, #0]
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     2aa:	f8c4 6c00 	str.w	r6, [r4, #3072]	; 0xc00
  CM3DS_MPS2_WATCHDOG->ITOP = 0;  // Ensure NMI and reset in integration test mode are 0
     2ae:	f8c4 3f04 	str.w	r3, [r4, #3844]	; 0xf04
  CM3DS_MPS2_WATCHDOG->ITCR = 1;  // Enable integration test mode
     2b2:	f8c4 2f00 	str.w	r2, [r4, #3840]	; 0xf00
  if (CM3DS_MPS2_WATCHDOG->ITCR == 0) {
     2b6:	f8d4 6f00 	ldr.w	r6, [r4, #3840]	; 0xf00
     2ba:	2e00      	cmp	r6, #0
     2bc:	d038      	beq.n	330 <main_prog_part_2+0xe4>
    CM3DS_MPS2_WATCHDOG->ITOP = 2;  // Set NMI output to 1
     2be:	2602      	movs	r6, #2
    nmi_expected = 1;
     2c0:	6002      	str	r2, [r0, #0]
    CM3DS_MPS2_WATCHDOG->ITOP = 2;  // Set NMI output to 1
     2c2:	f8c4 6f04 	str.w	r6, [r4, #3844]	; 0xf04
    CM3DS_MPS2_WATCHDOG->ITOP = 0;  // Set NMI output to 0
     2c6:	f8c4 3f04 	str.w	r3, [r4, #3844]	; 0xf04
    if (nmi_occurred==0) {
     2ca:	680e      	ldr	r6, [r1, #0]
     2cc:	b166      	cbz	r6, 2e8 <main_prog_part_2+0x9c>
    CM3DS_MPS2_WATCHDOG->ITCR = 0;  // Disable integration test mode
     2ce:	f8c4 3f00 	str.w	r3, [r4, #3840]	; 0xf00
    if (CM3DS_MPS2_WATCHDOG->ITCR != 0) {
     2d2:	f8d4 3f00 	ldr.w	r3, [r4, #3840]	; 0xf00
     2d6:	b9b3      	cbnz	r3, 306 <main_prog_part_2+0xba>
  if (result != 0) {
     2d8:	b975      	cbnz	r5, 2f8 <main_prog_part_2+0xac>
    puts ("Watchdog demo completed successfully\n** TEST PASSED ** \n");
     2da:	4827      	ldr	r0, [pc, #156]	; (378 <main_prog_part_2+0x12c>)
     2dc:	f000 faf4 	bl	8c8 <puts>
}
     2e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  UartEndSimulation(); /* Simulation stops in UartEndSimulation */
     2e4:	f000 ba48 	b.w	778 <UartEndSimulation>
       puts ("  - Integration Test operation failed");
     2e8:	4824      	ldr	r0, [pc, #144]	; (37c <main_prog_part_2+0x130>)
     2ea:	f000 faed 	bl	8c8 <puts>
    CM3DS_MPS2_WATCHDOG->ITCR = 0;  // Disable integration test mode
     2ee:	f8c4 6f00 	str.w	r6, [r4, #3840]	; 0xf00
    if (CM3DS_MPS2_WATCHDOG->ITCR != 0) {
     2f2:	f8d4 3f00 	ldr.w	r3, [r4, #3840]	; 0xf00
     2f6:	b933      	cbnz	r3, 306 <main_prog_part_2+0xba>
    puts ("** TEST FAILED ** Errors in Watchdog test\n");
     2f8:	4821      	ldr	r0, [pc, #132]	; (380 <main_prog_part_2+0x134>)
     2fa:	f000 fae5 	bl	8c8 <puts>
}
     2fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  UartEndSimulation(); /* Simulation stops in UartEndSimulation */
     302:	f000 ba39 	b.w	778 <UartEndSimulation>
      puts ("  - Integration Control clear error");
     306:	481f      	ldr	r0, [pc, #124]	; (384 <main_prog_part_2+0x138>)
     308:	f000 fade 	bl	8c8 <puts>
    puts ("** TEST FAILED ** Errors in Watchdog test\n");
     30c:	481c      	ldr	r0, [pc, #112]	; (380 <main_prog_part_2+0x134>)
     30e:	f000 fadb 	bl	8c8 <puts>
     312:	e7f4      	b.n	2fe <main_prog_part_2+0xb2>
  puts("- Clear reset info");
     314:	480f      	ldr	r0, [pc, #60]	; (354 <main_prog_part_2+0x108>)
     316:	f000 fad7 	bl	8c8 <puts>
  CM3DS_MPS2_SYSCON->RSTINFO = CM3DS_MPS2_SYSCON_RSTINFO_WDOGRESETREQ_Msk;
     31a:	6125      	str	r5, [r4, #16]
  read_data = CM3DS_MPS2_SYSCON->RSTINFO;
     31c:	6925      	ldr	r5, [r4, #16]
  printf ("  SYSCON->RSTINFO = %x\n", read_data);
     31e:	480c      	ldr	r0, [pc, #48]	; (350 <main_prog_part_2+0x104>)
     320:	4629      	mov	r1, r5
     322:	f000 fa5d 	bl	7e0 <iprintf>
  if (read_data != 0)/* RSTINFO should be cleared */
     326:	b955      	cbnz	r5, 33e <main_prog_part_2+0xf2>
    puts ("Watchdog reset performed successfully\n");
     328:	4817      	ldr	r0, [pc, #92]	; (388 <main_prog_part_2+0x13c>)
     32a:	f000 facd 	bl	8c8 <puts>
     32e:	e7ad      	b.n	28c <main_prog_part_2+0x40>
     puts ("  - Integration Control read error");
     330:	4816      	ldr	r0, [pc, #88]	; (38c <main_prog_part_2+0x140>)
     332:	f000 fac9 	bl	8c8 <puts>
    puts ("** TEST FAILED ** Errors in Watchdog test\n");
     336:	4812      	ldr	r0, [pc, #72]	; (380 <main_prog_part_2+0x134>)
     338:	f000 fac6 	bl	8c8 <puts>
     33c:	e7df      	b.n	2fe <main_prog_part_2+0xb2>
  if (read_data != 0)/* RSTINFO should be cleared */
     33e:	2501      	movs	r5, #1
     340:	e7a1      	b.n	286 <main_prog_part_2+0x3a>
     342:	bf00      	nop
     344:	000016f8 	.word	0x000016f8
     348:	4001f000 	.word	0x4001f000
     34c:	0000170c 	.word	0x0000170c
     350:	00001728 	.word	0x00001728
     354:	00001884 	.word	0x00001884
     358:	00001740 	.word	0x00001740
     35c:	00001770 	.word	0x00001770
     360:	20000080 	.word	0x20000080
     364:	40008000 	.word	0x40008000
     368:	20000068 	.word	0x20000068
     36c:	1acce551 	.word	0x1acce551
     370:	2000007c 	.word	0x2000007c
     374:	20000078 	.word	0x20000078
     378:	00001848 	.word	0x00001848
     37c:	000017d0 	.word	0x000017d0
     380:	0000181c 	.word	0x0000181c
     384:	000017f8 	.word	0x000017f8
     388:	00001898 	.word	0x00001898
     38c:	000017ac 	.word	0x000017ac

00000390 <NMI_Handler>:
{
     390:	b510      	push	{r4, lr}
  puts ("NMI Handler Entered! \n");
     392:	4814      	ldr	r0, [pc, #80]	; (3e4 <NMI_Handler+0x54>)
     394:	f000 fa98 	bl	8c8 <puts>
  if (reset_test==1){  /* When testing watchdog reset, need to stay
     398:	4b13      	ldr	r3, [pc, #76]	; (3e8 <NMI_Handler+0x58>)
     39a:	681b      	ldr	r3, [r3, #0]
     39c:	2b01      	cmp	r3, #1
     39e:	d01f      	beq.n	3e0 <NMI_Handler+0x50>
/* ----------------------------------------------------------------- */
/* Clear watchdog interrupt request */
void watchdog_irq_clear(void)
{
  watchdog_unlock();
  CM3DS_MPS2_WATCHDOG->INTCLR = CM3DS_MPS2_Watchdog_INTCLR_Msk;
     3a0:	2001      	movs	r0, #1
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     3a2:	2100      	movs	r1, #0
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     3a4:	4b11      	ldr	r3, [pc, #68]	; (3ec <NMI_Handler+0x5c>)
     3a6:	4c12      	ldr	r4, [pc, #72]	; (3f0 <NMI_Handler+0x60>)
  nmi_occurred++; /* Update software flag */
     3a8:	4a12      	ldr	r2, [pc, #72]	; (3f4 <NMI_Handler+0x64>)
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     3aa:	f8c3 4c00 	str.w	r4, [r3, #3072]	; 0xc00
  CM3DS_MPS2_WATCHDOG->INTCLR = CM3DS_MPS2_Watchdog_INTCLR_Msk;
     3ae:	60d8      	str	r0, [r3, #12]
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     3b0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
  nmi_occurred++; /* Update software flag */
     3b4:	6813      	ldr	r3, [r2, #0]
  if (nmi_expected==0) { /* error check */
     3b6:	4910      	ldr	r1, [pc, #64]	; (3f8 <NMI_Handler+0x68>)
  nmi_occurred++; /* Update software flag */
     3b8:	4403      	add	r3, r0
     3ba:	6013      	str	r3, [r2, #0]
  if (nmi_expected==0) { /* error check */
     3bc:	680b      	ldr	r3, [r1, #0]
     3be:	b923      	cbnz	r3, 3ca <NMI_Handler+0x3a>
    puts ("ERROR : NMI occurred unexpectedly\n");
     3c0:	480e      	ldr	r0, [pc, #56]	; (3fc <NMI_Handler+0x6c>)
     3c2:	f000 fa81 	bl	8c8 <puts>
    UartEndSimulation(); /* Simulation stop */
     3c6:	f000 f9d7 	bl	778 <UartEndSimulation>
  if (integration_test!=0) {
     3ca:	4b0d      	ldr	r3, [pc, #52]	; (400 <NMI_Handler+0x70>)
     3cc:	681b      	ldr	r3, [r3, #0]
     3ce:	b133      	cbz	r3, 3de <NMI_Handler+0x4e>
    CM3DS_MPS2_WATCHDOG->ITOP = 0;  // Set NMI output to 0
     3d0:	2200      	movs	r2, #0
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     3d2:	4b06      	ldr	r3, [pc, #24]	; (3ec <NMI_Handler+0x5c>)
     3d4:	4906      	ldr	r1, [pc, #24]	; (3f0 <NMI_Handler+0x60>)
     3d6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
    CM3DS_MPS2_WATCHDOG->ITOP = 0;  // Set NMI output to 0
     3da:	f8c3 2f04 	str.w	r2, [r3, #3844]	; 0xf04
}
     3de:	bd10      	pop	{r4, pc}
     3e0:	e7fe      	b.n	3e0 <NMI_Handler+0x50>
     3e2:	bf00      	nop
     3e4:	000018c0 	.word	0x000018c0
     3e8:	20000080 	.word	0x20000080
     3ec:	40008000 	.word	0x40008000
     3f0:	1acce551 	.word	0x1acce551
     3f4:	20000078 	.word	0x20000078
     3f8:	2000007c 	.word	0x2000007c
     3fc:	000018d8 	.word	0x000018d8
     400:	20000068 	.word	0x20000068

00000404 <watchdog_init>:
{
     404:	b570      	push	{r4, r5, r6, lr}
     406:	4606      	mov	r6, r0
     408:	460d      	mov	r5, r1
  puts   ("  Unlocking watchdog...");
     40a:	4811      	ldr	r0, [pc, #68]	; (450 <watchdog_init+0x4c>)
     40c:	f000 fa5c 	bl	8c8 <puts>
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     410:	4c10      	ldr	r4, [pc, #64]	; (454 <watchdog_init+0x50>)
     412:	4b11      	ldr	r3, [pc, #68]	; (458 <watchdog_init+0x54>)
     414:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
  CM3DS_MPS2_WATCHDOG->LOAD = cycle;
     418:	6026      	str	r6, [r4, #0]
  if (type==0) {
     41a:	b19d      	cbz	r5, 444 <watchdog_init+0x40>
  } else if (type==1) {
     41c:	2d01      	cmp	r5, #1
     41e:	d00c      	beq.n	43a <watchdog_init+0x36>
    puts   ("  Set to reset generation");
     420:	480e      	ldr	r0, [pc, #56]	; (45c <watchdog_init+0x58>)
     422:	f000 fa51 	bl	8c8 <puts>
    CM3DS_MPS2_WATCHDOG->CTRL = CM3DS_MPS2_Watchdog_CTRL_RESEN_Msk|CM3DS_MPS2_Watchdog_CTRL_INTEN_Msk;
     426:	2303      	movs	r3, #3
     428:	60a3      	str	r3, [r4, #8]
  puts   ("  Locking watchdog...");
     42a:	480d      	ldr	r0, [pc, #52]	; (460 <watchdog_init+0x5c>)
     42c:	f000 fa4c 	bl	8c8 <puts>
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     430:	2200      	movs	r2, #0
     432:	4b08      	ldr	r3, [pc, #32]	; (454 <watchdog_init+0x50>)
     434:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
     438:	bd70      	pop	{r4, r5, r6, pc}
    puts   ("  Set to NMI generation");
     43a:	480a      	ldr	r0, [pc, #40]	; (464 <watchdog_init+0x60>)
     43c:	f000 fa44 	bl	8c8 <puts>
    CM3DS_MPS2_WATCHDOG->CTRL = CM3DS_MPS2_Watchdog_CTRL_INTEN_Msk;
     440:	60a5      	str	r5, [r4, #8]
     442:	e7f2      	b.n	42a <watchdog_init+0x26>
    puts   ("  Set to no action");
     444:	4808      	ldr	r0, [pc, #32]	; (468 <watchdog_init+0x64>)
     446:	f000 fa3f 	bl	8c8 <puts>
    CM3DS_MPS2_WATCHDOG->CTRL = 0;
     44a:	60a5      	str	r5, [r4, #8]
     44c:	e7ed      	b.n	42a <watchdog_init+0x26>
     44e:	bf00      	nop
     450:	000018fc 	.word	0x000018fc
     454:	40008000 	.word	0x40008000
     458:	1acce551 	.word	0x1acce551
     45c:	00001940 	.word	0x00001940
     460:	0000195c 	.word	0x0000195c
     464:	00001928 	.word	0x00001928
     468:	00001914 	.word	0x00001914

0000046c <main_prog_part_1>:
{
     46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  reset_test = 0;
     470:	2400      	movs	r4, #0
  const char expected_id[8]={0x24, 0xB8, 0x1B, 0x00, 0x0D, 0xF0, 0x05, 0xB1};
     472:	4a44      	ldr	r2, [pc, #272]	; (584 <main_prog_part_1+0x118>)
     474:	4b44      	ldr	r3, [pc, #272]	; (588 <main_prog_part_1+0x11c>)
  reset_test = 0;
     476:	f8df 8144 	ldr.w	r8, [pc, #324]	; 5bc <main_prog_part_1+0x150>
{
     47a:	b083      	sub	sp, #12
  puts("Main program part 1\n");
     47c:	4843      	ldr	r0, [pc, #268]	; (58c <main_prog_part_1+0x120>)
  const char expected_id[8]={0x24, 0xB8, 0x1B, 0x00, 0x0D, 0xF0, 0x05, 0xB1};
     47e:	e9cd 2300 	strd	r2, r3, [sp]
  reset_test = 0;
     482:	f8c8 4000 	str.w	r4, [r8]
  puts("Main program part 1\n");
     486:	f000 fa1f 	bl	8c8 <puts>
  puts("- Detect ID registers\n");
     48a:	4841      	ldr	r0, [pc, #260]	; (590 <main_prog_part_1+0x124>)
     48c:	f000 fa1c 	bl	8c8 <puts>
     490:	4d40      	ldr	r5, [pc, #256]	; (594 <main_prog_part_1+0x128>)
      printf ("ERROR : Values[%x]=0x%x, expected 0x%x\n", i, read_data,expected_id[i]);
     492:	f8df 912c 	ldr.w	r9, [pc, #300]	; 5c0 <main_prog_part_1+0x154>
      printf ("Values[%x]=0x%x\n", i, read_data);
     496:	4f40      	ldr	r7, [pc, #256]	; (598 <main_prog_part_1+0x12c>)
     498:	f10d 36ff 	add.w	r6, sp, #4294967295	; 0xffffffff
     49c:	e00a      	b.n	4b4 <main_prog_part_1+0x48>
      printf ("ERROR : Values[%x]=0x%x, expected 0x%x\n", i, read_data,expected_id[i]);
     49e:	4621      	mov	r1, r4
     4a0:	4648      	mov	r0, r9
  for (i=0; i<8; i++){
     4a2:	3401      	adds	r4, #1
      printf ("ERROR : Values[%x]=0x%x, expected 0x%x\n", i, read_data,expected_id[i]);
     4a4:	f000 f99c 	bl	7e0 <iprintf>
      UartEndSimulation();
     4a8:	f000 f966 	bl	778 <UartEndSimulation>
  for (i=0; i<8; i++){
     4ac:	2c08      	cmp	r4, #8
     4ae:	f105 0504 	add.w	r5, r5, #4
     4b2:	d00e      	beq.n	4d2 <main_prog_part_1+0x66>
    read_data = HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0 + i*4);
     4b4:	682a      	ldr	r2, [r5, #0]
    if (read_data==expected_id[i]){
     4b6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
     4ba:	4293      	cmp	r3, r2
     4bc:	d1ef      	bne.n	49e <main_prog_part_1+0x32>
      printf ("Values[%x]=0x%x\n", i, read_data);
     4be:	4621      	mov	r1, r4
     4c0:	461a      	mov	r2, r3
     4c2:	4638      	mov	r0, r7
  for (i=0; i<8; i++){
     4c4:	3401      	adds	r4, #1
      printf ("Values[%x]=0x%x\n", i, read_data);
     4c6:	f000 f98b 	bl	7e0 <iprintf>
  for (i=0; i<8; i++){
     4ca:	2c08      	cmp	r4, #8
     4cc:	f105 0504 	add.w	r5, r5, #4
     4d0:	d1f0      	bne.n	4b4 <main_prog_part_1+0x48>
  nmi_occurred = 0;
     4d2:	2500      	movs	r5, #0
  puts("\n- Program watchdog for 10000 cycles");
     4d4:	4831      	ldr	r0, [pc, #196]	; (59c <main_prog_part_1+0x130>)
     4d6:	f000 f9f7 	bl	8c8 <puts>
  nmi_occurred = 0;
     4da:	4c31      	ldr	r4, [pc, #196]	; (5a0 <main_prog_part_1+0x134>)
  watchdog_init(10000, 1); /* Generate NMI */
     4dc:	2101      	movs	r1, #1
     4de:	f242 7010 	movw	r0, #10000	; 0x2710
  nmi_expected = 0;
     4e2:	4e30      	ldr	r6, [pc, #192]	; (5a4 <main_prog_part_1+0x138>)
  watchdog_init(10000, 1); /* Generate NMI */
     4e4:	f7ff ff8e 	bl	404 <watchdog_init>
  puts("- Run loop with watchdog set regularly 10 times\n");
     4e8:	482f      	ldr	r0, [pc, #188]	; (5a8 <main_prog_part_1+0x13c>)
  nmi_occurred = 0;
     4ea:	6025      	str	r5, [r4, #0]
  nmi_expected = 0;
     4ec:	6035      	str	r5, [r6, #0]
  puts("- Run loop with watchdog set regularly 10 times\n");
     4ee:	f000 f9eb 	bl	8c8 <puts>
  i = 0;
     4f2:	462f      	mov	r7, r5
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     4f4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 5c4 <main_prog_part_1+0x158>
    read_data = CM3DS_MPS2_WATCHDOG->VALUE;
     4f8:	4d2c      	ldr	r5, [pc, #176]	; (5ac <main_prog_part_1+0x140>)
      puts ("  Watchdog value set again");
     4fa:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 5c8 <main_prog_part_1+0x15c>
    read_data = CM3DS_MPS2_WATCHDOG->VALUE;
     4fe:	686b      	ldr	r3, [r5, #4]
    if (read_data < 8000) //the threshold must be large enough so that the NMI interrupt
     500:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     504:	d2fb      	bcs.n	4fe <main_prog_part_1+0x92>
  CM3DS_MPS2_WATCHDOG->CTRL = cycle;
     506:	f242 7310 	movw	r3, #10000	; 0x2710
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     50a:	f04f 0900 	mov.w	r9, #0
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     50e:	f8c5 bc00 	str.w	fp, [r5, #3072]	; 0xc00
      i++;
     512:	3701      	adds	r7, #1
  CM3DS_MPS2_WATCHDOG->CTRL = cycle;
     514:	60ab      	str	r3, [r5, #8]
      puts ("  Watchdog value set again");
     516:	4650      	mov	r0, sl
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     518:	f8c5 9c00 	str.w	r9, [r5, #3072]	; 0xc00
      puts ("  Watchdog value set again");
     51c:	f000 f9d4 	bl	8c8 <puts>
  while (i<10) {
     520:	2f0a      	cmp	r7, #10
     522:	d1ec      	bne.n	4fe <main_prog_part_1+0x92>
  watchdog_init(5000, 0); /* Set watchdog to no action */
     524:	4649      	mov	r1, r9
     526:	f241 3088 	movw	r0, #5000	; 0x1388
     52a:	f7ff ff6b 	bl	404 <watchdog_init>
  if (nmi_occurred!=0) {
     52e:	6823      	ldr	r3, [r4, #0]
     530:	bb13      	cbnz	r3, 578 <main_prog_part_1+0x10c>
  puts("\n- Test NMI generation");
     532:	481f      	ldr	r0, [pc, #124]	; (5b0 <main_prog_part_1+0x144>)
     534:	f000 f9c8 	bl	8c8 <puts>
  nmi_expected = 1;
     538:	2301      	movs	r3, #1
  nmi_occurred = 0;
     53a:	2200      	movs	r2, #0
  watchdog_init(5000, 1); /* Generate NMI */
     53c:	4619      	mov	r1, r3
     53e:	f241 3088 	movw	r0, #5000	; 0x1388
  nmi_occurred = 0;
     542:	6022      	str	r2, [r4, #0]
  nmi_expected = 1;
     544:	6033      	str	r3, [r6, #0]
  watchdog_init(5000, 1); /* Generate NMI */
     546:	f7ff ff5d 	bl	404 <watchdog_init>
  while (nmi_occurred==0) {
     54a:	6823      	ldr	r3, [r4, #0]
     54c:	2b00      	cmp	r3, #0
     54e:	d0fc      	beq.n	54a <main_prog_part_1+0xde>
  watchdog_init(5000, 0); /* Set watchdog to no action */
     550:	2100      	movs	r1, #0
     552:	f241 3088 	movw	r0, #5000	; 0x1388
     556:	f7ff ff55 	bl	404 <watchdog_init>
  puts("\n- Test reset generation");
     55a:	4816      	ldr	r0, [pc, #88]	; (5b4 <main_prog_part_1+0x148>)
     55c:	f000 f9b4 	bl	8c8 <puts>
  nmi_expected = 1; /* NMI will be triggered first */
     560:	2301      	movs	r3, #1
  nmi_occurred = 0;
     562:	2200      	movs	r2, #0
  watchdog_init(5000, 2); /* Generate Reset */
     564:	2102      	movs	r1, #2
     566:	f241 3088 	movw	r0, #5000	; 0x1388
  nmi_occurred = 0;
     56a:	6022      	str	r2, [r4, #0]
  nmi_expected = 1; /* NMI will be triggered first */
     56c:	6033      	str	r3, [r6, #0]
  reset_test   = 1; /* put NMI handler to reset test operation */
     56e:	f8c8 3000 	str.w	r3, [r8]
  watchdog_init(5000, 2); /* Generate Reset */
     572:	f7ff ff47 	bl	404 <watchdog_init>
     576:	e7fe      	b.n	576 <main_prog_part_1+0x10a>
    puts ("ERROR : NMI occurred unexpectedly\n");
     578:	480f      	ldr	r0, [pc, #60]	; (5b8 <main_prog_part_1+0x14c>)
     57a:	f000 f9a5 	bl	8c8 <puts>
    UartEndSimulation();  /* Simulation stop */
     57e:	f000 f8fb 	bl	778 <UartEndSimulation>
     582:	e7d6      	b.n	532 <main_prog_part_1+0xc6>
     584:	001bb824 	.word	0x001bb824
     588:	b105f00d 	.word	0xb105f00d
     58c:	00001974 	.word	0x00001974
     590:	0000198c 	.word	0x0000198c
     594:	40008fe0 	.word	0x40008fe0
     598:	000019a4 	.word	0x000019a4
     59c:	000019e0 	.word	0x000019e0
     5a0:	20000078 	.word	0x20000078
     5a4:	2000007c 	.word	0x2000007c
     5a8:	00001a08 	.word	0x00001a08
     5ac:	40008000 	.word	0x40008000
     5b0:	00001a58 	.word	0x00001a58
     5b4:	00001a70 	.word	0x00001a70
     5b8:	000018d8 	.word	0x000018d8
     5bc:	20000080 	.word	0x20000080
     5c0:	000019b8 	.word	0x000019b8
     5c4:	1acce551 	.word	0x1acce551
     5c8:	00001a3c 	.word	0x00001a3c

000005cc <watchdog_set>:
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     5cc:	2200      	movs	r2, #0
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <watchdog_set+0x14>)
     5d0:	4904      	ldr	r1, [pc, #16]	; (5e4 <watchdog_set+0x18>)
     5d2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
  CM3DS_MPS2_WATCHDOG->CTRL = cycle;
     5d6:	6098      	str	r0, [r3, #8]
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     5d8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
     5dc:	4770      	bx	lr
     5de:	bf00      	nop
     5e0:	40008000 	.word	0x40008000
     5e4:	1acce551 	.word	0x1acce551

000005e8 <watchdog_unlock>:
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     5e8:	4b02      	ldr	r3, [pc, #8]	; (5f4 <watchdog_unlock+0xc>)
     5ea:	4a03      	ldr	r2, [pc, #12]	; (5f8 <watchdog_unlock+0x10>)
     5ec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	40008000 	.word	0x40008000
     5f8:	1acce551 	.word	0x1acce551

000005fc <watchdog_lock>:
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     5fc:	2200      	movs	r2, #0
     5fe:	4b02      	ldr	r3, [pc, #8]	; (608 <watchdog_lock+0xc>)
     600:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	40008000 	.word	0x40008000

0000060c <watchdog_irq_clear>:
  CM3DS_MPS2_WATCHDOG->INTCLR = CM3DS_MPS2_Watchdog_INTCLR_Msk;
     60c:	2101      	movs	r1, #1
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     60e:	2200      	movs	r2, #0
  CM3DS_MPS2_WATCHDOG->LOCK = 0x1ACCE551;
     610:	4b03      	ldr	r3, [pc, #12]	; (620 <watchdog_irq_clear+0x14>)
     612:	4804      	ldr	r0, [pc, #16]	; (624 <watchdog_irq_clear+0x18>)
     614:	f8c3 0c00 	str.w	r0, [r3, #3072]	; 0xc00
  CM3DS_MPS2_WATCHDOG->INTCLR = CM3DS_MPS2_Watchdog_INTCLR_Msk;
     618:	60d9      	str	r1, [r3, #12]
  CM3DS_MPS2_WATCHDOG->LOCK = 0;
     61a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
  watchdog_lock();
}
     61e:	4770      	bx	lr
     620:	40008000 	.word	0x40008000
     624:	1acce551 	.word	0x1acce551

00000628 <main>:
{ 
     628:	b538      	push	{r3, r4, r5, lr}
  UartStdOutInit();
     62a:	f000 f88d 	bl	748 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - Watchdog Demo - revision $Revision: 242484 $\n");
     62e:	482e      	ldr	r0, [pc, #184]	; (6e8 <main+0xc0>)
     630:	f000 f94a 	bl	8c8 <puts>
if ((HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) < 0x26) ||
     634:	4b2d      	ldr	r3, [pc, #180]	; (6ec <main+0xc4>)
     636:	681a      	ldr	r2, [r3, #0]
     638:	2a25      	cmp	r2, #37	; 0x25
     63a:	d902      	bls.n	642 <main+0x1a>
    (HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) > 0x29) ||
     63c:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) < 0x26) ||
     63e:	2b29      	cmp	r3, #41	; 0x29
     640:	d906      	bls.n	650 <main+0x28>
    puts ("** TEST SKIPPED ** SysCtrl not present.");
     642:	482b      	ldr	r0, [pc, #172]	; (6f0 <main+0xc8>)
     644:	f000 f940 	bl	8c8 <puts>
    UartEndSimulation();
     648:	f000 f896 	bl	778 <UartEndSimulation>
}
     64c:	2000      	movs	r0, #0
     64e:	bd38      	pop	{r3, r4, r5, pc}
    (HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE4) != 0xB8))
     650:	4b28      	ldr	r3, [pc, #160]	; (6f4 <main+0xcc>)
     652:	681b      	ldr	r3, [r3, #0]
    (HW32_REG(CM3DS_MPS2_SYSCTRL_BASE + 0xFE0) > 0x29) ||
     654:	2bb8      	cmp	r3, #184	; 0xb8
     656:	d1f4      	bne.n	642 <main+0x1a>
  if ((CM3DS_MPS2_SYSCON->RSTINFO & CM3DS_MPS2_SYSCON_RSTINFO_WDOGRESETREQ_Msk) !=0) {
     658:	4b27      	ldr	r3, [pc, #156]	; (6f8 <main+0xd0>)
     65a:	691a      	ldr	r2, [r3, #16]
     65c:	0792      	lsls	r2, r2, #30
     65e:	d425      	bmi.n	6ac <main+0x84>
  else if ((CM3DS_MPS2_SYSCON->RSTINFO & CM3DS_MPS2_SYSCON_RSTINFO_SYSRESETREQ_Msk) !=0) {
     660:	691c      	ldr	r4, [r3, #16]
     662:	f014 0401 	ands.w	r4, r4, #1
     666:	d113      	bne.n	690 <main+0x68>
    puts("Watchdog demo test\n");
     668:	4824      	ldr	r0, [pc, #144]	; (6fc <main+0xd4>)
     66a:	f000 f92d 	bl	8c8 <puts>
wdog_id = HW8_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE8) & 0x07;
     66e:	4b24      	ldr	r3, [pc, #144]	; (700 <main+0xd8>)
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     670:	4a24      	ldr	r2, [pc, #144]	; (704 <main+0xdc>)
wdog_id = HW8_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE8) & 0x07;
     672:	781b      	ldrb	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     674:	6812      	ldr	r2, [r2, #0]
wdog_id = HW8_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE8) & 0x07;
     676:	b2db      	uxtb	r3, r3
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     678:	2a24      	cmp	r2, #36	; 0x24
     67a:	d103      	bne.n	684 <main+0x5c>
    (HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE4) != 0xB8) ||
     67c:	4a22      	ldr	r2, [pc, #136]	; (708 <main+0xe0>)
     67e:	6812      	ldr	r2, [r2, #0]
if ((HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE0) != 0x24) ||
     680:	2ab8      	cmp	r2, #184	; 0xb8
     682:	d01b      	beq.n	6bc <main+0x94>
      puts ("** TEST SKIPPED ** Watchdog not present.");
     684:	4821      	ldr	r0, [pc, #132]	; (70c <main+0xe4>)
     686:	f000 f91f 	bl	8c8 <puts>
      UartEndSimulation();
     68a:	f000 f875 	bl	778 <UartEndSimulation>
      return 0;}
     68e:	e7dd      	b.n	64c <main+0x24>
    puts ("Restarted by SYSRESETREQ reset");
     690:	481f      	ldr	r0, [pc, #124]	; (710 <main+0xe8>)
     692:	f000 f919 	bl	8c8 <puts>
    puts ("ERROR: reset info register value incorrect.\n");
     696:	481f      	ldr	r0, [pc, #124]	; (714 <main+0xec>)
     698:	f000 f916 	bl	8c8 <puts>
    UartEndSimulation(); /* Simulation stop */
     69c:	f000 f86c 	bl	778 <UartEndSimulation>
  puts ("** TEST PASSED ** \n");
     6a0:	481d      	ldr	r0, [pc, #116]	; (718 <main+0xf0>)
     6a2:	f000 f911 	bl	8c8 <puts>
  UartEndSimulation(); /* Simulation stop */
     6a6:	f000 f867 	bl	778 <UartEndSimulation>
     6aa:	e7cf      	b.n	64c <main+0x24>
    puts ("Restarted by Watchdog reset");
     6ac:	481b      	ldr	r0, [pc, #108]	; (71c <main+0xf4>)
     6ae:	f000 f90b 	bl	8c8 <puts>
    main_prog_part_2();
     6b2:	f7ff fdcb 	bl	24c <main_prog_part_2>
    UartEndSimulation(); /* Simulation stop */
     6b6:	f000 f85f 	bl	778 <UartEndSimulation>
     6ba:	e7f1      	b.n	6a0 <main+0x78>
    (HW32_REG(CM3DS_MPS2_WATCHDOG_BASE + 0xFE4) != 0xB8) ||
     6bc:	f003 0307 	and.w	r3, r3, #7
     6c0:	2b03      	cmp	r3, #3
     6c2:	d1df      	bne.n	684 <main+0x5c>
    for (count=0; count<5; count++) {
     6c4:	4623      	mov	r3, r4
      read_val = CM3DS_MPS2_WATCHDOG->LOAD;
     6c6:	4a16      	ldr	r2, [pc, #88]	; (720 <main+0xf8>)
     6c8:	4816      	ldr	r0, [pc, #88]	; (724 <main+0xfc>)
     6ca:	4917      	ldr	r1, [pc, #92]	; (728 <main+0x100>)
     6cc:	fb00 1403 	mla	r4, r0, r3, r1
     6d0:	6815      	ldr	r5, [r2, #0]
      read_val = CM3DS_MPS2_WATCHDOG->VALUE;
     6d2:	6855      	ldr	r5, [r2, #4]
      read_val = CM3DS_MPS2_WATCHDOG->CTRL;
     6d4:	6895      	ldr	r5, [r2, #8]
      CM3DS_MPS2_WATCHDOG->LOAD  = 0x12345678 + count*10000000;
     6d6:	6014      	str	r4, [r2, #0]
      read_val = CM3DS_MPS2_WATCHDOG->VALUE;
     6d8:	6854      	ldr	r4, [r2, #4]
      CM3DS_MPS2_WATCHDOG->CTRL  = 0x0 + count;
     6da:	6093      	str	r3, [r2, #8]
    for (count=0; count<5; count++) {
     6dc:	3301      	adds	r3, #1
     6de:	2b05      	cmp	r3, #5
     6e0:	d1f4      	bne.n	6cc <main+0xa4>
    main_prog_part_1();
     6e2:	f7ff fec3 	bl	46c <main_prog_part_1>
     6e6:	bf00      	nop
     6e8:	00001a8c 	.word	0x00001a8c
     6ec:	4001ffe0 	.word	0x4001ffe0
     6f0:	00001ad4 	.word	0x00001ad4
     6f4:	4001ffe4 	.word	0x4001ffe4
     6f8:	4001f000 	.word	0x4001f000
     6fc:	00001b38 	.word	0x00001b38
     700:	40008fe8 	.word	0x40008fe8
     704:	40008fe0 	.word	0x40008fe0
     708:	40008fe4 	.word	0x40008fe4
     70c:	00001b4c 	.word	0x00001b4c
     710:	00001b18 	.word	0x00001b18
     714:	00001740 	.word	0x00001740
     718:	00001b78 	.word	0x00001b78
     71c:	00001afc 	.word	0x00001afc
     720:	40008000 	.word	0x40008000
     724:	00989680 	.word	0x00989680
     728:	12345678 	.word	0x12345678

0000072c <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     72c:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     72e:	4616      	mov	r6, r2
     730:	b13a      	cbz	r2, 742 <_write+0x16>
     732:	1e4c      	subs	r4, r1, #1
     734:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     736:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     73a:	f000 f80d 	bl	758 <UartPutc>
  for (i=0; i<len;i++) {
     73e:	42ac      	cmp	r4, r5
     740:	d1f9      	bne.n	736 <_write+0xa>
    }
  return len;
}
     742:	4630      	mov	r0, r6
     744:	bd70      	pop	{r4, r5, r6, pc}
     746:	bf00      	nop

00000748 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     74c:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     74e:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     750:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     752:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     758:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     75c:	6853      	ldr	r3, [r2, #4]
     75e:	07db      	lsls	r3, r3, #31
     760:	d4fc      	bmi.n	75c <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     762:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     764:	4770      	bx	lr
     766:	bf00      	nop

00000768 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     768:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     76c:	6853      	ldr	r3, [r2, #4]
     76e:	079b      	lsls	r3, r3, #30
     770:	d5fc      	bpl.n	76c <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     772:	6810      	ldr	r0, [r2, #0]
}
     774:	b2c0      	uxtb	r0, r0
     776:	4770      	bx	lr

00000778 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     77c:	685a      	ldr	r2, [r3, #4]
     77e:	07d2      	lsls	r2, r2, #31
     780:	d4fc      	bmi.n	77c <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     782:	2204      	movs	r2, #4
     784:	601a      	str	r2, [r3, #0]
     786:	e7fe      	b.n	786 <UartEndSimulation+0xe>

00000788 <SystemCoreClockUpdate>:
     788:	4b01      	ldr	r3, [pc, #4]	; (790 <SystemCoreClockUpdate+0x8>)
     78a:	4a02      	ldr	r2, [pc, #8]	; (794 <SystemCoreClockUpdate+0xc>)
     78c:	601a      	str	r2, [r3, #0]
     78e:	4770      	bx	lr
     790:	20000000 	.word	0x20000000
     794:	017d7840 	.word	0x017d7840

00000798 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
     798:	4b01      	ldr	r3, [pc, #4]	; (7a0 <SystemInit+0x8>)
     79a:	4a02      	ldr	r2, [pc, #8]	; (7a4 <SystemInit+0xc>)
     79c:	601a      	str	r2, [r3, #0]

}
     79e:	4770      	bx	lr
     7a0:	20000000 	.word	0x20000000
     7a4:	017d7840 	.word	0x017d7840

000007a8 <exit>:
     7a8:	b508      	push	{r3, lr}
     7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <exit+0x20>)
     7ac:	4604      	mov	r4, r0
     7ae:	b113      	cbz	r3, 7b6 <exit+0xe>
     7b0:	2100      	movs	r1, #0
     7b2:	f3af 8000 	nop.w
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <exit+0x24>)
     7b8:	6818      	ldr	r0, [r3, #0]
     7ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
     7bc:	b103      	cbz	r3, 7c0 <exit+0x18>
     7be:	4798      	blx	r3
     7c0:	4620      	mov	r0, r4
     7c2:	f000 ff93 	bl	16ec <_exit>
     7c6:	bf00      	nop
     7c8:	00000000 	.word	0x00000000
     7cc:	00001b8c 	.word	0x00001b8c

000007d0 <memset>:
     7d0:	4603      	mov	r3, r0
     7d2:	4402      	add	r2, r0
     7d4:	4293      	cmp	r3, r2
     7d6:	d100      	bne.n	7da <memset+0xa>
     7d8:	4770      	bx	lr
     7da:	f803 1b01 	strb.w	r1, [r3], #1
     7de:	e7f9      	b.n	7d4 <memset+0x4>

000007e0 <iprintf>:
     7e0:	b40f      	push	{r0, r1, r2, r3}
     7e2:	4b0a      	ldr	r3, [pc, #40]	; (80c <iprintf+0x2c>)
     7e4:	b513      	push	{r0, r1, r4, lr}
     7e6:	681c      	ldr	r4, [r3, #0]
     7e8:	b124      	cbz	r4, 7f4 <iprintf+0x14>
     7ea:	69a3      	ldr	r3, [r4, #24]
     7ec:	b913      	cbnz	r3, 7f4 <iprintf+0x14>
     7ee:	4620      	mov	r0, r4
     7f0:	f000 fa22 	bl	c38 <__sinit>
     7f4:	ab05      	add	r3, sp, #20
     7f6:	9a04      	ldr	r2, [sp, #16]
     7f8:	68a1      	ldr	r1, [r4, #8]
     7fa:	4620      	mov	r0, r4
     7fc:	9301      	str	r3, [sp, #4]
     7fe:	f000 fbd7 	bl	fb0 <_vfiprintf_r>
     802:	b002      	add	sp, #8
     804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     808:	b004      	add	sp, #16
     80a:	4770      	bx	lr
     80c:	20000004 	.word	0x20000004

00000810 <_puts_r>:
     810:	b570      	push	{r4, r5, r6, lr}
     812:	460e      	mov	r6, r1
     814:	4605      	mov	r5, r0
     816:	b118      	cbz	r0, 820 <_puts_r+0x10>
     818:	6983      	ldr	r3, [r0, #24]
     81a:	b90b      	cbnz	r3, 820 <_puts_r+0x10>
     81c:	f000 fa0c 	bl	c38 <__sinit>
     820:	69ab      	ldr	r3, [r5, #24]
     822:	68ac      	ldr	r4, [r5, #8]
     824:	b913      	cbnz	r3, 82c <_puts_r+0x1c>
     826:	4628      	mov	r0, r5
     828:	f000 fa06 	bl	c38 <__sinit>
     82c:	4b23      	ldr	r3, [pc, #140]	; (8bc <_puts_r+0xac>)
     82e:	429c      	cmp	r4, r3
     830:	d117      	bne.n	862 <_puts_r+0x52>
     832:	686c      	ldr	r4, [r5, #4]
     834:	89a3      	ldrh	r3, [r4, #12]
     836:	071b      	lsls	r3, r3, #28
     838:	d51d      	bpl.n	876 <_puts_r+0x66>
     83a:	6923      	ldr	r3, [r4, #16]
     83c:	b1db      	cbz	r3, 876 <_puts_r+0x66>
     83e:	3e01      	subs	r6, #1
     840:	68a3      	ldr	r3, [r4, #8]
     842:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     846:	3b01      	subs	r3, #1
     848:	60a3      	str	r3, [r4, #8]
     84a:	b9e9      	cbnz	r1, 888 <_puts_r+0x78>
     84c:	2b00      	cmp	r3, #0
     84e:	da2e      	bge.n	8ae <_puts_r+0x9e>
     850:	4622      	mov	r2, r4
     852:	210a      	movs	r1, #10
     854:	4628      	mov	r0, r5
     856:	f000 f83f 	bl	8d8 <__swbuf_r>
     85a:	3001      	adds	r0, #1
     85c:	d011      	beq.n	882 <_puts_r+0x72>
     85e:	200a      	movs	r0, #10
     860:	e011      	b.n	886 <_puts_r+0x76>
     862:	4b17      	ldr	r3, [pc, #92]	; (8c0 <_puts_r+0xb0>)
     864:	429c      	cmp	r4, r3
     866:	d101      	bne.n	86c <_puts_r+0x5c>
     868:	68ac      	ldr	r4, [r5, #8]
     86a:	e7e3      	b.n	834 <_puts_r+0x24>
     86c:	4b15      	ldr	r3, [pc, #84]	; (8c4 <_puts_r+0xb4>)
     86e:	429c      	cmp	r4, r3
     870:	bf08      	it	eq
     872:	68ec      	ldreq	r4, [r5, #12]
     874:	e7de      	b.n	834 <_puts_r+0x24>
     876:	4621      	mov	r1, r4
     878:	4628      	mov	r0, r5
     87a:	f000 f87f 	bl	97c <__swsetup_r>
     87e:	2800      	cmp	r0, #0
     880:	d0dd      	beq.n	83e <_puts_r+0x2e>
     882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     886:	bd70      	pop	{r4, r5, r6, pc}
     888:	2b00      	cmp	r3, #0
     88a:	da04      	bge.n	896 <_puts_r+0x86>
     88c:	69a2      	ldr	r2, [r4, #24]
     88e:	429a      	cmp	r2, r3
     890:	dc06      	bgt.n	8a0 <_puts_r+0x90>
     892:	290a      	cmp	r1, #10
     894:	d004      	beq.n	8a0 <_puts_r+0x90>
     896:	6823      	ldr	r3, [r4, #0]
     898:	1c5a      	adds	r2, r3, #1
     89a:	6022      	str	r2, [r4, #0]
     89c:	7019      	strb	r1, [r3, #0]
     89e:	e7cf      	b.n	840 <_puts_r+0x30>
     8a0:	4622      	mov	r2, r4
     8a2:	4628      	mov	r0, r5
     8a4:	f000 f818 	bl	8d8 <__swbuf_r>
     8a8:	3001      	adds	r0, #1
     8aa:	d1c9      	bne.n	840 <_puts_r+0x30>
     8ac:	e7e9      	b.n	882 <_puts_r+0x72>
     8ae:	200a      	movs	r0, #10
     8b0:	6823      	ldr	r3, [r4, #0]
     8b2:	1c5a      	adds	r2, r3, #1
     8b4:	6022      	str	r2, [r4, #0]
     8b6:	7018      	strb	r0, [r3, #0]
     8b8:	e7e5      	b.n	886 <_puts_r+0x76>
     8ba:	bf00      	nop
     8bc:	00001bb0 	.word	0x00001bb0
     8c0:	00001bd0 	.word	0x00001bd0
     8c4:	00001b90 	.word	0x00001b90

000008c8 <puts>:
     8c8:	4b02      	ldr	r3, [pc, #8]	; (8d4 <puts+0xc>)
     8ca:	4601      	mov	r1, r0
     8cc:	6818      	ldr	r0, [r3, #0]
     8ce:	f7ff bf9f 	b.w	810 <_puts_r>
     8d2:	bf00      	nop
     8d4:	20000004 	.word	0x20000004

000008d8 <__swbuf_r>:
     8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8da:	460e      	mov	r6, r1
     8dc:	4614      	mov	r4, r2
     8de:	4605      	mov	r5, r0
     8e0:	b118      	cbz	r0, 8ea <__swbuf_r+0x12>
     8e2:	6983      	ldr	r3, [r0, #24]
     8e4:	b90b      	cbnz	r3, 8ea <__swbuf_r+0x12>
     8e6:	f000 f9a7 	bl	c38 <__sinit>
     8ea:	4b21      	ldr	r3, [pc, #132]	; (970 <__swbuf_r+0x98>)
     8ec:	429c      	cmp	r4, r3
     8ee:	d12a      	bne.n	946 <__swbuf_r+0x6e>
     8f0:	686c      	ldr	r4, [r5, #4]
     8f2:	69a3      	ldr	r3, [r4, #24]
     8f4:	60a3      	str	r3, [r4, #8]
     8f6:	89a3      	ldrh	r3, [r4, #12]
     8f8:	071a      	lsls	r2, r3, #28
     8fa:	d52e      	bpl.n	95a <__swbuf_r+0x82>
     8fc:	6923      	ldr	r3, [r4, #16]
     8fe:	b363      	cbz	r3, 95a <__swbuf_r+0x82>
     900:	6923      	ldr	r3, [r4, #16]
     902:	6820      	ldr	r0, [r4, #0]
     904:	b2f6      	uxtb	r6, r6
     906:	1ac0      	subs	r0, r0, r3
     908:	6963      	ldr	r3, [r4, #20]
     90a:	4637      	mov	r7, r6
     90c:	4283      	cmp	r3, r0
     90e:	dc04      	bgt.n	91a <__swbuf_r+0x42>
     910:	4621      	mov	r1, r4
     912:	4628      	mov	r0, r5
     914:	f000 f926 	bl	b64 <_fflush_r>
     918:	bb28      	cbnz	r0, 966 <__swbuf_r+0x8e>
     91a:	68a3      	ldr	r3, [r4, #8]
     91c:	3001      	adds	r0, #1
     91e:	3b01      	subs	r3, #1
     920:	60a3      	str	r3, [r4, #8]
     922:	6823      	ldr	r3, [r4, #0]
     924:	1c5a      	adds	r2, r3, #1
     926:	6022      	str	r2, [r4, #0]
     928:	701e      	strb	r6, [r3, #0]
     92a:	6963      	ldr	r3, [r4, #20]
     92c:	4283      	cmp	r3, r0
     92e:	d004      	beq.n	93a <__swbuf_r+0x62>
     930:	89a3      	ldrh	r3, [r4, #12]
     932:	07db      	lsls	r3, r3, #31
     934:	d519      	bpl.n	96a <__swbuf_r+0x92>
     936:	2e0a      	cmp	r6, #10
     938:	d117      	bne.n	96a <__swbuf_r+0x92>
     93a:	4621      	mov	r1, r4
     93c:	4628      	mov	r0, r5
     93e:	f000 f911 	bl	b64 <_fflush_r>
     942:	b190      	cbz	r0, 96a <__swbuf_r+0x92>
     944:	e00f      	b.n	966 <__swbuf_r+0x8e>
     946:	4b0b      	ldr	r3, [pc, #44]	; (974 <__swbuf_r+0x9c>)
     948:	429c      	cmp	r4, r3
     94a:	d101      	bne.n	950 <__swbuf_r+0x78>
     94c:	68ac      	ldr	r4, [r5, #8]
     94e:	e7d0      	b.n	8f2 <__swbuf_r+0x1a>
     950:	4b09      	ldr	r3, [pc, #36]	; (978 <__swbuf_r+0xa0>)
     952:	429c      	cmp	r4, r3
     954:	bf08      	it	eq
     956:	68ec      	ldreq	r4, [r5, #12]
     958:	e7cb      	b.n	8f2 <__swbuf_r+0x1a>
     95a:	4621      	mov	r1, r4
     95c:	4628      	mov	r0, r5
     95e:	f000 f80d 	bl	97c <__swsetup_r>
     962:	2800      	cmp	r0, #0
     964:	d0cc      	beq.n	900 <__swbuf_r+0x28>
     966:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     96a:	4638      	mov	r0, r7
     96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     96e:	bf00      	nop
     970:	00001bb0 	.word	0x00001bb0
     974:	00001bd0 	.word	0x00001bd0
     978:	00001b90 	.word	0x00001b90

0000097c <__swsetup_r>:
     97c:	4b32      	ldr	r3, [pc, #200]	; (a48 <__swsetup_r+0xcc>)
     97e:	b570      	push	{r4, r5, r6, lr}
     980:	681d      	ldr	r5, [r3, #0]
     982:	4606      	mov	r6, r0
     984:	460c      	mov	r4, r1
     986:	b125      	cbz	r5, 992 <__swsetup_r+0x16>
     988:	69ab      	ldr	r3, [r5, #24]
     98a:	b913      	cbnz	r3, 992 <__swsetup_r+0x16>
     98c:	4628      	mov	r0, r5
     98e:	f000 f953 	bl	c38 <__sinit>
     992:	4b2e      	ldr	r3, [pc, #184]	; (a4c <__swsetup_r+0xd0>)
     994:	429c      	cmp	r4, r3
     996:	d10f      	bne.n	9b8 <__swsetup_r+0x3c>
     998:	686c      	ldr	r4, [r5, #4]
     99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     99e:	b29a      	uxth	r2, r3
     9a0:	0715      	lsls	r5, r2, #28
     9a2:	d42c      	bmi.n	9fe <__swsetup_r+0x82>
     9a4:	06d0      	lsls	r0, r2, #27
     9a6:	d411      	bmi.n	9cc <__swsetup_r+0x50>
     9a8:	2209      	movs	r2, #9
     9aa:	6032      	str	r2, [r6, #0]
     9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9b0:	81a3      	strh	r3, [r4, #12]
     9b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9b6:	e03e      	b.n	a36 <__swsetup_r+0xba>
     9b8:	4b25      	ldr	r3, [pc, #148]	; (a50 <__swsetup_r+0xd4>)
     9ba:	429c      	cmp	r4, r3
     9bc:	d101      	bne.n	9c2 <__swsetup_r+0x46>
     9be:	68ac      	ldr	r4, [r5, #8]
     9c0:	e7eb      	b.n	99a <__swsetup_r+0x1e>
     9c2:	4b24      	ldr	r3, [pc, #144]	; (a54 <__swsetup_r+0xd8>)
     9c4:	429c      	cmp	r4, r3
     9c6:	bf08      	it	eq
     9c8:	68ec      	ldreq	r4, [r5, #12]
     9ca:	e7e6      	b.n	99a <__swsetup_r+0x1e>
     9cc:	0751      	lsls	r1, r2, #29
     9ce:	d512      	bpl.n	9f6 <__swsetup_r+0x7a>
     9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
     9d2:	b141      	cbz	r1, 9e6 <__swsetup_r+0x6a>
     9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
     9d8:	4299      	cmp	r1, r3
     9da:	d002      	beq.n	9e2 <__swsetup_r+0x66>
     9dc:	4630      	mov	r0, r6
     9de:	f000 fa19 	bl	e14 <_free_r>
     9e2:	2300      	movs	r3, #0
     9e4:	6363      	str	r3, [r4, #52]	; 0x34
     9e6:	89a3      	ldrh	r3, [r4, #12]
     9e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
     9ec:	81a3      	strh	r3, [r4, #12]
     9ee:	2300      	movs	r3, #0
     9f0:	6063      	str	r3, [r4, #4]
     9f2:	6923      	ldr	r3, [r4, #16]
     9f4:	6023      	str	r3, [r4, #0]
     9f6:	89a3      	ldrh	r3, [r4, #12]
     9f8:	f043 0308 	orr.w	r3, r3, #8
     9fc:	81a3      	strh	r3, [r4, #12]
     9fe:	6923      	ldr	r3, [r4, #16]
     a00:	b94b      	cbnz	r3, a16 <__swsetup_r+0x9a>
     a02:	89a3      	ldrh	r3, [r4, #12]
     a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
     a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     a0c:	d003      	beq.n	a16 <__swsetup_r+0x9a>
     a0e:	4621      	mov	r1, r4
     a10:	4630      	mov	r0, r6
     a12:	f000 f9bf 	bl	d94 <__smakebuf_r>
     a16:	89a2      	ldrh	r2, [r4, #12]
     a18:	f012 0301 	ands.w	r3, r2, #1
     a1c:	d00c      	beq.n	a38 <__swsetup_r+0xbc>
     a1e:	2300      	movs	r3, #0
     a20:	60a3      	str	r3, [r4, #8]
     a22:	6963      	ldr	r3, [r4, #20]
     a24:	425b      	negs	r3, r3
     a26:	61a3      	str	r3, [r4, #24]
     a28:	6923      	ldr	r3, [r4, #16]
     a2a:	b953      	cbnz	r3, a42 <__swsetup_r+0xc6>
     a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     a30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
     a34:	d1ba      	bne.n	9ac <__swsetup_r+0x30>
     a36:	bd70      	pop	{r4, r5, r6, pc}
     a38:	0792      	lsls	r2, r2, #30
     a3a:	bf58      	it	pl
     a3c:	6963      	ldrpl	r3, [r4, #20]
     a3e:	60a3      	str	r3, [r4, #8]
     a40:	e7f2      	b.n	a28 <__swsetup_r+0xac>
     a42:	2000      	movs	r0, #0
     a44:	e7f7      	b.n	a36 <__swsetup_r+0xba>
     a46:	bf00      	nop
     a48:	20000004 	.word	0x20000004
     a4c:	00001bb0 	.word	0x00001bb0
     a50:	00001bd0 	.word	0x00001bd0
     a54:	00001b90 	.word	0x00001b90

00000a58 <__sflush_r>:
     a58:	898a      	ldrh	r2, [r1, #12]
     a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a5e:	4605      	mov	r5, r0
     a60:	0710      	lsls	r0, r2, #28
     a62:	460c      	mov	r4, r1
     a64:	d458      	bmi.n	b18 <__sflush_r+0xc0>
     a66:	684b      	ldr	r3, [r1, #4]
     a68:	2b00      	cmp	r3, #0
     a6a:	dc05      	bgt.n	a78 <__sflush_r+0x20>
     a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     a6e:	2b00      	cmp	r3, #0
     a70:	dc02      	bgt.n	a78 <__sflush_r+0x20>
     a72:	2000      	movs	r0, #0
     a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
     a7a:	2e00      	cmp	r6, #0
     a7c:	d0f9      	beq.n	a72 <__sflush_r+0x1a>
     a7e:	2300      	movs	r3, #0
     a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
     a84:	682f      	ldr	r7, [r5, #0]
     a86:	6a21      	ldr	r1, [r4, #32]
     a88:	602b      	str	r3, [r5, #0]
     a8a:	d032      	beq.n	af2 <__sflush_r+0x9a>
     a8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
     a8e:	89a3      	ldrh	r3, [r4, #12]
     a90:	075a      	lsls	r2, r3, #29
     a92:	d505      	bpl.n	aa0 <__sflush_r+0x48>
     a94:	6863      	ldr	r3, [r4, #4]
     a96:	1ac0      	subs	r0, r0, r3
     a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
     a9a:	b10b      	cbz	r3, aa0 <__sflush_r+0x48>
     a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
     a9e:	1ac0      	subs	r0, r0, r3
     aa0:	2300      	movs	r3, #0
     aa2:	4602      	mov	r2, r0
     aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
     aa6:	6a21      	ldr	r1, [r4, #32]
     aa8:	4628      	mov	r0, r5
     aaa:	47b0      	blx	r6
     aac:	1c43      	adds	r3, r0, #1
     aae:	89a3      	ldrh	r3, [r4, #12]
     ab0:	d106      	bne.n	ac0 <__sflush_r+0x68>
     ab2:	6829      	ldr	r1, [r5, #0]
     ab4:	291d      	cmp	r1, #29
     ab6:	d848      	bhi.n	b4a <__sflush_r+0xf2>
     ab8:	4a29      	ldr	r2, [pc, #164]	; (b60 <__sflush_r+0x108>)
     aba:	40ca      	lsrs	r2, r1
     abc:	07d6      	lsls	r6, r2, #31
     abe:	d544      	bpl.n	b4a <__sflush_r+0xf2>
     ac0:	2200      	movs	r2, #0
     ac2:	6062      	str	r2, [r4, #4]
     ac4:	6922      	ldr	r2, [r4, #16]
     ac6:	04d9      	lsls	r1, r3, #19
     ac8:	6022      	str	r2, [r4, #0]
     aca:	d504      	bpl.n	ad6 <__sflush_r+0x7e>
     acc:	1c42      	adds	r2, r0, #1
     ace:	d101      	bne.n	ad4 <__sflush_r+0x7c>
     ad0:	682b      	ldr	r3, [r5, #0]
     ad2:	b903      	cbnz	r3, ad6 <__sflush_r+0x7e>
     ad4:	6560      	str	r0, [r4, #84]	; 0x54
     ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
     ad8:	602f      	str	r7, [r5, #0]
     ada:	2900      	cmp	r1, #0
     adc:	d0c9      	beq.n	a72 <__sflush_r+0x1a>
     ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
     ae2:	4299      	cmp	r1, r3
     ae4:	d002      	beq.n	aec <__sflush_r+0x94>
     ae6:	4628      	mov	r0, r5
     ae8:	f000 f994 	bl	e14 <_free_r>
     aec:	2000      	movs	r0, #0
     aee:	6360      	str	r0, [r4, #52]	; 0x34
     af0:	e7c0      	b.n	a74 <__sflush_r+0x1c>
     af2:	2301      	movs	r3, #1
     af4:	4628      	mov	r0, r5
     af6:	47b0      	blx	r6
     af8:	1c41      	adds	r1, r0, #1
     afa:	d1c8      	bne.n	a8e <__sflush_r+0x36>
     afc:	682b      	ldr	r3, [r5, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d0c5      	beq.n	a8e <__sflush_r+0x36>
     b02:	2b1d      	cmp	r3, #29
     b04:	d001      	beq.n	b0a <__sflush_r+0xb2>
     b06:	2b16      	cmp	r3, #22
     b08:	d101      	bne.n	b0e <__sflush_r+0xb6>
     b0a:	602f      	str	r7, [r5, #0]
     b0c:	e7b1      	b.n	a72 <__sflush_r+0x1a>
     b0e:	89a3      	ldrh	r3, [r4, #12]
     b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     b14:	81a3      	strh	r3, [r4, #12]
     b16:	e7ad      	b.n	a74 <__sflush_r+0x1c>
     b18:	690f      	ldr	r7, [r1, #16]
     b1a:	2f00      	cmp	r7, #0
     b1c:	d0a9      	beq.n	a72 <__sflush_r+0x1a>
     b1e:	0793      	lsls	r3, r2, #30
     b20:	bf18      	it	ne
     b22:	2300      	movne	r3, #0
     b24:	680e      	ldr	r6, [r1, #0]
     b26:	bf08      	it	eq
     b28:	694b      	ldreq	r3, [r1, #20]
     b2a:	eba6 0807 	sub.w	r8, r6, r7
     b2e:	600f      	str	r7, [r1, #0]
     b30:	608b      	str	r3, [r1, #8]
     b32:	f1b8 0f00 	cmp.w	r8, #0
     b36:	dd9c      	ble.n	a72 <__sflush_r+0x1a>
     b38:	4643      	mov	r3, r8
     b3a:	463a      	mov	r2, r7
     b3c:	6a21      	ldr	r1, [r4, #32]
     b3e:	4628      	mov	r0, r5
     b40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
     b42:	47b0      	blx	r6
     b44:	2800      	cmp	r0, #0
     b46:	dc06      	bgt.n	b56 <__sflush_r+0xfe>
     b48:	89a3      	ldrh	r3, [r4, #12]
     b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     b4e:	81a3      	strh	r3, [r4, #12]
     b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b54:	e78e      	b.n	a74 <__sflush_r+0x1c>
     b56:	4407      	add	r7, r0
     b58:	eba8 0800 	sub.w	r8, r8, r0
     b5c:	e7e9      	b.n	b32 <__sflush_r+0xda>
     b5e:	bf00      	nop
     b60:	20400001 	.word	0x20400001

00000b64 <_fflush_r>:
     b64:	b538      	push	{r3, r4, r5, lr}
     b66:	690b      	ldr	r3, [r1, #16]
     b68:	4605      	mov	r5, r0
     b6a:	460c      	mov	r4, r1
     b6c:	b1db      	cbz	r3, ba6 <_fflush_r+0x42>
     b6e:	b118      	cbz	r0, b78 <_fflush_r+0x14>
     b70:	6983      	ldr	r3, [r0, #24]
     b72:	b90b      	cbnz	r3, b78 <_fflush_r+0x14>
     b74:	f000 f860 	bl	c38 <__sinit>
     b78:	4b0c      	ldr	r3, [pc, #48]	; (bac <_fflush_r+0x48>)
     b7a:	429c      	cmp	r4, r3
     b7c:	d109      	bne.n	b92 <_fflush_r+0x2e>
     b7e:	686c      	ldr	r4, [r5, #4]
     b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     b84:	b17b      	cbz	r3, ba6 <_fflush_r+0x42>
     b86:	4621      	mov	r1, r4
     b88:	4628      	mov	r0, r5
     b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     b8e:	f7ff bf63 	b.w	a58 <__sflush_r>
     b92:	4b07      	ldr	r3, [pc, #28]	; (bb0 <_fflush_r+0x4c>)
     b94:	429c      	cmp	r4, r3
     b96:	d101      	bne.n	b9c <_fflush_r+0x38>
     b98:	68ac      	ldr	r4, [r5, #8]
     b9a:	e7f1      	b.n	b80 <_fflush_r+0x1c>
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <_fflush_r+0x50>)
     b9e:	429c      	cmp	r4, r3
     ba0:	bf08      	it	eq
     ba2:	68ec      	ldreq	r4, [r5, #12]
     ba4:	e7ec      	b.n	b80 <_fflush_r+0x1c>
     ba6:	2000      	movs	r0, #0
     ba8:	bd38      	pop	{r3, r4, r5, pc}
     baa:	bf00      	nop
     bac:	00001bb0 	.word	0x00001bb0
     bb0:	00001bd0 	.word	0x00001bd0
     bb4:	00001b90 	.word	0x00001b90

00000bb8 <std>:
     bb8:	2300      	movs	r3, #0
     bba:	b510      	push	{r4, lr}
     bbc:	4604      	mov	r4, r0
     bbe:	e9c0 3300 	strd	r3, r3, [r0]
     bc2:	6083      	str	r3, [r0, #8]
     bc4:	8181      	strh	r1, [r0, #12]
     bc6:	6643      	str	r3, [r0, #100]	; 0x64
     bc8:	81c2      	strh	r2, [r0, #14]
     bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
     bce:	6183      	str	r3, [r0, #24]
     bd0:	4619      	mov	r1, r3
     bd2:	2208      	movs	r2, #8
     bd4:	305c      	adds	r0, #92	; 0x5c
     bd6:	f7ff fdfb 	bl	7d0 <memset>
     bda:	4b05      	ldr	r3, [pc, #20]	; (bf0 <std+0x38>)
     bdc:	6224      	str	r4, [r4, #32]
     bde:	6263      	str	r3, [r4, #36]	; 0x24
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <std+0x3c>)
     be2:	62a3      	str	r3, [r4, #40]	; 0x28
     be4:	4b04      	ldr	r3, [pc, #16]	; (bf8 <std+0x40>)
     be6:	62e3      	str	r3, [r4, #44]	; 0x2c
     be8:	4b04      	ldr	r3, [pc, #16]	; (bfc <std+0x44>)
     bea:	6323      	str	r3, [r4, #48]	; 0x30
     bec:	bd10      	pop	{r4, pc}
     bee:	bf00      	nop
     bf0:	00001509 	.word	0x00001509
     bf4:	0000152b 	.word	0x0000152b
     bf8:	00001563 	.word	0x00001563
     bfc:	00001587 	.word	0x00001587

00000c00 <_cleanup_r>:
     c00:	4901      	ldr	r1, [pc, #4]	; (c08 <_cleanup_r+0x8>)
     c02:	f000 b885 	b.w	d10 <_fwalk_reent>
     c06:	bf00      	nop
     c08:	00000b65 	.word	0x00000b65

00000c0c <__sfmoreglue>:
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	2568      	movs	r5, #104	; 0x68
     c10:	1e4a      	subs	r2, r1, #1
     c12:	4355      	muls	r5, r2
     c14:	460e      	mov	r6, r1
     c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
     c1a:	f000 f947 	bl	eac <_malloc_r>
     c1e:	4604      	mov	r4, r0
     c20:	b140      	cbz	r0, c34 <__sfmoreglue+0x28>
     c22:	2100      	movs	r1, #0
     c24:	e9c0 1600 	strd	r1, r6, [r0]
     c28:	300c      	adds	r0, #12
     c2a:	60a0      	str	r0, [r4, #8]
     c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
     c30:	f7ff fdce 	bl	7d0 <memset>
     c34:	4620      	mov	r0, r4
     c36:	bd70      	pop	{r4, r5, r6, pc}

00000c38 <__sinit>:
     c38:	6983      	ldr	r3, [r0, #24]
     c3a:	b510      	push	{r4, lr}
     c3c:	4604      	mov	r4, r0
     c3e:	bb33      	cbnz	r3, c8e <__sinit+0x56>
     c40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
     c44:	6503      	str	r3, [r0, #80]	; 0x50
     c46:	4b12      	ldr	r3, [pc, #72]	; (c90 <__sinit+0x58>)
     c48:	4a12      	ldr	r2, [pc, #72]	; (c94 <__sinit+0x5c>)
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	6282      	str	r2, [r0, #40]	; 0x28
     c4e:	4298      	cmp	r0, r3
     c50:	bf04      	itt	eq
     c52:	2301      	moveq	r3, #1
     c54:	6183      	streq	r3, [r0, #24]
     c56:	f000 f81f 	bl	c98 <__sfp>
     c5a:	6060      	str	r0, [r4, #4]
     c5c:	4620      	mov	r0, r4
     c5e:	f000 f81b 	bl	c98 <__sfp>
     c62:	60a0      	str	r0, [r4, #8]
     c64:	4620      	mov	r0, r4
     c66:	f000 f817 	bl	c98 <__sfp>
     c6a:	2200      	movs	r2, #0
     c6c:	60e0      	str	r0, [r4, #12]
     c6e:	2104      	movs	r1, #4
     c70:	6860      	ldr	r0, [r4, #4]
     c72:	f7ff ffa1 	bl	bb8 <std>
     c76:	2201      	movs	r2, #1
     c78:	2109      	movs	r1, #9
     c7a:	68a0      	ldr	r0, [r4, #8]
     c7c:	f7ff ff9c 	bl	bb8 <std>
     c80:	2202      	movs	r2, #2
     c82:	2112      	movs	r1, #18
     c84:	68e0      	ldr	r0, [r4, #12]
     c86:	f7ff ff97 	bl	bb8 <std>
     c8a:	2301      	movs	r3, #1
     c8c:	61a3      	str	r3, [r4, #24]
     c8e:	bd10      	pop	{r4, pc}
     c90:	00001b8c 	.word	0x00001b8c
     c94:	00000c01 	.word	0x00000c01

00000c98 <__sfp>:
     c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c9a:	4b1b      	ldr	r3, [pc, #108]	; (d08 <__sfp+0x70>)
     c9c:	4607      	mov	r7, r0
     c9e:	681e      	ldr	r6, [r3, #0]
     ca0:	69b3      	ldr	r3, [r6, #24]
     ca2:	b913      	cbnz	r3, caa <__sfp+0x12>
     ca4:	4630      	mov	r0, r6
     ca6:	f7ff ffc7 	bl	c38 <__sinit>
     caa:	3648      	adds	r6, #72	; 0x48
     cac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
     cb0:	3b01      	subs	r3, #1
     cb2:	d503      	bpl.n	cbc <__sfp+0x24>
     cb4:	6833      	ldr	r3, [r6, #0]
     cb6:	b133      	cbz	r3, cc6 <__sfp+0x2e>
     cb8:	6836      	ldr	r6, [r6, #0]
     cba:	e7f7      	b.n	cac <__sfp+0x14>
     cbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
     cc0:	b16d      	cbz	r5, cde <__sfp+0x46>
     cc2:	3468      	adds	r4, #104	; 0x68
     cc4:	e7f4      	b.n	cb0 <__sfp+0x18>
     cc6:	2104      	movs	r1, #4
     cc8:	4638      	mov	r0, r7
     cca:	f7ff ff9f 	bl	c0c <__sfmoreglue>
     cce:	6030      	str	r0, [r6, #0]
     cd0:	2800      	cmp	r0, #0
     cd2:	d1f1      	bne.n	cb8 <__sfp+0x20>
     cd4:	230c      	movs	r3, #12
     cd6:	4604      	mov	r4, r0
     cd8:	603b      	str	r3, [r7, #0]
     cda:	4620      	mov	r0, r4
     cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cde:	4b0b      	ldr	r3, [pc, #44]	; (d0c <__sfp+0x74>)
     ce0:	6665      	str	r5, [r4, #100]	; 0x64
     ce2:	e9c4 5500 	strd	r5, r5, [r4]
     ce6:	60a5      	str	r5, [r4, #8]
     ce8:	e9c4 3503 	strd	r3, r5, [r4, #12]
     cec:	e9c4 5505 	strd	r5, r5, [r4, #20]
     cf0:	2208      	movs	r2, #8
     cf2:	4629      	mov	r1, r5
     cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
     cf8:	f7ff fd6a 	bl	7d0 <memset>
     cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
     d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
     d04:	e7e9      	b.n	cda <__sfp+0x42>
     d06:	bf00      	nop
     d08:	00001b8c 	.word	0x00001b8c
     d0c:	ffff0001 	.word	0xffff0001

00000d10 <_fwalk_reent>:
     d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     d14:	4680      	mov	r8, r0
     d16:	4689      	mov	r9, r1
     d18:	2600      	movs	r6, #0
     d1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
     d1e:	b914      	cbnz	r4, d26 <_fwalk_reent+0x16>
     d20:	4630      	mov	r0, r6
     d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     d26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
     d2a:	3f01      	subs	r7, #1
     d2c:	d501      	bpl.n	d32 <_fwalk_reent+0x22>
     d2e:	6824      	ldr	r4, [r4, #0]
     d30:	e7f5      	b.n	d1e <_fwalk_reent+0xe>
     d32:	89ab      	ldrh	r3, [r5, #12]
     d34:	2b01      	cmp	r3, #1
     d36:	d907      	bls.n	d48 <_fwalk_reent+0x38>
     d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
     d3c:	3301      	adds	r3, #1
     d3e:	d003      	beq.n	d48 <_fwalk_reent+0x38>
     d40:	4629      	mov	r1, r5
     d42:	4640      	mov	r0, r8
     d44:	47c8      	blx	r9
     d46:	4306      	orrs	r6, r0
     d48:	3568      	adds	r5, #104	; 0x68
     d4a:	e7ee      	b.n	d2a <_fwalk_reent+0x1a>

00000d4c <__swhatbuf_r>:
     d4c:	b570      	push	{r4, r5, r6, lr}
     d4e:	460e      	mov	r6, r1
     d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
     d54:	b096      	sub	sp, #88	; 0x58
     d56:	2900      	cmp	r1, #0
     d58:	4614      	mov	r4, r2
     d5a:	461d      	mov	r5, r3
     d5c:	da07      	bge.n	d6e <__swhatbuf_r+0x22>
     d5e:	2300      	movs	r3, #0
     d60:	602b      	str	r3, [r5, #0]
     d62:	89b3      	ldrh	r3, [r6, #12]
     d64:	061a      	lsls	r2, r3, #24
     d66:	d410      	bmi.n	d8a <__swhatbuf_r+0x3e>
     d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
     d6c:	e00e      	b.n	d8c <__swhatbuf_r+0x40>
     d6e:	466a      	mov	r2, sp
     d70:	f000 fc30 	bl	15d4 <_fstat_r>
     d74:	2800      	cmp	r0, #0
     d76:	dbf2      	blt.n	d5e <__swhatbuf_r+0x12>
     d78:	9a01      	ldr	r2, [sp, #4]
     d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
     d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
     d82:	425a      	negs	r2, r3
     d84:	415a      	adcs	r2, r3
     d86:	602a      	str	r2, [r5, #0]
     d88:	e7ee      	b.n	d68 <__swhatbuf_r+0x1c>
     d8a:	2340      	movs	r3, #64	; 0x40
     d8c:	2000      	movs	r0, #0
     d8e:	6023      	str	r3, [r4, #0]
     d90:	b016      	add	sp, #88	; 0x58
     d92:	bd70      	pop	{r4, r5, r6, pc}

00000d94 <__smakebuf_r>:
     d94:	898b      	ldrh	r3, [r1, #12]
     d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d98:	079d      	lsls	r5, r3, #30
     d9a:	4606      	mov	r6, r0
     d9c:	460c      	mov	r4, r1
     d9e:	d507      	bpl.n	db0 <__smakebuf_r+0x1c>
     da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
     da4:	6023      	str	r3, [r4, #0]
     da6:	6123      	str	r3, [r4, #16]
     da8:	2301      	movs	r3, #1
     daa:	6163      	str	r3, [r4, #20]
     dac:	b002      	add	sp, #8
     dae:	bd70      	pop	{r4, r5, r6, pc}
     db0:	ab01      	add	r3, sp, #4
     db2:	466a      	mov	r2, sp
     db4:	f7ff ffca 	bl	d4c <__swhatbuf_r>
     db8:	9900      	ldr	r1, [sp, #0]
     dba:	4605      	mov	r5, r0
     dbc:	4630      	mov	r0, r6
     dbe:	f000 f875 	bl	eac <_malloc_r>
     dc2:	b948      	cbnz	r0, dd8 <__smakebuf_r+0x44>
     dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     dc8:	059a      	lsls	r2, r3, #22
     dca:	d4ef      	bmi.n	dac <__smakebuf_r+0x18>
     dcc:	f023 0303 	bic.w	r3, r3, #3
     dd0:	f043 0302 	orr.w	r3, r3, #2
     dd4:	81a3      	strh	r3, [r4, #12]
     dd6:	e7e3      	b.n	da0 <__smakebuf_r+0xc>
     dd8:	4b0d      	ldr	r3, [pc, #52]	; (e10 <__smakebuf_r+0x7c>)
     dda:	62b3      	str	r3, [r6, #40]	; 0x28
     ddc:	89a3      	ldrh	r3, [r4, #12]
     dde:	6020      	str	r0, [r4, #0]
     de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     de4:	81a3      	strh	r3, [r4, #12]
     de6:	9b00      	ldr	r3, [sp, #0]
     de8:	6120      	str	r0, [r4, #16]
     dea:	6163      	str	r3, [r4, #20]
     dec:	9b01      	ldr	r3, [sp, #4]
     dee:	b15b      	cbz	r3, e08 <__smakebuf_r+0x74>
     df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
     df4:	4630      	mov	r0, r6
     df6:	f000 fbff 	bl	15f8 <_isatty_r>
     dfa:	b128      	cbz	r0, e08 <__smakebuf_r+0x74>
     dfc:	89a3      	ldrh	r3, [r4, #12]
     dfe:	f023 0303 	bic.w	r3, r3, #3
     e02:	f043 0301 	orr.w	r3, r3, #1
     e06:	81a3      	strh	r3, [r4, #12]
     e08:	89a3      	ldrh	r3, [r4, #12]
     e0a:	431d      	orrs	r5, r3
     e0c:	81a5      	strh	r5, [r4, #12]
     e0e:	e7cd      	b.n	dac <__smakebuf_r+0x18>
     e10:	00000c01 	.word	0x00000c01

00000e14 <_free_r>:
     e14:	b538      	push	{r3, r4, r5, lr}
     e16:	4605      	mov	r5, r0
     e18:	2900      	cmp	r1, #0
     e1a:	d043      	beq.n	ea4 <_free_r+0x90>
     e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
     e20:	1f0c      	subs	r4, r1, #4
     e22:	2b00      	cmp	r3, #0
     e24:	bfb8      	it	lt
     e26:	18e4      	addlt	r4, r4, r3
     e28:	f000 fc16 	bl	1658 <__malloc_lock>
     e2c:	4a1e      	ldr	r2, [pc, #120]	; (ea8 <_free_r+0x94>)
     e2e:	6813      	ldr	r3, [r2, #0]
     e30:	4610      	mov	r0, r2
     e32:	b933      	cbnz	r3, e42 <_free_r+0x2e>
     e34:	6063      	str	r3, [r4, #4]
     e36:	6014      	str	r4, [r2, #0]
     e38:	4628      	mov	r0, r5
     e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     e3e:	f000 bc0c 	b.w	165a <__malloc_unlock>
     e42:	42a3      	cmp	r3, r4
     e44:	d90b      	bls.n	e5e <_free_r+0x4a>
     e46:	6821      	ldr	r1, [r4, #0]
     e48:	1862      	adds	r2, r4, r1
     e4a:	4293      	cmp	r3, r2
     e4c:	bf01      	itttt	eq
     e4e:	681a      	ldreq	r2, [r3, #0]
     e50:	685b      	ldreq	r3, [r3, #4]
     e52:	1852      	addeq	r2, r2, r1
     e54:	6022      	streq	r2, [r4, #0]
     e56:	6063      	str	r3, [r4, #4]
     e58:	6004      	str	r4, [r0, #0]
     e5a:	e7ed      	b.n	e38 <_free_r+0x24>
     e5c:	4613      	mov	r3, r2
     e5e:	685a      	ldr	r2, [r3, #4]
     e60:	b10a      	cbz	r2, e66 <_free_r+0x52>
     e62:	42a2      	cmp	r2, r4
     e64:	d9fa      	bls.n	e5c <_free_r+0x48>
     e66:	6819      	ldr	r1, [r3, #0]
     e68:	1858      	adds	r0, r3, r1
     e6a:	42a0      	cmp	r0, r4
     e6c:	d10b      	bne.n	e86 <_free_r+0x72>
     e6e:	6820      	ldr	r0, [r4, #0]
     e70:	4401      	add	r1, r0
     e72:	1858      	adds	r0, r3, r1
     e74:	4282      	cmp	r2, r0
     e76:	6019      	str	r1, [r3, #0]
     e78:	d1de      	bne.n	e38 <_free_r+0x24>
     e7a:	6810      	ldr	r0, [r2, #0]
     e7c:	6852      	ldr	r2, [r2, #4]
     e7e:	4401      	add	r1, r0
     e80:	6019      	str	r1, [r3, #0]
     e82:	605a      	str	r2, [r3, #4]
     e84:	e7d8      	b.n	e38 <_free_r+0x24>
     e86:	d902      	bls.n	e8e <_free_r+0x7a>
     e88:	230c      	movs	r3, #12
     e8a:	602b      	str	r3, [r5, #0]
     e8c:	e7d4      	b.n	e38 <_free_r+0x24>
     e8e:	6820      	ldr	r0, [r4, #0]
     e90:	1821      	adds	r1, r4, r0
     e92:	428a      	cmp	r2, r1
     e94:	bf01      	itttt	eq
     e96:	6811      	ldreq	r1, [r2, #0]
     e98:	6852      	ldreq	r2, [r2, #4]
     e9a:	1809      	addeq	r1, r1, r0
     e9c:	6021      	streq	r1, [r4, #0]
     e9e:	6062      	str	r2, [r4, #4]
     ea0:	605c      	str	r4, [r3, #4]
     ea2:	e7c9      	b.n	e38 <_free_r+0x24>
     ea4:	bd38      	pop	{r3, r4, r5, pc}
     ea6:	bf00      	nop
     ea8:	2000006c 	.word	0x2000006c

00000eac <_malloc_r>:
     eac:	b570      	push	{r4, r5, r6, lr}
     eae:	1ccd      	adds	r5, r1, #3
     eb0:	f025 0503 	bic.w	r5, r5, #3
     eb4:	3508      	adds	r5, #8
     eb6:	2d0c      	cmp	r5, #12
     eb8:	bf38      	it	cc
     eba:	250c      	movcc	r5, #12
     ebc:	2d00      	cmp	r5, #0
     ebe:	4606      	mov	r6, r0
     ec0:	db01      	blt.n	ec6 <_malloc_r+0x1a>
     ec2:	42a9      	cmp	r1, r5
     ec4:	d903      	bls.n	ece <_malloc_r+0x22>
     ec6:	230c      	movs	r3, #12
     ec8:	6033      	str	r3, [r6, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	f000 fbc3 	bl	1658 <__malloc_lock>
     ed2:	4a21      	ldr	r2, [pc, #132]	; (f58 <_malloc_r+0xac>)
     ed4:	6814      	ldr	r4, [r2, #0]
     ed6:	4621      	mov	r1, r4
     ed8:	b991      	cbnz	r1, f00 <_malloc_r+0x54>
     eda:	4c20      	ldr	r4, [pc, #128]	; (f5c <_malloc_r+0xb0>)
     edc:	6823      	ldr	r3, [r4, #0]
     ede:	b91b      	cbnz	r3, ee8 <_malloc_r+0x3c>
     ee0:	4630      	mov	r0, r6
     ee2:	f000 fb01 	bl	14e8 <_sbrk_r>
     ee6:	6020      	str	r0, [r4, #0]
     ee8:	4629      	mov	r1, r5
     eea:	4630      	mov	r0, r6
     eec:	f000 fafc 	bl	14e8 <_sbrk_r>
     ef0:	1c43      	adds	r3, r0, #1
     ef2:	d124      	bne.n	f3e <_malloc_r+0x92>
     ef4:	230c      	movs	r3, #12
     ef6:	4630      	mov	r0, r6
     ef8:	6033      	str	r3, [r6, #0]
     efa:	f000 fbae 	bl	165a <__malloc_unlock>
     efe:	e7e4      	b.n	eca <_malloc_r+0x1e>
     f00:	680b      	ldr	r3, [r1, #0]
     f02:	1b5b      	subs	r3, r3, r5
     f04:	d418      	bmi.n	f38 <_malloc_r+0x8c>
     f06:	2b0b      	cmp	r3, #11
     f08:	d90f      	bls.n	f2a <_malloc_r+0x7e>
     f0a:	600b      	str	r3, [r1, #0]
     f0c:	18cc      	adds	r4, r1, r3
     f0e:	50cd      	str	r5, [r1, r3]
     f10:	4630      	mov	r0, r6
     f12:	f000 fba2 	bl	165a <__malloc_unlock>
     f16:	f104 000b 	add.w	r0, r4, #11
     f1a:	1d23      	adds	r3, r4, #4
     f1c:	f020 0007 	bic.w	r0, r0, #7
     f20:	1ac3      	subs	r3, r0, r3
     f22:	d0d3      	beq.n	ecc <_malloc_r+0x20>
     f24:	425a      	negs	r2, r3
     f26:	50e2      	str	r2, [r4, r3]
     f28:	e7d0      	b.n	ecc <_malloc_r+0x20>
     f2a:	684b      	ldr	r3, [r1, #4]
     f2c:	428c      	cmp	r4, r1
     f2e:	bf16      	itet	ne
     f30:	6063      	strne	r3, [r4, #4]
     f32:	6013      	streq	r3, [r2, #0]
     f34:	460c      	movne	r4, r1
     f36:	e7eb      	b.n	f10 <_malloc_r+0x64>
     f38:	460c      	mov	r4, r1
     f3a:	6849      	ldr	r1, [r1, #4]
     f3c:	e7cc      	b.n	ed8 <_malloc_r+0x2c>
     f3e:	1cc4      	adds	r4, r0, #3
     f40:	f024 0403 	bic.w	r4, r4, #3
     f44:	42a0      	cmp	r0, r4
     f46:	d005      	beq.n	f54 <_malloc_r+0xa8>
     f48:	1a21      	subs	r1, r4, r0
     f4a:	4630      	mov	r0, r6
     f4c:	f000 facc 	bl	14e8 <_sbrk_r>
     f50:	3001      	adds	r0, #1
     f52:	d0cf      	beq.n	ef4 <_malloc_r+0x48>
     f54:	6025      	str	r5, [r4, #0]
     f56:	e7db      	b.n	f10 <_malloc_r+0x64>
     f58:	2000006c 	.word	0x2000006c
     f5c:	20000070 	.word	0x20000070

00000f60 <__sfputc_r>:
     f60:	6893      	ldr	r3, [r2, #8]
     f62:	b410      	push	{r4}
     f64:	3b01      	subs	r3, #1
     f66:	2b00      	cmp	r3, #0
     f68:	6093      	str	r3, [r2, #8]
     f6a:	da07      	bge.n	f7c <__sfputc_r+0x1c>
     f6c:	6994      	ldr	r4, [r2, #24]
     f6e:	42a3      	cmp	r3, r4
     f70:	db01      	blt.n	f76 <__sfputc_r+0x16>
     f72:	290a      	cmp	r1, #10
     f74:	d102      	bne.n	f7c <__sfputc_r+0x1c>
     f76:	bc10      	pop	{r4}
     f78:	f7ff bcae 	b.w	8d8 <__swbuf_r>
     f7c:	6813      	ldr	r3, [r2, #0]
     f7e:	1c58      	adds	r0, r3, #1
     f80:	6010      	str	r0, [r2, #0]
     f82:	7019      	strb	r1, [r3, #0]
     f84:	4608      	mov	r0, r1
     f86:	bc10      	pop	{r4}
     f88:	4770      	bx	lr

00000f8a <__sfputs_r>:
     f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f8c:	4606      	mov	r6, r0
     f8e:	460f      	mov	r7, r1
     f90:	4614      	mov	r4, r2
     f92:	18d5      	adds	r5, r2, r3
     f94:	42ac      	cmp	r4, r5
     f96:	d101      	bne.n	f9c <__sfputs_r+0x12>
     f98:	2000      	movs	r0, #0
     f9a:	e007      	b.n	fac <__sfputs_r+0x22>
     f9c:	463a      	mov	r2, r7
     f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
     fa2:	4630      	mov	r0, r6
     fa4:	f7ff ffdc 	bl	f60 <__sfputc_r>
     fa8:	1c43      	adds	r3, r0, #1
     faa:	d1f3      	bne.n	f94 <__sfputs_r+0xa>
     fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00000fb0 <_vfiprintf_r>:
     fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fb4:	b09d      	sub	sp, #116	; 0x74
     fb6:	460c      	mov	r4, r1
     fb8:	4617      	mov	r7, r2
     fba:	9303      	str	r3, [sp, #12]
     fbc:	4606      	mov	r6, r0
     fbe:	b118      	cbz	r0, fc8 <_vfiprintf_r+0x18>
     fc0:	6983      	ldr	r3, [r0, #24]
     fc2:	b90b      	cbnz	r3, fc8 <_vfiprintf_r+0x18>
     fc4:	f7ff fe38 	bl	c38 <__sinit>
     fc8:	4b7b      	ldr	r3, [pc, #492]	; (11b8 <_vfiprintf_r+0x208>)
     fca:	429c      	cmp	r4, r3
     fcc:	d157      	bne.n	107e <_vfiprintf_r+0xce>
     fce:	6874      	ldr	r4, [r6, #4]
     fd0:	89a3      	ldrh	r3, [r4, #12]
     fd2:	0718      	lsls	r0, r3, #28
     fd4:	d55d      	bpl.n	1092 <_vfiprintf_r+0xe2>
     fd6:	6923      	ldr	r3, [r4, #16]
     fd8:	2b00      	cmp	r3, #0
     fda:	d05a      	beq.n	1092 <_vfiprintf_r+0xe2>
     fdc:	2300      	movs	r3, #0
     fde:	9309      	str	r3, [sp, #36]	; 0x24
     fe0:	2320      	movs	r3, #32
     fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
     fe6:	2330      	movs	r3, #48	; 0x30
     fe8:	f04f 0b01 	mov.w	fp, #1
     fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
     ff0:	46b8      	mov	r8, r7
     ff2:	4645      	mov	r5, r8
     ff4:	f815 3b01 	ldrb.w	r3, [r5], #1
     ff8:	b10b      	cbz	r3, ffe <_vfiprintf_r+0x4e>
     ffa:	2b25      	cmp	r3, #37	; 0x25
     ffc:	d154      	bne.n	10a8 <_vfiprintf_r+0xf8>
     ffe:	ebb8 0a07 	subs.w	sl, r8, r7
    1002:	d00b      	beq.n	101c <_vfiprintf_r+0x6c>
    1004:	4653      	mov	r3, sl
    1006:	463a      	mov	r2, r7
    1008:	4621      	mov	r1, r4
    100a:	4630      	mov	r0, r6
    100c:	f7ff ffbd 	bl	f8a <__sfputs_r>
    1010:	3001      	adds	r0, #1
    1012:	f000 80c2 	beq.w	119a <_vfiprintf_r+0x1ea>
    1016:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1018:	4453      	add	r3, sl
    101a:	9309      	str	r3, [sp, #36]	; 0x24
    101c:	f898 3000 	ldrb.w	r3, [r8]
    1020:	2b00      	cmp	r3, #0
    1022:	f000 80ba 	beq.w	119a <_vfiprintf_r+0x1ea>
    1026:	2300      	movs	r3, #0
    1028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    102c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1030:	9304      	str	r3, [sp, #16]
    1032:	9307      	str	r3, [sp, #28]
    1034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1038:	931a      	str	r3, [sp, #104]	; 0x68
    103a:	46a8      	mov	r8, r5
    103c:	2205      	movs	r2, #5
    103e:	f818 1b01 	ldrb.w	r1, [r8], #1
    1042:	485e      	ldr	r0, [pc, #376]	; (11bc <_vfiprintf_r+0x20c>)
    1044:	f000 fafa 	bl	163c <memchr>
    1048:	9b04      	ldr	r3, [sp, #16]
    104a:	bb78      	cbnz	r0, 10ac <_vfiprintf_r+0xfc>
    104c:	06d9      	lsls	r1, r3, #27
    104e:	bf44      	itt	mi
    1050:	2220      	movmi	r2, #32
    1052:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1056:	071a      	lsls	r2, r3, #28
    1058:	bf44      	itt	mi
    105a:	222b      	movmi	r2, #43	; 0x2b
    105c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1060:	782a      	ldrb	r2, [r5, #0]
    1062:	2a2a      	cmp	r2, #42	; 0x2a
    1064:	d02a      	beq.n	10bc <_vfiprintf_r+0x10c>
    1066:	46a8      	mov	r8, r5
    1068:	2000      	movs	r0, #0
    106a:	250a      	movs	r5, #10
    106c:	9a07      	ldr	r2, [sp, #28]
    106e:	4641      	mov	r1, r8
    1070:	f811 3b01 	ldrb.w	r3, [r1], #1
    1074:	3b30      	subs	r3, #48	; 0x30
    1076:	2b09      	cmp	r3, #9
    1078:	d969      	bls.n	114e <_vfiprintf_r+0x19e>
    107a:	b360      	cbz	r0, 10d6 <_vfiprintf_r+0x126>
    107c:	e024      	b.n	10c8 <_vfiprintf_r+0x118>
    107e:	4b50      	ldr	r3, [pc, #320]	; (11c0 <_vfiprintf_r+0x210>)
    1080:	429c      	cmp	r4, r3
    1082:	d101      	bne.n	1088 <_vfiprintf_r+0xd8>
    1084:	68b4      	ldr	r4, [r6, #8]
    1086:	e7a3      	b.n	fd0 <_vfiprintf_r+0x20>
    1088:	4b4e      	ldr	r3, [pc, #312]	; (11c4 <_vfiprintf_r+0x214>)
    108a:	429c      	cmp	r4, r3
    108c:	bf08      	it	eq
    108e:	68f4      	ldreq	r4, [r6, #12]
    1090:	e79e      	b.n	fd0 <_vfiprintf_r+0x20>
    1092:	4621      	mov	r1, r4
    1094:	4630      	mov	r0, r6
    1096:	f7ff fc71 	bl	97c <__swsetup_r>
    109a:	2800      	cmp	r0, #0
    109c:	d09e      	beq.n	fdc <_vfiprintf_r+0x2c>
    109e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10a2:	b01d      	add	sp, #116	; 0x74
    10a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a8:	46a8      	mov	r8, r5
    10aa:	e7a2      	b.n	ff2 <_vfiprintf_r+0x42>
    10ac:	4a43      	ldr	r2, [pc, #268]	; (11bc <_vfiprintf_r+0x20c>)
    10ae:	4645      	mov	r5, r8
    10b0:	1a80      	subs	r0, r0, r2
    10b2:	fa0b f000 	lsl.w	r0, fp, r0
    10b6:	4318      	orrs	r0, r3
    10b8:	9004      	str	r0, [sp, #16]
    10ba:	e7be      	b.n	103a <_vfiprintf_r+0x8a>
    10bc:	9a03      	ldr	r2, [sp, #12]
    10be:	1d11      	adds	r1, r2, #4
    10c0:	6812      	ldr	r2, [r2, #0]
    10c2:	9103      	str	r1, [sp, #12]
    10c4:	2a00      	cmp	r2, #0
    10c6:	db01      	blt.n	10cc <_vfiprintf_r+0x11c>
    10c8:	9207      	str	r2, [sp, #28]
    10ca:	e004      	b.n	10d6 <_vfiprintf_r+0x126>
    10cc:	4252      	negs	r2, r2
    10ce:	f043 0302 	orr.w	r3, r3, #2
    10d2:	9207      	str	r2, [sp, #28]
    10d4:	9304      	str	r3, [sp, #16]
    10d6:	f898 3000 	ldrb.w	r3, [r8]
    10da:	2b2e      	cmp	r3, #46	; 0x2e
    10dc:	d10e      	bne.n	10fc <_vfiprintf_r+0x14c>
    10de:	f898 3001 	ldrb.w	r3, [r8, #1]
    10e2:	2b2a      	cmp	r3, #42	; 0x2a
    10e4:	d138      	bne.n	1158 <_vfiprintf_r+0x1a8>
    10e6:	9b03      	ldr	r3, [sp, #12]
    10e8:	f108 0802 	add.w	r8, r8, #2
    10ec:	1d1a      	adds	r2, r3, #4
    10ee:	681b      	ldr	r3, [r3, #0]
    10f0:	9203      	str	r2, [sp, #12]
    10f2:	2b00      	cmp	r3, #0
    10f4:	bfb8      	it	lt
    10f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    10fa:	9305      	str	r3, [sp, #20]
    10fc:	4d32      	ldr	r5, [pc, #200]	; (11c8 <_vfiprintf_r+0x218>)
    10fe:	2203      	movs	r2, #3
    1100:	f898 1000 	ldrb.w	r1, [r8]
    1104:	4628      	mov	r0, r5
    1106:	f000 fa99 	bl	163c <memchr>
    110a:	b140      	cbz	r0, 111e <_vfiprintf_r+0x16e>
    110c:	2340      	movs	r3, #64	; 0x40
    110e:	1b40      	subs	r0, r0, r5
    1110:	fa03 f000 	lsl.w	r0, r3, r0
    1114:	9b04      	ldr	r3, [sp, #16]
    1116:	f108 0801 	add.w	r8, r8, #1
    111a:	4303      	orrs	r3, r0
    111c:	9304      	str	r3, [sp, #16]
    111e:	f898 1000 	ldrb.w	r1, [r8]
    1122:	2206      	movs	r2, #6
    1124:	4829      	ldr	r0, [pc, #164]	; (11cc <_vfiprintf_r+0x21c>)
    1126:	f108 0701 	add.w	r7, r8, #1
    112a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    112e:	f000 fa85 	bl	163c <memchr>
    1132:	2800      	cmp	r0, #0
    1134:	d037      	beq.n	11a6 <_vfiprintf_r+0x1f6>
    1136:	4b26      	ldr	r3, [pc, #152]	; (11d0 <_vfiprintf_r+0x220>)
    1138:	bb1b      	cbnz	r3, 1182 <_vfiprintf_r+0x1d2>
    113a:	9b03      	ldr	r3, [sp, #12]
    113c:	3307      	adds	r3, #7
    113e:	f023 0307 	bic.w	r3, r3, #7
    1142:	3308      	adds	r3, #8
    1144:	9303      	str	r3, [sp, #12]
    1146:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1148:	444b      	add	r3, r9
    114a:	9309      	str	r3, [sp, #36]	; 0x24
    114c:	e750      	b.n	ff0 <_vfiprintf_r+0x40>
    114e:	fb05 3202 	mla	r2, r5, r2, r3
    1152:	2001      	movs	r0, #1
    1154:	4688      	mov	r8, r1
    1156:	e78a      	b.n	106e <_vfiprintf_r+0xbe>
    1158:	2300      	movs	r3, #0
    115a:	250a      	movs	r5, #10
    115c:	4619      	mov	r1, r3
    115e:	f108 0801 	add.w	r8, r8, #1
    1162:	9305      	str	r3, [sp, #20]
    1164:	4640      	mov	r0, r8
    1166:	f810 2b01 	ldrb.w	r2, [r0], #1
    116a:	3a30      	subs	r2, #48	; 0x30
    116c:	2a09      	cmp	r2, #9
    116e:	d903      	bls.n	1178 <_vfiprintf_r+0x1c8>
    1170:	2b00      	cmp	r3, #0
    1172:	d0c3      	beq.n	10fc <_vfiprintf_r+0x14c>
    1174:	9105      	str	r1, [sp, #20]
    1176:	e7c1      	b.n	10fc <_vfiprintf_r+0x14c>
    1178:	fb05 2101 	mla	r1, r5, r1, r2
    117c:	2301      	movs	r3, #1
    117e:	4680      	mov	r8, r0
    1180:	e7f0      	b.n	1164 <_vfiprintf_r+0x1b4>
    1182:	ab03      	add	r3, sp, #12
    1184:	9300      	str	r3, [sp, #0]
    1186:	4622      	mov	r2, r4
    1188:	4b12      	ldr	r3, [pc, #72]	; (11d4 <_vfiprintf_r+0x224>)
    118a:	a904      	add	r1, sp, #16
    118c:	4630      	mov	r0, r6
    118e:	f3af 8000 	nop.w
    1192:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1196:	4681      	mov	r9, r0
    1198:	d1d5      	bne.n	1146 <_vfiprintf_r+0x196>
    119a:	89a3      	ldrh	r3, [r4, #12]
    119c:	065b      	lsls	r3, r3, #25
    119e:	f53f af7e 	bmi.w	109e <_vfiprintf_r+0xee>
    11a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    11a4:	e77d      	b.n	10a2 <_vfiprintf_r+0xf2>
    11a6:	ab03      	add	r3, sp, #12
    11a8:	9300      	str	r3, [sp, #0]
    11aa:	4622      	mov	r2, r4
    11ac:	4b09      	ldr	r3, [pc, #36]	; (11d4 <_vfiprintf_r+0x224>)
    11ae:	a904      	add	r1, sp, #16
    11b0:	4630      	mov	r0, r6
    11b2:	f000 f887 	bl	12c4 <_printf_i>
    11b6:	e7ec      	b.n	1192 <_vfiprintf_r+0x1e2>
    11b8:	00001bb0 	.word	0x00001bb0
    11bc:	00001bf0 	.word	0x00001bf0
    11c0:	00001bd0 	.word	0x00001bd0
    11c4:	00001b90 	.word	0x00001b90
    11c8:	00001bf6 	.word	0x00001bf6
    11cc:	00001bfa 	.word	0x00001bfa
    11d0:	00000000 	.word	0x00000000
    11d4:	00000f8b 	.word	0x00000f8b

000011d8 <_printf_common>:
    11d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    11dc:	4691      	mov	r9, r2
    11de:	461f      	mov	r7, r3
    11e0:	688a      	ldr	r2, [r1, #8]
    11e2:	690b      	ldr	r3, [r1, #16]
    11e4:	4606      	mov	r6, r0
    11e6:	4293      	cmp	r3, r2
    11e8:	bfb8      	it	lt
    11ea:	4613      	movlt	r3, r2
    11ec:	f8c9 3000 	str.w	r3, [r9]
    11f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    11f4:	460c      	mov	r4, r1
    11f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
    11fa:	b112      	cbz	r2, 1202 <_printf_common+0x2a>
    11fc:	3301      	adds	r3, #1
    11fe:	f8c9 3000 	str.w	r3, [r9]
    1202:	6823      	ldr	r3, [r4, #0]
    1204:	0699      	lsls	r1, r3, #26
    1206:	bf42      	ittt	mi
    1208:	f8d9 3000 	ldrmi.w	r3, [r9]
    120c:	3302      	addmi	r3, #2
    120e:	f8c9 3000 	strmi.w	r3, [r9]
    1212:	6825      	ldr	r5, [r4, #0]
    1214:	f015 0506 	ands.w	r5, r5, #6
    1218:	d107      	bne.n	122a <_printf_common+0x52>
    121a:	f104 0a19 	add.w	sl, r4, #25
    121e:	68e3      	ldr	r3, [r4, #12]
    1220:	f8d9 2000 	ldr.w	r2, [r9]
    1224:	1a9b      	subs	r3, r3, r2
    1226:	42ab      	cmp	r3, r5
    1228:	dc29      	bgt.n	127e <_printf_common+0xa6>
    122a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    122e:	6822      	ldr	r2, [r4, #0]
    1230:	3300      	adds	r3, #0
    1232:	bf18      	it	ne
    1234:	2301      	movne	r3, #1
    1236:	0692      	lsls	r2, r2, #26
    1238:	d42e      	bmi.n	1298 <_printf_common+0xc0>
    123a:	f104 0243 	add.w	r2, r4, #67	; 0x43
    123e:	4639      	mov	r1, r7
    1240:	4630      	mov	r0, r6
    1242:	47c0      	blx	r8
    1244:	3001      	adds	r0, #1
    1246:	d021      	beq.n	128c <_printf_common+0xb4>
    1248:	6823      	ldr	r3, [r4, #0]
    124a:	68e5      	ldr	r5, [r4, #12]
    124c:	f003 0306 	and.w	r3, r3, #6
    1250:	2b04      	cmp	r3, #4
    1252:	bf18      	it	ne
    1254:	2500      	movne	r5, #0
    1256:	f8d9 2000 	ldr.w	r2, [r9]
    125a:	f04f 0900 	mov.w	r9, #0
    125e:	bf08      	it	eq
    1260:	1aad      	subeq	r5, r5, r2
    1262:	68a3      	ldr	r3, [r4, #8]
    1264:	6922      	ldr	r2, [r4, #16]
    1266:	bf08      	it	eq
    1268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    126c:	4293      	cmp	r3, r2
    126e:	bfc4      	itt	gt
    1270:	1a9b      	subgt	r3, r3, r2
    1272:	18ed      	addgt	r5, r5, r3
    1274:	341a      	adds	r4, #26
    1276:	454d      	cmp	r5, r9
    1278:	d11a      	bne.n	12b0 <_printf_common+0xd8>
    127a:	2000      	movs	r0, #0
    127c:	e008      	b.n	1290 <_printf_common+0xb8>
    127e:	2301      	movs	r3, #1
    1280:	4652      	mov	r2, sl
    1282:	4639      	mov	r1, r7
    1284:	4630      	mov	r0, r6
    1286:	47c0      	blx	r8
    1288:	3001      	adds	r0, #1
    128a:	d103      	bne.n	1294 <_printf_common+0xbc>
    128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1294:	3501      	adds	r5, #1
    1296:	e7c2      	b.n	121e <_printf_common+0x46>
    1298:	2030      	movs	r0, #48	; 0x30
    129a:	18e1      	adds	r1, r4, r3
    129c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    12a0:	1c5a      	adds	r2, r3, #1
    12a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    12a6:	4422      	add	r2, r4
    12a8:	3302      	adds	r3, #2
    12aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    12ae:	e7c4      	b.n	123a <_printf_common+0x62>
    12b0:	2301      	movs	r3, #1
    12b2:	4622      	mov	r2, r4
    12b4:	4639      	mov	r1, r7
    12b6:	4630      	mov	r0, r6
    12b8:	47c0      	blx	r8
    12ba:	3001      	adds	r0, #1
    12bc:	d0e6      	beq.n	128c <_printf_common+0xb4>
    12be:	f109 0901 	add.w	r9, r9, #1
    12c2:	e7d8      	b.n	1276 <_printf_common+0x9e>

000012c4 <_printf_i>:
    12c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    12cc:	460c      	mov	r4, r1
    12ce:	7e09      	ldrb	r1, [r1, #24]
    12d0:	b085      	sub	sp, #20
    12d2:	296e      	cmp	r1, #110	; 0x6e
    12d4:	4617      	mov	r7, r2
    12d6:	4606      	mov	r6, r0
    12d8:	4698      	mov	r8, r3
    12da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    12dc:	f000 80b3 	beq.w	1446 <_printf_i+0x182>
    12e0:	d822      	bhi.n	1328 <_printf_i+0x64>
    12e2:	2963      	cmp	r1, #99	; 0x63
    12e4:	d036      	beq.n	1354 <_printf_i+0x90>
    12e6:	d80a      	bhi.n	12fe <_printf_i+0x3a>
    12e8:	2900      	cmp	r1, #0
    12ea:	f000 80b9 	beq.w	1460 <_printf_i+0x19c>
    12ee:	2958      	cmp	r1, #88	; 0x58
    12f0:	f000 8083 	beq.w	13fa <_printf_i+0x136>
    12f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
    12f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    12fc:	e032      	b.n	1364 <_printf_i+0xa0>
    12fe:	2964      	cmp	r1, #100	; 0x64
    1300:	d001      	beq.n	1306 <_printf_i+0x42>
    1302:	2969      	cmp	r1, #105	; 0x69
    1304:	d1f6      	bne.n	12f4 <_printf_i+0x30>
    1306:	6820      	ldr	r0, [r4, #0]
    1308:	6813      	ldr	r3, [r2, #0]
    130a:	0605      	lsls	r5, r0, #24
    130c:	f103 0104 	add.w	r1, r3, #4
    1310:	d52a      	bpl.n	1368 <_printf_i+0xa4>
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	6011      	str	r1, [r2, #0]
    1316:	2b00      	cmp	r3, #0
    1318:	da03      	bge.n	1322 <_printf_i+0x5e>
    131a:	222d      	movs	r2, #45	; 0x2d
    131c:	425b      	negs	r3, r3
    131e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    1322:	486f      	ldr	r0, [pc, #444]	; (14e0 <_printf_i+0x21c>)
    1324:	220a      	movs	r2, #10
    1326:	e039      	b.n	139c <_printf_i+0xd8>
    1328:	2973      	cmp	r1, #115	; 0x73
    132a:	f000 809d 	beq.w	1468 <_printf_i+0x1a4>
    132e:	d808      	bhi.n	1342 <_printf_i+0x7e>
    1330:	296f      	cmp	r1, #111	; 0x6f
    1332:	d020      	beq.n	1376 <_printf_i+0xb2>
    1334:	2970      	cmp	r1, #112	; 0x70
    1336:	d1dd      	bne.n	12f4 <_printf_i+0x30>
    1338:	6823      	ldr	r3, [r4, #0]
    133a:	f043 0320 	orr.w	r3, r3, #32
    133e:	6023      	str	r3, [r4, #0]
    1340:	e003      	b.n	134a <_printf_i+0x86>
    1342:	2975      	cmp	r1, #117	; 0x75
    1344:	d017      	beq.n	1376 <_printf_i+0xb2>
    1346:	2978      	cmp	r1, #120	; 0x78
    1348:	d1d4      	bne.n	12f4 <_printf_i+0x30>
    134a:	2378      	movs	r3, #120	; 0x78
    134c:	4865      	ldr	r0, [pc, #404]	; (14e4 <_printf_i+0x220>)
    134e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1352:	e055      	b.n	1400 <_printf_i+0x13c>
    1354:	6813      	ldr	r3, [r2, #0]
    1356:	f104 0542 	add.w	r5, r4, #66	; 0x42
    135a:	1d19      	adds	r1, r3, #4
    135c:	681b      	ldr	r3, [r3, #0]
    135e:	6011      	str	r1, [r2, #0]
    1360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1364:	2301      	movs	r3, #1
    1366:	e08c      	b.n	1482 <_printf_i+0x1be>
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	f010 0f40 	tst.w	r0, #64	; 0x40
    136e:	6011      	str	r1, [r2, #0]
    1370:	bf18      	it	ne
    1372:	b21b      	sxthne	r3, r3
    1374:	e7cf      	b.n	1316 <_printf_i+0x52>
    1376:	6813      	ldr	r3, [r2, #0]
    1378:	6825      	ldr	r5, [r4, #0]
    137a:	1d18      	adds	r0, r3, #4
    137c:	6010      	str	r0, [r2, #0]
    137e:	0628      	lsls	r0, r5, #24
    1380:	d501      	bpl.n	1386 <_printf_i+0xc2>
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	e002      	b.n	138c <_printf_i+0xc8>
    1386:	0668      	lsls	r0, r5, #25
    1388:	d5fb      	bpl.n	1382 <_printf_i+0xbe>
    138a:	881b      	ldrh	r3, [r3, #0]
    138c:	296f      	cmp	r1, #111	; 0x6f
    138e:	bf14      	ite	ne
    1390:	220a      	movne	r2, #10
    1392:	2208      	moveq	r2, #8
    1394:	4852      	ldr	r0, [pc, #328]	; (14e0 <_printf_i+0x21c>)
    1396:	2100      	movs	r1, #0
    1398:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    139c:	6865      	ldr	r5, [r4, #4]
    139e:	2d00      	cmp	r5, #0
    13a0:	60a5      	str	r5, [r4, #8]
    13a2:	f2c0 8095 	blt.w	14d0 <_printf_i+0x20c>
    13a6:	6821      	ldr	r1, [r4, #0]
    13a8:	f021 0104 	bic.w	r1, r1, #4
    13ac:	6021      	str	r1, [r4, #0]
    13ae:	2b00      	cmp	r3, #0
    13b0:	d13d      	bne.n	142e <_printf_i+0x16a>
    13b2:	2d00      	cmp	r5, #0
    13b4:	f040 808e 	bne.w	14d4 <_printf_i+0x210>
    13b8:	4665      	mov	r5, ip
    13ba:	2a08      	cmp	r2, #8
    13bc:	d10b      	bne.n	13d6 <_printf_i+0x112>
    13be:	6823      	ldr	r3, [r4, #0]
    13c0:	07db      	lsls	r3, r3, #31
    13c2:	d508      	bpl.n	13d6 <_printf_i+0x112>
    13c4:	6923      	ldr	r3, [r4, #16]
    13c6:	6862      	ldr	r2, [r4, #4]
    13c8:	429a      	cmp	r2, r3
    13ca:	bfde      	ittt	le
    13cc:	2330      	movle	r3, #48	; 0x30
    13ce:	f805 3c01 	strble.w	r3, [r5, #-1]
    13d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    13d6:	ebac 0305 	sub.w	r3, ip, r5
    13da:	6123      	str	r3, [r4, #16]
    13dc:	f8cd 8000 	str.w	r8, [sp]
    13e0:	463b      	mov	r3, r7
    13e2:	aa03      	add	r2, sp, #12
    13e4:	4621      	mov	r1, r4
    13e6:	4630      	mov	r0, r6
    13e8:	f7ff fef6 	bl	11d8 <_printf_common>
    13ec:	3001      	adds	r0, #1
    13ee:	d14d      	bne.n	148c <_printf_i+0x1c8>
    13f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13f4:	b005      	add	sp, #20
    13f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    13fa:	4839      	ldr	r0, [pc, #228]	; (14e0 <_printf_i+0x21c>)
    13fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    1400:	6813      	ldr	r3, [r2, #0]
    1402:	6821      	ldr	r1, [r4, #0]
    1404:	1d1d      	adds	r5, r3, #4
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	6015      	str	r5, [r2, #0]
    140a:	060a      	lsls	r2, r1, #24
    140c:	d50b      	bpl.n	1426 <_printf_i+0x162>
    140e:	07ca      	lsls	r2, r1, #31
    1410:	bf44      	itt	mi
    1412:	f041 0120 	orrmi.w	r1, r1, #32
    1416:	6021      	strmi	r1, [r4, #0]
    1418:	b91b      	cbnz	r3, 1422 <_printf_i+0x15e>
    141a:	6822      	ldr	r2, [r4, #0]
    141c:	f022 0220 	bic.w	r2, r2, #32
    1420:	6022      	str	r2, [r4, #0]
    1422:	2210      	movs	r2, #16
    1424:	e7b7      	b.n	1396 <_printf_i+0xd2>
    1426:	064d      	lsls	r5, r1, #25
    1428:	bf48      	it	mi
    142a:	b29b      	uxthmi	r3, r3
    142c:	e7ef      	b.n	140e <_printf_i+0x14a>
    142e:	4665      	mov	r5, ip
    1430:	fbb3 f1f2 	udiv	r1, r3, r2
    1434:	fb02 3311 	mls	r3, r2, r1, r3
    1438:	5cc3      	ldrb	r3, [r0, r3]
    143a:	f805 3d01 	strb.w	r3, [r5, #-1]!
    143e:	460b      	mov	r3, r1
    1440:	2900      	cmp	r1, #0
    1442:	d1f5      	bne.n	1430 <_printf_i+0x16c>
    1444:	e7b9      	b.n	13ba <_printf_i+0xf6>
    1446:	6813      	ldr	r3, [r2, #0]
    1448:	6825      	ldr	r5, [r4, #0]
    144a:	1d18      	adds	r0, r3, #4
    144c:	6961      	ldr	r1, [r4, #20]
    144e:	6010      	str	r0, [r2, #0]
    1450:	0628      	lsls	r0, r5, #24
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	d501      	bpl.n	145a <_printf_i+0x196>
    1456:	6019      	str	r1, [r3, #0]
    1458:	e002      	b.n	1460 <_printf_i+0x19c>
    145a:	066a      	lsls	r2, r5, #25
    145c:	d5fb      	bpl.n	1456 <_printf_i+0x192>
    145e:	8019      	strh	r1, [r3, #0]
    1460:	2300      	movs	r3, #0
    1462:	4665      	mov	r5, ip
    1464:	6123      	str	r3, [r4, #16]
    1466:	e7b9      	b.n	13dc <_printf_i+0x118>
    1468:	6813      	ldr	r3, [r2, #0]
    146a:	1d19      	adds	r1, r3, #4
    146c:	6011      	str	r1, [r2, #0]
    146e:	681d      	ldr	r5, [r3, #0]
    1470:	6862      	ldr	r2, [r4, #4]
    1472:	2100      	movs	r1, #0
    1474:	4628      	mov	r0, r5
    1476:	f000 f8e1 	bl	163c <memchr>
    147a:	b108      	cbz	r0, 1480 <_printf_i+0x1bc>
    147c:	1b40      	subs	r0, r0, r5
    147e:	6060      	str	r0, [r4, #4]
    1480:	6863      	ldr	r3, [r4, #4]
    1482:	6123      	str	r3, [r4, #16]
    1484:	2300      	movs	r3, #0
    1486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    148a:	e7a7      	b.n	13dc <_printf_i+0x118>
    148c:	6923      	ldr	r3, [r4, #16]
    148e:	462a      	mov	r2, r5
    1490:	4639      	mov	r1, r7
    1492:	4630      	mov	r0, r6
    1494:	47c0      	blx	r8
    1496:	3001      	adds	r0, #1
    1498:	d0aa      	beq.n	13f0 <_printf_i+0x12c>
    149a:	6823      	ldr	r3, [r4, #0]
    149c:	079b      	lsls	r3, r3, #30
    149e:	d413      	bmi.n	14c8 <_printf_i+0x204>
    14a0:	68e0      	ldr	r0, [r4, #12]
    14a2:	9b03      	ldr	r3, [sp, #12]
    14a4:	4298      	cmp	r0, r3
    14a6:	bfb8      	it	lt
    14a8:	4618      	movlt	r0, r3
    14aa:	e7a3      	b.n	13f4 <_printf_i+0x130>
    14ac:	2301      	movs	r3, #1
    14ae:	464a      	mov	r2, r9
    14b0:	4639      	mov	r1, r7
    14b2:	4630      	mov	r0, r6
    14b4:	47c0      	blx	r8
    14b6:	3001      	adds	r0, #1
    14b8:	d09a      	beq.n	13f0 <_printf_i+0x12c>
    14ba:	3501      	adds	r5, #1
    14bc:	68e3      	ldr	r3, [r4, #12]
    14be:	9a03      	ldr	r2, [sp, #12]
    14c0:	1a9b      	subs	r3, r3, r2
    14c2:	42ab      	cmp	r3, r5
    14c4:	dcf2      	bgt.n	14ac <_printf_i+0x1e8>
    14c6:	e7eb      	b.n	14a0 <_printf_i+0x1dc>
    14c8:	2500      	movs	r5, #0
    14ca:	f104 0919 	add.w	r9, r4, #25
    14ce:	e7f5      	b.n	14bc <_printf_i+0x1f8>
    14d0:	2b00      	cmp	r3, #0
    14d2:	d1ac      	bne.n	142e <_printf_i+0x16a>
    14d4:	7803      	ldrb	r3, [r0, #0]
    14d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
    14da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    14de:	e76c      	b.n	13ba <_printf_i+0xf6>
    14e0:	00001c01 	.word	0x00001c01
    14e4:	00001c12 	.word	0x00001c12

000014e8 <_sbrk_r>:
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	2300      	movs	r3, #0
    14ec:	4c05      	ldr	r4, [pc, #20]	; (1504 <_sbrk_r+0x1c>)
    14ee:	4605      	mov	r5, r0
    14f0:	4608      	mov	r0, r1
    14f2:	6023      	str	r3, [r4, #0]
    14f4:	f000 f8ec 	bl	16d0 <_sbrk>
    14f8:	1c43      	adds	r3, r0, #1
    14fa:	d102      	bne.n	1502 <_sbrk_r+0x1a>
    14fc:	6823      	ldr	r3, [r4, #0]
    14fe:	b103      	cbz	r3, 1502 <_sbrk_r+0x1a>
    1500:	602b      	str	r3, [r5, #0]
    1502:	bd38      	pop	{r3, r4, r5, pc}
    1504:	20000084 	.word	0x20000084

00001508 <__sread>:
    1508:	b510      	push	{r4, lr}
    150a:	460c      	mov	r4, r1
    150c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1510:	f000 f8a4 	bl	165c <_read_r>
    1514:	2800      	cmp	r0, #0
    1516:	bfab      	itete	ge
    1518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    151a:	89a3      	ldrhlt	r3, [r4, #12]
    151c:	181b      	addge	r3, r3, r0
    151e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    1522:	bfac      	ite	ge
    1524:	6563      	strge	r3, [r4, #84]	; 0x54
    1526:	81a3      	strhlt	r3, [r4, #12]
    1528:	bd10      	pop	{r4, pc}

0000152a <__swrite>:
    152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    152e:	461f      	mov	r7, r3
    1530:	898b      	ldrh	r3, [r1, #12]
    1532:	4605      	mov	r5, r0
    1534:	05db      	lsls	r3, r3, #23
    1536:	460c      	mov	r4, r1
    1538:	4616      	mov	r6, r2
    153a:	d505      	bpl.n	1548 <__swrite+0x1e>
    153c:	2302      	movs	r3, #2
    153e:	2200      	movs	r2, #0
    1540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1544:	f000 f868 	bl	1618 <_lseek_r>
    1548:	89a3      	ldrh	r3, [r4, #12]
    154a:	4632      	mov	r2, r6
    154c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1550:	81a3      	strh	r3, [r4, #12]
    1552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1556:	463b      	mov	r3, r7
    1558:	4628      	mov	r0, r5
    155a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    155e:	f000 b817 	b.w	1590 <_write_r>

00001562 <__sseek>:
    1562:	b510      	push	{r4, lr}
    1564:	460c      	mov	r4, r1
    1566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    156a:	f000 f855 	bl	1618 <_lseek_r>
    156e:	1c43      	adds	r3, r0, #1
    1570:	89a3      	ldrh	r3, [r4, #12]
    1572:	bf15      	itete	ne
    1574:	6560      	strne	r0, [r4, #84]	; 0x54
    1576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    157a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    157e:	81a3      	strheq	r3, [r4, #12]
    1580:	bf18      	it	ne
    1582:	81a3      	strhne	r3, [r4, #12]
    1584:	bd10      	pop	{r4, pc}

00001586 <__sclose>:
    1586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    158a:	f000 b813 	b.w	15b4 <_close_r>
	...

00001590 <_write_r>:
    1590:	b538      	push	{r3, r4, r5, lr}
    1592:	4605      	mov	r5, r0
    1594:	4608      	mov	r0, r1
    1596:	4611      	mov	r1, r2
    1598:	2200      	movs	r2, #0
    159a:	4c05      	ldr	r4, [pc, #20]	; (15b0 <_write_r+0x20>)
    159c:	6022      	str	r2, [r4, #0]
    159e:	461a      	mov	r2, r3
    15a0:	f7ff f8c4 	bl	72c <_write>
    15a4:	1c43      	adds	r3, r0, #1
    15a6:	d102      	bne.n	15ae <_write_r+0x1e>
    15a8:	6823      	ldr	r3, [r4, #0]
    15aa:	b103      	cbz	r3, 15ae <_write_r+0x1e>
    15ac:	602b      	str	r3, [r5, #0]
    15ae:	bd38      	pop	{r3, r4, r5, pc}
    15b0:	20000084 	.word	0x20000084

000015b4 <_close_r>:
    15b4:	b538      	push	{r3, r4, r5, lr}
    15b6:	2300      	movs	r3, #0
    15b8:	4c05      	ldr	r4, [pc, #20]	; (15d0 <_close_r+0x1c>)
    15ba:	4605      	mov	r5, r0
    15bc:	4608      	mov	r0, r1
    15be:	6023      	str	r3, [r4, #0]
    15c0:	f000 f85e 	bl	1680 <_close>
    15c4:	1c43      	adds	r3, r0, #1
    15c6:	d102      	bne.n	15ce <_close_r+0x1a>
    15c8:	6823      	ldr	r3, [r4, #0]
    15ca:	b103      	cbz	r3, 15ce <_close_r+0x1a>
    15cc:	602b      	str	r3, [r5, #0]
    15ce:	bd38      	pop	{r3, r4, r5, pc}
    15d0:	20000084 	.word	0x20000084

000015d4 <_fstat_r>:
    15d4:	b538      	push	{r3, r4, r5, lr}
    15d6:	2300      	movs	r3, #0
    15d8:	4c06      	ldr	r4, [pc, #24]	; (15f4 <_fstat_r+0x20>)
    15da:	4605      	mov	r5, r0
    15dc:	4608      	mov	r0, r1
    15de:	4611      	mov	r1, r2
    15e0:	6023      	str	r3, [r4, #0]
    15e2:	f000 f855 	bl	1690 <_fstat>
    15e6:	1c43      	adds	r3, r0, #1
    15e8:	d102      	bne.n	15f0 <_fstat_r+0x1c>
    15ea:	6823      	ldr	r3, [r4, #0]
    15ec:	b103      	cbz	r3, 15f0 <_fstat_r+0x1c>
    15ee:	602b      	str	r3, [r5, #0]
    15f0:	bd38      	pop	{r3, r4, r5, pc}
    15f2:	bf00      	nop
    15f4:	20000084 	.word	0x20000084

000015f8 <_isatty_r>:
    15f8:	b538      	push	{r3, r4, r5, lr}
    15fa:	2300      	movs	r3, #0
    15fc:	4c05      	ldr	r4, [pc, #20]	; (1614 <_isatty_r+0x1c>)
    15fe:	4605      	mov	r5, r0
    1600:	4608      	mov	r0, r1
    1602:	6023      	str	r3, [r4, #0]
    1604:	f000 f84c 	bl	16a0 <_isatty>
    1608:	1c43      	adds	r3, r0, #1
    160a:	d102      	bne.n	1612 <_isatty_r+0x1a>
    160c:	6823      	ldr	r3, [r4, #0]
    160e:	b103      	cbz	r3, 1612 <_isatty_r+0x1a>
    1610:	602b      	str	r3, [r5, #0]
    1612:	bd38      	pop	{r3, r4, r5, pc}
    1614:	20000084 	.word	0x20000084

00001618 <_lseek_r>:
    1618:	b538      	push	{r3, r4, r5, lr}
    161a:	4605      	mov	r5, r0
    161c:	4608      	mov	r0, r1
    161e:	4611      	mov	r1, r2
    1620:	2200      	movs	r2, #0
    1622:	4c05      	ldr	r4, [pc, #20]	; (1638 <_lseek_r+0x20>)
    1624:	6022      	str	r2, [r4, #0]
    1626:	461a      	mov	r2, r3
    1628:	f000 f842 	bl	16b0 <_lseek>
    162c:	1c43      	adds	r3, r0, #1
    162e:	d102      	bne.n	1636 <_lseek_r+0x1e>
    1630:	6823      	ldr	r3, [r4, #0]
    1632:	b103      	cbz	r3, 1636 <_lseek_r+0x1e>
    1634:	602b      	str	r3, [r5, #0]
    1636:	bd38      	pop	{r3, r4, r5, pc}
    1638:	20000084 	.word	0x20000084

0000163c <memchr>:
    163c:	b510      	push	{r4, lr}
    163e:	b2c9      	uxtb	r1, r1
    1640:	4402      	add	r2, r0
    1642:	4290      	cmp	r0, r2
    1644:	4603      	mov	r3, r0
    1646:	d101      	bne.n	164c <memchr+0x10>
    1648:	2300      	movs	r3, #0
    164a:	e003      	b.n	1654 <memchr+0x18>
    164c:	781c      	ldrb	r4, [r3, #0]
    164e:	3001      	adds	r0, #1
    1650:	428c      	cmp	r4, r1
    1652:	d1f6      	bne.n	1642 <memchr+0x6>
    1654:	4618      	mov	r0, r3
    1656:	bd10      	pop	{r4, pc}

00001658 <__malloc_lock>:
    1658:	4770      	bx	lr

0000165a <__malloc_unlock>:
    165a:	4770      	bx	lr

0000165c <_read_r>:
    165c:	b538      	push	{r3, r4, r5, lr}
    165e:	4605      	mov	r5, r0
    1660:	4608      	mov	r0, r1
    1662:	4611      	mov	r1, r2
    1664:	2200      	movs	r2, #0
    1666:	4c05      	ldr	r4, [pc, #20]	; (167c <_read_r+0x20>)
    1668:	6022      	str	r2, [r4, #0]
    166a:	461a      	mov	r2, r3
    166c:	f000 f828 	bl	16c0 <_read>
    1670:	1c43      	adds	r3, r0, #1
    1672:	d102      	bne.n	167a <_read_r+0x1e>
    1674:	6823      	ldr	r3, [r4, #0]
    1676:	b103      	cbz	r3, 167a <_read_r+0x1e>
    1678:	602b      	str	r3, [r5, #0]
    167a:	bd38      	pop	{r3, r4, r5, pc}
    167c:	20000084 	.word	0x20000084

00001680 <_close>:
    1680:	2258      	movs	r2, #88	; 0x58
    1682:	4b02      	ldr	r3, [pc, #8]	; (168c <_close+0xc>)
    1684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1688:	601a      	str	r2, [r3, #0]
    168a:	4770      	bx	lr
    168c:	20000084 	.word	0x20000084

00001690 <_fstat>:
    1690:	2258      	movs	r2, #88	; 0x58
    1692:	4b02      	ldr	r3, [pc, #8]	; (169c <_fstat+0xc>)
    1694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1698:	601a      	str	r2, [r3, #0]
    169a:	4770      	bx	lr
    169c:	20000084 	.word	0x20000084

000016a0 <_isatty>:
    16a0:	2258      	movs	r2, #88	; 0x58
    16a2:	4b02      	ldr	r3, [pc, #8]	; (16ac <_isatty+0xc>)
    16a4:	2000      	movs	r0, #0
    16a6:	601a      	str	r2, [r3, #0]
    16a8:	4770      	bx	lr
    16aa:	bf00      	nop
    16ac:	20000084 	.word	0x20000084

000016b0 <_lseek>:
    16b0:	2258      	movs	r2, #88	; 0x58
    16b2:	4b02      	ldr	r3, [pc, #8]	; (16bc <_lseek+0xc>)
    16b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16b8:	601a      	str	r2, [r3, #0]
    16ba:	4770      	bx	lr
    16bc:	20000084 	.word	0x20000084

000016c0 <_read>:
    16c0:	2258      	movs	r2, #88	; 0x58
    16c2:	4b02      	ldr	r3, [pc, #8]	; (16cc <_read+0xc>)
    16c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16c8:	601a      	str	r2, [r3, #0]
    16ca:	4770      	bx	lr
    16cc:	20000084 	.word	0x20000084

000016d0 <_sbrk>:
    16d0:	4a04      	ldr	r2, [pc, #16]	; (16e4 <_sbrk+0x14>)
    16d2:	4905      	ldr	r1, [pc, #20]	; (16e8 <_sbrk+0x18>)
    16d4:	6813      	ldr	r3, [r2, #0]
    16d6:	2b00      	cmp	r3, #0
    16d8:	bf08      	it	eq
    16da:	460b      	moveq	r3, r1
    16dc:	4418      	add	r0, r3
    16de:	6010      	str	r0, [r2, #0]
    16e0:	4618      	mov	r0, r3
    16e2:	4770      	bx	lr
    16e4:	20000074 	.word	0x20000074
    16e8:	20000088 	.word	0x20000088

000016ec <_exit>:
    16ec:	e7fe      	b.n	16ec <_exit>
    16ee:	bf00      	nop

000016f0 <_init>:
    16f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16f2:	bf00      	nop

000016f4 <_fini>:
    16f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16f6:	bf00      	nop
    16f8:	6e69614d 	.word	0x6e69614d
    16fc:	6f727020 	.word	0x6f727020
    1700:	6d617267 	.word	0x6d617267
    1704:	72617020 	.word	0x72617020
    1708:	00322074 	.word	0x00322074
    170c:	6157202d 	.word	0x6157202d
    1710:	64686374 	.word	0x64686374
    1714:	7220676f 	.word	0x7220676f
    1718:	74657365 	.word	0x74657365
    171c:	6d6f6320 	.word	0x6d6f6320
    1720:	74656c70 	.word	0x74656c70
    1724:	00006465 	.word	0x00006465
    1728:	59532020 	.word	0x59532020
    172c:	4e4f4353 	.word	0x4e4f4353
    1730:	53523e2d 	.word	0x53523e2d
    1734:	464e4954 	.word	0x464e4954
    1738:	203d204f 	.word	0x203d204f
    173c:	000a7825 	.word	0x000a7825
    1740:	4f525245 	.word	0x4f525245
    1744:	72203a52 	.word	0x72203a52
    1748:	74657365 	.word	0x74657365
    174c:	666e6920 	.word	0x666e6920
    1750:	6572206f 	.word	0x6572206f
    1754:	74736967 	.word	0x74736967
    1758:	76207265 	.word	0x76207265
    175c:	65756c61 	.word	0x65756c61
    1760:	636e6920 	.word	0x636e6920
    1764:	6572726f 	.word	0x6572726f
    1768:	0a2e7463 	.word	0x0a2e7463
    176c:	00000000 	.word	0x00000000
    1770:	74736554 	.word	0x74736554
    1774:	20676e69 	.word	0x20676e69
    1778:	656e6567 	.word	0x656e6567
    177c:	69746172 	.word	0x69746172
    1780:	6f206e6f 	.word	0x6f206e6f
    1784:	4d4e2066 	.word	0x4d4e2066
    1788:	73752049 	.word	0x73752049
    178c:	20676e69 	.word	0x20676e69
    1790:	65746e69 	.word	0x65746e69
    1794:	74617267 	.word	0x74617267
    1798:	206e6f69 	.word	0x206e6f69
    179c:	74736574 	.word	0x74736574
    17a0:	67657220 	.word	0x67657220
    17a4:	65747369 	.word	0x65747369
    17a8:	00000072 	.word	0x00000072
    17ac:	202d2020 	.word	0x202d2020
    17b0:	65746e49 	.word	0x65746e49
    17b4:	74617267 	.word	0x74617267
    17b8:	206e6f69 	.word	0x206e6f69
    17bc:	746e6f43 	.word	0x746e6f43
    17c0:	206c6f72 	.word	0x206c6f72
    17c4:	64616572 	.word	0x64616572
    17c8:	72726520 	.word	0x72726520
    17cc:	0000726f 	.word	0x0000726f
    17d0:	202d2020 	.word	0x202d2020
    17d4:	65746e49 	.word	0x65746e49
    17d8:	74617267 	.word	0x74617267
    17dc:	206e6f69 	.word	0x206e6f69
    17e0:	74736554 	.word	0x74736554
    17e4:	65706f20 	.word	0x65706f20
    17e8:	69746172 	.word	0x69746172
    17ec:	66206e6f 	.word	0x66206e6f
    17f0:	656c6961 	.word	0x656c6961
    17f4:	00000064 	.word	0x00000064
    17f8:	202d2020 	.word	0x202d2020
    17fc:	65746e49 	.word	0x65746e49
    1800:	74617267 	.word	0x74617267
    1804:	206e6f69 	.word	0x206e6f69
    1808:	746e6f43 	.word	0x746e6f43
    180c:	206c6f72 	.word	0x206c6f72
    1810:	61656c63 	.word	0x61656c63
    1814:	72652072 	.word	0x72652072
    1818:	00726f72 	.word	0x00726f72
    181c:	54202a2a 	.word	0x54202a2a
    1820:	20545345 	.word	0x20545345
    1824:	4c494146 	.word	0x4c494146
    1828:	2a204445 	.word	0x2a204445
    182c:	7245202a 	.word	0x7245202a
    1830:	73726f72 	.word	0x73726f72
    1834:	206e6920 	.word	0x206e6920
    1838:	63746157 	.word	0x63746157
    183c:	676f6468 	.word	0x676f6468
    1840:	73657420 	.word	0x73657420
    1844:	00000a74 	.word	0x00000a74
    1848:	63746157 	.word	0x63746157
    184c:	676f6468 	.word	0x676f6468
    1850:	6d656420 	.word	0x6d656420
    1854:	6f63206f 	.word	0x6f63206f
    1858:	656c706d 	.word	0x656c706d
    185c:	20646574 	.word	0x20646574
    1860:	63637573 	.word	0x63637573
    1864:	66737365 	.word	0x66737365
    1868:	796c6c75 	.word	0x796c6c75
    186c:	202a2a0a 	.word	0x202a2a0a
    1870:	54534554 	.word	0x54534554
    1874:	53415020 	.word	0x53415020
    1878:	20444553 	.word	0x20444553
    187c:	0a202a2a 	.word	0x0a202a2a
    1880:	00000000 	.word	0x00000000
    1884:	6c43202d 	.word	0x6c43202d
    1888:	20726165 	.word	0x20726165
    188c:	65736572 	.word	0x65736572
    1890:	6e692074 	.word	0x6e692074
    1894:	00006f66 	.word	0x00006f66
    1898:	63746157 	.word	0x63746157
    189c:	676f6468 	.word	0x676f6468
    18a0:	73657220 	.word	0x73657220
    18a4:	70207465 	.word	0x70207465
    18a8:	6f667265 	.word	0x6f667265
    18ac:	64656d72 	.word	0x64656d72
    18b0:	63757320 	.word	0x63757320
    18b4:	73736563 	.word	0x73736563
    18b8:	6c6c7566 	.word	0x6c6c7566
    18bc:	00000a79 	.word	0x00000a79
    18c0:	20494d4e 	.word	0x20494d4e
    18c4:	646e6148 	.word	0x646e6148
    18c8:	2072656c 	.word	0x2072656c
    18cc:	65746e45 	.word	0x65746e45
    18d0:	21646572 	.word	0x21646572
    18d4:	00000a20 	.word	0x00000a20
    18d8:	4f525245 	.word	0x4f525245
    18dc:	203a2052 	.word	0x203a2052
    18e0:	20494d4e 	.word	0x20494d4e
    18e4:	7563636f 	.word	0x7563636f
    18e8:	64657272 	.word	0x64657272
    18ec:	656e7520 	.word	0x656e7520
    18f0:	63657078 	.word	0x63657078
    18f4:	6c646574 	.word	0x6c646574
    18f8:	00000a79 	.word	0x00000a79
    18fc:	6e552020 	.word	0x6e552020
    1900:	6b636f6c 	.word	0x6b636f6c
    1904:	20676e69 	.word	0x20676e69
    1908:	63746177 	.word	0x63746177
    190c:	676f6468 	.word	0x676f6468
    1910:	002e2e2e 	.word	0x002e2e2e
    1914:	65532020 	.word	0x65532020
    1918:	6f742074 	.word	0x6f742074
    191c:	206f6e20 	.word	0x206f6e20
    1920:	69746361 	.word	0x69746361
    1924:	00006e6f 	.word	0x00006e6f
    1928:	65532020 	.word	0x65532020
    192c:	6f742074 	.word	0x6f742074
    1930:	494d4e20 	.word	0x494d4e20
    1934:	6e656720 	.word	0x6e656720
    1938:	74617265 	.word	0x74617265
    193c:	006e6f69 	.word	0x006e6f69
    1940:	65532020 	.word	0x65532020
    1944:	6f742074 	.word	0x6f742074
    1948:	73657220 	.word	0x73657220
    194c:	67207465 	.word	0x67207465
    1950:	72656e65 	.word	0x72656e65
    1954:	6f697461 	.word	0x6f697461
    1958:	0000006e 	.word	0x0000006e
    195c:	6f4c2020 	.word	0x6f4c2020
    1960:	6e696b63 	.word	0x6e696b63
    1964:	61772067 	.word	0x61772067
    1968:	64686374 	.word	0x64686374
    196c:	2e2e676f 	.word	0x2e2e676f
    1970:	0000002e 	.word	0x0000002e
    1974:	6e69614d 	.word	0x6e69614d
    1978:	6f727020 	.word	0x6f727020
    197c:	6d617267 	.word	0x6d617267
    1980:	72617020 	.word	0x72617020
    1984:	0a312074 	.word	0x0a312074
    1988:	00000000 	.word	0x00000000
    198c:	6544202d 	.word	0x6544202d
    1990:	74636574 	.word	0x74636574
    1994:	20444920 	.word	0x20444920
    1998:	69676572 	.word	0x69676572
    199c:	72657473 	.word	0x72657473
    19a0:	00000a73 	.word	0x00000a73
    19a4:	756c6156 	.word	0x756c6156
    19a8:	255b7365 	.word	0x255b7365
    19ac:	303d5d78 	.word	0x303d5d78
    19b0:	0a782578 	.word	0x0a782578
    19b4:	00000000 	.word	0x00000000
    19b8:	4f525245 	.word	0x4f525245
    19bc:	203a2052 	.word	0x203a2052
    19c0:	756c6156 	.word	0x756c6156
    19c4:	255b7365 	.word	0x255b7365
    19c8:	303d5d78 	.word	0x303d5d78
    19cc:	2c782578 	.word	0x2c782578
    19d0:	70786520 	.word	0x70786520
    19d4:	65746365 	.word	0x65746365
    19d8:	78302064 	.word	0x78302064
    19dc:	000a7825 	.word	0x000a7825
    19e0:	50202d0a 	.word	0x50202d0a
    19e4:	72676f72 	.word	0x72676f72
    19e8:	77206d61 	.word	0x77206d61
    19ec:	68637461 	.word	0x68637461
    19f0:	20676f64 	.word	0x20676f64
    19f4:	20726f66 	.word	0x20726f66
    19f8:	30303031 	.word	0x30303031
    19fc:	79632030 	.word	0x79632030
    1a00:	73656c63 	.word	0x73656c63
    1a04:	00000000 	.word	0x00000000
    1a08:	7552202d 	.word	0x7552202d
    1a0c:	6f6c206e 	.word	0x6f6c206e
    1a10:	7720706f 	.word	0x7720706f
    1a14:	20687469 	.word	0x20687469
    1a18:	63746177 	.word	0x63746177
    1a1c:	676f6468 	.word	0x676f6468
    1a20:	74657320 	.word	0x74657320
    1a24:	67657220 	.word	0x67657220
    1a28:	72616c75 	.word	0x72616c75
    1a2c:	3120796c 	.word	0x3120796c
    1a30:	69742030 	.word	0x69742030
    1a34:	0a73656d 	.word	0x0a73656d
    1a38:	00000000 	.word	0x00000000
    1a3c:	61572020 	.word	0x61572020
    1a40:	64686374 	.word	0x64686374
    1a44:	7620676f 	.word	0x7620676f
    1a48:	65756c61 	.word	0x65756c61
    1a4c:	74657320 	.word	0x74657320
    1a50:	61676120 	.word	0x61676120
    1a54:	00006e69 	.word	0x00006e69
    1a58:	54202d0a 	.word	0x54202d0a
    1a5c:	20747365 	.word	0x20747365
    1a60:	20494d4e 	.word	0x20494d4e
    1a64:	656e6567 	.word	0x656e6567
    1a68:	69746172 	.word	0x69746172
    1a6c:	00006e6f 	.word	0x00006e6f
    1a70:	54202d0a 	.word	0x54202d0a
    1a74:	20747365 	.word	0x20747365
    1a78:	65736572 	.word	0x65736572
    1a7c:	65672074 	.word	0x65672074
    1a80:	6172656e 	.word	0x6172656e
    1a84:	6e6f6974 	.word	0x6e6f6974
    1a88:	00000000 	.word	0x00000000
    1a8c:	726f430a 	.word	0x726f430a
    1a90:	2d786574 	.word	0x2d786574
    1a94:	4420334d 	.word	0x4420334d
    1a98:	67697365 	.word	0x67697365
    1a9c:	6174536e 	.word	0x6174536e
    1aa0:	2d207472 	.word	0x2d207472
    1aa4:	74615720 	.word	0x74615720
    1aa8:	6f646863 	.word	0x6f646863
    1aac:	65442067 	.word	0x65442067
    1ab0:	2d206f6d 	.word	0x2d206f6d
    1ab4:	76657220 	.word	0x76657220
    1ab8:	6f697369 	.word	0x6f697369
    1abc:	5224206e 	.word	0x5224206e
    1ac0:	73697665 	.word	0x73697665
    1ac4:	3a6e6f69 	.word	0x3a6e6f69
    1ac8:	32343220 	.word	0x32343220
    1acc:	20343834 	.word	0x20343834
    1ad0:	00000a24 	.word	0x00000a24
    1ad4:	54202a2a 	.word	0x54202a2a
    1ad8:	20545345 	.word	0x20545345
    1adc:	50494b53 	.word	0x50494b53
    1ae0:	20444550 	.word	0x20444550
    1ae4:	53202a2a 	.word	0x53202a2a
    1ae8:	74437379 	.word	0x74437379
    1aec:	6e206c72 	.word	0x6e206c72
    1af0:	7020746f 	.word	0x7020746f
    1af4:	65736572 	.word	0x65736572
    1af8:	002e746e 	.word	0x002e746e
    1afc:	74736552 	.word	0x74736552
    1b00:	65747261 	.word	0x65747261
    1b04:	79622064 	.word	0x79622064
    1b08:	74615720 	.word	0x74615720
    1b0c:	6f646863 	.word	0x6f646863
    1b10:	65722067 	.word	0x65722067
    1b14:	00746573 	.word	0x00746573
    1b18:	74736552 	.word	0x74736552
    1b1c:	65747261 	.word	0x65747261
    1b20:	79622064 	.word	0x79622064
    1b24:	53595320 	.word	0x53595320
    1b28:	45534552 	.word	0x45534552
    1b2c:	51455254 	.word	0x51455254
    1b30:	73657220 	.word	0x73657220
    1b34:	00007465 	.word	0x00007465
    1b38:	63746157 	.word	0x63746157
    1b3c:	676f6468 	.word	0x676f6468
    1b40:	6d656420 	.word	0x6d656420
    1b44:	6574206f 	.word	0x6574206f
    1b48:	000a7473 	.word	0x000a7473
    1b4c:	54202a2a 	.word	0x54202a2a
    1b50:	20545345 	.word	0x20545345
    1b54:	50494b53 	.word	0x50494b53
    1b58:	20444550 	.word	0x20444550
    1b5c:	57202a2a 	.word	0x57202a2a
    1b60:	68637461 	.word	0x68637461
    1b64:	20676f64 	.word	0x20676f64
    1b68:	20746f6e 	.word	0x20746f6e
    1b6c:	73657270 	.word	0x73657270
    1b70:	2e746e65 	.word	0x2e746e65
    1b74:	00000000 	.word	0x00000000
    1b78:	54202a2a 	.word	0x54202a2a
    1b7c:	20545345 	.word	0x20545345
    1b80:	53534150 	.word	0x53534150
    1b84:	2a204445 	.word	0x2a204445
    1b88:	000a202a 	.word	0x000a202a

00001b8c <_global_impure_ptr>:
    1b8c:	20000008                                ... 

00001b90 <__sf_fake_stderr>:
	...

00001bb0 <__sf_fake_stdin>:
	...

00001bd0 <__sf_fake_stdout>:
	...
    1bf0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    1c00:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    1c10:	31300046 35343332 39383736 64636261     F.0123456789abcd
    1c20:	                                         ef.
