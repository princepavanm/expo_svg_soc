
uart_driver_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000209 	.word	0x00000209
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	00000259 	.word	0x00000259
      f8:	00000299 	.word	0x00000299
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fbc1 	bl	8d0 <main>
    bl    exit
     14e:	f001 f94b 	bl	13e8 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	000028c3 	.word	0x000028c3
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000090 	.word	0x20000090
    ldr     r0,=SystemInit
     168:	000013d9 	.word	0x000013d9

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <Spare11_Handler+0x2>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <TRNG_Handler+0x2>
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <TRNG_Handler+0x4>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     1f0:	6001      	str	r1, [r0, #0]
     1f2:	f3bf 8f4f 	dsb	sy
     1f6:	4770      	bx	lr

000001f8 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     1f8:	b406      	push	{r1, r2}
     1fa:	6801      	ldr	r1, [r0, #0]
     1fc:	f3bf 8f4f 	dsb	sy
     200:	0008      	movs	r0, r1
     202:	bc06      	pop	{r1, r2}
     204:	4770      	bx	lr
     206:	bf00      	nop

00000208 <UARTOVF_Handler>:
  UartEndSimulation();
  return 0;
}

void UARTOVF_Handler(void)                                   /*UART Overrun ISR*/
{
     208:	b508      	push	{r3, lr}
if(CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART2) == 1){
     20a:	4810      	ldr	r0, [pc, #64]	; (24c <UARTOVF_Handler+0x44>)
     20c:	f000 fc6e 	bl	aec <CM3DS_MPS2_uart_GetOverrunStatus>
     210:	2801      	cmp	r0, #1
     212:	d010      	beq.n	236 <UARTOVF_Handler+0x2e>
    uart_txorirq_executed = 1;                                /*set TX Overrun flag*/
    uart_txorirq_counter++;                                   /*increment TX Overrun counter*/
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART2);             /*clear UART2 Overrun IRQ*/
  }
if(CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART3) == 2){
     214:	480e      	ldr	r0, [pc, #56]	; (250 <UARTOVF_Handler+0x48>)
     216:	f000 fc69 	bl	aec <CM3DS_MPS2_uart_GetOverrunStatus>
     21a:	2802      	cmp	r0, #2
     21c:	d000      	beq.n	220 <UARTOVF_Handler+0x18>
    uart_rxorirq_executed = 1;                                /*set RX Overrun flag*/
    uart_rxorirq_counter++;                                   /*increment RX Overrun counter*/
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART3);             /*clear UART3 Overrun IRQ*/
  }
}
     21e:	bd08      	pop	{r3, pc}
    uart_rxorirq_executed = 1;                                /*set RX Overrun flag*/
     220:	2201      	movs	r2, #1
     222:	4b0c      	ldr	r3, [pc, #48]	; (254 <UARTOVF_Handler+0x4c>)
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART3);             /*clear UART3 Overrun IRQ*/
     224:	480a      	ldr	r0, [pc, #40]	; (250 <UARTOVF_Handler+0x48>)
    uart_rxorirq_executed = 1;                                /*set RX Overrun flag*/
     226:	609a      	str	r2, [r3, #8]
    uart_rxorirq_counter++;                                   /*increment RX Overrun counter*/
     228:	68da      	ldr	r2, [r3, #12]
     22a:	3201      	adds	r2, #1
     22c:	60da      	str	r2, [r3, #12]
}
     22e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART3);             /*clear UART3 Overrun IRQ*/
     232:	f000 bc5f 	b.w	af4 <CM3DS_MPS2_uart_ClearOverrunStatus>
     236:	4603      	mov	r3, r0
    uart_txorirq_executed = 1;                                /*set TX Overrun flag*/
     238:	4a06      	ldr	r2, [pc, #24]	; (254 <UARTOVF_Handler+0x4c>)
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART2);             /*clear UART2 Overrun IRQ*/
     23a:	4804      	ldr	r0, [pc, #16]	; (24c <UARTOVF_Handler+0x44>)
    uart_txorirq_executed = 1;                                /*set TX Overrun flag*/
     23c:	6013      	str	r3, [r2, #0]
    uart_txorirq_counter++;                                   /*increment TX Overrun counter*/
     23e:	6853      	ldr	r3, [r2, #4]
     240:	3301      	adds	r3, #1
     242:	6053      	str	r3, [r2, #4]
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART2);             /*clear UART2 Overrun IRQ*/
     244:	f000 fc56 	bl	af4 <CM3DS_MPS2_uart_ClearOverrunStatus>
     248:	e7e4      	b.n	214 <UARTOVF_Handler+0xc>
     24a:	bf00      	nop
     24c:	4002c000 	.word	0x4002c000
     250:	4002d000 	.word	0x4002d000
     254:	20000068 	.word	0x20000068

00000258 <UART2_Handler>:


void UART2_Handler(void)                    /*UART2 TX RX ISR*/
{
     258:	b508      	push	{r3, lr}
  if(CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2) == 1) {
     25a:	480d      	ldr	r0, [pc, #52]	; (290 <UART2_Handler+0x38>)
     25c:	f000 fc52 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     260:	2801      	cmp	r0, #1
     262:	d00d      	beq.n	280 <UART2_Handler+0x28>
    uart_data_sent = 1;                         /*set data sent flag*/
    CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2);       /*clear UART2 TX IRQ*/
  }
  if(CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART2) == 1) {
     264:	480a      	ldr	r0, [pc, #40]	; (290 <UART2_Handler+0x38>)
     266:	f000 fc51 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     26a:	2801      	cmp	r0, #1
     26c:	4603      	mov	r3, r0
     26e:	d000      	beq.n	272 <UART2_Handler+0x1a>
    uart_data_received = 1;                         /*set data received flag*/
    CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART2);       /*clear UART2 RX IRQ*/
  }
}
     270:	bd08      	pop	{r3, pc}
    uart_data_received = 1;                         /*set data received flag*/
     272:	4a08      	ldr	r2, [pc, #32]	; (294 <UART2_Handler+0x3c>)
    CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART2);       /*clear UART2 RX IRQ*/
     274:	4806      	ldr	r0, [pc, #24]	; (290 <UART2_Handler+0x38>)
    uart_data_received = 1;                         /*set data received flag*/
     276:	6153      	str	r3, [r2, #20]
}
     278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART2);       /*clear UART2 RX IRQ*/
     27c:	f000 bc4e 	b.w	b1c <CM3DS_MPS2_uart_ClearRxIRQ>
     280:	4603      	mov	r3, r0
    uart_data_sent = 1;                         /*set data sent flag*/
     282:	4a04      	ldr	r2, [pc, #16]	; (294 <UART2_Handler+0x3c>)
    CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2);       /*clear UART2 TX IRQ*/
     284:	4802      	ldr	r0, [pc, #8]	; (290 <UART2_Handler+0x38>)
    uart_data_sent = 1;                         /*set data sent flag*/
     286:	6113      	str	r3, [r2, #16]
    CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2);       /*clear UART2 TX IRQ*/
     288:	f000 fc44 	bl	b14 <CM3DS_MPS2_uart_ClearTxIRQ>
     28c:	e7ea      	b.n	264 <UART2_Handler+0xc>
     28e:	bf00      	nop
     290:	4002c000 	.word	0x4002c000
     294:	20000068 	.word	0x20000068

00000298 <UART3_Handler>:

void UART3_Handler(void)                    /*UART3 TX RX ISR*/
{
     298:	b508      	push	{r3, lr}
  if(CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART3) == 1) {
     29a:	480d      	ldr	r0, [pc, #52]	; (2d0 <UART3_Handler+0x38>)
     29c:	f000 fc32 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     2a0:	2801      	cmp	r0, #1
     2a2:	d00d      	beq.n	2c0 <UART3_Handler+0x28>
    uart_data_sent = 1;                         /*set data sent flag*/
    CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART3);       /*clear UART3 TX IRQ*/
  }
  if(CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3) == 1) {
     2a4:	480a      	ldr	r0, [pc, #40]	; (2d0 <UART3_Handler+0x38>)
     2a6:	f000 fc31 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     2aa:	2801      	cmp	r0, #1
     2ac:	4603      	mov	r3, r0
     2ae:	d000      	beq.n	2b2 <UART3_Handler+0x1a>
    uart_data_received = 1;                         /*set data received flag*/
    CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3);       /*clear UART3 RX IRQ*/
  }
}
     2b0:	bd08      	pop	{r3, pc}
    uart_data_received = 1;                         /*set data received flag*/
     2b2:	4a08      	ldr	r2, [pc, #32]	; (2d4 <UART3_Handler+0x3c>)
    CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3);       /*clear UART3 RX IRQ*/
     2b4:	4806      	ldr	r0, [pc, #24]	; (2d0 <UART3_Handler+0x38>)
    uart_data_received = 1;                         /*set data received flag*/
     2b6:	6153      	str	r3, [r2, #20]
}
     2b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3);       /*clear UART3 RX IRQ*/
     2bc:	f000 bc2e 	b.w	b1c <CM3DS_MPS2_uart_ClearRxIRQ>
     2c0:	4603      	mov	r3, r0
    uart_data_sent = 1;                         /*set data sent flag*/
     2c2:	4a04      	ldr	r2, [pc, #16]	; (2d4 <UART3_Handler+0x3c>)
    CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART3);       /*clear UART3 TX IRQ*/
     2c4:	4802      	ldr	r0, [pc, #8]	; (2d0 <UART3_Handler+0x38>)
    uart_data_sent = 1;                         /*set data sent flag*/
     2c6:	6113      	str	r3, [r2, #16]
    CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART3);       /*clear UART3 TX IRQ*/
     2c8:	f000 fc24 	bl	b14 <CM3DS_MPS2_uart_ClearTxIRQ>
     2cc:	e7ea      	b.n	2a4 <UART3_Handler+0xc>
     2ce:	bf00      	nop
     2d0:	4002d000 	.word	0x4002d000
     2d4:	20000068 	.word	0x20000068

000002d8 <Uart_Init>:

/* Initialize UART and check return status */
int Uart_Init(void)
{
     2d8:	b530      	push	{r4, r5, lr}

  puts("\nStage 1 UART Initialization\n");        //initialise UART2 and UART3 with Baud divider of 32
                                                  //and all interrupts enabled and also tx and rx enabled
  CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO0, 0x0011);
  CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO1, 0x4400);
  if(CM3DS_MPS2_uart_init(CM3DS_MPS2_UART2, 0x20, 1, 1, 1, 1, 1, 1) == 0)
     2da:	2401      	movs	r4, #1
{
     2dc:	b085      	sub	sp, #20
  puts("\nStage 1 UART Initialization\n");        //initialise UART2 and UART3 with Baud divider of 32
     2de:	4820      	ldr	r0, [pc, #128]	; (360 <Uart_Init+0x88>)
     2e0:	f001 f912 	bl	1508 <puts>
  CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO0, 0x0011);
     2e4:	2111      	movs	r1, #17
     2e6:	481f      	ldr	r0, [pc, #124]	; (364 <Uart_Init+0x8c>)
     2e8:	f000 fc22 	bl	b30 <CM3DS_MPS2_gpio_SetAltFunc>
  CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO1, 0x4400);
     2ec:	f44f 4188 	mov.w	r1, #17408	; 0x4400
     2f0:	481d      	ldr	r0, [pc, #116]	; (368 <Uart_Init+0x90>)
     2f2:	f000 fc1d 	bl	b30 <CM3DS_MPS2_gpio_SetAltFunc>
  if(CM3DS_MPS2_uart_init(CM3DS_MPS2_UART2, 0x20, 1, 1, 1, 1, 1, 1) == 0)
     2f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
     2fa:	e9cd 4400 	strd	r4, r4, [sp]
     2fe:	4623      	mov	r3, r4
     300:	4622      	mov	r2, r4
     302:	2120      	movs	r1, #32
     304:	4819      	ldr	r0, [pc, #100]	; (36c <Uart_Init+0x94>)
     306:	f000 fbb9 	bl	a7c <CM3DS_MPS2_uart_init>
     30a:	b9f0      	cbnz	r0, 34a <Uart_Init+0x72>
     30c:	4605      	mov	r5, r0
    printf("UART2 Initialised Successfully (Baud Divider of: %d)\n", CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART2));
     30e:	4817      	ldr	r0, [pc, #92]	; (36c <Uart_Init+0x94>)
     310:	f000 fbf6 	bl	b00 <CM3DS_MPS2_uart_GetBaudDivider>
     314:	4601      	mov	r1, r0
     316:	4816      	ldr	r0, [pc, #88]	; (370 <Uart_Init+0x98>)
     318:	462c      	mov	r4, r5
     31a:	f001 f881 	bl	1420 <iprintf>
  else
  {
    puts("UART2 Initialization Failed\n");
    err_code = 1;
  }
  if(CM3DS_MPS2_uart_init(CM3DS_MPS2_UART3, 0x20, 1, 1, 1, 1, 1, 1) == 0)
     31e:	2501      	movs	r5, #1
     320:	2120      	movs	r1, #32
     322:	e9cd 5502 	strd	r5, r5, [sp, #8]
     326:	e9cd 5500 	strd	r5, r5, [sp]
     32a:	462b      	mov	r3, r5
     32c:	462a      	mov	r2, r5
     32e:	4811      	ldr	r0, [pc, #68]	; (374 <Uart_Init+0x9c>)
     330:	f000 fba4 	bl	a7c <CM3DS_MPS2_uart_init>
     334:	b968      	cbnz	r0, 352 <Uart_Init+0x7a>
    printf("UART3 Initialised Successfully (Baud Divider of: %d)\n", CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART3));
     336:	480f      	ldr	r0, [pc, #60]	; (374 <Uart_Init+0x9c>)
     338:	f000 fbe2 	bl	b00 <CM3DS_MPS2_uart_GetBaudDivider>
     33c:	4601      	mov	r1, r0
     33e:	480e      	ldr	r0, [pc, #56]	; (378 <Uart_Init+0xa0>)
     340:	f001 f86e 	bl	1420 <iprintf>
    err_code |= 2;
  }

  if(!err_code) return 0;
  else return 1;
  }
     344:	4620      	mov	r0, r4
     346:	b005      	add	sp, #20
     348:	bd30      	pop	{r4, r5, pc}
    puts("UART2 Initialization Failed\n");
     34a:	480c      	ldr	r0, [pc, #48]	; (37c <Uart_Init+0xa4>)
     34c:	f001 f8dc 	bl	1508 <puts>
     350:	e7e5      	b.n	31e <Uart_Init+0x46>
  else return 1;
     352:	462c      	mov	r4, r5
    puts("UART3 Initialization Failed\n");
     354:	480a      	ldr	r0, [pc, #40]	; (380 <Uart_Init+0xa8>)
     356:	f001 f8d7 	bl	1508 <puts>
  }
     35a:	4620      	mov	r0, r4
     35c:	b005      	add	sp, #20
     35e:	bd30      	pop	{r4, r5, pc}
     360:	0000234c 	.word	0x0000234c
     364:	40010000 	.word	0x40010000
     368:	40011000 	.word	0x40011000
     36c:	4002c000 	.word	0x4002c000
     370:	0000236c 	.word	0x0000236c
     374:	4002d000 	.word	0x4002d000
     378:	000023c4 	.word	0x000023c4
     37c:	000023a4 	.word	0x000023a4
     380:	000023fc 	.word	0x000023fc

00000384 <Uart_Buffull>:

int Uart_Buffull(void)             //function for testing the Buffer full functions and simple transmission
{
  int err_code = 0;
  int i, k;
  char received[12] = {0,0,0,0, 0,0,0,0, 0,0,0,0};
     384:	2300      	movs	r3, #0
{
     386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  char transmit[12] = "hello world";
     38a:	4a42      	ldr	r2, [pc, #264]	; (494 <Uart_Buffull+0x110>)
{
     38c:	b086      	sub	sp, #24
  char transmit[12] = "hello world";
     38e:	ae03      	add	r6, sp, #12
     390:	ca07      	ldmia	r2, {r0, r1, r2}
     392:	e886 0007 	stmia.w	r6, {r0, r1, r2}

  puts("\nStage 2 Simple Transmission - TX and RX Test\n");
     396:	4840      	ldr	r0, [pc, #256]	; (498 <Uart_Buffull+0x114>)
  char received[12] = {0,0,0,0, 0,0,0,0, 0,0,0,0};
     398:	e9cd 3300 	strd	r3, r3, [sp]
     39c:	9302      	str	r3, [sp, #8]
     39e:	4634      	mov	r4, r6
  puts("\nStage 2 Simple Transmission - TX and RX Test\n");
     3a0:	f001 f8b2 	bl	1508 <puts>

  i = 0; /* transmit character counter */
  k = 0; /* receive character counter */

  while((CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2) == 0)){    //while the TX buffer is not full send it data to transmit
     3a4:	4d3d      	ldr	r5, [pc, #244]	; (49c <Uart_Buffull+0x118>)
     3a6:	e002      	b.n	3ae <Uart_Buffull+0x2a>
    CM3DS_MPS2_UART2->DATA = (uint32_t)transmit[i];
     3a8:	f814 3b01 	ldrb.w	r3, [r4], #1
     3ac:	602b      	str	r3, [r5, #0]
  while((CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2) == 0)){    //while the TX buffer is not full send it data to transmit
     3ae:	483b      	ldr	r0, [pc, #236]	; (49c <Uart_Buffull+0x118>)
     3b0:	f000 fb8c 	bl	acc <CM3DS_MPS2_uart_GetTxBufferFull>
     3b4:	2800      	cmp	r0, #0
     3b6:	d0f7      	beq.n	3a8 <Uart_Buffull+0x24>
    i++;
  }

  if(CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2)) puts("TX Buffer Full ...restarting transmission");
     3b8:	4838      	ldr	r0, [pc, #224]	; (49c <Uart_Buffull+0x118>)
     3ba:	f000 fb87 	bl	acc <CM3DS_MPS2_uart_GetTxBufferFull>
     3be:	2800      	cmp	r0, #0
     3c0:	d051      	beq.n	466 <Uart_Buffull+0xe2>
     3c2:	4837      	ldr	r0, [pc, #220]	; (4a0 <Uart_Buffull+0x11c>)
     3c4:	f001 f8a0 	bl	1508 <puts>
    printf("** TEST FAILED **, Error Code: (0x%x)", err_code);
  }

  /*receive data from transmission and dispose of it*/

  if(CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) == 1) CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
     3c8:	4836      	ldr	r0, [pc, #216]	; (4a4 <Uart_Buffull+0x120>)
     3ca:	f000 fb7b 	bl	ac4 <CM3DS_MPS2_uart_GetRxBufferFull>
     3ce:	2801      	cmp	r0, #1
  int err_code = 0;
     3d0:	f04f 0700 	mov.w	r7, #0
  if(CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) == 1) CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
     3d4:	d052      	beq.n	47c <Uart_Buffull+0xf8>
  else{
    err_code = (1 << 1);
    printf("** TEST FAILED **, Error Code: (0x%x)", err_code);
     3d6:	2102      	movs	r1, #2
     3d8:	4833      	ldr	r0, [pc, #204]	; (4a8 <Uart_Buffull+0x124>)
     3da:	f001 f821 	bl	1420 <iprintf>
    err_code = (1 << 1);
     3de:	2702      	movs	r7, #2
  k = 0; /* receive character counter */
     3e0:	2400      	movs	r4, #0

  i = 0;

  while(k < 12){   //while received string is not the length of the original string

    if(CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) == 1){   //receive data from RX buffer when full
     3e2:	4d30      	ldr	r5, [pc, #192]	; (4a4 <Uart_Buffull+0x120>)
  i = 0;
     3e4:	46a0      	mov	r8, r4
      received[k] = CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
      printf("RX Buffer Full ...receiving data... %c\n", received[k]);
     3e6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4b4 <Uart_Buffull+0x130>
    The receive buffer status is checked because the
    printf statement in the receive polling takes
    long time so this code cannot handle maximum
    throughput */

    if((CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2) == 0) && (CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) != 1)){
     3ea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 49c <Uart_Buffull+0x118>
     3ee:	e001      	b.n	3f4 <Uart_Buffull+0x70>
  while(k < 12){   //while received string is not the length of the original string
     3f0:	2c0c      	cmp	r4, #12
     3f2:	d01b      	beq.n	42c <Uart_Buffull+0xa8>
    if(CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) == 1){   //receive data from RX buffer when full
     3f4:	4628      	mov	r0, r5
     3f6:	f000 fb65 	bl	ac4 <CM3DS_MPS2_uart_GetRxBufferFull>
     3fa:	2801      	cmp	r0, #1
     3fc:	d026      	beq.n	44c <Uart_Buffull+0xc8>
    if((CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2) == 0) && (CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) != 1)){
     3fe:	4827      	ldr	r0, [pc, #156]	; (49c <Uart_Buffull+0x118>)
     400:	f000 fb64 	bl	acc <CM3DS_MPS2_uart_GetTxBufferFull>
     404:	2800      	cmp	r0, #0
     406:	d1f3      	bne.n	3f0 <Uart_Buffull+0x6c>
     408:	4628      	mov	r0, r5
     40a:	f000 fb5b 	bl	ac4 <CM3DS_MPS2_uart_GetRxBufferFull>
     40e:	2801      	cmp	r0, #1
     410:	d0ee      	beq.n	3f0 <Uart_Buffull+0x6c>
      if(i < 12){
     412:	f1b8 0f0b 	cmp.w	r8, #11
     416:	dceb      	bgt.n	3f0 <Uart_Buffull+0x6c>
        CM3DS_MPS2_UART2->DATA = (uint32_t)transmit[i];
     418:	ab06      	add	r3, sp, #24
     41a:	4443      	add	r3, r8
     41c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  while(k < 12){   //while received string is not the length of the original string
     420:	2c0c      	cmp	r4, #12
        i++;
     422:	f108 0801 	add.w	r8, r8, #1
        CM3DS_MPS2_UART2->DATA = (uint32_t)transmit[i];
     426:	f8ca 3000 	str.w	r3, [sl]
  while(k < 12){   //while received string is not the length of the original string
     42a:	d1e3      	bne.n	3f4 <Uart_Buffull+0x70>
      }
    }
  }
  printf("\nCharacters received: %s\n", received);    //when all characters received print the received string
     42c:	4669      	mov	r1, sp
     42e:	481f      	ldr	r0, [pc, #124]	; (4ac <Uart_Buffull+0x128>)
     430:	f000 fff6 	bl	1420 <iprintf>

  if(strcmp(received, transmit)){
     434:	4631      	mov	r1, r6
     436:	4668      	mov	r0, sp
     438:	f001 f86e 	bl	1518 <strcmp>
     43c:	bb10      	cbnz	r0, 484 <Uart_Buffull+0x100>
    err_code = 4;
    puts("** TEST FAILED **, Error : Strings DO Not Match!");
  }

  if(!err_code) return 0;
  else return 2;
     43e:	2f00      	cmp	r7, #0
     440:	bf18      	it	ne
     442:	2702      	movne	r7, #2
}
     444:	4638      	mov	r0, r7
     446:	b006      	add	sp, #24
     448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      received[k] = CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
     44c:	4628      	mov	r0, r5
     44e:	f000 fb47 	bl	ae0 <CM3DS_MPS2_uart_ReceiveChar>
     452:	ab06      	add	r3, sp, #24
     454:	4423      	add	r3, r4
      printf("RX Buffer Full ...receiving data... %c\n", received[k]);
     456:	4601      	mov	r1, r0
      received[k] = CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
     458:	f803 0c18 	strb.w	r0, [r3, #-24]
      printf("RX Buffer Full ...receiving data... %c\n", received[k]);
     45c:	4648      	mov	r0, r9
     45e:	f000 ffdf 	bl	1420 <iprintf>
      k++;
     462:	3401      	adds	r4, #1
     464:	e7cb      	b.n	3fe <Uart_Buffull+0x7a>
    printf("** TEST FAILED **, Error Code: (0x%x)", err_code);
     466:	2101      	movs	r1, #1
     468:	480f      	ldr	r0, [pc, #60]	; (4a8 <Uart_Buffull+0x124>)
     46a:	f000 ffd9 	bl	1420 <iprintf>
  if(CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) == 1) CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
     46e:	480d      	ldr	r0, [pc, #52]	; (4a4 <Uart_Buffull+0x120>)
     470:	f000 fb28 	bl	ac4 <CM3DS_MPS2_uart_GetRxBufferFull>
     474:	2801      	cmp	r0, #1
    err_code = (1 << 0);
     476:	f04f 0701 	mov.w	r7, #1
  if(CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART3) == 1) CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);
     47a:	d1ac      	bne.n	3d6 <Uart_Buffull+0x52>
     47c:	4809      	ldr	r0, [pc, #36]	; (4a4 <Uart_Buffull+0x120>)
     47e:	f000 fb2f 	bl	ae0 <CM3DS_MPS2_uart_ReceiveChar>
     482:	e7ad      	b.n	3e0 <Uart_Buffull+0x5c>
  else return 2;
     484:	2702      	movs	r7, #2
    puts("** TEST FAILED **, Error : Strings DO Not Match!");
     486:	480a      	ldr	r0, [pc, #40]	; (4b0 <Uart_Buffull+0x12c>)
     488:	f001 f83e 	bl	1508 <puts>
}
     48c:	4638      	mov	r0, r7
     48e:	b006      	add	sp, #24
     490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     494:	00002518 	.word	0x00002518
     498:	0000241c 	.word	0x0000241c
     49c:	4002c000 	.word	0x4002c000
     4a0:	0000244c 	.word	0x0000244c
     4a4:	4002d000 	.word	0x4002d000
     4a8:	00002478 	.word	0x00002478
     4ac:	000024c8 	.word	0x000024c8
     4b0:	000024e4 	.word	0x000024e4
     4b4:	000024a0 	.word	0x000024a0

000004b8 <Uart_OR>:

int Uart_OR(void)              /*function to test driver Overrun functions*/
{
     4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i = 0, TX = 0, RX = 0, err_code = 0;
     4bc:	f04f 0800 	mov.w	r8, #0
  while(1)
  {
    if(i < 4) CM3DS_MPS2_UART2->DATA = (uint32_t)'a';                     //if the loop iteration, the value of i, is less
                                                                      //that 4 then send the TX buffer data to cause a
    while(i > 10){                                                    //TX overrun if the loop iteration, i, is greater
      CM3DS_MPS2_UART2->DATA = (uint32_t)'a';                             //than 10 then send the TX buffer to cause another
     4c0:	f04f 0a61 	mov.w	sl, #97	; 0x61
  puts("\nStage 3 Polling");
     4c4:	4854      	ldr	r0, [pc, #336]	; (618 <Uart_OR+0x160>)
     4c6:	f001 f81f 	bl	1508 <puts>
  puts("\n- Stage 3a Overrun Polling\n");
     4ca:	4854      	ldr	r0, [pc, #336]	; (61c <Uart_OR+0x164>)
  int i = 0, TX = 0, RX = 0, err_code = 0;
     4cc:	46c1      	mov	r9, r8
     4ce:	4646      	mov	r6, r8
      CM3DS_MPS2_UART2->DATA = (uint32_t)'a';                             //than 10 then send the TX buffer to cause another
     4d0:	4655      	mov	r5, sl
  puts("\n- Stage 3a Overrun Polling\n");
     4d2:	f001 f819 	bl	1508 <puts>
      CM3DS_MPS2_UART2->DATA = (uint32_t)'a';                             //than 10 then send the TX buffer to cause another
     4d6:	4c52      	ldr	r4, [pc, #328]	; (620 <Uart_OR+0x168>)
     4d8:	e009      	b.n	4ee <Uart_OR+0x36>

  if(CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART2) == 1){
    puts("TX Buffer Overrun Occurred");
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART2);
    TX = 1;
  }else if(CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART3) == 2){
     4da:	4852      	ldr	r0, [pc, #328]	; (624 <Uart_OR+0x16c>)
     4dc:	f000 fb06 	bl	aec <CM3DS_MPS2_uart_GetOverrunStatus>
     4e0:	2802      	cmp	r0, #2
     4e2:	d06d      	beq.n	5c0 <Uart_OR+0x108>
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART3);                   //is never read from the RX buffer
    RX = 1;
  }

  i++;
  if(RX & TX) break;
     4e4:	ea19 0f08 	tst.w	r9, r8
  i++;
     4e8:	f106 0601 	add.w	r6, r6, #1
  if(RX & TX) break;
     4ec:	d116      	bne.n	51c <Uart_OR+0x64>
    if(i < 4) CM3DS_MPS2_UART2->DATA = (uint32_t)'a';                     //if the loop iteration, the value of i, is less
     4ee:	2e03      	cmp	r6, #3
     4f0:	f300 8087 	bgt.w	602 <Uart_OR+0x14a>
     4f4:	f8c4 a000 	str.w	sl, [r4]
  if(CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART2) == 1){
     4f8:	4620      	mov	r0, r4
     4fa:	f000 faf7 	bl	aec <CM3DS_MPS2_uart_GetOverrunStatus>
     4fe:	2801      	cmp	r0, #1
     500:	4607      	mov	r7, r0
     502:	d1ea      	bne.n	4da <Uart_OR+0x22>
    TX = 1;
     504:	46b9      	mov	r9, r7
    puts("TX Buffer Overrun Occurred");
     506:	4848      	ldr	r0, [pc, #288]	; (628 <Uart_OR+0x170>)
     508:	f000 fffe 	bl	1508 <puts>
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART2);
     50c:	4620      	mov	r0, r4
     50e:	f000 faf1 	bl	af4 <CM3DS_MPS2_uart_ClearOverrunStatus>
  if(RX & TX) break;
     512:	ea19 0f08 	tst.w	r9, r8
  i++;
     516:	f106 0601 	add.w	r6, r6, #1
  if(RX & TX) break;
     51a:	d0e8      	beq.n	4ee <Uart_OR+0x36>
 }

  puts("\n- Stage 3b TX & RX IRQ Polling\n");
     51c:	4843      	ldr	r0, [pc, #268]	; (62c <Uart_OR+0x174>)
     51e:	f000 fff3 	bl	1508 <puts>

  //clear the TX IRQ status and then print the new status
  CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2);
     522:	483f      	ldr	r0, [pc, #252]	; (620 <Uart_OR+0x168>)
     524:	f000 faf6 	bl	b14 <CM3DS_MPS2_uart_ClearTxIRQ>
  printf("TX IRQ Status: %d\n", CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2));
     528:	483d      	ldr	r0, [pc, #244]	; (620 <Uart_OR+0x168>)
     52a:	f000 faeb 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     52e:	4601      	mov	r1, r0
     530:	483f      	ldr	r0, [pc, #252]	; (630 <Uart_OR+0x178>)
     532:	f000 ff75 	bl	1420 <iprintf>

  if(CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2)) err_code = (1 << 0);
     536:	483a      	ldr	r0, [pc, #232]	; (620 <Uart_OR+0x168>)
     538:	f000 fae4 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     53c:	4605      	mov	r5, r0

  //clear the RX IRQ status and then print the new status
  CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3);
     53e:	4839      	ldr	r0, [pc, #228]	; (624 <Uart_OR+0x16c>)
     540:	f000 faec 	bl	b1c <CM3DS_MPS2_uart_ClearRxIRQ>
  printf("RX IRQ Status: %d\n", CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3));
     544:	4837      	ldr	r0, [pc, #220]	; (624 <Uart_OR+0x16c>)
     546:	f000 fae1 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     54a:	4601      	mov	r1, r0
     54c:	4839      	ldr	r0, [pc, #228]	; (634 <Uart_OR+0x17c>)
     54e:	f000 ff67 	bl	1420 <iprintf>

  if(CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3)) err_code = (1 << 1);
     552:	4834      	ldr	r0, [pc, #208]	; (624 <Uart_OR+0x16c>)
     554:	f000 fada 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     558:	2800      	cmp	r0, #0
     55a:	d13a      	bne.n	5d2 <Uart_OR+0x11a>
  if(CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2)) err_code = (1 << 0);
     55c:	3500      	adds	r5, #0
     55e:	bf18      	it	ne
     560:	2501      	movne	r5, #1

  CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2, transmit[1]);
     562:	2165      	movs	r1, #101	; 0x65
     564:	482e      	ldr	r0, [pc, #184]	; (620 <Uart_OR+0x168>)
     566:	f000 fab5 	bl	ad4 <CM3DS_MPS2_uart_SendChar>

  while(!CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2));
     56a:	4c2d      	ldr	r4, [pc, #180]	; (620 <Uart_OR+0x168>)
     56c:	4620      	mov	r0, r4
     56e:	f000 fac9 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     572:	2800      	cmp	r0, #0
     574:	d0fa      	beq.n	56c <Uart_OR+0xb4>
  printf("TX IRQ Status: %d\n", CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2));     //send data and wait until the TX IRQ status
     576:	482a      	ldr	r0, [pc, #168]	; (620 <Uart_OR+0x168>)
     578:	f000 fac4 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     57c:	4601      	mov	r1, r0
     57e:	482c      	ldr	r0, [pc, #176]	; (630 <Uart_OR+0x178>)
     580:	f000 ff4e 	bl	1420 <iprintf>
  if(!CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART2)) err_code = (1 << 2);           //is set and then print the new status
     584:	4826      	ldr	r0, [pc, #152]	; (620 <Uart_OR+0x168>)
     586:	f000 fabd 	bl	b04 <CM3DS_MPS2_uart_GetTxIRQStatus>
     58a:	bb80      	cbnz	r0, 5ee <Uart_OR+0x136>
     58c:	2504      	movs	r5, #4
  else CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2);


  while(!CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3));
     58e:	4c25      	ldr	r4, [pc, #148]	; (624 <Uart_OR+0x16c>)
     590:	4620      	mov	r0, r4
     592:	f000 fabb 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     596:	2800      	cmp	r0, #0
     598:	d0fa      	beq.n	590 <Uart_OR+0xd8>
  printf("RX IRQ Status: %d\n", CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3));     //send data and wait until the RX IRQ status
     59a:	4822      	ldr	r0, [pc, #136]	; (624 <Uart_OR+0x16c>)
     59c:	f000 fab6 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     5a0:	4601      	mov	r1, r0
     5a2:	4824      	ldr	r0, [pc, #144]	; (634 <Uart_OR+0x17c>)
     5a4:	f000 ff3c 	bl	1420 <iprintf>
  if(!CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3)) err_code = (1 << 3);           //is set and then print the new status
     5a8:	481e      	ldr	r0, [pc, #120]	; (624 <Uart_OR+0x16c>)
     5aa:	f000 faaf 	bl	b0c <CM3DS_MPS2_uart_GetRxIRQStatus>
     5ae:	b990      	cbnz	r0, 5d6 <Uart_OR+0x11e>
    printf("** TEST FAILED **, Polling Test Error Code: (0x%x)", err_code);
  }
  else puts("Polling Test Passed");

  if(!err_code) return 0;
  else return 4;
     5b0:	2504      	movs	r5, #4
    printf("** TEST FAILED **, Polling Test Error Code: (0x%x)", err_code);
     5b2:	2108      	movs	r1, #8
     5b4:	4820      	ldr	r0, [pc, #128]	; (638 <Uart_OR+0x180>)
     5b6:	f000 ff33 	bl	1420 <iprintf>
}
     5ba:	4628      	mov	r0, r5
     5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    puts("RX Buffer Overrun Occurred");                             //RX buffer overrun will occur as the data
     5c0:	481e      	ldr	r0, [pc, #120]	; (63c <Uart_OR+0x184>)
     5c2:	f000 ffa1 	bl	1508 <puts>
    CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART3);                   //is never read from the RX buffer
     5c6:	4817      	ldr	r0, [pc, #92]	; (624 <Uart_OR+0x16c>)
     5c8:	f000 fa94 	bl	af4 <CM3DS_MPS2_uart_ClearOverrunStatus>
    RX = 1;
     5cc:	f04f 0801 	mov.w	r8, #1
     5d0:	e788      	b.n	4e4 <Uart_OR+0x2c>
  if(CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART3)) err_code = (1 << 1);
     5d2:	2502      	movs	r5, #2
     5d4:	e7c5      	b.n	562 <Uart_OR+0xaa>
  else CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3);
     5d6:	4813      	ldr	r0, [pc, #76]	; (624 <Uart_OR+0x16c>)
     5d8:	f000 faa0 	bl	b1c <CM3DS_MPS2_uart_ClearRxIRQ>
  if(err_code){
     5dc:	b15d      	cbz	r5, 5f6 <Uart_OR+0x13e>
    printf("** TEST FAILED **, Polling Test Error Code: (0x%x)", err_code);
     5de:	4629      	mov	r1, r5
  else return 4;
     5e0:	2504      	movs	r5, #4
    printf("** TEST FAILED **, Polling Test Error Code: (0x%x)", err_code);
     5e2:	4815      	ldr	r0, [pc, #84]	; (638 <Uart_OR+0x180>)
     5e4:	f000 ff1c 	bl	1420 <iprintf>
}
     5e8:	4628      	mov	r0, r5
     5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2);
     5ee:	480c      	ldr	r0, [pc, #48]	; (620 <Uart_OR+0x168>)
     5f0:	f000 fa90 	bl	b14 <CM3DS_MPS2_uart_ClearTxIRQ>
     5f4:	e7cb      	b.n	58e <Uart_OR+0xd6>
  else puts("Polling Test Passed");
     5f6:	4812      	ldr	r0, [pc, #72]	; (640 <Uart_OR+0x188>)
     5f8:	f000 ff86 	bl	1508 <puts>
}
     5fc:	4628      	mov	r0, r5
     5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while(i > 10){                                                    //TX overrun if the loop iteration, i, is greater
     602:	2e0a      	cmp	r6, #10
     604:	f77f af78 	ble.w	4f8 <Uart_OR+0x40>
      CM3DS_MPS2_UART2->DATA = (uint32_t)'a';                             //than 10 then send the TX buffer to cause another
     608:	6025      	str	r5, [r4, #0]
      if(CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART2) == 1) break;      //TX buffer overrun
     60a:	4805      	ldr	r0, [pc, #20]	; (620 <Uart_OR+0x168>)
     60c:	f000 fa6e 	bl	aec <CM3DS_MPS2_uart_GetOverrunStatus>
     610:	2801      	cmp	r0, #1
     612:	d1f9      	bne.n	608 <Uart_OR+0x150>
     614:	e770      	b.n	4f8 <Uart_OR+0x40>
     616:	bf00      	nop
     618:	00002524 	.word	0x00002524
     61c:	00002538 	.word	0x00002538
     620:	4002c000 	.word	0x4002c000
     624:	4002d000 	.word	0x4002d000
     628:	00002558 	.word	0x00002558
     62c:	00002590 	.word	0x00002590
     630:	000025b4 	.word	0x000025b4
     634:	000025c8 	.word	0x000025c8
     638:	000025dc 	.word	0x000025dc
     63c:	00002574 	.word	0x00002574
     640:	00002610 	.word	0x00002610

00000644 <Uart_IRQ>:

int Uart_IRQ(void){
     644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/*function to test the TX & RX overrun IRQ functions and the TX and RX IRQ driver
  functions using a simple interrupt orientated send and receive*/

  int i = 0, j = 0; /* i=transmit character counter, j = receive character counter */
  int err_code = 0;
  char received[12] = {0,0,0,0, 0,0,0,0, 0,0,0,0};
     648:	2500      	movs	r5, #0
  char transmit[12] = "hello world";

  puts("\nStage 4 IRQ\n");
  puts("- Stage 4a Overrun IRQ\n");

  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART2, 0x20, 1, 1, 0, 1, 1, 1); //disable UART2 TX
     64a:	2401      	movs	r4, #1
int Uart_IRQ(void){
     64c:	b08b      	sub	sp, #44	; 0x2c
  char transmit[12] = "hello world";
     64e:	4b6f      	ldr	r3, [pc, #444]	; (80c <Uart_IRQ+0x1c8>)
     650:	af07      	add	r7, sp, #28
     652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     656:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  puts("\nStage 4 IRQ\n");
     65a:	486d      	ldr	r0, [pc, #436]	; (810 <Uart_IRQ+0x1cc>)
  char received[12] = {0,0,0,0, 0,0,0,0, 0,0,0,0};
     65c:	e9cd 5504 	strd	r5, r5, [sp, #16]
     660:	9506      	str	r5, [sp, #24]
  puts("\nStage 4 IRQ\n");
     662:	f000 ff51 	bl	1508 <puts>
  puts("- Stage 4a Overrun IRQ\n");
     666:	486b      	ldr	r0, [pc, #428]	; (814 <Uart_IRQ+0x1d0>)
     668:	f000 ff4e 	bl	1508 <puts>
  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART2, 0x20, 1, 1, 0, 1, 1, 1); //disable UART2 TX
     66c:	4623      	mov	r3, r4
     66e:	4622      	mov	r2, r4
     670:	e9cd 4402 	strd	r4, r4, [sp, #8]
     674:	9401      	str	r4, [sp, #4]
     676:	2120      	movs	r1, #32
     678:	9500      	str	r5, [sp, #0]
     67a:	4867      	ldr	r0, [pc, #412]	; (818 <Uart_IRQ+0x1d4>)
     67c:	f000 f9fe 	bl	a7c <CM3DS_MPS2_uart_init>
  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART3, 0x20, 1, 1, 1, 0, 1, 1); //disable UART3 RX
     680:	4623      	mov	r3, r4
     682:	4622      	mov	r2, r4
     684:	e9cd 4402 	strd	r4, r4, [sp, #8]
     688:	e9cd 4500 	strd	r4, r5, [sp]
     68c:	2120      	movs	r1, #32
     68e:	4863      	ldr	r0, [pc, #396]	; (81c <Uart_IRQ+0x1d8>)
     690:	f000 f9f4 	bl	a7c <CM3DS_MPS2_uart_init>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     698:	4b61      	ldr	r3, [pc, #388]	; (820 <Uart_IRQ+0x1dc>)
     69a:	4c62      	ldr	r4, [pc, #392]	; (824 <Uart_IRQ+0x1e0>)
  {
    if(uart_txorirq_executed){
      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
      uart_txorirq_executed = 0;         //uart_txorirq_executed, and this statement will be printed
    }
    CM3DS_MPS2_UART2->DATA = (uint32_t)'a';  //always send data to the TX buffer to cause TX OR and do not
     69c:	4e5e      	ldr	r6, [pc, #376]	; (818 <Uart_IRQ+0x1d4>)
      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
     69e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 844 <Uart_IRQ+0x200>
     6a2:	601a      	str	r2, [r3, #0]
    CM3DS_MPS2_UART2->DATA = (uint32_t)'a';  //always send data to the TX buffer to cause TX OR and do not
     6a4:	2561      	movs	r5, #97	; 0x61
  while(uart_txorirq_counter <= 3)       //repeat until 3 TX OR IRQs have occurred
     6a6:	6863      	ldr	r3, [r4, #4]
     6a8:	2b03      	cmp	r3, #3
     6aa:	dc17      	bgt.n	6dc <Uart_IRQ+0x98>
    if(uart_txorirq_executed){
     6ac:	6823      	ldr	r3, [r4, #0]
     6ae:	b94b      	cbnz	r3, 6c4 <Uart_IRQ+0x80>
    CM3DS_MPS2_UART2->DATA = (uint32_t)'a';  //always send data to the TX buffer to cause TX OR and do not
     6b0:	6035      	str	r5, [r6, #0]
    if(uart_rxorirq_executed){           //receive data to cause RX OR
     6b2:	68a3      	ldr	r3, [r4, #8]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d0f6      	beq.n	6a6 <Uart_IRQ+0x62>
      puts("UART RX Overrun IRQ");
     6b8:	485b      	ldr	r0, [pc, #364]	; (828 <Uart_IRQ+0x1e4>)
     6ba:	f000 ff25 	bl	1508 <puts>
      uart_rxorirq_executed = 0;
     6be:	2300      	movs	r3, #0
     6c0:	60a3      	str	r3, [r4, #8]
     6c2:	e7ef      	b.n	6a4 <Uart_IRQ+0x60>
      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
     6c4:	4640      	mov	r0, r8
     6c6:	f000 ff1f 	bl	1508 <puts>
      uart_txorirq_executed = 0;         //uart_txorirq_executed, and this statement will be printed
     6ca:	2300      	movs	r3, #0
     6cc:	6023      	str	r3, [r4, #0]
    CM3DS_MPS2_UART2->DATA = (uint32_t)'a';  //always send data to the TX buffer to cause TX OR and do not
     6ce:	6035      	str	r5, [r6, #0]
    if(uart_rxorirq_executed){           //receive data to cause RX OR
     6d0:	68a3      	ldr	r3, [r4, #8]
     6d2:	2b00      	cmp	r3, #0
     6d4:	d1f0      	bne.n	6b8 <Uart_IRQ+0x74>
  while(uart_txorirq_counter <= 3)       //repeat until 3 TX OR IRQs have occurred
     6d6:	6863      	ldr	r3, [r4, #4]
     6d8:	2b03      	cmp	r3, #3
     6da:	dde7      	ble.n	6ac <Uart_IRQ+0x68>
    }
  }

  if(uart_rxorirq_counter < 3){
     6dc:	68e3      	ldr	r3, [r4, #12]
     6de:	2b02      	cmp	r3, #2
     6e0:	dc78      	bgt.n	7d4 <Uart_IRQ+0x190>
    err_code = (1 << 0);
    printf("** TEST FAILED ** UART RX Overrun Error, Error Code: (0x%x)", err_code);
     6e2:	2101      	movs	r1, #1
     6e4:	4851      	ldr	r0, [pc, #324]	; (82c <Uart_IRQ+0x1e8>)
     6e6:	f000 fe9b 	bl	1420 <iprintf>
    err_code = (1 << 0);
     6ea:	f04f 0801 	mov.w	r8, #1
  }
  else puts("UART RX Overrun Passed");

  j = 0;
  uart_data_received = 1;  //set uart_data_received to one so that the first character is sent
     6ee:	2601      	movs	r6, #1
  j = 0;
     6f0:	2500      	movs	r5, #0

  puts("\n- Stage 4b TX/RX IRQ\n");
     6f2:	484f      	ldr	r0, [pc, #316]	; (830 <Uart_IRQ+0x1ec>)
  uart_data_received = 1;  //set uart_data_received to one so that the first character is sent
     6f4:	6166      	str	r6, [r4, #20]
  puts("\n- Stage 4b TX/RX IRQ\n");
     6f6:	f000 ff07 	bl	1508 <puts>
    - When its received by UART3 transfer it from RX buffer to the received variable
    - set flag to say it's been received
    - when received flag has been set send the next character from transmit variable
    - repeat until all characters have been received*/

  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART2, 0x20, 1, 1, 1, 1, 1, 1); //enable UART2 TX IRQ
     6fa:	4633      	mov	r3, r6
     6fc:	4632      	mov	r2, r6
     6fe:	e9cd 6602 	strd	r6, r6, [sp, #8]
     702:	e9cd 6600 	strd	r6, r6, [sp]
     706:	2120      	movs	r1, #32
     708:	4843      	ldr	r0, [pc, #268]	; (818 <Uart_IRQ+0x1d4>)
     70a:	f000 f9b7 	bl	a7c <CM3DS_MPS2_uart_init>
  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART3, 0x20, 1, 1, 1, 1, 1, 1); //enable UART3 RX IRQ
     70e:	4633      	mov	r3, r6
     710:	4632      	mov	r2, r6
     712:	e9cd 6602 	strd	r6, r6, [sp, #8]
     716:	e9cd 6600 	strd	r6, r6, [sp]
     71a:	2120      	movs	r1, #32
     71c:	483f      	ldr	r0, [pc, #252]	; (81c <Uart_IRQ+0x1d8>)
     71e:	f000 f9ad 	bl	a7c <CM3DS_MPS2_uart_init>
     722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  int i = 0, j = 0; /* i=transmit character counter, j = receive character counter */
     72a:	462e      	mov	r6, r5
     72c:	4b3c      	ldr	r3, [pc, #240]	; (820 <Uart_IRQ+0x1dc>)
  NVIC_EnableIRQ(UART3_IRQn);

  while(j < 11)   /*while j, the received character counter, is less than 11, the number of characters to be sent*/
  { /* uart_data_received and uart_data_sent are updated by TX and RX handlers */
    if(uart_data_received){
      puts("UART TX IRQ ....data sent");                    //if the data has been received (which is set in the
     72e:	f8df b118 	ldr.w	fp, [pc, #280]	; 848 <Uart_IRQ+0x204>
      CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2, transmit[i]);      //RX IRQ) then send the character corresponding to
     732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 818 <Uart_IRQ+0x1d4>
      i++;                                                  //the character counter, i, increment character counter
      uart_data_received = 0;
    }
    if(uart_data_sent){                                     //if the data has been set (which is set in the
      printf("UART RX IRQ ....data received.... ");         //TX IRQ) then receive the character corresponding to
     736:	f8df 9114 	ldr.w	r9, [pc, #276]	; 84c <Uart_IRQ+0x208>
     73a:	6059      	str	r1, [r3, #4]
     73c:	605a      	str	r2, [r3, #4]
    if(uart_data_received){
     73e:	6963      	ldr	r3, [r4, #20]
     740:	2b00      	cmp	r3, #0
     742:	d139      	bne.n	7b8 <Uart_IRQ+0x174>
    if(uart_data_sent){                                     //if the data has been set (which is set in the
     744:	6923      	ldr	r3, [r4, #16]
     746:	bb0b      	cbnz	r3, 78c <Uart_IRQ+0x148>
  while(j < 11)   /*while j, the received character counter, is less than 11, the number of characters to be sent*/
     748:	2d0a      	cmp	r5, #10
     74a:	ddf8      	ble.n	73e <Uart_IRQ+0xfa>
      j++;
      uart_data_sent = 0;
    }
  }

  printf("\nString received: %s\n\n", received);
     74c:	a904      	add	r1, sp, #16
     74e:	4839      	ldr	r0, [pc, #228]	; (834 <Uart_IRQ+0x1f0>)
     750:	f000 fe66 	bl	1420 <iprintf>

  if(strcmp(received, transmit)){
     754:	4639      	mov	r1, r7
     756:	a804      	add	r0, sp, #16
     758:	f000 fede 	bl	1518 <strcmp>
     75c:	2800      	cmp	r0, #0
     75e:	d13f      	bne.n	7e0 <Uart_IRQ+0x19c>
  NVIC_DisableIRQ(UARTOVF_IRQn);       //disable all the enabled IRQs
  NVIC_DisableIRQ(UART2_IRQn);
  NVIC_DisableIRQ(UART3_IRQn);

  if(!err_code) return 0;
  else return 8;
     760:	f1b8 0f00 	cmp.w	r8, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     764:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     768:	bf18      	it	ne
     76a:	f04f 0808 	movne.w	r8, #8
     76e:	4b2c      	ldr	r3, [pc, #176]	; (820 <Uart_IRQ+0x1dc>)
     770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     774:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
     778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
     77c:	4640      	mov	r0, r8
     77e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     786:	b00b      	add	sp, #44	; 0x2c
     788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      printf("UART RX IRQ ....data received.... ");         //TX IRQ) then receive the character corresponding to
     78c:	4648      	mov	r0, r9
     78e:	f000 fe47 	bl	1420 <iprintf>
      received[j] = CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3);  //the character counter, j, increment character counter
     792:	4822      	ldr	r0, [pc, #136]	; (81c <Uart_IRQ+0x1d8>)
     794:	f000 f9a4 	bl	ae0 <CM3DS_MPS2_uart_ReceiveChar>
     798:	ab0a      	add	r3, sp, #40	; 0x28
     79a:	442b      	add	r3, r5
     79c:	f803 0c18 	strb.w	r0, [r3, #-24]
      printf("%c\n", received[j]);
     7a0:	4601      	mov	r1, r0
     7a2:	4825      	ldr	r0, [pc, #148]	; (838 <Uart_IRQ+0x1f4>)
     7a4:	f000 fe3c 	bl	1420 <iprintf>
      uart_data_sent = 0;
     7a8:	2300      	movs	r3, #0
      j++;
     7aa:	3501      	adds	r5, #1
  while(j < 11)   /*while j, the received character counter, is less than 11, the number of characters to be sent*/
     7ac:	2d0b      	cmp	r5, #11
      uart_data_sent = 0;
     7ae:	6123      	str	r3, [r4, #16]
  while(j < 11)   /*while j, the received character counter, is less than 11, the number of characters to be sent*/
     7b0:	d0cc      	beq.n	74c <Uart_IRQ+0x108>
    if(uart_data_received){
     7b2:	6963      	ldr	r3, [r4, #20]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d0c5      	beq.n	744 <Uart_IRQ+0x100>
      puts("UART TX IRQ ....data sent");                    //if the data has been received (which is set in the
     7b8:	4658      	mov	r0, fp
     7ba:	f000 fea5 	bl	1508 <puts>
      CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2, transmit[i]);      //RX IRQ) then send the character corresponding to
     7be:	ab0a      	add	r3, sp, #40	; 0x28
     7c0:	4433      	add	r3, r6
     7c2:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
     7c6:	4650      	mov	r0, sl
     7c8:	f000 f984 	bl	ad4 <CM3DS_MPS2_uart_SendChar>
      uart_data_received = 0;
     7cc:	2300      	movs	r3, #0
      i++;                                                  //the character counter, i, increment character counter
     7ce:	3601      	adds	r6, #1
      uart_data_received = 0;
     7d0:	6163      	str	r3, [r4, #20]
     7d2:	e7b7      	b.n	744 <Uart_IRQ+0x100>
  else puts("UART RX Overrun Passed");
     7d4:	4819      	ldr	r0, [pc, #100]	; (83c <Uart_IRQ+0x1f8>)
     7d6:	f000 fe97 	bl	1508 <puts>
  int err_code = 0;
     7da:	f04f 0800 	mov.w	r8, #0
     7de:	e786      	b.n	6ee <Uart_IRQ+0xaa>
    puts("** TEST FAILED ** Strings Do Not Match!");
     7e0:	4817      	ldr	r0, [pc, #92]	; (840 <Uart_IRQ+0x1fc>)
     7e2:	f000 fe91 	bl	1508 <puts>
  else return 8;
     7e6:	f04f 0808 	mov.w	r8, #8
     7ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     7ee:	4b0c      	ldr	r3, [pc, #48]	; (820 <Uart_IRQ+0x1dc>)
     7f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     7f4:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
     7f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
}
     7fc:	4640      	mov	r0, r8
     7fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     806:	b00b      	add	sp, #44	; 0x2c
     808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     80c:	00002518 	.word	0x00002518
     810:	00002624 	.word	0x00002624
     814:	00002634 	.word	0x00002634
     818:	4002c000 	.word	0x4002c000
     81c:	4002d000 	.word	0x4002d000
     820:	e000e100 	.word	0xe000e100
     824:	20000068 	.word	0x20000068
     828:	00002660 	.word	0x00002660
     82c:	00002674 	.word	0x00002674
     830:	000026c8 	.word	0x000026c8
     834:	00002720 	.word	0x00002720
     838:	000024c4 	.word	0x000024c4
     83c:	000026b0 	.word	0x000026b0
     840:	00002738 	.word	0x00002738
     844:	0000264c 	.word	0x0000264c
     848:	000026e0 	.word	0x000026e0
     84c:	000026fc 	.word	0x000026fc

00000850 <uart2_id_check>:
// ----------------------------------------------------------
/* Detect the part number to see if device is present                */

int uart2_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     850:	4b05      	ldr	r3, [pc, #20]	; (868 <uart2_id_check+0x18>)
     852:	681b      	ldr	r3, [r3, #0]
     854:	2b21      	cmp	r3, #33	; 0x21
     856:	d001      	beq.n	85c <uart2_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     858:	2001      	movs	r0, #1
else
  return 0;
}
     85a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
     85c:	4b03      	ldr	r3, [pc, #12]	; (86c <uart2_id_check+0x1c>)
     85e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     860:	38b8      	subs	r0, #184	; 0xb8
     862:	bf18      	it	ne
     864:	2001      	movne	r0, #1
     866:	4770      	bx	lr
     868:	4002cfe0 	.word	0x4002cfe0
     86c:	4002cfe4 	.word	0x4002cfe4

00000870 <uart3_id_check>:

int uart3_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     870:	4b05      	ldr	r3, [pc, #20]	; (888 <uart3_id_check+0x18>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	2b21      	cmp	r3, #33	; 0x21
     876:	d001      	beq.n	87c <uart3_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     878:	2001      	movs	r0, #1
else
  return 0;
}
     87a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
     87c:	4b03      	ldr	r3, [pc, #12]	; (88c <uart3_id_check+0x1c>)
     87e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     880:	38b8      	subs	r0, #184	; 0xb8
     882:	bf18      	it	ne
     884:	2001      	movne	r0, #1
     886:	4770      	bx	lr
     888:	4002dfe0 	.word	0x4002dfe0
     88c:	4002dfe4 	.word	0x4002dfe4

00000890 <gpio0_id_check>:

int gpio0_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     890:	4b05      	ldr	r3, [pc, #20]	; (8a8 <gpio0_id_check+0x18>)
     892:	681b      	ldr	r3, [r3, #0]
     894:	2b20      	cmp	r3, #32
     896:	d001      	beq.n	89c <gpio0_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     898:	2001      	movs	r0, #1
else
  return 0;
}
     89a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
     89c:	4b03      	ldr	r3, [pc, #12]	; (8ac <gpio0_id_check+0x1c>)
     89e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8a0:	38b8      	subs	r0, #184	; 0xb8
     8a2:	bf18      	it	ne
     8a4:	2001      	movne	r0, #1
     8a6:	4770      	bx	lr
     8a8:	40010fe0 	.word	0x40010fe0
     8ac:	40010fe4 	.word	0x40010fe4

000008b0 <gpio1_id_check>:

int gpio1_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     8b0:	4b05      	ldr	r3, [pc, #20]	; (8c8 <gpio1_id_check+0x18>)
     8b2:	681b      	ldr	r3, [r3, #0]
     8b4:	2b20      	cmp	r3, #32
     8b6:	d001      	beq.n	8bc <gpio1_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     8b8:	2001      	movs	r0, #1
else
  return 0;
}
     8ba:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8))
     8bc:	4b03      	ldr	r3, [pc, #12]	; (8cc <gpio1_id_check+0x1c>)
     8be:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     8c0:	38b8      	subs	r0, #184	; 0xb8
     8c2:	bf18      	it	ne
     8c4:	2001      	movne	r0, #1
     8c6:	4770      	bx	lr
     8c8:	40011fe0 	.word	0x40011fe0
     8cc:	40011fe4 	.word	0x40011fe4

000008d0 <main>:
{
     8d0:	b510      	push	{r4, lr}
  UartStdOutInit();
     8d2:	f000 f869 	bl	9a8 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - UART Driver Test - revision $Revision: 242484 $\n");
     8d6:	4821      	ldr	r0, [pc, #132]	; (95c <main+0x8c>)
     8d8:	f000 fe16 	bl	1508 <puts>
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     8dc:	4b20      	ldr	r3, [pc, #128]	; (960 <main+0x90>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	2b21      	cmp	r3, #33	; 0x21
     8e2:	d006      	beq.n	8f2 <main+0x22>
    puts("** TEST SKIPPED ** UART 2 / UART 3 / GPIO 0 / GPIO 1 not available");
     8e4:	481f      	ldr	r0, [pc, #124]	; (964 <main+0x94>)
     8e6:	f000 fe0f 	bl	1508 <puts>
    UartEndSimulation();
     8ea:	f000 f875 	bl	9d8 <UartEndSimulation>
}
     8ee:	2000      	movs	r0, #0
     8f0:	bd10      	pop	{r4, pc}
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
     8f2:	4b1d      	ldr	r3, [pc, #116]	; (968 <main+0x98>)
     8f4:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     8f6:	2bb8      	cmp	r3, #184	; 0xb8
     8f8:	d1f4      	bne.n	8e4 <main+0x14>
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     8fa:	4b1c      	ldr	r3, [pc, #112]	; (96c <main+0x9c>)
     8fc:	681b      	ldr	r3, [r3, #0]
     8fe:	2b21      	cmp	r3, #33	; 0x21
     900:	d1f0      	bne.n	8e4 <main+0x14>
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
     902:	4b1b      	ldr	r3, [pc, #108]	; (970 <main+0xa0>)
     904:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     906:	2bb8      	cmp	r3, #184	; 0xb8
     908:	d1ec      	bne.n	8e4 <main+0x14>
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     90a:	4b1a      	ldr	r3, [pc, #104]	; (974 <main+0xa4>)
     90c:	681b      	ldr	r3, [r3, #0]
     90e:	2b20      	cmp	r3, #32
     910:	d1e8      	bne.n	8e4 <main+0x14>
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
     912:	4b19      	ldr	r3, [pc, #100]	; (978 <main+0xa8>)
     914:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     916:	2bb8      	cmp	r3, #184	; 0xb8
     918:	d1e4      	bne.n	8e4 <main+0x14>
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     91a:	4b18      	ldr	r3, [pc, #96]	; (97c <main+0xac>)
     91c:	681b      	ldr	r3, [r3, #0]
     91e:	2b20      	cmp	r3, #32
     920:	d1e0      	bne.n	8e4 <main+0x14>
    (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8))
     922:	4b17      	ldr	r3, [pc, #92]	; (980 <main+0xb0>)
     924:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     926:	2bb8      	cmp	r3, #184	; 0xb8
     928:	d1dc      	bne.n	8e4 <main+0x14>
  result |= Uart_Init();
     92a:	f7ff fcd5 	bl	2d8 <Uart_Init>
     92e:	4604      	mov	r4, r0
  result |= Uart_Buffull();
     930:	f7ff fd28 	bl	384 <Uart_Buffull>
     934:	4304      	orrs	r4, r0
  result |= Uart_OR();
     936:	f7ff fdbf 	bl	4b8 <Uart_OR>
     93a:	4304      	orrs	r4, r0
  result |= Uart_IRQ();
     93c:	f7ff fe82 	bl	644 <Uart_IRQ>
  if (result == 0) {
     940:	ea54 0100 	orrs.w	r1, r4, r0
     944:	d105      	bne.n	952 <main+0x82>
    puts("** TEST PASSED **\n");
     946:	480f      	ldr	r0, [pc, #60]	; (984 <main+0xb4>)
     948:	f000 fdde 	bl	1508 <puts>
  UartEndSimulation();
     94c:	f000 f844 	bl	9d8 <UartEndSimulation>
  return 0;
     950:	e7cd      	b.n	8ee <main+0x1e>
    printf("** TEST FAILED **, Error code: (0x%x)\n", result);
     952:	480d      	ldr	r0, [pc, #52]	; (988 <main+0xb8>)
     954:	f000 fd64 	bl	1420 <iprintf>
     958:	e7f8      	b.n	94c <main+0x7c>
     95a:	bf00      	nop
     95c:	00002760 	.word	0x00002760
     960:	4002cfe0 	.word	0x4002cfe0
     964:	000027ac 	.word	0x000027ac
     968:	4002cfe4 	.word	0x4002cfe4
     96c:	4002dfe0 	.word	0x4002dfe0
     970:	4002dfe4 	.word	0x4002dfe4
     974:	40010fe0 	.word	0x40010fe0
     978:	40010fe4 	.word	0x40010fe4
     97c:	40011fe0 	.word	0x40011fe0
     980:	40011fe4 	.word	0x40011fe4
     984:	000027f0 	.word	0x000027f0
     988:	00002804 	.word	0x00002804

0000098c <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     98c:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     98e:	4616      	mov	r6, r2
     990:	b13a      	cbz	r2, 9a2 <_write+0x16>
     992:	1e4c      	subs	r4, r1, #1
     994:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     996:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     99a:	f000 f80d 	bl	9b8 <UartPutc>
  for (i=0; i<len;i++) {
     99e:	42ac      	cmp	r4, r5
     9a0:	d1f9      	bne.n	996 <_write+0xa>
    }
  return len;
}
     9a2:	4630      	mov	r0, r6
     9a4:	bd70      	pop	{r4, r5, r6, pc}
     9a6:	bf00      	nop

000009a8 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     9a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     9ac:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     9ae:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     9b0:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     9b2:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     9b4:	4770      	bx	lr
     9b6:	bf00      	nop

000009b8 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     9b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     9bc:	6853      	ldr	r3, [r2, #4]
     9be:	07db      	lsls	r3, r3, #31
     9c0:	d4fc      	bmi.n	9bc <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     9c2:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     9c4:	4770      	bx	lr
     9c6:	bf00      	nop

000009c8 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     9c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     9cc:	6853      	ldr	r3, [r2, #4]
     9ce:	079b      	lsls	r3, r3, #30
     9d0:	d5fc      	bpl.n	9cc <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     9d2:	6810      	ldr	r0, [r2, #0]
}
     9d4:	b2c0      	uxtb	r0, r0
     9d6:	4770      	bx	lr

000009d8 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     9d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     9dc:	685a      	ldr	r2, [r3, #4]
     9de:	07d2      	lsls	r2, r2, #31
     9e0:	d4fc      	bmi.n	9dc <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     9e2:	2204      	movs	r2, #4
     9e4:	601a      	str	r2, [r3, #0]
     9e6:	e7fe      	b.n	9e6 <UartEndSimulation+0xe>

000009e8 <CM3DS_MPS2_timer_EnableIRQ>:
 * @brief  Enable the microcontroller timer interrupts.
 */

 void CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     9e8:	6803      	ldr	r3, [r0, #0]
     9ea:	f043 0308 	orr.w	r3, r3, #8
     9ee:	6003      	str	r3, [r0, #0]
 }
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop

000009f4 <CM3DS_MPS2_timer_DisableIRQ>:
 * @brief  Disable the microcontroller timer interrutps.
 */

 void CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     9f4:	6803      	ldr	r3, [r0, #0]
     9f6:	f023 0308 	bic.w	r3, r3, #8
     9fa:	6003      	str	r3, [r0, #0]
 }
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop

00000a00 <CM3DS_MPS2_timer_StartTimer>:
 * @brief  Start the Timer.
 */

 void CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     a00:	6803      	ldr	r3, [r0, #0]
     a02:	f043 0301 	orr.w	r3, r3, #1
     a06:	6003      	str	r3, [r0, #0]
 }
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <CM3DS_MPS2_timer_StopTimer>:
 * @brief  Stop the Timer.
 */

 void CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     a0c:	6803      	ldr	r3, [r0, #0]
     a0e:	f023 0301 	bic.w	r3, r3, #1
     a12:	6003      	str	r3, [r0, #0]
 }
     a14:	4770      	bx	lr
     a16:	bf00      	nop

00000a18 <CM3DS_MPS2_timer_GetValue>:
 * @brief  Returns the current value of the timer.
 */

 uint32_t CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->VALUE;
     a18:	6840      	ldr	r0, [r0, #4]
 }
     a1a:	4770      	bx	lr

00000a1c <CM3DS_MPS2_timer_SetValue>:
 * @brief  Sets the timer to the specified value.
 */

 void CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->VALUE = value;
     a1c:	6041      	str	r1, [r0, #4]
 }
     a1e:	4770      	bx	lr

00000a20 <CM3DS_MPS2_timer_GetReload>:
 * @brief  Returns the reload value of the timer. The reload value is the value which the timer is set to after an underflow occurs.
 */

 uint32_t CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->RELOAD;
     a20:	6880      	ldr	r0, [r0, #8]
 }
     a22:	4770      	bx	lr

00000a24 <CM3DS_MPS2_timer_SetReload>:
 * @brief  Sets the reload value of the timer to the specified value. The reload value is the value which the timer is set to after an underflow occurs.
 */

 void CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->RELOAD = value;
     a24:	6081      	str	r1, [r0, #8]
 }
     a26:	4770      	bx	lr

00000a28 <CM3DS_MPS2_timer_ClearIRQ>:
 * @brief  Clears the timer IRQ if set.
 */

 void CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->INTCLEAR = CM3DS_MPS2_TIMER_INTCLEAR_Msk;
     a28:	2301      	movs	r3, #1
     a2a:	60c3      	str	r3, [r0, #12]
 }
     a2c:	4770      	bx	lr
     a2e:	bf00      	nop

00000a30 <CM3DS_MPS2_timer_StatusIRQ>:
 * @brief  Returns the IRQ status of the timer in question.
 */

 uint32_t  CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->INTSTATUS;
     a30:	68c0      	ldr	r0, [r0, #12]
 }
     a32:	4770      	bx	lr

00000a34 <CM3DS_MPS2_timer_Init_IntClock>:
 */

  void CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     a34:	2300      	movs	r3, #0
     a36:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     a38:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     a3a:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                          /* non zero - enable IRQ */
     a3c:	b912      	cbnz	r2, a44 <CM3DS_MPS2_timer_Init_IntClock+0x10>
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else{                                                                                   /* zero - do not enable IRQ */
         CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk);                                       /* enable timer */
     a3e:	2301      	movs	r3, #1
     a40:	6003      	str	r3, [r0, #0]
        }
 }
     a42:	4770      	bx	lr
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
     a44:	2309      	movs	r3, #9
     a46:	6003      	str	r3, [r0, #0]
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <CM3DS_MPS2_timer_Init_ExtClock>:
 */

 void CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     a4c:	2300      	movs	r3, #0
     a4e:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     a50:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     a52:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     a54:	b912      	cbnz	r2, a5c <CM3DS_MPS2_timer_Init_ExtClock+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk |CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     a56:	2305      	movs	r3, #5
     a58:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk);                                   /* enable timer */
         }
 }
     a5a:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     a5c:	230d      	movs	r3, #13
     a5e:	6003      	str	r3, [r0, #0]
     a60:	4770      	bx	lr
     a62:	bf00      	nop

00000a64 <CM3DS_MPS2_timer_Init_ExtEnable>:
 */

 void CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     a64:	2300      	movs	r3, #0
     a66:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     a68:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     a6a:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     a6c:	b912      	cbnz	r2, a74 <CM3DS_MPS2_timer_Init_ExtEnable+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     a6e:	2303      	movs	r3, #3
     a70:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk);                                    /* enable timer */
         }
 }
     a72:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     a74:	230b      	movs	r3, #11
     a76:	6003      	str	r3, [r0, #0]
     a78:	4770      	bx	lr
     a7a:	bf00      	nop

00000a7c <CM3DS_MPS2_uart_init>:
 * @return 1 if initialisation failed, 0 if successful.
 */

 uint32_t CM3DS_MPS2_uart_init(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, uint32_t divider, uint32_t tx_en,
                           uint32_t rx_en, uint32_t tx_irq_en, uint32_t rx_irq_en, uint32_t tx_ovrirq_en, uint32_t rx_ovrirq_en)
 {
     a7c:	b4f0      	push	{r4, r5, r6, r7}
       uint32_t new_ctrl=0;

       if (tx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_TXEN_Msk;
     a7e:	3200      	adds	r2, #0
     a80:	bf18      	it	ne
     a82:	2201      	movne	r2, #1
 {
     a84:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
     a88:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
       if (rx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_RXEN_Msk;
     a8c:	b10b      	cbz	r3, a92 <CM3DS_MPS2_uart_init+0x16>
     a8e:	f042 0202 	orr.w	r2, r2, #2
       if (tx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_TXIRQEN_Msk;
     a92:	b10f      	cbz	r7, a98 <CM3DS_MPS2_uart_init+0x1c>
     a94:	f042 0204 	orr.w	r2, r2, #4
       if (rx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_RXIRQEN_Msk;
     a98:	b10e      	cbz	r6, a9e <CM3DS_MPS2_uart_init+0x22>
     a9a:	f042 0208 	orr.w	r2, r2, #8
       if (tx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_TXORIRQEN_Msk;
     a9e:	b10d      	cbz	r5, aa4 <CM3DS_MPS2_uart_init+0x28>
     aa0:	f042 0210 	orr.w	r2, r2, #16
       if (rx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_RXORIRQEN_Msk;
     aa4:	b10c      	cbz	r4, aaa <CM3DS_MPS2_uart_init+0x2e>
     aa6:	f042 0220 	orr.w	r2, r2, #32

       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     aaa:	2300      	movs	r3, #0
       CM3DS_MPS2_UART->BAUDDIV = divider;
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */

       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
       else return 0;
 }
     aac:	bcf0      	pop	{r4, r5, r6, r7}
       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     aae:	6083      	str	r3, [r0, #8]
       CM3DS_MPS2_UART->BAUDDIV = divider;
     ab0:	6101      	str	r1, [r0, #16]
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */
     ab2:	6082      	str	r2, [r0, #8]
       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
     ab4:	6843      	ldr	r3, [r0, #4]
     ab6:	f013 0f0c 	tst.w	r3, #12
 }
     aba:	bf14      	ite	ne
     abc:	2001      	movne	r0, #1
     abe:	2000      	moveq	r0, #0
     ac0:	4770      	bx	lr
     ac2:	bf00      	nop

00000ac4 <CM3DS_MPS2_uart_GetRxBufferFull>:
 * @brief  Returns whether the RX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk)>> CM3DS_MPS2_UART_STATE_RXBF_Pos);
     ac4:	6840      	ldr	r0, [r0, #4]
 }
     ac6:	f3c0 0040 	ubfx	r0, r0, #1, #1
     aca:	4770      	bx	lr

00000acc <CM3DS_MPS2_uart_GetTxBufferFull>:
 * @brief  Returns whether the TX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk)>> CM3DS_MPS2_UART_STATE_TXBF_Pos);
     acc:	6840      	ldr	r0, [r0, #4]
 }
     ace:	f000 0001 	and.w	r0, r0, #1
     ad2:	4770      	bx	lr

00000ad4 <CM3DS_MPS2_uart_SendChar>:
 * @brief  Sends a character to the TX buffer for transmission.
 */

 void CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, char txchar)
 {
       while(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk);
     ad4:	6843      	ldr	r3, [r0, #4]
     ad6:	07db      	lsls	r3, r3, #31
     ad8:	d4fc      	bmi.n	ad4 <CM3DS_MPS2_uart_SendChar>
       CM3DS_MPS2_UART->DATA = (uint32_t)txchar;
     ada:	6001      	str	r1, [r0, #0]
 }
     adc:	4770      	bx	lr
     ade:	bf00      	nop

00000ae0 <CM3DS_MPS2_uart_ReceiveChar>:
 * @brief  returns the character from the RX buffer which has been received.
 */

 char CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       while(!(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk));
     ae0:	6843      	ldr	r3, [r0, #4]
     ae2:	079b      	lsls	r3, r3, #30
     ae4:	d5fc      	bpl.n	ae0 <CM3DS_MPS2_uart_ReceiveChar>
       return (char)(CM3DS_MPS2_UART->DATA);
     ae6:	6800      	ldr	r0, [r0, #0]
 }
     ae8:	b2c0      	uxtb	r0, r0
     aea:	4770      	bx	lr

00000aec <CM3DS_MPS2_uart_GetOverrunStatus>:
 */


 uint32_t CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     aec:	6840      	ldr	r0, [r0, #4]
 }
     aee:	f3c0 0081 	ubfx	r0, r0, #2, #2
     af2:	4770      	bx	lr

00000af4 <CM3DS_MPS2_uart_ClearOverrunStatus>:
 * @brief  Clears the overrun status of both the RX & TX buffers and then returns the current overrun status.
 */

 uint32_t CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->STATE = (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk);
     af4:	230c      	movs	r3, #12
     af6:	6043      	str	r3, [r0, #4]
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     af8:	6840      	ldr	r0, [r0, #4]
 }
     afa:	f3c0 0081 	ubfx	r0, r0, #2, #2
     afe:	4770      	bx	lr

00000b00 <CM3DS_MPS2_uart_GetBaudDivider>:
 * @brief  Returns the current UART Baud rate divider. Note that the Baud rate divider is the difference between the clock frequency and the Baud frequency.
 */

 uint32_t CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return CM3DS_MPS2_UART->BAUDDIV;
     b00:	6900      	ldr	r0, [r0, #16]
 }
     b02:	4770      	bx	lr

00000b04 <CM3DS_MPS2_uart_GetTxIRQStatus>:
 * @brief  Returns the TX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_TXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_TXIRQ_Pos);
     b04:	68c0      	ldr	r0, [r0, #12]
 }
     b06:	f000 0001 	and.w	r0, r0, #1
     b0a:	4770      	bx	lr

00000b0c <CM3DS_MPS2_uart_GetRxIRQStatus>:
 * @brief  Returns the RX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_RXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_RXIRQ_Pos);
     b0c:	68c0      	ldr	r0, [r0, #12]
 }
     b0e:	f3c0 0040 	ubfx	r0, r0, #1, #1
     b12:	4770      	bx	lr

00000b14 <CM3DS_MPS2_uart_ClearTxIRQ>:
 * @brief  Clears the TX buffer full interrupt status.
 */

 void CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_TXIRQ_Msk;
     b14:	2301      	movs	r3, #1
     b16:	60c3      	str	r3, [r0, #12]
 }
     b18:	4770      	bx	lr
     b1a:	bf00      	nop

00000b1c <CM3DS_MPS2_uart_ClearRxIRQ>:
 * @brief  Clears the RX interrupt status.
 */

 void CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_RXIRQ_Msk;
     b1c:	2302      	movs	r3, #2
     b1e:	60c3      	str	r3, [r0, #12]
 }
     b20:	4770      	bx	lr
     b22:	bf00      	nop

00000b24 <CM3DS_MPS2_gpio_SetOutEnable>:
 * @brief  Sets pins on a port as an output. Set the bit corresponding to the pin number to 1 for output i.e. Set bit 1 of outenable to 1 to set pin 1 as an output. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableset)
 {
       CM3DS_MPS2_GPIO->OUTENABLESET = outenableset;
     b24:	6101      	str	r1, [r0, #16]
 }
     b26:	4770      	bx	lr

00000b28 <CM3DS_MPS2_gpio_ClrOutEnable>:
 * @brief  Sets pins on a port as an input. Set the bit corresponding to the pin number to 1 for input i.e. Set bit 1 of outenable to 1 to set pin 1 as an input. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableclr)
 {
       CM3DS_MPS2_GPIO->OUTENABLECLR = outenableclr;
     b28:	6141      	str	r1, [r0, #20]
 }
     b2a:	4770      	bx	lr

00000b2c <CM3DS_MPS2_gpio_GetOutEnable>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set as inputs or outputs i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is an output.
 */

 uint32_t CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->OUTENABLESET;
     b2c:	6900      	ldr	r0, [r0, #16]
 }
     b2e:	4770      	bx	lr

00000b30 <CM3DS_MPS2_gpio_SetAltFunc>:
 * @brief  enables the alternative function for pins. Set the bit corresponding to the pin number to 1 for alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to its alternative function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncset)
 {
       CM3DS_MPS2_GPIO->ALTFUNCSET = AltFuncset;
     b30:	6181      	str	r1, [r0, #24]
 }
     b32:	4770      	bx	lr

00000b34 <CM3DS_MPS2_gpio_ClrAltFunc>:
 * @brief  disables the alternative function for pins. Set the bit corresponding to the pin number to 1 to disable alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to the orignal output function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncclr)
 {
       CM3DS_MPS2_GPIO->ALTFUNCCLR = AltFuncclr;
     b34:	61c1      	str	r1, [r0, #28]
 }
     b36:	4770      	bx	lr

00000b38 <CM3DS_MPS2_gpio_GetAltFunc>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set to their alternative or their original output functionality i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is set to its alternative function.
 */

 uint32_t CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->ALTFUNCSET;
     b38:	6980      	ldr	r0, [r0, #24]
 }
     b3a:	4770      	bx	lr

00000b3c <CM3DS_MPS2_gpio_IntClear>:
 * @brief  Clears the interrupt flag for the specified pin and then returns the new interrupt status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTCLEAR = (1 << Num);
     b3c:	2301      	movs	r3, #1
     b3e:	fa03 f101 	lsl.w	r1, r3, r1
     b42:	6381      	str	r1, [r0, #56]	; 0x38

       return CM3DS_MPS2_GPIO->INTSTATUS;
     b44:	6b80      	ldr	r0, [r0, #56]	; 0x38
 }
     b46:	4770      	bx	lr

00000b48 <CM3DS_MPS2_gpio_SetIntEnable>:
 * @brief  Enables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENSET = (1 << Num);
     b48:	2301      	movs	r3, #1
     b4a:	fa03 f101 	lsl.w	r1, r3, r1
     b4e:	6201      	str	r1, [r0, #32]

       return CM3DS_MPS2_GPIO->INTENSET;
     b50:	6a00      	ldr	r0, [r0, #32]
 }
     b52:	4770      	bx	lr

00000b54 <CM3DS_MPS2_gpio_ClrIntEnable>:
 * @brief  Disables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

  uint32_t CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENCLR = (1 << Num);
     b54:	2301      	movs	r3, #1
     b56:	fa03 f101 	lsl.w	r1, r3, r1
     b5a:	6241      	str	r1, [r0, #36]	; 0x24

       return CM3DS_MPS2_GPIO->INTENCLR;
     b5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 }
     b5e:	4770      	bx	lr

00000b60 <CM3DS_MPS2_gpio_SetIntHighLevel>:
 * @brief  Changes the interrupt type for the specified pin to a high level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num); /* Clear INT TYPE bit */
     b60:	2301      	movs	r3, #1
     b62:	fa03 f101 	lsl.w	r1, r3, r1
     b66:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     b68:	6301      	str	r1, [r0, #48]	; 0x30
 }
     b6a:	4770      	bx	lr

00000b6c <CM3DS_MPS2_gpio_SetIntRisingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a rising edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num); /* Set INT TYPE bit */
     b6c:	2301      	movs	r3, #1
     b6e:	fa03 f101 	lsl.w	r1, r3, r1
     b72:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     b74:	6301      	str	r1, [r0, #48]	; 0x30
 }
     b76:	4770      	bx	lr

00000b78 <CM3DS_MPS2_gpio_SetIntLowLevel>:
 * @brief  Changes the interrupt type for the specified pin to a low level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num);  /* Clear INT TYPE bit */
     b78:	2301      	movs	r3, #1
     b7a:	fa03 f101 	lsl.w	r1, r3, r1
     b7e:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     b80:	6341      	str	r1, [r0, #52]	; 0x34
 }
     b82:	4770      	bx	lr

00000b84 <CM3DS_MPS2_gpio_SetIntFallingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a falling edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num);  /* Set INT TYPE bit */
     b84:	2301      	movs	r3, #1
     b86:	fa03 f101 	lsl.w	r1, r3, r1
     b8a:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     b8c:	6341      	str	r1, [r0, #52]	; 0x34
 }
     b8e:	4770      	bx	lr

00000b90 <CM3DS_MPS2_gpio_MaskedWrite>:
 * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
 */

 void CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t value, uint32_t mask)
 {
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b90:	b2d3      	uxtb	r3, r2
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b92:	f3c2 2207 	ubfx	r2, r2, #8, #8
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b96:	f503 7380 	add.w	r3, r3, #256	; 0x100
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b9a:	f502 7200 	add.w	r2, r2, #512	; 0x200
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b9e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     ba2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 }
     ba6:	4770      	bx	lr

00000ba8 <CM3DS_MPS2_i2s_config>:
                uint32_t rx_enable, uint32_t rx_int_enable, uint32_t rx_waterlevel)
 {
   uint32_t i2s_control_val;
   // TX water level range from 3 to 0
   // Generate IRQ if TX Fifo space > TX water level
   if (tx_waterlevel > 3) return 1; // Error if out of range
     ba8:	2b03      	cmp	r3, #3
     baa:	d820      	bhi.n	bee <CM3DS_MPS2_i2s_config+0x46>
 {
     bac:	b410      	push	{r4}
   // RX water level range from 4 to 1
   // Generate IRQ if RX Fifo space < RX water level
   if ((rx_waterlevel > 4)||(rx_waterlevel == 0)) return 1; // Error if out of range
     bae:	9c03      	ldr	r4, [sp, #12]
     bb0:	3c01      	subs	r4, #1
     bb2:	2c03      	cmp	r4, #3
     bb4:	d818      	bhi.n	be8 <CM3DS_MPS2_i2s_config+0x40>
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
                      (tx_waterlevel << CM3DS_MPS2_I2S_CONTROL_TXWLVL_Pos) |
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
                  (tx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXEN_Pos;
     bb6:	f001 0401 	and.w	r4, r1, #1
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     bba:	9901      	ldr	r1, [sp, #4]
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
     bbc:	0052      	lsls	r2, r2, #1
     bbe:	f002 0202 	and.w	r2, r2, #2
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     bc2:	0089      	lsls	r1, r1, #2
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     bc4:	4322      	orrs	r2, r4
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     bc6:	f001 0104 	and.w	r1, r1, #4
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     bca:	430a      	orrs	r2, r1
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     bcc:	9902      	ldr	r1, [sp, #8]
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     bce:	9c03      	ldr	r4, [sp, #12]
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     bd0:	00c9      	lsls	r1, r1, #3
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     bd2:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     bd6:	f001 0108 	and.w	r1, r1, #8
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     bda:	430a      	orrs	r2, r1
     bdc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

   pI2S->CONTROL  = i2s_control_val;
     be0:	6003      	str	r3, [r0, #0]
   return 0;
 }
     be2:	bc10      	pop	{r4}
   return 0;
     be4:	2000      	movs	r0, #0
 }
     be6:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     be8:	2001      	movs	r0, #1
 }
     bea:	bc10      	pop	{r4}
     bec:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     bee:	2001      	movs	r0, #1
 }
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop

00000bf4 <CM3DS_MPS2_i2s_tx_fifo_empty>:

 int CM3DS_MPS2_i2s_tx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_TXEmpty_Pos;
     bf4:	6840      	ldr	r0, [r0, #4]
   }
     bf6:	f3c0 0080 	ubfx	r0, r0, #2, #1
     bfa:	4770      	bx	lr

00000bfc <CM3DS_MPS2_i2s_tx_fifo_full>:

 int CM3DS_MPS2_i2s_tx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXFull_Pos;
     bfc:	6840      	ldr	r0, [r0, #4]
   }
     bfe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     c02:	4770      	bx	lr

00000c04 <CM3DS_MPS2_i2s_rx_fifo_empty>:

 int CM3DS_MPS2_i2s_rx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_RXEmpty_Pos;
     c04:	6840      	ldr	r0, [r0, #4]
   }
     c06:	f3c0 1000 	ubfx	r0, r0, #4, #1
     c0a:	4770      	bx	lr

00000c0c <CM3DS_MPS2_i2s_rx_fifo_full>:

 int CM3DS_MPS2_i2s_rx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXFull_Pos;
     c0c:	6840      	ldr	r0, [r0, #4]
   }
     c0e:	f3c0 1040 	ubfx	r0, r0, #5, #1
     c12:	4770      	bx	lr

00000c14 <CM3DS_MPS2_i2s_rx_irq_alert>:

 int CM3DS_MPS2_i2s_rx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXIRQ_Pos;
     c14:	6840      	ldr	r0, [r0, #4]
   }
     c16:	f3c0 0040 	ubfx	r0, r0, #1, #1
     c1a:	4770      	bx	lr

00000c1c <CM3DS_MPS2_i2s_tx_irq_alert>:

 int CM3DS_MPS2_i2s_tx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXIRQ_Pos;
     c1c:	6840      	ldr	r0, [r0, #4]
   }
     c1e:	f000 0001 	and.w	r0, r0, #1
     c22:	4770      	bx	lr

00000c24 <CM3DS_MPS2_i2s_tx_stop>:

 int CM3DS_MPS2_i2s_tx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     c24:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     c26:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     c28:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     c2a:	f023 0301 	bic.w	r3, r3, #1
     c2e:	6013      	str	r3, [r2, #0]
   }
     c30:	4770      	bx	lr
     c32:	bf00      	nop

00000c34 <CM3DS_MPS2_i2s_rx_stop>:

 int CM3DS_MPS2_i2s_rx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     c34:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     c36:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     c38:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     c3a:	f023 0304 	bic.w	r3, r3, #4
     c3e:	6013      	str	r3, [r2, #0]
   }
     c40:	4770      	bx	lr
     c42:	bf00      	nop

00000c44 <CM3DS_MPS2_i2s_get_tx_error>:

 int CM3DS_MPS2_i2s_get_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_TXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_TXERR_Pos);
     c44:	6880      	ldr	r0, [r0, #8]
   }
     c46:	f000 0001 	and.w	r0, r0, #1
     c4a:	4770      	bx	lr

00000c4c <CM3DS_MPS2_i2s_get_rx_error>:

 int CM3DS_MPS2_i2s_get_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_RXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_RXERR_Pos);
     c4c:	6880      	ldr	r0, [r0, #8]
   }
     c4e:	f3c0 0040 	ubfx	r0, r0, #1, #1
     c52:	4770      	bx	lr

00000c54 <CM3DS_MPS2_i2s_clear_tx_error>:

 void CM3DS_MPS2_i2s_clear_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_TXERR_Msk;
     c54:	2301      	movs	r3, #1
     c56:	6083      	str	r3, [r0, #8]
   return;
   }
     c58:	4770      	bx	lr
     c5a:	bf00      	nop

00000c5c <CM3DS_MPS2_i2s_clear_rx_error>:

 void CM3DS_MPS2_i2s_clear_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_RXERR_Msk;
     c5c:	2302      	movs	r3, #2
     c5e:	6083      	str	r3, [r0, #8]
   return;;
   }
     c60:	4770      	bx	lr
     c62:	bf00      	nop

00000c64 <CM3DS_MPS2_i2s_fifo_reset>:

 void CM3DS_MPS2_i2s_fifo_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     c64:	6803      	ldr	r3, [r0, #0]
     c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     c6a:	6003      	str	r3, [r0, #0]
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     c6c:	6803      	ldr	r3, [r0, #0]
     c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     c72:	6003      	str	r3, [r0, #0]
   return;
   }
     c74:	4770      	bx	lr
     c76:	bf00      	nop

00000c78 <CM3DS_MPS2_i2s_codec_reset>:

 void CM3DS_MPS2_i2s_codec_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   int i;
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     c78:	6803      	ldr	r3, [r0, #0]
     c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c7e:	6003      	str	r3, [r0, #0]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     c80:	bf00      	nop
     c82:	bf00      	nop
     c84:	bf00      	nop
     c86:	bf00      	nop
     c88:	bf00      	nop
     c8a:	bf00      	nop
   for (i=0;i<6;i++) { // delay loop
     __NOP();
     }
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     c8c:	6803      	ldr	r3, [r0, #0]
     c8e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
     c92:	6003      	str	r3, [r0, #0]
   return;
   }
     c94:	4770      	bx	lr
     c96:	bf00      	nop

00000c98 <CM3DS_MPS2_i2s_speed_config>:

 int CM3DS_MPS2_i2s_speed_config(CM3DS_MPS2_I2S_TypeDef *pI2S, uint32_t divide_ratio){
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     c98:	f240 33ed 	movw	r3, #1005	; 0x3ed
     c9c:	f1a1 0212 	sub.w	r2, r1, #18
     ca0:	429a      	cmp	r2, r3
   if (divide_ratio > 0x3FF) return 1; // Error: Divide ratio too large (only 10 bits)

   pI2S->DIVIDE = divide_ratio;
     ca2:	bf9a      	itte	ls
     ca4:	60c1      	strls	r1, [r0, #12]
   return 0;
     ca6:	2000      	movls	r0, #0
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     ca8:	2001      	movhi	r0, #1
   }
     caa:	4770      	bx	lr

00000cac <CM3DS_MPS2_i2c_send_byte>:
 {
     int loop;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cac:	2201      	movs	r2, #1
     cae:	4b2e      	ldr	r3, [pc, #184]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     cb0:	605a      	str	r2, [r3, #4]
         // apSleepus(1);
         if (c & (1 << (7 - loop)))
     cb2:	09c2      	lsrs	r2, r0, #7
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cb4:	f04f 0202 	mov.w	r2, #2
         else
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cb8:	bf0c      	ite	eq
     cba:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cbc:	601a      	strne	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cbe:	2201      	movs	r2, #1
     cc0:	4b29      	ldr	r3, [pc, #164]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cc2:	0641      	lsls	r1, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cc4:	601a      	str	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cc6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cc8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cca:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cce:	bf54      	ite	pl
     cd0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cd2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cd4:	2201      	movs	r2, #1
     cd6:	4b24      	ldr	r3, [pc, #144]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cd8:	0681      	lsls	r1, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cda:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cdc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cde:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ce0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ce4:	bf54      	ite	pl
     ce6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ce8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cea:	2201      	movs	r2, #1
     cec:	4b1e      	ldr	r3, [pc, #120]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cee:	06c1      	lsls	r1, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cf0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cf6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cfa:	bf54      	ite	pl
     cfc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cfe:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d00:	2201      	movs	r2, #1
     d02:	4b19      	ldr	r3, [pc, #100]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     d04:	0701      	lsls	r1, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d06:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d08:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d0a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d0c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d10:	bf54      	ite	pl
     d12:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d14:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d16:	2201      	movs	r2, #1
     d18:	4b13      	ldr	r3, [pc, #76]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     d1a:	0741      	lsls	r1, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d1c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d1e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d20:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d22:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d26:	bf54      	ite	pl
     d28:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d2a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d2c:	2201      	movs	r2, #1
     d2e:	4b0e      	ldr	r3, [pc, #56]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     d30:	0781      	lsls	r1, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d32:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d34:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d36:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d38:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d3c:	bf54      	ite	pl
     d3e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d40:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d42:	2201      	movs	r2, #1
     d44:	4b08      	ldr	r3, [pc, #32]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     d46:	07c1      	lsls	r1, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d48:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d4a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d4c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d4e:	f04f 0202 	mov.w	r2, #2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d52:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d56:	bf4c      	ite	mi
     d58:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d5a:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d5c:	2201      	movs	r2, #1
     d5e:	4b02      	ldr	r3, [pc, #8]	; (d68 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     d60:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d62:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d64:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
 }
     d66:	4770      	bx	lr
     d68:	40023000 	.word	0x40023000

00000d6c <CM3DS_MPS2_i2c_receive_byte>:
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     data         = 0;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d6c:	2201      	movs	r2, #1
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d6e:	2103      	movs	r1, #3
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d70:	2002      	movs	r0, #2
     d72:	4b2c      	ldr	r3, [pc, #176]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     d74:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d76:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d78:	6019      	str	r1, [r3, #0]
         // apSleepus(1);
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d7a:	6818      	ldr	r0, [r3, #0]
             data += (1 << (7 - loop));
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d7c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d7e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d80:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d82:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d84:	2103      	movs	r1, #3
     data         = 0;
     d86:	f010 0f02 	tst.w	r0, #2
     d8a:	bf14      	ite	ne
     d8c:	2080      	movne	r0, #128	; 0x80
     d8e:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d94:	4b23      	ldr	r3, [pc, #140]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d96:	bf48      	it	mi
     d98:	3040      	addmi	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d9a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d9c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d9e:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     da0:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     da2:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     da4:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     da6:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     daa:	4b1e      	ldr	r3, [pc, #120]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     dac:	bf48      	it	mi
     dae:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     db0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     db2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     db4:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     db6:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     db8:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     dba:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dbc:	f04f 0201 	mov.w	r2, #1
     dc0:	4b18      	ldr	r3, [pc, #96]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     dc2:	bf48      	it	mi
     dc4:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     dca:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dcc:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     dce:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dd4:	4b13      	ldr	r3, [pc, #76]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     dd6:	bf48      	it	mi
     dd8:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dda:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ddc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     dde:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     de0:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     de2:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     de4:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     de6:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dea:	4b0e      	ldr	r3, [pc, #56]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     dec:	bf48      	it	mi
     dee:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     df0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     df2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     df4:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     df6:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     df8:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     dfa:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dfc:	f04f 0201 	mov.w	r2, #1
     e00:	4b08      	ldr	r3, [pc, #32]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     e02:	bf48      	it	mi
     e04:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e06:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e08:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e0a:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e0c:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e0e:	2101      	movs	r1, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e10:	079b      	lsls	r3, r3, #30
             data += (1 << (7 - loop));
     e12:	bf48      	it	mi
     e14:	1880      	addmi	r0, r0, r2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e16:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e18:	4b02      	ldr	r3, [pc, #8]	; (e24 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     // apSleepus(1);

     return data;
 }
     e1a:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e1c:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e1e:	605a      	str	r2, [r3, #4]
 }
     e20:	4770      	bx	lr
     e22:	bf00      	nop
     e24:	40023000 	.word	0x40023000

00000e28 <CM3DS_MPS2_i2c_receive_ack>:
     int nack;

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e28:	2201      	movs	r2, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e2a:	2102      	movs	r1, #2
     e2c:	4b06      	ldr	r3, [pc, #24]	; (e48 <CM3DS_MPS2_i2c_receive_ack+0x20>)
     e2e:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e30:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e32:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     e34:	6818      	ldr	r0, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e36:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     if(nack==0)
     e38:	f010 0f02 	tst.w	r0, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e3c:	6019      	str	r1, [r3, #0]
         return 1;

     return 0;
 }
     e3e:	bf0c      	ite	eq
     e40:	4610      	moveq	r0, r2
     e42:	2000      	movne	r0, #0
     e44:	4770      	bx	lr
     e46:	bf00      	nop
     e48:	40023000 	.word	0x40023000

00000e4c <CM3DS_MPS2_i2c_send_ack>:

 // Write the acknowledge bit
 void CM3DS_MPS2_i2c_send_ack(void)
 {
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e4c:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e4e:	2102      	movs	r1, #2
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e50:	4b03      	ldr	r3, [pc, #12]	; (e60 <CM3DS_MPS2_i2c_send_ack+0x14>)
     e52:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e54:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e56:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e58:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e5a:	6059      	str	r1, [r3, #4]
     // apSleepus(1);
 }
     e5c:	4770      	bx	lr
     e5e:	bf00      	nop
     e60:	40023000 	.word	0x40023000

00000e64 <CM3DS_MPS2_i2c_read>:

 // Write data stream and read one byte
 unsigned char CM3DS_MPS2_i2c_read(unsigned char reg_addr, unsigned char sadr)
 {
     e64:	b430      	push	{r4, r5}

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e66:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e68:	2401      	movs	r4, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     e6a:	2503      	movs	r5, #3
     e6c:	4b91      	ldr	r3, [pc, #580]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
     e6e:	601d      	str	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e70:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e72:	605c      	str	r4, [r3, #4]
         if (c & (1 << (7 - loop)))
     e74:	09cc      	lsrs	r4, r1, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e76:	bf0c      	ite	eq
     e78:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e7a:	601a      	strne	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e7c:	2201      	movs	r2, #1
     e7e:	4b8d      	ldr	r3, [pc, #564]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e80:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e82:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e84:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e86:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e88:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e8c:	bf54      	ite	pl
     e8e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e90:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e92:	2201      	movs	r2, #1
     e94:	4b87      	ldr	r3, [pc, #540]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e96:	068d      	lsls	r5, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e98:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e9a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e9c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e9e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ea2:	bf54      	ite	pl
     ea4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ea6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ea8:	2201      	movs	r2, #1
     eaa:	4b82      	ldr	r3, [pc, #520]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     eac:	06cc      	lsls	r4, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eae:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eb0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eb2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eb4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eb8:	bf54      	ite	pl
     eba:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ebc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ebe:	2201      	movs	r2, #1
     ec0:	4b7c      	ldr	r3, [pc, #496]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     ec2:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ec4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ec6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ec8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eca:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ece:	bf54      	ite	pl
     ed0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ed2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ed4:	2201      	movs	r2, #1
     ed6:	4b77      	ldr	r3, [pc, #476]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     ed8:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eda:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     edc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ede:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ee0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ee4:	bf54      	ite	pl
     ee6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ee8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eea:	2201      	movs	r2, #1
     eec:	4b71      	ldr	r3, [pc, #452]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     eee:	078d      	lsls	r5, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ef0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ef2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ef4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     efa:	bf54      	ite	pl
     efc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     efe:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f00:	2201      	movs	r2, #1
     f02:	4b6c      	ldr	r3, [pc, #432]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f04:	07cc      	lsls	r4, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f06:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f08:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f0a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f0c:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f10:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f14:	bf4c      	ite	mi
     f16:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f18:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f1a:	2201      	movs	r2, #1
     f1c:	4b65      	ldr	r3, [pc, #404]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
     f1e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f20:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f22:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f24:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f26:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f28:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     f2a:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f2c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f2e:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f30:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     f32:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f34:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f38:	bf0c      	ite	eq
     f3a:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f3c:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f3e:	4b5d      	ldr	r3, [pc, #372]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f40:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f42:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f44:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f46:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f48:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f4c:	bf54      	ite	pl
     f4e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f50:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f52:	2201      	movs	r2, #1
     f54:	4b57      	ldr	r3, [pc, #348]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f56:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f58:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f5e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f62:	bf54      	ite	pl
     f64:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f66:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f68:	2201      	movs	r2, #1
     f6a:	4b52      	ldr	r3, [pc, #328]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f6c:	06c5      	lsls	r5, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f6e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f70:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f72:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f74:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f78:	bf54      	ite	pl
     f7a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f7c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f7e:	2201      	movs	r2, #1
     f80:	4b4c      	ldr	r3, [pc, #304]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f82:	0704      	lsls	r4, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f84:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f86:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f88:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f8a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f8e:	bf54      	ite	pl
     f90:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f92:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f94:	2201      	movs	r2, #1
     f96:	4b47      	ldr	r3, [pc, #284]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f98:	0745      	lsls	r5, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f9a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f9c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f9e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fa0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fa4:	bf54      	ite	pl
     fa6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fa8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     faa:	2201      	movs	r2, #1
     fac:	4b41      	ldr	r3, [pc, #260]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fae:	0784      	lsls	r4, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fb0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fb6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fba:	bf54      	ite	pl
     fbc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fbe:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fc0:	2201      	movs	r2, #1
     fc2:	4b3c      	ldr	r3, [pc, #240]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fc4:	07c0      	lsls	r0, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fc6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fca:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fcc:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fd0:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fd4:	bf4c      	ite	mi
     fd6:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fd8:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fda:	2201      	movs	r2, #1
     CM3DS_MPS2_i2c_send_byte(reg_addr);
     CM3DS_MPS2_i2c_receive_ack();

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     fdc:	2403      	movs	r4, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fde:	4b35      	ldr	r3, [pc, #212]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
     fe0:	4311      	orrs	r1, r2
     fe2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe4:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fe6:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fe8:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fea:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fec:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     fee:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ff2:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     ff4:	601c      	str	r4, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ff6:	6058      	str	r0, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff8:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     ffa:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ffc:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1000:	bf0c      	ite	eq
    1002:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1004:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1006:	4b2b      	ldr	r3, [pc, #172]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1008:	064d      	lsls	r5, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    100a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    100c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    100e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1010:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1014:	bf54      	ite	pl
    1016:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1018:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    101a:	2201      	movs	r2, #1
    101c:	4b25      	ldr	r3, [pc, #148]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    101e:	068c      	lsls	r4, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1020:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1022:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1024:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1026:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    102a:	bf54      	ite	pl
    102c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    102e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1030:	2201      	movs	r2, #1
    1032:	4b20      	ldr	r3, [pc, #128]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1034:	06c8      	lsls	r0, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1036:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1038:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    103a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    103c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1040:	bf54      	ite	pl
    1042:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1044:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1046:	2201      	movs	r2, #1
    1048:	4b1a      	ldr	r3, [pc, #104]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    104a:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    104c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    104e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1050:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1052:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1056:	bf54      	ite	pl
    1058:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    105a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    105c:	2201      	movs	r2, #1
    105e:	4b15      	ldr	r3, [pc, #84]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1060:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1062:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1064:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1066:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1068:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    106c:	bf54      	ite	pl
    106e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1070:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1072:	2201      	movs	r2, #1
    1074:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1076:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1078:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    107a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    107c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    107e:	f04f 0202 	mov.w	r2, #2
    1082:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1086:	bf54      	ite	pl
    1088:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    108a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    108c:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    108e:	2003      	movs	r0, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1090:	4b08      	ldr	r3, [pc, #32]	; (10b4 <CM3DS_MPS2_i2c_read+0x250>)
    1092:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1094:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1096:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1098:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    109a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    109c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    109e:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10a0:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a2:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10a4:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    10a6:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a8:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10aa:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10ac:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ae:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10b0:	6018      	str	r0, [r3, #0]
    10b2:	e001      	b.n	10b8 <CM3DS_MPS2_i2c_read+0x254>
    10b4:	40023000 	.word	0x40023000
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10b8:	6819      	ldr	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ba:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10bc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10be:	6018      	str	r0, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10c0:	681b      	ldr	r3, [r3, #0]
     data         = 0;
    10c2:	f011 0f02 	tst.w	r1, #2
    10c6:	bf14      	ite	ne
    10c8:	2080      	movne	r0, #128	; 0x80
    10ca:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10cc:	079b      	lsls	r3, r3, #30
    10ce:	d500      	bpl.n	10d2 <CM3DS_MPS2_i2c_read+0x26e>
             data += (1 << (7 - loop));
    10d0:	3040      	adds	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d2:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10d4:	2103      	movs	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d6:	4b27      	ldr	r3, [pc, #156]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
    10d8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10da:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10dc:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10de:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e0:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10e2:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10e4:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e8:	4b22      	ldr	r3, [pc, #136]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10ea:	bf48      	it	mi
    10ec:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10f0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10f2:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10f4:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10f6:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10f8:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10fa:	f04f 0201 	mov.w	r2, #1
    10fe:	4b1d      	ldr	r3, [pc, #116]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1100:	bf48      	it	mi
    1102:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1104:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1106:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1108:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    110a:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    110c:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1112:	4b18      	ldr	r3, [pc, #96]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1114:	bf48      	it	mi
    1116:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1118:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    111a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    111c:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    111e:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1120:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1122:	681b      	ldr	r3, [r3, #0]
    1124:	079d      	lsls	r5, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1126:	4b13      	ldr	r3, [pc, #76]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1128:	bf48      	it	mi
    112a:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    112c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    112e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1130:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1132:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1134:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	079c      	lsls	r4, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    113a:	4b0e      	ldr	r3, [pc, #56]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    113c:	bf48      	it	mi
    113e:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1140:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1142:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1144:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	0799      	lsls	r1, r3, #30
    114a:	d500      	bpl.n	114e <CM3DS_MPS2_i2c_read+0x2ea>
             data += (1 << (7 - loop));
    114c:	4410      	add	r0, r2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    114e:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);

     return rxdata;
 }
    1150:	bc30      	pop	{r4, r5}
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1152:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1154:	4b07      	ldr	r3, [pc, #28]	; (1174 <CM3DS_MPS2_i2c_read+0x310>)
     return rxdata;
    1156:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1158:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    115a:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    115c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    115e:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1160:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1162:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1164:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1166:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1168:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    116a:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    116c:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    116e:	6019      	str	r1, [r3, #0]
 }
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	40023000 	.word	0x40023000

00001178 <CM3DS_MPS2_i2c_write>:

 // Write data stream and write one byte
 void CM3DS_MPS2_i2c_write(unsigned char reg_addr, unsigned char data_byte, unsigned char sadr)
 {
    1178:	b470      	push	{r4, r5, r6}
     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    117a:	2603      	movs	r6, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    117c:	2501      	movs	r5, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    117e:	2402      	movs	r4, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    1180:	4b90      	ldr	r3, [pc, #576]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
    1182:	601e      	str	r6, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1184:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1186:	605d      	str	r5, [r3, #4]
         if (c & (1 << (7 - loop)))
    1188:	09d5      	lsrs	r5, r2, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    118a:	bf0c      	ite	eq
    118c:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    118e:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1190:	2401      	movs	r4, #1
    1192:	4b8c      	ldr	r3, [pc, #560]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1194:	0655      	lsls	r5, r2, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1196:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1198:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    119a:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    119c:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11a0:	bf54      	ite	pl
    11a2:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11a4:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11a6:	2401      	movs	r4, #1
    11a8:	4b86      	ldr	r3, [pc, #536]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11aa:	0696      	lsls	r6, r2, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ac:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11ae:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11b0:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11b2:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11b6:	bf54      	ite	pl
    11b8:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ba:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11bc:	2401      	movs	r4, #1
    11be:	4b81      	ldr	r3, [pc, #516]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11c0:	06d5      	lsls	r5, r2, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11c2:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11c4:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11c6:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11c8:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11cc:	bf54      	ite	pl
    11ce:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11d0:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11d2:	2401      	movs	r4, #1
    11d4:	4b7b      	ldr	r3, [pc, #492]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11d6:	0716      	lsls	r6, r2, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11d8:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11da:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11dc:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11de:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11e2:	bf54      	ite	pl
    11e4:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11e6:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11e8:	2401      	movs	r4, #1
    11ea:	4b76      	ldr	r3, [pc, #472]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11ec:	0755      	lsls	r5, r2, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ee:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11f0:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11f2:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11f4:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11f8:	bf54      	ite	pl
    11fa:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11fc:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11fe:	2401      	movs	r4, #1
    1200:	4b70      	ldr	r3, [pc, #448]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1202:	0796      	lsls	r6, r2, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1204:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1206:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1208:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    120a:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    120e:	bf54      	ite	pl
    1210:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1212:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1214:	2401      	movs	r4, #1
         if (c & (1 << (7 - loop)))
    1216:	f012 0f01 	tst.w	r2, #1
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    121a:	f04f 0202 	mov.w	r2, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    121e:	4b69      	ldr	r3, [pc, #420]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
    1220:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1222:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1224:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1226:	bf14      	ite	ne
    1228:	601a      	strne	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    122a:	605a      	streq	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    122c:	2402      	movs	r4, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    122e:	2201      	movs	r2, #1
    1230:	4b64      	ldr	r3, [pc, #400]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
    1232:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1234:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1236:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1238:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    123a:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    123c:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    123e:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1240:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1242:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1244:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    1246:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1248:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    124c:	bf0c      	ite	eq
    124e:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1250:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1252:	4b5c      	ldr	r3, [pc, #368]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1254:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1256:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1258:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    125a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    125c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1260:	bf54      	ite	pl
    1262:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1264:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1266:	2201      	movs	r2, #1
    1268:	4b56      	ldr	r3, [pc, #344]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    126a:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    126c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    126e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1270:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1272:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1276:	bf54      	ite	pl
    1278:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    127a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    127c:	2201      	movs	r2, #1
    127e:	4b51      	ldr	r3, [pc, #324]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1280:	06c6      	lsls	r6, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1282:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1284:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1286:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1288:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    128c:	bf54      	ite	pl
    128e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1290:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1292:	2201      	movs	r2, #1
    1294:	4b4b      	ldr	r3, [pc, #300]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1296:	0705      	lsls	r5, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1298:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    129a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    129c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    129e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12a2:	bf54      	ite	pl
    12a4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12a6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12a8:	2201      	movs	r2, #1
    12aa:	4b46      	ldr	r3, [pc, #280]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12ac:	0744      	lsls	r4, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ae:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12b0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12b2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12b4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12b8:	bf54      	ite	pl
    12ba:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12bc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12be:	2201      	movs	r2, #1
    12c0:	4b40      	ldr	r3, [pc, #256]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12c2:	0786      	lsls	r6, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12c4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12c6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12c8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12ca:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12ce:	bf54      	ite	pl
    12d0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12d2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12d4:	2201      	movs	r2, #1
    12d6:	4b3b      	ldr	r3, [pc, #236]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12d8:	07c5      	lsls	r5, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12da:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12dc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12de:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12e0:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12e4:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12e8:	bf4c      	ite	mi
    12ea:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12ec:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ee:	2201      	movs	r2, #1
    12f0:	4b34      	ldr	r3, [pc, #208]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
    12f2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12f4:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12f6:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12f8:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12fa:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12fc:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    12fe:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1300:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1302:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1304:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    1306:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1308:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    130c:	bf0c      	ite	eq
    130e:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1310:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1312:	4b2c      	ldr	r3, [pc, #176]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1314:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1316:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1318:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    131a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    131c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1320:	bf54      	ite	pl
    1322:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1324:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1326:	2201      	movs	r2, #1
    1328:	4b26      	ldr	r3, [pc, #152]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    132a:	0688      	lsls	r0, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    132c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    132e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1330:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1332:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1336:	bf54      	ite	pl
    1338:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    133a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    133c:	2201      	movs	r2, #1
    133e:	4b21      	ldr	r3, [pc, #132]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1340:	06ce      	lsls	r6, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1342:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1344:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1346:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1348:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    134c:	bf54      	ite	pl
    134e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1350:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1352:	2201      	movs	r2, #1
    1354:	4b1b      	ldr	r3, [pc, #108]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1356:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1358:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    135a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    135c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    135e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1362:	bf54      	ite	pl
    1364:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1366:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1368:	2201      	movs	r2, #1
    136a:	4b16      	ldr	r3, [pc, #88]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    136c:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    136e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1370:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1372:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1374:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1378:	bf54      	ite	pl
    137a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    137c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    137e:	2201      	movs	r2, #1
    1380:	4b10      	ldr	r3, [pc, #64]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1382:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1384:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1386:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1388:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    138a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    138e:	bf54      	ite	pl
    1390:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1392:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1394:	2201      	movs	r2, #1
    1396:	4b0b      	ldr	r3, [pc, #44]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1398:	07c9      	lsls	r1, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    139a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    139c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    139e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13a0:	f04f 0202 	mov.w	r2, #2
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
 }
    13a4:	bc70      	pop	{r4, r5, r6}
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13a6:	bf4c      	ite	mi
    13a8:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13aa:	605a      	strpl	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13ac:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13ae:	2201      	movs	r2, #1
    13b0:	4b04      	ldr	r3, [pc, #16]	; (13c4 <CM3DS_MPS2_i2c_write+0x24c>)
    13b2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13b4:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13b6:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13b8:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13ba:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13bc:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13be:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13c0:	6019      	str	r1, [r3, #0]
 }
    13c2:	4770      	bx	lr
    13c4:	40023000 	.word	0x40023000

000013c8 <SystemCoreClockUpdate>:
    13c8:	4b01      	ldr	r3, [pc, #4]	; (13d0 <SystemCoreClockUpdate+0x8>)
    13ca:	4a02      	ldr	r2, [pc, #8]	; (13d4 <SystemCoreClockUpdate+0xc>)
    13cc:	601a      	str	r2, [r3, #0]
    13ce:	4770      	bx	lr
    13d0:	20000000 	.word	0x20000000
    13d4:	017d7840 	.word	0x017d7840

000013d8 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    13d8:	4b01      	ldr	r3, [pc, #4]	; (13e0 <SystemInit+0x8>)
    13da:	4a02      	ldr	r2, [pc, #8]	; (13e4 <SystemInit+0xc>)
    13dc:	601a      	str	r2, [r3, #0]

}
    13de:	4770      	bx	lr
    13e0:	20000000 	.word	0x20000000
    13e4:	017d7840 	.word	0x017d7840

000013e8 <exit>:
    13e8:	b508      	push	{r3, lr}
    13ea:	4b07      	ldr	r3, [pc, #28]	; (1408 <exit+0x20>)
    13ec:	4604      	mov	r4, r0
    13ee:	b113      	cbz	r3, 13f6 <exit+0xe>
    13f0:	2100      	movs	r1, #0
    13f2:	f3af 8000 	nop.w
    13f6:	4b05      	ldr	r3, [pc, #20]	; (140c <exit+0x24>)
    13f8:	6818      	ldr	r0, [r3, #0]
    13fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    13fc:	b103      	cbz	r3, 1400 <exit+0x18>
    13fe:	4798      	blx	r3
    1400:	4620      	mov	r0, r4
    1402:	f000 ff9d 	bl	2340 <_exit>
    1406:	bf00      	nop
    1408:	00000000 	.word	0x00000000
    140c:	0000282c 	.word	0x0000282c

00001410 <memset>:
    1410:	4603      	mov	r3, r0
    1412:	4402      	add	r2, r0
    1414:	4293      	cmp	r3, r2
    1416:	d100      	bne.n	141a <memset+0xa>
    1418:	4770      	bx	lr
    141a:	f803 1b01 	strb.w	r1, [r3], #1
    141e:	e7f9      	b.n	1414 <memset+0x4>

00001420 <iprintf>:
    1420:	b40f      	push	{r0, r1, r2, r3}
    1422:	4b0a      	ldr	r3, [pc, #40]	; (144c <iprintf+0x2c>)
    1424:	b513      	push	{r0, r1, r4, lr}
    1426:	681c      	ldr	r4, [r3, #0]
    1428:	b124      	cbz	r4, 1434 <iprintf+0x14>
    142a:	69a3      	ldr	r3, [r4, #24]
    142c:	b913      	cbnz	r3, 1434 <iprintf+0x14>
    142e:	4620      	mov	r0, r4
    1430:	f000 fa2c 	bl	188c <__sinit>
    1434:	ab05      	add	r3, sp, #20
    1436:	9a04      	ldr	r2, [sp, #16]
    1438:	68a1      	ldr	r1, [r4, #8]
    143a:	4620      	mov	r0, r4
    143c:	9301      	str	r3, [sp, #4]
    143e:	f000 fbe1 	bl	1c04 <_vfiprintf_r>
    1442:	b002      	add	sp, #8
    1444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1448:	b004      	add	sp, #16
    144a:	4770      	bx	lr
    144c:	20000004 	.word	0x20000004

00001450 <_puts_r>:
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	460e      	mov	r6, r1
    1454:	4605      	mov	r5, r0
    1456:	b118      	cbz	r0, 1460 <_puts_r+0x10>
    1458:	6983      	ldr	r3, [r0, #24]
    145a:	b90b      	cbnz	r3, 1460 <_puts_r+0x10>
    145c:	f000 fa16 	bl	188c <__sinit>
    1460:	69ab      	ldr	r3, [r5, #24]
    1462:	68ac      	ldr	r4, [r5, #8]
    1464:	b913      	cbnz	r3, 146c <_puts_r+0x1c>
    1466:	4628      	mov	r0, r5
    1468:	f000 fa10 	bl	188c <__sinit>
    146c:	4b23      	ldr	r3, [pc, #140]	; (14fc <_puts_r+0xac>)
    146e:	429c      	cmp	r4, r3
    1470:	d117      	bne.n	14a2 <_puts_r+0x52>
    1472:	686c      	ldr	r4, [r5, #4]
    1474:	89a3      	ldrh	r3, [r4, #12]
    1476:	071b      	lsls	r3, r3, #28
    1478:	d51d      	bpl.n	14b6 <_puts_r+0x66>
    147a:	6923      	ldr	r3, [r4, #16]
    147c:	b1db      	cbz	r3, 14b6 <_puts_r+0x66>
    147e:	3e01      	subs	r6, #1
    1480:	68a3      	ldr	r3, [r4, #8]
    1482:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1486:	3b01      	subs	r3, #1
    1488:	60a3      	str	r3, [r4, #8]
    148a:	b9e9      	cbnz	r1, 14c8 <_puts_r+0x78>
    148c:	2b00      	cmp	r3, #0
    148e:	da2e      	bge.n	14ee <_puts_r+0x9e>
    1490:	4622      	mov	r2, r4
    1492:	210a      	movs	r1, #10
    1494:	4628      	mov	r0, r5
    1496:	f000 f849 	bl	152c <__swbuf_r>
    149a:	3001      	adds	r0, #1
    149c:	d011      	beq.n	14c2 <_puts_r+0x72>
    149e:	200a      	movs	r0, #10
    14a0:	e011      	b.n	14c6 <_puts_r+0x76>
    14a2:	4b17      	ldr	r3, [pc, #92]	; (1500 <_puts_r+0xb0>)
    14a4:	429c      	cmp	r4, r3
    14a6:	d101      	bne.n	14ac <_puts_r+0x5c>
    14a8:	68ac      	ldr	r4, [r5, #8]
    14aa:	e7e3      	b.n	1474 <_puts_r+0x24>
    14ac:	4b15      	ldr	r3, [pc, #84]	; (1504 <_puts_r+0xb4>)
    14ae:	429c      	cmp	r4, r3
    14b0:	bf08      	it	eq
    14b2:	68ec      	ldreq	r4, [r5, #12]
    14b4:	e7de      	b.n	1474 <_puts_r+0x24>
    14b6:	4621      	mov	r1, r4
    14b8:	4628      	mov	r0, r5
    14ba:	f000 f889 	bl	15d0 <__swsetup_r>
    14be:	2800      	cmp	r0, #0
    14c0:	d0dd      	beq.n	147e <_puts_r+0x2e>
    14c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14c6:	bd70      	pop	{r4, r5, r6, pc}
    14c8:	2b00      	cmp	r3, #0
    14ca:	da04      	bge.n	14d6 <_puts_r+0x86>
    14cc:	69a2      	ldr	r2, [r4, #24]
    14ce:	429a      	cmp	r2, r3
    14d0:	dc06      	bgt.n	14e0 <_puts_r+0x90>
    14d2:	290a      	cmp	r1, #10
    14d4:	d004      	beq.n	14e0 <_puts_r+0x90>
    14d6:	6823      	ldr	r3, [r4, #0]
    14d8:	1c5a      	adds	r2, r3, #1
    14da:	6022      	str	r2, [r4, #0]
    14dc:	7019      	strb	r1, [r3, #0]
    14de:	e7cf      	b.n	1480 <_puts_r+0x30>
    14e0:	4622      	mov	r2, r4
    14e2:	4628      	mov	r0, r5
    14e4:	f000 f822 	bl	152c <__swbuf_r>
    14e8:	3001      	adds	r0, #1
    14ea:	d1c9      	bne.n	1480 <_puts_r+0x30>
    14ec:	e7e9      	b.n	14c2 <_puts_r+0x72>
    14ee:	200a      	movs	r0, #10
    14f0:	6823      	ldr	r3, [r4, #0]
    14f2:	1c5a      	adds	r2, r3, #1
    14f4:	6022      	str	r2, [r4, #0]
    14f6:	7018      	strb	r0, [r3, #0]
    14f8:	e7e5      	b.n	14c6 <_puts_r+0x76>
    14fa:	bf00      	nop
    14fc:	00002850 	.word	0x00002850
    1500:	00002870 	.word	0x00002870
    1504:	00002830 	.word	0x00002830

00001508 <puts>:
    1508:	4b02      	ldr	r3, [pc, #8]	; (1514 <puts+0xc>)
    150a:	4601      	mov	r1, r0
    150c:	6818      	ldr	r0, [r3, #0]
    150e:	f7ff bf9f 	b.w	1450 <_puts_r>
    1512:	bf00      	nop
    1514:	20000004 	.word	0x20000004

00001518 <strcmp>:
    1518:	f810 2b01 	ldrb.w	r2, [r0], #1
    151c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1520:	2a01      	cmp	r2, #1
    1522:	bf28      	it	cs
    1524:	429a      	cmpcs	r2, r3
    1526:	d0f7      	beq.n	1518 <strcmp>
    1528:	1ad0      	subs	r0, r2, r3
    152a:	4770      	bx	lr

0000152c <__swbuf_r>:
    152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    152e:	460e      	mov	r6, r1
    1530:	4614      	mov	r4, r2
    1532:	4605      	mov	r5, r0
    1534:	b118      	cbz	r0, 153e <__swbuf_r+0x12>
    1536:	6983      	ldr	r3, [r0, #24]
    1538:	b90b      	cbnz	r3, 153e <__swbuf_r+0x12>
    153a:	f000 f9a7 	bl	188c <__sinit>
    153e:	4b21      	ldr	r3, [pc, #132]	; (15c4 <__swbuf_r+0x98>)
    1540:	429c      	cmp	r4, r3
    1542:	d12a      	bne.n	159a <__swbuf_r+0x6e>
    1544:	686c      	ldr	r4, [r5, #4]
    1546:	69a3      	ldr	r3, [r4, #24]
    1548:	60a3      	str	r3, [r4, #8]
    154a:	89a3      	ldrh	r3, [r4, #12]
    154c:	071a      	lsls	r2, r3, #28
    154e:	d52e      	bpl.n	15ae <__swbuf_r+0x82>
    1550:	6923      	ldr	r3, [r4, #16]
    1552:	b363      	cbz	r3, 15ae <__swbuf_r+0x82>
    1554:	6923      	ldr	r3, [r4, #16]
    1556:	6820      	ldr	r0, [r4, #0]
    1558:	b2f6      	uxtb	r6, r6
    155a:	1ac0      	subs	r0, r0, r3
    155c:	6963      	ldr	r3, [r4, #20]
    155e:	4637      	mov	r7, r6
    1560:	4283      	cmp	r3, r0
    1562:	dc04      	bgt.n	156e <__swbuf_r+0x42>
    1564:	4621      	mov	r1, r4
    1566:	4628      	mov	r0, r5
    1568:	f000 f926 	bl	17b8 <_fflush_r>
    156c:	bb28      	cbnz	r0, 15ba <__swbuf_r+0x8e>
    156e:	68a3      	ldr	r3, [r4, #8]
    1570:	3001      	adds	r0, #1
    1572:	3b01      	subs	r3, #1
    1574:	60a3      	str	r3, [r4, #8]
    1576:	6823      	ldr	r3, [r4, #0]
    1578:	1c5a      	adds	r2, r3, #1
    157a:	6022      	str	r2, [r4, #0]
    157c:	701e      	strb	r6, [r3, #0]
    157e:	6963      	ldr	r3, [r4, #20]
    1580:	4283      	cmp	r3, r0
    1582:	d004      	beq.n	158e <__swbuf_r+0x62>
    1584:	89a3      	ldrh	r3, [r4, #12]
    1586:	07db      	lsls	r3, r3, #31
    1588:	d519      	bpl.n	15be <__swbuf_r+0x92>
    158a:	2e0a      	cmp	r6, #10
    158c:	d117      	bne.n	15be <__swbuf_r+0x92>
    158e:	4621      	mov	r1, r4
    1590:	4628      	mov	r0, r5
    1592:	f000 f911 	bl	17b8 <_fflush_r>
    1596:	b190      	cbz	r0, 15be <__swbuf_r+0x92>
    1598:	e00f      	b.n	15ba <__swbuf_r+0x8e>
    159a:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <__swbuf_r+0x9c>)
    159c:	429c      	cmp	r4, r3
    159e:	d101      	bne.n	15a4 <__swbuf_r+0x78>
    15a0:	68ac      	ldr	r4, [r5, #8]
    15a2:	e7d0      	b.n	1546 <__swbuf_r+0x1a>
    15a4:	4b09      	ldr	r3, [pc, #36]	; (15cc <__swbuf_r+0xa0>)
    15a6:	429c      	cmp	r4, r3
    15a8:	bf08      	it	eq
    15aa:	68ec      	ldreq	r4, [r5, #12]
    15ac:	e7cb      	b.n	1546 <__swbuf_r+0x1a>
    15ae:	4621      	mov	r1, r4
    15b0:	4628      	mov	r0, r5
    15b2:	f000 f80d 	bl	15d0 <__swsetup_r>
    15b6:	2800      	cmp	r0, #0
    15b8:	d0cc      	beq.n	1554 <__swbuf_r+0x28>
    15ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    15be:	4638      	mov	r0, r7
    15c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c2:	bf00      	nop
    15c4:	00002850 	.word	0x00002850
    15c8:	00002870 	.word	0x00002870
    15cc:	00002830 	.word	0x00002830

000015d0 <__swsetup_r>:
    15d0:	4b32      	ldr	r3, [pc, #200]	; (169c <__swsetup_r+0xcc>)
    15d2:	b570      	push	{r4, r5, r6, lr}
    15d4:	681d      	ldr	r5, [r3, #0]
    15d6:	4606      	mov	r6, r0
    15d8:	460c      	mov	r4, r1
    15da:	b125      	cbz	r5, 15e6 <__swsetup_r+0x16>
    15dc:	69ab      	ldr	r3, [r5, #24]
    15de:	b913      	cbnz	r3, 15e6 <__swsetup_r+0x16>
    15e0:	4628      	mov	r0, r5
    15e2:	f000 f953 	bl	188c <__sinit>
    15e6:	4b2e      	ldr	r3, [pc, #184]	; (16a0 <__swsetup_r+0xd0>)
    15e8:	429c      	cmp	r4, r3
    15ea:	d10f      	bne.n	160c <__swsetup_r+0x3c>
    15ec:	686c      	ldr	r4, [r5, #4]
    15ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    15f2:	b29a      	uxth	r2, r3
    15f4:	0715      	lsls	r5, r2, #28
    15f6:	d42c      	bmi.n	1652 <__swsetup_r+0x82>
    15f8:	06d0      	lsls	r0, r2, #27
    15fa:	d411      	bmi.n	1620 <__swsetup_r+0x50>
    15fc:	2209      	movs	r2, #9
    15fe:	6032      	str	r2, [r6, #0]
    1600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1604:	81a3      	strh	r3, [r4, #12]
    1606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    160a:	e03e      	b.n	168a <__swsetup_r+0xba>
    160c:	4b25      	ldr	r3, [pc, #148]	; (16a4 <__swsetup_r+0xd4>)
    160e:	429c      	cmp	r4, r3
    1610:	d101      	bne.n	1616 <__swsetup_r+0x46>
    1612:	68ac      	ldr	r4, [r5, #8]
    1614:	e7eb      	b.n	15ee <__swsetup_r+0x1e>
    1616:	4b24      	ldr	r3, [pc, #144]	; (16a8 <__swsetup_r+0xd8>)
    1618:	429c      	cmp	r4, r3
    161a:	bf08      	it	eq
    161c:	68ec      	ldreq	r4, [r5, #12]
    161e:	e7e6      	b.n	15ee <__swsetup_r+0x1e>
    1620:	0751      	lsls	r1, r2, #29
    1622:	d512      	bpl.n	164a <__swsetup_r+0x7a>
    1624:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1626:	b141      	cbz	r1, 163a <__swsetup_r+0x6a>
    1628:	f104 0344 	add.w	r3, r4, #68	; 0x44
    162c:	4299      	cmp	r1, r3
    162e:	d002      	beq.n	1636 <__swsetup_r+0x66>
    1630:	4630      	mov	r0, r6
    1632:	f000 fa19 	bl	1a68 <_free_r>
    1636:	2300      	movs	r3, #0
    1638:	6363      	str	r3, [r4, #52]	; 0x34
    163a:	89a3      	ldrh	r3, [r4, #12]
    163c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1640:	81a3      	strh	r3, [r4, #12]
    1642:	2300      	movs	r3, #0
    1644:	6063      	str	r3, [r4, #4]
    1646:	6923      	ldr	r3, [r4, #16]
    1648:	6023      	str	r3, [r4, #0]
    164a:	89a3      	ldrh	r3, [r4, #12]
    164c:	f043 0308 	orr.w	r3, r3, #8
    1650:	81a3      	strh	r3, [r4, #12]
    1652:	6923      	ldr	r3, [r4, #16]
    1654:	b94b      	cbnz	r3, 166a <__swsetup_r+0x9a>
    1656:	89a3      	ldrh	r3, [r4, #12]
    1658:	f403 7320 	and.w	r3, r3, #640	; 0x280
    165c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1660:	d003      	beq.n	166a <__swsetup_r+0x9a>
    1662:	4621      	mov	r1, r4
    1664:	4630      	mov	r0, r6
    1666:	f000 f9bf 	bl	19e8 <__smakebuf_r>
    166a:	89a2      	ldrh	r2, [r4, #12]
    166c:	f012 0301 	ands.w	r3, r2, #1
    1670:	d00c      	beq.n	168c <__swsetup_r+0xbc>
    1672:	2300      	movs	r3, #0
    1674:	60a3      	str	r3, [r4, #8]
    1676:	6963      	ldr	r3, [r4, #20]
    1678:	425b      	negs	r3, r3
    167a:	61a3      	str	r3, [r4, #24]
    167c:	6923      	ldr	r3, [r4, #16]
    167e:	b953      	cbnz	r3, 1696 <__swsetup_r+0xc6>
    1680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1688:	d1ba      	bne.n	1600 <__swsetup_r+0x30>
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	0792      	lsls	r2, r2, #30
    168e:	bf58      	it	pl
    1690:	6963      	ldrpl	r3, [r4, #20]
    1692:	60a3      	str	r3, [r4, #8]
    1694:	e7f2      	b.n	167c <__swsetup_r+0xac>
    1696:	2000      	movs	r0, #0
    1698:	e7f7      	b.n	168a <__swsetup_r+0xba>
    169a:	bf00      	nop
    169c:	20000004 	.word	0x20000004
    16a0:	00002850 	.word	0x00002850
    16a4:	00002870 	.word	0x00002870
    16a8:	00002830 	.word	0x00002830

000016ac <__sflush_r>:
    16ac:	898a      	ldrh	r2, [r1, #12]
    16ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16b2:	4605      	mov	r5, r0
    16b4:	0710      	lsls	r0, r2, #28
    16b6:	460c      	mov	r4, r1
    16b8:	d458      	bmi.n	176c <__sflush_r+0xc0>
    16ba:	684b      	ldr	r3, [r1, #4]
    16bc:	2b00      	cmp	r3, #0
    16be:	dc05      	bgt.n	16cc <__sflush_r+0x20>
    16c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    16c2:	2b00      	cmp	r3, #0
    16c4:	dc02      	bgt.n	16cc <__sflush_r+0x20>
    16c6:	2000      	movs	r0, #0
    16c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    16ce:	2e00      	cmp	r6, #0
    16d0:	d0f9      	beq.n	16c6 <__sflush_r+0x1a>
    16d2:	2300      	movs	r3, #0
    16d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    16d8:	682f      	ldr	r7, [r5, #0]
    16da:	6a21      	ldr	r1, [r4, #32]
    16dc:	602b      	str	r3, [r5, #0]
    16de:	d032      	beq.n	1746 <__sflush_r+0x9a>
    16e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    16e2:	89a3      	ldrh	r3, [r4, #12]
    16e4:	075a      	lsls	r2, r3, #29
    16e6:	d505      	bpl.n	16f4 <__sflush_r+0x48>
    16e8:	6863      	ldr	r3, [r4, #4]
    16ea:	1ac0      	subs	r0, r0, r3
    16ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    16ee:	b10b      	cbz	r3, 16f4 <__sflush_r+0x48>
    16f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	2300      	movs	r3, #0
    16f6:	4602      	mov	r2, r0
    16f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    16fa:	6a21      	ldr	r1, [r4, #32]
    16fc:	4628      	mov	r0, r5
    16fe:	47b0      	blx	r6
    1700:	1c43      	adds	r3, r0, #1
    1702:	89a3      	ldrh	r3, [r4, #12]
    1704:	d106      	bne.n	1714 <__sflush_r+0x68>
    1706:	6829      	ldr	r1, [r5, #0]
    1708:	291d      	cmp	r1, #29
    170a:	d848      	bhi.n	179e <__sflush_r+0xf2>
    170c:	4a29      	ldr	r2, [pc, #164]	; (17b4 <__sflush_r+0x108>)
    170e:	40ca      	lsrs	r2, r1
    1710:	07d6      	lsls	r6, r2, #31
    1712:	d544      	bpl.n	179e <__sflush_r+0xf2>
    1714:	2200      	movs	r2, #0
    1716:	6062      	str	r2, [r4, #4]
    1718:	6922      	ldr	r2, [r4, #16]
    171a:	04d9      	lsls	r1, r3, #19
    171c:	6022      	str	r2, [r4, #0]
    171e:	d504      	bpl.n	172a <__sflush_r+0x7e>
    1720:	1c42      	adds	r2, r0, #1
    1722:	d101      	bne.n	1728 <__sflush_r+0x7c>
    1724:	682b      	ldr	r3, [r5, #0]
    1726:	b903      	cbnz	r3, 172a <__sflush_r+0x7e>
    1728:	6560      	str	r0, [r4, #84]	; 0x54
    172a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    172c:	602f      	str	r7, [r5, #0]
    172e:	2900      	cmp	r1, #0
    1730:	d0c9      	beq.n	16c6 <__sflush_r+0x1a>
    1732:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1736:	4299      	cmp	r1, r3
    1738:	d002      	beq.n	1740 <__sflush_r+0x94>
    173a:	4628      	mov	r0, r5
    173c:	f000 f994 	bl	1a68 <_free_r>
    1740:	2000      	movs	r0, #0
    1742:	6360      	str	r0, [r4, #52]	; 0x34
    1744:	e7c0      	b.n	16c8 <__sflush_r+0x1c>
    1746:	2301      	movs	r3, #1
    1748:	4628      	mov	r0, r5
    174a:	47b0      	blx	r6
    174c:	1c41      	adds	r1, r0, #1
    174e:	d1c8      	bne.n	16e2 <__sflush_r+0x36>
    1750:	682b      	ldr	r3, [r5, #0]
    1752:	2b00      	cmp	r3, #0
    1754:	d0c5      	beq.n	16e2 <__sflush_r+0x36>
    1756:	2b1d      	cmp	r3, #29
    1758:	d001      	beq.n	175e <__sflush_r+0xb2>
    175a:	2b16      	cmp	r3, #22
    175c:	d101      	bne.n	1762 <__sflush_r+0xb6>
    175e:	602f      	str	r7, [r5, #0]
    1760:	e7b1      	b.n	16c6 <__sflush_r+0x1a>
    1762:	89a3      	ldrh	r3, [r4, #12]
    1764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1768:	81a3      	strh	r3, [r4, #12]
    176a:	e7ad      	b.n	16c8 <__sflush_r+0x1c>
    176c:	690f      	ldr	r7, [r1, #16]
    176e:	2f00      	cmp	r7, #0
    1770:	d0a9      	beq.n	16c6 <__sflush_r+0x1a>
    1772:	0793      	lsls	r3, r2, #30
    1774:	bf18      	it	ne
    1776:	2300      	movne	r3, #0
    1778:	680e      	ldr	r6, [r1, #0]
    177a:	bf08      	it	eq
    177c:	694b      	ldreq	r3, [r1, #20]
    177e:	eba6 0807 	sub.w	r8, r6, r7
    1782:	600f      	str	r7, [r1, #0]
    1784:	608b      	str	r3, [r1, #8]
    1786:	f1b8 0f00 	cmp.w	r8, #0
    178a:	dd9c      	ble.n	16c6 <__sflush_r+0x1a>
    178c:	4643      	mov	r3, r8
    178e:	463a      	mov	r2, r7
    1790:	6a21      	ldr	r1, [r4, #32]
    1792:	4628      	mov	r0, r5
    1794:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1796:	47b0      	blx	r6
    1798:	2800      	cmp	r0, #0
    179a:	dc06      	bgt.n	17aa <__sflush_r+0xfe>
    179c:	89a3      	ldrh	r3, [r4, #12]
    179e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    17a2:	81a3      	strh	r3, [r4, #12]
    17a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    17a8:	e78e      	b.n	16c8 <__sflush_r+0x1c>
    17aa:	4407      	add	r7, r0
    17ac:	eba8 0800 	sub.w	r8, r8, r0
    17b0:	e7e9      	b.n	1786 <__sflush_r+0xda>
    17b2:	bf00      	nop
    17b4:	20400001 	.word	0x20400001

000017b8 <_fflush_r>:
    17b8:	b538      	push	{r3, r4, r5, lr}
    17ba:	690b      	ldr	r3, [r1, #16]
    17bc:	4605      	mov	r5, r0
    17be:	460c      	mov	r4, r1
    17c0:	b1db      	cbz	r3, 17fa <_fflush_r+0x42>
    17c2:	b118      	cbz	r0, 17cc <_fflush_r+0x14>
    17c4:	6983      	ldr	r3, [r0, #24]
    17c6:	b90b      	cbnz	r3, 17cc <_fflush_r+0x14>
    17c8:	f000 f860 	bl	188c <__sinit>
    17cc:	4b0c      	ldr	r3, [pc, #48]	; (1800 <_fflush_r+0x48>)
    17ce:	429c      	cmp	r4, r3
    17d0:	d109      	bne.n	17e6 <_fflush_r+0x2e>
    17d2:	686c      	ldr	r4, [r5, #4]
    17d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    17d8:	b17b      	cbz	r3, 17fa <_fflush_r+0x42>
    17da:	4621      	mov	r1, r4
    17dc:	4628      	mov	r0, r5
    17de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    17e2:	f7ff bf63 	b.w	16ac <__sflush_r>
    17e6:	4b07      	ldr	r3, [pc, #28]	; (1804 <_fflush_r+0x4c>)
    17e8:	429c      	cmp	r4, r3
    17ea:	d101      	bne.n	17f0 <_fflush_r+0x38>
    17ec:	68ac      	ldr	r4, [r5, #8]
    17ee:	e7f1      	b.n	17d4 <_fflush_r+0x1c>
    17f0:	4b05      	ldr	r3, [pc, #20]	; (1808 <_fflush_r+0x50>)
    17f2:	429c      	cmp	r4, r3
    17f4:	bf08      	it	eq
    17f6:	68ec      	ldreq	r4, [r5, #12]
    17f8:	e7ec      	b.n	17d4 <_fflush_r+0x1c>
    17fa:	2000      	movs	r0, #0
    17fc:	bd38      	pop	{r3, r4, r5, pc}
    17fe:	bf00      	nop
    1800:	00002850 	.word	0x00002850
    1804:	00002870 	.word	0x00002870
    1808:	00002830 	.word	0x00002830

0000180c <std>:
    180c:	2300      	movs	r3, #0
    180e:	b510      	push	{r4, lr}
    1810:	4604      	mov	r4, r0
    1812:	e9c0 3300 	strd	r3, r3, [r0]
    1816:	6083      	str	r3, [r0, #8]
    1818:	8181      	strh	r1, [r0, #12]
    181a:	6643      	str	r3, [r0, #100]	; 0x64
    181c:	81c2      	strh	r2, [r0, #14]
    181e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1822:	6183      	str	r3, [r0, #24]
    1824:	4619      	mov	r1, r3
    1826:	2208      	movs	r2, #8
    1828:	305c      	adds	r0, #92	; 0x5c
    182a:	f7ff fdf1 	bl	1410 <memset>
    182e:	4b05      	ldr	r3, [pc, #20]	; (1844 <std+0x38>)
    1830:	6224      	str	r4, [r4, #32]
    1832:	6263      	str	r3, [r4, #36]	; 0x24
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <std+0x3c>)
    1836:	62a3      	str	r3, [r4, #40]	; 0x28
    1838:	4b04      	ldr	r3, [pc, #16]	; (184c <std+0x40>)
    183a:	62e3      	str	r3, [r4, #44]	; 0x2c
    183c:	4b04      	ldr	r3, [pc, #16]	; (1850 <std+0x44>)
    183e:	6323      	str	r3, [r4, #48]	; 0x30
    1840:	bd10      	pop	{r4, pc}
    1842:	bf00      	nop
    1844:	0000215d 	.word	0x0000215d
    1848:	0000217f 	.word	0x0000217f
    184c:	000021b7 	.word	0x000021b7
    1850:	000021db 	.word	0x000021db

00001854 <_cleanup_r>:
    1854:	4901      	ldr	r1, [pc, #4]	; (185c <_cleanup_r+0x8>)
    1856:	f000 b885 	b.w	1964 <_fwalk_reent>
    185a:	bf00      	nop
    185c:	000017b9 	.word	0x000017b9

00001860 <__sfmoreglue>:
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	2568      	movs	r5, #104	; 0x68
    1864:	1e4a      	subs	r2, r1, #1
    1866:	4355      	muls	r5, r2
    1868:	460e      	mov	r6, r1
    186a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    186e:	f000 f947 	bl	1b00 <_malloc_r>
    1872:	4604      	mov	r4, r0
    1874:	b140      	cbz	r0, 1888 <__sfmoreglue+0x28>
    1876:	2100      	movs	r1, #0
    1878:	e9c0 1600 	strd	r1, r6, [r0]
    187c:	300c      	adds	r0, #12
    187e:	60a0      	str	r0, [r4, #8]
    1880:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1884:	f7ff fdc4 	bl	1410 <memset>
    1888:	4620      	mov	r0, r4
    188a:	bd70      	pop	{r4, r5, r6, pc}

0000188c <__sinit>:
    188c:	6983      	ldr	r3, [r0, #24]
    188e:	b510      	push	{r4, lr}
    1890:	4604      	mov	r4, r0
    1892:	bb33      	cbnz	r3, 18e2 <__sinit+0x56>
    1894:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    1898:	6503      	str	r3, [r0, #80]	; 0x50
    189a:	4b12      	ldr	r3, [pc, #72]	; (18e4 <__sinit+0x58>)
    189c:	4a12      	ldr	r2, [pc, #72]	; (18e8 <__sinit+0x5c>)
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	6282      	str	r2, [r0, #40]	; 0x28
    18a2:	4298      	cmp	r0, r3
    18a4:	bf04      	itt	eq
    18a6:	2301      	moveq	r3, #1
    18a8:	6183      	streq	r3, [r0, #24]
    18aa:	f000 f81f 	bl	18ec <__sfp>
    18ae:	6060      	str	r0, [r4, #4]
    18b0:	4620      	mov	r0, r4
    18b2:	f000 f81b 	bl	18ec <__sfp>
    18b6:	60a0      	str	r0, [r4, #8]
    18b8:	4620      	mov	r0, r4
    18ba:	f000 f817 	bl	18ec <__sfp>
    18be:	2200      	movs	r2, #0
    18c0:	60e0      	str	r0, [r4, #12]
    18c2:	2104      	movs	r1, #4
    18c4:	6860      	ldr	r0, [r4, #4]
    18c6:	f7ff ffa1 	bl	180c <std>
    18ca:	2201      	movs	r2, #1
    18cc:	2109      	movs	r1, #9
    18ce:	68a0      	ldr	r0, [r4, #8]
    18d0:	f7ff ff9c 	bl	180c <std>
    18d4:	2202      	movs	r2, #2
    18d6:	2112      	movs	r1, #18
    18d8:	68e0      	ldr	r0, [r4, #12]
    18da:	f7ff ff97 	bl	180c <std>
    18de:	2301      	movs	r3, #1
    18e0:	61a3      	str	r3, [r4, #24]
    18e2:	bd10      	pop	{r4, pc}
    18e4:	0000282c 	.word	0x0000282c
    18e8:	00001855 	.word	0x00001855

000018ec <__sfp>:
    18ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ee:	4b1b      	ldr	r3, [pc, #108]	; (195c <__sfp+0x70>)
    18f0:	4607      	mov	r7, r0
    18f2:	681e      	ldr	r6, [r3, #0]
    18f4:	69b3      	ldr	r3, [r6, #24]
    18f6:	b913      	cbnz	r3, 18fe <__sfp+0x12>
    18f8:	4630      	mov	r0, r6
    18fa:	f7ff ffc7 	bl	188c <__sinit>
    18fe:	3648      	adds	r6, #72	; 0x48
    1900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    1904:	3b01      	subs	r3, #1
    1906:	d503      	bpl.n	1910 <__sfp+0x24>
    1908:	6833      	ldr	r3, [r6, #0]
    190a:	b133      	cbz	r3, 191a <__sfp+0x2e>
    190c:	6836      	ldr	r6, [r6, #0]
    190e:	e7f7      	b.n	1900 <__sfp+0x14>
    1910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1914:	b16d      	cbz	r5, 1932 <__sfp+0x46>
    1916:	3468      	adds	r4, #104	; 0x68
    1918:	e7f4      	b.n	1904 <__sfp+0x18>
    191a:	2104      	movs	r1, #4
    191c:	4638      	mov	r0, r7
    191e:	f7ff ff9f 	bl	1860 <__sfmoreglue>
    1922:	6030      	str	r0, [r6, #0]
    1924:	2800      	cmp	r0, #0
    1926:	d1f1      	bne.n	190c <__sfp+0x20>
    1928:	230c      	movs	r3, #12
    192a:	4604      	mov	r4, r0
    192c:	603b      	str	r3, [r7, #0]
    192e:	4620      	mov	r0, r4
    1930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1932:	4b0b      	ldr	r3, [pc, #44]	; (1960 <__sfp+0x74>)
    1934:	6665      	str	r5, [r4, #100]	; 0x64
    1936:	e9c4 5500 	strd	r5, r5, [r4]
    193a:	60a5      	str	r5, [r4, #8]
    193c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    1940:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1944:	2208      	movs	r2, #8
    1946:	4629      	mov	r1, r5
    1948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    194c:	f7ff fd60 	bl	1410 <memset>
    1950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    1954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    1958:	e7e9      	b.n	192e <__sfp+0x42>
    195a:	bf00      	nop
    195c:	0000282c 	.word	0x0000282c
    1960:	ffff0001 	.word	0xffff0001

00001964 <_fwalk_reent>:
    1964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1968:	4680      	mov	r8, r0
    196a:	4689      	mov	r9, r1
    196c:	2600      	movs	r6, #0
    196e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1972:	b914      	cbnz	r4, 197a <_fwalk_reent+0x16>
    1974:	4630      	mov	r0, r6
    1976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    197a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    197e:	3f01      	subs	r7, #1
    1980:	d501      	bpl.n	1986 <_fwalk_reent+0x22>
    1982:	6824      	ldr	r4, [r4, #0]
    1984:	e7f5      	b.n	1972 <_fwalk_reent+0xe>
    1986:	89ab      	ldrh	r3, [r5, #12]
    1988:	2b01      	cmp	r3, #1
    198a:	d907      	bls.n	199c <_fwalk_reent+0x38>
    198c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1990:	3301      	adds	r3, #1
    1992:	d003      	beq.n	199c <_fwalk_reent+0x38>
    1994:	4629      	mov	r1, r5
    1996:	4640      	mov	r0, r8
    1998:	47c8      	blx	r9
    199a:	4306      	orrs	r6, r0
    199c:	3568      	adds	r5, #104	; 0x68
    199e:	e7ee      	b.n	197e <_fwalk_reent+0x1a>

000019a0 <__swhatbuf_r>:
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	460e      	mov	r6, r1
    19a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    19a8:	b096      	sub	sp, #88	; 0x58
    19aa:	2900      	cmp	r1, #0
    19ac:	4614      	mov	r4, r2
    19ae:	461d      	mov	r5, r3
    19b0:	da07      	bge.n	19c2 <__swhatbuf_r+0x22>
    19b2:	2300      	movs	r3, #0
    19b4:	602b      	str	r3, [r5, #0]
    19b6:	89b3      	ldrh	r3, [r6, #12]
    19b8:	061a      	lsls	r2, r3, #24
    19ba:	d410      	bmi.n	19de <__swhatbuf_r+0x3e>
    19bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    19c0:	e00e      	b.n	19e0 <__swhatbuf_r+0x40>
    19c2:	466a      	mov	r2, sp
    19c4:	f000 fc30 	bl	2228 <_fstat_r>
    19c8:	2800      	cmp	r0, #0
    19ca:	dbf2      	blt.n	19b2 <__swhatbuf_r+0x12>
    19cc:	9a01      	ldr	r2, [sp, #4]
    19ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    19d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    19d6:	425a      	negs	r2, r3
    19d8:	415a      	adcs	r2, r3
    19da:	602a      	str	r2, [r5, #0]
    19dc:	e7ee      	b.n	19bc <__swhatbuf_r+0x1c>
    19de:	2340      	movs	r3, #64	; 0x40
    19e0:	2000      	movs	r0, #0
    19e2:	6023      	str	r3, [r4, #0]
    19e4:	b016      	add	sp, #88	; 0x58
    19e6:	bd70      	pop	{r4, r5, r6, pc}

000019e8 <__smakebuf_r>:
    19e8:	898b      	ldrh	r3, [r1, #12]
    19ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    19ec:	079d      	lsls	r5, r3, #30
    19ee:	4606      	mov	r6, r0
    19f0:	460c      	mov	r4, r1
    19f2:	d507      	bpl.n	1a04 <__smakebuf_r+0x1c>
    19f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    19f8:	6023      	str	r3, [r4, #0]
    19fa:	6123      	str	r3, [r4, #16]
    19fc:	2301      	movs	r3, #1
    19fe:	6163      	str	r3, [r4, #20]
    1a00:	b002      	add	sp, #8
    1a02:	bd70      	pop	{r4, r5, r6, pc}
    1a04:	ab01      	add	r3, sp, #4
    1a06:	466a      	mov	r2, sp
    1a08:	f7ff ffca 	bl	19a0 <__swhatbuf_r>
    1a0c:	9900      	ldr	r1, [sp, #0]
    1a0e:	4605      	mov	r5, r0
    1a10:	4630      	mov	r0, r6
    1a12:	f000 f875 	bl	1b00 <_malloc_r>
    1a16:	b948      	cbnz	r0, 1a2c <__smakebuf_r+0x44>
    1a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a1c:	059a      	lsls	r2, r3, #22
    1a1e:	d4ef      	bmi.n	1a00 <__smakebuf_r+0x18>
    1a20:	f023 0303 	bic.w	r3, r3, #3
    1a24:	f043 0302 	orr.w	r3, r3, #2
    1a28:	81a3      	strh	r3, [r4, #12]
    1a2a:	e7e3      	b.n	19f4 <__smakebuf_r+0xc>
    1a2c:	4b0d      	ldr	r3, [pc, #52]	; (1a64 <__smakebuf_r+0x7c>)
    1a2e:	62b3      	str	r3, [r6, #40]	; 0x28
    1a30:	89a3      	ldrh	r3, [r4, #12]
    1a32:	6020      	str	r0, [r4, #0]
    1a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1a38:	81a3      	strh	r3, [r4, #12]
    1a3a:	9b00      	ldr	r3, [sp, #0]
    1a3c:	6120      	str	r0, [r4, #16]
    1a3e:	6163      	str	r3, [r4, #20]
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	b15b      	cbz	r3, 1a5c <__smakebuf_r+0x74>
    1a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1a48:	4630      	mov	r0, r6
    1a4a:	f000 fbff 	bl	224c <_isatty_r>
    1a4e:	b128      	cbz	r0, 1a5c <__smakebuf_r+0x74>
    1a50:	89a3      	ldrh	r3, [r4, #12]
    1a52:	f023 0303 	bic.w	r3, r3, #3
    1a56:	f043 0301 	orr.w	r3, r3, #1
    1a5a:	81a3      	strh	r3, [r4, #12]
    1a5c:	89a3      	ldrh	r3, [r4, #12]
    1a5e:	431d      	orrs	r5, r3
    1a60:	81a5      	strh	r5, [r4, #12]
    1a62:	e7cd      	b.n	1a00 <__smakebuf_r+0x18>
    1a64:	00001855 	.word	0x00001855

00001a68 <_free_r>:
    1a68:	b538      	push	{r3, r4, r5, lr}
    1a6a:	4605      	mov	r5, r0
    1a6c:	2900      	cmp	r1, #0
    1a6e:	d043      	beq.n	1af8 <_free_r+0x90>
    1a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1a74:	1f0c      	subs	r4, r1, #4
    1a76:	2b00      	cmp	r3, #0
    1a78:	bfb8      	it	lt
    1a7a:	18e4      	addlt	r4, r4, r3
    1a7c:	f000 fc16 	bl	22ac <__malloc_lock>
    1a80:	4a1e      	ldr	r2, [pc, #120]	; (1afc <_free_r+0x94>)
    1a82:	6813      	ldr	r3, [r2, #0]
    1a84:	4610      	mov	r0, r2
    1a86:	b933      	cbnz	r3, 1a96 <_free_r+0x2e>
    1a88:	6063      	str	r3, [r4, #4]
    1a8a:	6014      	str	r4, [r2, #0]
    1a8c:	4628      	mov	r0, r5
    1a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a92:	f000 bc0c 	b.w	22ae <__malloc_unlock>
    1a96:	42a3      	cmp	r3, r4
    1a98:	d90b      	bls.n	1ab2 <_free_r+0x4a>
    1a9a:	6821      	ldr	r1, [r4, #0]
    1a9c:	1862      	adds	r2, r4, r1
    1a9e:	4293      	cmp	r3, r2
    1aa0:	bf01      	itttt	eq
    1aa2:	681a      	ldreq	r2, [r3, #0]
    1aa4:	685b      	ldreq	r3, [r3, #4]
    1aa6:	1852      	addeq	r2, r2, r1
    1aa8:	6022      	streq	r2, [r4, #0]
    1aaa:	6063      	str	r3, [r4, #4]
    1aac:	6004      	str	r4, [r0, #0]
    1aae:	e7ed      	b.n	1a8c <_free_r+0x24>
    1ab0:	4613      	mov	r3, r2
    1ab2:	685a      	ldr	r2, [r3, #4]
    1ab4:	b10a      	cbz	r2, 1aba <_free_r+0x52>
    1ab6:	42a2      	cmp	r2, r4
    1ab8:	d9fa      	bls.n	1ab0 <_free_r+0x48>
    1aba:	6819      	ldr	r1, [r3, #0]
    1abc:	1858      	adds	r0, r3, r1
    1abe:	42a0      	cmp	r0, r4
    1ac0:	d10b      	bne.n	1ada <_free_r+0x72>
    1ac2:	6820      	ldr	r0, [r4, #0]
    1ac4:	4401      	add	r1, r0
    1ac6:	1858      	adds	r0, r3, r1
    1ac8:	4282      	cmp	r2, r0
    1aca:	6019      	str	r1, [r3, #0]
    1acc:	d1de      	bne.n	1a8c <_free_r+0x24>
    1ace:	6810      	ldr	r0, [r2, #0]
    1ad0:	6852      	ldr	r2, [r2, #4]
    1ad2:	4401      	add	r1, r0
    1ad4:	6019      	str	r1, [r3, #0]
    1ad6:	605a      	str	r2, [r3, #4]
    1ad8:	e7d8      	b.n	1a8c <_free_r+0x24>
    1ada:	d902      	bls.n	1ae2 <_free_r+0x7a>
    1adc:	230c      	movs	r3, #12
    1ade:	602b      	str	r3, [r5, #0]
    1ae0:	e7d4      	b.n	1a8c <_free_r+0x24>
    1ae2:	6820      	ldr	r0, [r4, #0]
    1ae4:	1821      	adds	r1, r4, r0
    1ae6:	428a      	cmp	r2, r1
    1ae8:	bf01      	itttt	eq
    1aea:	6811      	ldreq	r1, [r2, #0]
    1aec:	6852      	ldreq	r2, [r2, #4]
    1aee:	1809      	addeq	r1, r1, r0
    1af0:	6021      	streq	r1, [r4, #0]
    1af2:	6062      	str	r2, [r4, #4]
    1af4:	605c      	str	r4, [r3, #4]
    1af6:	e7c9      	b.n	1a8c <_free_r+0x24>
    1af8:	bd38      	pop	{r3, r4, r5, pc}
    1afa:	bf00      	nop
    1afc:	20000080 	.word	0x20000080

00001b00 <_malloc_r>:
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	1ccd      	adds	r5, r1, #3
    1b04:	f025 0503 	bic.w	r5, r5, #3
    1b08:	3508      	adds	r5, #8
    1b0a:	2d0c      	cmp	r5, #12
    1b0c:	bf38      	it	cc
    1b0e:	250c      	movcc	r5, #12
    1b10:	2d00      	cmp	r5, #0
    1b12:	4606      	mov	r6, r0
    1b14:	db01      	blt.n	1b1a <_malloc_r+0x1a>
    1b16:	42a9      	cmp	r1, r5
    1b18:	d903      	bls.n	1b22 <_malloc_r+0x22>
    1b1a:	230c      	movs	r3, #12
    1b1c:	6033      	str	r3, [r6, #0]
    1b1e:	2000      	movs	r0, #0
    1b20:	bd70      	pop	{r4, r5, r6, pc}
    1b22:	f000 fbc3 	bl	22ac <__malloc_lock>
    1b26:	4a21      	ldr	r2, [pc, #132]	; (1bac <_malloc_r+0xac>)
    1b28:	6814      	ldr	r4, [r2, #0]
    1b2a:	4621      	mov	r1, r4
    1b2c:	b991      	cbnz	r1, 1b54 <_malloc_r+0x54>
    1b2e:	4c20      	ldr	r4, [pc, #128]	; (1bb0 <_malloc_r+0xb0>)
    1b30:	6823      	ldr	r3, [r4, #0]
    1b32:	b91b      	cbnz	r3, 1b3c <_malloc_r+0x3c>
    1b34:	4630      	mov	r0, r6
    1b36:	f000 fb01 	bl	213c <_sbrk_r>
    1b3a:	6020      	str	r0, [r4, #0]
    1b3c:	4629      	mov	r1, r5
    1b3e:	4630      	mov	r0, r6
    1b40:	f000 fafc 	bl	213c <_sbrk_r>
    1b44:	1c43      	adds	r3, r0, #1
    1b46:	d124      	bne.n	1b92 <_malloc_r+0x92>
    1b48:	230c      	movs	r3, #12
    1b4a:	4630      	mov	r0, r6
    1b4c:	6033      	str	r3, [r6, #0]
    1b4e:	f000 fbae 	bl	22ae <__malloc_unlock>
    1b52:	e7e4      	b.n	1b1e <_malloc_r+0x1e>
    1b54:	680b      	ldr	r3, [r1, #0]
    1b56:	1b5b      	subs	r3, r3, r5
    1b58:	d418      	bmi.n	1b8c <_malloc_r+0x8c>
    1b5a:	2b0b      	cmp	r3, #11
    1b5c:	d90f      	bls.n	1b7e <_malloc_r+0x7e>
    1b5e:	600b      	str	r3, [r1, #0]
    1b60:	18cc      	adds	r4, r1, r3
    1b62:	50cd      	str	r5, [r1, r3]
    1b64:	4630      	mov	r0, r6
    1b66:	f000 fba2 	bl	22ae <__malloc_unlock>
    1b6a:	f104 000b 	add.w	r0, r4, #11
    1b6e:	1d23      	adds	r3, r4, #4
    1b70:	f020 0007 	bic.w	r0, r0, #7
    1b74:	1ac3      	subs	r3, r0, r3
    1b76:	d0d3      	beq.n	1b20 <_malloc_r+0x20>
    1b78:	425a      	negs	r2, r3
    1b7a:	50e2      	str	r2, [r4, r3]
    1b7c:	e7d0      	b.n	1b20 <_malloc_r+0x20>
    1b7e:	684b      	ldr	r3, [r1, #4]
    1b80:	428c      	cmp	r4, r1
    1b82:	bf16      	itet	ne
    1b84:	6063      	strne	r3, [r4, #4]
    1b86:	6013      	streq	r3, [r2, #0]
    1b88:	460c      	movne	r4, r1
    1b8a:	e7eb      	b.n	1b64 <_malloc_r+0x64>
    1b8c:	460c      	mov	r4, r1
    1b8e:	6849      	ldr	r1, [r1, #4]
    1b90:	e7cc      	b.n	1b2c <_malloc_r+0x2c>
    1b92:	1cc4      	adds	r4, r0, #3
    1b94:	f024 0403 	bic.w	r4, r4, #3
    1b98:	42a0      	cmp	r0, r4
    1b9a:	d005      	beq.n	1ba8 <_malloc_r+0xa8>
    1b9c:	1a21      	subs	r1, r4, r0
    1b9e:	4630      	mov	r0, r6
    1ba0:	f000 facc 	bl	213c <_sbrk_r>
    1ba4:	3001      	adds	r0, #1
    1ba6:	d0cf      	beq.n	1b48 <_malloc_r+0x48>
    1ba8:	6025      	str	r5, [r4, #0]
    1baa:	e7db      	b.n	1b64 <_malloc_r+0x64>
    1bac:	20000080 	.word	0x20000080
    1bb0:	20000084 	.word	0x20000084

00001bb4 <__sfputc_r>:
    1bb4:	6893      	ldr	r3, [r2, #8]
    1bb6:	b410      	push	{r4}
    1bb8:	3b01      	subs	r3, #1
    1bba:	2b00      	cmp	r3, #0
    1bbc:	6093      	str	r3, [r2, #8]
    1bbe:	da07      	bge.n	1bd0 <__sfputc_r+0x1c>
    1bc0:	6994      	ldr	r4, [r2, #24]
    1bc2:	42a3      	cmp	r3, r4
    1bc4:	db01      	blt.n	1bca <__sfputc_r+0x16>
    1bc6:	290a      	cmp	r1, #10
    1bc8:	d102      	bne.n	1bd0 <__sfputc_r+0x1c>
    1bca:	bc10      	pop	{r4}
    1bcc:	f7ff bcae 	b.w	152c <__swbuf_r>
    1bd0:	6813      	ldr	r3, [r2, #0]
    1bd2:	1c58      	adds	r0, r3, #1
    1bd4:	6010      	str	r0, [r2, #0]
    1bd6:	7019      	strb	r1, [r3, #0]
    1bd8:	4608      	mov	r0, r1
    1bda:	bc10      	pop	{r4}
    1bdc:	4770      	bx	lr

00001bde <__sfputs_r>:
    1bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1be0:	4606      	mov	r6, r0
    1be2:	460f      	mov	r7, r1
    1be4:	4614      	mov	r4, r2
    1be6:	18d5      	adds	r5, r2, r3
    1be8:	42ac      	cmp	r4, r5
    1bea:	d101      	bne.n	1bf0 <__sfputs_r+0x12>
    1bec:	2000      	movs	r0, #0
    1bee:	e007      	b.n	1c00 <__sfputs_r+0x22>
    1bf0:	463a      	mov	r2, r7
    1bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
    1bf6:	4630      	mov	r0, r6
    1bf8:	f7ff ffdc 	bl	1bb4 <__sfputc_r>
    1bfc:	1c43      	adds	r3, r0, #1
    1bfe:	d1f3      	bne.n	1be8 <__sfputs_r+0xa>
    1c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001c04 <_vfiprintf_r>:
    1c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c08:	b09d      	sub	sp, #116	; 0x74
    1c0a:	460c      	mov	r4, r1
    1c0c:	4617      	mov	r7, r2
    1c0e:	9303      	str	r3, [sp, #12]
    1c10:	4606      	mov	r6, r0
    1c12:	b118      	cbz	r0, 1c1c <_vfiprintf_r+0x18>
    1c14:	6983      	ldr	r3, [r0, #24]
    1c16:	b90b      	cbnz	r3, 1c1c <_vfiprintf_r+0x18>
    1c18:	f7ff fe38 	bl	188c <__sinit>
    1c1c:	4b7b      	ldr	r3, [pc, #492]	; (1e0c <_vfiprintf_r+0x208>)
    1c1e:	429c      	cmp	r4, r3
    1c20:	d157      	bne.n	1cd2 <_vfiprintf_r+0xce>
    1c22:	6874      	ldr	r4, [r6, #4]
    1c24:	89a3      	ldrh	r3, [r4, #12]
    1c26:	0718      	lsls	r0, r3, #28
    1c28:	d55d      	bpl.n	1ce6 <_vfiprintf_r+0xe2>
    1c2a:	6923      	ldr	r3, [r4, #16]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d05a      	beq.n	1ce6 <_vfiprintf_r+0xe2>
    1c30:	2300      	movs	r3, #0
    1c32:	9309      	str	r3, [sp, #36]	; 0x24
    1c34:	2320      	movs	r3, #32
    1c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1c3a:	2330      	movs	r3, #48	; 0x30
    1c3c:	f04f 0b01 	mov.w	fp, #1
    1c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1c44:	46b8      	mov	r8, r7
    1c46:	4645      	mov	r5, r8
    1c48:	f815 3b01 	ldrb.w	r3, [r5], #1
    1c4c:	b10b      	cbz	r3, 1c52 <_vfiprintf_r+0x4e>
    1c4e:	2b25      	cmp	r3, #37	; 0x25
    1c50:	d154      	bne.n	1cfc <_vfiprintf_r+0xf8>
    1c52:	ebb8 0a07 	subs.w	sl, r8, r7
    1c56:	d00b      	beq.n	1c70 <_vfiprintf_r+0x6c>
    1c58:	4653      	mov	r3, sl
    1c5a:	463a      	mov	r2, r7
    1c5c:	4621      	mov	r1, r4
    1c5e:	4630      	mov	r0, r6
    1c60:	f7ff ffbd 	bl	1bde <__sfputs_r>
    1c64:	3001      	adds	r0, #1
    1c66:	f000 80c2 	beq.w	1dee <_vfiprintf_r+0x1ea>
    1c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c6c:	4453      	add	r3, sl
    1c6e:	9309      	str	r3, [sp, #36]	; 0x24
    1c70:	f898 3000 	ldrb.w	r3, [r8]
    1c74:	2b00      	cmp	r3, #0
    1c76:	f000 80ba 	beq.w	1dee <_vfiprintf_r+0x1ea>
    1c7a:	2300      	movs	r3, #0
    1c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1c84:	9304      	str	r3, [sp, #16]
    1c86:	9307      	str	r3, [sp, #28]
    1c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1c8c:	931a      	str	r3, [sp, #104]	; 0x68
    1c8e:	46a8      	mov	r8, r5
    1c90:	2205      	movs	r2, #5
    1c92:	f818 1b01 	ldrb.w	r1, [r8], #1
    1c96:	485e      	ldr	r0, [pc, #376]	; (1e10 <_vfiprintf_r+0x20c>)
    1c98:	f000 fafa 	bl	2290 <memchr>
    1c9c:	9b04      	ldr	r3, [sp, #16]
    1c9e:	bb78      	cbnz	r0, 1d00 <_vfiprintf_r+0xfc>
    1ca0:	06d9      	lsls	r1, r3, #27
    1ca2:	bf44      	itt	mi
    1ca4:	2220      	movmi	r2, #32
    1ca6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1caa:	071a      	lsls	r2, r3, #28
    1cac:	bf44      	itt	mi
    1cae:	222b      	movmi	r2, #43	; 0x2b
    1cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1cb4:	782a      	ldrb	r2, [r5, #0]
    1cb6:	2a2a      	cmp	r2, #42	; 0x2a
    1cb8:	d02a      	beq.n	1d10 <_vfiprintf_r+0x10c>
    1cba:	46a8      	mov	r8, r5
    1cbc:	2000      	movs	r0, #0
    1cbe:	250a      	movs	r5, #10
    1cc0:	9a07      	ldr	r2, [sp, #28]
    1cc2:	4641      	mov	r1, r8
    1cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
    1cc8:	3b30      	subs	r3, #48	; 0x30
    1cca:	2b09      	cmp	r3, #9
    1ccc:	d969      	bls.n	1da2 <_vfiprintf_r+0x19e>
    1cce:	b360      	cbz	r0, 1d2a <_vfiprintf_r+0x126>
    1cd0:	e024      	b.n	1d1c <_vfiprintf_r+0x118>
    1cd2:	4b50      	ldr	r3, [pc, #320]	; (1e14 <_vfiprintf_r+0x210>)
    1cd4:	429c      	cmp	r4, r3
    1cd6:	d101      	bne.n	1cdc <_vfiprintf_r+0xd8>
    1cd8:	68b4      	ldr	r4, [r6, #8]
    1cda:	e7a3      	b.n	1c24 <_vfiprintf_r+0x20>
    1cdc:	4b4e      	ldr	r3, [pc, #312]	; (1e18 <_vfiprintf_r+0x214>)
    1cde:	429c      	cmp	r4, r3
    1ce0:	bf08      	it	eq
    1ce2:	68f4      	ldreq	r4, [r6, #12]
    1ce4:	e79e      	b.n	1c24 <_vfiprintf_r+0x20>
    1ce6:	4621      	mov	r1, r4
    1ce8:	4630      	mov	r0, r6
    1cea:	f7ff fc71 	bl	15d0 <__swsetup_r>
    1cee:	2800      	cmp	r0, #0
    1cf0:	d09e      	beq.n	1c30 <_vfiprintf_r+0x2c>
    1cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cf6:	b01d      	add	sp, #116	; 0x74
    1cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cfc:	46a8      	mov	r8, r5
    1cfe:	e7a2      	b.n	1c46 <_vfiprintf_r+0x42>
    1d00:	4a43      	ldr	r2, [pc, #268]	; (1e10 <_vfiprintf_r+0x20c>)
    1d02:	4645      	mov	r5, r8
    1d04:	1a80      	subs	r0, r0, r2
    1d06:	fa0b f000 	lsl.w	r0, fp, r0
    1d0a:	4318      	orrs	r0, r3
    1d0c:	9004      	str	r0, [sp, #16]
    1d0e:	e7be      	b.n	1c8e <_vfiprintf_r+0x8a>
    1d10:	9a03      	ldr	r2, [sp, #12]
    1d12:	1d11      	adds	r1, r2, #4
    1d14:	6812      	ldr	r2, [r2, #0]
    1d16:	9103      	str	r1, [sp, #12]
    1d18:	2a00      	cmp	r2, #0
    1d1a:	db01      	blt.n	1d20 <_vfiprintf_r+0x11c>
    1d1c:	9207      	str	r2, [sp, #28]
    1d1e:	e004      	b.n	1d2a <_vfiprintf_r+0x126>
    1d20:	4252      	negs	r2, r2
    1d22:	f043 0302 	orr.w	r3, r3, #2
    1d26:	9207      	str	r2, [sp, #28]
    1d28:	9304      	str	r3, [sp, #16]
    1d2a:	f898 3000 	ldrb.w	r3, [r8]
    1d2e:	2b2e      	cmp	r3, #46	; 0x2e
    1d30:	d10e      	bne.n	1d50 <_vfiprintf_r+0x14c>
    1d32:	f898 3001 	ldrb.w	r3, [r8, #1]
    1d36:	2b2a      	cmp	r3, #42	; 0x2a
    1d38:	d138      	bne.n	1dac <_vfiprintf_r+0x1a8>
    1d3a:	9b03      	ldr	r3, [sp, #12]
    1d3c:	f108 0802 	add.w	r8, r8, #2
    1d40:	1d1a      	adds	r2, r3, #4
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	9203      	str	r2, [sp, #12]
    1d46:	2b00      	cmp	r3, #0
    1d48:	bfb8      	it	lt
    1d4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1d4e:	9305      	str	r3, [sp, #20]
    1d50:	4d32      	ldr	r5, [pc, #200]	; (1e1c <_vfiprintf_r+0x218>)
    1d52:	2203      	movs	r2, #3
    1d54:	f898 1000 	ldrb.w	r1, [r8]
    1d58:	4628      	mov	r0, r5
    1d5a:	f000 fa99 	bl	2290 <memchr>
    1d5e:	b140      	cbz	r0, 1d72 <_vfiprintf_r+0x16e>
    1d60:	2340      	movs	r3, #64	; 0x40
    1d62:	1b40      	subs	r0, r0, r5
    1d64:	fa03 f000 	lsl.w	r0, r3, r0
    1d68:	9b04      	ldr	r3, [sp, #16]
    1d6a:	f108 0801 	add.w	r8, r8, #1
    1d6e:	4303      	orrs	r3, r0
    1d70:	9304      	str	r3, [sp, #16]
    1d72:	f898 1000 	ldrb.w	r1, [r8]
    1d76:	2206      	movs	r2, #6
    1d78:	4829      	ldr	r0, [pc, #164]	; (1e20 <_vfiprintf_r+0x21c>)
    1d7a:	f108 0701 	add.w	r7, r8, #1
    1d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1d82:	f000 fa85 	bl	2290 <memchr>
    1d86:	2800      	cmp	r0, #0
    1d88:	d037      	beq.n	1dfa <_vfiprintf_r+0x1f6>
    1d8a:	4b26      	ldr	r3, [pc, #152]	; (1e24 <_vfiprintf_r+0x220>)
    1d8c:	bb1b      	cbnz	r3, 1dd6 <_vfiprintf_r+0x1d2>
    1d8e:	9b03      	ldr	r3, [sp, #12]
    1d90:	3307      	adds	r3, #7
    1d92:	f023 0307 	bic.w	r3, r3, #7
    1d96:	3308      	adds	r3, #8
    1d98:	9303      	str	r3, [sp, #12]
    1d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d9c:	444b      	add	r3, r9
    1d9e:	9309      	str	r3, [sp, #36]	; 0x24
    1da0:	e750      	b.n	1c44 <_vfiprintf_r+0x40>
    1da2:	fb05 3202 	mla	r2, r5, r2, r3
    1da6:	2001      	movs	r0, #1
    1da8:	4688      	mov	r8, r1
    1daa:	e78a      	b.n	1cc2 <_vfiprintf_r+0xbe>
    1dac:	2300      	movs	r3, #0
    1dae:	250a      	movs	r5, #10
    1db0:	4619      	mov	r1, r3
    1db2:	f108 0801 	add.w	r8, r8, #1
    1db6:	9305      	str	r3, [sp, #20]
    1db8:	4640      	mov	r0, r8
    1dba:	f810 2b01 	ldrb.w	r2, [r0], #1
    1dbe:	3a30      	subs	r2, #48	; 0x30
    1dc0:	2a09      	cmp	r2, #9
    1dc2:	d903      	bls.n	1dcc <_vfiprintf_r+0x1c8>
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d0c3      	beq.n	1d50 <_vfiprintf_r+0x14c>
    1dc8:	9105      	str	r1, [sp, #20]
    1dca:	e7c1      	b.n	1d50 <_vfiprintf_r+0x14c>
    1dcc:	fb05 2101 	mla	r1, r5, r1, r2
    1dd0:	2301      	movs	r3, #1
    1dd2:	4680      	mov	r8, r0
    1dd4:	e7f0      	b.n	1db8 <_vfiprintf_r+0x1b4>
    1dd6:	ab03      	add	r3, sp, #12
    1dd8:	9300      	str	r3, [sp, #0]
    1dda:	4622      	mov	r2, r4
    1ddc:	4b12      	ldr	r3, [pc, #72]	; (1e28 <_vfiprintf_r+0x224>)
    1dde:	a904      	add	r1, sp, #16
    1de0:	4630      	mov	r0, r6
    1de2:	f3af 8000 	nop.w
    1de6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1dea:	4681      	mov	r9, r0
    1dec:	d1d5      	bne.n	1d9a <_vfiprintf_r+0x196>
    1dee:	89a3      	ldrh	r3, [r4, #12]
    1df0:	065b      	lsls	r3, r3, #25
    1df2:	f53f af7e 	bmi.w	1cf2 <_vfiprintf_r+0xee>
    1df6:	9809      	ldr	r0, [sp, #36]	; 0x24
    1df8:	e77d      	b.n	1cf6 <_vfiprintf_r+0xf2>
    1dfa:	ab03      	add	r3, sp, #12
    1dfc:	9300      	str	r3, [sp, #0]
    1dfe:	4622      	mov	r2, r4
    1e00:	4b09      	ldr	r3, [pc, #36]	; (1e28 <_vfiprintf_r+0x224>)
    1e02:	a904      	add	r1, sp, #16
    1e04:	4630      	mov	r0, r6
    1e06:	f000 f887 	bl	1f18 <_printf_i>
    1e0a:	e7ec      	b.n	1de6 <_vfiprintf_r+0x1e2>
    1e0c:	00002850 	.word	0x00002850
    1e10:	00002890 	.word	0x00002890
    1e14:	00002870 	.word	0x00002870
    1e18:	00002830 	.word	0x00002830
    1e1c:	00002896 	.word	0x00002896
    1e20:	0000289a 	.word	0x0000289a
    1e24:	00000000 	.word	0x00000000
    1e28:	00001bdf 	.word	0x00001bdf

00001e2c <_printf_common>:
    1e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e30:	4691      	mov	r9, r2
    1e32:	461f      	mov	r7, r3
    1e34:	688a      	ldr	r2, [r1, #8]
    1e36:	690b      	ldr	r3, [r1, #16]
    1e38:	4606      	mov	r6, r0
    1e3a:	4293      	cmp	r3, r2
    1e3c:	bfb8      	it	lt
    1e3e:	4613      	movlt	r3, r2
    1e40:	f8c9 3000 	str.w	r3, [r9]
    1e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    1e48:	460c      	mov	r4, r1
    1e4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1e4e:	b112      	cbz	r2, 1e56 <_printf_common+0x2a>
    1e50:	3301      	adds	r3, #1
    1e52:	f8c9 3000 	str.w	r3, [r9]
    1e56:	6823      	ldr	r3, [r4, #0]
    1e58:	0699      	lsls	r1, r3, #26
    1e5a:	bf42      	ittt	mi
    1e5c:	f8d9 3000 	ldrmi.w	r3, [r9]
    1e60:	3302      	addmi	r3, #2
    1e62:	f8c9 3000 	strmi.w	r3, [r9]
    1e66:	6825      	ldr	r5, [r4, #0]
    1e68:	f015 0506 	ands.w	r5, r5, #6
    1e6c:	d107      	bne.n	1e7e <_printf_common+0x52>
    1e6e:	f104 0a19 	add.w	sl, r4, #25
    1e72:	68e3      	ldr	r3, [r4, #12]
    1e74:	f8d9 2000 	ldr.w	r2, [r9]
    1e78:	1a9b      	subs	r3, r3, r2
    1e7a:	42ab      	cmp	r3, r5
    1e7c:	dc29      	bgt.n	1ed2 <_printf_common+0xa6>
    1e7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    1e82:	6822      	ldr	r2, [r4, #0]
    1e84:	3300      	adds	r3, #0
    1e86:	bf18      	it	ne
    1e88:	2301      	movne	r3, #1
    1e8a:	0692      	lsls	r2, r2, #26
    1e8c:	d42e      	bmi.n	1eec <_printf_common+0xc0>
    1e8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1e92:	4639      	mov	r1, r7
    1e94:	4630      	mov	r0, r6
    1e96:	47c0      	blx	r8
    1e98:	3001      	adds	r0, #1
    1e9a:	d021      	beq.n	1ee0 <_printf_common+0xb4>
    1e9c:	6823      	ldr	r3, [r4, #0]
    1e9e:	68e5      	ldr	r5, [r4, #12]
    1ea0:	f003 0306 	and.w	r3, r3, #6
    1ea4:	2b04      	cmp	r3, #4
    1ea6:	bf18      	it	ne
    1ea8:	2500      	movne	r5, #0
    1eaa:	f8d9 2000 	ldr.w	r2, [r9]
    1eae:	f04f 0900 	mov.w	r9, #0
    1eb2:	bf08      	it	eq
    1eb4:	1aad      	subeq	r5, r5, r2
    1eb6:	68a3      	ldr	r3, [r4, #8]
    1eb8:	6922      	ldr	r2, [r4, #16]
    1eba:	bf08      	it	eq
    1ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    1ec0:	4293      	cmp	r3, r2
    1ec2:	bfc4      	itt	gt
    1ec4:	1a9b      	subgt	r3, r3, r2
    1ec6:	18ed      	addgt	r5, r5, r3
    1ec8:	341a      	adds	r4, #26
    1eca:	454d      	cmp	r5, r9
    1ecc:	d11a      	bne.n	1f04 <_printf_common+0xd8>
    1ece:	2000      	movs	r0, #0
    1ed0:	e008      	b.n	1ee4 <_printf_common+0xb8>
    1ed2:	2301      	movs	r3, #1
    1ed4:	4652      	mov	r2, sl
    1ed6:	4639      	mov	r1, r7
    1ed8:	4630      	mov	r0, r6
    1eda:	47c0      	blx	r8
    1edc:	3001      	adds	r0, #1
    1ede:	d103      	bne.n	1ee8 <_printf_common+0xbc>
    1ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ee8:	3501      	adds	r5, #1
    1eea:	e7c2      	b.n	1e72 <_printf_common+0x46>
    1eec:	2030      	movs	r0, #48	; 0x30
    1eee:	18e1      	adds	r1, r4, r3
    1ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    1ef4:	1c5a      	adds	r2, r3, #1
    1ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    1efa:	4422      	add	r2, r4
    1efc:	3302      	adds	r3, #2
    1efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1f02:	e7c4      	b.n	1e8e <_printf_common+0x62>
    1f04:	2301      	movs	r3, #1
    1f06:	4622      	mov	r2, r4
    1f08:	4639      	mov	r1, r7
    1f0a:	4630      	mov	r0, r6
    1f0c:	47c0      	blx	r8
    1f0e:	3001      	adds	r0, #1
    1f10:	d0e6      	beq.n	1ee0 <_printf_common+0xb4>
    1f12:	f109 0901 	add.w	r9, r9, #1
    1f16:	e7d8      	b.n	1eca <_printf_common+0x9e>

00001f18 <_printf_i>:
    1f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1f1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    1f20:	460c      	mov	r4, r1
    1f22:	7e09      	ldrb	r1, [r1, #24]
    1f24:	b085      	sub	sp, #20
    1f26:	296e      	cmp	r1, #110	; 0x6e
    1f28:	4617      	mov	r7, r2
    1f2a:	4606      	mov	r6, r0
    1f2c:	4698      	mov	r8, r3
    1f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f30:	f000 80b3 	beq.w	209a <_printf_i+0x182>
    1f34:	d822      	bhi.n	1f7c <_printf_i+0x64>
    1f36:	2963      	cmp	r1, #99	; 0x63
    1f38:	d036      	beq.n	1fa8 <_printf_i+0x90>
    1f3a:	d80a      	bhi.n	1f52 <_printf_i+0x3a>
    1f3c:	2900      	cmp	r1, #0
    1f3e:	f000 80b9 	beq.w	20b4 <_printf_i+0x19c>
    1f42:	2958      	cmp	r1, #88	; 0x58
    1f44:	f000 8083 	beq.w	204e <_printf_i+0x136>
    1f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1f4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    1f50:	e032      	b.n	1fb8 <_printf_i+0xa0>
    1f52:	2964      	cmp	r1, #100	; 0x64
    1f54:	d001      	beq.n	1f5a <_printf_i+0x42>
    1f56:	2969      	cmp	r1, #105	; 0x69
    1f58:	d1f6      	bne.n	1f48 <_printf_i+0x30>
    1f5a:	6820      	ldr	r0, [r4, #0]
    1f5c:	6813      	ldr	r3, [r2, #0]
    1f5e:	0605      	lsls	r5, r0, #24
    1f60:	f103 0104 	add.w	r1, r3, #4
    1f64:	d52a      	bpl.n	1fbc <_printf_i+0xa4>
    1f66:	681b      	ldr	r3, [r3, #0]
    1f68:	6011      	str	r1, [r2, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	da03      	bge.n	1f76 <_printf_i+0x5e>
    1f6e:	222d      	movs	r2, #45	; 0x2d
    1f70:	425b      	negs	r3, r3
    1f72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    1f76:	486f      	ldr	r0, [pc, #444]	; (2134 <_printf_i+0x21c>)
    1f78:	220a      	movs	r2, #10
    1f7a:	e039      	b.n	1ff0 <_printf_i+0xd8>
    1f7c:	2973      	cmp	r1, #115	; 0x73
    1f7e:	f000 809d 	beq.w	20bc <_printf_i+0x1a4>
    1f82:	d808      	bhi.n	1f96 <_printf_i+0x7e>
    1f84:	296f      	cmp	r1, #111	; 0x6f
    1f86:	d020      	beq.n	1fca <_printf_i+0xb2>
    1f88:	2970      	cmp	r1, #112	; 0x70
    1f8a:	d1dd      	bne.n	1f48 <_printf_i+0x30>
    1f8c:	6823      	ldr	r3, [r4, #0]
    1f8e:	f043 0320 	orr.w	r3, r3, #32
    1f92:	6023      	str	r3, [r4, #0]
    1f94:	e003      	b.n	1f9e <_printf_i+0x86>
    1f96:	2975      	cmp	r1, #117	; 0x75
    1f98:	d017      	beq.n	1fca <_printf_i+0xb2>
    1f9a:	2978      	cmp	r1, #120	; 0x78
    1f9c:	d1d4      	bne.n	1f48 <_printf_i+0x30>
    1f9e:	2378      	movs	r3, #120	; 0x78
    1fa0:	4865      	ldr	r0, [pc, #404]	; (2138 <_printf_i+0x220>)
    1fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1fa6:	e055      	b.n	2054 <_printf_i+0x13c>
    1fa8:	6813      	ldr	r3, [r2, #0]
    1faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1fae:	1d19      	adds	r1, r3, #4
    1fb0:	681b      	ldr	r3, [r3, #0]
    1fb2:	6011      	str	r1, [r2, #0]
    1fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1fb8:	2301      	movs	r3, #1
    1fba:	e08c      	b.n	20d6 <_printf_i+0x1be>
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
    1fc2:	6011      	str	r1, [r2, #0]
    1fc4:	bf18      	it	ne
    1fc6:	b21b      	sxthne	r3, r3
    1fc8:	e7cf      	b.n	1f6a <_printf_i+0x52>
    1fca:	6813      	ldr	r3, [r2, #0]
    1fcc:	6825      	ldr	r5, [r4, #0]
    1fce:	1d18      	adds	r0, r3, #4
    1fd0:	6010      	str	r0, [r2, #0]
    1fd2:	0628      	lsls	r0, r5, #24
    1fd4:	d501      	bpl.n	1fda <_printf_i+0xc2>
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	e002      	b.n	1fe0 <_printf_i+0xc8>
    1fda:	0668      	lsls	r0, r5, #25
    1fdc:	d5fb      	bpl.n	1fd6 <_printf_i+0xbe>
    1fde:	881b      	ldrh	r3, [r3, #0]
    1fe0:	296f      	cmp	r1, #111	; 0x6f
    1fe2:	bf14      	ite	ne
    1fe4:	220a      	movne	r2, #10
    1fe6:	2208      	moveq	r2, #8
    1fe8:	4852      	ldr	r0, [pc, #328]	; (2134 <_printf_i+0x21c>)
    1fea:	2100      	movs	r1, #0
    1fec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    1ff0:	6865      	ldr	r5, [r4, #4]
    1ff2:	2d00      	cmp	r5, #0
    1ff4:	60a5      	str	r5, [r4, #8]
    1ff6:	f2c0 8095 	blt.w	2124 <_printf_i+0x20c>
    1ffa:	6821      	ldr	r1, [r4, #0]
    1ffc:	f021 0104 	bic.w	r1, r1, #4
    2000:	6021      	str	r1, [r4, #0]
    2002:	2b00      	cmp	r3, #0
    2004:	d13d      	bne.n	2082 <_printf_i+0x16a>
    2006:	2d00      	cmp	r5, #0
    2008:	f040 808e 	bne.w	2128 <_printf_i+0x210>
    200c:	4665      	mov	r5, ip
    200e:	2a08      	cmp	r2, #8
    2010:	d10b      	bne.n	202a <_printf_i+0x112>
    2012:	6823      	ldr	r3, [r4, #0]
    2014:	07db      	lsls	r3, r3, #31
    2016:	d508      	bpl.n	202a <_printf_i+0x112>
    2018:	6923      	ldr	r3, [r4, #16]
    201a:	6862      	ldr	r2, [r4, #4]
    201c:	429a      	cmp	r2, r3
    201e:	bfde      	ittt	le
    2020:	2330      	movle	r3, #48	; 0x30
    2022:	f805 3c01 	strble.w	r3, [r5, #-1]
    2026:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    202a:	ebac 0305 	sub.w	r3, ip, r5
    202e:	6123      	str	r3, [r4, #16]
    2030:	f8cd 8000 	str.w	r8, [sp]
    2034:	463b      	mov	r3, r7
    2036:	aa03      	add	r2, sp, #12
    2038:	4621      	mov	r1, r4
    203a:	4630      	mov	r0, r6
    203c:	f7ff fef6 	bl	1e2c <_printf_common>
    2040:	3001      	adds	r0, #1
    2042:	d14d      	bne.n	20e0 <_printf_i+0x1c8>
    2044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2048:	b005      	add	sp, #20
    204a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    204e:	4839      	ldr	r0, [pc, #228]	; (2134 <_printf_i+0x21c>)
    2050:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    2054:	6813      	ldr	r3, [r2, #0]
    2056:	6821      	ldr	r1, [r4, #0]
    2058:	1d1d      	adds	r5, r3, #4
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	6015      	str	r5, [r2, #0]
    205e:	060a      	lsls	r2, r1, #24
    2060:	d50b      	bpl.n	207a <_printf_i+0x162>
    2062:	07ca      	lsls	r2, r1, #31
    2064:	bf44      	itt	mi
    2066:	f041 0120 	orrmi.w	r1, r1, #32
    206a:	6021      	strmi	r1, [r4, #0]
    206c:	b91b      	cbnz	r3, 2076 <_printf_i+0x15e>
    206e:	6822      	ldr	r2, [r4, #0]
    2070:	f022 0220 	bic.w	r2, r2, #32
    2074:	6022      	str	r2, [r4, #0]
    2076:	2210      	movs	r2, #16
    2078:	e7b7      	b.n	1fea <_printf_i+0xd2>
    207a:	064d      	lsls	r5, r1, #25
    207c:	bf48      	it	mi
    207e:	b29b      	uxthmi	r3, r3
    2080:	e7ef      	b.n	2062 <_printf_i+0x14a>
    2082:	4665      	mov	r5, ip
    2084:	fbb3 f1f2 	udiv	r1, r3, r2
    2088:	fb02 3311 	mls	r3, r2, r1, r3
    208c:	5cc3      	ldrb	r3, [r0, r3]
    208e:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2092:	460b      	mov	r3, r1
    2094:	2900      	cmp	r1, #0
    2096:	d1f5      	bne.n	2084 <_printf_i+0x16c>
    2098:	e7b9      	b.n	200e <_printf_i+0xf6>
    209a:	6813      	ldr	r3, [r2, #0]
    209c:	6825      	ldr	r5, [r4, #0]
    209e:	1d18      	adds	r0, r3, #4
    20a0:	6961      	ldr	r1, [r4, #20]
    20a2:	6010      	str	r0, [r2, #0]
    20a4:	0628      	lsls	r0, r5, #24
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	d501      	bpl.n	20ae <_printf_i+0x196>
    20aa:	6019      	str	r1, [r3, #0]
    20ac:	e002      	b.n	20b4 <_printf_i+0x19c>
    20ae:	066a      	lsls	r2, r5, #25
    20b0:	d5fb      	bpl.n	20aa <_printf_i+0x192>
    20b2:	8019      	strh	r1, [r3, #0]
    20b4:	2300      	movs	r3, #0
    20b6:	4665      	mov	r5, ip
    20b8:	6123      	str	r3, [r4, #16]
    20ba:	e7b9      	b.n	2030 <_printf_i+0x118>
    20bc:	6813      	ldr	r3, [r2, #0]
    20be:	1d19      	adds	r1, r3, #4
    20c0:	6011      	str	r1, [r2, #0]
    20c2:	681d      	ldr	r5, [r3, #0]
    20c4:	6862      	ldr	r2, [r4, #4]
    20c6:	2100      	movs	r1, #0
    20c8:	4628      	mov	r0, r5
    20ca:	f000 f8e1 	bl	2290 <memchr>
    20ce:	b108      	cbz	r0, 20d4 <_printf_i+0x1bc>
    20d0:	1b40      	subs	r0, r0, r5
    20d2:	6060      	str	r0, [r4, #4]
    20d4:	6863      	ldr	r3, [r4, #4]
    20d6:	6123      	str	r3, [r4, #16]
    20d8:	2300      	movs	r3, #0
    20da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    20de:	e7a7      	b.n	2030 <_printf_i+0x118>
    20e0:	6923      	ldr	r3, [r4, #16]
    20e2:	462a      	mov	r2, r5
    20e4:	4639      	mov	r1, r7
    20e6:	4630      	mov	r0, r6
    20e8:	47c0      	blx	r8
    20ea:	3001      	adds	r0, #1
    20ec:	d0aa      	beq.n	2044 <_printf_i+0x12c>
    20ee:	6823      	ldr	r3, [r4, #0]
    20f0:	079b      	lsls	r3, r3, #30
    20f2:	d413      	bmi.n	211c <_printf_i+0x204>
    20f4:	68e0      	ldr	r0, [r4, #12]
    20f6:	9b03      	ldr	r3, [sp, #12]
    20f8:	4298      	cmp	r0, r3
    20fa:	bfb8      	it	lt
    20fc:	4618      	movlt	r0, r3
    20fe:	e7a3      	b.n	2048 <_printf_i+0x130>
    2100:	2301      	movs	r3, #1
    2102:	464a      	mov	r2, r9
    2104:	4639      	mov	r1, r7
    2106:	4630      	mov	r0, r6
    2108:	47c0      	blx	r8
    210a:	3001      	adds	r0, #1
    210c:	d09a      	beq.n	2044 <_printf_i+0x12c>
    210e:	3501      	adds	r5, #1
    2110:	68e3      	ldr	r3, [r4, #12]
    2112:	9a03      	ldr	r2, [sp, #12]
    2114:	1a9b      	subs	r3, r3, r2
    2116:	42ab      	cmp	r3, r5
    2118:	dcf2      	bgt.n	2100 <_printf_i+0x1e8>
    211a:	e7eb      	b.n	20f4 <_printf_i+0x1dc>
    211c:	2500      	movs	r5, #0
    211e:	f104 0919 	add.w	r9, r4, #25
    2122:	e7f5      	b.n	2110 <_printf_i+0x1f8>
    2124:	2b00      	cmp	r3, #0
    2126:	d1ac      	bne.n	2082 <_printf_i+0x16a>
    2128:	7803      	ldrb	r3, [r0, #0]
    212a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    212e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2132:	e76c      	b.n	200e <_printf_i+0xf6>
    2134:	000028a1 	.word	0x000028a1
    2138:	000028b2 	.word	0x000028b2

0000213c <_sbrk_r>:
    213c:	b538      	push	{r3, r4, r5, lr}
    213e:	2300      	movs	r3, #0
    2140:	4c05      	ldr	r4, [pc, #20]	; (2158 <_sbrk_r+0x1c>)
    2142:	4605      	mov	r5, r0
    2144:	4608      	mov	r0, r1
    2146:	6023      	str	r3, [r4, #0]
    2148:	f000 f8ec 	bl	2324 <_sbrk>
    214c:	1c43      	adds	r3, r0, #1
    214e:	d102      	bne.n	2156 <_sbrk_r+0x1a>
    2150:	6823      	ldr	r3, [r4, #0]
    2152:	b103      	cbz	r3, 2156 <_sbrk_r+0x1a>
    2154:	602b      	str	r3, [r5, #0]
    2156:	bd38      	pop	{r3, r4, r5, pc}
    2158:	2000008c 	.word	0x2000008c

0000215c <__sread>:
    215c:	b510      	push	{r4, lr}
    215e:	460c      	mov	r4, r1
    2160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2164:	f000 f8a4 	bl	22b0 <_read_r>
    2168:	2800      	cmp	r0, #0
    216a:	bfab      	itete	ge
    216c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    216e:	89a3      	ldrhlt	r3, [r4, #12]
    2170:	181b      	addge	r3, r3, r0
    2172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2176:	bfac      	ite	ge
    2178:	6563      	strge	r3, [r4, #84]	; 0x54
    217a:	81a3      	strhlt	r3, [r4, #12]
    217c:	bd10      	pop	{r4, pc}

0000217e <__swrite>:
    217e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2182:	461f      	mov	r7, r3
    2184:	898b      	ldrh	r3, [r1, #12]
    2186:	4605      	mov	r5, r0
    2188:	05db      	lsls	r3, r3, #23
    218a:	460c      	mov	r4, r1
    218c:	4616      	mov	r6, r2
    218e:	d505      	bpl.n	219c <__swrite+0x1e>
    2190:	2302      	movs	r3, #2
    2192:	2200      	movs	r2, #0
    2194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2198:	f000 f868 	bl	226c <_lseek_r>
    219c:	89a3      	ldrh	r3, [r4, #12]
    219e:	4632      	mov	r2, r6
    21a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    21a4:	81a3      	strh	r3, [r4, #12]
    21a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    21aa:	463b      	mov	r3, r7
    21ac:	4628      	mov	r0, r5
    21ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    21b2:	f000 b817 	b.w	21e4 <_write_r>

000021b6 <__sseek>:
    21b6:	b510      	push	{r4, lr}
    21b8:	460c      	mov	r4, r1
    21ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    21be:	f000 f855 	bl	226c <_lseek_r>
    21c2:	1c43      	adds	r3, r0, #1
    21c4:	89a3      	ldrh	r3, [r4, #12]
    21c6:	bf15      	itete	ne
    21c8:	6560      	strne	r0, [r4, #84]	; 0x54
    21ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    21ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    21d2:	81a3      	strheq	r3, [r4, #12]
    21d4:	bf18      	it	ne
    21d6:	81a3      	strhne	r3, [r4, #12]
    21d8:	bd10      	pop	{r4, pc}

000021da <__sclose>:
    21da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    21de:	f000 b813 	b.w	2208 <_close_r>
	...

000021e4 <_write_r>:
    21e4:	b538      	push	{r3, r4, r5, lr}
    21e6:	4605      	mov	r5, r0
    21e8:	4608      	mov	r0, r1
    21ea:	4611      	mov	r1, r2
    21ec:	2200      	movs	r2, #0
    21ee:	4c05      	ldr	r4, [pc, #20]	; (2204 <_write_r+0x20>)
    21f0:	6022      	str	r2, [r4, #0]
    21f2:	461a      	mov	r2, r3
    21f4:	f7fe fbca 	bl	98c <_write>
    21f8:	1c43      	adds	r3, r0, #1
    21fa:	d102      	bne.n	2202 <_write_r+0x1e>
    21fc:	6823      	ldr	r3, [r4, #0]
    21fe:	b103      	cbz	r3, 2202 <_write_r+0x1e>
    2200:	602b      	str	r3, [r5, #0]
    2202:	bd38      	pop	{r3, r4, r5, pc}
    2204:	2000008c 	.word	0x2000008c

00002208 <_close_r>:
    2208:	b538      	push	{r3, r4, r5, lr}
    220a:	2300      	movs	r3, #0
    220c:	4c05      	ldr	r4, [pc, #20]	; (2224 <_close_r+0x1c>)
    220e:	4605      	mov	r5, r0
    2210:	4608      	mov	r0, r1
    2212:	6023      	str	r3, [r4, #0]
    2214:	f000 f85e 	bl	22d4 <_close>
    2218:	1c43      	adds	r3, r0, #1
    221a:	d102      	bne.n	2222 <_close_r+0x1a>
    221c:	6823      	ldr	r3, [r4, #0]
    221e:	b103      	cbz	r3, 2222 <_close_r+0x1a>
    2220:	602b      	str	r3, [r5, #0]
    2222:	bd38      	pop	{r3, r4, r5, pc}
    2224:	2000008c 	.word	0x2000008c

00002228 <_fstat_r>:
    2228:	b538      	push	{r3, r4, r5, lr}
    222a:	2300      	movs	r3, #0
    222c:	4c06      	ldr	r4, [pc, #24]	; (2248 <_fstat_r+0x20>)
    222e:	4605      	mov	r5, r0
    2230:	4608      	mov	r0, r1
    2232:	4611      	mov	r1, r2
    2234:	6023      	str	r3, [r4, #0]
    2236:	f000 f855 	bl	22e4 <_fstat>
    223a:	1c43      	adds	r3, r0, #1
    223c:	d102      	bne.n	2244 <_fstat_r+0x1c>
    223e:	6823      	ldr	r3, [r4, #0]
    2240:	b103      	cbz	r3, 2244 <_fstat_r+0x1c>
    2242:	602b      	str	r3, [r5, #0]
    2244:	bd38      	pop	{r3, r4, r5, pc}
    2246:	bf00      	nop
    2248:	2000008c 	.word	0x2000008c

0000224c <_isatty_r>:
    224c:	b538      	push	{r3, r4, r5, lr}
    224e:	2300      	movs	r3, #0
    2250:	4c05      	ldr	r4, [pc, #20]	; (2268 <_isatty_r+0x1c>)
    2252:	4605      	mov	r5, r0
    2254:	4608      	mov	r0, r1
    2256:	6023      	str	r3, [r4, #0]
    2258:	f000 f84c 	bl	22f4 <_isatty>
    225c:	1c43      	adds	r3, r0, #1
    225e:	d102      	bne.n	2266 <_isatty_r+0x1a>
    2260:	6823      	ldr	r3, [r4, #0]
    2262:	b103      	cbz	r3, 2266 <_isatty_r+0x1a>
    2264:	602b      	str	r3, [r5, #0]
    2266:	bd38      	pop	{r3, r4, r5, pc}
    2268:	2000008c 	.word	0x2000008c

0000226c <_lseek_r>:
    226c:	b538      	push	{r3, r4, r5, lr}
    226e:	4605      	mov	r5, r0
    2270:	4608      	mov	r0, r1
    2272:	4611      	mov	r1, r2
    2274:	2200      	movs	r2, #0
    2276:	4c05      	ldr	r4, [pc, #20]	; (228c <_lseek_r+0x20>)
    2278:	6022      	str	r2, [r4, #0]
    227a:	461a      	mov	r2, r3
    227c:	f000 f842 	bl	2304 <_lseek>
    2280:	1c43      	adds	r3, r0, #1
    2282:	d102      	bne.n	228a <_lseek_r+0x1e>
    2284:	6823      	ldr	r3, [r4, #0]
    2286:	b103      	cbz	r3, 228a <_lseek_r+0x1e>
    2288:	602b      	str	r3, [r5, #0]
    228a:	bd38      	pop	{r3, r4, r5, pc}
    228c:	2000008c 	.word	0x2000008c

00002290 <memchr>:
    2290:	b510      	push	{r4, lr}
    2292:	b2c9      	uxtb	r1, r1
    2294:	4402      	add	r2, r0
    2296:	4290      	cmp	r0, r2
    2298:	4603      	mov	r3, r0
    229a:	d101      	bne.n	22a0 <memchr+0x10>
    229c:	2300      	movs	r3, #0
    229e:	e003      	b.n	22a8 <memchr+0x18>
    22a0:	781c      	ldrb	r4, [r3, #0]
    22a2:	3001      	adds	r0, #1
    22a4:	428c      	cmp	r4, r1
    22a6:	d1f6      	bne.n	2296 <memchr+0x6>
    22a8:	4618      	mov	r0, r3
    22aa:	bd10      	pop	{r4, pc}

000022ac <__malloc_lock>:
    22ac:	4770      	bx	lr

000022ae <__malloc_unlock>:
    22ae:	4770      	bx	lr

000022b0 <_read_r>:
    22b0:	b538      	push	{r3, r4, r5, lr}
    22b2:	4605      	mov	r5, r0
    22b4:	4608      	mov	r0, r1
    22b6:	4611      	mov	r1, r2
    22b8:	2200      	movs	r2, #0
    22ba:	4c05      	ldr	r4, [pc, #20]	; (22d0 <_read_r+0x20>)
    22bc:	6022      	str	r2, [r4, #0]
    22be:	461a      	mov	r2, r3
    22c0:	f000 f828 	bl	2314 <_read>
    22c4:	1c43      	adds	r3, r0, #1
    22c6:	d102      	bne.n	22ce <_read_r+0x1e>
    22c8:	6823      	ldr	r3, [r4, #0]
    22ca:	b103      	cbz	r3, 22ce <_read_r+0x1e>
    22cc:	602b      	str	r3, [r5, #0]
    22ce:	bd38      	pop	{r3, r4, r5, pc}
    22d0:	2000008c 	.word	0x2000008c

000022d4 <_close>:
    22d4:	2258      	movs	r2, #88	; 0x58
    22d6:	4b02      	ldr	r3, [pc, #8]	; (22e0 <_close+0xc>)
    22d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22dc:	601a      	str	r2, [r3, #0]
    22de:	4770      	bx	lr
    22e0:	2000008c 	.word	0x2000008c

000022e4 <_fstat>:
    22e4:	2258      	movs	r2, #88	; 0x58
    22e6:	4b02      	ldr	r3, [pc, #8]	; (22f0 <_fstat+0xc>)
    22e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22ec:	601a      	str	r2, [r3, #0]
    22ee:	4770      	bx	lr
    22f0:	2000008c 	.word	0x2000008c

000022f4 <_isatty>:
    22f4:	2258      	movs	r2, #88	; 0x58
    22f6:	4b02      	ldr	r3, [pc, #8]	; (2300 <_isatty+0xc>)
    22f8:	2000      	movs	r0, #0
    22fa:	601a      	str	r2, [r3, #0]
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop
    2300:	2000008c 	.word	0x2000008c

00002304 <_lseek>:
    2304:	2258      	movs	r2, #88	; 0x58
    2306:	4b02      	ldr	r3, [pc, #8]	; (2310 <_lseek+0xc>)
    2308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    230c:	601a      	str	r2, [r3, #0]
    230e:	4770      	bx	lr
    2310:	2000008c 	.word	0x2000008c

00002314 <_read>:
    2314:	2258      	movs	r2, #88	; 0x58
    2316:	4b02      	ldr	r3, [pc, #8]	; (2320 <_read+0xc>)
    2318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    231c:	601a      	str	r2, [r3, #0]
    231e:	4770      	bx	lr
    2320:	2000008c 	.word	0x2000008c

00002324 <_sbrk>:
    2324:	4a04      	ldr	r2, [pc, #16]	; (2338 <_sbrk+0x14>)
    2326:	4905      	ldr	r1, [pc, #20]	; (233c <_sbrk+0x18>)
    2328:	6813      	ldr	r3, [r2, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	bf08      	it	eq
    232e:	460b      	moveq	r3, r1
    2330:	4418      	add	r0, r3
    2332:	6010      	str	r0, [r2, #0]
    2334:	4618      	mov	r0, r3
    2336:	4770      	bx	lr
    2338:	20000088 	.word	0x20000088
    233c:	20000090 	.word	0x20000090

00002340 <_exit>:
    2340:	e7fe      	b.n	2340 <_exit>
    2342:	bf00      	nop

00002344 <_init>:
    2344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2346:	bf00      	nop

00002348 <_fini>:
    2348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    234a:	bf00      	nop
    234c:	6174530a 	.word	0x6174530a
    2350:	31206567 	.word	0x31206567
    2354:	52415520 	.word	0x52415520
    2358:	6e492054 	.word	0x6e492054
    235c:	61697469 	.word	0x61697469
    2360:	617a696c 	.word	0x617a696c
    2364:	6e6f6974 	.word	0x6e6f6974
    2368:	0000000a 	.word	0x0000000a
    236c:	54524155 	.word	0x54524155
    2370:	6e492032 	.word	0x6e492032
    2374:	61697469 	.word	0x61697469
    2378:	6573696c 	.word	0x6573696c
    237c:	75532064 	.word	0x75532064
    2380:	73656363 	.word	0x73656363
    2384:	6c756673 	.word	0x6c756673
    2388:	2820796c 	.word	0x2820796c
    238c:	64756142 	.word	0x64756142
    2390:	76694420 	.word	0x76694420
    2394:	72656469 	.word	0x72656469
    2398:	3a666f20 	.word	0x3a666f20
    239c:	29642520 	.word	0x29642520
    23a0:	0000000a 	.word	0x0000000a
    23a4:	54524155 	.word	0x54524155
    23a8:	6e492032 	.word	0x6e492032
    23ac:	61697469 	.word	0x61697469
    23b0:	617a696c 	.word	0x617a696c
    23b4:	6e6f6974 	.word	0x6e6f6974
    23b8:	69614620 	.word	0x69614620
    23bc:	0a64656c 	.word	0x0a64656c
    23c0:	00000000 	.word	0x00000000
    23c4:	54524155 	.word	0x54524155
    23c8:	6e492033 	.word	0x6e492033
    23cc:	61697469 	.word	0x61697469
    23d0:	6573696c 	.word	0x6573696c
    23d4:	75532064 	.word	0x75532064
    23d8:	73656363 	.word	0x73656363
    23dc:	6c756673 	.word	0x6c756673
    23e0:	2820796c 	.word	0x2820796c
    23e4:	64756142 	.word	0x64756142
    23e8:	76694420 	.word	0x76694420
    23ec:	72656469 	.word	0x72656469
    23f0:	3a666f20 	.word	0x3a666f20
    23f4:	29642520 	.word	0x29642520
    23f8:	0000000a 	.word	0x0000000a
    23fc:	54524155 	.word	0x54524155
    2400:	6e492033 	.word	0x6e492033
    2404:	61697469 	.word	0x61697469
    2408:	617a696c 	.word	0x617a696c
    240c:	6e6f6974 	.word	0x6e6f6974
    2410:	69614620 	.word	0x69614620
    2414:	0a64656c 	.word	0x0a64656c
    2418:	00000000 	.word	0x00000000
    241c:	6174530a 	.word	0x6174530a
    2420:	32206567 	.word	0x32206567
    2424:	6d695320 	.word	0x6d695320
    2428:	20656c70 	.word	0x20656c70
    242c:	6e617254 	.word	0x6e617254
    2430:	73696d73 	.word	0x73696d73
    2434:	6e6f6973 	.word	0x6e6f6973
    2438:	54202d20 	.word	0x54202d20
    243c:	6e612058 	.word	0x6e612058
    2440:	58522064 	.word	0x58522064
    2444:	73655420 	.word	0x73655420
    2448:	00000a74 	.word	0x00000a74
    244c:	42205854 	.word	0x42205854
    2450:	65666675 	.word	0x65666675
    2454:	75462072 	.word	0x75462072
    2458:	2e206c6c 	.word	0x2e206c6c
    245c:	65722e2e 	.word	0x65722e2e
    2460:	72617473 	.word	0x72617473
    2464:	676e6974 	.word	0x676e6974
    2468:	61727420 	.word	0x61727420
    246c:	696d736e 	.word	0x696d736e
    2470:	6f697373 	.word	0x6f697373
    2474:	0000006e 	.word	0x0000006e
    2478:	54202a2a 	.word	0x54202a2a
    247c:	20545345 	.word	0x20545345
    2480:	4c494146 	.word	0x4c494146
    2484:	2a204445 	.word	0x2a204445
    2488:	45202c2a 	.word	0x45202c2a
    248c:	726f7272 	.word	0x726f7272
    2490:	646f4320 	.word	0x646f4320
    2494:	28203a65 	.word	0x28203a65
    2498:	78257830 	.word	0x78257830
    249c:	00000029 	.word	0x00000029
    24a0:	42205852 	.word	0x42205852
    24a4:	65666675 	.word	0x65666675
    24a8:	75462072 	.word	0x75462072
    24ac:	2e206c6c 	.word	0x2e206c6c
    24b0:	65722e2e 	.word	0x65722e2e
    24b4:	76696563 	.word	0x76696563
    24b8:	20676e69 	.word	0x20676e69
    24bc:	61746164 	.word	0x61746164
    24c0:	202e2e2e 	.word	0x202e2e2e
    24c4:	000a6325 	.word	0x000a6325
    24c8:	6168430a 	.word	0x6168430a
    24cc:	74636172 	.word	0x74636172
    24d0:	20737265 	.word	0x20737265
    24d4:	65636572 	.word	0x65636572
    24d8:	64657669 	.word	0x64657669
    24dc:	7325203a 	.word	0x7325203a
    24e0:	0000000a 	.word	0x0000000a
    24e4:	54202a2a 	.word	0x54202a2a
    24e8:	20545345 	.word	0x20545345
    24ec:	4c494146 	.word	0x4c494146
    24f0:	2a204445 	.word	0x2a204445
    24f4:	45202c2a 	.word	0x45202c2a
    24f8:	726f7272 	.word	0x726f7272
    24fc:	53203a20 	.word	0x53203a20
    2500:	6e697274 	.word	0x6e697274
    2504:	44207367 	.word	0x44207367
    2508:	6f4e204f 	.word	0x6f4e204f
    250c:	614d2074 	.word	0x614d2074
    2510:	21686374 	.word	0x21686374
    2514:	00000000 	.word	0x00000000
    2518:	6c6c6568 	.word	0x6c6c6568
    251c:	6f77206f 	.word	0x6f77206f
    2520:	00646c72 	.word	0x00646c72
    2524:	6174530a 	.word	0x6174530a
    2528:	33206567 	.word	0x33206567
    252c:	6c6f5020 	.word	0x6c6f5020
    2530:	676e696c 	.word	0x676e696c
    2534:	00000000 	.word	0x00000000
    2538:	53202d0a 	.word	0x53202d0a
    253c:	65676174 	.word	0x65676174
    2540:	20613320 	.word	0x20613320
    2544:	7265764f 	.word	0x7265764f
    2548:	206e7572 	.word	0x206e7572
    254c:	6c6c6f50 	.word	0x6c6c6f50
    2550:	0a676e69 	.word	0x0a676e69
    2554:	00000000 	.word	0x00000000
    2558:	42205854 	.word	0x42205854
    255c:	65666675 	.word	0x65666675
    2560:	764f2072 	.word	0x764f2072
    2564:	75727265 	.word	0x75727265
    2568:	634f206e 	.word	0x634f206e
    256c:	72727563 	.word	0x72727563
    2570:	00006465 	.word	0x00006465
    2574:	42205852 	.word	0x42205852
    2578:	65666675 	.word	0x65666675
    257c:	764f2072 	.word	0x764f2072
    2580:	75727265 	.word	0x75727265
    2584:	634f206e 	.word	0x634f206e
    2588:	72727563 	.word	0x72727563
    258c:	00006465 	.word	0x00006465
    2590:	53202d0a 	.word	0x53202d0a
    2594:	65676174 	.word	0x65676174
    2598:	20623320 	.word	0x20623320
    259c:	26205854 	.word	0x26205854
    25a0:	20585220 	.word	0x20585220
    25a4:	20515249 	.word	0x20515249
    25a8:	6c6c6f50 	.word	0x6c6c6f50
    25ac:	0a676e69 	.word	0x0a676e69
    25b0:	00000000 	.word	0x00000000
    25b4:	49205854 	.word	0x49205854
    25b8:	53205152 	.word	0x53205152
    25bc:	75746174 	.word	0x75746174
    25c0:	25203a73 	.word	0x25203a73
    25c4:	00000a64 	.word	0x00000a64
    25c8:	49205852 	.word	0x49205852
    25cc:	53205152 	.word	0x53205152
    25d0:	75746174 	.word	0x75746174
    25d4:	25203a73 	.word	0x25203a73
    25d8:	00000a64 	.word	0x00000a64
    25dc:	54202a2a 	.word	0x54202a2a
    25e0:	20545345 	.word	0x20545345
    25e4:	4c494146 	.word	0x4c494146
    25e8:	2a204445 	.word	0x2a204445
    25ec:	50202c2a 	.word	0x50202c2a
    25f0:	696c6c6f 	.word	0x696c6c6f
    25f4:	5420676e 	.word	0x5420676e
    25f8:	20747365 	.word	0x20747365
    25fc:	6f727245 	.word	0x6f727245
    2600:	6f432072 	.word	0x6f432072
    2604:	203a6564 	.word	0x203a6564
    2608:	25783028 	.word	0x25783028
    260c:	00002978 	.word	0x00002978
    2610:	6c6c6f50 	.word	0x6c6c6f50
    2614:	20676e69 	.word	0x20676e69
    2618:	74736554 	.word	0x74736554
    261c:	73615020 	.word	0x73615020
    2620:	00646573 	.word	0x00646573
    2624:	6174530a 	.word	0x6174530a
    2628:	34206567 	.word	0x34206567
    262c:	51524920 	.word	0x51524920
    2630:	0000000a 	.word	0x0000000a
    2634:	7453202d 	.word	0x7453202d
    2638:	20656761 	.word	0x20656761
    263c:	4f206134 	.word	0x4f206134
    2640:	72726576 	.word	0x72726576
    2644:	49206e75 	.word	0x49206e75
    2648:	000a5152 	.word	0x000a5152
    264c:	54524155 	.word	0x54524155
    2650:	20585420 	.word	0x20585420
    2654:	7265764f 	.word	0x7265764f
    2658:	206e7572 	.word	0x206e7572
    265c:	00515249 	.word	0x00515249
    2660:	54524155 	.word	0x54524155
    2664:	20585220 	.word	0x20585220
    2668:	7265764f 	.word	0x7265764f
    266c:	206e7572 	.word	0x206e7572
    2670:	00515249 	.word	0x00515249
    2674:	54202a2a 	.word	0x54202a2a
    2678:	20545345 	.word	0x20545345
    267c:	4c494146 	.word	0x4c494146
    2680:	2a204445 	.word	0x2a204445
    2684:	4155202a 	.word	0x4155202a
    2688:	52205452 	.word	0x52205452
    268c:	764f2058 	.word	0x764f2058
    2690:	75727265 	.word	0x75727265
    2694:	7245206e 	.word	0x7245206e
    2698:	2c726f72 	.word	0x2c726f72
    269c:	72724520 	.word	0x72724520
    26a0:	4320726f 	.word	0x4320726f
    26a4:	3a65646f 	.word	0x3a65646f
    26a8:	78302820 	.word	0x78302820
    26ac:	00297825 	.word	0x00297825
    26b0:	54524155 	.word	0x54524155
    26b4:	20585220 	.word	0x20585220
    26b8:	7265764f 	.word	0x7265764f
    26bc:	206e7572 	.word	0x206e7572
    26c0:	73736150 	.word	0x73736150
    26c4:	00006465 	.word	0x00006465
    26c8:	53202d0a 	.word	0x53202d0a
    26cc:	65676174 	.word	0x65676174
    26d0:	20623420 	.word	0x20623420
    26d4:	522f5854 	.word	0x522f5854
    26d8:	52492058 	.word	0x52492058
    26dc:	00000a51 	.word	0x00000a51
    26e0:	54524155 	.word	0x54524155
    26e4:	20585420 	.word	0x20585420
    26e8:	20515249 	.word	0x20515249
    26ec:	2e2e2e2e 	.word	0x2e2e2e2e
    26f0:	61746164 	.word	0x61746164
    26f4:	6e657320 	.word	0x6e657320
    26f8:	00000074 	.word	0x00000074
    26fc:	54524155 	.word	0x54524155
    2700:	20585220 	.word	0x20585220
    2704:	20515249 	.word	0x20515249
    2708:	2e2e2e2e 	.word	0x2e2e2e2e
    270c:	61746164 	.word	0x61746164
    2710:	63657220 	.word	0x63657220
    2714:	65766965 	.word	0x65766965
    2718:	2e2e2e64 	.word	0x2e2e2e64
    271c:	0000202e 	.word	0x0000202e
    2720:	7274530a 	.word	0x7274530a
    2724:	20676e69 	.word	0x20676e69
    2728:	65636572 	.word	0x65636572
    272c:	64657669 	.word	0x64657669
    2730:	7325203a 	.word	0x7325203a
    2734:	00000a0a 	.word	0x00000a0a
    2738:	54202a2a 	.word	0x54202a2a
    273c:	20545345 	.word	0x20545345
    2740:	4c494146 	.word	0x4c494146
    2744:	2a204445 	.word	0x2a204445
    2748:	7453202a 	.word	0x7453202a
    274c:	676e6972 	.word	0x676e6972
    2750:	6f442073 	.word	0x6f442073
    2754:	746f4e20 	.word	0x746f4e20
    2758:	74614d20 	.word	0x74614d20
    275c:	00216863 	.word	0x00216863
    2760:	726f430a 	.word	0x726f430a
    2764:	2d786574 	.word	0x2d786574
    2768:	4420334d 	.word	0x4420334d
    276c:	67697365 	.word	0x67697365
    2770:	6174536e 	.word	0x6174536e
    2774:	2d207472 	.word	0x2d207472
    2778:	52415520 	.word	0x52415520
    277c:	72442054 	.word	0x72442054
    2780:	72657669 	.word	0x72657669
    2784:	73655420 	.word	0x73655420
    2788:	202d2074 	.word	0x202d2074
    278c:	69766572 	.word	0x69766572
    2790:	6e6f6973 	.word	0x6e6f6973
    2794:	65522420 	.word	0x65522420
    2798:	69736976 	.word	0x69736976
    279c:	203a6e6f 	.word	0x203a6e6f
    27a0:	34323432 	.word	0x34323432
    27a4:	24203438 	.word	0x24203438
    27a8:	0000000a 	.word	0x0000000a
    27ac:	54202a2a 	.word	0x54202a2a
    27b0:	20545345 	.word	0x20545345
    27b4:	50494b53 	.word	0x50494b53
    27b8:	20444550 	.word	0x20444550
    27bc:	55202a2a 	.word	0x55202a2a
    27c0:	20545241 	.word	0x20545241
    27c4:	202f2032 	.word	0x202f2032
    27c8:	54524155 	.word	0x54524155
    27cc:	2f203320 	.word	0x2f203320
    27d0:	49504720 	.word	0x49504720
    27d4:	2030204f 	.word	0x2030204f
    27d8:	5047202f 	.word	0x5047202f
    27dc:	31204f49 	.word	0x31204f49
    27e0:	746f6e20 	.word	0x746f6e20
    27e4:	61766120 	.word	0x61766120
    27e8:	62616c69 	.word	0x62616c69
    27ec:	0000656c 	.word	0x0000656c
    27f0:	54202a2a 	.word	0x54202a2a
    27f4:	20545345 	.word	0x20545345
    27f8:	53534150 	.word	0x53534150
    27fc:	2a204445 	.word	0x2a204445
    2800:	00000a2a 	.word	0x00000a2a
    2804:	54202a2a 	.word	0x54202a2a
    2808:	20545345 	.word	0x20545345
    280c:	4c494146 	.word	0x4c494146
    2810:	2a204445 	.word	0x2a204445
    2814:	45202c2a 	.word	0x45202c2a
    2818:	726f7272 	.word	0x726f7272
    281c:	646f6320 	.word	0x646f6320
    2820:	28203a65 	.word	0x28203a65
    2824:	78257830 	.word	0x78257830
    2828:	00000a29 	.word	0x00000a29

0000282c <_global_impure_ptr>:
    282c:	20000008                                ... 

00002830 <__sf_fake_stderr>:
	...

00002850 <__sf_fake_stdin>:
	...

00002870 <__sf_fake_stdout>:
	...
    2890:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    28a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    28b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    28c0:	                                         ef.
