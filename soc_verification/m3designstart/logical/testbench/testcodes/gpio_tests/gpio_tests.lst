
gpio_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	00003f39 	.word	0x00003f39
      5c:	00003fa1 	.word	0x00003fa1
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	000040d9 	.word	0x000040d9
      84:	00004151 	.word	0x00004151
      88:	000041c9 	.word	0x000041c9
      8c:	00004241 	.word	0x00004241
      90:	000042b9 	.word	0x000042b9
      94:	00004331 	.word	0x00004331
      98:	000043a9 	.word	0x000043a9
      9c:	00004421 	.word	0x00004421
      a0:	00004499 	.word	0x00004499
      a4:	00004511 	.word	0x00004511
      a8:	00004589 	.word	0x00004589
      ac:	00004601 	.word	0x00004601
      b0:	00004679 	.word	0x00004679
      b4:	000046f1 	.word	0x000046f1
      b8:	00004769 	.word	0x00004769
      bc:	000047e1 	.word	0x000047e1
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	00004009 	.word	0x00004009
      ec:	00004071 	.word	0x00004071
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f004 fb85 	bl	4858 <main>
    bl    exit
     14e:	f004 fd05 	bl	4b5c <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00006697 	.word	0x00006697
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	200000c0 	.word	0x200000c0
    ldr     r0,=SystemInit
     168:	00004b4d 	.word	0x00004b4d

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <RTC_Handler+0x2>
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <RTC_Handler+0x4>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <TSC_Handler+0x2>
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <TSC_Handler+0x4>
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <TSC_Handler+0x6>
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <TSC_Handler+0x8>
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <TSC_Handler+0xa>
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <TSC_Handler+0xc>
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <TSC_Handler+0xe>
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <TSC_Handler+0x10>
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <TSC_Handler+0x12>
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <TSC_Handler+0x14>
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <TSC_Handler+0x16>
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <TSC_Handler+0x18>
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <TSC_Handler+0x1a>
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <TSC_Handler+0x1c>
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <TSC_Handler+0x1e>
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <TSC_Handler+0x20>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <CORDIO7_Handler+0x2>
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <CORDIO7_Handler+0x4>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     1f0:	6001      	str	r1, [r0, #0]
     1f2:	f3bf 8f4f 	dsb	sy
     1f6:	4770      	bx	lr

000001f8 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     1f8:	b406      	push	{r1, r2}
     1fa:	6801      	ldr	r1, [r0, #0]
     1fc:	f3bf 8f4f 	dsb	sy
     200:	0008      	movs	r0, r1
     202:	bc06      	pop	{r1, r2}
     204:	4770      	bx	lr
     206:	bf00      	nop

00000208 <gpio0_id_check>:

int gpio0_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     208:	4a09      	ldr	r2, [pc, #36]	; (230 <gpio0_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     20a:	4b0a      	ldr	r3, [pc, #40]	; (234 <gpio0_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     20c:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     20e:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     210:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     212:	2b20      	cmp	r3, #32
     214:	d001      	beq.n	21a <gpio0_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     216:	2001      	movs	r0, #1
  else
    return 0;
}
     218:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     21a:	4b07      	ldr	r3, [pc, #28]	; (238 <gpio0_id_check+0x30>)
     21c:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     21e:	2bb8      	cmp	r3, #184	; 0xb8
     220:	d1f9      	bne.n	216 <gpio0_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     222:	f000 0007 	and.w	r0, r0, #7
     226:	3803      	subs	r0, #3
     228:	bf18      	it	ne
     22a:	2001      	movne	r0, #1
     22c:	4770      	bx	lr
     22e:	bf00      	nop
     230:	40010fe8 	.word	0x40010fe8
     234:	40010fe0 	.word	0x40010fe0
     238:	40010fe4 	.word	0x40010fe4

0000023c <gpio1_id_check>:
int gpio1_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
     23c:	4a09      	ldr	r2, [pc, #36]	; (264 <gpio1_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     23e:	4b0a      	ldr	r3, [pc, #40]	; (268 <gpio1_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
     240:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     242:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
     244:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     246:	2b20      	cmp	r3, #32
     248:	d001      	beq.n	24e <gpio1_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     24a:	2001      	movs	r0, #1
  else
    return 0;
}
     24c:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8) ||
     24e:	4b07      	ldr	r3, [pc, #28]	; (26c <gpio1_id_check+0x30>)
     250:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
     252:	2bb8      	cmp	r3, #184	; 0xb8
     254:	d1f9      	bne.n	24a <gpio1_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8) ||
     256:	f000 0007 	and.w	r0, r0, #7
     25a:	3803      	subs	r0, #3
     25c:	bf18      	it	ne
     25e:	2001      	movne	r0, #1
     260:	4770      	bx	lr
     262:	bf00      	nop
     264:	40011fe8 	.word	0x40011fe8
     268:	40011fe0 	.word	0x40011fe0
     26c:	40011fe4 	.word	0x40011fe4

00000270 <gpio2_id_check>:
int gpio2_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
     270:	4a09      	ldr	r2, [pc, #36]	; (298 <gpio2_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
     272:	4b0a      	ldr	r3, [pc, #40]	; (29c <gpio2_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
     274:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
     276:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
     278:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
     27a:	2b20      	cmp	r3, #32
     27c:	d001      	beq.n	282 <gpio2_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     27e:	2001      	movs	r0, #1
  else
    return 0;
}
     280:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE4) != 0xB8) ||
     282:	4b07      	ldr	r3, [pc, #28]	; (2a0 <gpio2_id_check+0x30>)
     284:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
     286:	2bb8      	cmp	r3, #184	; 0xb8
     288:	d1f9      	bne.n	27e <gpio2_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE4) != 0xB8) ||
     28a:	f000 0007 	and.w	r0, r0, #7
     28e:	3803      	subs	r0, #3
     290:	bf18      	it	ne
     292:	2001      	movne	r0, #1
     294:	4770      	bx	lr
     296:	bf00      	nop
     298:	40011fe8 	.word	0x40011fe8
     29c:	40012fe0 	.word	0x40012fe0
     2a0:	40012fe4 	.word	0x40012fe4

000002a4 <gpio3_id_check>:
int gpio3_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO3_BASE  + 0xFE8) & 0x07;
     2a4:	4a09      	ldr	r2, [pc, #36]	; (2cc <gpio3_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
     2a6:	4b0a      	ldr	r3, [pc, #40]	; (2d0 <gpio3_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO3_BASE  + 0xFE8) & 0x07;
     2a8:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
     2aa:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO3_BASE  + 0xFE8) & 0x07;
     2ac:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
     2ae:	2b20      	cmp	r3, #32
     2b0:	d001      	beq.n	2b6 <gpio3_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     2b2:	2001      	movs	r0, #1
  else
    return 0;
}
     2b4:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE4) != 0xB8) ||
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <gpio3_id_check+0x30>)
     2b8:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
     2ba:	2bb8      	cmp	r3, #184	; 0xb8
     2bc:	d1f9      	bne.n	2b2 <gpio3_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE4) != 0xB8) ||
     2be:	f000 0007 	and.w	r0, r0, #7
     2c2:	3803      	subs	r0, #3
     2c4:	bf18      	it	ne
     2c6:	2001      	movne	r0, #1
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop
     2cc:	40013fe8 	.word	0x40013fe8
     2d0:	40013fe0 	.word	0x40013fe0
     2d4:	40013fe4 	.word	0x40013fe4

000002d8 <gpio4_id_check>:
int gpio4_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO4_BASE  + 0xFE8) & 0x07;
     2d8:	4a09      	ldr	r2, [pc, #36]	; (300 <gpio4_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
     2da:	4b0a      	ldr	r3, [pc, #40]	; (304 <gpio4_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO4_BASE  + 0xFE8) & 0x07;
     2dc:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
     2de:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO4_BASE  + 0xFE8) & 0x07;
     2e0:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
     2e2:	2b20      	cmp	r3, #32
     2e4:	d001      	beq.n	2ea <gpio4_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     2e6:	2001      	movs	r0, #1
  else
    return 0;
}
     2e8:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE4) != 0xB8) ||
     2ea:	4b07      	ldr	r3, [pc, #28]	; (308 <gpio4_id_check+0x30>)
     2ec:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
     2ee:	2bb8      	cmp	r3, #184	; 0xb8
     2f0:	d1f9      	bne.n	2e6 <gpio4_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE4) != 0xB8) ||
     2f2:	f000 0007 	and.w	r0, r0, #7
     2f6:	3803      	subs	r0, #3
     2f8:	bf18      	it	ne
     2fa:	2001      	movne	r0, #1
     2fc:	4770      	bx	lr
     2fe:	bf00      	nop
     300:	40030fe8 	.word	0x40030fe8
     304:	40030fe0 	.word	0x40030fe0
     308:	40030fe4 	.word	0x40030fe4

0000030c <gpio5_id_check>:
int gpio5_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO5_BASE  + 0xFE8) & 0x07;
     30c:	4a09      	ldr	r2, [pc, #36]	; (334 <gpio5_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
     30e:	4b0a      	ldr	r3, [pc, #40]	; (338 <gpio5_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO5_BASE  + 0xFE8) & 0x07;
     310:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
     312:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO5_BASE  + 0xFE8) & 0x07;
     314:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
     316:	2b20      	cmp	r3, #32
     318:	d001      	beq.n	31e <gpio5_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     31a:	2001      	movs	r0, #1
  else
    return 0;
}
     31c:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE4) != 0xB8) ||
     31e:	4b07      	ldr	r3, [pc, #28]	; (33c <gpio5_id_check+0x30>)
     320:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
     322:	2bb8      	cmp	r3, #184	; 0xb8
     324:	d1f9      	bne.n	31a <gpio5_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE4) != 0xB8) ||
     326:	f000 0007 	and.w	r0, r0, #7
     32a:	3803      	subs	r0, #3
     32c:	bf18      	it	ne
     32e:	2001      	movne	r0, #1
     330:	4770      	bx	lr
     332:	bf00      	nop
     334:	40031fe8 	.word	0x40031fe8
     338:	40031fe0 	.word	0x40031fe0
     33c:	40031fe4 	.word	0x40031fe4

00000340 <medium_delay>:
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     340:	f3bf 8f6f 	isb	sy
     344:	f3bf 8f6f 	isb	sy
     348:	f3bf 8f6f 	isb	sy
  int i;
  for (i=0;i<3;i++){
    small_delay();
    }
  return;
}
     34c:	4770      	bx	lr
     34e:	bf00      	nop

00000350 <gpio_masked_access_test>:
/* --------------------------------------------------------------- */
/*  GPIO masked access tests                                       */
/* --------------------------------------------------------------- */
int gpio_masked_access_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
     350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     354:	4607      	mov	r7, r0
     356:	b087      	sub	sp, #28
  unsigned int write_value;
  int test_counter = 0;
  int ul_err = 0;


  puts("GPIO mask access test");
     358:	48ce      	ldr	r0, [pc, #824]	; (694 <gpio_masked_access_test+0x344>)
     35a:	f004 fc8f 	bl	4c7c <puts>
  puts("- lower byte");
     35e:	48ce      	ldr	r0, [pc, #824]	; (698 <gpio_masked_access_test+0x348>)
     360:	f004 fc8c 	bl	4c7c <puts>

  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
     364:	4bcd      	ldr	r3, [pc, #820]	; (69c <gpio_masked_access_test+0x34c>)
     366:	429f      	cmp	r7, r3
     368:	f000 8350 	beq.w	a0c <gpio_masked_access_test+0x6bc>
    gpio_datamask        = 0xFFFF7FFE; /* exclude bits that are looped back or GPIO input in the testbench */
    gpio_byte_base       = CM3DS_MPS2_GPIO0_BASE + 0x400;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
     36c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     370:	429f      	cmp	r7, r3
     372:	d010      	beq.n	396 <gpio_masked_access_test+0x46>
    gpio_datamask        = 0xFFFFFB7F;
    gpio_byte_base       = CM3DS_MPS2_GPIO1_BASE + 0x400;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
     374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     378:	429f      	cmp	r7, r3
     37a:	f000 8378 	beq.w	a6e <gpio_masked_access_test+0x71e>
    gpio_datamask        = 0xFFFFFDFF;
    gpio_byte_base       = CM3DS_MPS2_GPIO2_BASE + 0x400;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
     37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     382:	429f      	cmp	r7, r3
     384:	f040 836a 	bne.w	a5c <gpio_masked_access_test+0x70c>
     388:	4bc5      	ldr	r3, [pc, #788]	; (6a0 <gpio_masked_access_test+0x350>)
     38a:	4ec6      	ldr	r6, [pc, #792]	; (6a4 <gpio_masked_access_test+0x354>)
     38c:	9302      	str	r3, [sp, #8]
    gpio_datamask        = 0xFFFF000F;
    gpio_byte_base       = CM3DS_MPS2_GPIO3_BASE + 0x400;
     38e:	f8df 8330 	ldr.w	r8, [pc, #816]	; 6c0 <gpio_masked_access_test+0x370>
    gpio_datamask        = 0xFFFF000F;
     392:	4dc5      	ldr	r5, [pc, #788]	; (6a8 <gpio_masked_access_test+0x358>)
     394:	e006      	b.n	3a4 <gpio_masked_access_test+0x54>
    gpio_datamask        = 0xFFFFFB7F;
     396:	f46f 6590 	mvn.w	r5, #1152	; 0x480
     39a:	4bc4      	ldr	r3, [pc, #784]	; (6ac <gpio_masked_access_test+0x35c>)
     39c:	4ec4      	ldr	r6, [pc, #784]	; (6b0 <gpio_masked_access_test+0x360>)
    gpio_byte_base       = CM3DS_MPS2_GPIO1_BASE + 0x400;
     39e:	f8df 8324 	ldr.w	r8, [pc, #804]	; 6c4 <gpio_masked_access_test+0x374>
     3a2:	9302      	str	r3, [sp, #8]
  else {
    puts ("ERROR: Input parameter invalid in function 'gpio_masked_access_test'.");
    return 1;
    }

  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
     3a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  CM3DS_MPS2_GPIO->OUTENABLESET = gpio_datamask;
  CM3DS_MPS2_GPIO->DATAOUT = 0;
     3a8:	2300      	movs	r3, #0
  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
     3aa:	627a      	str	r2, [r7, #36]	; 0x24
  CM3DS_MPS2_GPIO->OUTENABLESET = gpio_datamask;
     3ac:	613d      	str	r5, [r7, #16]
  CM3DS_MPS2_GPIO->DATAOUT = 0;
     3ae:	607b      	str	r3, [r7, #4]
     3b0:	f3bf 8f6f 	isb	sy
  int test_counter = 0;
     3b4:	469b      	mov	fp, r3
  small_delay(); /* DATA read back take time to get updated due to synchronisation registers*/
  current_value = CM3DS_MPS2_GPIO->DATA;

  for (i=0;i<256;i++){
     3b6:	4699      	mov	r9, r3
  int return_val=0;
     3b8:	469c      	mov	ip, r3
  current_value = CM3DS_MPS2_GPIO->DATA;
     3ba:	683c      	ldr	r4, [r7, #0]
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
    expected_value   = 0;
    if ((read_value                ) != (expected_value                 )) { err_code |= 0x80000000UL;}

    if (err_code != 0) {
      printf ("ERROR : LB masked access failed (0x%x) at mask = %d\n", err_code, i);
     3bc:	9601      	str	r6, [sp, #4]
     3be:	e013      	b.n	3e8 <gpio_masked_access_test+0x98>
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     3c0:	7813      	ldrb	r3, [r2, #0]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<30);}
     3c2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    if ((read_value                ) != (expected_value                 )) { err_code |= 0x80000000UL;}
     3c6:	2b00      	cmp	r3, #0
     3c8:	f040 831a 	bne.w	a00 <gpio_masked_access_test+0x6b0>
      printf ("ERROR : LB masked access failed (0x%x) at mask = %d\n", err_code, i);
     3cc:	464a      	mov	r2, r9
     3ce:	48b9      	ldr	r0, [pc, #740]	; (6b4 <gpio_masked_access_test+0x364>)
  for (i=0;i<256;i++){
     3d0:	f109 0901 	add.w	r9, r9, #1
      printf ("ERROR : LB masked access failed (0x%x) at mask = %d\n", err_code, i);
     3d4:	f004 fbde 	bl	4b94 <iprintf>
  for (i=0;i<256;i++){
     3d8:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
      return_val =1;
     3dc:	f04f 0c01 	mov.w	ip, #1
     3e0:	f108 0804 	add.w	r8, r8, #4
  for (i=0;i<256;i++){
     3e4:	f000 8140 	beq.w	668 <gpio_masked_access_test+0x318>
     3e8:	eb07 0389 	add.w	r3, r7, r9, lsl #2
    read_value       = CM3DS_MPS2_GPIO->LB_MASKED[i];
     3ec:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    expected_value   = current_value & i;
     3f0:	ea09 0604 	and.w	r6, r9, r4
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<0);}
     3f4:	4071      	eors	r1, r6
     3f6:	4229      	tst	r1, r5
     3f8:	bf18      	it	ne
     3fa:	2101      	movne	r1, #1
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     3fc:	f8b8 2000 	ldrh.w	r2, [r8]
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     400:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<1);}
     404:	ea82 0206 	eor.w	r2, r2, r6
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<0);}
     408:	bf08      	it	eq
     40a:	2100      	moveq	r1, #0
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     40c:	b280      	uxth	r0, r0
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<1);}
     40e:	422a      	tst	r2, r5
     410:	bf18      	it	ne
     412:	f041 0102 	orrne.w	r1, r1, #2
     416:	f108 0202 	add.w	r2, r8, #2
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<2);}
     41a:	b108      	cbz	r0, 420 <gpio_masked_access_test+0xd0>
     41c:	f041 0104 	orr.w	r1, r1, #4
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     420:	f898 0000 	ldrb.w	r0, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<3);}
     424:	4070      	eors	r0, r6
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     426:	f898 6001 	ldrb.w	r6, [r8, #1]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<3);}
     42a:	4228      	tst	r0, r5
     42c:	bf18      	it	ne
     42e:	f041 0108 	orrne.w	r1, r1, #8
     432:	f108 0001 	add.w	r0, r8, #1
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<4);}
     436:	b10e      	cbz	r6, 43c <gpio_masked_access_test+0xec>
     438:	f041 0110 	orr.w	r1, r1, #16
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     43c:	7816      	ldrb	r6, [r2, #0]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<5);}
     43e:	b10e      	cbz	r6, 444 <gpio_masked_access_test+0xf4>
     440:	f041 0120 	orr.w	r1, r1, #32
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 3);
     444:	f898 e003 	ldrb.w	lr, [r8, #3]
     448:	f108 0603 	add.w	r6, r8, #3
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<6);}
     44c:	f1be 0f00 	cmp.w	lr, #0
     450:	d001      	beq.n	456 <gpio_masked_access_test+0x106>
     452:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     456:	f8d3 e400 	ldr.w	lr, [r3, #1024]	; 0x400
     45a:	ea6f 0e0e 	mvn.w	lr, lr
     45e:	ea8e 0a04 	eor.w	sl, lr, r4
     462:	ea0a 0a09 	and.w	sl, sl, r9
    CM3DS_MPS2_GPIO->LB_MASKED[i] = write_value;
     466:	f8c3 e400 	str.w	lr, [r3, #1024]	; 0x400
    current_value             = (current_value & (~i)) | (write_value & i);
     46a:	ea8a 0404 	eor.w	r4, sl, r4
     46e:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->LB_MASKED[i];
     472:	f8d3 e400 	ldr.w	lr, [r3, #1024]	; 0x400
    expected_value   = current_value & i;
     476:	ea09 0a04 	and.w	sl, r9, r4
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<7);}
     47a:	ea8e 0e0a 	eor.w	lr, lr, sl
     47e:	ea1e 0f05 	tst.w	lr, r5
    read_value       = CM3DS_MPS2_GPIO->DATA;
     482:	f8d7 e000 	ldr.w	lr, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<7);}
     486:	bf18      	it	ne
     488:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<8);}
     48c:	ea84 0e0e 	eor.w	lr, r4, lr
     490:	ea1e 0f05 	tst.w	lr, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     494:	f8b8 e000 	ldrh.w	lr, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<8);}
     498:	bf18      	it	ne
     49a:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<9);}
     49e:	ea8a 0e0e 	eor.w	lr, sl, lr
     4a2:	ea1e 0f05 	tst.w	lr, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     4a6:	f8b2 e000 	ldrh.w	lr, [r2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<9);}
     4aa:	bf18      	it	ne
     4ac:	f441 7100 	orrne.w	r1, r1, #512	; 0x200
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     4b0:	fa1f fe8e 	uxth.w	lr, lr
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<10);}
     4b4:	f1be 0f00 	cmp.w	lr, #0
     4b8:	d001      	beq.n	4be <gpio_masked_access_test+0x16e>
     4ba:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     4be:	f898 e000 	ldrb.w	lr, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<11);}
     4c2:	ea8e 0e0a 	eor.w	lr, lr, sl
     4c6:	ea1e 0f05 	tst.w	lr, r5
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     4ca:	f890 e000 	ldrb.w	lr, [r0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<11);}
     4ce:	bf18      	it	ne
     4d0:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<12);}
     4d4:	f1be 0f00 	cmp.w	lr, #0
     4d8:	d001      	beq.n	4de <gpio_masked_access_test+0x18e>
     4da:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     4de:	f892 e000 	ldrb.w	lr, [r2]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<13);}
     4e2:	f1be 0f00 	cmp.w	lr, #0
     4e6:	d001      	beq.n	4ec <gpio_masked_access_test+0x19c>
     4e8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 3);
     4ec:	f896 e000 	ldrb.w	lr, [r6]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<14);}
     4f0:	f1be 0f00 	cmp.w	lr, #0
     4f4:	d001      	beq.n	4fa <gpio_masked_access_test+0x1aa>
     4f6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     4fa:	f8d3 e400 	ldr.w	lr, [r3, #1024]	; 0x400
     4fe:	ea6f 0e0e 	mvn.w	lr, lr
     502:	ea84 0a0e 	eor.w	sl, r4, lr
     506:	ea0a 0a09 	and.w	sl, sl, r9
    HW16_REG(gpio_byte_base + 4 * i) = write_value;
     50a:	fa1f fe8e 	uxth.w	lr, lr
    current_value             = (current_value & (~i)) | (write_value & i);
     50e:	ea8a 0404 	eor.w	r4, sl, r4
    HW16_REG(gpio_byte_base + 4 * i) = write_value;
     512:	f8a8 e000 	strh.w	lr, [r8]
     516:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->LB_MASKED[i];
     51a:	f8d3 e400 	ldr.w	lr, [r3, #1024]	; 0x400
    expected_value   = current_value & i;
     51e:	ea09 0a04 	and.w	sl, r9, r4
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<15);}
     522:	ea8e 0e0a 	eor.w	lr, lr, sl
     526:	ea1e 0f05 	tst.w	lr, r5
    read_value       = CM3DS_MPS2_GPIO->DATA;
     52a:	f8d7 e000 	ldr.w	lr, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<15);}
     52e:	bf18      	it	ne
     530:	f441 4100 	orrne.w	r1, r1, #32768	; 0x8000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<16);}
     534:	ea84 0e0e 	eor.w	lr, r4, lr
     538:	ea1e 0f05 	tst.w	lr, r5
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     53c:	f8d3 e400 	ldr.w	lr, [r3, #1024]	; 0x400
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<16);}
     540:	bf18      	it	ne
     542:	f441 3180 	orrne.w	r1, r1, #65536	; 0x10000
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     546:	ea6f 0e0e 	mvn.w	lr, lr
    HW16_REG(gpio_byte_base + 4 * i + 2) = write_value;
     54a:	fa1f fe8e 	uxth.w	lr, lr
     54e:	f8a2 e000 	strh.w	lr, [r2]
     552:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->DATA;
     556:	f8d7 e000 	ldr.w	lr, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<17);}
     55a:	ea84 0e0e 	eor.w	lr, r4, lr
     55e:	ea1e 0f05 	tst.w	lr, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     562:	f8b8 e000 	ldrh.w	lr, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<17);}
     566:	bf18      	it	ne
     568:	f441 3100 	orrne.w	r1, r1, #131072	; 0x20000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<18);}
     56c:	ea8a 0e0e 	eor.w	lr, sl, lr
     570:	ea1e 0f05 	tst.w	lr, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     574:	f8b2 e000 	ldrh.w	lr, [r2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<18);}
     578:	bf18      	it	ne
     57a:	f441 2180 	orrne.w	r1, r1, #262144	; 0x40000
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     57e:	fa1f fe8e 	uxth.w	lr, lr
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<19);}
     582:	f1be 0f00 	cmp.w	lr, #0
     586:	d001      	beq.n	58c <gpio_masked_access_test+0x23c>
     588:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     58c:	f898 e000 	ldrb.w	lr, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<20);}
     590:	ea8e 0a0a 	eor.w	sl, lr, sl
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     594:	f890 e000 	ldrb.w	lr, [r0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<20);}
     598:	ea1a 0f05 	tst.w	sl, r5
     59c:	bf18      	it	ne
     59e:	f441 1180 	orrne.w	r1, r1, #1048576	; 0x100000
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<21);}
     5a2:	f1be 0f00 	cmp.w	lr, #0
     5a6:	d001      	beq.n	5ac <gpio_masked_access_test+0x25c>
     5a8:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     5ac:	f892 e000 	ldrb.w	lr, [r2]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<22);}
     5b0:	f1be 0f00 	cmp.w	lr, #0
     5b4:	d001      	beq.n	5ba <gpio_masked_access_test+0x26a>
     5b6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 3);
     5ba:	7836      	ldrb	r6, [r6, #0]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<23);}
     5bc:	b10e      	cbz	r6, 5c2 <gpio_masked_access_test+0x272>
     5be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     5c2:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
     5c6:	43f6      	mvns	r6, r6
     5c8:	ea84 0e06 	eor.w	lr, r4, r6
     5cc:	ea0e 0e09 	and.w	lr, lr, r9
    HW8_REG(gpio_byte_base + 4 * i) = write_value;
     5d0:	b2f6      	uxtb	r6, r6
    current_value             = (current_value & (~i)) | (write_value & i);
     5d2:	ea84 040e 	eor.w	r4, r4, lr
    HW8_REG(gpio_byte_base + 4 * i) = write_value;
     5d6:	f888 6000 	strb.w	r6, [r8]
     5da:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->DATA;
     5de:	683e      	ldr	r6, [r7, #0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<24);}
     5e0:	4066      	eors	r6, r4
     5e2:	422e      	tst	r6, r5
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     5e4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<24);}
     5e8:	bf18      	it	ne
     5ea:	f041 7180 	orrne.w	r1, r1, #16777216	; 0x1000000
    write_value               = ~CM3DS_MPS2_GPIO->LB_MASKED[i];
     5ee:	43f6      	mvns	r6, r6
    HW8_REG(gpio_byte_base + 4 * i + 1) = write_value;
     5f0:	b2f6      	uxtb	r6, r6
     5f2:	7006      	strb	r6, [r0, #0]
     5f4:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->DATA;
     5f8:	683e      	ldr	r6, [r7, #0]
    read_value       = CM3DS_MPS2_GPIO->LB_MASKED[i];
     5fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<25);}
     5fe:	4066      	eors	r6, r4
     600:	422e      	tst	r6, r5
    expected_value   = current_value & i;
     602:	ea09 0604 	and.w	r6, r9, r4
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<26);}
     606:	ea83 0306 	eor.w	r3, r3, r6
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<25);}
     60a:	bf18      	it	ne
     60c:	f041 7100 	orrne.w	r1, r1, #33554432	; 0x2000000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<26);}
     610:	422b      	tst	r3, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     612:	f8b8 3000 	ldrh.w	r3, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<26);}
     616:	bf18      	it	ne
     618:	f041 6180 	orrne.w	r1, r1, #67108864	; 0x4000000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<27);}
     61c:	4073      	eors	r3, r6
     61e:	422b      	tst	r3, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     620:	8813      	ldrh	r3, [r2, #0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<27);}
     622:	bf18      	it	ne
     624:	f041 6100 	orrne.w	r1, r1, #134217728	; 0x8000000
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     628:	b29b      	uxth	r3, r3
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<28);}
     62a:	b10b      	cbz	r3, 630 <gpio_masked_access_test+0x2e0>
     62c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     630:	f898 3000 	ldrb.w	r3, [r8]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<29);}
     634:	4073      	eors	r3, r6
     636:	422b      	tst	r3, r5
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     638:	7803      	ldrb	r3, [r0, #0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<29);}
     63a:	bf18      	it	ne
     63c:	f041 5100 	orrne.w	r1, r1, #536870912	; 0x20000000
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<30);}
     640:	2b00      	cmp	r3, #0
     642:	f47f aebd 	bne.w	3c0 <gpio_masked_access_test+0x70>
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     646:	7813      	ldrb	r3, [r2, #0]
    if ((read_value                ) != (expected_value                 )) { err_code |= 0x80000000UL;}
     648:	2b00      	cmp	r3, #0
     64a:	f040 81d9 	bne.w	a00 <gpio_masked_access_test+0x6b0>
    if (err_code != 0) {
     64e:	2900      	cmp	r1, #0
     650:	f47f aebc 	bne.w	3cc <gpio_masked_access_test+0x7c>
  for (i=0;i<256;i++){
     654:	f109 0901 	add.w	r9, r9, #1
     658:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
      err_code = 0;
      }else test_counter++;
     65c:	f10b 0b01 	add.w	fp, fp, #1
     660:	f108 0804 	add.w	r8, r8, #4
  for (i=0;i<256;i++){
     664:	f47f aec0 	bne.w	3e8 <gpio_masked_access_test+0x98>
    }

    if(test_counter == 256){
     668:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
     66c:	9e01      	ldr	r6, [sp, #4]
     66e:	f8cd c010 	str.w	ip, [sp, #16]
     672:	f000 81d2 	beq.w	a1a <gpio_masked_access_test+0x6ca>
      puts("Lower Byte Mask Access Tests Passed\n");
    }
    else{
      puts("Lower Byte Mask Access Tests Failed\n");
     676:	4810      	ldr	r0, [pc, #64]	; (6b8 <gpio_masked_access_test+0x368>)
     678:	f004 fb00 	bl	4c7c <puts>
      ul_err = 1;
     67c:	2301      	movs	r3, #1
     67e:	9305      	str	r3, [sp, #20]
    }

  test_counter = 0;
     680:	2300      	movs	r3, #0

  puts("- upper byte");
     682:	480e      	ldr	r0, [pc, #56]	; (6bc <gpio_masked_access_test+0x36c>)
  test_counter = 0;
     684:	9303      	str	r3, [sp, #12]
  gpio_byte_base       = gpio_byte_base + 0x400;

  for (i=0;i<256;i++){
     686:	4698      	mov	r8, r3
     688:	ea4f 2914 	mov.w	r9, r4, lsr #8
  puts("- upper byte");
     68c:	f004 faf6 	bl	4c7c <puts>
     690:	9701      	str	r7, [sp, #4]
     692:	e02e      	b.n	6f2 <gpio_masked_access_test+0x3a2>
     694:	00005aac 	.word	0x00005aac
     698:	00005ac4 	.word	0x00005ac4
     69c:	40010000 	.word	0x40010000
     6a0:	00ffff00 	.word	0x00ffff00
     6a4:	40013800 	.word	0x40013800
     6a8:	ffff000f 	.word	0xffff000f
     6ac:	00fffffb 	.word	0x00fffffb
     6b0:	40011800 	.word	0x40011800
     6b4:	00005b1c 	.word	0x00005b1c
     6b8:	00005b7c 	.word	0x00005b7c
     6bc:	00005ba4 	.word	0x00005ba4
     6c0:	40013400 	.word	0x40013400
     6c4:	40011400 	.word	0x40011400
    expected_value   = 0;
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<29);}

    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
    expected_value   = (current_value>>8) & i;
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<30);}
     6c8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000

    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
    expected_value   = 0;
    if ((read_value                ) != (expected_value                 )) { err_code |= (0x80000000UL);}
     6cc:	2b00      	cmp	r3, #0
     6ce:	f040 819a 	bne.w	a06 <gpio_masked_access_test+0x6b6>



    if (err_code != 0) {
      printf ("ERROR : UB masked access failed (0x%x) at mask = %d\n", err_code, i);
     6d2:	4642      	mov	r2, r8
     6d4:	48d4      	ldr	r0, [pc, #848]	; (a28 <gpio_masked_access_test+0x6d8>)
     6d6:	f004 fa5d 	bl	4b94 <iprintf>
      return_val =1;
     6da:	2301      	movs	r3, #1
  for (i=0;i<256;i++){
     6dc:	f108 0801 	add.w	r8, r8, #1
      return_val =1;
     6e0:	9304      	str	r3, [sp, #16]
      err_code = 0;
      UartEndSimulation();
     6e2:	f004 fa23 	bl	4b2c <UartEndSimulation>
  for (i=0;i<256;i++){
     6e6:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     6ea:	f106 0604 	add.w	r6, r6, #4
     6ee:	f000 816e 	beq.w	9ce <gpio_masked_access_test+0x67e>
     6f2:	9b01      	ldr	r3, [sp, #4]
     6f4:	eb03 0088 	add.w	r0, r3, r8, lsl #2
    read_value       = CM3DS_MPS2_GPIO->UB_MASKED[i];
     6f8:	f8d0 1800 	ldr.w	r1, [r0, #2048]	; 0x800
     6fc:	ea4f 2308 	mov.w	r3, r8, lsl #8
    expected_value   = current_value & (i<<8);
     700:	ea03 0204 	and.w	r2, r3, r4
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<0);}
     704:	4051      	eors	r1, r2
     706:	4229      	tst	r1, r5
     708:	bf18      	it	ne
     70a:	2101      	movne	r1, #1
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     70c:	f8b6 c000 	ldrh.w	ip, [r6]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<0);}
     710:	bf08      	it	eq
     712:	2100      	moveq	r1, #0
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<1);}
     714:	ea82 020c 	eor.w	r2, r2, ip
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     718:	f8b6 c002 	ldrh.w	ip, [r6, #2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<1);}
     71c:	422a      	tst	r2, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     71e:	fa1f fc8c 	uxth.w	ip, ip
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<1);}
     722:	bf18      	it	ne
     724:	f041 0102 	orrne.w	r1, r1, #2
     728:	1cb2      	adds	r2, r6, #2
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<2);}
     72a:	f1bc 0f00 	cmp.w	ip, #0
     72e:	d001      	beq.n	734 <gpio_masked_access_test+0x3e4>
     730:	f041 0104 	orr.w	r1, r1, #4
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     734:	f896 c000 	ldrb.w	ip, [r6]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<4);}
     738:	f1bc 0f00 	cmp.w	ip, #0
     73c:	d001      	beq.n	742 <gpio_masked_access_test+0x3f2>
     73e:	f041 0110 	orr.w	r1, r1, #16
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     742:	f896 c001 	ldrb.w	ip, [r6, #1]
    expected_value   = (current_value>>8) & i;
     746:	ea09 0908 	and.w	r9, r9, r8
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<3);}
     74a:	9f02      	ldr	r7, [sp, #8]
     74c:	ea89 090c 	eor.w	r9, r9, ip
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     750:	f892 c000 	ldrb.w	ip, [r2]
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<3);}
     754:	ea19 0f07 	tst.w	r9, r7
     758:	f106 0e01 	add.w	lr, r6, #1
     75c:	bf18      	it	ne
     75e:	f041 0108 	orrne.w	r1, r1, #8
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<5);}
     762:	f1bc 0f00 	cmp.w	ip, #0
     766:	d001      	beq.n	76c <gpio_masked_access_test+0x41c>
     768:	f041 0120 	orr.w	r1, r1, #32
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 3);
     76c:	f896 c003 	ldrb.w	ip, [r6, #3]
     770:	f106 0903 	add.w	r9, r6, #3
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<6);}
     774:	f1bc 0f00 	cmp.w	ip, #0
     778:	d001      	beq.n	77e <gpio_masked_access_test+0x42e>
     77a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     77e:	f8d0 a800 	ldr.w	sl, [r0, #2048]	; 0x800
     782:	ebc8 6c08 	rsb	ip, r8, r8, lsl #24
     786:	ea6f 0a0a 	mvn.w	sl, sl
     78a:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
     78e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     792:	ea0c 0404 	and.w	r4, ip, r4
     796:	ea03 0b0a 	and.w	fp, r3, sl
    CM3DS_MPS2_GPIO->UB_MASKED[i] = write_value;
     79a:	f8c0 a800 	str.w	sl, [r0, #2048]	; 0x800
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     79e:	ea4b 0404 	orr.w	r4, fp, r4
     7a2:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->UB_MASKED[i];
     7a6:	f8d0 b800 	ldr.w	fp, [r0, #2048]	; 0x800
    expected_value   = current_value & (i<<8);
     7aa:	ea03 0a04 	and.w	sl, r3, r4
    read_value       = CM3DS_MPS2_GPIO->DATA;
     7ae:	9f01      	ldr	r7, [sp, #4]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<7);}
     7b0:	ea8b 0b0a 	eor.w	fp, fp, sl
     7b4:	ea1b 0f05 	tst.w	fp, r5
    read_value       = CM3DS_MPS2_GPIO->DATA;
     7b8:	f8d7 b000 	ldr.w	fp, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<7);}
     7bc:	bf18      	it	ne
     7be:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<8);}
     7c2:	ea84 0b0b 	eor.w	fp, r4, fp
     7c6:	ea1b 0f05 	tst.w	fp, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     7ca:	f8b6 b000 	ldrh.w	fp, [r6]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<8);}
     7ce:	bf18      	it	ne
     7d0:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<9);}
     7d4:	ea8a 0a0b 	eor.w	sl, sl, fp
     7d8:	ea1a 0f05 	tst.w	sl, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     7dc:	f8b2 a000 	ldrh.w	sl, [r2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<9);}
     7e0:	bf18      	it	ne
     7e2:	f441 7100 	orrne.w	r1, r1, #512	; 0x200
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     7e6:	fa1f fa8a 	uxth.w	sl, sl
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<10);}
     7ea:	f1ba 0f00 	cmp.w	sl, #0
     7ee:	d001      	beq.n	7f4 <gpio_masked_access_test+0x4a4>
     7f0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     7f4:	f896 a000 	ldrb.w	sl, [r6]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<11);}
     7f8:	f1ba 0f00 	cmp.w	sl, #0
     7fc:	d001      	beq.n	802 <gpio_masked_access_test+0x4b2>
     7fe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     802:	f89e b000 	ldrb.w	fp, [lr]
    expected_value   = (current_value>>8) & i;
     806:	ea08 2a14 	and.w	sl, r8, r4, lsr #8
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<12);}
     80a:	9f02      	ldr	r7, [sp, #8]
     80c:	ea8a 0a0b 	eor.w	sl, sl, fp
     810:	ea1a 0f07 	tst.w	sl, r7
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     814:	f892 a000 	ldrb.w	sl, [r2]
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<12);}
     818:	bf18      	it	ne
     81a:	f441 5180 	orrne.w	r1, r1, #4096	; 0x1000
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<13);}
     81e:	f1ba 0f00 	cmp.w	sl, #0
     822:	d001      	beq.n	828 <gpio_masked_access_test+0x4d8>
     824:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 3);
     828:	f899 a000 	ldrb.w	sl, [r9]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<14);}
     82c:	f1ba 0f00 	cmp.w	sl, #0
     830:	d001      	beq.n	836 <gpio_masked_access_test+0x4e6>
     832:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     836:	f8d0 a800 	ldr.w	sl, [r0, #2048]	; 0x800
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     83a:	ea0c 0404 	and.w	r4, ip, r4
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     83e:	ea6f 0a0a 	mvn.w	sl, sl
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     842:	ea03 0b0a 	and.w	fp, r3, sl
    HW16_REG(gpio_byte_base + 4 * i) = write_value;
     846:	fa1f fa8a 	uxth.w	sl, sl
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     84a:	ea4b 0404 	orr.w	r4, fp, r4
    HW16_REG(gpio_byte_base + 4 * i) = write_value;
     84e:	f8a6 a000 	strh.w	sl, [r6]
     852:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->UB_MASKED[i];
     856:	f8d0 a800 	ldr.w	sl, [r0, #2048]	; 0x800
    expected_value   = current_value & (i<<8);
     85a:	ea03 0b04 	and.w	fp, r3, r4
    read_value       = CM3DS_MPS2_GPIO->DATA;
     85e:	9f01      	ldr	r7, [sp, #4]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<15);}
     860:	ea8a 0a0b 	eor.w	sl, sl, fp
     864:	ea1a 0f05 	tst.w	sl, r5
    read_value       = CM3DS_MPS2_GPIO->DATA;
     868:	f8d7 a000 	ldr.w	sl, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<15);}
     86c:	bf18      	it	ne
     86e:	f441 4100 	orrne.w	r1, r1, #32768	; 0x8000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<16);}
     872:	ea84 0a0a 	eor.w	sl, r4, sl
     876:	ea1a 0f05 	tst.w	sl, r5
    write_value               = ~HW16_REG(gpio_byte_base + 4 * i + 2);
     87a:	f8b2 a000 	ldrh.w	sl, [r2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<16);}
     87e:	bf18      	it	ne
     880:	f441 3180 	orrne.w	r1, r1, #65536	; 0x10000
    write_value               = ~HW16_REG(gpio_byte_base + 4 * i + 2);
     884:	ea6f 0a0a 	mvn.w	sl, sl
    HW16_REG(gpio_byte_base + 4 * i + 2) = write_value;
     888:	fa1f fa8a 	uxth.w	sl, sl
     88c:	f8a2 a000 	strh.w	sl, [r2]
     890:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->DATA;
     894:	9f01      	ldr	r7, [sp, #4]
     896:	f8d7 a000 	ldr.w	sl, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<17);}
     89a:	ea84 0a0a 	eor.w	sl, r4, sl
     89e:	ea1a 0f05 	tst.w	sl, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     8a2:	f8b6 a000 	ldrh.w	sl, [r6]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<17);}
     8a6:	bf18      	it	ne
     8a8:	f441 3100 	orrne.w	r1, r1, #131072	; 0x20000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<18);}
     8ac:	ea8b 0b0a 	eor.w	fp, fp, sl
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     8b0:	f8b2 a000 	ldrh.w	sl, [r2]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<18);}
     8b4:	ea1b 0f05 	tst.w	fp, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     8b8:	fa1f fa8a 	uxth.w	sl, sl
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<18);}
     8bc:	bf18      	it	ne
     8be:	f441 2180 	orrne.w	r1, r1, #262144	; 0x40000
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<19);}
     8c2:	f1ba 0f00 	cmp.w	sl, #0
     8c6:	d001      	beq.n	8cc <gpio_masked_access_test+0x57c>
     8c8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     8cc:	f896 a000 	ldrb.w	sl, [r6]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<20);}
     8d0:	f1ba 0f00 	cmp.w	sl, #0
     8d4:	d001      	beq.n	8da <gpio_masked_access_test+0x58a>
     8d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     8da:	f89e b000 	ldrb.w	fp, [lr]
    expected_value   = (current_value>>8) & i;
     8de:	ea08 2a14 	and.w	sl, r8, r4, lsr #8
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<21);}
     8e2:	9f02      	ldr	r7, [sp, #8]
     8e4:	ea8a 0a0b 	eor.w	sl, sl, fp
     8e8:	ea1a 0f07 	tst.w	sl, r7
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     8ec:	f892 a000 	ldrb.w	sl, [r2]
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<21);}
     8f0:	bf18      	it	ne
     8f2:	f441 1100 	orrne.w	r1, r1, #2097152	; 0x200000
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<22);}
     8f6:	f1ba 0f00 	cmp.w	sl, #0
     8fa:	d001      	beq.n	900 <gpio_masked_access_test+0x5b0>
     8fc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 3);
     900:	f899 9000 	ldrb.w	r9, [r9]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<23);}
     904:	f1b9 0f00 	cmp.w	r9, #0
     908:	d001      	beq.n	90e <gpio_masked_access_test+0x5be>
     90a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     90e:	f8d0 9800 	ldr.w	r9, [r0, #2048]	; 0x800
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     912:	ea0c 0404 	and.w	r4, ip, r4
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     916:	ea6f 0909 	mvn.w	r9, r9
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     91a:	ea03 0c09 	and.w	ip, r3, r9
    HW8_REG(gpio_byte_base + 4 * i + 1) = (write_value>>8) & 0xFF;
     91e:	f3c9 2907 	ubfx	r9, r9, #8, #8
    current_value             = (current_value & (~(i<<8))) | (write_value & (i<<8));
     922:	ea4c 0404 	orr.w	r4, ip, r4
    HW8_REG(gpio_byte_base + 4 * i + 1) = (write_value>>8) & 0xFF;
     926:	f88e 9000 	strb.w	r9, [lr]
     92a:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->DATA;
     92e:	9f01      	ldr	r7, [sp, #4]
     930:	f8d7 c000 	ldr.w	ip, [r7]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<24);}
     934:	ea84 0c0c 	eor.w	ip, r4, ip
     938:	ea1c 0f05 	tst.w	ip, r5
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     93c:	f8d0 c800 	ldr.w	ip, [r0, #2048]	; 0x800
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<24);}
     940:	bf18      	it	ne
     942:	f041 7180 	orrne.w	r1, r1, #16777216	; 0x1000000
    write_value               = ~CM3DS_MPS2_GPIO->UB_MASKED[i];
     946:	ea6f 0c0c 	mvn.w	ip, ip
    HW8_REG(gpio_byte_base + 4 * i ) = (write_value) & 0xFF;
     94a:	fa5f fc8c 	uxtb.w	ip, ip
     94e:	f886 c000 	strb.w	ip, [r6]
     952:	f3bf 8f6f 	isb	sy
    read_value       = CM3DS_MPS2_GPIO->DATA;
     956:	9f01      	ldr	r7, [sp, #4]
    expected_value   = current_value & (i<<8);
     958:	4023      	ands	r3, r4
    read_value       = CM3DS_MPS2_GPIO->DATA;
     95a:	f8d7 c000 	ldr.w	ip, [r7]
    read_value       = CM3DS_MPS2_GPIO->UB_MASKED[i];
     95e:	f8d0 0800 	ldr.w	r0, [r0, #2048]	; 0x800
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<25);}
     962:	ea84 0c0c 	eor.w	ip, r4, ip
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<26);}
     966:	4058      	eors	r0, r3
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<25);}
     968:	ea1c 0f05 	tst.w	ip, r5
     96c:	bf18      	it	ne
     96e:	f041 7100 	orrne.w	r1, r1, #33554432	; 0x2000000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<26);}
     972:	4228      	tst	r0, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i);
     974:	8830      	ldrh	r0, [r6, #0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<26);}
     976:	bf18      	it	ne
     978:	f041 6180 	orrne.w	r1, r1, #67108864	; 0x4000000
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<27);}
     97c:	4043      	eors	r3, r0
     97e:	422b      	tst	r3, r5
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     980:	8813      	ldrh	r3, [r2, #0]
    if ((read_value & gpio_datamask) != (expected_value  & gpio_datamask)) { err_code |= (1<<27);}
     982:	bf18      	it	ne
     984:	f041 6100 	orrne.w	r1, r1, #134217728	; 0x8000000
    read_value       = HW16_REG(gpio_byte_base + 4 * i + 2);
     988:	b29b      	uxth	r3, r3
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<28);}
     98a:	b10b      	cbz	r3, 990 <gpio_masked_access_test+0x640>
     98c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
    read_value       = HW8_REG(gpio_byte_base + 4 * i);
     990:	7833      	ldrb	r3, [r6, #0]
    if ((read_value                ) != (expected_value                 )) { err_code |= (1<<29);}
     992:	b10b      	cbz	r3, 998 <gpio_masked_access_test+0x648>
     994:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 1);
     998:	f89e 0000 	ldrb.w	r0, [lr]
    expected_value   = (current_value>>8) & i;
     99c:	ea4f 2914 	mov.w	r9, r4, lsr #8
     9a0:	ea09 0308 	and.w	r3, r9, r8
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<30);}
     9a4:	4043      	eors	r3, r0
     9a6:	9802      	ldr	r0, [sp, #8]
     9a8:	4203      	tst	r3, r0
    read_value       = HW8_REG(gpio_byte_base + 4 * i + 2);
     9aa:	7813      	ldrb	r3, [r2, #0]
    if ((read_value & (gpio_datamask>>8)) != (expected_value  & (gpio_datamask>>8))) { err_code |= (1<<30);}
     9ac:	f47f ae8c 	bne.w	6c8 <gpio_masked_access_test+0x378>
    if ((read_value                ) != (expected_value                 )) { err_code |= (0x80000000UL);}
     9b0:	bb4b      	cbnz	r3, a06 <gpio_masked_access_test+0x6b6>
    if (err_code != 0) {
     9b2:	2900      	cmp	r1, #0
     9b4:	f47f ae8d 	bne.w	6d2 <gpio_masked_access_test+0x382>
      }
      else test_counter++;
     9b8:	9b03      	ldr	r3, [sp, #12]
  for (i=0;i<256;i++){
     9ba:	f108 0801 	add.w	r8, r8, #1
      else test_counter++;
     9be:	3301      	adds	r3, #1
  for (i=0;i<256;i++){
     9c0:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
      else test_counter++;
     9c4:	9303      	str	r3, [sp, #12]
     9c6:	f106 0604 	add.w	r6, r6, #4
  for (i=0;i<256;i++){
     9ca:	f47f ae92 	bne.w	6f2 <gpio_masked_access_test+0x3a2>
    }

    if(test_counter == 256){
     9ce:	9b03      	ldr	r3, [sp, #12]
     9d0:	9f01      	ldr	r7, [sp, #4]
     9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     9d6:	d037      	beq.n	a48 <gpio_masked_access_test+0x6f8>
      puts("Upper Byte Mask Access Tests Passed\n");
    }
    else{
      puts("Upper Byte Mask Access Tests Failed\n");
     9d8:	4814      	ldr	r0, [pc, #80]	; (a2c <gpio_masked_access_test+0x6dc>)
     9da:	f004 f94f 	bl	4c7c <puts>
      ul_err |= 2;
     9de:	9b05      	ldr	r3, [sp, #20]
     9e0:	f043 0302 	orr.w	r3, r3, #2
     9e4:	9305      	str	r3, [sp, #20]
     9e6:	4619      	mov	r1, r3
      }

    if(ul_err) printf("Mask Access Tests Failed, Error Code: (0x%x)\n", ul_err);
     9e8:	4811      	ldr	r0, [pc, #68]	; (a30 <gpio_masked_access_test+0x6e0>)
     9ea:	f004 f8d3 	bl	4b94 <iprintf>
    else puts("Mask Access Tests Passed\n");

  /* Clean up */
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
     9ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  CM3DS_MPS2_GPIO->DATAOUT = 0;
     9f2:	2300      	movs	r3, #0
     9f4:	9804      	ldr	r0, [sp, #16]
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
     9f6:	617a      	str	r2, [r7, #20]
  CM3DS_MPS2_GPIO->DATAOUT = 0;
     9f8:	607b      	str	r3, [r7, #4]

  return(return_val);
}
     9fa:	b007      	add	sp, #28
     9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((read_value                ) != (expected_value                 )) { err_code |= 0x80000000UL;}
     a00:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
     a04:	e4e2      	b.n	3cc <gpio_masked_access_test+0x7c>
    if ((read_value                ) != (expected_value                 )) { err_code |= (0x80000000UL);}
     a06:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
     a0a:	e662      	b.n	6d2 <gpio_masked_access_test+0x382>
     a0c:	4b09      	ldr	r3, [pc, #36]	; (a34 <gpio_masked_access_test+0x6e4>)
     a0e:	4e0a      	ldr	r6, [pc, #40]	; (a38 <gpio_masked_access_test+0x6e8>)
     a10:	9302      	str	r3, [sp, #8]
    gpio_byte_base       = CM3DS_MPS2_GPIO0_BASE + 0x400;
     a12:	f8df 8030 	ldr.w	r8, [pc, #48]	; a44 <gpio_masked_access_test+0x6f4>
    gpio_datamask        = 0xFFFF7FFE; /* exclude bits that are looped back or GPIO input in the testbench */
     a16:	4d09      	ldr	r5, [pc, #36]	; (a3c <gpio_masked_access_test+0x6ec>)
     a18:	e4c4      	b.n	3a4 <gpio_masked_access_test+0x54>
      puts("Lower Byte Mask Access Tests Passed\n");
     a1a:	4809      	ldr	r0, [pc, #36]	; (a40 <gpio_masked_access_test+0x6f0>)
     a1c:	f004 f92e 	bl	4c7c <puts>
  int ul_err = 0;
     a20:	2300      	movs	r3, #0
     a22:	9305      	str	r3, [sp, #20]
     a24:	e62c      	b.n	680 <gpio_masked_access_test+0x330>
     a26:	bf00      	nop
     a28:	00005bb4 	.word	0x00005bb4
     a2c:	00005c14 	.word	0x00005c14
     a30:	00005c3c 	.word	0x00005c3c
     a34:	00ffff7f 	.word	0x00ffff7f
     a38:	40010800 	.word	0x40010800
     a3c:	ffff7ffe 	.word	0xffff7ffe
     a40:	00005b54 	.word	0x00005b54
     a44:	40010400 	.word	0x40010400
      puts("Upper Byte Mask Access Tests Passed\n");
     a48:	480d      	ldr	r0, [pc, #52]	; (a80 <gpio_masked_access_test+0x730>)
     a4a:	f004 f917 	bl	4c7c <puts>
    if(ul_err) printf("Mask Access Tests Failed, Error Code: (0x%x)\n", ul_err);
     a4e:	9b05      	ldr	r3, [sp, #20]
     a50:	2b00      	cmp	r3, #0
     a52:	d1c8      	bne.n	9e6 <gpio_masked_access_test+0x696>
    else puts("Mask Access Tests Passed\n");
     a54:	480b      	ldr	r0, [pc, #44]	; (a84 <gpio_masked_access_test+0x734>)
     a56:	f004 f911 	bl	4c7c <puts>
     a5a:	e7c8      	b.n	9ee <gpio_masked_access_test+0x69e>
    puts ("ERROR: Input parameter invalid in function 'gpio_masked_access_test'.");
     a5c:	480a      	ldr	r0, [pc, #40]	; (a88 <gpio_masked_access_test+0x738>)
     a5e:	f004 f90d 	bl	4c7c <puts>
    return 1;
     a62:	2301      	movs	r3, #1
     a64:	4618      	mov	r0, r3
     a66:	9304      	str	r3, [sp, #16]
}
     a68:	b007      	add	sp, #28
     a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a6e:	4b07      	ldr	r3, [pc, #28]	; (a8c <gpio_masked_access_test+0x73c>)
     a70:	4e07      	ldr	r6, [pc, #28]	; (a90 <gpio_masked_access_test+0x740>)
     a72:	9302      	str	r3, [sp, #8]
    gpio_byte_base       = CM3DS_MPS2_GPIO2_BASE + 0x400;
     a74:	f8df 801c 	ldr.w	r8, [pc, #28]	; a94 <gpio_masked_access_test+0x744>
    gpio_datamask        = 0xFFFFFDFF;
     a78:	f46f 7500 	mvn.w	r5, #512	; 0x200
     a7c:	e492      	b.n	3a4 <gpio_masked_access_test+0x54>
     a7e:	bf00      	nop
     a80:	00005bec 	.word	0x00005bec
     a84:	00005c6c 	.word	0x00005c6c
     a88:	00005ad4 	.word	0x00005ad4
     a8c:	00fffffd 	.word	0x00fffffd
     a90:	40012800 	.word	0x40012800
     a94:	40012400 	.word	0x40012400

00000a98 <gpio_register_rw_test>:

/* --------------------------------------------------------------- */
/*  GPIO register read/write tests                                */
/* --------------------------------------------------------------- */

int gpio_register_rw_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
     a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int gpio_altfunc_usedmask;
  unsigned int gpio_base;
  unsigned int saved_altfunc;


  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
     a9c:	4b61      	ldr	r3, [pc, #388]	; (c24 <gpio_register_rw_test+0x18c>)
int gpio_register_rw_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
     a9e:	b0d5      	sub	sp, #340	; 0x154
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
     aa0:	4298      	cmp	r0, r3
int gpio_register_rw_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
     aa2:	4680      	mov	r8, r0
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
     aa4:	f001 834a 	beq.w	213c <gpio_register_rw_test+0x16a4>
    gpio_altfunc_mask      = GPIO0_ALTERNATE_FUNC_MASK; /* Mask bits that are not implemented */
    gpio_altfunc_initval   = GPIO0_ALTERNATE_FUNC_DEFAULT;
    gpio_altfunc_usedmask  = 0xFFFFFFFF;
    gpio_base              = CM3DS_MPS2_GPIO0_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
     aa8:	4b5f      	ldr	r3, [pc, #380]	; (c28 <gpio_register_rw_test+0x190>)
     aaa:	4298      	cmp	r0, r3
     aac:	f000 80d4 	beq.w	c58 <gpio_register_rw_test+0x1c0>
    gpio_altfunc_mask     = GPIO1_ALTERNATE_FUNC_MASK; /* Mask bits that are not implemented */
    gpio_altfunc_initval  = GPIO1_ALTERNATE_FUNC_DEFAULT;
    gpio_altfunc_usedmask = 0xFFFFFFFF;
    gpio_base             = CM3DS_MPS2_GPIO1_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
     ab0:	4b5e      	ldr	r3, [pc, #376]	; (c2c <gpio_register_rw_test+0x194>)
     ab2:	4298      	cmp	r0, r3
     ab4:	f001 842e 	beq.w	2314 <gpio_register_rw_test+0x187c>
    gpio_altfunc_mask     = GPIO2_ALTERNATE_FUNC_MASK; /* Mask bits that are not implemented */
    gpio_altfunc_initval  = GPIO2_ALTERNATE_FUNC_DEFAULT;
    gpio_altfunc_usedmask = 0xFFFFFFFF;
    gpio_base             = CM3DS_MPS2_GPIO2_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
     ab8:	4b5d      	ldr	r3, [pc, #372]	; (c30 <gpio_register_rw_test+0x198>)
     aba:	4298      	cmp	r0, r3
     abc:	f041 8404 	bne.w	22c8 <gpio_register_rw_test+0x1830>
    saved_altfunc = CM3DS_MPS2_GPIO3->ALTFUNCSET; /* Keep a copy of current ALTFUNC */
     ac0:	6983      	ldr	r3, [r0, #24]
     ac2:	4d5c      	ldr	r5, [pc, #368]	; (c34 <gpio_register_rw_test+0x19c>)
     ac4:	9353      	str	r3, [sp, #332]	; 0x14c
     ac6:	4b5c      	ldr	r3, [pc, #368]	; (c38 <gpio_register_rw_test+0x1a0>)
     ac8:	4629      	mov	r1, r5
     aca:	9346      	str	r3, [sp, #280]	; 0x118
     acc:	3b01      	subs	r3, #1
     ace:	9309      	str	r3, [sp, #36]	; 0x24
     ad0:	3b01      	subs	r3, #1
     ad2:	930d      	str	r3, [sp, #52]	; 0x34
     ad4:	3b03      	subs	r3, #3
     ad6:	9347      	str	r3, [sp, #284]	; 0x11c
     ad8:	3b01      	subs	r3, #1
     ada:	9348      	str	r3, [sp, #288]	; 0x120
     adc:	3b01      	subs	r3, #1
     ade:	931c      	str	r3, [sp, #112]	; 0x70
     ae0:	3b01      	subs	r3, #1
     ae2:	9322      	str	r3, [sp, #136]	; 0x88
     ae4:	3b01      	subs	r3, #1
     ae6:	931e      	str	r3, [sp, #120]	; 0x78
     ae8:	3b01      	subs	r3, #1
     aea:	9323      	str	r3, [sp, #140]	; 0x8c
     aec:	3b01      	subs	r3, #1
     aee:	930a      	str	r3, [sp, #40]	; 0x28
     af0:	3b04      	subs	r3, #4
     af2:	9324      	str	r3, [sp, #144]	; 0x90
     af4:	3b01      	subs	r3, #1
     af6:	9349      	str	r3, [sp, #292]	; 0x124
     af8:	3b01      	subs	r3, #1
     afa:	9325      	str	r3, [sp, #148]	; 0x94
     afc:	3b01      	subs	r3, #1
     afe:	9326      	str	r3, [sp, #152]	; 0x98
     b00:	3b01      	subs	r3, #1
     b02:	9312      	str	r3, [sp, #72]	; 0x48
     b04:	3b01      	subs	r3, #1
     b06:	934a      	str	r3, [sp, #296]	; 0x128
     b08:	3b01      	subs	r3, #1
     b0a:	934b      	str	r3, [sp, #300]	; 0x12c
     b0c:	3b01      	subs	r3, #1
     b0e:	934c      	str	r3, [sp, #304]	; 0x130
     b10:	3b01      	subs	r3, #1
     b12:	9327      	str	r3, [sp, #156]	; 0x9c
     b14:	3b02      	subs	r3, #2
     b16:	9328      	str	r3, [sp, #160]	; 0xa0
     b18:	3b01      	subs	r3, #1
     b1a:	9329      	str	r3, [sp, #164]	; 0xa4
     b1c:	3b01      	subs	r3, #1
     b1e:	930c      	str	r3, [sp, #48]	; 0x30
     b20:	3b05      	subs	r3, #5
     b22:	934d      	str	r3, [sp, #308]	; 0x134
     b24:	3301      	adds	r3, #1
     b26:	932a      	str	r3, [sp, #168]	; 0xa8
     b28:	3b03      	subs	r3, #3
     b2a:	9311      	str	r3, [sp, #68]	; 0x44
     b2c:	3301      	adds	r3, #1
     b2e:	930b      	str	r3, [sp, #44]	; 0x2c
     b30:	3b14      	subs	r3, #20
     b32:	934e      	str	r3, [sp, #312]	; 0x138
     b34:	4b41      	ldr	r3, [pc, #260]	; (c3c <gpio_register_rw_test+0x1a4>)
     b36:	4f42      	ldr	r7, [pc, #264]	; (c40 <gpio_register_rw_test+0x1a8>)
     b38:	9313      	str	r3, [sp, #76]	; 0x4c
     b3a:	4b42      	ldr	r3, [pc, #264]	; (c44 <gpio_register_rw_test+0x1ac>)
     b3c:	4e42      	ldr	r6, [pc, #264]	; (c48 <gpio_register_rw_test+0x1b0>)
     b3e:	934f      	str	r3, [sp, #316]	; 0x13c
     b40:	3b01      	subs	r3, #1
     b42:	931d      	str	r3, [sp, #116]	; 0x74
     b44:	3b01      	subs	r3, #1
     b46:	932b      	str	r3, [sp, #172]	; 0xac
     b48:	3b01      	subs	r3, #1
     b4a:	933c      	str	r3, [sp, #240]	; 0xf0
     b4c:	3b01      	subs	r3, #1
     b4e:	933d      	str	r3, [sp, #244]	; 0xf4
     b50:	3310      	adds	r3, #16
     b52:	932c      	str	r3, [sp, #176]	; 0xb0
     b54:	3301      	adds	r3, #1
     b56:	9350      	str	r3, [sp, #320]	; 0x140
     b58:	3b02      	subs	r3, #2
     b5a:	931f      	str	r3, [sp, #124]	; 0x7c
     b5c:	3304      	adds	r3, #4
     b5e:	933e      	str	r3, [sp, #248]	; 0xf8
     b60:	f603 73eb 	addw	r3, r3, #4075	; 0xfeb
     b64:	9338      	str	r3, [sp, #224]	; 0xe0
     b66:	3b04      	subs	r3, #4
     b68:	932d      	str	r3, [sp, #180]	; 0xb4
     b6a:	3b04      	subs	r3, #4
     b6c:	932e      	str	r3, [sp, #184]	; 0xb8
     b6e:	3b04      	subs	r3, #4
     b70:	9339      	str	r3, [sp, #228]	; 0xe4
     b72:	3b04      	subs	r3, #4
     b74:	932f      	str	r3, [sp, #188]	; 0xbc
     b76:	3b04      	subs	r3, #4
     b78:	9330      	str	r3, [sp, #192]	; 0xc0
     b7a:	3b04      	subs	r3, #4
     b7c:	9331      	str	r3, [sp, #196]	; 0xc4
     b7e:	3b04      	subs	r3, #4
     b80:	9332      	str	r3, [sp, #200]	; 0xc8
     b82:	3b04      	subs	r3, #4
     b84:	933a      	str	r3, [sp, #232]	; 0xe8
     b86:	3b04      	subs	r3, #4
     b88:	9333      	str	r3, [sp, #204]	; 0xcc
     b8a:	3b04      	subs	r3, #4
     b8c:	9334      	str	r3, [sp, #208]	; 0xd0
     b8e:	3b04      	subs	r3, #4
     b90:	9351      	str	r3, [sp, #324]	; 0x144
     b92:	332a      	adds	r3, #42	; 0x2a
     b94:	933b      	str	r3, [sp, #236]	; 0xec
     b96:	3b04      	subs	r3, #4
     b98:	9335      	str	r3, [sp, #212]	; 0xd4
     b9a:	3b04      	subs	r3, #4
     b9c:	9336      	str	r3, [sp, #216]	; 0xd8
     b9e:	3b04      	subs	r3, #4
     ba0:	9337      	str	r3, [sp, #220]	; 0xdc
     ba2:	3b04      	subs	r3, #4
     ba4:	933f      	str	r3, [sp, #252]	; 0xfc
     ba6:	3b04      	subs	r3, #4
     ba8:	9340      	str	r3, [sp, #256]	; 0x100
     baa:	3b04      	subs	r3, #4
     bac:	9341      	str	r3, [sp, #260]	; 0x104
     bae:	3b04      	subs	r3, #4
     bb0:	9342      	str	r3, [sp, #264]	; 0x108
     bb2:	3b04      	subs	r3, #4
     bb4:	9343      	str	r3, [sp, #268]	; 0x10c
     bb6:	3b04      	subs	r3, #4
     bb8:	9344      	str	r3, [sp, #272]	; 0x110
     bba:	3b04      	subs	r3, #4
     bbc:	9345      	str	r3, [sp, #276]	; 0x114
     bbe:	3b04      	subs	r3, #4
     bc0:	9352      	str	r3, [sp, #328]	; 0x148
     bc2:	332d      	adds	r3, #45	; 0x2d
     bc4:	9315      	str	r3, [sp, #84]	; 0x54
     bc6:	3b04      	subs	r3, #4
     bc8:	9314      	str	r3, [sp, #80]	; 0x50
     bca:	3b04      	subs	r3, #4
     bcc:	9319      	str	r3, [sp, #100]	; 0x64
     bce:	3b04      	subs	r3, #4
     bd0:	9316      	str	r3, [sp, #88]	; 0x58
     bd2:	3b04      	subs	r3, #4
     bd4:	931a      	str	r3, [sp, #104]	; 0x68
     bd6:	3b04      	subs	r3, #4
     bd8:	9317      	str	r3, [sp, #92]	; 0x5c
     bda:	3b04      	subs	r3, #4
     bdc:	9318      	str	r3, [sp, #96]	; 0x60
     bde:	3b04      	subs	r3, #4
     be0:	9310      	str	r3, [sp, #64]	; 0x40
     be2:	3b04      	subs	r3, #4
     be4:	930e      	str	r3, [sp, #56]	; 0x38
     be6:	3b04      	subs	r3, #4
     be8:	930f      	str	r3, [sp, #60]	; 0x3c
     bea:	3b04      	subs	r3, #4
     bec:	9320      	str	r3, [sp, #128]	; 0x80
     bee:	3b04      	subs	r3, #4
     bf0:	9321      	str	r3, [sp, #132]	; 0x84
     bf2:	3322      	adds	r3, #34	; 0x22
     bf4:	9301      	str	r3, [sp, #4]
     bf6:	3b04      	subs	r3, #4
     bf8:	9302      	str	r3, [sp, #8]
     bfa:	3b04      	subs	r3, #4
     bfc:	9303      	str	r3, [sp, #12]
     bfe:	3b04      	subs	r3, #4
     c00:	9304      	str	r3, [sp, #16]
     c02:	3b04      	subs	r3, #4
     c04:	9305      	str	r3, [sp, #20]
     c06:	3b04      	subs	r3, #4
     c08:	9306      	str	r3, [sp, #24]
     c0a:	3b04      	subs	r3, #4
     c0c:	9307      	str	r3, [sp, #28]
     c0e:	3b04      	subs	r3, #4
     c10:	9308      	str	r3, [sp, #32]
     c12:	3b04      	subs	r3, #4
     c14:	f8df 9034 	ldr.w	r9, [pc, #52]	; c4c <gpio_register_rw_test+0x1b4>
     c18:	f8df b034 	ldr.w	fp, [pc, #52]	; c50 <gpio_register_rw_test+0x1b8>
     c1c:	9300      	str	r3, [sp, #0]
    gpio_datamask        = 0xFFFF000F;
     c1e:	f8df a034 	ldr.w	sl, [pc, #52]	; c54 <gpio_register_rw_test+0x1bc>
     c22:	e0ca      	b.n	dba <gpio_register_rw_test+0x322>
     c24:	40010000 	.word	0x40010000
     c28:	40011000 	.word	0x40011000
     c2c:	40012000 	.word	0x40012000
     c30:	40013000 	.word	0x40013000
     c34:	40013fd0 	.word	0x40013fd0
     c38:	4001303b 	.word	0x4001303b
     c3c:	00ffff00 	.word	0x00ffff00
     c40:	40013038 	.word	0x40013038
     c44:	40013005 	.word	0x40013005
     c48:	40013018 	.word	0x40013018
     c4c:	40013ffc 	.word	0x40013ffc
     c50:	40013ff8 	.word	0x40013ff8
     c54:	ffff000f 	.word	0xffff000f
    saved_altfunc = CM3DS_MPS2_GPIO1->ALTFUNCSET; /* Keep a copy of current ALTFUNC */
     c58:	6983      	ldr	r3, [r0, #24]
     c5a:	4dac      	ldr	r5, [pc, #688]	; (f0c <gpio_register_rw_test+0x474>)
     c5c:	9353      	str	r3, [sp, #332]	; 0x14c
     c5e:	4bac      	ldr	r3, [pc, #688]	; (f10 <gpio_register_rw_test+0x478>)
     c60:	4629      	mov	r1, r5
     c62:	9346      	str	r3, [sp, #280]	; 0x118
     c64:	3b01      	subs	r3, #1
     c66:	9309      	str	r3, [sp, #36]	; 0x24
     c68:	3b01      	subs	r3, #1
     c6a:	930d      	str	r3, [sp, #52]	; 0x34
     c6c:	3b03      	subs	r3, #3
     c6e:	9347      	str	r3, [sp, #284]	; 0x11c
     c70:	3b01      	subs	r3, #1
     c72:	9348      	str	r3, [sp, #288]	; 0x120
     c74:	3b01      	subs	r3, #1
     c76:	931c      	str	r3, [sp, #112]	; 0x70
     c78:	3b01      	subs	r3, #1
     c7a:	9322      	str	r3, [sp, #136]	; 0x88
     c7c:	3b01      	subs	r3, #1
     c7e:	931e      	str	r3, [sp, #120]	; 0x78
     c80:	3b01      	subs	r3, #1
     c82:	9323      	str	r3, [sp, #140]	; 0x8c
     c84:	3b01      	subs	r3, #1
     c86:	930a      	str	r3, [sp, #40]	; 0x28
     c88:	3b04      	subs	r3, #4
     c8a:	9324      	str	r3, [sp, #144]	; 0x90
     c8c:	3b01      	subs	r3, #1
     c8e:	9349      	str	r3, [sp, #292]	; 0x124
     c90:	3b01      	subs	r3, #1
     c92:	9325      	str	r3, [sp, #148]	; 0x94
     c94:	3b01      	subs	r3, #1
     c96:	9326      	str	r3, [sp, #152]	; 0x98
     c98:	3b01      	subs	r3, #1
     c9a:	9312      	str	r3, [sp, #72]	; 0x48
     c9c:	3b01      	subs	r3, #1
     c9e:	934a      	str	r3, [sp, #296]	; 0x128
     ca0:	3b01      	subs	r3, #1
     ca2:	934b      	str	r3, [sp, #300]	; 0x12c
     ca4:	3b01      	subs	r3, #1
     ca6:	934c      	str	r3, [sp, #304]	; 0x130
     ca8:	3b01      	subs	r3, #1
     caa:	9327      	str	r3, [sp, #156]	; 0x9c
     cac:	3b02      	subs	r3, #2
     cae:	9328      	str	r3, [sp, #160]	; 0xa0
     cb0:	3b01      	subs	r3, #1
     cb2:	9329      	str	r3, [sp, #164]	; 0xa4
     cb4:	3b01      	subs	r3, #1
     cb6:	930c      	str	r3, [sp, #48]	; 0x30
     cb8:	3b05      	subs	r3, #5
     cba:	934d      	str	r3, [sp, #308]	; 0x134
     cbc:	3301      	adds	r3, #1
     cbe:	932a      	str	r3, [sp, #168]	; 0xa8
     cc0:	3b03      	subs	r3, #3
     cc2:	9311      	str	r3, [sp, #68]	; 0x44
     cc4:	3301      	adds	r3, #1
     cc6:	930b      	str	r3, [sp, #44]	; 0x2c
     cc8:	3b14      	subs	r3, #20
     cca:	934e      	str	r3, [sp, #312]	; 0x138
     ccc:	4b91      	ldr	r3, [pc, #580]	; (f14 <gpio_register_rw_test+0x47c>)
    gpio_datamask        = 0xFFFFFB7F;
     cce:	f46f 6a90 	mvn.w	sl, #1152	; 0x480
     cd2:	9313      	str	r3, [sp, #76]	; 0x4c
     cd4:	4b90      	ldr	r3, [pc, #576]	; (f18 <gpio_register_rw_test+0x480>)
     cd6:	4f91      	ldr	r7, [pc, #580]	; (f1c <gpio_register_rw_test+0x484>)
     cd8:	934f      	str	r3, [sp, #316]	; 0x13c
     cda:	3b01      	subs	r3, #1
     cdc:	931d      	str	r3, [sp, #116]	; 0x74
     cde:	3b01      	subs	r3, #1
     ce0:	932b      	str	r3, [sp, #172]	; 0xac
     ce2:	3b01      	subs	r3, #1
     ce4:	933c      	str	r3, [sp, #240]	; 0xf0
     ce6:	3b01      	subs	r3, #1
     ce8:	933d      	str	r3, [sp, #244]	; 0xf4
     cea:	3310      	adds	r3, #16
     cec:	932c      	str	r3, [sp, #176]	; 0xb0
     cee:	3301      	adds	r3, #1
     cf0:	9350      	str	r3, [sp, #320]	; 0x140
     cf2:	3b02      	subs	r3, #2
     cf4:	931f      	str	r3, [sp, #124]	; 0x7c
     cf6:	3304      	adds	r3, #4
     cf8:	933e      	str	r3, [sp, #248]	; 0xf8
     cfa:	f603 73eb 	addw	r3, r3, #4075	; 0xfeb
     cfe:	9338      	str	r3, [sp, #224]	; 0xe0
     d00:	3b04      	subs	r3, #4
     d02:	932d      	str	r3, [sp, #180]	; 0xb4
     d04:	3b04      	subs	r3, #4
     d06:	932e      	str	r3, [sp, #184]	; 0xb8
     d08:	3b04      	subs	r3, #4
     d0a:	9339      	str	r3, [sp, #228]	; 0xe4
     d0c:	3b04      	subs	r3, #4
     d0e:	932f      	str	r3, [sp, #188]	; 0xbc
     d10:	3b04      	subs	r3, #4
     d12:	9330      	str	r3, [sp, #192]	; 0xc0
     d14:	3b04      	subs	r3, #4
     d16:	9331      	str	r3, [sp, #196]	; 0xc4
     d18:	3b04      	subs	r3, #4
     d1a:	9332      	str	r3, [sp, #200]	; 0xc8
     d1c:	3b04      	subs	r3, #4
     d1e:	933a      	str	r3, [sp, #232]	; 0xe8
     d20:	3b04      	subs	r3, #4
     d22:	9333      	str	r3, [sp, #204]	; 0xcc
     d24:	3b04      	subs	r3, #4
     d26:	9334      	str	r3, [sp, #208]	; 0xd0
     d28:	3b04      	subs	r3, #4
     d2a:	9351      	str	r3, [sp, #324]	; 0x144
     d2c:	332a      	adds	r3, #42	; 0x2a
     d2e:	933b      	str	r3, [sp, #236]	; 0xec
     d30:	3b04      	subs	r3, #4
     d32:	9335      	str	r3, [sp, #212]	; 0xd4
     d34:	3b04      	subs	r3, #4
     d36:	9336      	str	r3, [sp, #216]	; 0xd8
     d38:	3b04      	subs	r3, #4
     d3a:	9337      	str	r3, [sp, #220]	; 0xdc
     d3c:	3b04      	subs	r3, #4
     d3e:	933f      	str	r3, [sp, #252]	; 0xfc
     d40:	3b04      	subs	r3, #4
     d42:	9340      	str	r3, [sp, #256]	; 0x100
     d44:	3b04      	subs	r3, #4
     d46:	9341      	str	r3, [sp, #260]	; 0x104
     d48:	3b04      	subs	r3, #4
     d4a:	9342      	str	r3, [sp, #264]	; 0x108
     d4c:	3b04      	subs	r3, #4
     d4e:	9343      	str	r3, [sp, #268]	; 0x10c
     d50:	3b04      	subs	r3, #4
     d52:	9344      	str	r3, [sp, #272]	; 0x110
     d54:	3b04      	subs	r3, #4
     d56:	9345      	str	r3, [sp, #276]	; 0x114
     d58:	3b04      	subs	r3, #4
     d5a:	9352      	str	r3, [sp, #328]	; 0x148
     d5c:	332d      	adds	r3, #45	; 0x2d
     d5e:	9315      	str	r3, [sp, #84]	; 0x54
     d60:	3b04      	subs	r3, #4
     d62:	9314      	str	r3, [sp, #80]	; 0x50
     d64:	3b04      	subs	r3, #4
     d66:	9319      	str	r3, [sp, #100]	; 0x64
     d68:	3b04      	subs	r3, #4
     d6a:	9316      	str	r3, [sp, #88]	; 0x58
     d6c:	3b04      	subs	r3, #4
     d6e:	931a      	str	r3, [sp, #104]	; 0x68
     d70:	3b04      	subs	r3, #4
     d72:	9317      	str	r3, [sp, #92]	; 0x5c
     d74:	3b04      	subs	r3, #4
     d76:	9318      	str	r3, [sp, #96]	; 0x60
     d78:	3b04      	subs	r3, #4
     d7a:	9310      	str	r3, [sp, #64]	; 0x40
     d7c:	3b04      	subs	r3, #4
     d7e:	930e      	str	r3, [sp, #56]	; 0x38
     d80:	3b04      	subs	r3, #4
     d82:	930f      	str	r3, [sp, #60]	; 0x3c
     d84:	3b04      	subs	r3, #4
     d86:	9320      	str	r3, [sp, #128]	; 0x80
     d88:	3b04      	subs	r3, #4
     d8a:	9321      	str	r3, [sp, #132]	; 0x84
     d8c:	3322      	adds	r3, #34	; 0x22
     d8e:	9301      	str	r3, [sp, #4]
     d90:	3b04      	subs	r3, #4
     d92:	9302      	str	r3, [sp, #8]
     d94:	3b04      	subs	r3, #4
     d96:	9303      	str	r3, [sp, #12]
     d98:	3b04      	subs	r3, #4
     d9a:	9304      	str	r3, [sp, #16]
     d9c:	3b04      	subs	r3, #4
     d9e:	9305      	str	r3, [sp, #20]
     da0:	3b04      	subs	r3, #4
     da2:	9306      	str	r3, [sp, #24]
     da4:	3b04      	subs	r3, #4
     da6:	9307      	str	r3, [sp, #28]
     da8:	3b04      	subs	r3, #4
     daa:	9308      	str	r3, [sp, #32]
     dac:	4e5c      	ldr	r6, [pc, #368]	; (f20 <gpio_register_rw_test+0x488>)
     dae:	3b04      	subs	r3, #4
     db0:	f8df 9180 	ldr.w	r9, [pc, #384]	; f34 <gpio_register_rw_test+0x49c>
     db4:	f8df b180 	ldr.w	fp, [pc, #384]	; f38 <gpio_register_rw_test+0x4a0>
     db8:	9300      	str	r3, [sp, #0]
  else {
    puts ("ERROR: Input parameter invalid in function 'gpio_register_rw_test'.");
    return 1;
    }

  puts("GPIO R/W test");
     dba:	485a      	ldr	r0, [pc, #360]	; (f24 <gpio_register_rw_test+0x48c>)
     dbc:	911b      	str	r1, [sp, #108]	; 0x6c
     dbe:	f003 ff5d 	bl	4c7c <puts>
  puts("- initial values");
     dc2:	4859      	ldr	r0, [pc, #356]	; (f28 <gpio_register_rw_test+0x490>)
     dc4:	f003 ff5a 	bl	4c7c <puts>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     dc8:	2140      	movs	r1, #64	; 0x40
     dca:	4b58      	ldr	r3, [pc, #352]	; (f2c <gpio_register_rw_test+0x494>)
     dcc:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
     dd0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     dd4:	2180      	movs	r1, #128	; 0x80
     dd6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     dda:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     dde:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     de2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     de6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     dea:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     dee:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     df2:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
     df6:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
     dfa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     e02:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     e0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     e0e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     e12:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
     e16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
     e1a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
     e1e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
     e22:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
     e26:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     e3e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     e4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    NVIC_DisableIRQ(((IRQn_Type)(((int)PORT0_0_IRQn) + i)));
    }

  /* Test initial values. */
  /* Current data value could be affected by external signal */
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
     e52:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
     e56:	4590      	cmp	r8, r2
     e58:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     e5c:	991b      	ldr	r1, [sp, #108]	; 0x6c
     e5e:	f001 822a 	beq.w	22b6 <gpio_register_rw_test+0x181e>
  unsigned int err_code=0;
     e62:	2400      	movs	r4, #0
    /* By default GPIO #0 signals are pulled up */
    if (CM3DS_MPS2_GPIO->DATA      != 0x0000FFFF) {err_code |= (1<<0); }
    }

  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x00000000) {err_code |= (1<<1); }
     e64:	f8d8 3004 	ldr.w	r3, [r8, #4]
     e68:	b10b      	cbz	r3, e6e <gpio_register_rw_test+0x3d6>
     e6a:	f044 0402 	orr.w	r4, r4, #2
  if (CM3DS_MPS2_GPIO->OUTENABLESET != 0x00000000) {err_code |= (1<<2); }
     e6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
     e72:	b10b      	cbz	r3, e78 <gpio_register_rw_test+0x3e0>
     e74:	f044 0404 	orr.w	r4, r4, #4

  /* Alternate function initial value can be affected by
     1) Verilog parameter
     2) Retargeting initialization code */
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_usedmask) != (gpio_altfunc_initval & gpio_altfunc_usedmask))
     e78:	f8d8 3018 	ldr.w	r3, [r8, #24]
     e7c:	b10b      	cbz	r3, e82 <gpio_register_rw_test+0x3ea>
    {err_code |= (1<<3); }
     e7e:	f044 0408 	orr.w	r4, r4, #8

  if (CM3DS_MPS2_GPIO->INTENSET     != 0x00000000) {err_code |= (1<<4); }
     e82:	f8d8 3020 	ldr.w	r3, [r8, #32]
     e86:	b10b      	cbz	r3, e8c <gpio_register_rw_test+0x3f4>
     e88:	f044 0410 	orr.w	r4, r4, #16
  if (CM3DS_MPS2_GPIO->INTTYPESET   != 0x00000000) {err_code |= (1<<5); }
     e8c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
     e90:	b10b      	cbz	r3, e96 <gpio_register_rw_test+0x3fe>
     e92:	f044 0420 	orr.w	r4, r4, #32
  if (CM3DS_MPS2_GPIO->INTPOLSET    != 0x00000000) {err_code |= (1<<6); }
     e96:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
     e9a:	b10b      	cbz	r3, ea0 <gpio_register_rw_test+0x408>
     e9c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  if (CM3DS_MPS2_GPIO->INTSTATUS    != 0x00000000) {err_code |= (1<<7); }
     ea0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
     ea4:	b10b      	cbz	r3, eaa <gpio_register_rw_test+0x412>
     ea6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  puts ("- check ID values (WORD accesses)");
     eaa:	4821      	ldr	r0, [pc, #132]	; (f30 <gpio_register_rw_test+0x498>)
     eac:	911b      	str	r1, [sp, #108]	; 0x6c
     eae:	f003 fee5 	bl	4c7c <puts>
  if (HW32_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<8); }
     eb2:	682b      	ldr	r3, [r5, #0]
     eb4:	991b      	ldr	r1, [sp, #108]	; 0x6c
     eb6:	2b04      	cmp	r3, #4
  if (HW32_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<9); }
     eb8:	9b00      	ldr	r3, [sp, #0]
  if (HW32_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<8); }
     eba:	bf18      	it	ne
     ebc:	f444 7480 	orrne.w	r4, r4, #256	; 0x100
  if (HW32_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<9); }
     ec0:	681b      	ldr	r3, [r3, #0]
     ec2:	b10b      	cbz	r3, ec8 <gpio_register_rw_test+0x430>
     ec4:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  if (HW32_REG(gpio_base + 0xFD8) != AHB_GPIO_PID6) {err_code |= (1<<10); }
     ec8:	9b08      	ldr	r3, [sp, #32]
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	b10b      	cbz	r3, ed2 <gpio_register_rw_test+0x43a>
     ece:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  if (HW32_REG(gpio_base + 0xFDC) != AHB_GPIO_PID7) {err_code |= (1<<11); }
     ed2:	9b07      	ldr	r3, [sp, #28]
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	b10b      	cbz	r3, edc <gpio_register_rw_test+0x444>
     ed8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  if (HW32_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<12); }
     edc:	9b06      	ldr	r3, [sp, #24]
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	2b20      	cmp	r3, #32
  if (HW32_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<13); }
     ee2:	9b05      	ldr	r3, [sp, #20]
  if (HW32_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<12); }
     ee4:	bf18      	it	ne
     ee6:	f444 5480 	orrne.w	r4, r4, #4096	; 0x1000
  if (HW32_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<13); }
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	2bb8      	cmp	r3, #184	; 0xb8
  if (HW32_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<14); }
     eee:	9b04      	ldr	r3, [sp, #16]
  if (HW32_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<13); }
     ef0:	bf18      	it	ne
     ef2:	f444 5400 	orrne.w	r4, r4, #8192	; 0x2000
  if (HW32_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<14); }
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	2b1b      	cmp	r3, #27
  if (HW32_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<15); }
     efa:	9b03      	ldr	r3, [sp, #12]
  if (HW32_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<14); }
     efc:	bf18      	it	ne
     efe:	f444 4480 	orrne.w	r4, r4, #16384	; 0x4000
  if (HW32_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<15); }
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	b1d3      	cbz	r3, f3c <gpio_register_rw_test+0x4a4>
     f06:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
     f0a:	e017      	b.n	f3c <gpio_register_rw_test+0x4a4>
     f0c:	40011fd0 	.word	0x40011fd0
     f10:	4001103b 	.word	0x4001103b
     f14:	00fffffb 	.word	0x00fffffb
     f18:	40011005 	.word	0x40011005
     f1c:	40011038 	.word	0x40011038
     f20:	40011018 	.word	0x40011018
     f24:	00005ccc 	.word	0x00005ccc
     f28:	00005cdc 	.word	0x00005cdc
     f2c:	e000e100 	.word	0xe000e100
     f30:	00005cf0 	.word	0x00005cf0
     f34:	40011ffc 	.word	0x40011ffc
     f38:	40011ff8 	.word	0x40011ff8
  if (HW32_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<16); }
     f3c:	9b02      	ldr	r3, [sp, #8]
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	2b0d      	cmp	r3, #13
  if (HW32_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<17); }
     f42:	9b01      	ldr	r3, [sp, #4]
  if (HW32_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<16); }
     f44:	bf18      	it	ne
     f46:	f444 3480 	orrne.w	r4, r4, #65536	; 0x10000
  if (HW32_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<17); }
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	2bf0      	cmp	r3, #240	; 0xf0
  if (HW32_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
     f4e:	f8db 3000 	ldr.w	r3, [fp]
  if (HW32_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<17); }
     f52:	bf18      	it	ne
     f54:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
  if (HW32_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
     f58:	2b05      	cmp	r3, #5
  if (HW32_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
     f5a:	f8d9 3000 	ldr.w	r3, [r9]
  if (HW32_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
     f5e:	bf18      	it	ne
     f60:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
  if (HW32_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
     f64:	2bb1      	cmp	r3, #177	; 0xb1

  /* test write to PIDs and CIDs - should be ignored */
  for (i=0; i <12; i++) {
    HW8_REG(gpio_base + 0xFD0 + (i<<2)) = ~HW32_REG(gpio_base + 0xFD0 + (i<<2));
     f66:	680b      	ldr	r3, [r1, #0]
  if (HW32_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
     f68:	bf18      	it	ne
     f6a:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
    HW8_REG(gpio_base + 0xFD0 + (i<<2)) = ~HW32_REG(gpio_base + 0xFD0 + (i<<2));
     f6e:	43db      	mvns	r3, r3
     f70:	b2db      	uxtb	r3, r3
     f72:	700b      	strb	r3, [r1, #0]
     f74:	684b      	ldr	r3, [r1, #4]
     f76:	43db      	mvns	r3, r3
     f78:	b2db      	uxtb	r3, r3
     f7a:	710b      	strb	r3, [r1, #4]
     f7c:	688b      	ldr	r3, [r1, #8]
     f7e:	43db      	mvns	r3, r3
     f80:	b2db      	uxtb	r3, r3
     f82:	720b      	strb	r3, [r1, #8]
     f84:	68cb      	ldr	r3, [r1, #12]
     f86:	43db      	mvns	r3, r3
     f88:	b2db      	uxtb	r3, r3
     f8a:	730b      	strb	r3, [r1, #12]
     f8c:	690b      	ldr	r3, [r1, #16]
     f8e:	43db      	mvns	r3, r3
     f90:	b2db      	uxtb	r3, r3
     f92:	740b      	strb	r3, [r1, #16]
     f94:	694b      	ldr	r3, [r1, #20]
     f96:	43db      	mvns	r3, r3
     f98:	b2db      	uxtb	r3, r3
     f9a:	750b      	strb	r3, [r1, #20]
     f9c:	698b      	ldr	r3, [r1, #24]
     f9e:	43db      	mvns	r3, r3
     fa0:	b2db      	uxtb	r3, r3
     fa2:	760b      	strb	r3, [r1, #24]
     fa4:	69cb      	ldr	r3, [r1, #28]
     fa6:	43db      	mvns	r3, r3
     fa8:	b2db      	uxtb	r3, r3
     faa:	770b      	strb	r3, [r1, #28]
     fac:	6a0b      	ldr	r3, [r1, #32]
     fae:	43db      	mvns	r3, r3
     fb0:	b2db      	uxtb	r3, r3
     fb2:	f881 3020 	strb.w	r3, [r1, #32]
     fb6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
     fb8:	43db      	mvns	r3, r3
     fba:	b2db      	uxtb	r3, r3
     fbc:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
     fc0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     fc2:	43db      	mvns	r3, r3
     fc4:	b2db      	uxtb	r3, r3
     fc6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
     fca:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     fcc:	43db      	mvns	r3, r3
     fce:	b2db      	uxtb	r3, r3
     fd0:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    }

  /* Check read back values again, should not be changed */
  if (HW16_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<8); }
     fd4:	882b      	ldrh	r3, [r5, #0]
     fd6:	b29b      	uxth	r3, r3
     fd8:	2b04      	cmp	r3, #4
  if (HW16_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<9); }
     fda:	9b00      	ldr	r3, [sp, #0]
  if (HW16_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<8); }
     fdc:	bf18      	it	ne
     fde:	f444 7480 	orrne.w	r4, r4, #256	; 0x100
  if (HW16_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<9); }
     fe2:	881b      	ldrh	r3, [r3, #0]
     fe4:	b29b      	uxth	r3, r3
     fe6:	b10b      	cbz	r3, fec <gpio_register_rw_test+0x554>
     fe8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  if (HW16_REG(gpio_base + 0xFD8) != AHB_GPIO_PID6) {err_code |= (1<<10); }
     fec:	9b08      	ldr	r3, [sp, #32]
     fee:	881b      	ldrh	r3, [r3, #0]
     ff0:	b29b      	uxth	r3, r3
     ff2:	b10b      	cbz	r3, ff8 <gpio_register_rw_test+0x560>
     ff4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  if (HW16_REG(gpio_base + 0xFDC) != AHB_GPIO_PID7) {err_code |= (1<<11); }
     ff8:	9b07      	ldr	r3, [sp, #28]
     ffa:	881b      	ldrh	r3, [r3, #0]
     ffc:	b29b      	uxth	r3, r3
     ffe:	b10b      	cbz	r3, 1004 <gpio_register_rw_test+0x56c>
    1000:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  if (HW16_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<12); }
    1004:	9b06      	ldr	r3, [sp, #24]
    1006:	881b      	ldrh	r3, [r3, #0]
    1008:	b29b      	uxth	r3, r3
    100a:	2b20      	cmp	r3, #32
  if (HW16_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<13); }
    100c:	9b05      	ldr	r3, [sp, #20]
  if (HW16_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<12); }
    100e:	bf18      	it	ne
    1010:	f444 5480 	orrne.w	r4, r4, #4096	; 0x1000
  if (HW16_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<13); }
    1014:	881b      	ldrh	r3, [r3, #0]
    1016:	b29b      	uxth	r3, r3
    1018:	2bb8      	cmp	r3, #184	; 0xb8
  if (HW16_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<14); }
    101a:	9b04      	ldr	r3, [sp, #16]
  if (HW16_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<13); }
    101c:	bf18      	it	ne
    101e:	f444 5400 	orrne.w	r4, r4, #8192	; 0x2000
  if (HW16_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<14); }
    1022:	881b      	ldrh	r3, [r3, #0]
    1024:	b29b      	uxth	r3, r3
    1026:	2b1b      	cmp	r3, #27
  if (HW16_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<15); }
    1028:	9b03      	ldr	r3, [sp, #12]
  if (HW16_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<14); }
    102a:	bf18      	it	ne
    102c:	f444 4480 	orrne.w	r4, r4, #16384	; 0x4000
  if (HW16_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<15); }
    1030:	881b      	ldrh	r3, [r3, #0]
    1032:	b29b      	uxth	r3, r3
    1034:	b10b      	cbz	r3, 103a <gpio_register_rw_test+0x5a2>
    1036:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  if (HW16_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<16); }
    103a:	9b02      	ldr	r3, [sp, #8]
    103c:	881b      	ldrh	r3, [r3, #0]
    103e:	b29b      	uxth	r3, r3
    1040:	2b0d      	cmp	r3, #13
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<17); }
    1042:	9b01      	ldr	r3, [sp, #4]
  if (HW16_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<16); }
    1044:	bf18      	it	ne
    1046:	f444 3480 	orrne.w	r4, r4, #65536	; 0x10000
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<17); }
    104a:	881b      	ldrh	r3, [r3, #0]
    104c:	b29b      	uxth	r3, r3
    104e:	2bf0      	cmp	r3, #240	; 0xf0
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
    1050:	f8bb 3000 	ldrh.w	r3, [fp]
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<17); }
    1054:	bf18      	it	ne
    1056:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
    105a:	b29b      	uxth	r3, r3
    105c:	2b05      	cmp	r3, #5
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
    105e:	f8b9 3000 	ldrh.w	r3, [r9]
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
    1062:	f001 811e 	beq.w	22a2 <gpio_register_rw_test+0x180a>
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
    1066:	b29b      	uxth	r3, r3
    1068:	2bb1      	cmp	r3, #177	; 0xb1
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<18); }
    106a:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
    106e:	d001      	beq.n	1074 <gpio_register_rw_test+0x5dc>
    1070:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000

  if (err_code != 0) {
    printf ("ERROR : initial value failed (0x%x)\n", err_code);
    1074:	4621      	mov	r1, r4
    1076:	4897      	ldr	r0, [pc, #604]	; (12d4 <gpio_register_rw_test+0x83c>)
    1078:	f003 fd8c 	bl	4b94 <iprintf>
    return_val=1;
    107c:	2301      	movs	r3, #1
    107e:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }


  puts ("- write ID values (HALF WORD accesses, lower) - should have no effect");
    1080:	4895      	ldr	r0, [pc, #596]	; (12d8 <gpio_register_rw_test+0x840>)
    1082:	f003 fdfb 	bl	4c7c <puts>
  HW16_REG(gpio_base + 0xFD0) = 0xFFFF;
    1086:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HW16_REG(gpio_base + 0xFD4) = 0xFFFF;
    108a:	9a00      	ldr	r2, [sp, #0]
  HW16_REG(gpio_base + 0xFD8) = 0xFFFF;
    108c:	9908      	ldr	r1, [sp, #32]
  HW16_REG(gpio_base + 0xFD0) = 0xFFFF;
    108e:	802b      	strh	r3, [r5, #0]
  HW16_REG(gpio_base + 0xFD4) = 0xFFFF;
    1090:	8013      	strh	r3, [r2, #0]
  HW16_REG(gpio_base + 0xFD8) = 0xFFFF;
    1092:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFDC) = 0xFFFF;
    1094:	9907      	ldr	r1, [sp, #28]
  HW16_REG(gpio_base + 0xFF4) = 0xFFFF;
  HW16_REG(gpio_base + 0xFF8) = 0xFFFF;
  HW16_REG(gpio_base + 0xFFC) = 0xFFFF;


  puts ("- check ID values (HALF WORD accesses, lower)");
    1096:	4891      	ldr	r0, [pc, #580]	; (12dc <gpio_register_rw_test+0x844>)
  HW16_REG(gpio_base + 0xFDC) = 0xFFFF;
    1098:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFE0) = 0xFFFF;
    109a:	9906      	ldr	r1, [sp, #24]
    109c:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFE4) = 0xFFFF;
    109e:	9905      	ldr	r1, [sp, #20]
    10a0:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFE8) = 0xFFFF;
    10a2:	9904      	ldr	r1, [sp, #16]
    10a4:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFEC) = 0xFFFF;
    10a6:	9903      	ldr	r1, [sp, #12]
    10a8:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFF0) = 0xFFFF;
    10aa:	9902      	ldr	r1, [sp, #8]
    10ac:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFF4) = 0xFFFF;
    10ae:	9901      	ldr	r1, [sp, #4]
    10b0:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFF8) = 0xFFFF;
    10b2:	f8ab 3000 	strh.w	r3, [fp]
  HW16_REG(gpio_base + 0xFFC) = 0xFFFF;
    10b6:	f8a9 3000 	strh.w	r3, [r9]
  puts ("- check ID values (HALF WORD accesses, lower)");
    10ba:	f003 fddf 	bl	4c7c <puts>
  if (HW16_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
  if (HW16_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    10be:	9a00      	ldr	r2, [sp, #0]
  if (HW16_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
    10c0:	882c      	ldrh	r4, [r5, #0]
  if (HW16_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    10c2:	8813      	ldrh	r3, [r2, #0]
  if (HW16_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
    10c4:	b2a4      	uxth	r4, r4
    10c6:	3c04      	subs	r4, #4
  if (HW16_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    10c8:	b29b      	uxth	r3, r3
  if (HW16_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
    10ca:	bf18      	it	ne
    10cc:	2401      	movne	r4, #1
  if (HW16_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    10ce:	b10b      	cbz	r3, 10d4 <gpio_register_rw_test+0x63c>
    10d0:	f044 0402 	orr.w	r4, r4, #2
  if (HW16_REG(gpio_base + 0xFD8) != AHB_GPIO_PID6) {err_code |= (1<<2); }
    10d4:	9b08      	ldr	r3, [sp, #32]
    10d6:	881b      	ldrh	r3, [r3, #0]
    10d8:	b29b      	uxth	r3, r3
    10da:	b10b      	cbz	r3, 10e0 <gpio_register_rw_test+0x648>
    10dc:	f044 0404 	orr.w	r4, r4, #4
  if (HW16_REG(gpio_base + 0xFDC) != AHB_GPIO_PID7) {err_code |= (1<<3); }
    10e0:	9b07      	ldr	r3, [sp, #28]
    10e2:	881b      	ldrh	r3, [r3, #0]
    10e4:	b29b      	uxth	r3, r3
    10e6:	b10b      	cbz	r3, 10ec <gpio_register_rw_test+0x654>
    10e8:	f044 0408 	orr.w	r4, r4, #8
  if (HW16_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<4); }
    10ec:	9b06      	ldr	r3, [sp, #24]
    10ee:	881b      	ldrh	r3, [r3, #0]
    10f0:	b29b      	uxth	r3, r3
    10f2:	2b20      	cmp	r3, #32
  if (HW16_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<5); }
    10f4:	9b05      	ldr	r3, [sp, #20]
  if (HW16_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<4); }
    10f6:	bf18      	it	ne
    10f8:	f044 0410 	orrne.w	r4, r4, #16
  if (HW16_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<5); }
    10fc:	881b      	ldrh	r3, [r3, #0]
    10fe:	b29b      	uxth	r3, r3
    1100:	2bb8      	cmp	r3, #184	; 0xb8
  if (HW16_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<6); }
    1102:	9b04      	ldr	r3, [sp, #16]
  if (HW16_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<5); }
    1104:	bf18      	it	ne
    1106:	f044 0420 	orrne.w	r4, r4, #32
  if (HW16_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<6); }
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	b29b      	uxth	r3, r3
    110e:	2b1b      	cmp	r3, #27
  if (HW16_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<7); }
    1110:	9b03      	ldr	r3, [sp, #12]
  if (HW16_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<6); }
    1112:	bf18      	it	ne
    1114:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
  if (HW16_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<7); }
    1118:	881b      	ldrh	r3, [r3, #0]
    111a:	b29b      	uxth	r3, r3
    111c:	b10b      	cbz	r3, 1122 <gpio_register_rw_test+0x68a>
    111e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  if (HW16_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<8); }
    1122:	9b02      	ldr	r3, [sp, #8]
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<11); }


  puts ("- write ID values (HALF WORD accesses, upper) - should have no effect");
    1124:	486e      	ldr	r0, [pc, #440]	; (12e0 <gpio_register_rw_test+0x848>)
  if (HW16_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<8); }
    1126:	881b      	ldrh	r3, [r3, #0]
    1128:	b29b      	uxth	r3, r3
    112a:	2b0d      	cmp	r3, #13
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
    112c:	9b01      	ldr	r3, [sp, #4]
  if (HW16_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<8); }
    112e:	bf18      	it	ne
    1130:	f444 7480 	orrne.w	r4, r4, #256	; 0x100
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
    1134:	881b      	ldrh	r3, [r3, #0]
    1136:	b29b      	uxth	r3, r3
    1138:	2bf0      	cmp	r3, #240	; 0xf0
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
    113a:	f8bb 3000 	ldrh.w	r3, [fp]
  if (HW16_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
    113e:	bf18      	it	ne
    1140:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
    1144:	b29b      	uxth	r3, r3
    1146:	2b05      	cmp	r3, #5
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<11); }
    1148:	f8b9 3000 	ldrh.w	r3, [r9]
  if (HW16_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
    114c:	bf18      	it	ne
    114e:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<11); }
    1152:	b29b      	uxth	r3, r3
    1154:	2bb1      	cmp	r3, #177	; 0xb1
    1156:	bf18      	it	ne
    1158:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
  puts ("- write ID values (HALF WORD accesses, upper) - should have no effect");
    115c:	f003 fd8e 	bl	4c7c <puts>
  HW16_REG(gpio_base + 0xFD2) = 0xFFFF;
    1160:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1164:	9a21      	ldr	r2, [sp, #132]	; 0x84
  HW16_REG(gpio_base + 0xFD6) = 0xFFFF;
    1166:	9920      	ldr	r1, [sp, #128]	; 0x80
  HW16_REG(gpio_base + 0xFD2) = 0xFFFF;
    1168:	8013      	strh	r3, [r2, #0]
  HW16_REG(gpio_base + 0xFD6) = 0xFFFF;
    116a:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFDA) = 0xFFFF;
    116c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  HW16_REG(gpio_base + 0xFF2) = 0xFFFF;
  HW16_REG(gpio_base + 0xFF6) = 0xFFFF;
  HW16_REG(gpio_base + 0xFFA) = 0xFFFF;
  HW16_REG(gpio_base + 0xFFE) = 0xFFFF;

  puts ("- check ID values (HALF WORD accesses, upper)");
    116e:	485d      	ldr	r0, [pc, #372]	; (12e4 <gpio_register_rw_test+0x84c>)
  HW16_REG(gpio_base + 0xFDA) = 0xFFFF;
    1170:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFDE) = 0xFFFF;
    1172:	990e      	ldr	r1, [sp, #56]	; 0x38
    1174:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFE2) = 0xFFFF;
    1176:	9910      	ldr	r1, [sp, #64]	; 0x40
    1178:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFE6) = 0xFFFF;
    117a:	9918      	ldr	r1, [sp, #96]	; 0x60
    117c:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFEA) = 0xFFFF;
    117e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1180:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFEE) = 0xFFFF;
    1182:	991a      	ldr	r1, [sp, #104]	; 0x68
    1184:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFF2) = 0xFFFF;
    1186:	9916      	ldr	r1, [sp, #88]	; 0x58
    1188:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFF6) = 0xFFFF;
    118a:	9919      	ldr	r1, [sp, #100]	; 0x64
    118c:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFFA) = 0xFFFF;
    118e:	9914      	ldr	r1, [sp, #80]	; 0x50
    1190:	800b      	strh	r3, [r1, #0]
  HW16_REG(gpio_base + 0xFFE) = 0xFFFF;
    1192:	9915      	ldr	r1, [sp, #84]	; 0x54
    1194:	800b      	strh	r3, [r1, #0]
  puts ("- check ID values (HALF WORD accesses, upper)");
    1196:	f003 fd71 	bl	4c7c <puts>
  if (HW16_REG(gpio_base + 0xFD2) != 0x00) {err_code |= (1<<12); }
    119a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    119c:	8813      	ldrh	r3, [r2, #0]
    119e:	b29b      	uxth	r3, r3
    11a0:	b10b      	cbz	r3, 11a6 <gpio_register_rw_test+0x70e>
    11a2:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
  if (HW16_REG(gpio_base + 0xFD6) != 0x00) {err_code |= (1<<13); }
    11a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    11a8:	881b      	ldrh	r3, [r3, #0]
    11aa:	b29b      	uxth	r3, r3
    11ac:	b10b      	cbz	r3, 11b2 <gpio_register_rw_test+0x71a>
    11ae:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  if (HW16_REG(gpio_base + 0xFDA) != 0x00) {err_code |= (1<<14); }
    11b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    11b4:	881b      	ldrh	r3, [r3, #0]
    11b6:	b29b      	uxth	r3, r3
    11b8:	b10b      	cbz	r3, 11be <gpio_register_rw_test+0x726>
    11ba:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  if (HW16_REG(gpio_base + 0xFDE) != 0x00) {err_code |= (1<<15); }
    11be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    11c0:	881b      	ldrh	r3, [r3, #0]
    11c2:	b29b      	uxth	r3, r3
    11c4:	b10b      	cbz	r3, 11ca <gpio_register_rw_test+0x732>
    11c6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  if (HW16_REG(gpio_base + 0xFE2) != 0x00) {err_code |= (1<<16); }
    11ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	b29b      	uxth	r3, r3
    11d0:	b10b      	cbz	r3, 11d6 <gpio_register_rw_test+0x73e>
    11d2:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
  if (HW16_REG(gpio_base + 0xFE6) != 0x00) {err_code |= (1<<17); }
    11d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    11d8:	881b      	ldrh	r3, [r3, #0]
    11da:	b29b      	uxth	r3, r3
    11dc:	b10b      	cbz	r3, 11e2 <gpio_register_rw_test+0x74a>
    11de:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
  if (HW16_REG(gpio_base + 0xFEA) != 0x00) {err_code |= (1<<18); }
    11e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    11e4:	881b      	ldrh	r3, [r3, #0]
    11e6:	b29b      	uxth	r3, r3
    11e8:	b10b      	cbz	r3, 11ee <gpio_register_rw_test+0x756>
    11ea:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
  if (HW16_REG(gpio_base + 0xFEE) != 0x00) {err_code |= (1<<19); }
    11ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    11f0:	881b      	ldrh	r3, [r3, #0]
    11f2:	b29b      	uxth	r3, r3
    11f4:	b10b      	cbz	r3, 11fa <gpio_register_rw_test+0x762>
    11f6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
  if (HW16_REG(gpio_base + 0xFF2) != 0x00) {err_code |= (1<<20); }
    11fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    11fc:	881b      	ldrh	r3, [r3, #0]
    11fe:	b29b      	uxth	r3, r3
    1200:	b10b      	cbz	r3, 1206 <gpio_register_rw_test+0x76e>
    1202:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  if (HW16_REG(gpio_base + 0xFF6) != 0x00) {err_code |= (1<<21); }
    1206:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1208:	881b      	ldrh	r3, [r3, #0]
    120a:	b29b      	uxth	r3, r3
    120c:	b10b      	cbz	r3, 1212 <gpio_register_rw_test+0x77a>
    120e:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  if (HW16_REG(gpio_base + 0xFFA) != 0x00) {err_code |= (1<<22); }
    1212:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1214:	881b      	ldrh	r3, [r3, #0]
    1216:	b29b      	uxth	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	f000 874c 	beq.w	20b6 <gpio_register_rw_test+0x161e>
  if (HW16_REG(gpio_base + 0xFFE) != 0x00) {err_code |= (1<<23); }
    121e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  if (HW16_REG(gpio_base + 0xFFA) != 0x00) {err_code |= (1<<22); }
    1220:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
  if (HW16_REG(gpio_base + 0xFFE) != 0x00) {err_code |= (1<<23); }
    1224:	881b      	ldrh	r3, [r3, #0]
    1226:	b29b      	uxth	r3, r3
    1228:	2b00      	cmp	r3, #0
    122a:	f040 8740 	bne.w	20ae <gpio_register_rw_test+0x1616>

  if (err_code != 0) {
    printf ("ERROR : initial value failed (0x%x)\n", err_code);
    122e:	4621      	mov	r1, r4
    1230:	4828      	ldr	r0, [pc, #160]	; (12d4 <gpio_register_rw_test+0x83c>)
    1232:	f003 fcaf 	bl	4b94 <iprintf>
    return_val=1;
    1236:	2301      	movs	r3, #1
    1238:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }

  puts ("- write ID values (BYTE accesses, byte 0) - should have no effect");
    123a:	482b      	ldr	r0, [pc, #172]	; (12e8 <gpio_register_rw_test+0x850>)
    123c:	f003 fd1e 	bl	4c7c <puts>
  HW8_REG(gpio_base + 0xFD0) = 0xFF;
    1240:	23ff      	movs	r3, #255	; 0xff
  HW8_REG(gpio_base + 0xFD4) = 0xFF;
    1242:	9a00      	ldr	r2, [sp, #0]
  HW8_REG(gpio_base + 0xFD8) = 0xFF;
    1244:	9908      	ldr	r1, [sp, #32]
  HW8_REG(gpio_base + 0xFD0) = 0xFF;
    1246:	702b      	strb	r3, [r5, #0]
  HW8_REG(gpio_base + 0xFD4) = 0xFF;
    1248:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFD8) = 0xFF;
    124a:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFDC) = 0xFF;
    124c:	9907      	ldr	r1, [sp, #28]
  HW8_REG(gpio_base + 0xFF0) = 0xFF;
  HW8_REG(gpio_base + 0xFF4) = 0xFF;
  HW8_REG(gpio_base + 0xFF8) = 0xFF;
  HW8_REG(gpio_base + 0xFFC) = 0xFF;

  puts ("- check ID values (BYTE accesses, byte 0)");
    124e:	4827      	ldr	r0, [pc, #156]	; (12ec <gpio_register_rw_test+0x854>)
  HW8_REG(gpio_base + 0xFDC) = 0xFF;
    1250:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFE0) = 0xFF;
    1252:	9906      	ldr	r1, [sp, #24]
    1254:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFE4) = 0xFF;
    1256:	9905      	ldr	r1, [sp, #20]
    1258:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFE8) = 0xFF;
    125a:	9904      	ldr	r1, [sp, #16]
    125c:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFEC) = 0xFF;
    125e:	9903      	ldr	r1, [sp, #12]
    1260:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFF0) = 0xFF;
    1262:	9902      	ldr	r1, [sp, #8]
    1264:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFF4) = 0xFF;
    1266:	9901      	ldr	r1, [sp, #4]
    1268:	700b      	strb	r3, [r1, #0]
  HW8_REG(gpio_base + 0xFF8) = 0xFF;
    126a:	f88b 3000 	strb.w	r3, [fp]
  HW8_REG(gpio_base + 0xFFC) = 0xFF;
    126e:	f889 3000 	strb.w	r3, [r9]
  puts ("- check ID values (BYTE accesses, byte 0)");
    1272:	f003 fd03 	bl	4c7c <puts>
  if (HW8_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
  if (HW8_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    1276:	9a00      	ldr	r2, [sp, #0]
  if (HW8_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
    1278:	782c      	ldrb	r4, [r5, #0]
  if (HW8_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    127a:	7813      	ldrb	r3, [r2, #0]
  if (HW8_REG(gpio_base + 0xFD0) != AHB_GPIO_PID4) {err_code |= (1<<0); }
    127c:	3c04      	subs	r4, #4
    127e:	bf18      	it	ne
    1280:	2401      	movne	r4, #1
  if (HW8_REG(gpio_base + 0xFD4) != AHB_GPIO_PID5) {err_code |= (1<<1); }
    1282:	b10b      	cbz	r3, 1288 <gpio_register_rw_test+0x7f0>
    1284:	f044 0402 	orr.w	r4, r4, #2
  if (HW8_REG(gpio_base + 0xFD8) != AHB_GPIO_PID6) {err_code |= (1<<2); }
    1288:	9b08      	ldr	r3, [sp, #32]
    128a:	781b      	ldrb	r3, [r3, #0]
    128c:	b10b      	cbz	r3, 1292 <gpio_register_rw_test+0x7fa>
    128e:	f044 0404 	orr.w	r4, r4, #4
  if (HW8_REG(gpio_base + 0xFDC) != AHB_GPIO_PID7) {err_code |= (1<<3); }
    1292:	9b07      	ldr	r3, [sp, #28]
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	b10b      	cbz	r3, 129c <gpio_register_rw_test+0x804>
    1298:	f044 0408 	orr.w	r4, r4, #8
  if (HW8_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<4); }
    129c:	9b06      	ldr	r3, [sp, #24]
    129e:	781b      	ldrb	r3, [r3, #0]
    12a0:	2b20      	cmp	r3, #32
  if (HW8_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<5); }
    12a2:	9b05      	ldr	r3, [sp, #20]
  if (HW8_REG(gpio_base + 0xFE0) != AHB_GPIO_PID0) {err_code |= (1<<4); }
    12a4:	bf18      	it	ne
    12a6:	f044 0410 	orrne.w	r4, r4, #16
  if (HW8_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<5); }
    12aa:	781b      	ldrb	r3, [r3, #0]
    12ac:	2bb8      	cmp	r3, #184	; 0xb8
  if (HW8_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<6); }
    12ae:	9b04      	ldr	r3, [sp, #16]
  if (HW8_REG(gpio_base + 0xFE4) != AHB_GPIO_PID1) {err_code |= (1<<5); }
    12b0:	bf18      	it	ne
    12b2:	f044 0420 	orrne.w	r4, r4, #32
  if (HW8_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<6); }
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	2b1b      	cmp	r3, #27
  if (HW8_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<7); }
    12ba:	9b03      	ldr	r3, [sp, #12]
  if (HW8_REG(gpio_base + 0xFE8) != AHB_GPIO_PID2) {err_code |= (1<<6); }
    12bc:	bf18      	it	ne
    12be:	f044 0440 	orrne.w	r4, r4, #64	; 0x40
  if (HW8_REG(gpio_base + 0xFEC) != AHB_GPIO_PID3) {err_code |= (1<<7); }
    12c2:	781b      	ldrb	r3, [r3, #0]
    12c4:	b10b      	cbz	r3, 12ca <gpio_register_rw_test+0x832>
    12c6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  if (HW8_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<8); }
    12ca:	9b02      	ldr	r3, [sp, #8]
  if (HW8_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
  if (HW8_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
  if (HW8_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<11); }

  puts ("- write ID values (BYTE accesses, byte 1) - should have no effect");
    12cc:	4808      	ldr	r0, [pc, #32]	; (12f0 <gpio_register_rw_test+0x858>)
  if (HW8_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<8); }
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	e010      	b.n	12f4 <gpio_register_rw_test+0x85c>
    12d2:	bf00      	nop
    12d4:	00005d14 	.word	0x00005d14
    12d8:	00005d3c 	.word	0x00005d3c
    12dc:	00005d84 	.word	0x00005d84
    12e0:	00005db4 	.word	0x00005db4
    12e4:	00005dfc 	.word	0x00005dfc
    12e8:	00005e2c 	.word	0x00005e2c
    12ec:	00005e70 	.word	0x00005e70
    12f0:	00005e9c 	.word	0x00005e9c
    12f4:	2b0d      	cmp	r3, #13
  if (HW8_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
    12f6:	9b01      	ldr	r3, [sp, #4]
  if (HW8_REG(gpio_base + 0xFF0) != AHB_GPIO_CID0) {err_code |= (1<<8); }
    12f8:	bf18      	it	ne
    12fa:	f444 7480 	orrne.w	r4, r4, #256	; 0x100
  if (HW8_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
    12fe:	781b      	ldrb	r3, [r3, #0]
    1300:	2bf0      	cmp	r3, #240	; 0xf0
  if (HW8_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
    1302:	f89b 3000 	ldrb.w	r3, [fp]
  if (HW8_REG(gpio_base + 0xFF4) != AHB_GPIO_CID1) {err_code |= (1<<9); }
    1306:	bf18      	it	ne
    1308:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
  if (HW8_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
    130c:	2b05      	cmp	r3, #5
  if (HW8_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<11); }
    130e:	f899 3000 	ldrb.w	r3, [r9]
  if (HW8_REG(gpio_base + 0xFF8) != AHB_GPIO_CID2) {err_code |= (1<<10); }
    1312:	bf18      	it	ne
    1314:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
  if (HW8_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<11); }
    1318:	2bb1      	cmp	r3, #177	; 0xb1
    131a:	bf18      	it	ne
    131c:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
  puts ("- write ID values (BYTE accesses, byte 1) - should have no effect");
    1320:	f003 fcac 	bl	4c7c <puts>
  HW8_REG(gpio_base + 0xFD1) = 0xFF;
    1324:	23ff      	movs	r3, #255	; 0xff
    1326:	9d52      	ldr	r5, [sp, #328]	; 0x148
  HW8_REG(gpio_base + 0xFD5) = 0xFF;
    1328:	9a45      	ldr	r2, [sp, #276]	; 0x114
  HW8_REG(gpio_base + 0xFD1) = 0xFF;
    132a:	702b      	strb	r3, [r5, #0]
  HW8_REG(gpio_base + 0xFD5) = 0xFF;
    132c:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFD9) = 0xFF;
    132e:	9a44      	ldr	r2, [sp, #272]	; 0x110
  HW8_REG(gpio_base + 0xFF1) = 0xFF;
  HW8_REG(gpio_base + 0xFF5) = 0xFF;
  HW8_REG(gpio_base + 0xFF9) = 0xFF;
  HW8_REG(gpio_base + 0xFFD) = 0xFF;

  puts ("- check ID values (BYTE accesses, byte 1)");
    1330:	4893      	ldr	r0, [pc, #588]	; (1580 <gpio_register_rw_test+0xae8>)
  HW8_REG(gpio_base + 0xFD9) = 0xFF;
    1332:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFDD) = 0xFF;
    1334:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    1336:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE1) = 0xFF;
    1338:	9a42      	ldr	r2, [sp, #264]	; 0x108
    133a:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE5) = 0xFF;
    133c:	9a41      	ldr	r2, [sp, #260]	; 0x104
    133e:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE9) = 0xFF;
    1340:	9a40      	ldr	r2, [sp, #256]	; 0x100
    1342:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFED) = 0xFF;
    1344:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    1346:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF1) = 0xFF;
    1348:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    134a:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF5) = 0xFF;
    134c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    134e:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF9) = 0xFF;
    1350:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    1352:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFFD) = 0xFF;
    1354:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    1356:	7013      	strb	r3, [r2, #0]
  puts ("- check ID values (BYTE accesses, byte 1)");
    1358:	f003 fc90 	bl	4c7c <puts>
  if (HW8_REG(gpio_base + 0xFD1) != 0x00) {err_code |= (1<<12); }
    135c:	782b      	ldrb	r3, [r5, #0]
    135e:	b10b      	cbz	r3, 1364 <gpio_register_rw_test+0x8cc>
    1360:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
  if (HW8_REG(gpio_base + 0xFD5) != 0x00) {err_code |= (1<<13); }
    1364:	9b45      	ldr	r3, [sp, #276]	; 0x114
    1366:	781b      	ldrb	r3, [r3, #0]
    1368:	b10b      	cbz	r3, 136e <gpio_register_rw_test+0x8d6>
    136a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  if (HW8_REG(gpio_base + 0xFD9) != 0x00) {err_code |= (1<<14); }
    136e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    1370:	781b      	ldrb	r3, [r3, #0]
    1372:	b10b      	cbz	r3, 1378 <gpio_register_rw_test+0x8e0>
    1374:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  if (HW8_REG(gpio_base + 0xFDD) != 0x00) {err_code |= (1<<15); }
    1378:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	b10b      	cbz	r3, 1382 <gpio_register_rw_test+0x8ea>
    137e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  if (HW8_REG(gpio_base + 0xFE1) != 0x00) {err_code |= (1<<16); }
    1382:	9b42      	ldr	r3, [sp, #264]	; 0x108
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	b10b      	cbz	r3, 138c <gpio_register_rw_test+0x8f4>
    1388:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
  if (HW8_REG(gpio_base + 0xFE5) != 0x00) {err_code |= (1<<17); }
    138c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    138e:	781b      	ldrb	r3, [r3, #0]
    1390:	b10b      	cbz	r3, 1396 <gpio_register_rw_test+0x8fe>
    1392:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
  if (HW8_REG(gpio_base + 0xFE9) != 0x00) {err_code |= (1<<18); }
    1396:	9b40      	ldr	r3, [sp, #256]	; 0x100
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	b10b      	cbz	r3, 13a0 <gpio_register_rw_test+0x908>
    139c:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
  if (HW8_REG(gpio_base + 0xFED) != 0x00) {err_code |= (1<<19); }
    13a0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	b10b      	cbz	r3, 13aa <gpio_register_rw_test+0x912>
    13a6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
  if (HW8_REG(gpio_base + 0xFF1) != 0x00) {err_code |= (1<<20); }
    13aa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    13ac:	781b      	ldrb	r3, [r3, #0]
    13ae:	b10b      	cbz	r3, 13b4 <gpio_register_rw_test+0x91c>
    13b0:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  if (HW8_REG(gpio_base + 0xFF5) != 0x00) {err_code |= (1<<21); }
    13b4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	b10b      	cbz	r3, 13be <gpio_register_rw_test+0x926>
    13ba:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  if (HW8_REG(gpio_base + 0xFF9) != 0x00) {err_code |= (1<<22); }
    13be:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    13c0:	781b      	ldrb	r3, [r3, #0]
    13c2:	2b00      	cmp	r3, #0
    13c4:	f000 866a 	beq.w	209c <gpio_register_rw_test+0x1604>
  if (HW8_REG(gpio_base + 0xFFD) != 0x00) {err_code |= (1<<23); }
    13c8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
  if (HW8_REG(gpio_base + 0xFF9) != 0x00) {err_code |= (1<<22); }
    13ca:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
  if (HW8_REG(gpio_base + 0xFFD) != 0x00) {err_code |= (1<<23); }
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	2b00      	cmp	r3, #0
    13d2:	f040 865f 	bne.w	2094 <gpio_register_rw_test+0x15fc>

  if (err_code != 0) {
    printf ("ERROR : initial value failed on byte 0 and 1 accesses (0x%x)\n", err_code);
    13d6:	4621      	mov	r1, r4
    13d8:	486a      	ldr	r0, [pc, #424]	; (1584 <gpio_register_rw_test+0xaec>)
    13da:	f003 fbdb 	bl	4b94 <iprintf>
    return_val=1;
    13de:	2301      	movs	r3, #1
    13e0:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }

  puts ("- write ID values (BYTE accesses, byte 2) - should have no effect");
    13e2:	4869      	ldr	r0, [pc, #420]	; (1588 <gpio_register_rw_test+0xaf0>)
    13e4:	f003 fc4a 	bl	4c7c <puts>
  HW8_REG(gpio_base + 0xFD2) = 0xFF;
    13e8:	23ff      	movs	r3, #255	; 0xff
    13ea:	9c21      	ldr	r4, [sp, #132]	; 0x84
  HW8_REG(gpio_base + 0xFD6) = 0xFF;
    13ec:	9d20      	ldr	r5, [sp, #128]	; 0x80
  HW8_REG(gpio_base + 0xFDA) = 0xFF;
    13ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  HW8_REG(gpio_base + 0xFD2) = 0xFF;
    13f0:	7023      	strb	r3, [r4, #0]
  HW8_REG(gpio_base + 0xFD6) = 0xFF;
    13f2:	702b      	strb	r3, [r5, #0]
  HW8_REG(gpio_base + 0xFDA) = 0xFF;
    13f4:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFDE) = 0xFF;
    13f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  HW8_REG(gpio_base + 0xFF2) = 0xFF;
  HW8_REG(gpio_base + 0xFF6) = 0xFF;
  HW8_REG(gpio_base + 0xFFA) = 0xFF;
  HW8_REG(gpio_base + 0xFFE) = 0xFF;

  puts ("- check ID values (BYTE accesses, byte 2)");
    13f8:	4864      	ldr	r0, [pc, #400]	; (158c <gpio_register_rw_test+0xaf4>)
  HW8_REG(gpio_base + 0xFDE) = 0xFF;
    13fa:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE2) = 0xFF;
    13fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    13fe:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE6) = 0xFF;
    1400:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1402:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFEA) = 0xFF;
    1404:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    1406:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFEE) = 0xFF;
    1408:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    140a:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF2) = 0xFF;
    140c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    140e:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF6) = 0xFF;
    1410:	9a19      	ldr	r2, [sp, #100]	; 0x64
    1412:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFFA) = 0xFF;
    1414:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1416:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFFE) = 0xFF;
    1418:	9a15      	ldr	r2, [sp, #84]	; 0x54
    141a:	7013      	strb	r3, [r2, #0]
  puts ("- check ID values (BYTE accesses, byte 2)");
    141c:	f003 fc2e 	bl	4c7c <puts>
  if (HW8_REG(gpio_base + 0xFD2) != 0x00) {err_code |= (1<<0); }
    1420:	7824      	ldrb	r4, [r4, #0]
  if (HW8_REG(gpio_base + 0xFD6) != 0x00) {err_code |= (1<<1); }
    1422:	782b      	ldrb	r3, [r5, #0]
  if (HW8_REG(gpio_base + 0xFD2) != 0x00) {err_code |= (1<<0); }
    1424:	3400      	adds	r4, #0
    1426:	bf18      	it	ne
    1428:	2401      	movne	r4, #1
  if (HW8_REG(gpio_base + 0xFD6) != 0x00) {err_code |= (1<<1); }
    142a:	b10b      	cbz	r3, 1430 <gpio_register_rw_test+0x998>
    142c:	f044 0402 	orr.w	r4, r4, #2
  if (HW8_REG(gpio_base + 0xFDA) != 0x00) {err_code |= (1<<2); }
    1430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1432:	781b      	ldrb	r3, [r3, #0]
    1434:	b10b      	cbz	r3, 143a <gpio_register_rw_test+0x9a2>
    1436:	f044 0404 	orr.w	r4, r4, #4
  if (HW8_REG(gpio_base + 0xFDE) != 0x00) {err_code |= (1<<3); }
    143a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	b10b      	cbz	r3, 1444 <gpio_register_rw_test+0x9ac>
    1440:	f044 0408 	orr.w	r4, r4, #8
  if (HW8_REG(gpio_base + 0xFE2) != 0x00) {err_code |= (1<<4); }
    1444:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	b10b      	cbz	r3, 144e <gpio_register_rw_test+0x9b6>
    144a:	f044 0410 	orr.w	r4, r4, #16
  if (HW8_REG(gpio_base + 0xFE6) != 0x00) {err_code |= (1<<5); }
    144e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1450:	781b      	ldrb	r3, [r3, #0]
    1452:	b10b      	cbz	r3, 1458 <gpio_register_rw_test+0x9c0>
    1454:	f044 0420 	orr.w	r4, r4, #32
  if (HW8_REG(gpio_base + 0xFEA) != 0x00) {err_code |= (1<<6); }
    1458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    145a:	781b      	ldrb	r3, [r3, #0]
    145c:	b10b      	cbz	r3, 1462 <gpio_register_rw_test+0x9ca>
    145e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  if (HW8_REG(gpio_base + 0xFEE) != 0x00) {err_code |= (1<<7); }
    1462:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	b10b      	cbz	r3, 146c <gpio_register_rw_test+0x9d4>
    1468:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  if (HW8_REG(gpio_base + 0xFF2) != 0x00) {err_code |= (1<<8); }
    146c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    146e:	781b      	ldrb	r3, [r3, #0]
    1470:	b10b      	cbz	r3, 1476 <gpio_register_rw_test+0x9de>
    1472:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  if (HW8_REG(gpio_base + 0xFF6) != 0x00) {err_code |= (1<<9); }
    1476:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1478:	781b      	ldrb	r3, [r3, #0]
    147a:	b10b      	cbz	r3, 1480 <gpio_register_rw_test+0x9e8>
    147c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  if (HW8_REG(gpio_base + 0xFFA) != 0x00) {err_code |= (1<<10); }
    1480:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1482:	781b      	ldrb	r3, [r3, #0]
    1484:	b10b      	cbz	r3, 148a <gpio_register_rw_test+0x9f2>
    1486:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  if (HW8_REG(gpio_base + 0xFFE) != 0x00) {err_code |= (1<<11); }
    148a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	b10b      	cbz	r3, 1494 <gpio_register_rw_test+0x9fc>
    1490:	f444 6400 	orr.w	r4, r4, #2048	; 0x800

  puts ("- write ID values (BYTE accesses, byte 3) - should have no effect");
    1494:	483e      	ldr	r0, [pc, #248]	; (1590 <gpio_register_rw_test+0xaf8>)
    1496:	f003 fbf1 	bl	4c7c <puts>
  /* test write to PIDs and CIDs - should be ignored */
  HW8_REG(gpio_base + 0xFD3) = 0xFF;
    149a:	23ff      	movs	r3, #255	; 0xff
    149c:	9d51      	ldr	r5, [sp, #324]	; 0x144
  HW8_REG(gpio_base + 0xFD7) = 0xFF;
    149e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  HW8_REG(gpio_base + 0xFD3) = 0xFF;
    14a0:	702b      	strb	r3, [r5, #0]
  HW8_REG(gpio_base + 0xFD7) = 0xFF;
    14a2:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFDB) = 0xFF;
    14a4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
  HW8_REG(gpio_base + 0xFF3) = 0xFF;
  HW8_REG(gpio_base + 0xFF7) = 0xFF;
  HW8_REG(gpio_base + 0xFFB) = 0xFF;
  HW8_REG(gpio_base + 0xFFF) = 0xFF;

  puts ("- check ID values (BYTE accesses, byte 3)");
    14a6:	483b      	ldr	r0, [pc, #236]	; (1594 <gpio_register_rw_test+0xafc>)
  HW8_REG(gpio_base + 0xFDB) = 0xFF;
    14a8:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFDF) = 0xFF;
    14aa:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    14ac:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE3) = 0xFF;
    14ae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    14b0:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFE7) = 0xFF;
    14b2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    14b4:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFEB) = 0xFF;
    14b6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    14b8:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFEF) = 0xFF;
    14ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    14bc:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF3) = 0xFF;
    14be:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    14c0:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFF7) = 0xFF;
    14c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    14c4:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFFB) = 0xFF;
    14c6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    14c8:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0xFFF) = 0xFF;
    14ca:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    14cc:	7013      	strb	r3, [r2, #0]
  puts ("- check ID values (BYTE accesses, byte 3)");
    14ce:	f003 fbd5 	bl	4c7c <puts>
  if (HW8_REG(gpio_base + 0xFD3) != 0x00) {err_code |= (1<<12); }
    14d2:	782b      	ldrb	r3, [r5, #0]
    14d4:	b10b      	cbz	r3, 14da <gpio_register_rw_test+0xa42>
    14d6:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
  if (HW8_REG(gpio_base + 0xFD7) != 0x00) {err_code |= (1<<13); }
    14da:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	b10b      	cbz	r3, 14e4 <gpio_register_rw_test+0xa4c>
    14e0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  if (HW8_REG(gpio_base + 0xFDB) != 0x00) {err_code |= (1<<14); }
    14e4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    14e6:	781b      	ldrb	r3, [r3, #0]
    14e8:	b10b      	cbz	r3, 14ee <gpio_register_rw_test+0xa56>
    14ea:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  if (HW8_REG(gpio_base + 0xFDF) != 0x00) {err_code |= (1<<15); }
    14ee:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    14f0:	781b      	ldrb	r3, [r3, #0]
    14f2:	b10b      	cbz	r3, 14f8 <gpio_register_rw_test+0xa60>
    14f4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  if (HW8_REG(gpio_base + 0xFE3) != 0x00) {err_code |= (1<<16); }
    14f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	b10b      	cbz	r3, 1502 <gpio_register_rw_test+0xa6a>
    14fe:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
  if (HW8_REG(gpio_base + 0xFE7) != 0x00) {err_code |= (1<<17); }
    1502:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    1504:	781b      	ldrb	r3, [r3, #0]
    1506:	b10b      	cbz	r3, 150c <gpio_register_rw_test+0xa74>
    1508:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
  if (HW8_REG(gpio_base + 0xFEB) != 0x00) {err_code |= (1<<18); }
    150c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	b10b      	cbz	r3, 1516 <gpio_register_rw_test+0xa7e>
    1512:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
  if (HW8_REG(gpio_base + 0xFEF) != 0x00) {err_code |= (1<<19); }
    1516:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	b10b      	cbz	r3, 1520 <gpio_register_rw_test+0xa88>
    151c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
  if (HW8_REG(gpio_base + 0xFF3) != 0x00) {err_code |= (1<<20); }
    1520:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1522:	781b      	ldrb	r3, [r3, #0]
    1524:	b10b      	cbz	r3, 152a <gpio_register_rw_test+0xa92>
    1526:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  if (HW8_REG(gpio_base + 0xFF7) != 0x00) {err_code |= (1<<21); }
    152a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    152c:	781b      	ldrb	r3, [r3, #0]
    152e:	b10b      	cbz	r3, 1534 <gpio_register_rw_test+0xa9c>
    1530:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  if (HW8_REG(gpio_base + 0xFFB) != 0x00) {err_code |= (1<<22); }
    1534:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1536:	781b      	ldrb	r3, [r3, #0]
    1538:	2b00      	cmp	r3, #0
    153a:	f000 85a2 	beq.w	2082 <gpio_register_rw_test+0x15ea>
  if (HW8_REG(gpio_base + 0xFFF) != 0x00) {err_code |= (1<<23); }
    153e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
  if (HW8_REG(gpio_base + 0xFFB) != 0x00) {err_code |= (1<<22); }
    1540:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
  if (HW8_REG(gpio_base + 0xFFF) != 0x00) {err_code |= (1<<23); }
    1544:	781b      	ldrb	r3, [r3, #0]
    1546:	2b00      	cmp	r3, #0
    1548:	f040 8597 	bne.w	207a <gpio_register_rw_test+0x15e2>

  if (err_code != 0) {
    printf ("ERROR : initial value failed on byte 2 and 3 accesses (0x%x)\n", err_code);
    154c:	4621      	mov	r1, r4
    154e:	4812      	ldr	r0, [pc, #72]	; (1598 <gpio_register_rw_test+0xb00>)
    1550:	f003 fb20 	bl	4b94 <iprintf>
    return_val=1;
    1554:	2301      	movs	r3, #1
    1556:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }

  puts("- read/write");
    1558:	4810      	ldr	r0, [pc, #64]	; (159c <gpio_register_rw_test+0xb04>)
    155a:	f003 fb8f 	bl	4c7c <puts>

  /* Test output enable read/write */
  /* word size */
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF & gpio_outen_mask;
    155e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000FFFF & gpio_outen_mask)) { err_code |= (1<<0); }
    1562:	f64f 71ff 	movw	r1, #65535	; 0xffff
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xCCAA5500 & gpio_outen_mask;
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000AAFF & gpio_outen_mask)) { err_code |= (1<<1); }
    1566:	f64a 23ff 	movw	r3, #43775	; 0xaaff
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xCCAA5500 & gpio_outen_mask;
    156a:	4a0d      	ldr	r2, [pc, #52]	; (15a0 <gpio_register_rw_test+0xb08>)
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF & gpio_outen_mask;
    156c:	f8c8 0010 	str.w	r0, [r8, #16]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000FFFF & gpio_outen_mask)) { err_code |= (1<<0); }
    1570:	f8d8 0010 	ldr.w	r0, [r8, #16]
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xCCAA5500 & gpio_outen_mask;
    1574:	f8c8 2014 	str.w	r2, [r8, #20]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000AAFF & gpio_outen_mask)) { err_code |= (1<<1); }
    1578:	f8d8 2010 	ldr.w	r2, [r8, #16]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000FFFF & gpio_outen_mask)) { err_code |= (1<<0); }
    157c:	1a41      	subs	r1, r0, r1
    157e:	e011      	b.n	15a4 <gpio_register_rw_test+0xb0c>
    1580:	00005ee0 	.word	0x00005ee0
    1584:	00005f0c 	.word	0x00005f0c
    1588:	00005f4c 	.word	0x00005f4c
    158c:	00005f90 	.word	0x00005f90
    1590:	00005fbc 	.word	0x00005fbc
    1594:	00006000 	.word	0x00006000
    1598:	0000602c 	.word	0x0000602c
    159c:	0000606c 	.word	0x0000606c
    15a0:	ccaa5500 	.word	0xccaa5500
    15a4:	bf18      	it	ne
    15a6:	2101      	movne	r1, #1
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000AAFF & gpio_outen_mask)) { err_code |= (1<<1); }
    15a8:	429a      	cmp	r2, r3
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF & gpio_outen_mask;
    15aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    15ae:	f8c8 3014 	str.w	r3, [r8, #20]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00000000 & gpio_outen_mask)) { err_code |= (1<<2); }
    15b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000AAFF & gpio_outen_mask)) { err_code |= (1<<1); }
    15b6:	bf18      	it	ne
    15b8:	f041 0102 	orrne.w	r1, r1, #2
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00000000 & gpio_outen_mask)) { err_code |= (1<<2); }
    15bc:	b10b      	cbz	r3, 15c2 <gpio_register_rw_test+0xb2a>
    15be:	f041 0104 	orr.w	r1, r1, #4

  /* half word size and byte size */
  HW16_REG(gpio_base + 0x14) = 0xFFFF & gpio_outen_mask;
    15c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HW16_REG(gpio_base + 0x10) = 0x3366 & gpio_outen_mask;
    15c6:	f243 3366 	movw	r3, #13158	; 0x3366
  HW16_REG(gpio_base + 0x14) = 0xFFFF & gpio_outen_mask;
    15ca:	983e      	ldr	r0, [sp, #248]	; 0xf8
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<3); }

  HW16_REG(gpio_base + 0x12) = 0x9988 & gpio_outen_mask; /* This transfer is ignored */
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<4); }
    HW16_REG(gpio_base + 0x14) = 0xFFFF & gpio_outen_mask;
    15cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
  HW16_REG(gpio_base + 0x14) = 0xFFFF & gpio_outen_mask;
    15d0:	8002      	strh	r2, [r0, #0]
  HW16_REG(gpio_base + 0x10) = 0x3366 & gpio_outen_mask;
    15d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  HW16_REG(gpio_base + 0x12) = 0x9988 & gpio_outen_mask; /* This transfer is ignored */
    15d4:	9850      	ldr	r0, [sp, #320]	; 0x140
  HW16_REG(gpio_base + 0x10) = 0x3366 & gpio_outen_mask;
    15d6:	8013      	strh	r3, [r2, #0]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<3); }
    15d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
    HW16_REG(gpio_base + 0x14) = 0xFFFF & gpio_outen_mask;
    15dc:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<3); }
    15de:	429a      	cmp	r2, r3
  HW16_REG(gpio_base + 0x12) = 0x9988 & gpio_outen_mask; /* This transfer is ignored */
    15e0:	f649 1288 	movw	r2, #39304	; 0x9988
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<4); }
    15e4:	f243 3366 	movw	r3, #13158	; 0x3366
  HW16_REG(gpio_base + 0x12) = 0x9988 & gpio_outen_mask; /* This transfer is ignored */
    15e8:	8002      	strh	r2, [r0, #0]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<4); }
    15ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
  HW8_REG( gpio_base + 0x10) =   0x44 & gpio_outen_mask;
    15ee:	f04f 0044 	mov.w	r0, #68	; 0x44
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<3); }
    15f2:	bf18      	it	ne
    15f4:	f041 0108 	orrne.w	r1, r1, #8
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<4); }
    15f8:	429a      	cmp	r2, r3
  HW8_REG( gpio_base + 0x11) =   0x33;
    15fa:	f04f 0233 	mov.w	r2, #51	; 0x33
  if (HW16_REG(gpio_base + 0x10)  != (0x00003344 & gpio_outen_mask)) { err_code |= (1<<5); }
    15fe:	f243 3344 	movw	r3, #13124	; 0x3344
    HW16_REG(gpio_base + 0x14) = 0xFFFF & gpio_outen_mask;
    1602:	802c      	strh	r4, [r5, #0]
  HW8_REG( gpio_base + 0x10) =   0x44 & gpio_outen_mask;
    1604:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x00003366 & gpio_outen_mask)) { err_code |= (1<<4); }
    1606:	bf18      	it	ne
    1608:	f041 0110 	orrne.w	r1, r1, #16
  HW8_REG( gpio_base + 0x10) =   0x44 & gpio_outen_mask;
    160c:	7020      	strb	r0, [r4, #0]
  HW8_REG( gpio_base + 0x11) =   0x33;
    160e:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1610:	7002      	strb	r2, [r0, #0]
  if (HW16_REG(gpio_base + 0x10)  != (0x00003344 & gpio_outen_mask)) { err_code |= (1<<5); }
    1612:	8822      	ldrh	r2, [r4, #0]
    1614:	4293      	cmp	r3, r2
  HW16_REG(gpio_base + 0x10) = 0x77EE & gpio_outen_mask;
    1616:	f247 73ee 	movw	r3, #30702	; 0x77ee
    161a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  if (HW16_REG(gpio_base + 0x10)  != (0x00003344 & gpio_outen_mask)) { err_code |= (1<<5); }
    161c:	bf18      	it	ne
    161e:	f041 0120 	orrne.w	r1, r1, #32
  HW16_REG(gpio_base + 0x10) = 0x77EE & gpio_outen_mask;
    1622:	8013      	strh	r3, [r2, #0]
  if (HW8_REG( gpio_base + 0x10)  != (0x000000EE & gpio_outen_mask)) { err_code |= (1<<6); }
    1624:	7813      	ldrb	r3, [r2, #0]
    1626:	2bee      	cmp	r3, #238	; 0xee
  if (HW8_REG( gpio_base + 0x11)  != (0x00000077 & (gpio_outen_mask>>8))) { err_code |= (1<<7); }
    1628:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  if (HW8_REG( gpio_base + 0x10)  != (0x000000EE & gpio_outen_mask)) { err_code |= (1<<6); }
    162a:	bf18      	it	ne
    162c:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
  if (HW8_REG( gpio_base + 0x11)  != (0x00000077 & (gpio_outen_mask>>8))) { err_code |= (1<<7); }
    1630:	781b      	ldrb	r3, [r3, #0]
    1632:	2b77      	cmp	r3, #119	; 0x77

  CM3DS_MPS2_GPIO->OUTENABLESET = 0x0000FFFF & gpio_outen_mask; /* Set all output enabled */
    1634:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1638:	f8c8 3010 	str.w	r3, [r8, #16]
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000FFFF & gpio_outen_mask)) { err_code |= (1<<8); }
    163c:	f8d8 2010 	ldr.w	r2, [r8, #16]
  if (HW8_REG( gpio_base + 0x11)  != (0x00000077 & (gpio_outen_mask>>8))) { err_code |= (1<<7); }
    1640:	bf18      	it	ne
    1642:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
  if (CM3DS_MPS2_GPIO->OUTENABLESET     != (0x0000FFFF & gpio_outen_mask)) { err_code |= (1<<8); }
    1646:	429a      	cmp	r2, r3
    1648:	bf18      	it	ne
    164a:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
    164e:	f3bf 8f6f 	isb	sy

  /* Now we can test read back data */
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<9); }
    1652:	f8d8 3000 	ldr.w	r3, [r8]
    1656:	ea13 0f0a 	tst.w	r3, sl
  if ((HW16_REG( gpio_base + 0x0) & gpio_datamask) != 0x0000) {err_code |= (1<<10); }
    165a:	f8b8 3000 	ldrh.w	r3, [r8]
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<9); }
    165e:	bf18      	it	ne
    1660:	f441 7100 	orrne.w	r1, r1, #512	; 0x200
  if ((HW16_REG( gpio_base + 0x0) & gpio_datamask) != 0x0000) {err_code |= (1<<10); }
    1664:	ea1a 0f03 	tst.w	sl, r3

  /* Test byte size write to data register, which in effect change dataout register */
  HW8_REG( gpio_base + 0x0) = 0xFF;
    1668:	f04f 03ff 	mov.w	r3, #255	; 0xff
    166c:	f888 3000 	strb.w	r3, [r8]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x00FF)     {err_code |= (1<<11); }
    1670:	f8d8 3004 	ldr.w	r3, [r8, #4]
  if ((HW16_REG( gpio_base + 0x0) & gpio_datamask) != 0x0000) {err_code |= (1<<10); }
    1674:	bf18      	it	ne
    1676:	f441 6180 	orrne.w	r1, r1, #1024	; 0x400
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x00FF)     {err_code |= (1<<11); }
    167a:	2bff      	cmp	r3, #255	; 0xff
    167c:	bf18      	it	ne
    167e:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
    1682:	f3bf 8f6f 	isb	sy
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x00FF & gpio_datamask)) {err_code |= (1<<12); }
  HW8_REG( gpio_base + 0x1) = 0xFF;
    1686:	22ff      	movs	r2, #255	; 0xff
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x00FF & gpio_datamask)) {err_code |= (1<<12); }
    1688:	f8d8 3000 	ldr.w	r3, [r8]
  HW8_REG( gpio_base + 0x1) = 0xFF;
    168c:	983d      	ldr	r0, [sp, #244]	; 0xf4
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x00FF & gpio_datamask)) {err_code |= (1<<12); }
    168e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    1692:	ea13 0f0a 	tst.w	r3, sl
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<13); }
    1696:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HW8_REG( gpio_base + 0x1) = 0xFF;
    169a:	7002      	strb	r2, [r0, #0]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<13); }
    169c:	f8d8 2004 	ldr.w	r2, [r8, #4]
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x00FF & gpio_datamask)) {err_code |= (1<<12); }
    16a0:	bf18      	it	ne
    16a2:	f441 5180 	orrne.w	r1, r1, #4096	; 0x1000
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<13); }
    16a6:	429a      	cmp	r2, r3
    16a8:	bf18      	it	ne
    16aa:	f441 5100 	orrne.w	r1, r1, #8192	; 0x2000
    16ae:	f3bf 8f6f 	isb	sy
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<14); }
    16b2:	f8d8 3000 	ldr.w	r3, [r8]
  HW8_REG( gpio_base + 0x2) = 0xFF;
    16b6:	22ff      	movs	r2, #255	; 0xff
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<14); }
    16b8:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    16bc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    16c0:	ea13 0f0a 	tst.w	r3, sl
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<13); }
    16c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HW8_REG( gpio_base + 0x2) = 0xFF;
    16c8:	983c      	ldr	r0, [sp, #240]	; 0xf0
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<14); }
    16ca:	bf18      	it	ne
    16cc:	f441 4180 	orrne.w	r1, r1, #16384	; 0x4000
  HW8_REG( gpio_base + 0x2) = 0xFF;
    16d0:	7002      	strb	r2, [r0, #0]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<13); }
    16d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    16d6:	429a      	cmp	r2, r3
    16d8:	bf18      	it	ne
    16da:	f441 5100 	orrne.w	r1, r1, #8192	; 0x2000
    16de:	f3bf 8f6f 	isb	sy
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<15); }
    16e2:	f8d8 3000 	ldr.w	r3, [r8]
  HW8_REG( gpio_base + 0x3) = 0xFF;
    16e6:	22ff      	movs	r2, #255	; 0xff
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<15); }
    16e8:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    16ec:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    16f0:	ea13 0f0a 	tst.w	r3, sl
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<14); }
    16f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  HW8_REG( gpio_base + 0x3) = 0xFF;
    16f8:	982b      	ldr	r0, [sp, #172]	; 0xac
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<15); }
    16fa:	bf18      	it	ne
    16fc:	f441 4100 	orrne.w	r1, r1, #32768	; 0x8000
  HW8_REG( gpio_base + 0x3) = 0xFF;
    1700:	7002      	strb	r2, [r0, #0]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<14); }
    1702:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1706:	429a      	cmp	r2, r3
    1708:	bf18      	it	ne
    170a:	f441 4180 	orrne.w	r1, r1, #16384	; 0x4000
    170e:	f3bf 8f6f 	isb	sy
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<16); }
    1712:	f8d8 3000 	ldr.w	r3, [r8]
    1716:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    171a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    171e:	ea13 0f0a 	tst.w	r3, sl

  CM3DS_MPS2_GPIO->DATAOUT = 0x1234;
    1722:	f241 2334 	movw	r3, #4660	; 0x1234
    1726:	f8c8 3004 	str.w	r3, [r8, #4]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x1234)      {err_code |= (1<<17); }
    172a:	f8d8 2004 	ldr.w	r2, [r8, #4]
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<16); }
    172e:	bf18      	it	ne
    1730:	f441 3180 	orrne.w	r1, r1, #65536	; 0x10000
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x1234)      {err_code |= (1<<17); }
    1734:	429a      	cmp	r2, r3
  if (HW8_REG( gpio_base + 0x4) != 0x34)     {err_code |= (1<<18); }
  if (HW8_REG( gpio_base + 0x5) != 0x12)     {err_code |= (1<<19); }
  if (HW16_REG(gpio_base + 0x4) != 0x1234)   {err_code |= (1<<20); }
    1736:	f241 2234 	movw	r2, #4660	; 0x1234
  if (HW8_REG( gpio_base + 0x4) != 0x34)     {err_code |= (1<<18); }
    173a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x1234)      {err_code |= (1<<17); }
    173c:	bf18      	it	ne
    173e:	f441 3100 	orrne.w	r1, r1, #131072	; 0x20000
  if (HW8_REG( gpio_base + 0x4) != 0x34)     {err_code |= (1<<18); }
    1742:	781b      	ldrb	r3, [r3, #0]
    1744:	2b34      	cmp	r3, #52	; 0x34
  if (HW8_REG( gpio_base + 0x5) != 0x12)     {err_code |= (1<<19); }
    1746:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
  if (HW8_REG( gpio_base + 0x4) != 0x34)     {err_code |= (1<<18); }
    1748:	bf18      	it	ne
    174a:	f441 2180 	orrne.w	r1, r1, #262144	; 0x40000
  if (HW8_REG( gpio_base + 0x5) != 0x12)     {err_code |= (1<<19); }
    174e:	781b      	ldrb	r3, [r3, #0]
    1750:	2b12      	cmp	r3, #18
  if (HW16_REG(gpio_base + 0x4) != 0x1234)   {err_code |= (1<<20); }
    1752:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  if (HW8_REG( gpio_base + 0x5) != 0x12)     {err_code |= (1<<19); }
    1754:	bf18      	it	ne
    1756:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  if (HW16_REG(gpio_base + 0x4) != 0x1234)   {err_code |= (1<<20); }
    175a:	881b      	ldrh	r3, [r3, #0]
    175c:	429a      	cmp	r2, r3
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x1234 & gpio_datamask)) {err_code |= (1<<21); }
    175e:	f8d8 3000 	ldr.w	r3, [r8]
  if (HW16_REG(gpio_base + 0x4) != 0x1234)   {err_code |= (1<<20); }
    1762:	bf18      	it	ne
    1764:	f441 1180 	orrne.w	r1, r1, #1048576	; 0x100000
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x1234 & gpio_datamask)) {err_code |= (1<<21); }
    1768:	f483 5391 	eor.w	r3, r3, #4640	; 0x1220
    176c:	f083 0314 	eor.w	r3, r3, #20
    1770:	ea13 0f0a 	tst.w	r3, sl
  if ((HW8_REG( gpio_base + 0x0) & gpio_datamask) != (0x34 & gpio_datamask)) {err_code |= (1<<22); }
    1774:	f898 3000 	ldrb.w	r3, [r8]
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x1234 & gpio_datamask)) {err_code |= (1<<21); }
    1778:	bf18      	it	ne
    177a:	f441 1100 	orrne.w	r1, r1, #2097152	; 0x200000
  if ((HW8_REG( gpio_base + 0x0) & gpio_datamask) != (0x34 & gpio_datamask)) {err_code |= (1<<22); }
    177e:	f083 0334 	eor.w	r3, r3, #52	; 0x34
    1782:	ea13 0f0a 	tst.w	r3, sl
  if ((HW8_REG( gpio_base + 0x1) & (gpio_datamask>>8)) != (0x12 & (gpio_datamask>>8))) {err_code |= (1<<23); }
    1786:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    1788:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    178a:	781b      	ldrb	r3, [r3, #0]
  if ((HW8_REG( gpio_base + 0x0) & gpio_datamask) != (0x34 & gpio_datamask)) {err_code |= (1<<22); }
    178c:	bf18      	it	ne
    178e:	f441 0180 	orrne.w	r1, r1, #4194304	; 0x400000
  if ((HW8_REG( gpio_base + 0x1) & (gpio_datamask>>8)) != (0x12 & (gpio_datamask>>8))) {err_code |= (1<<23); }
    1792:	f083 0312 	eor.w	r3, r3, #18
    1796:	4213      	tst	r3, r2
  if ( HW8_REG( gpio_base + 0x2) != 0x00)    {err_code |= (1<<24); }
    1798:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
  if ((HW8_REG( gpio_base + 0x1) & (gpio_datamask>>8)) != (0x12 & (gpio_datamask>>8))) {err_code |= (1<<23); }
    179a:	bf18      	it	ne
    179c:	f441 0100 	orrne.w	r1, r1, #8388608	; 0x800000
  if ( HW8_REG( gpio_base + 0x2) != 0x00)    {err_code |= (1<<24); }
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	b10b      	cbz	r3, 17a8 <gpio_register_rw_test+0xd10>
    17a4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  if ( HW8_REG( gpio_base + 0x3) != 0x00)    {err_code |= (1<<25); }
    17a8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	b10b      	cbz	r3, 17b2 <gpio_register_rw_test+0xd1a>
    17ae:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  if (HW16_REG( gpio_base + 0x6) != 0x0000)  {err_code |= (1<<26); }
    17b2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    17b4:	881b      	ldrh	r3, [r3, #0]
    17b6:	b29b      	uxth	r3, r3
    17b8:	b10b      	cbz	r3, 17be <gpio_register_rw_test+0xd26>
    17ba:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000

  HW16_REG( gpio_base + 0x0) = 0xFFFF;
    17be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    17c2:	f8a8 3000 	strh.w	r3, [r8]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0xFFFF)     {err_code |= (1<<27); }
    17c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    17ca:	429a      	cmp	r2, r3
    17cc:	bf18      	it	ne
    17ce:	f041 6100 	orrne.w	r1, r1, #134217728	; 0x8000000
    17d2:	f3bf 8f6f 	isb	sy
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<28); }
    17d6:	f8d8 3000 	ldr.w	r3, [r8]

  HW16_REG( gpio_base + 0x4) = 0x0000;
    17da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<28); }
    17dc:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    17e0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    17e4:	ea13 0f0a 	tst.w	r3, sl
  HW16_REG( gpio_base + 0x4) = 0x0000;
    17e8:	f04f 0300 	mov.w	r3, #0
    17ec:	8013      	strh	r3, [r2, #0]
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x0000)     {err_code |= (1<<29); }
    17ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<28); }
    17f2:	bf18      	it	ne
    17f4:	f041 5180 	orrne.w	r1, r1, #268435456	; 0x10000000
  if (CM3DS_MPS2_GPIO->DATAOUT   != 0x0000)     {err_code |= (1<<29); }
    17f8:	b10b      	cbz	r3, 17fe <gpio_register_rw_test+0xd66>
    17fa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    17fe:	f3bf 8f6f 	isb	sy
  small_delay(); /* required because the DATA readback is delay by double-flop-flop synchronisation */
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<30); }
    1802:	f8d8 3000 	ldr.w	r3, [r8]
    1806:	ea13 0f0a 	tst.w	r3, sl

  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF; /* Disable output */
    180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if ((CM3DS_MPS2_GPIO->DATA & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<30); }
    180e:	f000 842d 	beq.w	206c <gpio_register_rw_test+0x15d4>
    1812:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF; /* Disable output */
    1816:	f8c8 3014 	str.w	r3, [r8, #20]

  /* Generate return value */
  if (err_code != 0) {
    printf ("ERROR : Read/write #1 failed(0x%x)\n", err_code);
    181a:	48b9      	ldr	r0, [pc, #740]	; (1b00 <gpio_register_rw_test+0x1068>)
    181c:	f003 f9ba 	bl	4b94 <iprintf>
    return_val=1;
    1820:	2301      	movs	r3, #1
    1822:	931b      	str	r3, [sp, #108]	; 0x6c
    1824:	f3bf 8f6f 	isb	sy
    }

  small_delay();

  /* Test ALTFUNC register */
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0xFFFF;
    1828:	f64f 73ff 	movw	r3, #65535	; 0xffff
    182c:	f8c8 301c 	str.w	r3, [r8, #28]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x0000 & gpio_altfunc_mask)) {err_code |= (1<<0); }
    1830:	f8d8 1018 	ldr.w	r1, [r8, #24]
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0x0000 & gpio_altfunc_mask)) {err_code |= (1<<1); }
    1834:	8833      	ldrh	r3, [r6, #0]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x0000 & gpio_altfunc_mask)) {err_code |= (1<<0); }
    1836:	b289      	uxth	r1, r1
    1838:	3100      	adds	r1, #0
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0x0000 & gpio_altfunc_mask)) {err_code |= (1<<1); }
    183a:	b29b      	uxth	r3, r3
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x0000 & gpio_altfunc_mask)) {err_code |= (1<<0); }
    183c:	bf18      	it	ne
    183e:	2101      	movne	r1, #1
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0x0000 & gpio_altfunc_mask)) {err_code |= (1<<1); }
    1840:	b10b      	cbz	r3, 1846 <gpio_register_rw_test+0xdae>
    1842:	f041 0102 	orr.w	r1, r1, #2
  if ((HW16_REG(gpio_base + 0x1A)                    ) != (0x0000                    )) {err_code |= (1<<2); }
    1846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1848:	881b      	ldrh	r3, [r3, #0]
    184a:	b29b      	uxth	r3, r3
    184c:	b10b      	cbz	r3, 1852 <gpio_register_rw_test+0xdba>
    184e:	f041 0104 	orr.w	r1, r1, #4

  CM3DS_MPS2_GPIO->ALTFUNCSET = 0xFFFF;
    1852:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1856:	f8c8 3018 	str.w	r3, [r8, #24]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0xFFFF & gpio_altfunc_mask)) {err_code |= (1<<3); }
    185a:	f8d8 3018 	ldr.w	r3, [r8, #24]
    185e:	43db      	mvns	r3, r3
    1860:	b29b      	uxth	r3, r3
    1862:	b10b      	cbz	r3, 1868 <gpio_register_rw_test+0xdd0>
    1864:	f041 0108 	orr.w	r1, r1, #8
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0xFFFF & gpio_altfunc_mask)) {err_code |= (1<<4); }
    1868:	f64f 72ff 	movw	r2, #65535	; 0xffff
    186c:	8833      	ldrh	r3, [r6, #0]
    186e:	429a      	cmp	r2, r3
  if ((HW16_REG(gpio_base + 0x1A)                    ) != (0x0000                    )) {err_code |= (1<<5); }
    1870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0xFFFF & gpio_altfunc_mask)) {err_code |= (1<<4); }
    1872:	bf18      	it	ne
    1874:	f041 0110 	orrne.w	r1, r1, #16
  if ((HW16_REG(gpio_base + 0x1A)                    ) != (0x0000                    )) {err_code |= (1<<5); }
    1878:	881b      	ldrh	r3, [r3, #0]
    187a:	b29b      	uxth	r3, r3
    187c:	b10b      	cbz	r3, 1882 <gpio_register_rw_test+0xdea>
    187e:	f041 0120 	orr.w	r1, r1, #32
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0xFF   & gpio_altfunc_mask)) {err_code |= (1<<6); }
    1882:	7833      	ldrb	r3, [r6, #0]
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0xFF & (gpio_altfunc_mask>>8))) {err_code |= (1<<7); }

  HW16_REG(gpio_base + 0x1C) = 0x996E;
    1884:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0xFF   & gpio_altfunc_mask)) {err_code |= (1<<6); }
    1886:	2bff      	cmp	r3, #255	; 0xff
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0xFF & (gpio_altfunc_mask>>8))) {err_code |= (1<<7); }
    1888:	9b11      	ldr	r3, [sp, #68]	; 0x44
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0xFF   & gpio_altfunc_mask)) {err_code |= (1<<6); }
    188a:	bf18      	it	ne
    188c:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0xFF & (gpio_altfunc_mask>>8))) {err_code |= (1<<7); }
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	2bff      	cmp	r3, #255	; 0xff
  HW16_REG(gpio_base + 0x1C) = 0x996E;
    1894:	f649 136e 	movw	r3, #39278	; 0x996e
    1898:	8013      	strh	r3, [r2, #0]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x6691 & gpio_altfunc_mask)) {err_code |= (1<<8); }
    189a:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0xFF & (gpio_altfunc_mask>>8))) {err_code |= (1<<7); }
    189e:	bf18      	it	ne
    18a0:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x6691 & gpio_altfunc_mask)) {err_code |= (1<<8); }
    18a4:	f483 43cd 	eor.w	r3, r3, #26240	; 0x6680
    18a8:	f083 0311 	eor.w	r3, r3, #17
    18ac:	b29b      	uxth	r3, r3
    18ae:	b10b      	cbz	r3, 18b4 <gpio_register_rw_test+0xe1c>
    18b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  HW16_REG(gpio_base + 0x1A) = 0xFFFF; /* ignored */
    18b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0x6691 & gpio_altfunc_mask)) {err_code |= (1<<9); }
    18b8:	f246 6291 	movw	r2, #26257	; 0x6691
  HW16_REG(gpio_base + 0x1A) = 0xFFFF; /* ignored */
    18bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    18be:	8003      	strh	r3, [r0, #0]
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0x6691 & gpio_altfunc_mask)) {err_code |= (1<<9); }
    18c0:	8833      	ldrh	r3, [r6, #0]
    18c2:	429a      	cmp	r2, r3
  if ((HW16_REG(gpio_base + 0x1A)                    ) != (0x0000                    )) {err_code |= (1<<10); }
    18c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  if ((HW16_REG(gpio_base + 0x18) & gpio_altfunc_mask) != (0x6691 & gpio_altfunc_mask)) {err_code |= (1<<9); }
    18c6:	bf18      	it	ne
    18c8:	f441 7100 	orrne.w	r1, r1, #512	; 0x200
  if ((HW16_REG(gpio_base + 0x1A)                    ) != (0x0000                    )) {err_code |= (1<<10); }
    18cc:	881b      	ldrh	r3, [r3, #0]
    18ce:	b29b      	uxth	r3, r3
    18d0:	b10b      	cbz	r3, 18d6 <gpio_register_rw_test+0xe3e>
    18d2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0x91   & gpio_altfunc_mask)) {err_code |= (1<<11); }
    18d6:	7833      	ldrb	r3, [r6, #0]
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x66 & (gpio_altfunc_mask>>8))) {err_code |= (1<<12); }
  HW16_REG(gpio_base + 0x1C) = 0xFFFF;
  HW8_REG(gpio_base + 0x18) = 0x45;
    18d8:	2045      	movs	r0, #69	; 0x45
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0x91   & gpio_altfunc_mask)) {err_code |= (1<<11); }
    18da:	2b91      	cmp	r3, #145	; 0x91
  HW16_REG(gpio_base + 0x1C) = 0xFFFF;
    18dc:	f64f 74ff 	movw	r4, #65535	; 0xffff
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x66 & (gpio_altfunc_mask>>8))) {err_code |= (1<<12); }
    18e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  HW8_REG(gpio_base + 0x19) = 0x23;
    18e2:	f04f 0223 	mov.w	r2, #35	; 0x23
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x66 & (gpio_altfunc_mask>>8))) {err_code |= (1<<12); }
    18e6:	781b      	ldrb	r3, [r3, #0]
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0x91   & gpio_altfunc_mask)) {err_code |= (1<<11); }
    18e8:	bf18      	it	ne
    18ea:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x66 & (gpio_altfunc_mask>>8))) {err_code |= (1<<12); }
    18ee:	2b66      	cmp	r3, #102	; 0x66
  HW8_REG(gpio_base + 0x1A) = 0x77;
    18f0:	f04f 0377 	mov.w	r3, #119	; 0x77
  HW16_REG(gpio_base + 0x1C) = 0xFFFF;
    18f4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x66 & (gpio_altfunc_mask>>8))) {err_code |= (1<<12); }
    18f6:	bf18      	it	ne
    18f8:	f441 5180 	orrne.w	r1, r1, #4096	; 0x1000
  HW16_REG(gpio_base + 0x1C) = 0xFFFF;
    18fc:	802c      	strh	r4, [r5, #0]
  HW8_REG(gpio_base + 0x18) = 0x45;
    18fe:	7030      	strb	r0, [r6, #0]
  HW8_REG(gpio_base + 0x19) = 0x23;
    1900:	9811      	ldr	r0, [sp, #68]	; 0x44
    1902:	7002      	strb	r2, [r0, #0]
  HW8_REG(gpio_base + 0x1A) = 0x77;
    1904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1906:	7013      	strb	r3, [r2, #0]
  HW8_REG(gpio_base + 0x1B) = 0x77;
    1908:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    190a:	7013      	strb	r3, [r2, #0]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x2345 & gpio_altfunc_mask)) {err_code |= (1<<13); }
    190c:	f8d8 3018 	ldr.w	r3, [r8, #24]
    1910:	f483 530d 	eor.w	r3, r3, #9024	; 0x2340
    1914:	f083 0305 	eor.w	r3, r3, #5
    1918:	b29b      	uxth	r3, r3
    191a:	b10b      	cbz	r3, 1920 <gpio_register_rw_test+0xe88>
    191c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0x45   & gpio_altfunc_mask)) {err_code |= (1<<14); }
    1920:	7833      	ldrb	r3, [r6, #0]
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x23 & (gpio_altfunc_mask>>8))) {err_code |= (1<<15); }

  CM3DS_MPS2_GPIO->ALTFUNCSET = 0x5488;
    1922:	f245 4288 	movw	r2, #21640	; 0x5488
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0x45   & gpio_altfunc_mask)) {err_code |= (1<<14); }
    1926:	2b45      	cmp	r3, #69	; 0x45
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x23 & (gpio_altfunc_mask>>8))) {err_code |= (1<<15); }
    1928:	9b11      	ldr	r3, [sp, #68]	; 0x44
  if ((HW8_REG( gpio_base + 0x18) & gpio_altfunc_mask) != (0x45   & gpio_altfunc_mask)) {err_code |= (1<<14); }
    192a:	bf18      	it	ne
    192c:	f441 4180 	orrne.w	r1, r1, #16384	; 0x4000
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x23 & (gpio_altfunc_mask>>8))) {err_code |= (1<<15); }
    1930:	781b      	ldrb	r3, [r3, #0]
  CM3DS_MPS2_GPIO->ALTFUNCSET = 0x5488;
    1932:	f8c8 2018 	str.w	r2, [r8, #24]
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x23 & (gpio_altfunc_mask>>8))) {err_code |= (1<<15); }
    1936:	2b23      	cmp	r3, #35	; 0x23
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0x2201;
    1938:	f242 2301 	movw	r3, #8705	; 0x2201
    193c:	f8c8 301c 	str.w	r3, [r8, #28]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x55CC & gpio_altfunc_mask)) {err_code |= (1<<16); }
    1940:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if ((HW8_REG( gpio_base + 0x19) & (gpio_altfunc_mask>>8)) != (0x23 & (gpio_altfunc_mask>>8))) {err_code |= (1<<15); }
    1944:	bf18      	it	ne
    1946:	f441 4100 	orrne.w	r1, r1, #32768	; 0x8000
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x55CC & gpio_altfunc_mask)) {err_code |= (1<<16); }
    194a:	f483 43ab 	eor.w	r3, r3, #21888	; 0x5580
    194e:	f083 034c 	eor.w	r3, r3, #76	; 0x4c
    1952:	b29b      	uxth	r3, r3
    1954:	f64f 72ff 	movw	r2, #65535	; 0xffff
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0x00CC;
    1958:	20cc      	movs	r0, #204	; 0xcc
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x55CC & gpio_altfunc_mask)) {err_code |= (1<<16); }
    195a:	2b00      	cmp	r3, #0
    195c:	f000 8368 	beq.w	2030 <gpio_register_rw_test+0x1598>
  CM3DS_MPS2_GPIO->ALTFUNCSET = 0xAA33;
    1960:	f64a 2333 	movw	r3, #43571	; 0xaa33
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0x00CC;
    1964:	f8c8 001c 	str.w	r0, [r8, #28]
  CM3DS_MPS2_GPIO->ALTFUNCSET = 0xAA33;
    1968:	f8c8 3018 	str.w	r3, [r8, #24]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0xFF33 & gpio_altfunc_mask)) {err_code |= (1<<17); }
    196c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0x55CC & gpio_altfunc_mask)) {err_code |= (1<<16); }
    1970:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0xFF33 & gpio_altfunc_mask)) {err_code |= (1<<17); }
    1974:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    1978:	f083 0333 	eor.w	r3, r3, #51	; 0x33
    197c:	b29b      	uxth	r3, r3
    197e:	2b00      	cmp	r3, #0
    1980:	f040 8346 	bne.w	2010 <gpio_register_rw_test+0x1578>
  CM3DS_MPS2_GPIO->DATAOUT = 0xFFFF; /* force GPIO pins high before starting next test */
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF;
    1984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  CM3DS_MPS2_GPIO->DATAOUT = 0xFFFF; /* force GPIO pins high before starting next test */
    1988:	f8c8 2004 	str.w	r2, [r8, #4]
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF;
    198c:	f8c8 3010 	str.w	r3, [r8, #16]
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0xFFFF;
  CM3DS_MPS2_GPIO->ALTFUNCSET = saved_altfunc; /* Restore ALTFUNC */
    1990:	9b53      	ldr	r3, [sp, #332]	; 0x14c
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0xFFFF;
    1992:	f8c8 201c 	str.w	r2, [r8, #28]
  CM3DS_MPS2_GPIO->ALTFUNCSET = saved_altfunc; /* Restore ALTFUNC */
    1996:	f8c8 3018 	str.w	r3, [r8, #24]

  if (err_code != 0) {
    printf ("ERROR : Read/write #2 failed(0x%x)\n", err_code);
    199a:	485a      	ldr	r0, [pc, #360]	; (1b04 <gpio_register_rw_test+0x106c>)
    199c:	f003 f8fa 	bl	4b94 <iprintf>
    return_val=1;
    19a0:	2301      	movs	r3, #1
    19a2:	931b      	str	r3, [sp, #108]	; 0x6c
    }

  // Write to every location

  /* Test INTEN register read/write - offset 0x20  */
  CM3DS_MPS2_GPIO->INTENSET = 0x00FF;
    19a4:	23ff      	movs	r3, #255	; 0xff
    19a6:	f8c8 3020 	str.w	r3, [r8, #32]
  if ((CM3DS_MPS2_GPIO->INTENSET)      != 0x00FF){err_code |= (1<<0); }
    19aa:	f8d8 1020 	ldr.w	r1, [r8, #32]
  if ( HW8_REG(gpio_base + 0x20)!= 0xFF  ){err_code |= (1<<1); }
    19ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  if ((CM3DS_MPS2_GPIO->INTENSET)      != 0x00FF){err_code |= (1<<0); }
    19b0:	39ff      	subs	r1, #255	; 0xff
    19b2:	bf18      	it	ne
    19b4:	2101      	movne	r1, #1
  if ( HW8_REG(gpio_base + 0x20)!= 0xFF  ){err_code |= (1<<1); }
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	2bff      	cmp	r3, #255	; 0xff
  if ( HW8_REG(gpio_base + 0x21)!= 0x00  ){err_code |= (1<<2); }
    19ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  if ( HW8_REG(gpio_base + 0x20)!= 0xFF  ){err_code |= (1<<1); }
    19bc:	bf18      	it	ne
    19be:	f041 0102 	orrne.w	r1, r1, #2
  if ( HW8_REG(gpio_base + 0x21)!= 0x00  ){err_code |= (1<<2); }
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	b10b      	cbz	r3, 19ca <gpio_register_rw_test+0xf32>
    19c6:	f041 0104 	orr.w	r1, r1, #4
  if (HW16_REG(gpio_base + 0x22)!= 0x0000){err_code |= (1<<3); }
    19ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    19cc:	881b      	ldrh	r3, [r3, #0]
    19ce:	b29b      	uxth	r3, r3
    19d0:	b10b      	cbz	r3, 19d6 <gpio_register_rw_test+0xf3e>
    19d2:	f041 0108 	orr.w	r1, r1, #8
  CM3DS_MPS2_GPIO->INTENSET = 0xFF00;
    19d6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  CM3DS_MPS2_GPIO->INTENCLR = 0x00FF;
    19da:	23ff      	movs	r3, #255	; 0xff
  CM3DS_MPS2_GPIO->INTENSET = 0xFF00;
    19dc:	f8c8 2020 	str.w	r2, [r8, #32]
  CM3DS_MPS2_GPIO->INTENCLR = 0x00FF;
    19e0:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  if ((CM3DS_MPS2_GPIO->INTENSET)      != 0xFF00){err_code |= (1<<4); }
    19e4:	f8d8 3020 	ldr.w	r3, [r8, #32]
    19e8:	4293      	cmp	r3, r2
  if (HW16_REG(gpio_base + 0x20)!= 0xFF00){err_code |= (1<<5); }
    19ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  if ((CM3DS_MPS2_GPIO->INTENSET)      != 0xFF00){err_code |= (1<<4); }
    19ec:	bf18      	it	ne
    19ee:	f041 0110 	orrne.w	r1, r1, #16
  if (HW16_REG(gpio_base + 0x20)!= 0xFF00){err_code |= (1<<5); }
    19f2:	881b      	ldrh	r3, [r3, #0]
    19f4:	b29b      	uxth	r3, r3
    19f6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
  if ( HW8_REG(gpio_base + 0x20)!= 0x00  ){err_code |= (1<<6); }
    19fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  if (HW16_REG(gpio_base + 0x20)!= 0xFF00){err_code |= (1<<5); }
    19fc:	bf18      	it	ne
    19fe:	f041 0120 	orrne.w	r1, r1, #32
  if ( HW8_REG(gpio_base + 0x20)!= 0x00  ){err_code |= (1<<6); }
    1a02:	781b      	ldrb	r3, [r3, #0]
    1a04:	b10b      	cbz	r3, 1a0a <gpio_register_rw_test+0xf72>
    1a06:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  if ( HW8_REG(gpio_base + 0x21)!= 0xFF  ){err_code |= (1<<7); }
    1a0a:	9b29      	ldr	r3, [sp, #164]	; 0xa4

  CM3DS_MPS2_GPIO->INTENCLR = 0x5500;
    1a0c:	f44f 40aa 	mov.w	r0, #21760	; 0x5500
  CM3DS_MPS2_GPIO->INTENSET = 0x0055;
    1a10:	2255      	movs	r2, #85	; 0x55
  if ( HW8_REG(gpio_base + 0x21)!= 0xFF  ){err_code |= (1<<7); }
    1a12:	781b      	ldrb	r3, [r3, #0]
  CM3DS_MPS2_GPIO->INTENCLR = 0x5500;
    1a14:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
  if ( HW8_REG(gpio_base + 0x21)!= 0xFF  ){err_code |= (1<<7); }
    1a18:	2bff      	cmp	r3, #255	; 0xff
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0xAA55)     {err_code |= (1<<8); }
    1a1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
  CM3DS_MPS2_GPIO->INTENSET = 0x0055;
    1a1e:	f8c8 2020 	str.w	r2, [r8, #32]
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0xAA55)     {err_code |= (1<<8); }
    1a22:	f8d8 2020 	ldr.w	r2, [r8, #32]
  if ( HW8_REG(gpio_base + 0x21)!= 0xFF  ){err_code |= (1<<7); }
    1a26:	bf18      	it	ne
    1a28:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0xAA55)     {err_code |= (1<<8); }
    1a2c:	429a      	cmp	r2, r3
  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
  CM3DS_MPS2_GPIO->INTENSET = 0x33BB;
    1a2e:	f243 33bb 	movw	r3, #13243	; 0x33bb
  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
    1a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x33BB)     {err_code |= (1<<9); }
  HW8_REG(gpio_base + 0x20) = 0x44;
    1a36:	f04f 0544 	mov.w	r5, #68	; 0x44
  HW8_REG(gpio_base + 0x24) = 0xBA;
    1a3a:	f04f 04ba 	mov.w	r4, #186	; 0xba
  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
    1a3e:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
  CM3DS_MPS2_GPIO->INTENSET = 0x33BB;
    1a42:	f8c8 3020 	str.w	r3, [r8, #32]
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x33BB)     {err_code |= (1<<9); }
    1a46:	f8d8 2020 	ldr.w	r2, [r8, #32]
  HW8_REG(gpio_base + 0x25) = 0x10;
    1a4a:	f04f 0010 	mov.w	r0, #16
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0xAA55)     {err_code |= (1<<8); }
    1a4e:	bf18      	it	ne
    1a50:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x33BB)     {err_code |= (1<<9); }
    1a54:	429a      	cmp	r2, r3
  HW8_REG(gpio_base + 0x26) = 0x99;
    1a56:	f04f 0399 	mov.w	r3, #153	; 0x99
  HW8_REG(gpio_base + 0x27) = 0x99;
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x2345)     {err_code |= (1<<10); }
    1a5a:	f242 3245 	movw	r2, #9029	; 0x2345
  HW8_REG(gpio_base + 0x20) = 0x44;
    1a5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x33BB)     {err_code |= (1<<9); }
    1a60:	bf18      	it	ne
    1a62:	f441 7100 	orrne.w	r1, r1, #512	; 0x200
  HW8_REG(gpio_base + 0x20) = 0x44;
    1a66:	7035      	strb	r5, [r6, #0]
  HW8_REG(gpio_base + 0x24) = 0xBA;
    1a68:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    1a6a:	702c      	strb	r4, [r5, #0]
  HW8_REG(gpio_base + 0x25) = 0x10;
    1a6c:	9c4c      	ldr	r4, [sp, #304]	; 0x130
  HW16_REG(gpio_base + 0x20) = 0x5892;
    1a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  HW8_REG(gpio_base + 0x25) = 0x10;
    1a70:	7020      	strb	r0, [r4, #0]
  HW8_REG(gpio_base + 0x26) = 0x99;
    1a72:	984b      	ldr	r0, [sp, #300]	; 0x12c
  HW16_REG(gpio_base + 0x20) = 0x5892;
    1a74:	f645 0492 	movw	r4, #22674	; 0x5892
  HW8_REG(gpio_base + 0x26) = 0x99;
    1a78:	7003      	strb	r3, [r0, #0]
  HW8_REG(gpio_base + 0x27) = 0x99;
    1a7a:	984a      	ldr	r0, [sp, #296]	; 0x128
    1a7c:	7003      	strb	r3, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x2345)     {err_code |= (1<<10); }
    1a7e:	f8d8 3020 	ldr.w	r3, [r8, #32]
  HW16_REG(gpio_base + 0x22) = 0x1111;
    1a82:	f241 1011 	movw	r0, #4369	; 0x1111
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x2345)     {err_code |= (1<<10); }
    1a86:	4293      	cmp	r3, r2
  HW16_REG(gpio_base + 0x24) = 0x0240;
    1a88:	f44f 7210 	mov.w	r2, #576	; 0x240
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x7997)     {err_code |= (1<<11); }
    1a8c:	f647 1397 	movw	r3, #31127	; 0x7997
  HW16_REG(gpio_base + 0x20) = 0x5892;
    1a90:	802c      	strh	r4, [r5, #0]
  HW16_REG(gpio_base + 0x22) = 0x1111;
    1a92:	9c28      	ldr	r4, [sp, #160]	; 0xa0
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x2345)     {err_code |= (1<<10); }
    1a94:	bf18      	it	ne
    1a96:	f441 6180 	orrne.w	r1, r1, #1024	; 0x400
  HW16_REG(gpio_base + 0x22) = 0x1111;
    1a9a:	8020      	strh	r0, [r4, #0]
  HW16_REG(gpio_base + 0x24) = 0x0240;
    1a9c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    1a9e:	8002      	strh	r2, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x7997)     {err_code |= (1<<11); }
    1aa0:	f8d8 2020 	ldr.w	r2, [r8, #32]
    1aa4:	429a      	cmp	r2, r3

  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
    1aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aaa:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x0000) {err_code |= (1<<12); }
    1aae:	f8d8 3020 	ldr.w	r3, [r8, #32]
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x7997)     {err_code |= (1<<11); }
    1ab2:	bf18      	it	ne
    1ab4:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
  if ((CM3DS_MPS2_GPIO->INTENSET) != 0x0000) {err_code |= (1<<12); }
    1ab8:	b10b      	cbz	r3, 1abe <gpio_register_rw_test+0x1026>
    1aba:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000

  /* Test INTTYPE register read/write  - offset 0x14 */
  CM3DS_MPS2_GPIO->INTTYPESET = 0x3A6B;
    1abe:	f643 236b 	movw	r3, #14955	; 0x3a6b
    1ac2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x3A6B) {err_code |= (1<<19); }
    1ac6:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    1aca:	429a      	cmp	r2, r3
  if ( HW8_REG(gpio_base + 0x28)!= 0x6B  ){err_code |= (1<<20); }
    1acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x3A6B) {err_code |= (1<<19); }
    1ace:	bf18      	it	ne
    1ad0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  if ( HW8_REG(gpio_base + 0x28)!= 0x6B  ){err_code |= (1<<20); }
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	2b6b      	cmp	r3, #107	; 0x6b
  if ( HW8_REG(gpio_base + 0x29)!= 0x3A  ){err_code |= (1<<21); }
    1ad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  if ( HW8_REG(gpio_base + 0x28)!= 0x6B  ){err_code |= (1<<20); }
    1ada:	bf18      	it	ne
    1adc:	f441 1180 	orrne.w	r1, r1, #1048576	; 0x100000
  if ( HW8_REG(gpio_base + 0x29)!= 0x3A  ){err_code |= (1<<21); }
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	2b3a      	cmp	r3, #58	; 0x3a
  if ( HW8_REG(gpio_base + 0x2A)!= 0x00  ){err_code |= (1<<22); }
    1ae4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  if ( HW8_REG(gpio_base + 0x29)!= 0x3A  ){err_code |= (1<<21); }
    1ae6:	bf18      	it	ne
    1ae8:	f441 1100 	orrne.w	r1, r1, #2097152	; 0x200000
  if ( HW8_REG(gpio_base + 0x2A)!= 0x00  ){err_code |= (1<<22); }
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	b10b      	cbz	r3, 1af4 <gpio_register_rw_test+0x105c>
    1af0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  if ( HW8_REG(gpio_base + 0x2B)!= 0x00  ){err_code |= (1<<23); }
    1af4:	9b49      	ldr	r3, [sp, #292]	; 0x124
    1af6:	781b      	ldrb	r3, [r3, #0]
    1af8:	b133      	cbz	r3, 1b08 <gpio_register_rw_test+0x1070>
    1afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    1afe:	e003      	b.n	1b08 <gpio_register_rw_test+0x1070>
    1b00:	0000607c 	.word	0x0000607c
    1b04:	000060a0 	.word	0x000060a0

  HW16_REG(gpio_base + 0x2C) = 0xFFFF;
    1b08:	f64f 74ff 	movw	r4, #65535	; 0xffff
  HW8_REG(gpio_base + 0x28) = 0x7C;
    1b0c:	207c      	movs	r0, #124	; 0x7c
  HW8_REG(gpio_base + 0x29) = 0x4B;
    1b0e:	224b      	movs	r2, #75	; 0x4b
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x4B7C)  {err_code |= (1<<24); }
    1b10:	f644 337c 	movw	r3, #19324	; 0x4b7c
  HW16_REG(gpio_base + 0x2C) = 0xFFFF;
    1b14:	9d24      	ldr	r5, [sp, #144]	; 0x90
    1b16:	802c      	strh	r4, [r5, #0]
  HW8_REG(gpio_base + 0x28) = 0x7C;
    1b18:	9c12      	ldr	r4, [sp, #72]	; 0x48
  if (HW16_REG(gpio_base + 0x28)!= 0x4B7C ){err_code |= (1<<25); }

  HW16_REG(gpio_base + 0x2C) = 0x4964;
    1b1a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  HW8_REG(gpio_base + 0x28) = 0x7C;
    1b1c:	7020      	strb	r0, [r4, #0]
  HW8_REG(gpio_base + 0x29) = 0x4B;
    1b1e:	9826      	ldr	r0, [sp, #152]	; 0x98
  HW16_REG(gpio_base + 0x2C) = 0x4964;
    1b20:	f644 1464 	movw	r4, #18788	; 0x4964
  HW8_REG(gpio_base + 0x29) = 0x4B;
    1b24:	7002      	strb	r2, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x4B7C)  {err_code |= (1<<24); }
    1b26:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
  HW16_REG(gpio_base + 0x28) = 0x8001;
    1b2a:	f248 0001 	movw	r0, #32769	; 0x8001
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x4B7C)  {err_code |= (1<<24); }
    1b2e:	429a      	cmp	r2, r3
  if (HW16_REG(gpio_base + 0x28)!= 0x4B7C ){err_code |= (1<<25); }
    1b30:	f644 327c 	movw	r2, #19324	; 0x4b7c
    1b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x4B7C)  {err_code |= (1<<24); }
    1b36:	bf18      	it	ne
    1b38:	f041 7180 	orrne.w	r1, r1, #16777216	; 0x1000000
  if (HW16_REG(gpio_base + 0x28)!= 0x4B7C ){err_code |= (1<<25); }
    1b3c:	881b      	ldrh	r3, [r3, #0]
  HW16_REG(gpio_base + 0x2C) = 0x4964;
    1b3e:	802c      	strh	r4, [r5, #0]
  if (HW16_REG(gpio_base + 0x28)!= 0x4B7C ){err_code |= (1<<25); }
    1b40:	429a      	cmp	r2, r3
  HW16_REG(gpio_base + 0x2A) = 0xFFFF;
    1b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x8219) {err_code |= (1<<26); }
    1b46:	f248 2319 	movw	r3, #33305	; 0x8219
  HW16_REG(gpio_base + 0x28) = 0x8001;
    1b4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
  if (HW16_REG(gpio_base + 0x28)!= 0x4B7C ){err_code |= (1<<25); }
    1b4c:	bf18      	it	ne
    1b4e:	f041 7100 	orrne.w	r1, r1, #33554432	; 0x2000000
  HW16_REG(gpio_base + 0x28) = 0x8001;
    1b52:	8020      	strh	r0, [r4, #0]
  HW16_REG(gpio_base + 0x2A) = 0xFFFF;
    1b54:	9825      	ldr	r0, [sp, #148]	; 0x94
    1b56:	8002      	strh	r2, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x8219) {err_code |= (1<<26); }
    1b58:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
    1b5c:	429a      	cmp	r2, r3
  CM3DS_MPS2_GPIO->INTTYPESET = 0xFFFF;
    1b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b62:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0xFFFF) {err_code |= (1<<27); }
    1b66:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x8219) {err_code |= (1<<26); }
    1b6a:	bf18      	it	ne
    1b6c:	f041 6180 	orrne.w	r1, r1, #67108864	; 0x4000000
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0xFFFF) {err_code |= (1<<27); }
    1b70:	429a      	cmp	r2, r3
    1b72:	f000 8243 	beq.w	1ffc <gpio_register_rw_test+0x1564>
  CM3DS_MPS2_GPIO->INTTYPECLR = 0xFFFF;
    1b76:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x0000) {err_code |= (1<<28); }
    1b7a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0xFFFF) {err_code |= (1<<27); }
    1b7e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x0000) {err_code |= (1<<28); }
    1b82:	2b00      	cmp	r3, #0
    1b84:	f040 8241 	bne.w	200a <gpio_register_rw_test+0x1572>

  /* Generate return value */
  if (err_code != 0) {
    printf ("ERROR : Read/write #3 failed(0x%x)\n", err_code);
    1b88:	487f      	ldr	r0, [pc, #508]	; (1d88 <gpio_register_rw_test+0x12f0>)
    1b8a:	f003 f803 	bl	4b94 <iprintf>
    return_val=1;
    1b8e:	2301      	movs	r3, #1
    1b90:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }


  /* Test INTPOL register read/write  - offset 0x18 */
  CM3DS_MPS2_GPIO->INTPOLSET = 0x3B6A;
    1b92:	f643 316a 	movw	r1, #15210	; 0x3b6a
    1b96:	f8c8 1030 	str.w	r1, [r8, #48]	; 0x30
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3B6A) {err_code |= (1<<0); }
    1b9a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  if ( HW8_REG(gpio_base + 0x30)!= 0x6A  ){err_code |= (1<<1); }
    1b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3B6A) {err_code |= (1<<0); }
    1ba0:	1a51      	subs	r1, r2, r1
    1ba2:	bf18      	it	ne
    1ba4:	2101      	movne	r1, #1
  if ( HW8_REG(gpio_base + 0x30)!= 0x6A  ){err_code |= (1<<1); }
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	2b6a      	cmp	r3, #106	; 0x6a
  if ( HW8_REG(gpio_base + 0x31)!= 0x3B  ){err_code |= (1<<2); }
    1baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  if ( HW8_REG(gpio_base + 0x30)!= 0x6A  ){err_code |= (1<<1); }
    1bac:	bf18      	it	ne
    1bae:	f041 0102 	orrne.w	r1, r1, #2
  if ( HW8_REG(gpio_base + 0x31)!= 0x3B  ){err_code |= (1<<2); }
    1bb2:	781b      	ldrb	r3, [r3, #0]
    1bb4:	2b3b      	cmp	r3, #59	; 0x3b
  if ( HW8_REG(gpio_base + 0x32)!= 0x00  ){err_code |= (1<<3); }
    1bb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  if ( HW8_REG(gpio_base + 0x31)!= 0x3B  ){err_code |= (1<<2); }
    1bb8:	bf18      	it	ne
    1bba:	f041 0104 	orrne.w	r1, r1, #4
  if ( HW8_REG(gpio_base + 0x32)!= 0x00  ){err_code |= (1<<3); }
    1bbe:	781b      	ldrb	r3, [r3, #0]
    1bc0:	b10b      	cbz	r3, 1bc6 <gpio_register_rw_test+0x112e>
    1bc2:	f041 0108 	orr.w	r1, r1, #8
  if ( HW8_REG(gpio_base + 0x33)!= 0x00  ){err_code |= (1<<4); }
    1bc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1bc8:	781b      	ldrb	r3, [r3, #0]
    1bca:	b10b      	cbz	r3, 1bd0 <gpio_register_rw_test+0x1138>
    1bcc:	f041 0110 	orr.w	r1, r1, #16
  if (HW16_REG(gpio_base + 0x30)!= 0x3B6A){err_code |= (1<<5); }
    1bd0:	f643 326a 	movw	r2, #15210	; 0x3b6a
    1bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HW16_REG(gpio_base + 0x34) = 0xFFFF;
    1bd6:	981c      	ldr	r0, [sp, #112]	; 0x70
  if (HW16_REG(gpio_base + 0x30)!= 0x3B6A){err_code |= (1<<5); }
    1bd8:	881b      	ldrh	r3, [r3, #0]
  HW16_REG(gpio_base + 0x30) = 0x4B7C;
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<6); }
  HW16_REG(gpio_base + 0x32)= 0x3333;
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<7); }
  HW8_REG( gpio_base + 0x34) = 0xFF;
    1bda:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  if (HW16_REG(gpio_base + 0x30)!= 0x3B6A){err_code |= (1<<5); }
    1bdc:	429a      	cmp	r2, r3
  HW16_REG(gpio_base + 0x34) = 0xFFFF;
    1bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
  HW16_REG(gpio_base + 0x30) = 0x4B7C;
    1be2:	f644 337c 	movw	r3, #19324	; 0x4b7c
  HW16_REG(gpio_base + 0x34) = 0xFFFF;
    1be6:	8002      	strh	r2, [r0, #0]
  HW16_REG(gpio_base + 0x30) = 0x4B7C;
    1be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  if (HW16_REG(gpio_base + 0x30)!= 0x3B6A){err_code |= (1<<5); }
    1bea:	bf18      	it	ne
    1bec:	f041 0120 	orrne.w	r1, r1, #32
  HW16_REG(gpio_base + 0x30) = 0x4B7C;
    1bf0:	8013      	strh	r3, [r2, #0]
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<6); }
    1bf2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  HW16_REG(gpio_base + 0x32)= 0x3333;
    1bf6:	981e      	ldr	r0, [sp, #120]	; 0x78
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<6); }
    1bf8:	429a      	cmp	r2, r3
  HW16_REG(gpio_base + 0x32)= 0x3333;
    1bfa:	f243 3233 	movw	r2, #13107	; 0x3333
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<7); }
    1bfe:	f644 337c 	movw	r3, #19324	; 0x4b7c
  HW16_REG(gpio_base + 0x32)= 0x3333;
    1c02:	8002      	strh	r2, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<7); }
    1c04:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  HW8_REG( gpio_base + 0x34) = 0xFF;
    1c08:	f04f 00ff 	mov.w	r0, #255	; 0xff
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<6); }
    1c0c:	bf18      	it	ne
    1c0e:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<7); }
    1c12:	429a      	cmp	r2, r3
  HW8_REG( gpio_base + 0x30) = 0x95;
    1c14:	f04f 0295 	mov.w	r2, #149	; 0x95
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B95) {err_code |= (1<<8); }
    1c18:	f644 3395 	movw	r3, #19349	; 0x4b95
  HW8_REG( gpio_base + 0x34) = 0xFF;
    1c1c:	7020      	strb	r0, [r4, #0]
  HW8_REG( gpio_base + 0x30) = 0x95;
    1c1e:	980a      	ldr	r0, [sp, #40]	; 0x28
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B7C) {err_code |= (1<<7); }
    1c20:	bf18      	it	ne
    1c22:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
  HW8_REG( gpio_base + 0x30) = 0x95;
    1c26:	7002      	strb	r2, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B95) {err_code |= (1<<8); }
    1c28:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  HW8_REG( gpio_base + 0x35) = 0xFF;
    1c2c:	20ff      	movs	r0, #255	; 0xff
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B95) {err_code |= (1<<8); }
    1c2e:	429a      	cmp	r2, r3
  HW8_REG( gpio_base + 0x31) = 0x32;
    1c30:	f04f 0232 	mov.w	r2, #50	; 0x32
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<9); }
    1c34:	f243 2395 	movw	r3, #12949	; 0x3295
  HW8_REG( gpio_base + 0x35) = 0xFF;
    1c38:	9c48      	ldr	r4, [sp, #288]	; 0x120
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x4B95) {err_code |= (1<<8); }
    1c3a:	bf18      	it	ne
    1c3c:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
  HW8_REG( gpio_base + 0x35) = 0xFF;
    1c40:	7020      	strb	r0, [r4, #0]
  HW8_REG( gpio_base + 0x31) = 0x32;
    1c42:	9823      	ldr	r0, [sp, #140]	; 0x8c
  HW16_REG(gpio_base + 0x36)= 0xFFFF;
    1c44:	9c47      	ldr	r4, [sp, #284]	; 0x11c
  HW8_REG( gpio_base + 0x31) = 0x32;
    1c46:	7002      	strb	r2, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<9); }
    1c48:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  HW16_REG(gpio_base + 0x36)= 0xFFFF;
    1c4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<9); }
    1c50:	429a      	cmp	r2, r3
  HW8_REG( gpio_base + 0x32) = 0x66;
    1c52:	f04f 0366 	mov.w	r3, #102	; 0x66
  HW8_REG( gpio_base + 0x33) = 0x66;
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<10); }
    1c56:	f243 2295 	movw	r2, #12949	; 0x3295
  HW16_REG(gpio_base + 0x36)= 0xFFFF;
    1c5a:	8020      	strh	r0, [r4, #0]
  HW8_REG( gpio_base + 0x32) = 0x66;
    1c5c:	981e      	ldr	r0, [sp, #120]	; 0x78
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<9); }
    1c5e:	bf18      	it	ne
    1c60:	f441 7100 	orrne.w	r1, r1, #512	; 0x200
  HW8_REG( gpio_base + 0x32) = 0x66;
    1c64:	7003      	strb	r3, [r0, #0]
  HW8_REG( gpio_base + 0x33) = 0x66;
    1c66:	9822      	ldr	r0, [sp, #136]	; 0x88
    1c68:	7003      	strb	r3, [r0, #0]
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<10); }
    1c6a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  HW16_REG(gpio_base + 0x34)= 0xFFFF;
    1c6e:	981c      	ldr	r0, [sp, #112]	; 0x70
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<10); }
    1c70:	4293      	cmp	r3, r2
  HW16_REG(gpio_base + 0x34)= 0xFFFF;
    1c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
  CM3DS_MPS2_GPIO->INTPOLSET = 0x8219;
    1c76:	f248 2319 	movw	r3, #33305	; 0x8219
  HW16_REG(gpio_base + 0x34)= 0xFFFF;
    1c7a:	8002      	strh	r2, [r0, #0]
  if (HW16_REG(gpio_base + 0x30) != 0x8219) {err_code |= (1<<11); }
    1c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  CM3DS_MPS2_GPIO->INTPOLSET = 0x8219;
    1c7e:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  if (HW16_REG(gpio_base + 0x30) != 0x8219) {err_code |= (1<<11); }
    1c82:	8812      	ldrh	r2, [r2, #0]
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x3295) {err_code |= (1<<10); }
    1c84:	bf18      	it	ne
    1c86:	f441 6180 	orrne.w	r1, r1, #1024	; 0x400
  if (HW16_REG(gpio_base + 0x30) != 0x8219) {err_code |= (1<<11); }
    1c8a:	4293      	cmp	r3, r2
  CM3DS_MPS2_GPIO->INTPOLSET = 0xFFFF;
    1c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c90:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0xFFFF) {err_code |= (1<<12); }
    1c94:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  if (HW16_REG(gpio_base + 0x30) != 0x8219) {err_code |= (1<<11); }
    1c98:	bf18      	it	ne
    1c9a:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0xFFFF) {err_code |= (1<<12); }
    1c9e:	429a      	cmp	r2, r3
    1ca0:	f000 81a2 	beq.w	1fe8 <gpio_register_rw_test+0x1550>
  CM3DS_MPS2_GPIO->INTPOLCLR = 0xFFFF;
    1ca4:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x0000) {err_code |= (1<<13); }
    1ca8:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0xFFFF) {err_code |= (1<<12); }
    1cac:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x0000) {err_code |= (1<<13); }
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	f040 81a0 	bne.w	1ff6 <gpio_register_rw_test+0x155e>

  /* Generate return value */
  if (err_code != 0) {
    printf ("ERROR : Read/write #4 failed(0x%x)\n", err_code);
    1cb6:	4835      	ldr	r0, [pc, #212]	; (1d8c <gpio_register_rw_test+0x12f4>)
    1cb8:	f002 ff6c 	bl	4b94 <iprintf>
    return_val=1;
    1cbc:	2301      	movs	r3, #1
    1cbe:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }
  puts("- INTSTATUS/INTCLEAR r/w");
    1cc0:	4833      	ldr	r0, [pc, #204]	; (1d90 <gpio_register_rw_test+0x12f8>)
    1cc2:	f002 ffdb 	bl	4c7c <puts>

  /* Test INTSTATUS/INTCLEAR register read/write - offset 0x1C */
  /* It was not set because when INTEN was high, input was high, but INTPOL was low (low level trigger) */
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != 0x0000) {err_code |= (1<<0); }
    1cc6:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != 0x00) {err_code |= (1<<1); }
    1cca:	783b      	ldrb	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != 0x0000) {err_code |= (1<<0); }
    1ccc:	ea12 0f0a 	tst.w	r2, sl
    1cd0:	bf14      	ite	ne
    1cd2:	2101      	movne	r1, #1
    1cd4:	2100      	moveq	r1, #0
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != 0x00) {err_code |= (1<<1); }
    1cd6:	ea13 0f0a 	tst.w	r3, sl
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != 0x00) {err_code |= (1<<2); }
    1cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1cde:	781b      	ldrb	r3, [r3, #0]
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != 0x00) {err_code |= (1<<1); }
    1ce0:	bf18      	it	ne
    1ce2:	f041 0102 	orrne.w	r1, r1, #2
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != 0x00) {err_code |= (1<<2); }
    1ce6:	4213      	tst	r3, r2
  if ((HW8_REG(gpio_base + 0x3A) & (gpio_datamask>>16)) != 0x00) {err_code |= (1<<3); }
    1ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != 0x00) {err_code |= (1<<2); }
    1cea:	bf18      	it	ne
    1cec:	f041 0104 	orrne.w	r1, r1, #4
  if ((HW8_REG(gpio_base + 0x3A) & (gpio_datamask>>16)) != 0x00) {err_code |= (1<<3); }
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	b10b      	cbz	r3, 1cf8 <gpio_register_rw_test+0x1260>
    1cf4:	f041 0108 	orr.w	r1, r1, #8
  if ((HW8_REG(gpio_base + 0x3B) & (gpio_datamask>>24)) != 0x00) {err_code |= (1<<4); }
    1cf8:	9b46      	ldr	r3, [sp, #280]	; 0x118
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	b10b      	cbz	r3, 1d02 <gpio_register_rw_test+0x126a>
    1cfe:	f041 0110 	orr.w	r1, r1, #16
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask) != 0x0000) {err_code |= (1<<5); }
    1d02:	883b      	ldrh	r3, [r7, #0]
    1d04:	ea1a 0f03 	tst.w	sl, r3

  /* Now we need to force INTSTATUS to 0xFFFF */
  CM3DS_MPS2_GPIO->INTENSET = 0xFFFF;
    1d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d0c:	f8c8 3020 	str.w	r3, [r8, #32]
  CM3DS_MPS2_GPIO->INTPOLSET= 0xFFFF;
    1d10:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  /* It set INTSTATUS to 0xFFFF because INTEN was set, DATA input was pulled up and INTPOL was 0xFFFF */

  /* Disable interrupt from generating continuously */
  CM3DS_MPS2_GPIO->INTENCLR = 0xFFFF;
    1d14:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  CM3DS_MPS2_GPIO->INTPOLCLR= 0xFFFF;
    1d18:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34

  /* Test clearing of INTSTATUS */
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<6); }
    1d1c:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask) != 0x0000) {err_code |= (1<<5); }
    1d20:	bf18      	it	ne
    1d22:	f041 0120 	orrne.w	r1, r1, #32
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<6); }
    1d26:	4053      	eors	r3, r2
    1d28:	ea13 0f0a 	tst.w	r3, sl
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFF & gpio_datamask)) {err_code |= (1<<7); }
    1d2c:	783b      	ldrb	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<6); }
    1d2e:	bf18      	it	ne
    1d30:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFF & gpio_datamask)) {err_code |= (1<<7); }
    1d34:	ea2a 0303 	bic.w	r3, sl, r3
    1d38:	f013 0fff 	tst.w	r3, #255	; 0xff
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<8); }
    1d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1d40:	781b      	ldrb	r3, [r3, #0]
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFF & gpio_datamask)) {err_code |= (1<<7); }
    1d42:	bf18      	it	ne
    1d44:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<8); }
    1d48:	ea22 0303 	bic.w	r3, r2, r3
    1d4c:	f013 0fff 	tst.w	r3, #255	; 0xff
  if ((HW8_REG(gpio_base + 0x3A) & (gpio_datamask>>16)) != (0x00 & (gpio_datamask>>16))) {err_code |= (1<<9); }
    1d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<8); }
    1d52:	bf18      	it	ne
    1d54:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
  if ((HW8_REG(gpio_base + 0x3A) & (gpio_datamask>>16)) != (0x00 & (gpio_datamask>>16))) {err_code |= (1<<9); }
    1d58:	781b      	ldrb	r3, [r3, #0]
    1d5a:	b10b      	cbz	r3, 1d60 <gpio_register_rw_test+0x12c8>
    1d5c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  if ((HW8_REG(gpio_base + 0x3B) & (gpio_datamask>>24)) != (0x00 & (gpio_datamask>>24))) {err_code |= (1<<10); }
    1d60:	9b46      	ldr	r3, [sp, #280]	; 0x118
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	b10b      	cbz	r3, 1d6a <gpio_register_rw_test+0x12d2>
    1d66:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<11); }
    1d6a:	883b      	ldrh	r3, [r7, #0]
    1d6c:	43db      	mvns	r3, r3
    1d6e:	b29b      	uxth	r3, r3
    1d70:	ea13 0f0a 	tst.w	r3, sl
  if ((HW16_REG(gpio_base + 0x3A) & (gpio_datamask>>16))!= (0x0000 & (gpio_datamask>>16))) {err_code |= (1<<12); }
    1d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<11); }
    1d76:	bf18      	it	ne
    1d78:	f441 6100 	orrne.w	r1, r1, #2048	; 0x800
  if ((HW16_REG(gpio_base + 0x3A) & (gpio_datamask>>16))!= (0x0000 & (gpio_datamask>>16))) {err_code |= (1<<12); }
    1d7c:	881b      	ldrh	r3, [r3, #0]
    1d7e:	b29b      	uxth	r3, r3
    1d80:	b143      	cbz	r3, 1d94 <gpio_register_rw_test+0x12fc>
    1d82:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    1d86:	e005      	b.n	1d94 <gpio_register_rw_test+0x12fc>
    1d88:	000060c4 	.word	0x000060c4
    1d8c:	000060e8 	.word	0x000060e8
    1d90:	0000610c 	.word	0x0000610c

  CM3DS_MPS2_GPIO->INTCLEAR = 0x0000;
    1d94:	2300      	movs	r3, #0
    1d96:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<13); }
    1d9a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38

  CM3DS_MPS2_GPIO->INTCLEAR = 0x0001;
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFE & gpio_datamask)) {err_code |= (1<<14); }
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFE & gpio_datamask)) {err_code |= (1<<15); }
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<16); }
    1d9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<13); }
    1da0:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    1da4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
    1da8:	ea13 0f0a 	tst.w	r3, sl
  CM3DS_MPS2_GPIO->INTCLEAR = 0x0001;
    1dac:	f04f 0301 	mov.w	r3, #1
    1db0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFE & gpio_datamask)) {err_code |= (1<<14); }
    1db4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFF & gpio_datamask)) {err_code |= (1<<13); }
    1db8:	bf18      	it	ne
    1dba:	f441 5100 	orrne.w	r1, r1, #8192	; 0x2000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFE & gpio_datamask)) {err_code |= (1<<14); }
    1dbe:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    1dc2:	f083 03fe 	eor.w	r3, r3, #254	; 0xfe
    1dc6:	ea13 0f0a 	tst.w	r3, sl
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFE & gpio_datamask)) {err_code |= (1<<15); }
    1dca:	783b      	ldrb	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFE & gpio_datamask)) {err_code |= (1<<14); }
    1dcc:	bf18      	it	ne
    1dce:	f441 4180 	orrne.w	r1, r1, #16384	; 0x4000
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFE & gpio_datamask)) {err_code |= (1<<15); }
    1dd2:	f083 03fe 	eor.w	r3, r3, #254	; 0xfe
    1dd6:	ea13 0f0a 	tst.w	r3, sl
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<16); }
    1dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  if ((HW8_REG(gpio_base + 0x38) & gpio_datamask) != (0xFE & gpio_datamask)) {err_code |= (1<<15); }
    1ddc:	bf18      	it	ne
    1dde:	f441 4100 	orrne.w	r1, r1, #32768	; 0x8000
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<16); }
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	ea22 0303 	bic.w	r3, r2, r3
    1de8:	f013 0fff 	tst.w	r3, #255	; 0xff

  HW16_REG(gpio_base + 0x38) = 0x0002;
    1dec:	f04f 0302 	mov.w	r3, #2
    1df0:	803b      	strh	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFC & gpio_datamask)) {err_code |= (1<<17); }
    1df2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((HW8_REG(gpio_base + 0x39) & (gpio_datamask>>8)) != (0xFF & (gpio_datamask>>8))) {err_code |= (1<<16); }
    1df6:	bf18      	it	ne
    1df8:	f441 3180 	orrne.w	r1, r1, #65536	; 0x10000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFC & gpio_datamask)) {err_code |= (1<<17); }
    1dfc:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    1e00:	f083 03fc 	eor.w	r3, r3, #252	; 0xfc
    1e04:	ea13 0f0a 	tst.w	r3, sl
  HW16_REG(gpio_base + 0x38) = 0x0004;
    1e08:	f04f 0304 	mov.w	r3, #4
    1e0c:	803b      	strh	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFF8 & gpio_datamask)) {err_code |= (1<<18); }
    1e0e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFFC & gpio_datamask)) {err_code |= (1<<17); }
    1e12:	bf18      	it	ne
    1e14:	f441 3100 	orrne.w	r1, r1, #131072	; 0x20000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFF8 & gpio_datamask)) {err_code |= (1<<18); }
    1e18:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    1e1c:	f083 03f8 	eor.w	r3, r3, #248	; 0xf8
    1e20:	ea13 0f0a 	tst.w	r3, sl
  HW8_REG(gpio_base  + 0x38) = 0x0008;
    1e24:	f04f 0308 	mov.w	r3, #8
    1e28:	703b      	strb	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFF0 & gpio_datamask)) {err_code |= (1<<19); }
    1e2a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFF8 & gpio_datamask)) {err_code |= (1<<18); }
    1e2e:	bf18      	it	ne
    1e30:	f441 2180 	orrne.w	r1, r1, #262144	; 0x40000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFF0 & gpio_datamask)) {err_code |= (1<<19); }
    1e34:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    1e38:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
    1e3c:	ea13 0f0a 	tst.w	r3, sl
  HW8_REG(gpio_base  + 0x39) = 0x0001;
    1e40:	f04f 0301 	mov.w	r3, #1
    1e44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFFF0 & gpio_datamask)) {err_code |= (1<<19); }
    1e46:	bf18      	it	ne
    1e48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  HW8_REG(gpio_base  + 0x39) = 0x0001;
    1e4c:	7013      	strb	r3, [r2, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<20); }
    1e4e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<21); }
  CM3DS_MPS2_GPIO->INTCLEAR = 0x000E; /* Clear a bit that is already cleared has no effect */
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<22); }
  HW8_REG(gpio_base  + 0x3A) = 0x000F; /* ignored */
    1e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<20); }
    1e54:	f483 437e 	eor.w	r3, r3, #65024	; 0xfe00
    1e58:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
    1e5c:	ea13 0f0a 	tst.w	r3, sl
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<21); }
    1e60:	883b      	ldrh	r3, [r7, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<20); }
    1e62:	bf18      	it	ne
    1e64:	f441 1180 	orrne.w	r1, r1, #1048576	; 0x100000
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<21); }
    1e68:	f483 437e 	eor.w	r3, r3, #65024	; 0xfe00
    1e6c:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
    1e70:	ea13 0f0a 	tst.w	r3, sl
  CM3DS_MPS2_GPIO->INTCLEAR = 0x000E; /* Clear a bit that is already cleared has no effect */
    1e74:	f04f 030e 	mov.w	r3, #14
    1e78:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<22); }
    1e7c:	883b      	ldrh	r3, [r7, #0]
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<21); }
    1e7e:	bf18      	it	ne
    1e80:	f441 1100 	orrne.w	r1, r1, #2097152	; 0x200000
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<22); }
    1e84:	f483 437e 	eor.w	r3, r3, #65024	; 0xfe00
    1e88:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
    1e8c:	ea13 0f0a 	tst.w	r3, sl
  HW8_REG(gpio_base  + 0x3A) = 0x000F; /* ignored */
    1e90:	f04f 030f 	mov.w	r3, #15
    1e94:	7013      	strb	r3, [r2, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<23); }
    1e96:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((HW16_REG(gpio_base + 0x38) & gpio_datamask )!= (0xFEF0 & gpio_datamask) ) {err_code |= (1<<22); }
    1e9a:	bf18      	it	ne
    1e9c:	f441 0180 	orrne.w	r1, r1, #4194304	; 0x400000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<23); }
    1ea0:	f483 437e 	eor.w	r3, r3, #65024	; 0xfe00
    1ea4:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
    1ea8:	ea13 0f0a 	tst.w	r3, sl
  HW16_REG(gpio_base + 0x3A) = 0xFFFF; /* ignored */
    1eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1eb0:	8013      	strh	r3, [r2, #0]
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<24); }
    1eb2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<23); }
    1eb6:	bf18      	it	ne
    1eb8:	f441 0100 	orrne.w	r1, r1, #8388608	; 0x800000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<24); }
    1ebc:	f483 437e 	eor.w	r3, r3, #65024	; 0xfe00
    1ec0:	f083 03f0 	eor.w	r3, r3, #240	; 0xf0
    1ec4:	ea13 0f0a 	tst.w	r3, sl
  CM3DS_MPS2_GPIO->INTCLEAR = 0x3330;
    1ec8:	f243 3330 	movw	r3, #13104	; 0x3330
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xCCC0 & gpio_datamask)) {err_code |= (1<<25); }
    1ecc:	f64c 42c0 	movw	r2, #52416	; 0xccc0
  CM3DS_MPS2_GPIO->INTCLEAR = 0x3330;
    1ed0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xCCC0 & gpio_datamask)) {err_code |= (1<<25); }
    1ed4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xFEF0 & gpio_datamask)) {err_code |= (1<<24); }
    1ed8:	bf18      	it	ne
    1eda:	f041 7180 	orrne.w	r1, r1, #16777216	; 0x1000000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xCCC0 & gpio_datamask)) {err_code |= (1<<25); }
    1ede:	4053      	eors	r3, r2
  CM3DS_MPS2_GPIO->INTCLEAR = 0xCCC0;
    1ee0:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xCCC0 & gpio_datamask)) {err_code |= (1<<25); }
    1ee4:	ea13 0f0a 	tst.w	r3, sl
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<26); }
    1ee8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xCCC0 & gpio_datamask)) {err_code |= (1<<25); }
    1eec:	d076      	beq.n	1fdc <gpio_register_rw_test+0x1544>
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<26); }
    1eee:	ea1a 0f03 	tst.w	sl, r3
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0xCCC0 & gpio_datamask)) {err_code |= (1<<25); }
    1ef2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<26); }
    1ef6:	d16e      	bne.n	1fd6 <gpio_register_rw_test+0x153e>

  /* Generate return value */
  if (err_code != 0) {
    printf ("ERROR : INTSTATUS/INTCLEAR r/w failed (0x%x)\n", err_code);
    1ef8:	4883      	ldr	r0, [pc, #524]	; (2108 <gpio_register_rw_test+0x1670>)
    1efa:	f002 fe4b 	bl	4b94 <iprintf>
    return_val=1;
    1efe:	2301      	movs	r3, #1
    1f00:	931b      	str	r3, [sp, #108]	; 0x6c
    err_code = 0;
    }

  /* Clean up */
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
    1f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
  CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;
  CM3DS_MPS2_GPIO->INTCLEAR  = 0x0000FFFF;
  gpio0_irq_occurred = 0;
    1f06:	2400      	movs	r4, #0
  CM3DS_MPS2_GPIO->INTCLEAR  = 0x0000FFFF;
    1f08:	f64f 76ff 	movw	r6, #65535	; 0xffff
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
    1f0c:	f8c8 3014 	str.w	r3, [r8, #20]
  gpio0_irq_occurred = 0;
    1f10:	487e      	ldr	r0, [pc, #504]	; (210c <gpio_register_rw_test+0x1674>)
  CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    1f12:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
  gpio1_irq_occurred = 0;
    1f16:	497e      	ldr	r1, [pc, #504]	; (2110 <gpio_register_rw_test+0x1678>)
  CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;
    1f18:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  gpio0_irq_expected = 0;
    1f1c:	4a7d      	ldr	r2, [pc, #500]	; (2114 <gpio_register_rw_test+0x167c>)
  gpio1_irq_expected = 0;
    1f1e:	4b7e      	ldr	r3, [pc, #504]	; (2118 <gpio_register_rw_test+0x1680>)
  CM3DS_MPS2_GPIO->INTCLEAR  = 0x0000FFFF;
    1f20:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
  gpio0_irq_occurred = 0;
    1f24:	6004      	str	r4, [r0, #0]
  gpio1_irq_occurred = 0;
    1f26:	600c      	str	r4, [r1, #0]
  gpio0_irq_expected = 0;
    1f28:	6014      	str	r4, [r2, #0]
  gpio1_irq_expected = 0;
    1f2a:	601c      	str	r4, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1f2c:	b672      	cpsid	i
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1f2e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    1f32:	4e7a      	ldr	r6, [pc, #488]	; (211c <gpio_register_rw_test+0x1684>)
    1f34:	6037      	str	r7, [r6, #0]
   /* Note : GPIO Interrupt is pended in previous test stage */
  __disable_irq(); /* Use setting of Interrupt enable to detect if
    we have 32 interrupts, but we don't want the exact interrupt to
    take place, so we disable interrupt using PRIMASK during this checking */
  NVIC_EnableIRQ(PORT0_15_IRQn);
  if ((NVIC->ISER[0] & 0x80000000U)==0) {
    1f36:	6833      	ldr	r3, [r6, #0]
    1f38:	42a3      	cmp	r3, r4
    1f3a:	f280 80c6 	bge.w	20ca <gpio_register_rw_test+0x1632>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1f3e:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
  __ASM volatile ("cpsie i" : : : "memory");
    1f42:	b662      	cpsie	i
  NVIC_DisableIRQ(PORT0_15_IRQn);
  __enable_irq();


  /* Check and Clear interrupt pending status in NVIC */
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    1f44:	4b76      	ldr	r3, [pc, #472]	; (2120 <gpio_register_rw_test+0x1688>)
    1f46:	4598      	cmp	r8, r3
    1f48:	f000 8297 	beq.w	247a <gpio_register_rw_test+0x19e2>
       if (NVIC_GetPendingIRQ(PORT0_ALL_IRQn) == 0) {/* Should have been set */
          err_code = err_code | (1<<16);
       }
  }

  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    1f4c:	4b75      	ldr	r3, [pc, #468]	; (2124 <gpio_register_rw_test+0x168c>)
    return_val=1;
    1f4e:	2100      	movs	r1, #0
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    1f50:	4598      	cmp	r8, r3
    1f52:	f000 80d1 	beq.w	20f8 <gpio_register_rw_test+0x1660>
      err_code = err_code | (1<<17);
      }
    }


  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    1f56:	4b74      	ldr	r3, [pc, #464]	; (2128 <gpio_register_rw_test+0x1690>)
    1f58:	4598      	cmp	r8, r3
    1f5a:	d11b      	bne.n	1f94 <gpio_register_rw_test+0x14fc>
    \return             0  Interrupt status is not pending.
    \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    1f5c:	4b6f      	ldr	r3, [pc, #444]	; (211c <gpio_register_rw_test+0x1684>)
    1f5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    1f62:	0550      	lsls	r0, r2, #21
    1f64:	d51e      	bpl.n	1fa4 <gpio_register_rw_test+0x150c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1f66:	2640      	movs	r6, #64	; 0x40
    1f68:	2480      	movs	r4, #128	; 0x80
    1f6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1f72:	4b6a      	ldr	r3, [pc, #424]	; (211c <gpio_register_rw_test+0x1684>)
    1f74:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    1f78:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    1f7c:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    1f80:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC_ClearPendingIRQ(PORT1_ALL_IRQn);
  NVIC_ClearPendingIRQ(PORT2_ALL_IRQn);
  NVIC_ClearPendingIRQ(PORT3_ALL_IRQn);

  /* Generate return value */
  if (err_code != 0) {
    1f84:	b9f1      	cbnz	r1, 1fc4 <gpio_register_rw_test+0x152c>
    printf ("ERROR : IRQ pending failed (0x%x)\n", err_code);
    return_val =1;
    err_code = 0;
  }
  else puts("Register Read/Write Test Passed");
    1f86:	4869      	ldr	r0, [pc, #420]	; (212c <gpio_register_rw_test+0x1694>)
    1f88:	f002 fe78 	bl	4c7c <puts>
    1f8c:	981b      	ldr	r0, [sp, #108]	; 0x6c

  return(return_val);
}
    1f8e:	b055      	add	sp, #340	; 0x154
    1f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    1f94:	4b66      	ldr	r3, [pc, #408]	; (2130 <gpio_register_rw_test+0x1698>)
    1f96:	4598      	cmp	r8, r3
    1f98:	d1e5      	bne.n	1f66 <gpio_register_rw_test+0x14ce>
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    1f9a:	4b60      	ldr	r3, [pc, #384]	; (211c <gpio_register_rw_test+0x1684>)
    1f9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    1fa0:	0512      	lsls	r2, r2, #20
    1fa2:	d4e0      	bmi.n	1f66 <gpio_register_rw_test+0x14ce>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1fa4:	2540      	movs	r5, #64	; 0x40
    1fa6:	2480      	movs	r4, #128	; 0x80
    1fa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1fb0:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
      err_code = err_code | (1<<17);
    1fb4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    1fb8:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    1fbc:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    1fc0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    printf ("ERROR : IRQ pending failed (0x%x)\n", err_code);
    1fc4:	485b      	ldr	r0, [pc, #364]	; (2134 <gpio_register_rw_test+0x169c>)
    1fc6:	f002 fde5 	bl	4b94 <iprintf>
    return_val =1;
    1fca:	2301      	movs	r3, #1
    1fcc:	4618      	mov	r0, r3
    1fce:	931b      	str	r3, [sp, #108]	; 0x6c
}
    1fd0:	b055      	add	sp, #340	; 0x154
    1fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((CM3DS_MPS2_GPIO->INTSTATUS & gpio_datamask) != (0x0000 & gpio_datamask)) {err_code |= (1<<26); }
    1fd6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    1fda:	e78d      	b.n	1ef8 <gpio_register_rw_test+0x1460>
    1fdc:	ea13 0f0a 	tst.w	r3, sl
    1fe0:	d1f9      	bne.n	1fd6 <gpio_register_rw_test+0x153e>
  if (err_code != 0) {
    1fe2:	2900      	cmp	r1, #0
    1fe4:	d08d      	beq.n	1f02 <gpio_register_rw_test+0x146a>
    1fe6:	e787      	b.n	1ef8 <gpio_register_rw_test+0x1460>
  CM3DS_MPS2_GPIO->INTPOLCLR = 0xFFFF;
    1fe8:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
  if ((CM3DS_MPS2_GPIO->INTPOLSET) != 0x0000) {err_code |= (1<<13); }
    1fec:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	f000 8176 	beq.w	22e2 <gpio_register_rw_test+0x184a>
    1ff6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    1ffa:	e65c      	b.n	1cb6 <gpio_register_rw_test+0x121e>
  CM3DS_MPS2_GPIO->INTTYPECLR = 0xFFFF;
    1ffc:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
  if ((CM3DS_MPS2_GPIO->INTTYPESET) != 0x0000) {err_code |= (1<<28); }
    2000:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2004:	2b00      	cmp	r3, #0
    2006:	f000 8168 	beq.w	22da <gpio_register_rw_test+0x1842>
    200a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
    200e:	e5bb      	b.n	1b88 <gpio_register_rw_test+0x10f0>
  CM3DS_MPS2_GPIO->DATAOUT = 0xFFFF; /* force GPIO pins high before starting next test */
    2010:	f64f 73ff 	movw	r3, #65535	; 0xffff
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF;
    2014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  CM3DS_MPS2_GPIO->DATAOUT = 0xFFFF; /* force GPIO pins high before starting next test */
    2018:	f8c8 3004 	str.w	r3, [r8, #4]
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF;
    201c:	f8c8 2010 	str.w	r2, [r8, #16]
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0xFFFF;
    2020:	f8c8 301c 	str.w	r3, [r8, #28]
  CM3DS_MPS2_GPIO->ALTFUNCSET = saved_altfunc; /* Restore ALTFUNC */
    2024:	9b53      	ldr	r3, [sp, #332]	; 0x14c
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0xFF33 & gpio_altfunc_mask)) {err_code |= (1<<17); }
    2026:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  CM3DS_MPS2_GPIO->ALTFUNCSET = saved_altfunc; /* Restore ALTFUNC */
    202a:	f8c8 3018 	str.w	r3, [r8, #24]
    202e:	e4b4      	b.n	199a <gpio_register_rw_test+0xf02>
  CM3DS_MPS2_GPIO->ALTFUNCSET = 0xAA33;
    2030:	f64a 2333 	movw	r3, #43571	; 0xaa33
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0x00CC;
    2034:	f8c8 001c 	str.w	r0, [r8, #28]
  CM3DS_MPS2_GPIO->ALTFUNCSET = 0xAA33;
    2038:	f8c8 3018 	str.w	r3, [r8, #24]
  if ((CM3DS_MPS2_GPIO->ALTFUNCSET & gpio_altfunc_mask) != (0xFF33 & gpio_altfunc_mask)) {err_code |= (1<<17); }
    203c:	f8d8 3018 	ldr.w	r3, [r8, #24]
    2040:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
    2044:	f083 0333 	eor.w	r3, r3, #51	; 0x33
    2048:	b29b      	uxth	r3, r3
    204a:	2b00      	cmp	r3, #0
    204c:	d1e0      	bne.n	2010 <gpio_register_rw_test+0x1578>
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF;
    204e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  CM3DS_MPS2_GPIO->DATAOUT = 0xFFFF; /* force GPIO pins high before starting next test */
    2052:	f8c8 2004 	str.w	r2, [r8, #4]
  CM3DS_MPS2_GPIO->OUTENABLESET = 0xFFFFFFFF;
    2056:	f8c8 3010 	str.w	r3, [r8, #16]
  CM3DS_MPS2_GPIO->ALTFUNCSET = saved_altfunc; /* Restore ALTFUNC */
    205a:	9b53      	ldr	r3, [sp, #332]	; 0x14c
  CM3DS_MPS2_GPIO->ALTFUNCCLR = 0xFFFF;
    205c:	f8c8 201c 	str.w	r2, [r8, #28]
  CM3DS_MPS2_GPIO->ALTFUNCSET = saved_altfunc; /* Restore ALTFUNC */
    2060:	f8c8 3018 	str.w	r3, [r8, #24]
  if (err_code != 0) {
    2064:	2900      	cmp	r1, #0
    2066:	f43f ac9d 	beq.w	19a4 <gpio_register_rw_test+0xf0c>
    206a:	e496      	b.n	199a <gpio_register_rw_test+0xf02>
  CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF; /* Disable output */
    206c:	f8c8 3014 	str.w	r3, [r8, #20]
  if (err_code != 0) {
    2070:	2900      	cmp	r1, #0
    2072:	f43f abd7 	beq.w	1824 <gpio_register_rw_test+0xd8c>
    2076:	f7ff bbd0 	b.w	181a <gpio_register_rw_test+0xd82>
  if (HW8_REG(gpio_base + 0xFFF) != 0x00) {err_code |= (1<<23); }
    207a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
    207e:	f7ff ba65 	b.w	154c <gpio_register_rw_test+0xab4>
    2082:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	2b00      	cmp	r3, #0
    2088:	d1f7      	bne.n	207a <gpio_register_rw_test+0x15e2>
  if (err_code != 0) {
    208a:	2c00      	cmp	r4, #0
    208c:	f43f aa64 	beq.w	1558 <gpio_register_rw_test+0xac0>
    2090:	f7ff ba5c 	b.w	154c <gpio_register_rw_test+0xab4>
  if (HW8_REG(gpio_base + 0xFFD) != 0x00) {err_code |= (1<<23); }
    2094:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
    2098:	f7ff b99d 	b.w	13d6 <gpio_register_rw_test+0x93e>
    209c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d1f7      	bne.n	2094 <gpio_register_rw_test+0x15fc>
  if (err_code != 0) {
    20a4:	2c00      	cmp	r4, #0
    20a6:	f43f a99c 	beq.w	13e2 <gpio_register_rw_test+0x94a>
    20aa:	f7ff b994 	b.w	13d6 <gpio_register_rw_test+0x93e>
  if (HW16_REG(gpio_base + 0xFFE) != 0x00) {err_code |= (1<<23); }
    20ae:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
    20b2:	f7ff b8bc 	b.w	122e <gpio_register_rw_test+0x796>
    20b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    20b8:	881b      	ldrh	r3, [r3, #0]
    20ba:	b29b      	uxth	r3, r3
    20bc:	2b00      	cmp	r3, #0
    20be:	d1f6      	bne.n	20ae <gpio_register_rw_test+0x1616>
  if (err_code != 0) {
    20c0:	2c00      	cmp	r4, #0
    20c2:	f43f a8ba 	beq.w	123a <gpio_register_rw_test+0x7a2>
    20c6:	f7ff b8b2 	b.w	122e <gpio_register_rw_test+0x796>
    puts("Less then 32 IRQ in design\n");
    20ca:	481b      	ldr	r0, [pc, #108]	; (2138 <gpio_register_rw_test+0x16a0>)
    20cc:	f002 fdd6 	bl	4c7c <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    20d0:	f8c6 7080 	str.w	r7, [r6, #128]	; 0x80
    20d4:	b662      	cpsie	i
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    20d6:	4b12      	ldr	r3, [pc, #72]	; (2120 <gpio_register_rw_test+0x1688>)
    20d8:	4598      	cmp	r8, r3
    20da:	f47f af37 	bne.w	1f4c <gpio_register_rw_test+0x14b4>
    20de:	4621      	mov	r1, r4
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    20e0:	4b0e      	ldr	r3, [pc, #56]	; (211c <gpio_register_rw_test+0x1684>)
    20e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    20e6:	065b      	lsls	r3, r3, #25
    20e8:	f53f af3d 	bmi.w	1f66 <gpio_register_rw_test+0x14ce>
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    20ec:	4b0d      	ldr	r3, [pc, #52]	; (2124 <gpio_register_rw_test+0x168c>)
          err_code = err_code | (1<<16);
    20ee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    20f2:	4598      	cmp	r8, r3
    20f4:	f47f af2f 	bne.w	1f56 <gpio_register_rw_test+0x14be>
    20f8:	4b08      	ldr	r3, [pc, #32]	; (211c <gpio_register_rw_test+0x1684>)
    20fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    20fe:	0614      	lsls	r4, r2, #24
    2100:	f53f af31 	bmi.w	1f66 <gpio_register_rw_test+0x14ce>
    2104:	e74e      	b.n	1fa4 <gpio_register_rw_test+0x150c>
    2106:	bf00      	nop
    2108:	00006128 	.word	0x00006128
    210c:	200000a8 	.word	0x200000a8
    2110:	200000ac 	.word	0x200000ac
    2114:	20000074 	.word	0x20000074
    2118:	2000008c 	.word	0x2000008c
    211c:	e000e100 	.word	0xe000e100
    2120:	40010000 	.word	0x40010000
    2124:	40011000 	.word	0x40011000
    2128:	40012000 	.word	0x40012000
    212c:	00006198 	.word	0x00006198
    2130:	40013000 	.word	0x40013000
    2134:	00006174 	.word	0x00006174
    2138:	00006158 	.word	0x00006158
    saved_altfunc = CM3DS_MPS2_GPIO0->ALTFUNCSET; /* Keep a copy of current ALTFUNC */
    213c:	6983      	ldr	r3, [r0, #24]
    213e:	4d6b      	ldr	r5, [pc, #428]	; (22ec <gpio_register_rw_test+0x1854>)
    2140:	9353      	str	r3, [sp, #332]	; 0x14c
    2142:	4b6b      	ldr	r3, [pc, #428]	; (22f0 <gpio_register_rw_test+0x1858>)
    2144:	4629      	mov	r1, r5
    2146:	9346      	str	r3, [sp, #280]	; 0x118
    2148:	3b01      	subs	r3, #1
    214a:	9309      	str	r3, [sp, #36]	; 0x24
    214c:	3b01      	subs	r3, #1
    214e:	930d      	str	r3, [sp, #52]	; 0x34
    2150:	3b03      	subs	r3, #3
    2152:	9347      	str	r3, [sp, #284]	; 0x11c
    2154:	3b01      	subs	r3, #1
    2156:	9348      	str	r3, [sp, #288]	; 0x120
    2158:	3b01      	subs	r3, #1
    215a:	931c      	str	r3, [sp, #112]	; 0x70
    215c:	3b01      	subs	r3, #1
    215e:	9322      	str	r3, [sp, #136]	; 0x88
    2160:	3b01      	subs	r3, #1
    2162:	931e      	str	r3, [sp, #120]	; 0x78
    2164:	3b01      	subs	r3, #1
    2166:	9323      	str	r3, [sp, #140]	; 0x8c
    2168:	3b01      	subs	r3, #1
    216a:	930a      	str	r3, [sp, #40]	; 0x28
    216c:	3b04      	subs	r3, #4
    216e:	9324      	str	r3, [sp, #144]	; 0x90
    2170:	3b01      	subs	r3, #1
    2172:	9349      	str	r3, [sp, #292]	; 0x124
    2174:	3b01      	subs	r3, #1
    2176:	9325      	str	r3, [sp, #148]	; 0x94
    2178:	3b01      	subs	r3, #1
    217a:	9326      	str	r3, [sp, #152]	; 0x98
    217c:	3b01      	subs	r3, #1
    217e:	9312      	str	r3, [sp, #72]	; 0x48
    2180:	3b01      	subs	r3, #1
    2182:	934a      	str	r3, [sp, #296]	; 0x128
    2184:	3b01      	subs	r3, #1
    2186:	934b      	str	r3, [sp, #300]	; 0x12c
    2188:	3b01      	subs	r3, #1
    218a:	934c      	str	r3, [sp, #304]	; 0x130
    218c:	3b01      	subs	r3, #1
    218e:	9327      	str	r3, [sp, #156]	; 0x9c
    2190:	3b02      	subs	r3, #2
    2192:	9328      	str	r3, [sp, #160]	; 0xa0
    2194:	3b01      	subs	r3, #1
    2196:	9329      	str	r3, [sp, #164]	; 0xa4
    2198:	3b01      	subs	r3, #1
    219a:	930c      	str	r3, [sp, #48]	; 0x30
    219c:	3b05      	subs	r3, #5
    219e:	934d      	str	r3, [sp, #308]	; 0x134
    21a0:	3301      	adds	r3, #1
    21a2:	932a      	str	r3, [sp, #168]	; 0xa8
    21a4:	3b03      	subs	r3, #3
    21a6:	9311      	str	r3, [sp, #68]	; 0x44
    21a8:	3301      	adds	r3, #1
    21aa:	930b      	str	r3, [sp, #44]	; 0x2c
    21ac:	3b14      	subs	r3, #20
    21ae:	934e      	str	r3, [sp, #312]	; 0x138
    21b0:	4b50      	ldr	r3, [pc, #320]	; (22f4 <gpio_register_rw_test+0x185c>)
    21b2:	4f51      	ldr	r7, [pc, #324]	; (22f8 <gpio_register_rw_test+0x1860>)
    21b4:	9313      	str	r3, [sp, #76]	; 0x4c
    21b6:	4b51      	ldr	r3, [pc, #324]	; (22fc <gpio_register_rw_test+0x1864>)
    21b8:	4e51      	ldr	r6, [pc, #324]	; (2300 <gpio_register_rw_test+0x1868>)
    21ba:	934f      	str	r3, [sp, #316]	; 0x13c
    21bc:	3b01      	subs	r3, #1
    21be:	931d      	str	r3, [sp, #116]	; 0x74
    21c0:	3b01      	subs	r3, #1
    21c2:	932b      	str	r3, [sp, #172]	; 0xac
    21c4:	3b01      	subs	r3, #1
    21c6:	933c      	str	r3, [sp, #240]	; 0xf0
    21c8:	3b01      	subs	r3, #1
    21ca:	933d      	str	r3, [sp, #244]	; 0xf4
    21cc:	3310      	adds	r3, #16
    21ce:	932c      	str	r3, [sp, #176]	; 0xb0
    21d0:	3301      	adds	r3, #1
    21d2:	9350      	str	r3, [sp, #320]	; 0x140
    21d4:	3b02      	subs	r3, #2
    21d6:	931f      	str	r3, [sp, #124]	; 0x7c
    21d8:	3304      	adds	r3, #4
    21da:	933e      	str	r3, [sp, #248]	; 0xf8
    21dc:	f603 73eb 	addw	r3, r3, #4075	; 0xfeb
    21e0:	9338      	str	r3, [sp, #224]	; 0xe0
    21e2:	3b04      	subs	r3, #4
    21e4:	932d      	str	r3, [sp, #180]	; 0xb4
    21e6:	3b04      	subs	r3, #4
    21e8:	932e      	str	r3, [sp, #184]	; 0xb8
    21ea:	3b04      	subs	r3, #4
    21ec:	9339      	str	r3, [sp, #228]	; 0xe4
    21ee:	3b04      	subs	r3, #4
    21f0:	932f      	str	r3, [sp, #188]	; 0xbc
    21f2:	3b04      	subs	r3, #4
    21f4:	9330      	str	r3, [sp, #192]	; 0xc0
    21f6:	3b04      	subs	r3, #4
    21f8:	9331      	str	r3, [sp, #196]	; 0xc4
    21fa:	3b04      	subs	r3, #4
    21fc:	9332      	str	r3, [sp, #200]	; 0xc8
    21fe:	3b04      	subs	r3, #4
    2200:	933a      	str	r3, [sp, #232]	; 0xe8
    2202:	3b04      	subs	r3, #4
    2204:	9333      	str	r3, [sp, #204]	; 0xcc
    2206:	3b04      	subs	r3, #4
    2208:	9334      	str	r3, [sp, #208]	; 0xd0
    220a:	3b04      	subs	r3, #4
    220c:	9351      	str	r3, [sp, #324]	; 0x144
    220e:	332a      	adds	r3, #42	; 0x2a
    2210:	933b      	str	r3, [sp, #236]	; 0xec
    2212:	3b04      	subs	r3, #4
    2214:	9335      	str	r3, [sp, #212]	; 0xd4
    2216:	3b04      	subs	r3, #4
    2218:	9336      	str	r3, [sp, #216]	; 0xd8
    221a:	3b04      	subs	r3, #4
    221c:	9337      	str	r3, [sp, #220]	; 0xdc
    221e:	3b04      	subs	r3, #4
    2220:	933f      	str	r3, [sp, #252]	; 0xfc
    2222:	3b04      	subs	r3, #4
    2224:	9340      	str	r3, [sp, #256]	; 0x100
    2226:	3b04      	subs	r3, #4
    2228:	9341      	str	r3, [sp, #260]	; 0x104
    222a:	3b04      	subs	r3, #4
    222c:	9342      	str	r3, [sp, #264]	; 0x108
    222e:	3b04      	subs	r3, #4
    2230:	9343      	str	r3, [sp, #268]	; 0x10c
    2232:	3b04      	subs	r3, #4
    2234:	9344      	str	r3, [sp, #272]	; 0x110
    2236:	3b04      	subs	r3, #4
    2238:	9345      	str	r3, [sp, #276]	; 0x114
    223a:	3b04      	subs	r3, #4
    223c:	9352      	str	r3, [sp, #328]	; 0x148
    223e:	332d      	adds	r3, #45	; 0x2d
    2240:	9315      	str	r3, [sp, #84]	; 0x54
    2242:	3b04      	subs	r3, #4
    2244:	9314      	str	r3, [sp, #80]	; 0x50
    2246:	3b04      	subs	r3, #4
    2248:	9319      	str	r3, [sp, #100]	; 0x64
    224a:	3b04      	subs	r3, #4
    224c:	9316      	str	r3, [sp, #88]	; 0x58
    224e:	3b04      	subs	r3, #4
    2250:	931a      	str	r3, [sp, #104]	; 0x68
    2252:	3b04      	subs	r3, #4
    2254:	9317      	str	r3, [sp, #92]	; 0x5c
    2256:	3b04      	subs	r3, #4
    2258:	9318      	str	r3, [sp, #96]	; 0x60
    225a:	3b04      	subs	r3, #4
    225c:	9310      	str	r3, [sp, #64]	; 0x40
    225e:	3b04      	subs	r3, #4
    2260:	930e      	str	r3, [sp, #56]	; 0x38
    2262:	3b04      	subs	r3, #4
    2264:	930f      	str	r3, [sp, #60]	; 0x3c
    2266:	3b04      	subs	r3, #4
    2268:	9320      	str	r3, [sp, #128]	; 0x80
    226a:	3b04      	subs	r3, #4
    226c:	9321      	str	r3, [sp, #132]	; 0x84
    226e:	3322      	adds	r3, #34	; 0x22
    2270:	9301      	str	r3, [sp, #4]
    2272:	3b04      	subs	r3, #4
    2274:	9302      	str	r3, [sp, #8]
    2276:	3b04      	subs	r3, #4
    2278:	9303      	str	r3, [sp, #12]
    227a:	3b04      	subs	r3, #4
    227c:	9304      	str	r3, [sp, #16]
    227e:	3b04      	subs	r3, #4
    2280:	9305      	str	r3, [sp, #20]
    2282:	3b04      	subs	r3, #4
    2284:	9306      	str	r3, [sp, #24]
    2286:	3b04      	subs	r3, #4
    2288:	9307      	str	r3, [sp, #28]
    228a:	3b04      	subs	r3, #4
    228c:	9308      	str	r3, [sp, #32]
    228e:	3b04      	subs	r3, #4
    2290:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2308 <gpio_register_rw_test+0x1870>
    2294:	f8df b074 	ldr.w	fp, [pc, #116]	; 230c <gpio_register_rw_test+0x1874>
    2298:	9300      	str	r3, [sp, #0]
    gpio_datamask        = 0xFFFF7FFE;
    229a:	f8df a074 	ldr.w	sl, [pc, #116]	; 2310 <gpio_register_rw_test+0x1878>
    229e:	f7fe bd8c 	b.w	dba <gpio_register_rw_test+0x322>
  if (HW16_REG(gpio_base + 0xFFC) != AHB_GPIO_CID3) {err_code |= (1<<19); }
    22a2:	b29b      	uxth	r3, r3
    22a4:	2bb1      	cmp	r3, #177	; 0xb1
    22a6:	f47e aee3 	bne.w	1070 <gpio_register_rw_test+0x5d8>
  if (err_code != 0) {
    22aa:	2c00      	cmp	r4, #0
    22ac:	f47e aee2 	bne.w	1074 <gpio_register_rw_test+0x5dc>
  int return_val=0;
    22b0:	941b      	str	r4, [sp, #108]	; 0x6c
    22b2:	f7fe bee5 	b.w	1080 <gpio_register_rw_test+0x5e8>
    if (CM3DS_MPS2_GPIO->DATA      != 0x0000FFFF) {err_code |= (1<<0); }
    22b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    22ba:	f8d8 4000 	ldr.w	r4, [r8]
    22be:	1ae4      	subs	r4, r4, r3
    22c0:	bf18      	it	ne
    22c2:	2401      	movne	r4, #1
    22c4:	f7fe bdce 	b.w	e64 <gpio_register_rw_test+0x3cc>
    puts ("ERROR: Input parameter invalid in function 'gpio_register_rw_test'.");
    22c8:	480e      	ldr	r0, [pc, #56]	; (2304 <gpio_register_rw_test+0x186c>)
    22ca:	f002 fcd7 	bl	4c7c <puts>
    return 1;
    22ce:	2301      	movs	r3, #1
    22d0:	4618      	mov	r0, r3
    22d2:	931b      	str	r3, [sp, #108]	; 0x6c
}
    22d4:	b055      	add	sp, #340	; 0x154
    22d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (err_code != 0) {
    22da:	2900      	cmp	r1, #0
    22dc:	f43f ac59 	beq.w	1b92 <gpio_register_rw_test+0x10fa>
    22e0:	e452      	b.n	1b88 <gpio_register_rw_test+0x10f0>
  if (err_code != 0) {
    22e2:	2900      	cmp	r1, #0
    22e4:	f43f acec 	beq.w	1cc0 <gpio_register_rw_test+0x1228>
    22e8:	e4e5      	b.n	1cb6 <gpio_register_rw_test+0x121e>
    22ea:	bf00      	nop
    22ec:	40010fd0 	.word	0x40010fd0
    22f0:	4001003b 	.word	0x4001003b
    22f4:	00ffff7f 	.word	0x00ffff7f
    22f8:	40010038 	.word	0x40010038
    22fc:	40010005 	.word	0x40010005
    2300:	40010018 	.word	0x40010018
    2304:	00005c88 	.word	0x00005c88
    2308:	40010ffc 	.word	0x40010ffc
    230c:	40010ff8 	.word	0x40010ff8
    2310:	ffff7ffe 	.word	0xffff7ffe
    saved_altfunc = CM3DS_MPS2_GPIO2->ALTFUNCSET; /* Keep a copy of current ALTFUNC */
    2314:	6983      	ldr	r3, [r0, #24]
    2316:	4db1      	ldr	r5, [pc, #708]	; (25dc <gpio_register_rw_test+0x1b44>)
    2318:	9353      	str	r3, [sp, #332]	; 0x14c
    231a:	4bb1      	ldr	r3, [pc, #708]	; (25e0 <gpio_register_rw_test+0x1b48>)
    231c:	4629      	mov	r1, r5
    231e:	9346      	str	r3, [sp, #280]	; 0x118
    2320:	3b01      	subs	r3, #1
    2322:	9309      	str	r3, [sp, #36]	; 0x24
    2324:	3b01      	subs	r3, #1
    2326:	930d      	str	r3, [sp, #52]	; 0x34
    2328:	3b03      	subs	r3, #3
    232a:	9347      	str	r3, [sp, #284]	; 0x11c
    232c:	3b01      	subs	r3, #1
    232e:	9348      	str	r3, [sp, #288]	; 0x120
    2330:	3b01      	subs	r3, #1
    2332:	931c      	str	r3, [sp, #112]	; 0x70
    2334:	3b01      	subs	r3, #1
    2336:	9322      	str	r3, [sp, #136]	; 0x88
    2338:	3b01      	subs	r3, #1
    233a:	931e      	str	r3, [sp, #120]	; 0x78
    233c:	3b01      	subs	r3, #1
    233e:	9323      	str	r3, [sp, #140]	; 0x8c
    2340:	3b01      	subs	r3, #1
    2342:	930a      	str	r3, [sp, #40]	; 0x28
    2344:	3b04      	subs	r3, #4
    2346:	9324      	str	r3, [sp, #144]	; 0x90
    2348:	3b01      	subs	r3, #1
    234a:	9349      	str	r3, [sp, #292]	; 0x124
    234c:	3b01      	subs	r3, #1
    234e:	9325      	str	r3, [sp, #148]	; 0x94
    2350:	3b01      	subs	r3, #1
    2352:	9326      	str	r3, [sp, #152]	; 0x98
    2354:	3b01      	subs	r3, #1
    2356:	9312      	str	r3, [sp, #72]	; 0x48
    2358:	3b01      	subs	r3, #1
    235a:	934a      	str	r3, [sp, #296]	; 0x128
    235c:	3b01      	subs	r3, #1
    235e:	934b      	str	r3, [sp, #300]	; 0x12c
    2360:	3b01      	subs	r3, #1
    2362:	934c      	str	r3, [sp, #304]	; 0x130
    2364:	3b01      	subs	r3, #1
    2366:	9327      	str	r3, [sp, #156]	; 0x9c
    2368:	3b02      	subs	r3, #2
    236a:	9328      	str	r3, [sp, #160]	; 0xa0
    236c:	3b01      	subs	r3, #1
    236e:	9329      	str	r3, [sp, #164]	; 0xa4
    2370:	3b01      	subs	r3, #1
    2372:	930c      	str	r3, [sp, #48]	; 0x30
    2374:	3b05      	subs	r3, #5
    2376:	934d      	str	r3, [sp, #308]	; 0x134
    2378:	3301      	adds	r3, #1
    237a:	932a      	str	r3, [sp, #168]	; 0xa8
    237c:	3b03      	subs	r3, #3
    237e:	9311      	str	r3, [sp, #68]	; 0x44
    2380:	3301      	adds	r3, #1
    2382:	930b      	str	r3, [sp, #44]	; 0x2c
    2384:	3b14      	subs	r3, #20
    2386:	934e      	str	r3, [sp, #312]	; 0x138
    2388:	4b96      	ldr	r3, [pc, #600]	; (25e4 <gpio_register_rw_test+0x1b4c>)
    238a:	4f97      	ldr	r7, [pc, #604]	; (25e8 <gpio_register_rw_test+0x1b50>)
    238c:	9313      	str	r3, [sp, #76]	; 0x4c
    238e:	4b97      	ldr	r3, [pc, #604]	; (25ec <gpio_register_rw_test+0x1b54>)
    2390:	4e97      	ldr	r6, [pc, #604]	; (25f0 <gpio_register_rw_test+0x1b58>)
    2392:	934f      	str	r3, [sp, #316]	; 0x13c
    2394:	3b01      	subs	r3, #1
    2396:	931d      	str	r3, [sp, #116]	; 0x74
    2398:	3b01      	subs	r3, #1
    239a:	932b      	str	r3, [sp, #172]	; 0xac
    239c:	3b01      	subs	r3, #1
    239e:	933c      	str	r3, [sp, #240]	; 0xf0
    23a0:	3b01      	subs	r3, #1
    23a2:	933d      	str	r3, [sp, #244]	; 0xf4
    23a4:	3310      	adds	r3, #16
    23a6:	932c      	str	r3, [sp, #176]	; 0xb0
    23a8:	3301      	adds	r3, #1
    23aa:	9350      	str	r3, [sp, #320]	; 0x140
    23ac:	3b02      	subs	r3, #2
    23ae:	931f      	str	r3, [sp, #124]	; 0x7c
    23b0:	3304      	adds	r3, #4
    23b2:	933e      	str	r3, [sp, #248]	; 0xf8
    23b4:	f603 73eb 	addw	r3, r3, #4075	; 0xfeb
    23b8:	9338      	str	r3, [sp, #224]	; 0xe0
    23ba:	3b04      	subs	r3, #4
    23bc:	932d      	str	r3, [sp, #180]	; 0xb4
    23be:	3b04      	subs	r3, #4
    23c0:	932e      	str	r3, [sp, #184]	; 0xb8
    23c2:	3b04      	subs	r3, #4
    23c4:	9339      	str	r3, [sp, #228]	; 0xe4
    23c6:	3b04      	subs	r3, #4
    23c8:	932f      	str	r3, [sp, #188]	; 0xbc
    23ca:	3b04      	subs	r3, #4
    23cc:	9330      	str	r3, [sp, #192]	; 0xc0
    23ce:	3b04      	subs	r3, #4
    23d0:	9331      	str	r3, [sp, #196]	; 0xc4
    23d2:	3b04      	subs	r3, #4
    23d4:	9332      	str	r3, [sp, #200]	; 0xc8
    23d6:	3b04      	subs	r3, #4
    23d8:	933a      	str	r3, [sp, #232]	; 0xe8
    23da:	3b04      	subs	r3, #4
    23dc:	9333      	str	r3, [sp, #204]	; 0xcc
    23de:	3b04      	subs	r3, #4
    23e0:	9334      	str	r3, [sp, #208]	; 0xd0
    23e2:	3b04      	subs	r3, #4
    23e4:	9351      	str	r3, [sp, #324]	; 0x144
    23e6:	332a      	adds	r3, #42	; 0x2a
    23e8:	933b      	str	r3, [sp, #236]	; 0xec
    23ea:	3b04      	subs	r3, #4
    23ec:	9335      	str	r3, [sp, #212]	; 0xd4
    23ee:	3b04      	subs	r3, #4
    23f0:	9336      	str	r3, [sp, #216]	; 0xd8
    23f2:	3b04      	subs	r3, #4
    23f4:	9337      	str	r3, [sp, #220]	; 0xdc
    23f6:	3b04      	subs	r3, #4
    23f8:	933f      	str	r3, [sp, #252]	; 0xfc
    23fa:	3b04      	subs	r3, #4
    23fc:	9340      	str	r3, [sp, #256]	; 0x100
    23fe:	3b04      	subs	r3, #4
    2400:	9341      	str	r3, [sp, #260]	; 0x104
    2402:	3b04      	subs	r3, #4
    2404:	9342      	str	r3, [sp, #264]	; 0x108
    2406:	3b04      	subs	r3, #4
    2408:	9343      	str	r3, [sp, #268]	; 0x10c
    240a:	3b04      	subs	r3, #4
    240c:	9344      	str	r3, [sp, #272]	; 0x110
    240e:	3b04      	subs	r3, #4
    2410:	9345      	str	r3, [sp, #276]	; 0x114
    2412:	3b04      	subs	r3, #4
    2414:	9352      	str	r3, [sp, #328]	; 0x148
    2416:	332d      	adds	r3, #45	; 0x2d
    2418:	9315      	str	r3, [sp, #84]	; 0x54
    241a:	3b04      	subs	r3, #4
    241c:	9314      	str	r3, [sp, #80]	; 0x50
    241e:	3b04      	subs	r3, #4
    2420:	9319      	str	r3, [sp, #100]	; 0x64
    2422:	3b04      	subs	r3, #4
    2424:	9316      	str	r3, [sp, #88]	; 0x58
    2426:	3b04      	subs	r3, #4
    2428:	931a      	str	r3, [sp, #104]	; 0x68
    242a:	3b04      	subs	r3, #4
    242c:	9317      	str	r3, [sp, #92]	; 0x5c
    242e:	3b04      	subs	r3, #4
    2430:	9318      	str	r3, [sp, #96]	; 0x60
    2432:	3b04      	subs	r3, #4
    2434:	9310      	str	r3, [sp, #64]	; 0x40
    2436:	3b04      	subs	r3, #4
    2438:	930e      	str	r3, [sp, #56]	; 0x38
    243a:	3b04      	subs	r3, #4
    243c:	930f      	str	r3, [sp, #60]	; 0x3c
    243e:	3b04      	subs	r3, #4
    2440:	9320      	str	r3, [sp, #128]	; 0x80
    2442:	3b04      	subs	r3, #4
    2444:	9321      	str	r3, [sp, #132]	; 0x84
    2446:	3322      	adds	r3, #34	; 0x22
    2448:	9301      	str	r3, [sp, #4]
    244a:	3b04      	subs	r3, #4
    244c:	9302      	str	r3, [sp, #8]
    244e:	3b04      	subs	r3, #4
    2450:	9303      	str	r3, [sp, #12]
    2452:	3b04      	subs	r3, #4
    2454:	9304      	str	r3, [sp, #16]
    2456:	3b04      	subs	r3, #4
    2458:	9305      	str	r3, [sp, #20]
    245a:	3b04      	subs	r3, #4
    245c:	9306      	str	r3, [sp, #24]
    245e:	3b04      	subs	r3, #4
    2460:	9307      	str	r3, [sp, #28]
    2462:	3b04      	subs	r3, #4
    2464:	9308      	str	r3, [sp, #32]
    2466:	3b04      	subs	r3, #4
    2468:	f8df 918c 	ldr.w	r9, [pc, #396]	; 25f8 <gpio_register_rw_test+0x1b60>
    246c:	f8df b18c 	ldr.w	fp, [pc, #396]	; 25fc <gpio_register_rw_test+0x1b64>
    2470:	9300      	str	r3, [sp, #0]
    gpio_datamask        = 0xFFFFFDFF;
    2472:	f46f 7a00 	mvn.w	sl, #512	; 0x200
    2476:	f7fe bca0 	b.w	dba <gpio_register_rw_test+0x322>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    247a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    247e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2482:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2486:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    248a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    248e:	f481 3180 	eor.w	r1, r1, #65536	; 0x10000
    2492:	039c      	lsls	r4, r3, #14
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2494:	4b57      	ldr	r3, [pc, #348]	; (25f4 <gpio_register_rw_test+0x1b5c>)
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2496:	f3c1 4100 	ubfx	r1, r1, #16, #1
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    249a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    249e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    24a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
            err_code = err_code | (1<<i);
    24a6:	bf58      	it	pl
    24a8:	f041 0102 	orrpl.w	r1, r1, #2
    24ac:	0358      	lsls	r0, r3, #13
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    24ae:	4b51      	ldr	r3, [pc, #324]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    24b0:	bf58      	it	pl
    24b2:	f041 0104 	orrpl.w	r1, r1, #4
    24b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    24ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    24be:	031a      	lsls	r2, r3, #12
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    24c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    24c4:	4b4b      	ldr	r3, [pc, #300]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    24c6:	bf58      	it	pl
    24c8:	f041 0108 	orrpl.w	r1, r1, #8
    24cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    24d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    24d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    24d8:	02db      	lsls	r3, r3, #11
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    24da:	4b46      	ldr	r3, [pc, #280]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    24dc:	bf58      	it	pl
    24de:	f041 0110 	orrpl.w	r1, r1, #16
    24e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    24e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    24ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    24ee:	029f      	lsls	r7, r3, #10
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    24f0:	4b40      	ldr	r3, [pc, #256]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    24f2:	bf58      	it	pl
    24f4:	f041 0120 	orrpl.w	r1, r1, #32
    24f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    24fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2500:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2504:	025e      	lsls	r6, r3, #9
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2506:	4b3b      	ldr	r3, [pc, #236]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    2508:	bf58      	it	pl
    250a:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
    250e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2512:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2516:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    251a:	021d      	lsls	r5, r3, #8
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    251c:	4b35      	ldr	r3, [pc, #212]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    251e:	bf58      	it	pl
    2520:	f041 0180 	orrpl.w	r1, r1, #128	; 0x80
    2524:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    252c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2530:	01dc      	lsls	r4, r3, #7
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2532:	4b30      	ldr	r3, [pc, #192]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    2534:	bf58      	it	pl
    2536:	f441 7180 	orrpl.w	r1, r1, #256	; 0x100
    253a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    253e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2542:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2546:	0198      	lsls	r0, r3, #6
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2548:	4b2a      	ldr	r3, [pc, #168]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    254a:	bf58      	it	pl
    254c:	f441 7100 	orrpl.w	r1, r1, #512	; 0x200
    2550:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2554:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2558:	015a      	lsls	r2, r3, #5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    255a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    255e:	4b25      	ldr	r3, [pc, #148]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    2560:	bf58      	it	pl
    2562:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
    2566:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    256a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    256e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2572:	011b      	lsls	r3, r3, #4
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2574:	4b1f      	ldr	r3, [pc, #124]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    2576:	bf58      	it	pl
    2578:	f441 6100 	orrpl.w	r1, r1, #2048	; 0x800
    257c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    2584:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2588:	00df      	lsls	r7, r3, #3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    258a:	4b1a      	ldr	r3, [pc, #104]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    258c:	bf58      	it	pl
    258e:	f441 5180 	orrpl.w	r1, r1, #4096	; 0x1000
    2592:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2596:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    259a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    259e:	009e      	lsls	r6, r3, #2
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    25a0:	4b14      	ldr	r3, [pc, #80]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    25a2:	bf58      	it	pl
    25a4:	f441 5100 	orrpl.w	r1, r1, #8192	; 0x2000
    25a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    25ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    25b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    25b4:	005d      	lsls	r5, r3, #1
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    25b6:	4b0f      	ldr	r3, [pc, #60]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    25b8:	bf58      	it	pl
    25ba:	f441 4180 	orrpl.w	r1, r1, #16384	; 0x4000
    25be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    25c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
    25c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    25ca:	2b00      	cmp	r3, #0
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <gpio_register_rw_test+0x1b5c>)
    25ce:	bfa8      	it	ge
    25d0:	f441 4100 	orrge.w	r1, r1, #32768	; 0x8000
    25d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    25d8:	e582      	b.n	20e0 <gpio_register_rw_test+0x1648>
    25da:	bf00      	nop
    25dc:	40012fd0 	.word	0x40012fd0
    25e0:	4001203b 	.word	0x4001203b
    25e4:	00fffffd 	.word	0x00fffffd
    25e8:	40012038 	.word	0x40012038
    25ec:	40012005 	.word	0x40012005
    25f0:	40012018 	.word	0x40012018
    25f4:	e000e100 	.word	0xe000e100
    25f8:	40012ffc 	.word	0x40012ffc
    25fc:	40012ff8 	.word	0x40012ff8

00002600 <gpio_unused_addresses_test_single>:
/*  GPIO Unused Addresses access tests                             */
/* --------------------------------------------------------------- */
/* Test just one address - should read 0, write should be ignored */
int gpio_unused_addresses_test_single(unsigned int address)
{
  if (HW32_REG(address) != 0) return (1);
    2600:	6803      	ldr	r3, [r0, #0]
    2602:	b93b      	cbnz	r3, 2614 <gpio_unused_addresses_test_single+0x14>
  HW32_REG(address) = 0xFFFFFFFF;
    2604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2608:	6003      	str	r3, [r0, #0]
  if (HW32_REG(address) != 0) return (1);
    260a:	6800      	ldr	r0, [r0, #0]
    260c:	3000      	adds	r0, #0
    260e:	bf18      	it	ne
    2610:	2001      	movne	r0, #1
    2612:	4770      	bx	lr
  if (HW32_REG(address) != 0) return (1);
    2614:	2001      	movs	r0, #1
  else return (0);
}
    2616:	4770      	bx	lr

00002618 <gpio_unused_addresses_test>:

/* Test unused address in GPIO */
int gpio_unused_addresses_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
    2618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    261c:	4604      	mov	r4, r0
  int return_val=0;
  unsigned int err_code=0;

  unsigned int gpio_base;

  puts("GPIO Unused address test");
    261e:	48a3      	ldr	r0, [pc, #652]	; (28ac <gpio_unused_addresses_test+0x294>)
    2620:	f002 fb2c 	bl	4c7c <puts>

  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2624:	4ba2      	ldr	r3, [pc, #648]	; (28b0 <gpio_unused_addresses_test+0x298>)
    2626:	429c      	cmp	r4, r3
    2628:	f000 80e0 	beq.w	27ec <gpio_unused_addresses_test+0x1d4>
    gpio_base  = CM3DS_MPS2_GPIO0_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    262c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2630:	429c      	cmp	r4, r3
    2632:	d018      	beq.n	2666 <gpio_unused_addresses_test+0x4e>
    gpio_base  = CM3DS_MPS2_GPIO1_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2638:	429c      	cmp	r4, r3
    263a:	f000 80fd 	beq.w	2838 <gpio_unused_addresses_test+0x220>
    gpio_base  = CM3DS_MPS2_GPIO2_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    263e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2642:	429c      	cmp	r4, r3
    2644:	f000 810b 	beq.w	285e <gpio_unused_addresses_test+0x246>
    gpio_base  = CM3DS_MPS2_GPIO3_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO4) {
    2648:	f503 33e8 	add.w	r3, r3, #118784	; 0x1d000
    264c:	429c      	cmp	r4, r3
    264e:	f000 80e0 	beq.w	2812 <gpio_unused_addresses_test+0x1fa>
    gpio_base  = CM3DS_MPS2_GPIO4_BASE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO5) {
    2652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2656:	429c      	cmp	r4, r3
    2658:	f000 8114 	beq.w	2884 <gpio_unused_addresses_test+0x26c>
    gpio_base  = CM3DS_MPS2_GPIO5_BASE;
    }
  else {
    puts ("ERROR: Input parameter invalid in function 'gpio_unused_addresses_test'.");
    265c:	4895      	ldr	r0, [pc, #596]	; (28b4 <gpio_unused_addresses_test+0x29c>)
    265e:	f002 fb0d 	bl	4c7c <puts>
    return 1;
    2662:	2001      	movs	r0, #1
    2664:	e0b5      	b.n	27d2 <gpio_unused_addresses_test+0x1ba>
    2666:	4b94      	ldr	r3, [pc, #592]	; (28b8 <gpio_unused_addresses_test+0x2a0>)
    2668:	4a94      	ldr	r2, [pc, #592]	; (28bc <gpio_unused_addresses_test+0x2a4>)
    266a:	4d95      	ldr	r5, [pc, #596]	; (28c0 <gpio_unused_addresses_test+0x2a8>)
    266c:	4e95      	ldr	r6, [pc, #596]	; (28c4 <gpio_unused_addresses_test+0x2ac>)
    266e:	4f96      	ldr	r7, [pc, #600]	; (28c8 <gpio_unused_addresses_test+0x2b0>)
    2670:	4996      	ldr	r1, [pc, #600]	; (28cc <gpio_unused_addresses_test+0x2b4>)
    2672:	4897      	ldr	r0, [pc, #604]	; (28d0 <gpio_unused_addresses_test+0x2b8>)
    2674:	f8df c308 	ldr.w	ip, [pc, #776]	; 2980 <gpio_unused_addresses_test+0x368>
    2678:	f8df e308 	ldr.w	lr, [pc, #776]	; 2984 <gpio_unused_addresses_test+0x36c>
    267c:	f8df 8308 	ldr.w	r8, [pc, #776]	; 2988 <gpio_unused_addresses_test+0x370>
    2680:	f8df 9308 	ldr.w	r9, [pc, #776]	; 298c <gpio_unused_addresses_test+0x374>
    2684:	f8df a308 	ldr.w	sl, [pc, #776]	; 2990 <gpio_unused_addresses_test+0x378>
    2688:	4c92      	ldr	r4, [pc, #584]	; (28d4 <gpio_unused_addresses_test+0x2bc>)
  if (HW32_REG(address) != 0) return (1);
    268a:	f8d4 b000 	ldr.w	fp, [r4]
    268e:	f1bb 0f00 	cmp.w	fp, #0
    2692:	f040 80a9 	bne.w	27e8 <gpio_unused_addresses_test+0x1d0>
  HW32_REG(address) = 0xFFFFFFFF;
    2696:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    269a:	f8c4 b000 	str.w	fp, [r4]
  if (HW32_REG(address) != 0) return (1);
    269e:	6824      	ldr	r4, [r4, #0]
    26a0:	3400      	adds	r4, #0
    26a2:	bf18      	it	ne
    26a4:	2401      	movne	r4, #1
  if (HW32_REG(address) != 0) return (1);
    26a6:	f8da b000 	ldr.w	fp, [sl]
    26aa:	f1bb 0f00 	cmp.w	fp, #0
    26ae:	d108      	bne.n	26c2 <gpio_unused_addresses_test+0xaa>
  HW32_REG(address) = 0xFFFFFFFF;
    26b0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    26b4:	f8ca b000 	str.w	fp, [sl]
  if (HW32_REG(address) != 0) return (1);
    26b8:	f8da a000 	ldr.w	sl, [sl]
    26bc:	f1ba 0f00 	cmp.w	sl, #0
    26c0:	d001      	beq.n	26c6 <gpio_unused_addresses_test+0xae>
    }

  if (gpio_unused_addresses_test_single(gpio_base + 0x008)) err_code |= 1 << 0;
  if (gpio_unused_addresses_test_single(gpio_base + 0x00C)) err_code |= 1 << 1;
    26c2:	f044 0402 	orr.w	r4, r4, #2
  if (HW32_REG(address) != 0) return (1);
    26c6:	f8d9 a000 	ldr.w	sl, [r9]
    26ca:	f1ba 0f00 	cmp.w	sl, #0
    26ce:	d108      	bne.n	26e2 <gpio_unused_addresses_test+0xca>
  HW32_REG(address) = 0xFFFFFFFF;
    26d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    26d4:	f8c9 a000 	str.w	sl, [r9]
  if (HW32_REG(address) != 0) return (1);
    26d8:	f8d9 9000 	ldr.w	r9, [r9]
    26dc:	f1b9 0f00 	cmp.w	r9, #0
    26e0:	d001      	beq.n	26e6 <gpio_unused_addresses_test+0xce>
  if (gpio_unused_addresses_test_single(gpio_base + 0x03C)) err_code |= 1 << 2;
    26e2:	f044 0404 	orr.w	r4, r4, #4
  if (HW32_REG(address) != 0) return (1);
    26e6:	f8d8 9000 	ldr.w	r9, [r8]
    26ea:	f1b9 0f00 	cmp.w	r9, #0
    26ee:	d108      	bne.n	2702 <gpio_unused_addresses_test+0xea>
  HW32_REG(address) = 0xFFFFFFFF;
    26f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    26f4:	f8c8 9000 	str.w	r9, [r8]
  if (HW32_REG(address) != 0) return (1);
    26f8:	f8d8 8000 	ldr.w	r8, [r8]
    26fc:	f1b8 0f00 	cmp.w	r8, #0
    2700:	d001      	beq.n	2706 <gpio_unused_addresses_test+0xee>
  if (gpio_unused_addresses_test_single(gpio_base + 0x040)) err_code |= 1 << 3;
    2702:	f044 0408 	orr.w	r4, r4, #8
  if (HW32_REG(address) != 0) return (1);
    2706:	f8de 8000 	ldr.w	r8, [lr]
    270a:	f1b8 0f00 	cmp.w	r8, #0
    270e:	d108      	bne.n	2722 <gpio_unused_addresses_test+0x10a>
  HW32_REG(address) = 0xFFFFFFFF;
    2710:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2714:	f8ce 8000 	str.w	r8, [lr]
  if (HW32_REG(address) != 0) return (1);
    2718:	f8de e000 	ldr.w	lr, [lr]
    271c:	f1be 0f00 	cmp.w	lr, #0
    2720:	d001      	beq.n	2726 <gpio_unused_addresses_test+0x10e>
  if (gpio_unused_addresses_test_single(gpio_base + 0x3FC)) err_code |= 1 << 4;
    2722:	f044 0410 	orr.w	r4, r4, #16
  if (HW32_REG(address) != 0) return (1);
    2726:	f8dc e000 	ldr.w	lr, [ip]
    272a:	f1be 0f00 	cmp.w	lr, #0
    272e:	d108      	bne.n	2742 <gpio_unused_addresses_test+0x12a>
  HW32_REG(address) = 0xFFFFFFFF;
    2730:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
    2734:	f8cc e000 	str.w	lr, [ip]
  if (HW32_REG(address) != 0) return (1);
    2738:	f8dc c000 	ldr.w	ip, [ip]
    273c:	f1bc 0f00 	cmp.w	ip, #0
    2740:	d001      	beq.n	2746 <gpio_unused_addresses_test+0x12e>
  if (gpio_unused_addresses_test_single(gpio_base + 0xC00)) err_code |= 1 << 5;
    2742:	f044 0420 	orr.w	r4, r4, #32
  if (HW32_REG(address) != 0) return (1);
    2746:	f8d0 c000 	ldr.w	ip, [r0]
    274a:	f1bc 0f00 	cmp.w	ip, #0
    274e:	d105      	bne.n	275c <gpio_unused_addresses_test+0x144>
  HW32_REG(address) = 0xFFFFFFFF;
    2750:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    2754:	f8c0 c000 	str.w	ip, [r0]
  if (HW32_REG(address) != 0) return (1);
    2758:	6800      	ldr	r0, [r0, #0]
    275a:	b108      	cbz	r0, 2760 <gpio_unused_addresses_test+0x148>
  if (gpio_unused_addresses_test_single(gpio_base + 0xD00)) err_code |= 1 << 6;
    275c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  if (HW32_REG(address) != 0) return (1);
    2760:	6808      	ldr	r0, [r1, #0]
    2762:	b920      	cbnz	r0, 276e <gpio_unused_addresses_test+0x156>
  HW32_REG(address) = 0xFFFFFFFF;
    2764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2768:	6008      	str	r0, [r1, #0]
  if (HW32_REG(address) != 0) return (1);
    276a:	6809      	ldr	r1, [r1, #0]
    276c:	b109      	cbz	r1, 2772 <gpio_unused_addresses_test+0x15a>
  if (gpio_unused_addresses_test_single(gpio_base + 0xE00)) err_code |= 1 << 7;
    276e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  if (HW32_REG(address) != 0) return (1);
    2772:	6839      	ldr	r1, [r7, #0]
    2774:	b921      	cbnz	r1, 2780 <gpio_unused_addresses_test+0x168>
  HW32_REG(address) = 0xFFFFFFFF;
    2776:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    277a:	6039      	str	r1, [r7, #0]
  if (HW32_REG(address) != 0) return (1);
    277c:	6839      	ldr	r1, [r7, #0]
    277e:	b109      	cbz	r1, 2784 <gpio_unused_addresses_test+0x16c>
  if (gpio_unused_addresses_test_single(gpio_base + 0xF00)) err_code |= 1 << 8;
    2780:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  if (HW32_REG(address) != 0) return (1);
    2784:	6831      	ldr	r1, [r6, #0]
    2786:	b921      	cbnz	r1, 2792 <gpio_unused_addresses_test+0x17a>
  HW32_REG(address) = 0xFFFFFFFF;
    2788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    278c:	6031      	str	r1, [r6, #0]
  if (HW32_REG(address) != 0) return (1);
    278e:	6831      	ldr	r1, [r6, #0]
    2790:	b109      	cbz	r1, 2796 <gpio_unused_addresses_test+0x17e>
  if (gpio_unused_addresses_test_single(gpio_base + 0xFC0)) err_code |= 1 << 9;
    2792:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  if (HW32_REG(address) != 0) return (1);
    2796:	6829      	ldr	r1, [r5, #0]
    2798:	b921      	cbnz	r1, 27a4 <gpio_unused_addresses_test+0x18c>
  HW32_REG(address) = 0xFFFFFFFF;
    279a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    279e:	6029      	str	r1, [r5, #0]
  if (HW32_REG(address) != 0) return (1);
    27a0:	6829      	ldr	r1, [r5, #0]
    27a2:	b109      	cbz	r1, 27a8 <gpio_unused_addresses_test+0x190>
  if (gpio_unused_addresses_test_single(gpio_base + 0xFC4)) err_code |= 1 << 10;
    27a4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
  if (HW32_REG(address) != 0) return (1);
    27a8:	6811      	ldr	r1, [r2, #0]
    27aa:	b921      	cbnz	r1, 27b6 <gpio_unused_addresses_test+0x19e>
  HW32_REG(address) = 0xFFFFFFFF;
    27ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    27b0:	6011      	str	r1, [r2, #0]
  if (HW32_REG(address) != 0) return (1);
    27b2:	6812      	ldr	r2, [r2, #0]
    27b4:	b10a      	cbz	r2, 27ba <gpio_unused_addresses_test+0x1a2>
  if (gpio_unused_addresses_test_single(gpio_base + 0xFC8)) err_code |= 1 << 11;
    27b6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  if (HW32_REG(address) != 0) return (1);
    27ba:	681a      	ldr	r2, [r3, #0]
    27bc:	b95a      	cbnz	r2, 27d6 <gpio_unused_addresses_test+0x1be>
  HW32_REG(address) = 0xFFFFFFFF;
    27be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27c2:	601a      	str	r2, [r3, #0]
  if (HW32_REG(address) != 0) return (1);
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	b933      	cbnz	r3, 27d6 <gpio_unused_addresses_test+0x1be>
  if (gpio_unused_addresses_test_single(gpio_base + 0xFCC)) err_code |= 1 << 12;


  /* Generate return value */
  if (err_code != 0) {
    27c8:	b93c      	cbnz	r4, 27da <gpio_unused_addresses_test+0x1c2>
    printf ("ERROR : Unused addresses failed (0x%x)\n", err_code);
    return_val =1;
    err_code = 0;
  }
  else puts("- Unused addresses Test Passed");
    27ca:	4843      	ldr	r0, [pc, #268]	; (28d8 <gpio_unused_addresses_test+0x2c0>)
    27cc:	f002 fa56 	bl	4c7c <puts>
  int return_val=0;
    27d0:	4620      	mov	r0, r4

  return(return_val);
}
    27d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (gpio_unused_addresses_test_single(gpio_base + 0xFCC)) err_code |= 1 << 12;
    27d6:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
    printf ("ERROR : Unused addresses failed (0x%x)\n", err_code);
    27da:	4621      	mov	r1, r4
    27dc:	483f      	ldr	r0, [pc, #252]	; (28dc <gpio_unused_addresses_test+0x2c4>)
    27de:	f002 f9d9 	bl	4b94 <iprintf>
    return_val =1;
    27e2:	2001      	movs	r0, #1
}
    27e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (gpio_unused_addresses_test_single(gpio_base + 0x008)) err_code |= 1 << 0;
    27e8:	2401      	movs	r4, #1
    27ea:	e75c      	b.n	26a6 <gpio_unused_addresses_test+0x8e>
    27ec:	4b3c      	ldr	r3, [pc, #240]	; (28e0 <gpio_unused_addresses_test+0x2c8>)
    27ee:	4a3d      	ldr	r2, [pc, #244]	; (28e4 <gpio_unused_addresses_test+0x2cc>)
    27f0:	4d3d      	ldr	r5, [pc, #244]	; (28e8 <gpio_unused_addresses_test+0x2d0>)
    27f2:	4e3e      	ldr	r6, [pc, #248]	; (28ec <gpio_unused_addresses_test+0x2d4>)
    27f4:	4f3e      	ldr	r7, [pc, #248]	; (28f0 <gpio_unused_addresses_test+0x2d8>)
    27f6:	493f      	ldr	r1, [pc, #252]	; (28f4 <gpio_unused_addresses_test+0x2dc>)
    27f8:	483f      	ldr	r0, [pc, #252]	; (28f8 <gpio_unused_addresses_test+0x2e0>)
    27fa:	f8df c198 	ldr.w	ip, [pc, #408]	; 2994 <gpio_unused_addresses_test+0x37c>
    27fe:	f8df e198 	ldr.w	lr, [pc, #408]	; 2998 <gpio_unused_addresses_test+0x380>
    2802:	f8df 8198 	ldr.w	r8, [pc, #408]	; 299c <gpio_unused_addresses_test+0x384>
    2806:	f8df 9198 	ldr.w	r9, [pc, #408]	; 29a0 <gpio_unused_addresses_test+0x388>
    280a:	f8df a198 	ldr.w	sl, [pc, #408]	; 29a4 <gpio_unused_addresses_test+0x38c>
    280e:	4c3b      	ldr	r4, [pc, #236]	; (28fc <gpio_unused_addresses_test+0x2e4>)
    2810:	e73b      	b.n	268a <gpio_unused_addresses_test+0x72>
    2812:	4b3b      	ldr	r3, [pc, #236]	; (2900 <gpio_unused_addresses_test+0x2e8>)
    2814:	4a3b      	ldr	r2, [pc, #236]	; (2904 <gpio_unused_addresses_test+0x2ec>)
    2816:	4d3c      	ldr	r5, [pc, #240]	; (2908 <gpio_unused_addresses_test+0x2f0>)
    2818:	4e3c      	ldr	r6, [pc, #240]	; (290c <gpio_unused_addresses_test+0x2f4>)
    281a:	4f3d      	ldr	r7, [pc, #244]	; (2910 <gpio_unused_addresses_test+0x2f8>)
    281c:	493d      	ldr	r1, [pc, #244]	; (2914 <gpio_unused_addresses_test+0x2fc>)
    281e:	483e      	ldr	r0, [pc, #248]	; (2918 <gpio_unused_addresses_test+0x300>)
    2820:	f8df c184 	ldr.w	ip, [pc, #388]	; 29a8 <gpio_unused_addresses_test+0x390>
    2824:	f8df e184 	ldr.w	lr, [pc, #388]	; 29ac <gpio_unused_addresses_test+0x394>
    2828:	f8df 8184 	ldr.w	r8, [pc, #388]	; 29b0 <gpio_unused_addresses_test+0x398>
    282c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 29b4 <gpio_unused_addresses_test+0x39c>
    2830:	f8df a184 	ldr.w	sl, [pc, #388]	; 29b8 <gpio_unused_addresses_test+0x3a0>
    2834:	4c39      	ldr	r4, [pc, #228]	; (291c <gpio_unused_addresses_test+0x304>)
    2836:	e728      	b.n	268a <gpio_unused_addresses_test+0x72>
    2838:	4b39      	ldr	r3, [pc, #228]	; (2920 <gpio_unused_addresses_test+0x308>)
    283a:	4a3a      	ldr	r2, [pc, #232]	; (2924 <gpio_unused_addresses_test+0x30c>)
    283c:	4d3a      	ldr	r5, [pc, #232]	; (2928 <gpio_unused_addresses_test+0x310>)
    283e:	4e3b      	ldr	r6, [pc, #236]	; (292c <gpio_unused_addresses_test+0x314>)
    2840:	4f3b      	ldr	r7, [pc, #236]	; (2930 <gpio_unused_addresses_test+0x318>)
    2842:	493c      	ldr	r1, [pc, #240]	; (2934 <gpio_unused_addresses_test+0x31c>)
    2844:	483c      	ldr	r0, [pc, #240]	; (2938 <gpio_unused_addresses_test+0x320>)
    2846:	f8df c174 	ldr.w	ip, [pc, #372]	; 29bc <gpio_unused_addresses_test+0x3a4>
    284a:	f8df e174 	ldr.w	lr, [pc, #372]	; 29c0 <gpio_unused_addresses_test+0x3a8>
    284e:	f8df 8174 	ldr.w	r8, [pc, #372]	; 29c4 <gpio_unused_addresses_test+0x3ac>
    2852:	f8df 9174 	ldr.w	r9, [pc, #372]	; 29c8 <gpio_unused_addresses_test+0x3b0>
    2856:	f8df a174 	ldr.w	sl, [pc, #372]	; 29cc <gpio_unused_addresses_test+0x3b4>
    285a:	4c38      	ldr	r4, [pc, #224]	; (293c <gpio_unused_addresses_test+0x324>)
    285c:	e715      	b.n	268a <gpio_unused_addresses_test+0x72>
    285e:	4b38      	ldr	r3, [pc, #224]	; (2940 <gpio_unused_addresses_test+0x328>)
    2860:	4a38      	ldr	r2, [pc, #224]	; (2944 <gpio_unused_addresses_test+0x32c>)
    2862:	4d39      	ldr	r5, [pc, #228]	; (2948 <gpio_unused_addresses_test+0x330>)
    2864:	4e39      	ldr	r6, [pc, #228]	; (294c <gpio_unused_addresses_test+0x334>)
    2866:	4f3a      	ldr	r7, [pc, #232]	; (2950 <gpio_unused_addresses_test+0x338>)
    2868:	493a      	ldr	r1, [pc, #232]	; (2954 <gpio_unused_addresses_test+0x33c>)
    286a:	483b      	ldr	r0, [pc, #236]	; (2958 <gpio_unused_addresses_test+0x340>)
    286c:	f8df c160 	ldr.w	ip, [pc, #352]	; 29d0 <gpio_unused_addresses_test+0x3b8>
    2870:	f8df e160 	ldr.w	lr, [pc, #352]	; 29d4 <gpio_unused_addresses_test+0x3bc>
    2874:	f8df 8160 	ldr.w	r8, [pc, #352]	; 29d8 <gpio_unused_addresses_test+0x3c0>
    2878:	f8df 9160 	ldr.w	r9, [pc, #352]	; 29dc <gpio_unused_addresses_test+0x3c4>
    287c:	f8df a160 	ldr.w	sl, [pc, #352]	; 29e0 <gpio_unused_addresses_test+0x3c8>
    2880:	4c36      	ldr	r4, [pc, #216]	; (295c <gpio_unused_addresses_test+0x344>)
    2882:	e702      	b.n	268a <gpio_unused_addresses_test+0x72>
    2884:	4b36      	ldr	r3, [pc, #216]	; (2960 <gpio_unused_addresses_test+0x348>)
    2886:	4a37      	ldr	r2, [pc, #220]	; (2964 <gpio_unused_addresses_test+0x34c>)
    2888:	4d37      	ldr	r5, [pc, #220]	; (2968 <gpio_unused_addresses_test+0x350>)
    288a:	4e38      	ldr	r6, [pc, #224]	; (296c <gpio_unused_addresses_test+0x354>)
    288c:	4f38      	ldr	r7, [pc, #224]	; (2970 <gpio_unused_addresses_test+0x358>)
    288e:	4939      	ldr	r1, [pc, #228]	; (2974 <gpio_unused_addresses_test+0x35c>)
    2890:	4839      	ldr	r0, [pc, #228]	; (2978 <gpio_unused_addresses_test+0x360>)
    2892:	f8df c150 	ldr.w	ip, [pc, #336]	; 29e4 <gpio_unused_addresses_test+0x3cc>
    2896:	f8df e150 	ldr.w	lr, [pc, #336]	; 29e8 <gpio_unused_addresses_test+0x3d0>
    289a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 29ec <gpio_unused_addresses_test+0x3d4>
    289e:	f8df 9150 	ldr.w	r9, [pc, #336]	; 29f0 <gpio_unused_addresses_test+0x3d8>
    28a2:	f8df a150 	ldr.w	sl, [pc, #336]	; 29f4 <gpio_unused_addresses_test+0x3dc>
    28a6:	4c35      	ldr	r4, [pc, #212]	; (297c <gpio_unused_addresses_test+0x364>)
    28a8:	e6ef      	b.n	268a <gpio_unused_addresses_test+0x72>
    28aa:	bf00      	nop
    28ac:	000061b8 	.word	0x000061b8
    28b0:	40010000 	.word	0x40010000
    28b4:	000061d4 	.word	0x000061d4
    28b8:	40011fcc 	.word	0x40011fcc
    28bc:	40011fc8 	.word	0x40011fc8
    28c0:	40011fc4 	.word	0x40011fc4
    28c4:	40011fc0 	.word	0x40011fc0
    28c8:	40011f00 	.word	0x40011f00
    28cc:	40011e00 	.word	0x40011e00
    28d0:	40011d00 	.word	0x40011d00
    28d4:	40011008 	.word	0x40011008
    28d8:	00006248 	.word	0x00006248
    28dc:	00006220 	.word	0x00006220
    28e0:	40010fcc 	.word	0x40010fcc
    28e4:	40010fc8 	.word	0x40010fc8
    28e8:	40010fc4 	.word	0x40010fc4
    28ec:	40010fc0 	.word	0x40010fc0
    28f0:	40010f00 	.word	0x40010f00
    28f4:	40010e00 	.word	0x40010e00
    28f8:	40010d00 	.word	0x40010d00
    28fc:	40010008 	.word	0x40010008
    2900:	40030fcc 	.word	0x40030fcc
    2904:	40030fc8 	.word	0x40030fc8
    2908:	40030fc4 	.word	0x40030fc4
    290c:	40030fc0 	.word	0x40030fc0
    2910:	40030f00 	.word	0x40030f00
    2914:	40030e00 	.word	0x40030e00
    2918:	40030d00 	.word	0x40030d00
    291c:	40030008 	.word	0x40030008
    2920:	40012fcc 	.word	0x40012fcc
    2924:	40012fc8 	.word	0x40012fc8
    2928:	40012fc4 	.word	0x40012fc4
    292c:	40012fc0 	.word	0x40012fc0
    2930:	40012f00 	.word	0x40012f00
    2934:	40012e00 	.word	0x40012e00
    2938:	40012d00 	.word	0x40012d00
    293c:	40012008 	.word	0x40012008
    2940:	40013fcc 	.word	0x40013fcc
    2944:	40013fc8 	.word	0x40013fc8
    2948:	40013fc4 	.word	0x40013fc4
    294c:	40013fc0 	.word	0x40013fc0
    2950:	40013f00 	.word	0x40013f00
    2954:	40013e00 	.word	0x40013e00
    2958:	40013d00 	.word	0x40013d00
    295c:	40013008 	.word	0x40013008
    2960:	40031fcc 	.word	0x40031fcc
    2964:	40031fc8 	.word	0x40031fc8
    2968:	40031fc4 	.word	0x40031fc4
    296c:	40031fc0 	.word	0x40031fc0
    2970:	40031f00 	.word	0x40031f00
    2974:	40031e00 	.word	0x40031e00
    2978:	40031d00 	.word	0x40031d00
    297c:	40031008 	.word	0x40031008
    2980:	40011c00 	.word	0x40011c00
    2984:	400113fc 	.word	0x400113fc
    2988:	40011040 	.word	0x40011040
    298c:	4001103c 	.word	0x4001103c
    2990:	4001100c 	.word	0x4001100c
    2994:	40010c00 	.word	0x40010c00
    2998:	400103fc 	.word	0x400103fc
    299c:	40010040 	.word	0x40010040
    29a0:	4001003c 	.word	0x4001003c
    29a4:	4001000c 	.word	0x4001000c
    29a8:	40030c00 	.word	0x40030c00
    29ac:	400303fc 	.word	0x400303fc
    29b0:	40030040 	.word	0x40030040
    29b4:	4003003c 	.word	0x4003003c
    29b8:	4003000c 	.word	0x4003000c
    29bc:	40012c00 	.word	0x40012c00
    29c0:	400123fc 	.word	0x400123fc
    29c4:	40012040 	.word	0x40012040
    29c8:	4001203c 	.word	0x4001203c
    29cc:	4001200c 	.word	0x4001200c
    29d0:	40013c00 	.word	0x40013c00
    29d4:	400133fc 	.word	0x400133fc
    29d8:	40013040 	.word	0x40013040
    29dc:	4001303c 	.word	0x4001303c
    29e0:	4001300c 	.word	0x4001300c
    29e4:	40031c00 	.word	0x40031c00
    29e8:	400313fc 	.word	0x400313fc
    29ec:	40031040 	.word	0x40031040
    29f0:	4003103c 	.word	0x4003103c
    29f4:	4003100c 	.word	0x4003100c

000029f8 <gpio_interrupt_test>:

/* --------------------------------------------------------------- */
/*  GPIO interrupt tests                                           */
/* --------------------------------------------------------------- */

int gpio_interrupt_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
    29f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int irq_mask; /* one hot bit mask for IRQ being tested in the loop */

  unsigned int gpio_datamask;   /* Data bit mask */
  int test_individual_irq = 1;  /* Test individual IRQ in GPIO #0 by default */

  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    29fc:	4b30      	ldr	r3, [pc, #192]	; (2ac0 <gpio_interrupt_test+0xc8>)
int gpio_interrupt_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
    29fe:	b085      	sub	sp, #20
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2a00:	4298      	cmp	r0, r3
int gpio_interrupt_test(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO){
    2a02:	4604      	mov	r4, r0
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2a04:	f000 82d1 	beq.w	2faa <gpio_interrupt_test+0x5b2>
    gpio_datamask        = 0xFFFF7FFE;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    2a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2a0c:	4298      	cmp	r0, r3
    2a0e:	d00c      	beq.n	2a2a <gpio_interrupt_test+0x32>
    gpio_datamask        = 0xFFFFFB7F;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2a14:	4298      	cmp	r0, r3
    2a16:	f001 8221 	beq.w	3e5c <gpio_interrupt_test+0x1464>
    gpio_datamask        = 0xFFFFFDFF;
    }
  else if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    2a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2a1e:	4298      	cmp	r0, r3
    2a20:	f040 82de 	bne.w	2fe0 <gpio_interrupt_test+0x5e8>
    gpio_datamask        = 0xFFFF000F;
    2a24:	4b27      	ldr	r3, [pc, #156]	; (2ac4 <gpio_interrupt_test+0xcc>)
    2a26:	9301      	str	r3, [sp, #4]
    2a28:	e002      	b.n	2a30 <gpio_interrupt_test+0x38>
    gpio_datamask        = 0xFFFFFB7F;
    2a2a:	f46f 6390 	mvn.w	r3, #1152	; 0x480
    2a2e:	9301      	str	r3, [sp, #4]
    puts ("ERROR: Input parameter invalid in function 'gpio_interrupt_test'.");
    return 1;
    }

  for (i=0;i<16;i++){
    gpio0_irq_flags[i]=0;
    2a30:	2500      	movs	r5, #0
    2a32:	4b25      	ldr	r3, [pc, #148]	; (2ac8 <gpio_interrupt_test+0xd0>)
    }
  puts("GPIO interrupt test");
    2a34:	4825      	ldr	r0, [pc, #148]	; (2acc <gpio_interrupt_test+0xd4>)
    gpio0_irq_flags[i]=0;
    2a36:	701d      	strb	r5, [r3, #0]
    2a38:	705d      	strb	r5, [r3, #1]
    2a3a:	709d      	strb	r5, [r3, #2]
    2a3c:	70dd      	strb	r5, [r3, #3]
    2a3e:	711d      	strb	r5, [r3, #4]
    2a40:	715d      	strb	r5, [r3, #5]
    2a42:	719d      	strb	r5, [r3, #6]
    2a44:	71dd      	strb	r5, [r3, #7]
    2a46:	721d      	strb	r5, [r3, #8]
    2a48:	725d      	strb	r5, [r3, #9]
    2a4a:	729d      	strb	r5, [r3, #10]
    2a4c:	72dd      	strb	r5, [r3, #11]
    2a4e:	731d      	strb	r5, [r3, #12]
    2a50:	735d      	strb	r5, [r3, #13]
    2a52:	739d      	strb	r5, [r3, #14]
    2a54:	73dd      	strb	r5, [r3, #15]
  puts("GPIO interrupt test");
    2a56:	f002 f911 	bl	4c7c <puts>

  /* Check interrupt configurations */
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2a5a:	4b19      	ldr	r3, [pc, #100]	; (2ac0 <gpio_interrupt_test+0xc8>)
    2a5c:	429c      	cmp	r4, r3
    2a5e:	f000 82b3 	beq.w	2fc8 <gpio_interrupt_test+0x5d0>
      puts("Interrupt PORT0_ALL_IRQn not available.");
      return_val =1;
      }
    NVIC_DisableIRQ(PORT0_ALL_IRQn);
    }
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    2a62:	4b1b      	ldr	r3, [pc, #108]	; (2ad0 <gpio_interrupt_test+0xd8>)
    2a64:	429c      	cmp	r4, r3
    2a66:	f000 82a3 	beq.w	2fb0 <gpio_interrupt_test+0x5b8>
      puts("Interrupt PORT1_ALL_IRQn not available.");
      return_val =1;
      }
    NVIC_DisableIRQ(PORT1_ALL_IRQn);
    }
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2a6a:	4b1a      	ldr	r3, [pc, #104]	; (2ad4 <gpio_interrupt_test+0xdc>)
    2a6c:	429c      	cmp	r4, r3
    2a6e:	f041 81fa 	bne.w	3e66 <gpio_interrupt_test+0x146e>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2a76:	4b18      	ldr	r3, [pc, #96]	; (2ad8 <gpio_interrupt_test+0xe0>)
    2a78:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(PORT2_ALL_IRQn);
    if ((NVIC->ISER[1] & (1<<(PORT2_ALL_IRQn-32)))==0) {
    2a7a:	685b      	ldr	r3, [r3, #4]
    2a7c:	0559      	lsls	r1, r3, #21
    2a7e:	f140 82c4 	bpl.w	300a <gpio_interrupt_test+0x612>
  int return_val=0;
    2a82:	9503      	str	r5, [sp, #12]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2a88:	4b13      	ldr	r3, [pc, #76]	; (2ad8 <gpio_interrupt_test+0xe0>)
    2a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2a92:	4b11      	ldr	r3, [pc, #68]	; (2ad8 <gpio_interrupt_test+0xe0>)
    2a94:	601a      	str	r2, [r3, #0]
      return_val =1;
      }
    NVIC_DisableIRQ(PORT3_ALL_IRQn);
    }
  NVIC_EnableIRQ(PORT0_15_IRQn);
  if ((NVIC->ISER[0] & 0x80000000U)==0) {
    2a96:	681b      	ldr	r3, [r3, #0]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	f281 816c 	bge.w	3d76 <gpio_interrupt_test+0x137e>
  int test_individual_irq = 1;  /* Test individual IRQ in GPIO #0 by default */
    2a9e:	2301      	movs	r3, #1
    2aa0:	9302      	str	r3, [sp, #8]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    test_individual_irq = 0;
    }
  NVIC_DisableIRQ(PORT0_15_IRQn);

  /* Start test loop */
  for (irq_num = 0 ; irq_num <16; irq_num ++) {
    2aa6:	2500      	movs	r5, #0
    2aa8:	4b0b      	ldr	r3, [pc, #44]	; (2ad8 <gpio_interrupt_test+0xe0>)
    2aaa:	4f0c      	ldr	r7, [pc, #48]	; (2adc <gpio_interrupt_test+0xe4>)
    2aac:	f8df b030 	ldr.w	fp, [pc, #48]	; 2ae0 <gpio_interrupt_test+0xe8>
    2ab0:	f8df a030 	ldr.w	sl, [pc, #48]	; 2ae4 <gpio_interrupt_test+0xec>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
        gpio2_irq_occurred   = 0;
        /* Should not trigger IRQ yet because signal is low */
        if (gpio2_irq_occurred!=0) { err_code |= (1<<26);}
        /* falling edge - but IRQ is disabled */
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    2ab4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 2ad4 <gpio_interrupt_test+0xdc>
    2ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    2abc:	46a8      	mov	r8, r5
    2abe:	e019      	b.n	2af4 <gpio_interrupt_test+0xfc>
    2ac0:	40010000 	.word	0x40010000
    2ac4:	ffff000f 	.word	0xffff000f
    2ac8:	20000078 	.word	0x20000078
    2acc:	000062ac 	.word	0x000062ac
    2ad0:	40011000 	.word	0x40011000
    2ad4:	40012000 	.word	0x40012000
    2ad8:	e000e100 	.word	0xe000e100
    2adc:	200000a8 	.word	0x200000a8
    2ae0:	200000ac 	.word	0x200000ac
    2ae4:	20000090 	.word	0x20000090
  for (irq_num = 0 ; irq_num <16; irq_num ++) {
    2ae8:	f108 0801 	add.w	r8, r8, #1
    2aec:	f1b8 0f10 	cmp.w	r8, #16
    2af0:	f000 822a 	beq.w	2f48 <gpio_interrupt_test+0x550>
    if (((gpio_datamask>>irq_num) & 0x1)!=0) {
    2af4:	9b01      	ldr	r3, [sp, #4]
    2af6:	fa23 f308 	lsr.w	r3, r3, r8
    2afa:	07db      	lsls	r3, r3, #31
    2afc:	d5f4      	bpl.n	2ae8 <gpio_interrupt_test+0xf0>
      gpio0_irq_occurred = 0;
    2afe:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    2b00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->INTCLEAR     = 0x0000FFFF;
    2b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
      gpio0_irq_level_irq = 1;
    2b08:	2101      	movs	r1, #1
      gpio3_irq_occurred = 0;
    2b0a:	4ebc      	ldr	r6, [pc, #752]	; (2dfc <gpio_interrupt_test+0x404>)
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    2b0c:	6265      	str	r5, [r4, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;
    2b0e:	6365      	str	r5, [r4, #52]	; 0x34
      CM3DS_MPS2_GPIO->INTTYPECLR   = 0xFFFFFFFF;
    2b10:	62e5      	str	r5, [r4, #44]	; 0x2c
      CM3DS_MPS2_GPIO->INTCLEAR     = 0x0000FFFF;
    2b12:	63a3      	str	r3, [r4, #56]	; 0x38
      CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
    2b14:	6165      	str	r5, [r4, #20]
      gpio0_irq_occurred = 0;
    2b16:	603a      	str	r2, [r7, #0]
      gpio1_irq_occurred = 0;
    2b18:	f8cb 2000 	str.w	r2, [fp]
      gpio2_irq_occurred = 0;
    2b1c:	f8ca 2000 	str.w	r2, [sl]
      gpio3_irq_occurred = 0;
    2b20:	6032      	str	r2, [r6, #0]
      gpio0_irq_expected = 0;
    2b22:	4eb7      	ldr	r6, [pc, #732]	; (2e00 <gpio_interrupt_test+0x408>)
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2b24:	48b7      	ldr	r0, [pc, #732]	; (2e04 <gpio_interrupt_test+0x40c>)
      gpio0_irq_expected = 0;
    2b26:	6032      	str	r2, [r6, #0]
      gpio1_irq_expected = 0;
    2b28:	4eb7      	ldr	r6, [pc, #732]	; (2e08 <gpio_interrupt_test+0x410>)
      multi_irq_test = 0;
    2b2a:	f8df e300 	ldr.w	lr, [pc, #768]	; 2e2c <gpio_interrupt_test+0x434>
      gpio1_irq_expected = 0;
    2b2e:	6032      	str	r2, [r6, #0]
      gpio2_irq_expected = 0;
    2b30:	4eb6      	ldr	r6, [pc, #728]	; (2e0c <gpio_interrupt_test+0x414>)
      irq_mask                 = 1<<irq_num;
    2b32:	fa01 f308 	lsl.w	r3, r1, r8
      gpio2_irq_expected = 0;
    2b36:	6032      	str	r2, [r6, #0]
      gpio3_irq_expected = 0;
    2b38:	4eb5      	ldr	r6, [pc, #724]	; (2e10 <gpio_interrupt_test+0x418>)
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2b3a:	4284      	cmp	r4, r0
      gpio3_irq_expected = 0;
    2b3c:	6032      	str	r2, [r6, #0]
      gpio0_irq_level_irq = 1;
    2b3e:	4eb5      	ldr	r6, [pc, #724]	; (2e14 <gpio_interrupt_test+0x41c>)
    2b40:	6031      	str	r1, [r6, #0]
      gpio1_irq_level_irq = 1;
    2b42:	4eb5      	ldr	r6, [pc, #724]	; (2e18 <gpio_interrupt_test+0x420>)
    2b44:	6031      	str	r1, [r6, #0]
      gpio2_irq_level_irq = 1;
    2b46:	4eb5      	ldr	r6, [pc, #724]	; (2e1c <gpio_interrupt_test+0x424>)
    2b48:	6031      	str	r1, [r6, #0]
      gpio3_irq_level_irq = 1;
    2b4a:	4eb5      	ldr	r6, [pc, #724]	; (2e20 <gpio_interrupt_test+0x428>)
    2b4c:	6031      	str	r1, [r6, #0]
      multi_irq_test = 0;
    2b4e:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->DATAOUT     = 0xFFFFFFFF; /* Inactive */
    2b52:	6065      	str	r5, [r4, #4]
    2b54:	ea6f 0203 	mvn.w	r2, r3
      CM3DS_MPS2_GPIO->INTTYPECLR  = 0xFFFFFFFF; /* Low level */
    2b58:	62e5      	str	r5, [r4, #44]	; 0x2c
      CM3DS_MPS2_GPIO->INTPOLCLR   = 0xFFFFFFFF; /* Low level */
    2b5a:	6365      	str	r5, [r4, #52]	; 0x34
      CM3DS_MPS2_GPIO->OUTENABLESET = irq_mask;
    2b5c:	6123      	str	r3, [r4, #16]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2b5e:	f000 84d9 	beq.w	3514 <gpio_interrupt_test+0xb1c>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    2b62:	48b0      	ldr	r0, [pc, #704]	; (2e24 <gpio_interrupt_test+0x42c>)
    2b64:	4284      	cmp	r4, r0
    2b66:	f000 846a 	beq.w	343e <gpio_interrupt_test+0xa46>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2b6a:	454c      	cmp	r4, r9
    2b6c:	f040 8355 	bne.w	321a <gpio_interrupt_test+0x822>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2b70:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2b74:	48ac      	ldr	r0, [pc, #688]	; (2e28 <gpio_interrupt_test+0x430>)
        gpio2_irq_expected   = irq_mask;
    2b76:	4ea5      	ldr	r6, [pc, #660]	; (2e0c <gpio_interrupt_test+0x414>)
    2b78:	6033      	str	r3, [r6, #0]
    2b7a:	6045      	str	r5, [r0, #4]
      gpio0_irq_level_irq    = 1;
    2b7c:	48a5      	ldr	r0, [pc, #660]	; (2e14 <gpio_interrupt_test+0x41c>)
    2b7e:	6001      	str	r1, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    2b80:	6223      	str	r3, [r4, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2b82:	454c      	cmp	r4, r9
    2b84:	f040 8356 	bne.w	3234 <gpio_interrupt_test+0x83c>
        if (gpio2_irq_occurred!=0) { err_code |= (1<<0);}
    2b88:	f8da 1000 	ldr.w	r1, [sl]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    2b8c:	6062      	str	r2, [r4, #4]
        if (gpio2_irq_occurred!=0) { err_code |= (1<<0);}
    2b8e:	3100      	adds	r1, #0
    2b90:	bf18      	it	ne
    2b92:	2101      	movne	r1, #1
    2b94:	f3bf 8f6f 	isb	sy
    2b98:	f3bf 8f6f 	isb	sy
    2b9c:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred==0) { err_code |= (1<<1);}
    2ba0:	f8da 0000 	ldr.w	r0, [sl]
    2ba4:	b908      	cbnz	r0, 2baa <gpio_interrupt_test+0x1b2>
    2ba6:	f041 0102 	orr.w	r1, r1, #2
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    2baa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    2bae:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    2bb0:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
      gpio0_irq_expected     = 0;
    2bb4:	4d92      	ldr	r5, [pc, #584]	; (2e00 <gpio_interrupt_test+0x408>)
    2bb6:	6028      	str	r0, [r5, #0]
      gpio1_irq_expected     = 0;
    2bb8:	4d93      	ldr	r5, [pc, #588]	; (2e08 <gpio_interrupt_test+0x410>)
    2bba:	6028      	str	r0, [r5, #0]
      gpio2_irq_expected     = 0;
    2bbc:	4d93      	ldr	r5, [pc, #588]	; (2e0c <gpio_interrupt_test+0x414>)
    2bbe:	6028      	str	r0, [r5, #0]
      gpio3_irq_expected     = 0;
    2bc0:	4d93      	ldr	r5, [pc, #588]	; (2e10 <gpio_interrupt_test+0x418>)
    2bc2:	6028      	str	r0, [r5, #0]
      gpio3_irq_occurred     = 0;
    2bc4:	4d8d      	ldr	r5, [pc, #564]	; (2dfc <gpio_interrupt_test+0x404>)
      gpio0_irq_occurred     = 0;
    2bc6:	6038      	str	r0, [r7, #0]
      gpio1_irq_occurred     = 0;
    2bc8:	f8cb 0000 	str.w	r0, [fp]
      gpio2_irq_occurred     = 0;
    2bcc:	f8ca 0000 	str.w	r0, [sl]
      gpio3_irq_occurred     = 0;
    2bd0:	6028      	str	r0, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    2bd2:	f8c9 2004 	str.w	r2, [r9, #4]
    2bd6:	f3bf 8f6f 	isb	sy
    2bda:	f3bf 8f6f 	isb	sy
    2bde:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred!=0) { err_code |= (1<<2);}
    2be2:	f8da 0000 	ldr.w	r0, [sl]
    2be6:	b108      	cbz	r0, 2bec <gpio_interrupt_test+0x1f4>
    2be8:	f041 0104 	orr.w	r1, r1, #4
        CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    2bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2bf0:	f8c9 0004 	str.w	r0, [r9, #4]
    2bf4:	f3bf 8f6f 	isb	sy
    2bf8:	f3bf 8f6f 	isb	sy
    2bfc:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<3);}
    2c00:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    2c04:	b108      	cbz	r0, 2c0a <gpio_interrupt_test+0x212>
    2c06:	f041 0108 	orr.w	r1, r1, #8
        gpio2_irq_occurred   = 0;
    2c0a:	f04f 0c00 	mov.w	ip, #0
    2c0e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2c12:	4885      	ldr	r0, [pc, #532]	; (2e28 <gpio_interrupt_test+0x430>)
        gpio2_irq_expected   = irq_mask;
    2c14:	4e7d      	ldr	r6, [pc, #500]	; (2e0c <gpio_interrupt_test+0x414>)
    2c16:	6033      	str	r3, [r6, #0]
        gpio2_irq_occurred   = 0;
    2c18:	f8ca c000 	str.w	ip, [sl]
    2c1c:	6045      	str	r5, [r0, #4]
      multi_irq_test = 3; /* IRQ trigger 3 times */
    2c1e:	2003      	movs	r0, #3
    2c20:	f8ce 0000 	str.w	r0, [lr]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    2c24:	6223      	str	r3, [r4, #32]
      CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    2c26:	6062      	str	r2, [r4, #4]
    2c28:	f3bf 8f6f 	isb	sy
    2c2c:	f3bf 8f6f 	isb	sy
    2c30:	f3bf 8f6f 	isb	sy
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2c34:	4a73      	ldr	r2, [pc, #460]	; (2e04 <gpio_interrupt_test+0x40c>)
    2c36:	4294      	cmp	r4, r2
    2c38:	f000 834a 	beq.w	32d0 <gpio_interrupt_test+0x8d8>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    2c3c:	4a79      	ldr	r2, [pc, #484]	; (2e24 <gpio_interrupt_test+0x42c>)
    2c3e:	4294      	cmp	r4, r2
    2c40:	f000 839a 	beq.w	3378 <gpio_interrupt_test+0x980>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2c44:	454c      	cmp	r4, r9
    2c46:	f040 8734 	bne.w	3ab2 <gpio_interrupt_test+0x10ba>
        if (gpio2_irq_occurred!=3) { err_code |= (1<<6);}
    2c4a:	f8da 2000 	ldr.w	r2, [sl]
    2c4e:	2a03      	cmp	r2, #3
    2c50:	d001      	beq.n	2c56 <gpio_interrupt_test+0x25e>
    2c52:	f041 0140 	orr.w	r1, r1, #64	; 0x40
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    2c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      multi_irq_test = 0; /* Disable multiple IRQ test */
    2c5a:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    2c5c:	f8c9 0004 	str.w	r0, [r9, #4]
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    2c60:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    2c64:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET = irq_mask; /* High level */
    2c68:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    2c6c:	f8c9 2004 	str.w	r2, [r9, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2c70:	454c      	cmp	r4, r9
    2c72:	f040 8732 	bne.w	3ada <gpio_interrupt_test+0x10e2>
        gpio2_irq_occurred   = 0;
    2c76:	2200      	movs	r2, #0
        gpio2_irq_expected   = irq_mask;
    2c78:	4864      	ldr	r0, [pc, #400]	; (2e0c <gpio_interrupt_test+0x414>)
    2c7a:	6003      	str	r3, [r0, #0]
        gpio2_irq_occurred   = 0;
    2c7c:	f8ca 2000 	str.w	r2, [sl]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    2c80:	6223      	str	r3, [r4, #32]
        if (gpio2_irq_occurred!=0) { err_code |= (1<<7);}
    2c82:	f8da 2000 	ldr.w	r2, [sl]
    2c86:	b10a      	cbz	r2, 2c8c <gpio_interrupt_test+0x294>
    2c88:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    2c8c:	f8c9 3004 	str.w	r3, [r9, #4]
    2c90:	f3bf 8f6f 	isb	sy
    2c94:	f3bf 8f6f 	isb	sy
    2c98:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred==0) { err_code |= (1<<8);}
    2c9c:	f8da 2000 	ldr.w	r2, [sl]
    2ca0:	b90a      	cbnz	r2, 2ca6 <gpio_interrupt_test+0x2ae>
    2ca2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    2ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    2caa:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    2cac:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
      gpio0_irq_expected     = 0;
    2cb0:	4853      	ldr	r0, [pc, #332]	; (2e00 <gpio_interrupt_test+0x408>)
    2cb2:	6002      	str	r2, [r0, #0]
      gpio1_irq_expected     = 0;
    2cb4:	4854      	ldr	r0, [pc, #336]	; (2e08 <gpio_interrupt_test+0x410>)
    2cb6:	6002      	str	r2, [r0, #0]
      gpio2_irq_expected     = 0;
    2cb8:	4854      	ldr	r0, [pc, #336]	; (2e0c <gpio_interrupt_test+0x414>)
    2cba:	6002      	str	r2, [r0, #0]
      gpio3_irq_expected     = 0;
    2cbc:	4854      	ldr	r0, [pc, #336]	; (2e10 <gpio_interrupt_test+0x418>)
    2cbe:	6002      	str	r2, [r0, #0]
      gpio3_irq_occurred     = 0;
    2cc0:	484e      	ldr	r0, [pc, #312]	; (2dfc <gpio_interrupt_test+0x404>)
      gpio0_irq_occurred     = 0;
    2cc2:	603a      	str	r2, [r7, #0]
      gpio1_irq_occurred     = 0;
    2cc4:	f8cb 2000 	str.w	r2, [fp]
      gpio2_irq_occurred     = 0;
    2cc8:	f8ca 2000 	str.w	r2, [sl]
      gpio3_irq_occurred     = 0;
    2ccc:	6002      	str	r2, [r0, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    2cce:	f8c9 3004 	str.w	r3, [r9, #4]
    2cd2:	f3bf 8f6f 	isb	sy
    2cd6:	f3bf 8f6f 	isb	sy
    2cda:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred!=0) { err_code |= (1<<9);}
    2cde:	f8da 2000 	ldr.w	r2, [sl]
    2ce2:	b10a      	cbz	r2, 2ce8 <gpio_interrupt_test+0x2f0>
    2ce4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    2ce8:	2200      	movs	r2, #0
    2cea:	f8c9 2004 	str.w	r2, [r9, #4]
    2cee:	f3bf 8f6f 	isb	sy
    2cf2:	f3bf 8f6f 	isb	sy
    2cf6:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<10);}
    2cfa:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    2cfe:	b10a      	cbz	r2, 2d04 <gpio_interrupt_test+0x30c>
    2d00:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
        gpio2_irq_occurred   = 0;
    2d04:	2500      	movs	r5, #0
    2d06:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2d0a:	4a47      	ldr	r2, [pc, #284]	; (2e28 <gpio_interrupt_test+0x430>)
        gpio2_irq_expected   = irq_mask;
    2d0c:	4e3f      	ldr	r6, [pc, #252]	; (2e0c <gpio_interrupt_test+0x414>)
    2d0e:	6033      	str	r3, [r6, #0]
        gpio2_irq_occurred   = 0;
    2d10:	f8ca 5000 	str.w	r5, [sl]
    2d14:	6050      	str	r0, [r2, #4]
      multi_irq_test = 3; /* IRQ trigger 3 times */
    2d16:	2203      	movs	r2, #3
    2d18:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    2d1c:	6223      	str	r3, [r4, #32]
      CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    2d1e:	6063      	str	r3, [r4, #4]
    2d20:	f3bf 8f6f 	isb	sy
    2d24:	f3bf 8f6f 	isb	sy
    2d28:	f3bf 8f6f 	isb	sy
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2d2c:	4a35      	ldr	r2, [pc, #212]	; (2e04 <gpio_interrupt_test+0x40c>)
    2d2e:	4294      	cmp	r4, r2
    2d30:	f000 8190 	beq.w	3054 <gpio_interrupt_test+0x65c>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    2d34:	4a3b      	ldr	r2, [pc, #236]	; (2e24 <gpio_interrupt_test+0x42c>)
    2d36:	4294      	cmp	r4, r2
    2d38:	f000 8442 	beq.w	35c0 <gpio_interrupt_test+0xbc8>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2d3c:	454c      	cmp	r4, r9
    2d3e:	f040 8555 	bne.w	37ec <gpio_interrupt_test+0xdf4>
        if (gpio2_irq_occurred!=3) { err_code |= (1<<13);}
    2d42:	f8da 2000 	ldr.w	r2, [sl]
    2d46:	2a03      	cmp	r2, #3
    2d48:	d001      	beq.n	2d4e <gpio_interrupt_test+0x356>
    2d4a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    2d4e:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    2d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    2d54:	f8c9 2004 	str.w	r2, [r9, #4]
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    2d58:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    2d5c:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET    = irq_mask; /* Rising edge */
    2d60:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Rising edge */
    2d64:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000; /* Inactive */
    2d68:	f8c9 2004 	str.w	r2, [r9, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    2d6c:	454c      	cmp	r4, r9
    2d6e:	f040 8552 	bne.w	3816 <gpio_interrupt_test+0xe1e>
        gpio2_irq_occurred   = 0;
    2d72:	2200      	movs	r2, #0
        gpio2_irq_expected   = irq_mask;
    2d74:	4825      	ldr	r0, [pc, #148]	; (2e0c <gpio_interrupt_test+0x414>)
    2d76:	6003      	str	r3, [r0, #0]
        gpio2_irq_level_irq  = 0;
    2d78:	4828      	ldr	r0, [pc, #160]	; (2e1c <gpio_interrupt_test+0x424>)
        gpio2_irq_occurred   = 0;
    2d7a:	f8ca 2000 	str.w	r2, [sl]
        gpio2_irq_level_irq  = 0;
    2d7e:	6002      	str	r2, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    2d80:	6223      	str	r3, [r4, #32]
        if (gpio2_irq_occurred!=0) { err_code |= (1<<14);}
    2d82:	f8da 2000 	ldr.w	r2, [sl]
    2d86:	b10a      	cbz	r2, 2d8c <gpio_interrupt_test+0x394>
    2d88:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    2d8c:	f8c9 3004 	str.w	r3, [r9, #4]
    2d90:	f3bf 8f6f 	isb	sy
    2d94:	f3bf 8f6f 	isb	sy
    2d98:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred==0) { err_code |= (1<<15);}
    2d9c:	f8da 2000 	ldr.w	r2, [sl]
    2da0:	b90a      	cbnz	r2, 2da6 <gpio_interrupt_test+0x3ae>
    2da2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
        gpio2_irq_occurred   = 0;
    2da6:	2200      	movs	r2, #0
    2da8:	f8ca 2000 	str.w	r2, [sl]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    2dac:	f8c9 2004 	str.w	r2, [r9, #4]
    2db0:	f3bf 8f6f 	isb	sy
    2db4:	f3bf 8f6f 	isb	sy
    2db8:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred!=0) { err_code |= (1<<16);}
    2dbc:	f8da 2000 	ldr.w	r2, [sl]
    2dc0:	b10a      	cbz	r2, 2dc6 <gpio_interrupt_test+0x3ce>
    2dc2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    2dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2dca:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
        gpio2_irq_occurred   = 0;
    2dce:	2200      	movs	r2, #0
    2dd0:	f8ca 2000 	str.w	r2, [sl]
        if (gpio2_irq_occurred!=0) { err_code |= (1<<17);}
    2dd4:	f8da 2000 	ldr.w	r2, [sl]
    2dd8:	b10a      	cbz	r2, 2dde <gpio_interrupt_test+0x3e6>
    2dda:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    2dde:	f8c9 3004 	str.w	r3, [r9, #4]
    2de2:	f3bf 8f6f 	isb	sy
    2de6:	f3bf 8f6f 	isb	sy
    2dea:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred!=0) { err_code |= (1<<18);}
    2dee:	f8da 2000 	ldr.w	r2, [sl]
    2df2:	b1ea      	cbz	r2, 2e30 <gpio_interrupt_test+0x438>
    2df4:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    2df8:	e01a      	b.n	2e30 <gpio_interrupt_test+0x438>
    2dfa:	bf00      	nop
    2dfc:	20000094 	.word	0x20000094
    2e00:	20000074 	.word	0x20000074
    2e04:	40010000 	.word	0x40010000
    2e08:	2000008c 	.word	0x2000008c
    2e0c:	20000098 	.word	0x20000098
    2e10:	20000088 	.word	0x20000088
    2e14:	200000b0 	.word	0x200000b0
    2e18:	200000b8 	.word	0x200000b8
    2e1c:	2000009c 	.word	0x2000009c
    2e20:	200000b4 	.word	0x200000b4
    2e24:	40011000 	.word	0x40011000
    2e28:	e000e100 	.word	0xe000e100
    2e2c:	200000a4 	.word	0x200000a4
        gpio2_irq_occurred   = 0;
    2e30:	2200      	movs	r2, #0
    2e32:	f8ca 2000 	str.w	r2, [sl]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    2e36:	f8c9 2004 	str.w	r2, [r9, #4]
    2e3a:	f3bf 8f6f 	isb	sy
    2e3e:	f3bf 8f6f 	isb	sy
    2e42:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred!=0) { err_code |= (1<<19);}
    2e46:	f8da 2000 	ldr.w	r2, [sl]
    2e4a:	b10a      	cbz	r2, 2e50 <gpio_interrupt_test+0x458>
    2e4c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    2e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e54:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;        /* Falling edge */
    2e58:	f8c9 2034 	str.w	r2, [r9, #52]	; 0x34
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Falling edge */
    2e5c:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = irq_mask; /* Inactive */
    2e60:	f8c9 3004 	str.w	r3, [r9, #4]
        gpio2_irq_occurred   = 0;
    2e64:	2200      	movs	r2, #0
    2e66:	f44f 6580 	mov.w	r5, #1024	; 0x400
        gpio2_irq_expected   = irq_mask;
    2e6a:	4e6b      	ldr	r6, [pc, #428]	; (3018 <gpio_interrupt_test+0x620>)
    2e6c:	486b      	ldr	r0, [pc, #428]	; (301c <gpio_interrupt_test+0x624>)
    2e6e:	6033      	str	r3, [r6, #0]
        gpio2_irq_level_irq  = 0;
    2e70:	4e6b      	ldr	r6, [pc, #428]	; (3020 <gpio_interrupt_test+0x628>)
        gpio2_irq_occurred   = 0;
    2e72:	f8ca 2000 	str.w	r2, [sl]
        gpio2_irq_level_irq  = 0;
    2e76:	6032      	str	r2, [r6, #0]
    2e78:	6045      	str	r5, [r0, #4]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    2e7a:	f8c9 3020 	str.w	r3, [r9, #32]
        if (gpio2_irq_occurred!=0) { err_code |= (1<<23);}
    2e7e:	f8da 2000 	ldr.w	r2, [sl]
    2e82:	b10a      	cbz	r2, 2e88 <gpio_interrupt_test+0x490>
    2e84:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    2e88:	2200      	movs	r2, #0
    2e8a:	f8c9 2004 	str.w	r2, [r9, #4]
    2e8e:	f3bf 8f6f 	isb	sy
    2e92:	f3bf 8f6f 	isb	sy
    2e96:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred==0) { err_code |= (1<<24);}
    2e9a:	f8da 2000 	ldr.w	r2, [sl]
    2e9e:	b90a      	cbnz	r2, 2ea4 <gpio_interrupt_test+0x4ac>
    2ea0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
        gpio2_irq_occurred   = 0;
    2ea4:	2200      	movs	r2, #0
    2ea6:	f8ca 2000 	str.w	r2, [sl]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    2eaa:	f8c9 3004 	str.w	r3, [r9, #4]
    2eae:	f3bf 8f6f 	isb	sy
    2eb2:	f3bf 8f6f 	isb	sy
    2eb6:	f3bf 8f6f 	isb	sy
        if (gpio2_irq_occurred!=0) { err_code |= (1<<25);}
    2eba:	f8da 2000 	ldr.w	r2, [sl]
    2ebe:	b10a      	cbz	r2, 2ec4 <gpio_interrupt_test+0x4cc>
    2ec0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    2ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ec8:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
        gpio2_irq_occurred   = 0;
    2ecc:	2200      	movs	r2, #0
    2ece:	f8ca 2000 	str.w	r2, [sl]
        if (gpio2_irq_occurred!=0) { err_code |= (1<<26);}
    2ed2:	f8da 2000 	ldr.w	r2, [sl]
    2ed6:	b10a      	cbz	r2, 2edc <gpio_interrupt_test+0x4e4>
    2ed8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    2edc:	2200      	movs	r2, #0
    2ede:	f8c9 2004 	str.w	r2, [r9, #4]
    2ee2:	f3bf 8f6f 	isb	sy
    2ee6:	f3bf 8f6f 	isb	sy
    2eea:	f3bf 8f6f 	isb	sy
        medium_delay();
        if (gpio2_irq_occurred!=0) { err_code |= (1<<27);}
    2eee:	f8da 2000 	ldr.w	r2, [sl]
    2ef2:	b10a      	cbz	r2, 2ef8 <gpio_interrupt_test+0x500>
    2ef4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
        gpio2_irq_occurred   = 0;
    2ef8:	2200      	movs	r2, #0
    2efa:	f8ca 2000 	str.w	r2, [sl]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    2efe:	f8c9 3004 	str.w	r3, [r9, #4]
    2f02:	f3bf 8f6f 	isb	sy
    2f06:	f3bf 8f6f 	isb	sy
    2f0a:	f3bf 8f6f 	isb	sy
        medium_delay();
        if (gpio2_irq_occurred!=0) { err_code |= (1<<28);}
    2f0e:	f8da 3000 	ldr.w	r3, [sl]
    2f12:	2b00      	cmp	r3, #0
    2f14:	f000 817d 	beq.w	3212 <gpio_interrupt_test+0x81a>
        medium_delay();
        if (gpio3_irq_occurred!=0) { err_code |= (1<<27);}
        gpio3_irq_occurred   = 0;
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
        medium_delay();
        if (gpio3_irq_occurred!=0) { err_code |= (1<<28);}
    2f18:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
        gpio0_irq_expected      = 0;
        gpio0_irq_occurred      = 0;
        }

        if (err_code != 0) {
        printf ("ERROR : Interrupt failed (0x%x)\n", err_code);
    2f1c:	4841      	ldr	r0, [pc, #260]	; (3024 <gpio_interrupt_test+0x62c>)
    2f1e:	f001 fe39 	bl	4b94 <iprintf>
        return_val =1;
    2f22:	2301      	movs	r3, #1
    2f24:	9303      	str	r3, [sp, #12]
        err_code = 0;
        }

      /* Cleaning up */
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    2f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->INTTYPECLR   = 0xFFFFFFFF;
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;
      CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000;
    2f2a:	2100      	movs	r1, #0
      CM3DS_MPS2_GPIO->INTCLEAR     = 0x0000FFFF;
    2f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  for (irq_num = 0 ; irq_num <16; irq_num ++) {
    2f30:	f108 0801 	add.w	r8, r8, #1
    2f34:	f1b8 0f10 	cmp.w	r8, #16
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    2f38:	6263      	str	r3, [r4, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTTYPECLR   = 0xFFFFFFFF;
    2f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;
    2f3c:	6363      	str	r3, [r4, #52]	; 0x34
      CM3DS_MPS2_GPIO->OUTENABLECLR = 0xFFFFFFFF;
    2f3e:	6163      	str	r3, [r4, #20]
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000;
    2f40:	6061      	str	r1, [r4, #4]
      CM3DS_MPS2_GPIO->INTCLEAR     = 0x0000FFFF;
    2f42:	63a2      	str	r2, [r4, #56]	; 0x38
  for (irq_num = 0 ; irq_num <16; irq_num ++) {
    2f44:	f47f add6 	bne.w	2af4 <gpio_interrupt_test+0xfc>
      } /* end if test required */
    }   /* end for irq_num */


  /* Clean up */
  gpio0_irq_occurred = 0;
    2f48:	2100      	movs	r1, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2f4a:	2240      	movs	r2, #64	; 0x40
    2f4c:	2680      	movs	r6, #128	; 0x80
    2f4e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2f52:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2f56:	6039      	str	r1, [r7, #0]
  gpio1_irq_occurred = 0;
  gpio2_irq_occurred = 0;
  gpio3_irq_occurred = 0;
    2f58:	4b33      	ldr	r3, [pc, #204]	; (3028 <gpio_interrupt_test+0x630>)
  gpio0_irq_expected = 0;
    2f5a:	4f34      	ldr	r7, [pc, #208]	; (302c <gpio_interrupt_test+0x634>)
  gpio1_irq_occurred = 0;
    2f5c:	f8cb 1000 	str.w	r1, [fp]
  gpio2_irq_occurred = 0;
    2f60:	f8ca 1000 	str.w	r1, [sl]
  gpio3_irq_occurred = 0;
    2f64:	6019      	str	r1, [r3, #0]
  gpio0_irq_expected = 0;
    2f66:	6039      	str	r1, [r7, #0]
  gpio1_irq_expected = 0;
    2f68:	4f31      	ldr	r7, [pc, #196]	; (3030 <gpio_interrupt_test+0x638>)

  NVIC_DisableIRQ(PORT0_ALL_IRQn);
  NVIC_DisableIRQ(PORT1_ALL_IRQn);
  NVIC_DisableIRQ(PORT2_ALL_IRQn);
  NVIC_DisableIRQ(PORT3_ALL_IRQn);
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2f6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 3050 <gpio_interrupt_test+0x658>
  gpio1_irq_expected = 0;
    2f6e:	6039      	str	r1, [r7, #0]
  gpio2_irq_expected = 0;
    2f70:	4f29      	ldr	r7, [pc, #164]	; (3018 <gpio_interrupt_test+0x620>)
    2f72:	4b2a      	ldr	r3, [pc, #168]	; (301c <gpio_interrupt_test+0x624>)
    2f74:	6039      	str	r1, [r7, #0]
  gpio3_irq_expected = 0;
    2f76:	4f2f      	ldr	r7, [pc, #188]	; (3034 <gpio_interrupt_test+0x63c>)
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2f78:	4564      	cmp	r4, ip
  gpio3_irq_expected = 0;
    2f7a:	6039      	str	r1, [r7, #0]
    2f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2f80:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
    2f84:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
    2f88:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    2f8c:	f000 86fa 	beq.w	3d84 <gpio_interrupt_test+0x138c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    2f90:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    2f94:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    2f98:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
  if (err_code != 0) {
    printf ("ERROR : Interrupt failed (0x%x)\n", err_code);
    return_val =1;
    err_code = 0;
    }
    else puts("Interrupt Test Passed");
    2f9c:	4826      	ldr	r0, [pc, #152]	; (3038 <gpio_interrupt_test+0x640>)
    2f9e:	f001 fe6d 	bl	4c7c <puts>
    2fa2:	9803      	ldr	r0, [sp, #12]

  return(return_val);
}
    2fa4:	b005      	add	sp, #20
    2fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    gpio_datamask        = 0xFFFF7FFE;
    2faa:	4b24      	ldr	r3, [pc, #144]	; (303c <gpio_interrupt_test+0x644>)
    2fac:	9301      	str	r3, [sp, #4]
    2fae:	e53f      	b.n	2a30 <gpio_interrupt_test+0x38>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2fb0:	2280      	movs	r2, #128	; 0x80
    2fb2:	4b1a      	ldr	r3, [pc, #104]	; (301c <gpio_interrupt_test+0x624>)
    2fb4:	601a      	str	r2, [r3, #0]
    if ((NVIC->ISER[0] & (1<<(PORT1_ALL_IRQn)))==0) {
    2fb6:	681b      	ldr	r3, [r3, #0]
    2fb8:	0618      	lsls	r0, r3, #24
    2fba:	d51a      	bpl.n	2ff2 <gpio_interrupt_test+0x5fa>
  int return_val=0;
    2fbc:	9503      	str	r5, [sp, #12]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2fbe:	2280      	movs	r2, #128	; 0x80
    2fc0:	4b16      	ldr	r3, [pc, #88]	; (301c <gpio_interrupt_test+0x624>)
    2fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2fc6:	e562      	b.n	2a8e <gpio_interrupt_test+0x96>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2fc8:	2240      	movs	r2, #64	; 0x40
    2fca:	4b14      	ldr	r3, [pc, #80]	; (301c <gpio_interrupt_test+0x624>)
    2fcc:	601a      	str	r2, [r3, #0]
    if ((NVIC->ISER[0] & (1<<(PORT0_ALL_IRQn)))==0) {
    2fce:	681b      	ldr	r3, [r3, #0]
    2fd0:	065e      	lsls	r6, r3, #25
    2fd2:	d514      	bpl.n	2ffe <gpio_interrupt_test+0x606>
  int return_val=0;
    2fd4:	9503      	str	r5, [sp, #12]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    2fd6:	2240      	movs	r2, #64	; 0x40
    2fd8:	4b10      	ldr	r3, [pc, #64]	; (301c <gpio_interrupt_test+0x624>)
    2fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2fde:	e556      	b.n	2a8e <gpio_interrupt_test+0x96>
    puts ("ERROR: Input parameter invalid in function 'gpio_interrupt_test'.");
    2fe0:	4817      	ldr	r0, [pc, #92]	; (3040 <gpio_interrupt_test+0x648>)
    2fe2:	f001 fe4b 	bl	4c7c <puts>
    return 1;
    2fe6:	2301      	movs	r3, #1
    2fe8:	4618      	mov	r0, r3
    2fea:	9303      	str	r3, [sp, #12]
}
    2fec:	b005      	add	sp, #20
    2fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      puts("Interrupt PORT1_ALL_IRQn not available.");
    2ff2:	4814      	ldr	r0, [pc, #80]	; (3044 <gpio_interrupt_test+0x64c>)
    2ff4:	f001 fe42 	bl	4c7c <puts>
      return_val =1;
    2ff8:	2301      	movs	r3, #1
    2ffa:	9303      	str	r3, [sp, #12]
    2ffc:	e7df      	b.n	2fbe <gpio_interrupt_test+0x5c6>
      puts("Interrupt PORT0_ALL_IRQn not available.");
    2ffe:	4812      	ldr	r0, [pc, #72]	; (3048 <gpio_interrupt_test+0x650>)
    3000:	f001 fe3c 	bl	4c7c <puts>
      return_val =1;
    3004:	2301      	movs	r3, #1
    3006:	9303      	str	r3, [sp, #12]
    3008:	e7e5      	b.n	2fd6 <gpio_interrupt_test+0x5de>
      puts("Interrupt PORT2_ALL_IRQn not available.");
    300a:	4810      	ldr	r0, [pc, #64]	; (304c <gpio_interrupt_test+0x654>)
    300c:	f001 fe36 	bl	4c7c <puts>
      return_val =1;
    3010:	2301      	movs	r3, #1
    3012:	9303      	str	r3, [sp, #12]
    3014:	e536      	b.n	2a84 <gpio_interrupt_test+0x8c>
    3016:	bf00      	nop
    3018:	20000098 	.word	0x20000098
    301c:	e000e100 	.word	0xe000e100
    3020:	2000009c 	.word	0x2000009c
    3024:	00006360 	.word	0x00006360
    3028:	20000094 	.word	0x20000094
    302c:	20000074 	.word	0x20000074
    3030:	2000008c 	.word	0x2000008c
    3034:	20000088 	.word	0x20000088
    3038:	00006384 	.word	0x00006384
    303c:	ffff7ffe 	.word	0xffff7ffe
    3040:	00006268 	.word	0x00006268
    3044:	000062e8 	.word	0x000062e8
    3048:	000062c0 	.word	0x000062c0
    304c:	00006310 	.word	0x00006310
    3050:	40010000 	.word	0x40010000
        if (gpio0_irq_occurred!=3) { err_code |= (1<<13);}
    3054:	683a      	ldr	r2, [r7, #0]
    3056:	2a03      	cmp	r2, #3
    3058:	d001      	beq.n	305e <gpio_interrupt_test+0x666>
    305a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    305e:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    3060:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3064:	488f      	ldr	r0, [pc, #572]	; (32a4 <gpio_interrupt_test+0x8ac>)
    3066:	6042      	str	r2, [r0, #4]
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    3068:	6245      	str	r5, [r0, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    306a:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET    = irq_mask; /* Rising edge */
    306e:	6303      	str	r3, [r0, #48]	; 0x30
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Rising edge */
    3070:	6283      	str	r3, [r0, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000; /* Inactive */
    3072:	6042      	str	r2, [r0, #4]
        gpio0_irq_expected   = irq_mask;
    3074:	488c      	ldr	r0, [pc, #560]	; (32a8 <gpio_interrupt_test+0x8b0>)
    3076:	6003      	str	r3, [r0, #0]
        gpio0_irq_level_irq  = 0;
    3078:	488c      	ldr	r0, [pc, #560]	; (32ac <gpio_interrupt_test+0x8b4>)
        gpio0_irq_occurred   = 0;
    307a:	603a      	str	r2, [r7, #0]
        gpio0_irq_level_irq  = 0;
    307c:	6002      	str	r2, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    307e:	6223      	str	r3, [r4, #32]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<14);}
    3080:	683a      	ldr	r2, [r7, #0]
    3082:	b10a      	cbz	r2, 3088 <gpio_interrupt_test+0x690>
    3084:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3088:	4a86      	ldr	r2, [pc, #536]	; (32a4 <gpio_interrupt_test+0x8ac>)
    308a:	6053      	str	r3, [r2, #4]
    308c:	f3bf 8f6f 	isb	sy
    3090:	f3bf 8f6f 	isb	sy
    3094:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<15);}
    3098:	683a      	ldr	r2, [r7, #0]
    309a:	b90a      	cbnz	r2, 30a0 <gpio_interrupt_test+0x6a8>
    309c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
        gpio0_irq_occurred   = 0;
    30a0:	2200      	movs	r2, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    30a2:	4880      	ldr	r0, [pc, #512]	; (32a4 <gpio_interrupt_test+0x8ac>)
        gpio0_irq_occurred   = 0;
    30a4:	603a      	str	r2, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    30a6:	6042      	str	r2, [r0, #4]
    30a8:	f3bf 8f6f 	isb	sy
    30ac:	f3bf 8f6f 	isb	sy
    30b0:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<16);}
    30b4:	683a      	ldr	r2, [r7, #0]
    30b6:	b10a      	cbz	r2, 30bc <gpio_interrupt_test+0x6c4>
    30b8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    30bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    30c0:	4a78      	ldr	r2, [pc, #480]	; (32a4 <gpio_interrupt_test+0x8ac>)
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    30c2:	6260      	str	r0, [r4, #36]	; 0x24
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    30c4:	4294      	cmp	r4, r2
    30c6:	f000 845d 	beq.w	3984 <gpio_interrupt_test+0xf8c>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    30ca:	4a79      	ldr	r2, [pc, #484]	; (32b0 <gpio_interrupt_test+0x8b8>)
    30cc:	4294      	cmp	r4, r2
    30ce:	f000 82ba 	beq.w	3646 <gpio_interrupt_test+0xc4e>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    30d2:	454c      	cmp	r4, r9
    30d4:	f43f ae7b 	beq.w	2dce <gpio_interrupt_test+0x3d6>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    30d8:	4a76      	ldr	r2, [pc, #472]	; (32b4 <gpio_interrupt_test+0x8bc>)
    30da:	4294      	cmp	r4, r2
    30dc:	f000 83cc 	beq.w	3878 <gpio_interrupt_test+0xe80>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    30e0:	4a70      	ldr	r2, [pc, #448]	; (32a4 <gpio_interrupt_test+0x8ac>)
    30e2:	4294      	cmp	r4, r2
    30e4:	f040 8474 	bne.w	39d0 <gpio_interrupt_test+0xfd8>
    30e8:	9a02      	ldr	r2, [sp, #8]
    30ea:	2a00      	cmp	r2, #0
    30ec:	f040 8574 	bne.w	3bd8 <gpio_interrupt_test+0x11e0>
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    30f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        gpio0_irq_occurred   = 0;
    30f4:	2000      	movs	r0, #0
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    30f6:	f04f 0e40 	mov.w	lr, #64	; 0x40
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    30fa:	4a6a      	ldr	r2, [pc, #424]	; (32a4 <gpio_interrupt_test+0x8ac>)
    30fc:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 32b8 <gpio_interrupt_test+0x8c0>
    3100:	6255      	str	r5, [r2, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;        /* Falling edge */
    3102:	6355      	str	r5, [r2, #52]	; 0x34
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Falling edge */
    3104:	6293      	str	r3, [r2, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = irq_mask; /* Inactive */
    3106:	6053      	str	r3, [r2, #4]
        gpio0_irq_expected   = irq_mask;
    3108:	4a67      	ldr	r2, [pc, #412]	; (32a8 <gpio_interrupt_test+0x8b0>)
    310a:	6013      	str	r3, [r2, #0]
        gpio0_irq_level_irq  = 0;
    310c:	4a67      	ldr	r2, [pc, #412]	; (32ac <gpio_interrupt_test+0x8b4>)
        gpio0_irq_occurred   = 0;
    310e:	6038      	str	r0, [r7, #0]
        gpio0_irq_level_irq  = 0;
    3110:	6010      	str	r0, [r2, #0]
    3112:	f8cc e000 	str.w	lr, [ip]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    3116:	6223      	str	r3, [r4, #32]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<23);}
    3118:	683a      	ldr	r2, [r7, #0]
    311a:	b10a      	cbz	r2, 3120 <gpio_interrupt_test+0x728>
    311c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    3120:	2000      	movs	r0, #0
    3122:	4a60      	ldr	r2, [pc, #384]	; (32a4 <gpio_interrupt_test+0x8ac>)
    3124:	6050      	str	r0, [r2, #4]
    3126:	f3bf 8f6f 	isb	sy
    312a:	f3bf 8f6f 	isb	sy
    312e:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<24);}
    3132:	683a      	ldr	r2, [r7, #0]
    3134:	b90a      	cbnz	r2, 313a <gpio_interrupt_test+0x742>
    3136:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
        gpio0_irq_occurred   = 0;
    313a:	2000      	movs	r0, #0
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    313c:	4a59      	ldr	r2, [pc, #356]	; (32a4 <gpio_interrupt_test+0x8ac>)
        gpio0_irq_occurred   = 0;
    313e:	6038      	str	r0, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    3140:	6053      	str	r3, [r2, #4]
    3142:	f3bf 8f6f 	isb	sy
    3146:	f3bf 8f6f 	isb	sy
    314a:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<25);}
    314e:	683a      	ldr	r2, [r7, #0]
    3150:	b10a      	cbz	r2, 3156 <gpio_interrupt_test+0x75e>
    3152:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    3156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    315a:	4a52      	ldr	r2, [pc, #328]	; (32a4 <gpio_interrupt_test+0x8ac>)
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    315c:	6260      	str	r0, [r4, #36]	; 0x24
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    315e:	4294      	cmp	r4, r2
    3160:	f000 8309 	beq.w	3776 <gpio_interrupt_test+0xd7e>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    3164:	4a52      	ldr	r2, [pc, #328]	; (32b0 <gpio_interrupt_test+0x8b8>)
    3166:	4294      	cmp	r4, r2
    3168:	f000 82d5 	beq.w	3716 <gpio_interrupt_test+0xd1e>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    316c:	454c      	cmp	r4, r9
    316e:	f43f aead 	beq.w	2ecc <gpio_interrupt_test+0x4d4>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3172:	4a50      	ldr	r2, [pc, #320]	; (32b4 <gpio_interrupt_test+0x8bc>)
    3174:	4294      	cmp	r4, r2
    3176:	f000 83dc 	beq.w	3932 <gpio_interrupt_test+0xf3a>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    317a:	4a4a      	ldr	r2, [pc, #296]	; (32a4 <gpio_interrupt_test+0x8ac>)
    317c:	4294      	cmp	r4, r2
    317e:	d148      	bne.n	3212 <gpio_interrupt_test+0x81a>
    3180:	9a02      	ldr	r2, [sp, #8]
    3182:	2a00      	cmp	r2, #0
    3184:	d045      	beq.n	3212 <gpio_interrupt_test+0x81a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3186:	f04f 0e01 	mov.w	lr, #1
        gpio0_irq_flags[irq_num]=0;
    318a:	2500      	movs	r5, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    318c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    3190:	4849      	ldr	r0, [pc, #292]	; (32b8 <gpio_interrupt_test+0x8c0>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3192:	f108 0210 	add.w	r2, r8, #16
    3196:	4e49      	ldr	r6, [pc, #292]	; (32bc <gpio_interrupt_test+0x8c4>)
    3198:	fa0e f202 	lsl.w	r2, lr, r2
    319c:	f806 5008 	strb.w	r5, [r6, r8]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    31a0:	f8c0 c080 	str.w	ip, [r0, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    31a4:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    31a8:	6002      	str	r2, [r0, #0]
        gpio0_irq_expected     = irq_mask;
    31aa:	483f      	ldr	r0, [pc, #252]	; (32a8 <gpio_interrupt_test+0x8b0>)
    31ac:	6003      	str	r3, [r0, #0]
        CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    31ae:	6223      	str	r3, [r4, #32]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    31b0:	6065      	str	r5, [r4, #4]
    31b2:	f3bf 8f6f 	isb	sy
    31b6:	f3bf 8f6f 	isb	sy
    31ba:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<29);}
    31be:	6838      	ldr	r0, [r7, #0]
    31c0:	b908      	cbnz	r0, 31c6 <gpio_interrupt_test+0x7ce>
    31c2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
      if (gpio0_irq_flags[irq_num]==0) { err_code |= (1<<30);}
    31c6:	483d      	ldr	r0, [pc, #244]	; (32bc <gpio_interrupt_test+0x8c4>)
    31c8:	f810 0008 	ldrb.w	r0, [r0, r8]
    31cc:	b908      	cbnz	r0, 31d2 <gpio_interrupt_test+0x7da>
    31ce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
        gpio0_irq_occurred = 0;
    31d2:	2500      	movs	r5, #0
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* Inactive */
    31d4:	4833      	ldr	r0, [pc, #204]	; (32a4 <gpio_interrupt_test+0x8ac>)
        gpio0_irq_occurred = 0;
    31d6:	603d      	str	r5, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* Inactive */
    31d8:	6043      	str	r3, [r0, #4]
    31da:	f3bf 8f6f 	isb	sy
    31de:	f3bf 8f6f 	isb	sy
    31e2:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= 0x80000000UL;}
    31e6:	683b      	ldr	r3, [r7, #0]
    31e8:	b10b      	cbz	r3, 31ee <gpio_interrupt_test+0x7f6>
    31ea:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
        CM3DS_MPS2_GPIO->INTENCLR      = 0xFFFFFFFF;
    31ee:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    31f2:	2040      	movs	r0, #64	; 0x40
        gpio0_irq_flags[irq_num]= 0;
    31f4:	2300      	movs	r3, #0
        CM3DS_MPS2_GPIO->INTENCLR      = 0xFFFFFFFF;
    31f6:	4d2b      	ldr	r5, [pc, #172]	; (32a4 <gpio_interrupt_test+0x8ac>)
    31f8:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
    31fc:	4d2e      	ldr	r5, [pc, #184]	; (32b8 <gpio_interrupt_test+0x8c0>)
    31fe:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3202:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
        gpio0_irq_flags[irq_num]= 0;
    3206:	4a2d      	ldr	r2, [pc, #180]	; (32bc <gpio_interrupt_test+0x8c4>)
    3208:	f802 3008 	strb.w	r3, [r2, r8]
        gpio0_irq_expected      = 0;
    320c:	4a26      	ldr	r2, [pc, #152]	; (32a8 <gpio_interrupt_test+0x8b0>)
    320e:	6013      	str	r3, [r2, #0]
        gpio0_irq_occurred      = 0;
    3210:	603b      	str	r3, [r7, #0]
        if (err_code != 0) {
    3212:	2900      	cmp	r1, #0
    3214:	f43f ae87 	beq.w	2f26 <gpio_interrupt_test+0x52e>
    3218:	e680      	b.n	2f1c <gpio_interrupt_test+0x524>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    321a:	4826      	ldr	r0, [pc, #152]	; (32b4 <gpio_interrupt_test+0x8bc>)
    321c:	4284      	cmp	r4, r0
    321e:	f040 863d 	bne.w	3e9c <gpio_interrupt_test+0x14a4>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3222:	f44f 6500 	mov.w	r5, #2048	; 0x800
    3226:	4824      	ldr	r0, [pc, #144]	; (32b8 <gpio_interrupt_test+0x8c0>)
        gpio3_irq_expected   = irq_mask;
    3228:	4e25      	ldr	r6, [pc, #148]	; (32c0 <gpio_interrupt_test+0x8c8>)
    322a:	6033      	str	r3, [r6, #0]
    322c:	6045      	str	r5, [r0, #4]
      gpio0_irq_level_irq    = 1;
    322e:	481f      	ldr	r0, [pc, #124]	; (32ac <gpio_interrupt_test+0x8b4>)
    3230:	6001      	str	r1, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    3232:	6223      	str	r3, [r4, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3234:	481f      	ldr	r0, [pc, #124]	; (32b4 <gpio_interrupt_test+0x8bc>)
    3236:	4284      	cmp	r4, r0
    3238:	f000 83ee 	beq.w	3a18 <gpio_interrupt_test+0x1020>
      gpio0_irq_expected     = 0;
    323c:	2100      	movs	r1, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    323e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    3242:	4e19      	ldr	r6, [pc, #100]	; (32a8 <gpio_interrupt_test+0x8b0>)
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3244:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      gpio0_irq_expected     = 0;
    3248:	6031      	str	r1, [r6, #0]
      gpio1_irq_expected     = 0;
    324a:	4e1e      	ldr	r6, [pc, #120]	; (32c4 <gpio_interrupt_test+0x8cc>)
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    324c:	4d15      	ldr	r5, [pc, #84]	; (32a4 <gpio_interrupt_test+0x8ac>)
      gpio1_irq_expected     = 0;
    324e:	6031      	str	r1, [r6, #0]
      gpio2_irq_expected     = 0;
    3250:	4e1d      	ldr	r6, [pc, #116]	; (32c8 <gpio_interrupt_test+0x8d0>)
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3252:	42ac      	cmp	r4, r5
      gpio2_irq_expected     = 0;
    3254:	6031      	str	r1, [r6, #0]
      gpio3_irq_expected     = 0;
    3256:	4e1a      	ldr	r6, [pc, #104]	; (32c0 <gpio_interrupt_test+0x8c8>)
    3258:	6031      	str	r1, [r6, #0]
      gpio3_irq_occurred     = 0;
    325a:	4e1c      	ldr	r6, [pc, #112]	; (32cc <gpio_interrupt_test+0x8d4>)
      gpio0_irq_occurred     = 0;
    325c:	6039      	str	r1, [r7, #0]
      gpio1_irq_occurred     = 0;
    325e:	f8cb 1000 	str.w	r1, [fp]
      gpio2_irq_occurred     = 0;
    3262:	f8ca 1000 	str.w	r1, [sl]
      gpio3_irq_occurred     = 0;
    3266:	6031      	str	r1, [r6, #0]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3268:	f000 817e 	beq.w	3568 <gpio_interrupt_test+0xb70>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    326c:	4d10      	ldr	r5, [pc, #64]	; (32b0 <gpio_interrupt_test+0x8b8>)
    326e:	42ac      	cmp	r4, r5
    3270:	f000 8116 	beq.w	34a0 <gpio_interrupt_test+0xaa8>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    3274:	454c      	cmp	r4, r9
    3276:	f43f acac 	beq.w	2bd2 <gpio_interrupt_test+0x1da>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    327a:	4284      	cmp	r4, r0
    327c:	f000 83f1 	beq.w	3a62 <gpio_interrupt_test+0x106a>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    3280:	4808      	ldr	r0, [pc, #32]	; (32a4 <gpio_interrupt_test+0x8ac>)
    3282:	4284      	cmp	r4, r0
    3284:	f040 8190 	bne.w	35a8 <gpio_interrupt_test+0xbb0>
    3288:	9802      	ldr	r0, [sp, #8]
    328a:	2800      	cmp	r0, #0
    328c:	f040 8535 	bne.w	3cfa <gpio_interrupt_test+0x1302>
        gpio0_irq_occurred   = 0;
    3290:	f04f 0c00 	mov.w	ip, #0
    3294:	2540      	movs	r5, #64	; 0x40
    3296:	4808      	ldr	r0, [pc, #32]	; (32b8 <gpio_interrupt_test+0x8c0>)
        gpio0_irq_expected   = irq_mask;
    3298:	4e03      	ldr	r6, [pc, #12]	; (32a8 <gpio_interrupt_test+0x8b0>)
    329a:	6033      	str	r3, [r6, #0]
        gpio0_irq_occurred   = 0;
    329c:	f8c7 c000 	str.w	ip, [r7]
    32a0:	6005      	str	r5, [r0, #0]
    32a2:	e4bc      	b.n	2c1e <gpio_interrupt_test+0x226>
    32a4:	40010000 	.word	0x40010000
    32a8:	20000074 	.word	0x20000074
    32ac:	200000b0 	.word	0x200000b0
    32b0:	40011000 	.word	0x40011000
    32b4:	40013000 	.word	0x40013000
    32b8:	e000e100 	.word	0xe000e100
    32bc:	20000078 	.word	0x20000078
    32c0:	20000088 	.word	0x20000088
    32c4:	2000008c 	.word	0x2000008c
    32c8:	20000098 	.word	0x20000098
    32cc:	20000094 	.word	0x20000094
        if (gpio0_irq_occurred!=3) { err_code |= (1<<6);}
    32d0:	683a      	ldr	r2, [r7, #0]
    32d2:	4282      	cmp	r2, r0
    32d4:	d001      	beq.n	32da <gpio_interrupt_test+0x8e2>
    32d6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
      multi_irq_test = 0; /* Disable multiple IRQ test */
    32da:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    32dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    32e0:	4a82      	ldr	r2, [pc, #520]	; (34ec <gpio_interrupt_test+0xaf4>)
    32e2:	6055      	str	r5, [r2, #4]
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    32e4:	6255      	str	r5, [r2, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    32e6:	f8ce 0000 	str.w	r0, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET = irq_mask; /* High level */
    32ea:	6313      	str	r3, [r2, #48]	; 0x30
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    32ec:	6050      	str	r0, [r2, #4]
        gpio0_irq_expected   = irq_mask;
    32ee:	4a80      	ldr	r2, [pc, #512]	; (34f0 <gpio_interrupt_test+0xaf8>)
    32f0:	6013      	str	r3, [r2, #0]
        gpio0_irq_occurred   = 0;
    32f2:	6038      	str	r0, [r7, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    32f4:	6223      	str	r3, [r4, #32]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<7);}
    32f6:	683a      	ldr	r2, [r7, #0]
    32f8:	b10a      	cbz	r2, 32fe <gpio_interrupt_test+0x906>
    32fa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    32fe:	4a7b      	ldr	r2, [pc, #492]	; (34ec <gpio_interrupt_test+0xaf4>)
    3300:	6053      	str	r3, [r2, #4]
    3302:	f3bf 8f6f 	isb	sy
    3306:	f3bf 8f6f 	isb	sy
    330a:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<8);}
    330e:	683a      	ldr	r2, [r7, #0]
    3310:	b90a      	cbnz	r2, 3316 <gpio_interrupt_test+0x91e>
    3312:	f441 7180 	orr.w	r1, r1, #256	; 0x100
      gpio0_irq_expected     = 0;
    3316:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    331c:	4d74      	ldr	r5, [pc, #464]	; (34f0 <gpio_interrupt_test+0xaf8>)
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    331e:	6260      	str	r0, [r4, #36]	; 0x24
      gpio0_irq_expected     = 0;
    3320:	602a      	str	r2, [r5, #0]
      gpio1_irq_expected     = 0;
    3322:	4d74      	ldr	r5, [pc, #464]	; (34f4 <gpio_interrupt_test+0xafc>)
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3324:	4871      	ldr	r0, [pc, #452]	; (34ec <gpio_interrupt_test+0xaf4>)
      gpio1_irq_expected     = 0;
    3326:	602a      	str	r2, [r5, #0]
      gpio2_irq_expected     = 0;
    3328:	4d73      	ldr	r5, [pc, #460]	; (34f8 <gpio_interrupt_test+0xb00>)
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    332a:	4284      	cmp	r4, r0
      gpio2_irq_expected     = 0;
    332c:	602a      	str	r2, [r5, #0]
      gpio3_irq_expected     = 0;
    332e:	4d73      	ldr	r5, [pc, #460]	; (34fc <gpio_interrupt_test+0xb04>)
    3330:	602a      	str	r2, [r5, #0]
      gpio3_irq_occurred     = 0;
    3332:	4d73      	ldr	r5, [pc, #460]	; (3500 <gpio_interrupt_test+0xb08>)
      gpio0_irq_occurred     = 0;
    3334:	603a      	str	r2, [r7, #0]
      gpio1_irq_occurred     = 0;
    3336:	f8cb 2000 	str.w	r2, [fp]
      gpio2_irq_occurred     = 0;
    333a:	f8ca 2000 	str.w	r2, [sl]
      gpio3_irq_occurred     = 0;
    333e:	602a      	str	r2, [r5, #0]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3340:	f000 8420 	beq.w	3b84 <gpio_interrupt_test+0x118c>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    3344:	4a6f      	ldr	r2, [pc, #444]	; (3504 <gpio_interrupt_test+0xb0c>)
    3346:	4294      	cmp	r4, r2
    3348:	d056      	beq.n	33f8 <gpio_interrupt_test+0xa00>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    334a:	454c      	cmp	r4, r9
    334c:	f43f acbf 	beq.w	2cce <gpio_interrupt_test+0x2d6>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3350:	4a6d      	ldr	r2, [pc, #436]	; (3508 <gpio_interrupt_test+0xb10>)
    3352:	4294      	cmp	r4, r2
    3354:	f000 83f1 	beq.w	3b3a <gpio_interrupt_test+0x1142>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    3358:	4a64      	ldr	r2, [pc, #400]	; (34ec <gpio_interrupt_test+0xaf4>)
    335a:	4294      	cmp	r4, r2
    335c:	f040 8430 	bne.w	3bc0 <gpio_interrupt_test+0x11c8>
    3360:	9a02      	ldr	r2, [sp, #8]
    3362:	2a00      	cmp	r2, #0
    3364:	f040 8490 	bne.w	3c88 <gpio_interrupt_test+0x1290>
        gpio0_irq_occurred   = 0;
    3368:	2500      	movs	r5, #0
    336a:	2040      	movs	r0, #64	; 0x40
    336c:	4a67      	ldr	r2, [pc, #412]	; (350c <gpio_interrupt_test+0xb14>)
        gpio0_irq_expected   = irq_mask;
    336e:	4e60      	ldr	r6, [pc, #384]	; (34f0 <gpio_interrupt_test+0xaf8>)
    3370:	6033      	str	r3, [r6, #0]
        gpio0_irq_occurred   = 0;
    3372:	603d      	str	r5, [r7, #0]
    3374:	6010      	str	r0, [r2, #0]
    3376:	e4ce      	b.n	2d16 <gpio_interrupt_test+0x31e>
        if (gpio1_irq_occurred!=3) { err_code |= (1<<6);}
    3378:	f8db 2000 	ldr.w	r2, [fp]
    337c:	2a03      	cmp	r2, #3
    337e:	d001      	beq.n	3384 <gpio_interrupt_test+0x98c>
    3380:	f041 0140 	orr.w	r1, r1, #64	; 0x40
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3388:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    338a:	4d5e      	ldr	r5, [pc, #376]	; (3504 <gpio_interrupt_test+0xb0c>)
    338c:	6068      	str	r0, [r5, #4]
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    338e:	6268      	str	r0, [r5, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3390:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET = irq_mask; /* High level */
    3394:	632b      	str	r3, [r5, #48]	; 0x30
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3396:	606a      	str	r2, [r5, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    3398:	4a5a      	ldr	r2, [pc, #360]	; (3504 <gpio_interrupt_test+0xb0c>)
    339a:	4294      	cmp	r4, r2
    339c:	f47f ac68 	bne.w	2c70 <gpio_interrupt_test+0x278>
        gpio1_irq_occurred   = 0;
    33a0:	2200      	movs	r2, #0
        gpio1_irq_expected   = irq_mask;
    33a2:	4854      	ldr	r0, [pc, #336]	; (34f4 <gpio_interrupt_test+0xafc>)
    33a4:	6003      	str	r3, [r0, #0]
        gpio1_irq_occurred   = 0;
    33a6:	f8cb 2000 	str.w	r2, [fp]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    33aa:	6223      	str	r3, [r4, #32]
        if (gpio1_irq_occurred!=0) { err_code |= (1<<7);}
    33ac:	f8db 2000 	ldr.w	r2, [fp]
    33b0:	b10a      	cbz	r2, 33b6 <gpio_interrupt_test+0x9be>
    33b2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    33b6:	4a53      	ldr	r2, [pc, #332]	; (3504 <gpio_interrupt_test+0xb0c>)
    33b8:	6053      	str	r3, [r2, #4]
    33ba:	f3bf 8f6f 	isb	sy
    33be:	f3bf 8f6f 	isb	sy
    33c2:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred==0) { err_code |= (1<<8);}
    33c6:	f8db 2000 	ldr.w	r2, [fp]
    33ca:	b90a      	cbnz	r2, 33d0 <gpio_interrupt_test+0x9d8>
    33cc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    33d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    33d4:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    33d6:	4d4b      	ldr	r5, [pc, #300]	; (3504 <gpio_interrupt_test+0xb0c>)
    33d8:	6268      	str	r0, [r5, #36]	; 0x24
      gpio0_irq_expected     = 0;
    33da:	4845      	ldr	r0, [pc, #276]	; (34f0 <gpio_interrupt_test+0xaf8>)
    33dc:	6002      	str	r2, [r0, #0]
      gpio1_irq_expected     = 0;
    33de:	4845      	ldr	r0, [pc, #276]	; (34f4 <gpio_interrupt_test+0xafc>)
    33e0:	6002      	str	r2, [r0, #0]
      gpio2_irq_expected     = 0;
    33e2:	4845      	ldr	r0, [pc, #276]	; (34f8 <gpio_interrupt_test+0xb00>)
    33e4:	6002      	str	r2, [r0, #0]
      gpio3_irq_expected     = 0;
    33e6:	4845      	ldr	r0, [pc, #276]	; (34fc <gpio_interrupt_test+0xb04>)
    33e8:	6002      	str	r2, [r0, #0]
      gpio3_irq_occurred     = 0;
    33ea:	4845      	ldr	r0, [pc, #276]	; (3500 <gpio_interrupt_test+0xb08>)
      gpio0_irq_occurred     = 0;
    33ec:	603a      	str	r2, [r7, #0]
      gpio1_irq_occurred     = 0;
    33ee:	f8cb 2000 	str.w	r2, [fp]
      gpio2_irq_occurred     = 0;
    33f2:	f8ca 2000 	str.w	r2, [sl]
      gpio3_irq_occurred     = 0;
    33f6:	6002      	str	r2, [r0, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    33f8:	4a42      	ldr	r2, [pc, #264]	; (3504 <gpio_interrupt_test+0xb0c>)
    33fa:	6053      	str	r3, [r2, #4]
    33fc:	f3bf 8f6f 	isb	sy
    3400:	f3bf 8f6f 	isb	sy
    3404:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<9);}
    3408:	f8db 2000 	ldr.w	r2, [fp]
    340c:	b10a      	cbz	r2, 3412 <gpio_interrupt_test+0xa1a>
    340e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3412:	2200      	movs	r2, #0
    3414:	483b      	ldr	r0, [pc, #236]	; (3504 <gpio_interrupt_test+0xb0c>)
    3416:	6042      	str	r2, [r0, #4]
    3418:	f3bf 8f6f 	isb	sy
    341c:	f3bf 8f6f 	isb	sy
    3420:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<10);}
    3424:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3426:	b10a      	cbz	r2, 342c <gpio_interrupt_test+0xa34>
    3428:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
        gpio1_irq_occurred   = 0;
    342c:	2500      	movs	r5, #0
    342e:	2080      	movs	r0, #128	; 0x80
    3430:	4a36      	ldr	r2, [pc, #216]	; (350c <gpio_interrupt_test+0xb14>)
        gpio1_irq_expected   = irq_mask;
    3432:	4e30      	ldr	r6, [pc, #192]	; (34f4 <gpio_interrupt_test+0xafc>)
    3434:	6033      	str	r3, [r6, #0]
        gpio1_irq_occurred   = 0;
    3436:	f8cb 5000 	str.w	r5, [fp]
    343a:	6010      	str	r0, [r2, #0]
    343c:	e46b      	b.n	2d16 <gpio_interrupt_test+0x31e>
    343e:	2580      	movs	r5, #128	; 0x80
    3440:	4832      	ldr	r0, [pc, #200]	; (350c <gpio_interrupt_test+0xb14>)
        gpio1_irq_expected   = irq_mask;
    3442:	4e2c      	ldr	r6, [pc, #176]	; (34f4 <gpio_interrupt_test+0xafc>)
    3444:	6033      	str	r3, [r6, #0]
    3446:	6005      	str	r5, [r0, #0]
      gpio0_irq_level_irq    = 1;
    3448:	4831      	ldr	r0, [pc, #196]	; (3510 <gpio_interrupt_test+0xb18>)
    344a:	6001      	str	r1, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    344c:	6223      	str	r3, [r4, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    344e:	492d      	ldr	r1, [pc, #180]	; (3504 <gpio_interrupt_test+0xb0c>)
    3450:	428c      	cmp	r4, r1
    3452:	f47f ab96 	bne.w	2b82 <gpio_interrupt_test+0x18a>
        if (gpio1_irq_occurred!=0) { err_code |= (1<<0);}
    3456:	f8db 1000 	ldr.w	r1, [fp]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    345a:	6062      	str	r2, [r4, #4]
        if (gpio1_irq_occurred!=0) { err_code |= (1<<0);}
    345c:	3100      	adds	r1, #0
    345e:	bf18      	it	ne
    3460:	2101      	movne	r1, #1
    3462:	f3bf 8f6f 	isb	sy
    3466:	f3bf 8f6f 	isb	sy
    346a:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred==0) { err_code |= (1<<1);}
    346e:	f8db 0000 	ldr.w	r0, [fp]
    3472:	b908      	cbnz	r0, 3478 <gpio_interrupt_test+0xa80>
    3474:	f041 0102 	orr.w	r1, r1, #2
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3478:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    347c:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    347e:	4e21      	ldr	r6, [pc, #132]	; (3504 <gpio_interrupt_test+0xb0c>)
    3480:	6275      	str	r5, [r6, #36]	; 0x24
      gpio0_irq_expected     = 0;
    3482:	4d1b      	ldr	r5, [pc, #108]	; (34f0 <gpio_interrupt_test+0xaf8>)
    3484:	6028      	str	r0, [r5, #0]
      gpio1_irq_expected     = 0;
    3486:	4d1b      	ldr	r5, [pc, #108]	; (34f4 <gpio_interrupt_test+0xafc>)
    3488:	6028      	str	r0, [r5, #0]
      gpio2_irq_expected     = 0;
    348a:	4d1b      	ldr	r5, [pc, #108]	; (34f8 <gpio_interrupt_test+0xb00>)
    348c:	6028      	str	r0, [r5, #0]
      gpio3_irq_expected     = 0;
    348e:	4d1b      	ldr	r5, [pc, #108]	; (34fc <gpio_interrupt_test+0xb04>)
    3490:	6028      	str	r0, [r5, #0]
      gpio3_irq_occurred     = 0;
    3492:	4d1b      	ldr	r5, [pc, #108]	; (3500 <gpio_interrupt_test+0xb08>)
      gpio0_irq_occurred     = 0;
    3494:	6038      	str	r0, [r7, #0]
      gpio1_irq_occurred     = 0;
    3496:	f8cb 0000 	str.w	r0, [fp]
      gpio2_irq_occurred     = 0;
    349a:	f8ca 0000 	str.w	r0, [sl]
      gpio3_irq_occurred     = 0;
    349e:	6028      	str	r0, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    34a0:	4818      	ldr	r0, [pc, #96]	; (3504 <gpio_interrupt_test+0xb0c>)
    34a2:	6042      	str	r2, [r0, #4]
    34a4:	f3bf 8f6f 	isb	sy
    34a8:	f3bf 8f6f 	isb	sy
    34ac:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<2);}
    34b0:	f8db 0000 	ldr.w	r0, [fp]
    34b4:	b108      	cbz	r0, 34ba <gpio_interrupt_test+0xac2>
    34b6:	f041 0104 	orr.w	r1, r1, #4
        CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    34ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34be:	4d11      	ldr	r5, [pc, #68]	; (3504 <gpio_interrupt_test+0xb0c>)
    34c0:	6068      	str	r0, [r5, #4]
    34c2:	f3bf 8f6f 	isb	sy
    34c6:	f3bf 8f6f 	isb	sy
    34ca:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<3);}
    34ce:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    34d0:	b108      	cbz	r0, 34d6 <gpio_interrupt_test+0xade>
    34d2:	f041 0108 	orr.w	r1, r1, #8
        gpio1_irq_occurred   = 0;
    34d6:	f04f 0c00 	mov.w	ip, #0
    34da:	2580      	movs	r5, #128	; 0x80
    34dc:	480b      	ldr	r0, [pc, #44]	; (350c <gpio_interrupt_test+0xb14>)
        gpio1_irq_expected   = irq_mask;
    34de:	4e05      	ldr	r6, [pc, #20]	; (34f4 <gpio_interrupt_test+0xafc>)
    34e0:	6033      	str	r3, [r6, #0]
        gpio1_irq_occurred   = 0;
    34e2:	f8cb c000 	str.w	ip, [fp]
    34e6:	6005      	str	r5, [r0, #0]
    34e8:	f7ff bb99 	b.w	2c1e <gpio_interrupt_test+0x226>
    34ec:	40010000 	.word	0x40010000
    34f0:	20000074 	.word	0x20000074
    34f4:	2000008c 	.word	0x2000008c
    34f8:	20000098 	.word	0x20000098
    34fc:	20000088 	.word	0x20000088
    3500:	20000094 	.word	0x20000094
    3504:	40011000 	.word	0x40011000
    3508:	40013000 	.word	0x40013000
    350c:	e000e100 	.word	0xe000e100
    3510:	200000b0 	.word	0x200000b0
    3514:	2540      	movs	r5, #64	; 0x40
    3516:	48aa      	ldr	r0, [pc, #680]	; (37c0 <gpio_interrupt_test+0xdc8>)
        gpio0_irq_expected   = irq_mask;
    3518:	4eaa      	ldr	r6, [pc, #680]	; (37c4 <gpio_interrupt_test+0xdcc>)
    351a:	6033      	str	r3, [r6, #0]
    351c:	6005      	str	r5, [r0, #0]
      gpio0_irq_level_irq    = 1;
    351e:	48aa      	ldr	r0, [pc, #680]	; (37c8 <gpio_interrupt_test+0xdd0>)
    3520:	6001      	str	r1, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    3522:	6223      	str	r3, [r4, #32]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<0);}
    3524:	6839      	ldr	r1, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    3526:	6062      	str	r2, [r4, #4]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<0);}
    3528:	3100      	adds	r1, #0
    352a:	bf18      	it	ne
    352c:	2101      	movne	r1, #1
    352e:	f3bf 8f6f 	isb	sy
    3532:	f3bf 8f6f 	isb	sy
    3536:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<1);}
    353a:	6838      	ldr	r0, [r7, #0]
    353c:	b908      	cbnz	r0, 3542 <gpio_interrupt_test+0xb4a>
    353e:	f041 0102 	orr.w	r1, r1, #2
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3542:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    3546:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3548:	6265      	str	r5, [r4, #36]	; 0x24
      gpio0_irq_expected     = 0;
    354a:	4d9e      	ldr	r5, [pc, #632]	; (37c4 <gpio_interrupt_test+0xdcc>)
    354c:	6028      	str	r0, [r5, #0]
      gpio1_irq_expected     = 0;
    354e:	4d9f      	ldr	r5, [pc, #636]	; (37cc <gpio_interrupt_test+0xdd4>)
    3550:	6028      	str	r0, [r5, #0]
      gpio2_irq_expected     = 0;
    3552:	4d9f      	ldr	r5, [pc, #636]	; (37d0 <gpio_interrupt_test+0xdd8>)
    3554:	6028      	str	r0, [r5, #0]
      gpio3_irq_expected     = 0;
    3556:	4d9f      	ldr	r5, [pc, #636]	; (37d4 <gpio_interrupt_test+0xddc>)
    3558:	6028      	str	r0, [r5, #0]
      gpio3_irq_occurred     = 0;
    355a:	4d9f      	ldr	r5, [pc, #636]	; (37d8 <gpio_interrupt_test+0xde0>)
      gpio0_irq_occurred     = 0;
    355c:	6038      	str	r0, [r7, #0]
      gpio1_irq_occurred     = 0;
    355e:	f8cb 0000 	str.w	r0, [fp]
      gpio2_irq_occurred     = 0;
    3562:	f8ca 0000 	str.w	r0, [sl]
      gpio3_irq_occurred     = 0;
    3566:	6028      	str	r0, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    3568:	489c      	ldr	r0, [pc, #624]	; (37dc <gpio_interrupt_test+0xde4>)
    356a:	6042      	str	r2, [r0, #4]
    356c:	f3bf 8f6f 	isb	sy
    3570:	f3bf 8f6f 	isb	sy
    3574:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<2);}
    3578:	6838      	ldr	r0, [r7, #0]
    357a:	b108      	cbz	r0, 3580 <gpio_interrupt_test+0xb88>
    357c:	f041 0104 	orr.w	r1, r1, #4
        CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3580:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3584:	4895      	ldr	r0, [pc, #596]	; (37dc <gpio_interrupt_test+0xde4>)
    3586:	6045      	str	r5, [r0, #4]
    3588:	f3bf 8f6f 	isb	sy
    358c:	f3bf 8f6f 	isb	sy
    3590:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<3);}
    3594:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3596:	2800      	cmp	r0, #0
    3598:	f43f ae72 	beq.w	3280 <gpio_interrupt_test+0x888>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    359c:	488f      	ldr	r0, [pc, #572]	; (37dc <gpio_interrupt_test+0xde4>)
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<3);}
    359e:	f041 0108 	orr.w	r1, r1, #8
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    35a2:	4284      	cmp	r4, r0
    35a4:	f43f ae70 	beq.w	3288 <gpio_interrupt_test+0x890>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    35a8:	488d      	ldr	r0, [pc, #564]	; (37e0 <gpio_interrupt_test+0xde8>)
    35aa:	4284      	cmp	r4, r0
    35ac:	d093      	beq.n	34d6 <gpio_interrupt_test+0xade>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    35ae:	454c      	cmp	r4, r9
    35b0:	f43f ab2b 	beq.w	2c0a <gpio_interrupt_test+0x212>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    35b4:	488b      	ldr	r0, [pc, #556]	; (37e4 <gpio_interrupt_test+0xdec>)
    35b6:	4284      	cmp	r4, r0
    35b8:	f000 826e 	beq.w	3a98 <gpio_interrupt_test+0x10a0>
    35bc:	f7ff bb2f 	b.w	2c1e <gpio_interrupt_test+0x226>
        if (gpio1_irq_occurred!=3) { err_code |= (1<<13);}
    35c0:	f8db 2000 	ldr.w	r2, [fp]
    35c4:	2a03      	cmp	r2, #3
    35c6:	d001      	beq.n	35cc <gpio_interrupt_test+0xbd4>
    35c8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    35cc:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    35ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    35d2:	4d83      	ldr	r5, [pc, #524]	; (37e0 <gpio_interrupt_test+0xde8>)
    35d4:	606a      	str	r2, [r5, #4]
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    35d6:	6268      	str	r0, [r5, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    35d8:	f8ce 2000 	str.w	r2, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET    = irq_mask; /* Rising edge */
    35dc:	632b      	str	r3, [r5, #48]	; 0x30
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Rising edge */
    35de:	62ab      	str	r3, [r5, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000; /* Inactive */
    35e0:	606a      	str	r2, [r5, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    35e2:	4a7f      	ldr	r2, [pc, #508]	; (37e0 <gpio_interrupt_test+0xde8>)
    35e4:	4294      	cmp	r4, r2
    35e6:	f47f abc1 	bne.w	2d6c <gpio_interrupt_test+0x374>
        gpio1_irq_occurred   = 0;
    35ea:	2200      	movs	r2, #0
        gpio1_irq_expected   = irq_mask;
    35ec:	4877      	ldr	r0, [pc, #476]	; (37cc <gpio_interrupt_test+0xdd4>)
    35ee:	6003      	str	r3, [r0, #0]
        gpio1_irq_level_irq  = 0;
    35f0:	487d      	ldr	r0, [pc, #500]	; (37e8 <gpio_interrupt_test+0xdf0>)
        gpio1_irq_occurred   = 0;
    35f2:	f8cb 2000 	str.w	r2, [fp]
        gpio1_irq_level_irq  = 0;
    35f6:	6002      	str	r2, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    35f8:	6223      	str	r3, [r4, #32]
        if (gpio1_irq_occurred!=0) { err_code |= (1<<14);}
    35fa:	f8db 2000 	ldr.w	r2, [fp]
    35fe:	b10a      	cbz	r2, 3604 <gpio_interrupt_test+0xc0c>
    3600:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3604:	4a76      	ldr	r2, [pc, #472]	; (37e0 <gpio_interrupt_test+0xde8>)
    3606:	6053      	str	r3, [r2, #4]
    3608:	f3bf 8f6f 	isb	sy
    360c:	f3bf 8f6f 	isb	sy
    3610:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred==0) { err_code |= (1<<15);}
    3614:	f8db 2000 	ldr.w	r2, [fp]
    3618:	b90a      	cbnz	r2, 361e <gpio_interrupt_test+0xc26>
    361a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
        gpio1_irq_occurred   = 0;
    361e:	2200      	movs	r2, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    3620:	486f      	ldr	r0, [pc, #444]	; (37e0 <gpio_interrupt_test+0xde8>)
        gpio1_irq_occurred   = 0;
    3622:	f8cb 2000 	str.w	r2, [fp]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    3626:	6042      	str	r2, [r0, #4]
    3628:	f3bf 8f6f 	isb	sy
    362c:	f3bf 8f6f 	isb	sy
    3630:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<16);}
    3634:	f8db 2000 	ldr.w	r2, [fp]
    3638:	b10a      	cbz	r2, 363e <gpio_interrupt_test+0xc46>
    363a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    363e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3642:	4867      	ldr	r0, [pc, #412]	; (37e0 <gpio_interrupt_test+0xde8>)
    3644:	6242      	str	r2, [r0, #36]	; 0x24
        gpio1_irq_occurred   = 0;
    3646:	2200      	movs	r2, #0
    3648:	f8cb 2000 	str.w	r2, [fp]
        if (gpio1_irq_occurred!=0) { err_code |= (1<<17);}
    364c:	f8db 2000 	ldr.w	r2, [fp]
    3650:	b10a      	cbz	r2, 3656 <gpio_interrupt_test+0xc5e>
    3652:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3656:	4a62      	ldr	r2, [pc, #392]	; (37e0 <gpio_interrupt_test+0xde8>)
    3658:	6053      	str	r3, [r2, #4]
    365a:	f3bf 8f6f 	isb	sy
    365e:	f3bf 8f6f 	isb	sy
    3662:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<18);}
    3666:	f8db 2000 	ldr.w	r2, [fp]
    366a:	b10a      	cbz	r2, 3670 <gpio_interrupt_test+0xc78>
    366c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
        gpio1_irq_occurred   = 0;
    3670:	2200      	movs	r2, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    3672:	485b      	ldr	r0, [pc, #364]	; (37e0 <gpio_interrupt_test+0xde8>)
        gpio1_irq_occurred   = 0;
    3674:	f8cb 2000 	str.w	r2, [fp]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    3678:	6042      	str	r2, [r0, #4]
    367a:	f3bf 8f6f 	isb	sy
    367e:	f3bf 8f6f 	isb	sy
    3682:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<19);}
    3686:	f8db 2000 	ldr.w	r2, [fp]
    368a:	b10a      	cbz	r2, 3690 <gpio_interrupt_test+0xc98>
    368c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    3690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3694:	6262      	str	r2, [r4, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;        /* Falling edge */
    3696:	6362      	str	r2, [r4, #52]	; 0x34
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Falling edge */
    3698:	62a3      	str	r3, [r4, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = irq_mask; /* Inactive */
    369a:	6063      	str	r3, [r4, #4]
        gpio1_irq_occurred   = 0;
    369c:	2200      	movs	r2, #0
    369e:	2580      	movs	r5, #128	; 0x80
        gpio1_irq_expected   = irq_mask;
    36a0:	4e4a      	ldr	r6, [pc, #296]	; (37cc <gpio_interrupt_test+0xdd4>)
    36a2:	4847      	ldr	r0, [pc, #284]	; (37c0 <gpio_interrupt_test+0xdc8>)
    36a4:	6033      	str	r3, [r6, #0]
        gpio1_irq_level_irq  = 0;
    36a6:	4e50      	ldr	r6, [pc, #320]	; (37e8 <gpio_interrupt_test+0xdf0>)
        gpio1_irq_occurred   = 0;
    36a8:	f8cb 2000 	str.w	r2, [fp]
        gpio1_irq_level_irq  = 0;
    36ac:	6032      	str	r2, [r6, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    36ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36b2:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
    36b6:	6005      	str	r5, [r0, #0]
    36b8:	6213      	str	r3, [r2, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    36ba:	4a49      	ldr	r2, [pc, #292]	; (37e0 <gpio_interrupt_test+0xde8>)
    36bc:	4294      	cmp	r4, r2
    36be:	f040 83c5 	bne.w	3e4c <gpio_interrupt_test+0x1454>
        if (gpio1_irq_occurred!=0) { err_code |= (1<<23);}
    36c2:	f8db 2000 	ldr.w	r2, [fp]
    36c6:	b10a      	cbz	r2, 36cc <gpio_interrupt_test+0xcd4>
    36c8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    36cc:	2200      	movs	r2, #0
    36ce:	4844      	ldr	r0, [pc, #272]	; (37e0 <gpio_interrupt_test+0xde8>)
    36d0:	6042      	str	r2, [r0, #4]
    36d2:	f3bf 8f6f 	isb	sy
    36d6:	f3bf 8f6f 	isb	sy
    36da:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred==0) { err_code |= (1<<24);}
    36de:	f8db 2000 	ldr.w	r2, [fp]
    36e2:	b90a      	cbnz	r2, 36e8 <gpio_interrupt_test+0xcf0>
    36e4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
        gpio1_irq_occurred   = 0;
    36e8:	2200      	movs	r2, #0
    36ea:	f8cb 2000 	str.w	r2, [fp]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    36ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36f2:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
    36f6:	6053      	str	r3, [r2, #4]
    36f8:	f3bf 8f6f 	isb	sy
    36fc:	f3bf 8f6f 	isb	sy
    3700:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<25);}
    3704:	f8db 2000 	ldr.w	r2, [fp]
    3708:	b10a      	cbz	r2, 370e <gpio_interrupt_test+0xd16>
    370a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    370e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3712:	4833      	ldr	r0, [pc, #204]	; (37e0 <gpio_interrupt_test+0xde8>)
    3714:	6242      	str	r2, [r0, #36]	; 0x24
        gpio1_irq_occurred   = 0;
    3716:	2200      	movs	r2, #0
    3718:	f8cb 2000 	str.w	r2, [fp]
        if (gpio1_irq_occurred!=0) { err_code |= (1<<26);}
    371c:	f8db 2000 	ldr.w	r2, [fp]
    3720:	b10a      	cbz	r2, 3726 <gpio_interrupt_test+0xd2e>
    3722:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    3726:	2200      	movs	r2, #0
    3728:	482d      	ldr	r0, [pc, #180]	; (37e0 <gpio_interrupt_test+0xde8>)
    372a:	6042      	str	r2, [r0, #4]
    372c:	f3bf 8f6f 	isb	sy
    3730:	f3bf 8f6f 	isb	sy
    3734:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<27);}
    3738:	f8db 2000 	ldr.w	r2, [fp]
    373c:	b10a      	cbz	r2, 3742 <gpio_interrupt_test+0xd4a>
    373e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
        gpio1_irq_occurred   = 0;
    3742:	2200      	movs	r2, #0
    3744:	f8cb 2000 	str.w	r2, [fp]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    3748:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    374c:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
    3750:	6053      	str	r3, [r2, #4]
    3752:	f3bf 8f6f 	isb	sy
    3756:	f3bf 8f6f 	isb	sy
    375a:	f3bf 8f6f 	isb	sy
        if (gpio1_irq_occurred!=0) { err_code |= (1<<28);}
    375e:	f8db 3000 	ldr.w	r3, [fp]
    3762:	2b00      	cmp	r3, #0
    3764:	f43f ad55 	beq.w	3212 <gpio_interrupt_test+0x81a>
    3768:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
        if (err_code != 0) {
    376c:	2900      	cmp	r1, #0
    376e:	f43f abda 	beq.w	2f26 <gpio_interrupt_test+0x52e>
    3772:	f7ff bbd3 	b.w	2f1c <gpio_interrupt_test+0x524>
        gpio0_irq_occurred   = 0;
    3776:	2200      	movs	r2, #0
    3778:	603a      	str	r2, [r7, #0]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<26);}
    377a:	683a      	ldr	r2, [r7, #0]
    377c:	b10a      	cbz	r2, 3782 <gpio_interrupt_test+0xd8a>
    377e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    3782:	2000      	movs	r0, #0
    3784:	4a15      	ldr	r2, [pc, #84]	; (37dc <gpio_interrupt_test+0xde4>)
    3786:	6050      	str	r0, [r2, #4]
    3788:	f3bf 8f6f 	isb	sy
    378c:	f3bf 8f6f 	isb	sy
    3790:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<27);}
    3794:	683a      	ldr	r2, [r7, #0]
    3796:	b10a      	cbz	r2, 379c <gpio_interrupt_test+0xda4>
    3798:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
        gpio0_irq_occurred   = 0;
    379c:	2000      	movs	r0, #0
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    379e:	4a0f      	ldr	r2, [pc, #60]	; (37dc <gpio_interrupt_test+0xde4>)
        gpio0_irq_occurred   = 0;
    37a0:	6038      	str	r0, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    37a2:	6053      	str	r3, [r2, #4]
    37a4:	f3bf 8f6f 	isb	sy
    37a8:	f3bf 8f6f 	isb	sy
    37ac:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<28);}
    37b0:	683a      	ldr	r2, [r7, #0]
    37b2:	2a00      	cmp	r2, #0
    37b4:	f43f ace1 	beq.w	317a <gpio_interrupt_test+0x782>
    37b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
    37bc:	e4dd      	b.n	317a <gpio_interrupt_test+0x782>
    37be:	bf00      	nop
    37c0:	e000e100 	.word	0xe000e100
    37c4:	20000074 	.word	0x20000074
    37c8:	200000b0 	.word	0x200000b0
    37cc:	2000008c 	.word	0x2000008c
    37d0:	20000098 	.word	0x20000098
    37d4:	20000088 	.word	0x20000088
    37d8:	20000094 	.word	0x20000094
    37dc:	40010000 	.word	0x40010000
    37e0:	40011000 	.word	0x40011000
    37e4:	40013000 	.word	0x40013000
    37e8:	200000b8 	.word	0x200000b8
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    37ec:	4a83      	ldr	r2, [pc, #524]	; (39fc <gpio_interrupt_test+0x1004>)
    37ee:	4294      	cmp	r4, r2
    37f0:	f040 8359 	bne.w	3ea6 <gpio_interrupt_test+0x14ae>
        if (gpio3_irq_occurred!=3) { err_code |= (1<<13);}
    37f4:	4a82      	ldr	r2, [pc, #520]	; (3a00 <gpio_interrupt_test+0x1008>)
    37f6:	6812      	ldr	r2, [r2, #0]
    37f8:	2a03      	cmp	r2, #3
    37fa:	d001      	beq.n	3800 <gpio_interrupt_test+0xe08>
    37fc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3800:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    3802:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3806:	4a7d      	ldr	r2, [pc, #500]	; (39fc <gpio_interrupt_test+0x1004>)
    3808:	6050      	str	r0, [r2, #4]
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    380a:	6255      	str	r5, [r2, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    380c:	f8ce 0000 	str.w	r0, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET    = irq_mask; /* Rising edge */
    3810:	6313      	str	r3, [r2, #48]	; 0x30
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Rising edge */
    3812:	6293      	str	r3, [r2, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000; /* Inactive */
    3814:	6050      	str	r0, [r2, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3816:	4a79      	ldr	r2, [pc, #484]	; (39fc <gpio_interrupt_test+0x1004>)
    3818:	4294      	cmp	r4, r2
    381a:	f040 836b 	bne.w	3ef4 <gpio_interrupt_test+0x14fc>
        gpio3_irq_occurred   = 0;
    381e:	2200      	movs	r2, #0
        gpio3_irq_expected   = irq_mask;
    3820:	4878      	ldr	r0, [pc, #480]	; (3a04 <gpio_interrupt_test+0x100c>)
    3822:	6003      	str	r3, [r0, #0]
        gpio3_irq_occurred   = 0;
    3824:	4876      	ldr	r0, [pc, #472]	; (3a00 <gpio_interrupt_test+0x1008>)
    3826:	6002      	str	r2, [r0, #0]
        gpio3_irq_level_irq  = 0;
    3828:	4877      	ldr	r0, [pc, #476]	; (3a08 <gpio_interrupt_test+0x1010>)
    382a:	6002      	str	r2, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    382c:	6223      	str	r3, [r4, #32]
        if (gpio3_irq_occurred!=0) { err_code |= (1<<14);}
    382e:	4a74      	ldr	r2, [pc, #464]	; (3a00 <gpio_interrupt_test+0x1008>)
    3830:	6812      	ldr	r2, [r2, #0]
    3832:	b10a      	cbz	r2, 3838 <gpio_interrupt_test+0xe40>
    3834:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3838:	4a70      	ldr	r2, [pc, #448]	; (39fc <gpio_interrupt_test+0x1004>)
    383a:	6053      	str	r3, [r2, #4]
    383c:	f3bf 8f6f 	isb	sy
    3840:	f3bf 8f6f 	isb	sy
    3844:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred==0) { err_code |= (1<<15);}
    3848:	4a6d      	ldr	r2, [pc, #436]	; (3a00 <gpio_interrupt_test+0x1008>)
    384a:	6812      	ldr	r2, [r2, #0]
    384c:	b90a      	cbnz	r2, 3852 <gpio_interrupt_test+0xe5a>
    384e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
        gpio3_irq_occurred   = 0;
    3852:	2200      	movs	r2, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    3854:	4869      	ldr	r0, [pc, #420]	; (39fc <gpio_interrupt_test+0x1004>)
        gpio3_irq_occurred   = 0;
    3856:	4d6a      	ldr	r5, [pc, #424]	; (3a00 <gpio_interrupt_test+0x1008>)
    3858:	602a      	str	r2, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    385a:	6042      	str	r2, [r0, #4]
    385c:	f3bf 8f6f 	isb	sy
    3860:	f3bf 8f6f 	isb	sy
    3864:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<16);}
    3868:	682a      	ldr	r2, [r5, #0]
    386a:	b10a      	cbz	r2, 3870 <gpio_interrupt_test+0xe78>
    386c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    3870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3874:	4a61      	ldr	r2, [pc, #388]	; (39fc <gpio_interrupt_test+0x1004>)
    3876:	6250      	str	r0, [r2, #36]	; 0x24
        gpio3_irq_occurred   = 0;
    3878:	2200      	movs	r2, #0
    387a:	4861      	ldr	r0, [pc, #388]	; (3a00 <gpio_interrupt_test+0x1008>)
    387c:	6002      	str	r2, [r0, #0]
        if (gpio3_irq_occurred!=0) { err_code |= (1<<17);}
    387e:	6802      	ldr	r2, [r0, #0]
    3880:	b10a      	cbz	r2, 3886 <gpio_interrupt_test+0xe8e>
    3882:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3886:	4a5d      	ldr	r2, [pc, #372]	; (39fc <gpio_interrupt_test+0x1004>)
    3888:	6053      	str	r3, [r2, #4]
    388a:	f3bf 8f6f 	isb	sy
    388e:	f3bf 8f6f 	isb	sy
    3892:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<18);}
    3896:	4a5a      	ldr	r2, [pc, #360]	; (3a00 <gpio_interrupt_test+0x1008>)
    3898:	6812      	ldr	r2, [r2, #0]
    389a:	b10a      	cbz	r2, 38a0 <gpio_interrupt_test+0xea8>
    389c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
        gpio3_irq_occurred   = 0;
    38a0:	2200      	movs	r2, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    38a2:	4856      	ldr	r0, [pc, #344]	; (39fc <gpio_interrupt_test+0x1004>)
        gpio3_irq_occurred   = 0;
    38a4:	4d56      	ldr	r5, [pc, #344]	; (3a00 <gpio_interrupt_test+0x1008>)
    38a6:	602a      	str	r2, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    38a8:	6042      	str	r2, [r0, #4]
    38aa:	f3bf 8f6f 	isb	sy
    38ae:	f3bf 8f6f 	isb	sy
    38b2:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<19);}
    38b6:	682a      	ldr	r2, [r5, #0]
    38b8:	b10a      	cbz	r2, 38be <gpio_interrupt_test+0xec6>
    38ba:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    38be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    38c2:	4a4e      	ldr	r2, [pc, #312]	; (39fc <gpio_interrupt_test+0x1004>)
    38c4:	6250      	str	r0, [r2, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;        /* Falling edge */
    38c6:	6350      	str	r0, [r2, #52]	; 0x34
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Falling edge */
    38c8:	6293      	str	r3, [r2, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = irq_mask; /* Inactive */
    38ca:	6053      	str	r3, [r2, #4]
        gpio3_irq_occurred   = 0;
    38cc:	2200      	movs	r2, #0
    38ce:	f44f 6500 	mov.w	r5, #2048	; 0x800
        gpio3_irq_expected   = irq_mask;
    38d2:	4e4c      	ldr	r6, [pc, #304]	; (3a04 <gpio_interrupt_test+0x100c>)
    38d4:	484d      	ldr	r0, [pc, #308]	; (3a0c <gpio_interrupt_test+0x1014>)
    38d6:	6033      	str	r3, [r6, #0]
        gpio3_irq_occurred   = 0;
    38d8:	4e49      	ldr	r6, [pc, #292]	; (3a00 <gpio_interrupt_test+0x1008>)
    38da:	6032      	str	r2, [r6, #0]
        gpio3_irq_level_irq  = 0;
    38dc:	4e4a      	ldr	r6, [pc, #296]	; (3a08 <gpio_interrupt_test+0x1010>)
    38de:	6032      	str	r2, [r6, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    38e0:	4a46      	ldr	r2, [pc, #280]	; (39fc <gpio_interrupt_test+0x1004>)
    38e2:	6045      	str	r5, [r0, #4]
    38e4:	6213      	str	r3, [r2, #32]
        if (gpio3_irq_occurred!=0) { err_code |= (1<<23);}
    38e6:	4a46      	ldr	r2, [pc, #280]	; (3a00 <gpio_interrupt_test+0x1008>)
    38e8:	6812      	ldr	r2, [r2, #0]
    38ea:	b10a      	cbz	r2, 38f0 <gpio_interrupt_test+0xef8>
    38ec:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    38f0:	2000      	movs	r0, #0
    38f2:	4a42      	ldr	r2, [pc, #264]	; (39fc <gpio_interrupt_test+0x1004>)
    38f4:	6050      	str	r0, [r2, #4]
    38f6:	f3bf 8f6f 	isb	sy
    38fa:	f3bf 8f6f 	isb	sy
    38fe:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred==0) { err_code |= (1<<24);}
    3902:	4a3f      	ldr	r2, [pc, #252]	; (3a00 <gpio_interrupt_test+0x1008>)
    3904:	6812      	ldr	r2, [r2, #0]
    3906:	b90a      	cbnz	r2, 390c <gpio_interrupt_test+0xf14>
    3908:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
        gpio3_irq_occurred   = 0;
    390c:	2000      	movs	r0, #0
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    390e:	4a3b      	ldr	r2, [pc, #236]	; (39fc <gpio_interrupt_test+0x1004>)
        gpio3_irq_occurred   = 0;
    3910:	4d3b      	ldr	r5, [pc, #236]	; (3a00 <gpio_interrupt_test+0x1008>)
    3912:	6028      	str	r0, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    3914:	6053      	str	r3, [r2, #4]
    3916:	f3bf 8f6f 	isb	sy
    391a:	f3bf 8f6f 	isb	sy
    391e:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<25);}
    3922:	682a      	ldr	r2, [r5, #0]
    3924:	b10a      	cbz	r2, 392a <gpio_interrupt_test+0xf32>
    3926:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    392a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    392e:	4a33      	ldr	r2, [pc, #204]	; (39fc <gpio_interrupt_test+0x1004>)
    3930:	6250      	str	r0, [r2, #36]	; 0x24
        gpio3_irq_occurred   = 0;
    3932:	2200      	movs	r2, #0
    3934:	4832      	ldr	r0, [pc, #200]	; (3a00 <gpio_interrupt_test+0x1008>)
    3936:	6002      	str	r2, [r0, #0]
        if (gpio3_irq_occurred!=0) { err_code |= (1<<26);}
    3938:	6802      	ldr	r2, [r0, #0]
    393a:	b10a      	cbz	r2, 3940 <gpio_interrupt_test+0xf48>
    393c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* active */
    3940:	2000      	movs	r0, #0
    3942:	4a2e      	ldr	r2, [pc, #184]	; (39fc <gpio_interrupt_test+0x1004>)
    3944:	6050      	str	r0, [r2, #4]
    3946:	f3bf 8f6f 	isb	sy
    394a:	f3bf 8f6f 	isb	sy
    394e:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<27);}
    3952:	4a2b      	ldr	r2, [pc, #172]	; (3a00 <gpio_interrupt_test+0x1008>)
    3954:	6812      	ldr	r2, [r2, #0]
    3956:	b10a      	cbz	r2, 395c <gpio_interrupt_test+0xf64>
    3958:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
        gpio3_irq_occurred   = 0;
    395c:	2000      	movs	r0, #0
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    395e:	4a27      	ldr	r2, [pc, #156]	; (39fc <gpio_interrupt_test+0x1004>)
        gpio3_irq_occurred   = 0;
    3960:	4d27      	ldr	r5, [pc, #156]	; (3a00 <gpio_interrupt_test+0x1008>)
    3962:	6028      	str	r0, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* rising edge, should not trigger */
    3964:	6053      	str	r3, [r2, #4]
    3966:	f3bf 8f6f 	isb	sy
    396a:	f3bf 8f6f 	isb	sy
    396e:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<28);}
    3972:	682b      	ldr	r3, [r5, #0]
    3974:	2b00      	cmp	r3, #0
    3976:	f47f aacf 	bne.w	2f18 <gpio_interrupt_test+0x520>
        if (err_code != 0) {
    397a:	2900      	cmp	r1, #0
    397c:	f43f aad3 	beq.w	2f26 <gpio_interrupt_test+0x52e>
    3980:	f7ff bacc 	b.w	2f1c <gpio_interrupt_test+0x524>
        gpio0_irq_occurred   = 0;
    3984:	2200      	movs	r2, #0
    3986:	603a      	str	r2, [r7, #0]
        if (gpio0_irq_occurred!=0) { err_code |= (1<<17);}
    3988:	683a      	ldr	r2, [r7, #0]
    398a:	b10a      	cbz	r2, 3990 <gpio_interrupt_test+0xf98>
    398c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3990:	4a1f      	ldr	r2, [pc, #124]	; (3a10 <gpio_interrupt_test+0x1018>)
    3992:	6053      	str	r3, [r2, #4]
    3994:	f3bf 8f6f 	isb	sy
    3998:	f3bf 8f6f 	isb	sy
    399c:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<18);}
    39a0:	683a      	ldr	r2, [r7, #0]
    39a2:	b10a      	cbz	r2, 39a8 <gpio_interrupt_test+0xfb0>
    39a4:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
        gpio0_irq_occurred   = 0;
    39a8:	2200      	movs	r2, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    39aa:	4819      	ldr	r0, [pc, #100]	; (3a10 <gpio_interrupt_test+0x1018>)
        gpio0_irq_occurred   = 0;
    39ac:	603a      	str	r2, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* falling edge, should not trigger */
    39ae:	6042      	str	r2, [r0, #4]
    39b0:	f3bf 8f6f 	isb	sy
    39b4:	f3bf 8f6f 	isb	sy
    39b8:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<19);}
    39bc:	683a      	ldr	r2, [r7, #0]
    39be:	2a00      	cmp	r2, #0
    39c0:	f43f ab8e 	beq.w	30e0 <gpio_interrupt_test+0x6e8>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    39c4:	4a12      	ldr	r2, [pc, #72]	; (3a10 <gpio_interrupt_test+0x1018>)
        if (gpio0_irq_occurred!=0) { err_code |= (1<<19);}
    39c6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    39ca:	4294      	cmp	r4, r2
    39cc:	f43f ab8c 	beq.w	30e8 <gpio_interrupt_test+0x6f0>
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF;
    39d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    39d4:	6260      	str	r0, [r4, #36]	; 0x24
      CM3DS_MPS2_GPIO->INTPOLCLR    = 0xFFFFFFFF;        /* Falling edge */
    39d6:	6360      	str	r0, [r4, #52]	; 0x34
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    39d8:	480e      	ldr	r0, [pc, #56]	; (3a14 <gpio_interrupt_test+0x101c>)
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Falling edge */
    39da:	62a3      	str	r3, [r4, #40]	; 0x28
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    39dc:	4284      	cmp	r4, r0
      CM3DS_MPS2_GPIO->DATAOUT      = irq_mask; /* Inactive */
    39de:	6063      	str	r3, [r4, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    39e0:	f43f ae5c 	beq.w	369c <gpio_interrupt_test+0xca4>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    39e4:	454c      	cmp	r4, r9
    39e6:	f43f aa3d 	beq.w	2e64 <gpio_interrupt_test+0x46c>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    39ea:	4804      	ldr	r0, [pc, #16]	; (39fc <gpio_interrupt_test+0x1004>)
    39ec:	4284      	cmp	r4, r0
    39ee:	f43f af6d 	beq.w	38cc <gpio_interrupt_test+0xed4>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    39f2:	4294      	cmp	r4, r2
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    39f4:	6223      	str	r3, [r4, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    39f6:	f43f ab8f 	beq.w	3118 <gpio_interrupt_test+0x720>
    39fa:	e65e      	b.n	36ba <gpio_interrupt_test+0xcc2>
    39fc:	40013000 	.word	0x40013000
    3a00:	20000094 	.word	0x20000094
    3a04:	20000088 	.word	0x20000088
    3a08:	200000b4 	.word	0x200000b4
    3a0c:	e000e100 	.word	0xe000e100
    3a10:	40010000 	.word	0x40010000
    3a14:	40011000 	.word	0x40011000
        if (gpio3_irq_occurred!=0) { err_code |= (1<<0);}
    3a18:	4891      	ldr	r0, [pc, #580]	; (3c60 <gpio_interrupt_test+0x1268>)
    3a1a:	6801      	ldr	r1, [r0, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    3a1c:	6062      	str	r2, [r4, #4]
        if (gpio3_irq_occurred!=0) { err_code |= (1<<0);}
    3a1e:	3100      	adds	r1, #0
    3a20:	bf18      	it	ne
    3a22:	2101      	movne	r1, #1
    3a24:	f3bf 8f6f 	isb	sy
    3a28:	f3bf 8f6f 	isb	sy
    3a2c:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred==0) { err_code |= (1<<1);}
    3a30:	6800      	ldr	r0, [r0, #0]
    3a32:	b908      	cbnz	r0, 3a38 <gpio_interrupt_test+0x1040>
    3a34:	f041 0102 	orr.w	r1, r1, #2
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3a38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    3a3c:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3a3e:	4d89      	ldr	r5, [pc, #548]	; (3c64 <gpio_interrupt_test+0x126c>)
    3a40:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
      gpio0_irq_expected     = 0;
    3a44:	4d88      	ldr	r5, [pc, #544]	; (3c68 <gpio_interrupt_test+0x1270>)
    3a46:	6028      	str	r0, [r5, #0]
      gpio1_irq_expected     = 0;
    3a48:	4d88      	ldr	r5, [pc, #544]	; (3c6c <gpio_interrupt_test+0x1274>)
    3a4a:	6028      	str	r0, [r5, #0]
      gpio2_irq_expected     = 0;
    3a4c:	4d88      	ldr	r5, [pc, #544]	; (3c70 <gpio_interrupt_test+0x1278>)
    3a4e:	6028      	str	r0, [r5, #0]
      gpio3_irq_expected     = 0;
    3a50:	4d88      	ldr	r5, [pc, #544]	; (3c74 <gpio_interrupt_test+0x127c>)
    3a52:	6028      	str	r0, [r5, #0]
      gpio3_irq_occurred     = 0;
    3a54:	4d82      	ldr	r5, [pc, #520]	; (3c60 <gpio_interrupt_test+0x1268>)
      gpio0_irq_occurred     = 0;
    3a56:	6038      	str	r0, [r7, #0]
      gpio1_irq_occurred     = 0;
    3a58:	f8cb 0000 	str.w	r0, [fp]
      gpio2_irq_occurred     = 0;
    3a5c:	f8ca 0000 	str.w	r0, [sl]
      gpio3_irq_occurred     = 0;
    3a60:	6028      	str	r0, [r5, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    3a62:	4880      	ldr	r0, [pc, #512]	; (3c64 <gpio_interrupt_test+0x126c>)
    3a64:	6042      	str	r2, [r0, #4]
    3a66:	f3bf 8f6f 	isb	sy
    3a6a:	f3bf 8f6f 	isb	sy
    3a6e:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<2);}
    3a72:	487b      	ldr	r0, [pc, #492]	; (3c60 <gpio_interrupt_test+0x1268>)
    3a74:	6800      	ldr	r0, [r0, #0]
    3a76:	b108      	cbz	r0, 3a7c <gpio_interrupt_test+0x1084>
    3a78:	f041 0104 	orr.w	r1, r1, #4
        CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3a7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3a80:	4878      	ldr	r0, [pc, #480]	; (3c64 <gpio_interrupt_test+0x126c>)
    3a82:	6045      	str	r5, [r0, #4]
    3a84:	f3bf 8f6f 	isb	sy
    3a88:	f3bf 8f6f 	isb	sy
    3a8c:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<3);}
    3a90:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3a92:	b108      	cbz	r0, 3a98 <gpio_interrupt_test+0x10a0>
    3a94:	f041 0108 	orr.w	r1, r1, #8
        gpio3_irq_occurred   = 0;
    3a98:	f04f 0c00 	mov.w	ip, #0
    3a9c:	f44f 6500 	mov.w	r5, #2048	; 0x800
        gpio3_irq_expected   = irq_mask;
    3aa0:	4e74      	ldr	r6, [pc, #464]	; (3c74 <gpio_interrupt_test+0x127c>)
    3aa2:	4875      	ldr	r0, [pc, #468]	; (3c78 <gpio_interrupt_test+0x1280>)
    3aa4:	6033      	str	r3, [r6, #0]
        gpio3_irq_occurred   = 0;
    3aa6:	4e6e      	ldr	r6, [pc, #440]	; (3c60 <gpio_interrupt_test+0x1268>)
    3aa8:	f8c6 c000 	str.w	ip, [r6]
    3aac:	6045      	str	r5, [r0, #4]
    3aae:	f7ff b8b6 	b.w	2c1e <gpio_interrupt_test+0x226>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3ab2:	4a6c      	ldr	r2, [pc, #432]	; (3c64 <gpio_interrupt_test+0x126c>)
    3ab4:	4294      	cmp	r4, r2
    3ab6:	f040 8212 	bne.w	3ede <gpio_interrupt_test+0x14e6>
        if (gpio3_irq_occurred!=3) { err_code |= (1<<6);}
    3aba:	4a69      	ldr	r2, [pc, #420]	; (3c60 <gpio_interrupt_test+0x1268>)
    3abc:	6812      	ldr	r2, [r2, #0]
    3abe:	2a03      	cmp	r2, #3
    3ac0:	d001      	beq.n	3ac6 <gpio_interrupt_test+0x10ce>
    3ac2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3ac6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3aca:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3acc:	4a65      	ldr	r2, [pc, #404]	; (3c64 <gpio_interrupt_test+0x126c>)
    3ace:	6055      	str	r5, [r2, #4]
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    3ad0:	6255      	str	r5, [r2, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3ad2:	f8ce 0000 	str.w	r0, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET = irq_mask; /* High level */
    3ad6:	6313      	str	r3, [r2, #48]	; 0x30
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3ad8:	6050      	str	r0, [r2, #4]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3ada:	4a62      	ldr	r2, [pc, #392]	; (3c64 <gpio_interrupt_test+0x126c>)
    3adc:	4294      	cmp	r4, r2
    3ade:	f040 81ee 	bne.w	3ebe <gpio_interrupt_test+0x14c6>
        gpio3_irq_occurred   = 0;
    3ae2:	2200      	movs	r2, #0
        gpio3_irq_expected   = irq_mask;
    3ae4:	4863      	ldr	r0, [pc, #396]	; (3c74 <gpio_interrupt_test+0x127c>)
    3ae6:	6003      	str	r3, [r0, #0]
        gpio3_irq_occurred   = 0;
    3ae8:	485d      	ldr	r0, [pc, #372]	; (3c60 <gpio_interrupt_test+0x1268>)
    3aea:	6002      	str	r2, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    3aec:	6223      	str	r3, [r4, #32]
        if (gpio3_irq_occurred!=0) { err_code |= (1<<7);}
    3aee:	4a5c      	ldr	r2, [pc, #368]	; (3c60 <gpio_interrupt_test+0x1268>)
    3af0:	6812      	ldr	r2, [r2, #0]
    3af2:	b10a      	cbz	r2, 3af8 <gpio_interrupt_test+0x1100>
    3af4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3af8:	4a5a      	ldr	r2, [pc, #360]	; (3c64 <gpio_interrupt_test+0x126c>)
    3afa:	6053      	str	r3, [r2, #4]
    3afc:	f3bf 8f6f 	isb	sy
    3b00:	f3bf 8f6f 	isb	sy
    3b04:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred==0) { err_code |= (1<<8);}
    3b08:	4a55      	ldr	r2, [pc, #340]	; (3c60 <gpio_interrupt_test+0x1268>)
    3b0a:	6812      	ldr	r2, [r2, #0]
    3b0c:	b90a      	cbnz	r2, 3b12 <gpio_interrupt_test+0x111a>
    3b0e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3b12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      gpio0_irq_expected     = 0;
    3b16:	2200      	movs	r2, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF;
    3b18:	4852      	ldr	r0, [pc, #328]	; (3c64 <gpio_interrupt_test+0x126c>)
    3b1a:	6245      	str	r5, [r0, #36]	; 0x24
      gpio0_irq_expected     = 0;
    3b1c:	4852      	ldr	r0, [pc, #328]	; (3c68 <gpio_interrupt_test+0x1270>)
    3b1e:	6002      	str	r2, [r0, #0]
      gpio1_irq_expected     = 0;
    3b20:	4852      	ldr	r0, [pc, #328]	; (3c6c <gpio_interrupt_test+0x1274>)
    3b22:	6002      	str	r2, [r0, #0]
      gpio2_irq_expected     = 0;
    3b24:	4852      	ldr	r0, [pc, #328]	; (3c70 <gpio_interrupt_test+0x1278>)
    3b26:	6002      	str	r2, [r0, #0]
      gpio3_irq_expected     = 0;
    3b28:	4852      	ldr	r0, [pc, #328]	; (3c74 <gpio_interrupt_test+0x127c>)
    3b2a:	6002      	str	r2, [r0, #0]
      gpio3_irq_occurred     = 0;
    3b2c:	484c      	ldr	r0, [pc, #304]	; (3c60 <gpio_interrupt_test+0x1268>)
      gpio0_irq_occurred     = 0;
    3b2e:	603a      	str	r2, [r7, #0]
      gpio1_irq_occurred     = 0;
    3b30:	f8cb 2000 	str.w	r2, [fp]
      gpio2_irq_occurred     = 0;
    3b34:	f8ca 2000 	str.w	r2, [sl]
      gpio3_irq_occurred     = 0;
    3b38:	6002      	str	r2, [r0, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3b3a:	4a4a      	ldr	r2, [pc, #296]	; (3c64 <gpio_interrupt_test+0x126c>)
    3b3c:	6053      	str	r3, [r2, #4]
    3b3e:	f3bf 8f6f 	isb	sy
    3b42:	f3bf 8f6f 	isb	sy
    3b46:	f3bf 8f6f 	isb	sy
        if (gpio3_irq_occurred!=0) { err_code |= (1<<9);}
    3b4a:	4a45      	ldr	r2, [pc, #276]	; (3c60 <gpio_interrupt_test+0x1268>)
    3b4c:	6812      	ldr	r2, [r2, #0]
    3b4e:	b10a      	cbz	r2, 3b54 <gpio_interrupt_test+0x115c>
    3b50:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3b54:	2000      	movs	r0, #0
    3b56:	4a43      	ldr	r2, [pc, #268]	; (3c64 <gpio_interrupt_test+0x126c>)
    3b58:	6050      	str	r0, [r2, #4]
    3b5a:	f3bf 8f6f 	isb	sy
    3b5e:	f3bf 8f6f 	isb	sy
    3b62:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<10);}
    3b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
    3b68:	b10a      	cbz	r2, 3b6e <gpio_interrupt_test+0x1176>
    3b6a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
        gpio3_irq_occurred   = 0;
    3b6e:	2500      	movs	r5, #0
    3b70:	f44f 6000 	mov.w	r0, #2048	; 0x800
        gpio3_irq_expected   = irq_mask;
    3b74:	4e3f      	ldr	r6, [pc, #252]	; (3c74 <gpio_interrupt_test+0x127c>)
    3b76:	4a40      	ldr	r2, [pc, #256]	; (3c78 <gpio_interrupt_test+0x1280>)
    3b78:	6033      	str	r3, [r6, #0]
        gpio3_irq_occurred   = 0;
    3b7a:	4e39      	ldr	r6, [pc, #228]	; (3c60 <gpio_interrupt_test+0x1268>)
    3b7c:	6035      	str	r5, [r6, #0]
    3b7e:	6050      	str	r0, [r2, #4]
    3b80:	f7ff b8c9 	b.w	2d16 <gpio_interrupt_test+0x31e>
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3b84:	6063      	str	r3, [r4, #4]
    3b86:	f3bf 8f6f 	isb	sy
    3b8a:	f3bf 8f6f 	isb	sy
    3b8e:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<9);}
    3b92:	683a      	ldr	r2, [r7, #0]
    3b94:	b10a      	cbz	r2, 3b9a <gpio_interrupt_test+0x11a2>
    3b96:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3b9a:	2000      	movs	r0, #0
    3b9c:	4a37      	ldr	r2, [pc, #220]	; (3c7c <gpio_interrupt_test+0x1284>)
    3b9e:	6050      	str	r0, [r2, #4]
    3ba0:	f3bf 8f6f 	isb	sy
    3ba4:	f3bf 8f6f 	isb	sy
    3ba8:	f3bf 8f6f 	isb	sy
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<10);}
    3bac:	6b92      	ldr	r2, [r2, #56]	; 0x38
    3bae:	2a00      	cmp	r2, #0
    3bb0:	f43f abd2 	beq.w	3358 <gpio_interrupt_test+0x960>
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    3bb4:	4a31      	ldr	r2, [pc, #196]	; (3c7c <gpio_interrupt_test+0x1284>)
        if (CM3DS_MPS2_GPIO->INTSTATUS!=0){ err_code |= (1<<10);}
    3bb6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if ((CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) && (test_individual_irq!=0)) {
    3bba:	4294      	cmp	r4, r2
    3bbc:	f43f abd0 	beq.w	3360 <gpio_interrupt_test+0x968>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    3bc0:	4a2f      	ldr	r2, [pc, #188]	; (3c80 <gpio_interrupt_test+0x1288>)
    3bc2:	4294      	cmp	r4, r2
    3bc4:	f43f ac32 	beq.w	342c <gpio_interrupt_test+0xa34>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    3bc8:	454c      	cmp	r4, r9
    3bca:	f43f a89b 	beq.w	2d04 <gpio_interrupt_test+0x30c>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3bce:	4a25      	ldr	r2, [pc, #148]	; (3c64 <gpio_interrupt_test+0x126c>)
    3bd0:	4294      	cmp	r4, r2
    3bd2:	d0cc      	beq.n	3b6e <gpio_interrupt_test+0x1176>
    3bd4:	f7ff b89f 	b.w	2d16 <gpio_interrupt_test+0x31e>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3bd8:	2001      	movs	r0, #1
        gpio0_irq_flags[irq_num]=0;
    3bda:	f04f 0c00 	mov.w	ip, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3bde:	2540      	movs	r5, #64	; 0x40
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3be0:	f108 0210 	add.w	r2, r8, #16
    3be4:	fa00 f202 	lsl.w	r2, r0, r2
    3be8:	4e26      	ldr	r6, [pc, #152]	; (3c84 <gpio_interrupt_test+0x128c>)
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3bea:	4823      	ldr	r0, [pc, #140]	; (3c78 <gpio_interrupt_test+0x1280>)
    3bec:	f806 c008 	strb.w	ip, [r6, r8]
    3bf0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3bf4:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3bf8:	6002      	str	r2, [r0, #0]
        gpio0_irq_expected     = irq_mask;
    3bfa:	481b      	ldr	r0, [pc, #108]	; (3c68 <gpio_interrupt_test+0x1270>)
    3bfc:	6003      	str	r3, [r0, #0]
        CM3DS_MPS2_GPIO->INTENSET     = irq_mask;
    3bfe:	6223      	str	r3, [r4, #32]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3c00:	6063      	str	r3, [r4, #4]
    3c02:	f3bf 8f6f 	isb	sy
    3c06:	f3bf 8f6f 	isb	sy
    3c0a:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<20);}
    3c0e:	6838      	ldr	r0, [r7, #0]
    3c10:	b908      	cbnz	r0, 3c16 <gpio_interrupt_test+0x121e>
    3c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
        if (gpio0_irq_flags[irq_num]==0) { err_code |= (1<<21);}
    3c16:	481b      	ldr	r0, [pc, #108]	; (3c84 <gpio_interrupt_test+0x128c>)
    3c18:	f810 0008 	ldrb.w	r0, [r0, r8]
    3c1c:	b908      	cbnz	r0, 3c22 <gpio_interrupt_test+0x122a>
    3c1e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
        gpio0_irq_occurred = 0;
    3c22:	2000      	movs	r0, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0x0; /* Inactive */
    3c24:	4d15      	ldr	r5, [pc, #84]	; (3c7c <gpio_interrupt_test+0x1284>)
        gpio0_irq_occurred = 0;
    3c26:	6038      	str	r0, [r7, #0]
        CM3DS_MPS2_GPIO->DATAOUT   = 0x0; /* Inactive */
    3c28:	6068      	str	r0, [r5, #4]
    3c2a:	f3bf 8f6f 	isb	sy
    3c2e:	f3bf 8f6f 	isb	sy
    3c32:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred!=0) { err_code |= (1<<22);}
    3c36:	6838      	ldr	r0, [r7, #0]
    3c38:	b108      	cbz	r0, 3c3e <gpio_interrupt_test+0x1246>
    3c3a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3c3e:	f04f 0c40 	mov.w	ip, #64	; 0x40
        gpio0_irq_flags[irq_num]= 0;
    3c42:	2000      	movs	r0, #0
    3c44:	4d0c      	ldr	r5, [pc, #48]	; (3c78 <gpio_interrupt_test+0x1280>)
    3c46:	f8c5 c180 	str.w	ip, [r5, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3c4a:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
    3c4e:	4a0d      	ldr	r2, [pc, #52]	; (3c84 <gpio_interrupt_test+0x128c>)
    3c50:	f802 0008 	strb.w	r0, [r2, r8]
        gpio0_irq_expected      = 0;
    3c54:	4a04      	ldr	r2, [pc, #16]	; (3c68 <gpio_interrupt_test+0x1270>)
    3c56:	6010      	str	r0, [r2, #0]
        gpio0_irq_occurred      = 0;
    3c58:	6038      	str	r0, [r7, #0]
    3c5a:	f7ff ba49 	b.w	30f0 <gpio_interrupt_test+0x6f8>
    3c5e:	bf00      	nop
    3c60:	20000094 	.word	0x20000094
    3c64:	40013000 	.word	0x40013000
    3c68:	20000074 	.word	0x20000074
    3c6c:	2000008c 	.word	0x2000008c
    3c70:	20000098 	.word	0x20000098
    3c74:	20000088 	.word	0x20000088
    3c78:	e000e100 	.word	0xe000e100
    3c7c:	40010000 	.word	0x40010000
    3c80:	40011000 	.word	0x40011000
    3c84:	20000078 	.word	0x20000078
        gpio0_irq_flags[irq_num]=0;
    3c88:	f04f 0c00 	mov.w	ip, #0
    3c8c:	4ea1      	ldr	r6, [pc, #644]	; (3f14 <gpio_interrupt_test+0x151c>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3c8e:	2501      	movs	r5, #1
    3c90:	f806 c008 	strb.w	ip, [r6, r8]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3c94:	2640      	movs	r6, #64	; 0x40
    3c96:	48a0      	ldr	r0, [pc, #640]	; (3f18 <gpio_interrupt_test+0x1520>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3c98:	f108 0210 	add.w	r2, r8, #16
    3c9c:	fa05 f202 	lsl.w	r2, r5, r2
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3ca0:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3ca4:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3ca8:	6002      	str	r2, [r0, #0]
        gpio0_irq_expected     = irq_mask;
    3caa:	489c      	ldr	r0, [pc, #624]	; (3f1c <gpio_interrupt_test+0x1524>)
    3cac:	6003      	str	r3, [r0, #0]
        gpio0_irq_level_irq    = 1;
    3cae:	489c      	ldr	r0, [pc, #624]	; (3f20 <gpio_interrupt_test+0x1528>)
    3cb0:	6005      	str	r5, [r0, #0]
        CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    3cb2:	6223      	str	r3, [r4, #32]
        CM3DS_MPS2_GPIO->DATAOUT   = irq_mask; /* active */
    3cb4:	6063      	str	r3, [r4, #4]
    3cb6:	f3bf 8f6f 	isb	sy
    3cba:	f3bf 8f6f 	isb	sy
    3cbe:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<11);}
    3cc2:	6838      	ldr	r0, [r7, #0]
    3cc4:	b908      	cbnz	r0, 3cca <gpio_interrupt_test+0x12d2>
    3cc6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
      if (gpio0_irq_flags[irq_num]==0) { err_code |= (1<<12);}
    3cca:	4892      	ldr	r0, [pc, #584]	; (3f14 <gpio_interrupt_test+0x151c>)
    3ccc:	f810 0008 	ldrb.w	r0, [r0, r8]
    3cd0:	b908      	cbnz	r0, 3cd6 <gpio_interrupt_test+0x12de>
    3cd2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        CM3DS_MPS2_GPIO->DATAOUT   = 0x0; /* Inactive */
    3cd6:	2000      	movs	r0, #0
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3cd8:	f04f 0c40 	mov.w	ip, #64	; 0x40
    3cdc:	4d8e      	ldr	r5, [pc, #568]	; (3f18 <gpio_interrupt_test+0x1520>)
    3cde:	4e91      	ldr	r6, [pc, #580]	; (3f24 <gpio_interrupt_test+0x152c>)
    3ce0:	6070      	str	r0, [r6, #4]
    3ce2:	f8c5 c180 	str.w	ip, [r5, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3ce6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
        gpio0_irq_flags[irq_num]= 0;
    3cea:	4a8a      	ldr	r2, [pc, #552]	; (3f14 <gpio_interrupt_test+0x151c>)
    3cec:	f802 0008 	strb.w	r0, [r2, r8]
        gpio0_irq_expected      = 0;
    3cf0:	4a8a      	ldr	r2, [pc, #552]	; (3f1c <gpio_interrupt_test+0x1524>)
    3cf2:	6010      	str	r0, [r2, #0]
        gpio0_irq_occurred      = 0;
    3cf4:	6038      	str	r0, [r7, #0]
    3cf6:	f7ff bb37 	b.w	3368 <gpio_interrupt_test+0x970>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3cfa:	2601      	movs	r6, #1
        gpio0_irq_flags[irq_num]=0;
    3cfc:	f04f 0c00 	mov.w	ip, #0
    3d00:	f108 0010 	add.w	r0, r8, #16
    3d04:	fa06 f000 	lsl.w	r0, r6, r0
    3d08:	4e82      	ldr	r6, [pc, #520]	; (3f14 <gpio_interrupt_test+0x151c>)
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3d0a:	4d83      	ldr	r5, [pc, #524]	; (3f18 <gpio_interrupt_test+0x1520>)
    3d0c:	f806 c008 	strb.w	ip, [r6, r8]
    3d10:	2640      	movs	r6, #64	; 0x40
    3d12:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
        gpio0_irq_level_irq    = 1;
    3d16:	2601      	movs	r6, #1
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3d18:	f8c5 0180 	str.w	r0, [r5, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3d1c:	6028      	str	r0, [r5, #0]
        gpio0_irq_expected     = irq_mask;
    3d1e:	4d7f      	ldr	r5, [pc, #508]	; (3f1c <gpio_interrupt_test+0x1524>)
    3d20:	602b      	str	r3, [r5, #0]
        gpio0_irq_level_irq    = 1;
    3d22:	4d7f      	ldr	r5, [pc, #508]	; (3f20 <gpio_interrupt_test+0x1528>)
    3d24:	602e      	str	r6, [r5, #0]
        CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    3d26:	6223      	str	r3, [r4, #32]
        CM3DS_MPS2_GPIO->DATAOUT   = ~irq_mask; /* active */
    3d28:	6062      	str	r2, [r4, #4]
    3d2a:	f3bf 8f6f 	isb	sy
    3d2e:	f3bf 8f6f 	isb	sy
    3d32:	f3bf 8f6f 	isb	sy
        if (gpio0_irq_occurred==0) { err_code |= (1<<4);}
    3d36:	683d      	ldr	r5, [r7, #0]
    3d38:	b90d      	cbnz	r5, 3d3e <gpio_interrupt_test+0x1346>
    3d3a:	f041 0110 	orr.w	r1, r1, #16
        if (gpio0_irq_flags[irq_num]==0) { err_code |= (1<<5);}
    3d3e:	4d75      	ldr	r5, [pc, #468]	; (3f14 <gpio_interrupt_test+0x151c>)
    3d40:	f815 5008 	ldrb.w	r5, [r5, r8]
    3d44:	b90d      	cbnz	r5, 3d4a <gpio_interrupt_test+0x1352>
    3d46:	f041 0120 	orr.w	r1, r1, #32
        CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3d4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3d4e:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 3f24 <gpio_interrupt_test+0x152c>
        gpio0_irq_flags[irq_num]= 0;
    3d52:	2500      	movs	r5, #0
        CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3d54:	f8cc 6004 	str.w	r6, [ip, #4]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3d58:	2640      	movs	r6, #64	; 0x40
    3d5a:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3f18 <gpio_interrupt_test+0x1520>
    3d5e:	f8cc 6180 	str.w	r6, [ip, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3d62:	f8cc 0080 	str.w	r0, [ip, #128]	; 0x80
        gpio0_irq_flags[irq_num]= 0;
    3d66:	486b      	ldr	r0, [pc, #428]	; (3f14 <gpio_interrupt_test+0x151c>)
    3d68:	f800 5008 	strb.w	r5, [r0, r8]
        gpio0_irq_expected      = 0;
    3d6c:	486b      	ldr	r0, [pc, #428]	; (3f1c <gpio_interrupt_test+0x1524>)
    3d6e:	6005      	str	r5, [r0, #0]
        gpio0_irq_occurred      = 0;
    3d70:	603d      	str	r5, [r7, #0]
    3d72:	f7ff ba8d 	b.w	3290 <gpio_interrupt_test+0x898>
    puts("Less then 32 IRQ in design\n");
    3d76:	486c      	ldr	r0, [pc, #432]	; (3f28 <gpio_interrupt_test+0x1530>)
    3d78:	f000 ff80 	bl	4c7c <puts>
    test_individual_irq = 0;
    3d7c:	2300      	movs	r3, #0
    3d7e:	9302      	str	r3, [sp, #8]
    3d80:	f7fe be8f 	b.w	2aa2 <gpio_interrupt_test+0xaa>
    3d84:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
    3d88:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    3d8c:	f44f 3a00 	mov.w	sl, #131072	; 0x20000
    3d90:	f44f 2980 	mov.w	r9, #262144	; 0x40000
    3d94:	f44f 2800 	mov.w	r8, #524288	; 0x80000
    3d98:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
    3d9c:	f44f 1c00 	mov.w	ip, #2097152	; 0x200000
    3da0:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3da4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3da8:	f8c3 b080 	str.w	fp, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3dac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3db0:	f8c3 a080 	str.w	sl, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3db4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3db8:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3dbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3dc0:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3dc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3dc8:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3dcc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3dd0:	f8c3 c080 	str.w	ip, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3dd4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3dd8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3ddc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3de0:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
    3de4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3de8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3dec:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
    3df0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3df4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3df8:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
    3dfc:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3e08:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
    3e0c:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
    3e10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3e14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3e18:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e20:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e28:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e30:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e34:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e38:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e40:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    3e44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3e48:	f7ff b8a8 	b.w	2f9c <gpio_interrupt_test+0x5a4>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    3e4c:	454c      	cmp	r4, r9
    3e4e:	f43f a816 	beq.w	2e7e <gpio_interrupt_test+0x486>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3e52:	4a36      	ldr	r2, [pc, #216]	; (3f2c <gpio_interrupt_test+0x1534>)
    3e54:	4294      	cmp	r4, r2
    3e56:	f47f a97e 	bne.w	3156 <gpio_interrupt_test+0x75e>
    3e5a:	e544      	b.n	38e6 <gpio_interrupt_test+0xeee>
    gpio_datamask        = 0xFFFFFDFF;
    3e5c:	f46f 7300 	mvn.w	r3, #512	; 0x200
    3e60:	9301      	str	r3, [sp, #4]
    3e62:	f7fe bde5 	b.w	2a30 <gpio_interrupt_test+0x38>
  if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3e66:	4b31      	ldr	r3, [pc, #196]	; (3f2c <gpio_interrupt_test+0x1534>)
    3e68:	429c      	cmp	r4, r3
    3e6a:	d114      	bne.n	3e96 <gpio_interrupt_test+0x149e>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    3e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3e70:	4b29      	ldr	r3, [pc, #164]	; (3f18 <gpio_interrupt_test+0x1520>)
    3e72:	605a      	str	r2, [r3, #4]
    if ((NVIC->ISER[1] & (1<<(PORT3_ALL_IRQn-32)))==0) {
    3e74:	685b      	ldr	r3, [r3, #4]
    3e76:	051a      	lsls	r2, r3, #20
    3e78:	d507      	bpl.n	3e8a <gpio_interrupt_test+0x1492>
  int return_val=0;
    3e7a:	9503      	str	r5, [sp, #12]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3e80:	4b25      	ldr	r3, [pc, #148]	; (3f18 <gpio_interrupt_test+0x1520>)
    3e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3e86:	f7fe be02 	b.w	2a8e <gpio_interrupt_test+0x96>
      puts("Interrupt PORT3_ALL_IRQn not available.");
    3e8a:	4829      	ldr	r0, [pc, #164]	; (3f30 <gpio_interrupt_test+0x1538>)
    3e8c:	f000 fef6 	bl	4c7c <puts>
      return_val =1;
    3e90:	2301      	movs	r3, #1
    3e92:	9303      	str	r3, [sp, #12]
    3e94:	e7f2      	b.n	3e7c <gpio_interrupt_test+0x1484>
  int return_val=0;
    3e96:	9503      	str	r5, [sp, #12]
    3e98:	f7fe bdf9 	b.w	2a8e <gpio_interrupt_test+0x96>
      gpio0_irq_level_irq    = 1;
    3e9c:	4820      	ldr	r0, [pc, #128]	; (3f20 <gpio_interrupt_test+0x1528>)
    3e9e:	6001      	str	r1, [r0, #0]
      CM3DS_MPS2_GPIO->INTENSET  = irq_mask;
    3ea0:	6223      	str	r3, [r4, #32]
    3ea2:	f7ff bad4 	b.w	344e <gpio_interrupt_test+0xa56>
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3ea6:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    3ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3eac:	6060      	str	r0, [r4, #4]
      CM3DS_MPS2_GPIO->INTENCLR  = 0xFFFFFFFF; /* Disable */
    3eae:	6262      	str	r2, [r4, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3eb0:	f8ce 0000 	str.w	r0, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET    = irq_mask; /* Rising edge */
    3eb4:	6323      	str	r3, [r4, #48]	; 0x30
      CM3DS_MPS2_GPIO->INTTYPESET   = irq_mask; /* Rising edge */
    3eb6:	62a3      	str	r3, [r4, #40]	; 0x28
      CM3DS_MPS2_GPIO->DATAOUT      = 0x00000000; /* Inactive */
    3eb8:	6060      	str	r0, [r4, #4]
    3eba:	f7ff bb92 	b.w	35e2 <gpio_interrupt_test+0xbea>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3ebe:	4819      	ldr	r0, [pc, #100]	; (3f24 <gpio_interrupt_test+0x152c>)
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    3ec0:	6223      	str	r3, [r4, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3ec2:	4284      	cmp	r4, r0
    3ec4:	f43f aa17 	beq.w	32f6 <gpio_interrupt_test+0x8fe>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    3ec8:	481a      	ldr	r0, [pc, #104]	; (3f34 <gpio_interrupt_test+0x153c>)
    3eca:	4284      	cmp	r4, r0
    3ecc:	f43f aa6e 	beq.w	33ac <gpio_interrupt_test+0x9b4>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    3ed0:	454c      	cmp	r4, r9
    3ed2:	f43e aed6 	beq.w	2c82 <gpio_interrupt_test+0x28a>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3ed6:	4294      	cmp	r4, r2
    3ed8:	f47f aa1d 	bne.w	3316 <gpio_interrupt_test+0x91e>
    3edc:	e607      	b.n	3aee <gpio_interrupt_test+0x10f6>
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3ee2:	2000      	movs	r0, #0
      CM3DS_MPS2_GPIO->DATAOUT   = 0xFFFFFFFF; /* Inactive */
    3ee4:	6062      	str	r2, [r4, #4]
      CM3DS_MPS2_GPIO->INTENCLR     = 0xFFFFFFFF; /* Disable */
    3ee6:	6262      	str	r2, [r4, #36]	; 0x24
      multi_irq_test = 0; /* Disable multiple IRQ test */
    3ee8:	f8ce 0000 	str.w	r0, [lr]
      CM3DS_MPS2_GPIO->INTPOLSET = irq_mask; /* High level */
    3eec:	6323      	str	r3, [r4, #48]	; 0x30
      CM3DS_MPS2_GPIO->DATAOUT   = 0x00000000; /* Inactive */
    3eee:	6060      	str	r0, [r4, #4]
    3ef0:	f7ff ba52 	b.w	3398 <gpio_interrupt_test+0x9a0>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3ef4:	480b      	ldr	r0, [pc, #44]	; (3f24 <gpio_interrupt_test+0x152c>)
      CM3DS_MPS2_GPIO->INTENSET     = irq_mask; /* Enable */
    3ef6:	6223      	str	r3, [r4, #32]
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO0) {
    3ef8:	4284      	cmp	r4, r0
    3efa:	f43f a8c1 	beq.w	3080 <gpio_interrupt_test+0x688>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO1) {
    3efe:	480d      	ldr	r0, [pc, #52]	; (3f34 <gpio_interrupt_test+0x153c>)
    3f00:	4284      	cmp	r4, r0
    3f02:	f43f ab7a 	beq.w	35fa <gpio_interrupt_test+0xc02>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO2) {
    3f06:	454c      	cmp	r4, r9
    3f08:	f43e af3b 	beq.w	2d82 <gpio_interrupt_test+0x38a>
      if (CM3DS_MPS2_GPIO==CM3DS_MPS2_GPIO3) {
    3f0c:	4294      	cmp	r4, r2
    3f0e:	f47f a8d5 	bne.w	30bc <gpio_interrupt_test+0x6c4>
    3f12:	e48c      	b.n	382e <gpio_interrupt_test+0xe36>
    3f14:	20000078 	.word	0x20000078
    3f18:	e000e100 	.word	0xe000e100
    3f1c:	20000074 	.word	0x20000074
    3f20:	200000b0 	.word	0x200000b0
    3f24:	40010000 	.word	0x40010000
    3f28:	00006158 	.word	0x00006158
    3f2c:	40013000 	.word	0x40013000
    3f30:	00006338 	.word	0x00006338
    3f34:	40011000 	.word	0x40011000

00003f38 <PORT0_COMB_Handler>:
/* --------------------------------------- */
/* Combined interrupt handler for GPIO #0  */
/*                                         */
void PORT0_COMB_Handler(void)
{
    3f38:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    3f3a:	4b13      	ldr	r3, [pc, #76]	; (3f88 <PORT0_COMB_Handler+0x50>)
    3f3c:	681a      	ldr	r2, [r3, #0]
    3f3e:	b18a      	cbz	r2, 3f64 <PORT0_COMB_Handler+0x2c>
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    UartEndSimulation();
    while (1);
    }
  else if (gpio0_irq_level_irq!=0) {
    3f40:	4a12      	ldr	r2, [pc, #72]	; (3f8c <PORT0_COMB_Handler+0x54>)
    3f42:	6812      	ldr	r2, [r2, #0]
    3f44:	b132      	cbz	r2, 3f54 <PORT0_COMB_Handler+0x1c>
    if (multi_irq_test > 1) {
    3f46:	4a12      	ldr	r2, [pc, #72]	; (3f90 <PORT0_COMB_Handler+0x58>)
    3f48:	6811      	ldr	r1, [r2, #0]
    3f4a:	2901      	cmp	r1, #1
    3f4c:	dd10      	ble.n	3f70 <PORT0_COMB_Handler+0x38>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    3f4e:	6811      	ldr	r1, [r2, #0]
    3f50:	3901      	subs	r1, #1
    3f52:	6011      	str	r1, [r2, #0]
      /* Deassert interrupt source */
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
      medium_delay();
      }
    }
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    3f54:	6819      	ldr	r1, [r3, #0]
    3f56:	4b0f      	ldr	r3, [pc, #60]	; (3f94 <PORT0_COMB_Handler+0x5c>)
  gpio0_irq_occurred++;
    3f58:	4a0f      	ldr	r2, [pc, #60]	; (3f98 <PORT0_COMB_Handler+0x60>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    3f5a:	6399      	str	r1, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    3f5c:	6813      	ldr	r3, [r2, #0]
    3f5e:	3301      	adds	r3, #1
    3f60:	6013      	str	r3, [r2, #0]
  return;
}
    3f62:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    3f64:	480d      	ldr	r0, [pc, #52]	; (3f9c <PORT0_COMB_Handler+0x64>)
    3f66:	f000 fe89 	bl	4c7c <puts>
    UartEndSimulation();
    3f6a:	f000 fddf 	bl	4b2c <UartEndSimulation>
    3f6e:	e7fe      	b.n	3f6e <PORT0_COMB_Handler+0x36>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    3f70:	4908      	ldr	r1, [pc, #32]	; (3f94 <PORT0_COMB_Handler+0x5c>)
    3f72:	6848      	ldr	r0, [r1, #4]
    3f74:	681a      	ldr	r2, [r3, #0]
    3f76:	4042      	eors	r2, r0
    3f78:	604a      	str	r2, [r1, #4]
    3f7a:	f3bf 8f6f 	isb	sy
    3f7e:	f3bf 8f6f 	isb	sy
    3f82:	f3bf 8f6f 	isb	sy
    3f86:	e7e5      	b.n	3f54 <PORT0_COMB_Handler+0x1c>
    3f88:	20000074 	.word	0x20000074
    3f8c:	200000b0 	.word	0x200000b0
    3f90:	200000a4 	.word	0x200000a4
    3f94:	40010000 	.word	0x40010000
    3f98:	200000a8 	.word	0x200000a8
    3f9c:	00006540 	.word	0x00006540

00003fa0 <PORT1_COMB_Handler>:

/* --------------------------------------- */
/* Combined interrupt handler for GPIO #1  */
/*                                         */
void PORT1_COMB_Handler(void)
{
    3fa0:	b508      	push	{r3, lr}
  if (gpio1_irq_expected==0) {
    3fa2:	4b13      	ldr	r3, [pc, #76]	; (3ff0 <PORT1_COMB_Handler+0x50>)
    3fa4:	681a      	ldr	r2, [r3, #0]
    3fa6:	b18a      	cbz	r2, 3fcc <PORT1_COMB_Handler+0x2c>
    puts ("ERROR : Unexpected GPIO 1 interrupt occurred.\n");
    UartEndSimulation();
    while (1);
    }
  else if (gpio1_irq_level_irq!=0) {
    3fa8:	4a12      	ldr	r2, [pc, #72]	; (3ff4 <PORT1_COMB_Handler+0x54>)
    3faa:	6812      	ldr	r2, [r2, #0]
    3fac:	b132      	cbz	r2, 3fbc <PORT1_COMB_Handler+0x1c>
    if (multi_irq_test > 1) {
    3fae:	4a12      	ldr	r2, [pc, #72]	; (3ff8 <PORT1_COMB_Handler+0x58>)
    3fb0:	6811      	ldr	r1, [r2, #0]
    3fb2:	2901      	cmp	r1, #1
    3fb4:	dd10      	ble.n	3fd8 <PORT1_COMB_Handler+0x38>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    3fb6:	6811      	ldr	r1, [r2, #0]
    3fb8:	3901      	subs	r1, #1
    3fba:	6011      	str	r1, [r2, #0]
      /* Deassert interrupt source */
      CM3DS_MPS2_GPIO1->DATAOUT = CM3DS_MPS2_GPIO1->DATAOUT ^ gpio1_irq_expected;
      medium_delay();
      }
    }
  CM3DS_MPS2_GPIO1->INTCLEAR = gpio1_irq_expected;
    3fbc:	6819      	ldr	r1, [r3, #0]
    3fbe:	4b0f      	ldr	r3, [pc, #60]	; (3ffc <PORT1_COMB_Handler+0x5c>)
  gpio1_irq_occurred++;
    3fc0:	4a0f      	ldr	r2, [pc, #60]	; (4000 <PORT1_COMB_Handler+0x60>)
  CM3DS_MPS2_GPIO1->INTCLEAR = gpio1_irq_expected;
    3fc2:	6399      	str	r1, [r3, #56]	; 0x38
  gpio1_irq_occurred++;
    3fc4:	6813      	ldr	r3, [r2, #0]
    3fc6:	3301      	adds	r3, #1
    3fc8:	6013      	str	r3, [r2, #0]
  return;
}
    3fca:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 1 interrupt occurred.\n");
    3fcc:	480d      	ldr	r0, [pc, #52]	; (4004 <PORT1_COMB_Handler+0x64>)
    3fce:	f000 fe55 	bl	4c7c <puts>
    UartEndSimulation();
    3fd2:	f000 fdab 	bl	4b2c <UartEndSimulation>
    3fd6:	e7fe      	b.n	3fd6 <PORT1_COMB_Handler+0x36>
      CM3DS_MPS2_GPIO1->DATAOUT = CM3DS_MPS2_GPIO1->DATAOUT ^ gpio1_irq_expected;
    3fd8:	4908      	ldr	r1, [pc, #32]	; (3ffc <PORT1_COMB_Handler+0x5c>)
    3fda:	6848      	ldr	r0, [r1, #4]
    3fdc:	681a      	ldr	r2, [r3, #0]
    3fde:	4042      	eors	r2, r0
    3fe0:	604a      	str	r2, [r1, #4]
    3fe2:	f3bf 8f6f 	isb	sy
    3fe6:	f3bf 8f6f 	isb	sy
    3fea:	f3bf 8f6f 	isb	sy
    3fee:	e7e5      	b.n	3fbc <PORT1_COMB_Handler+0x1c>
    3ff0:	2000008c 	.word	0x2000008c
    3ff4:	200000b8 	.word	0x200000b8
    3ff8:	200000a4 	.word	0x200000a4
    3ffc:	40011000 	.word	0x40011000
    4000:	200000ac 	.word	0x200000ac
    4004:	00006570 	.word	0x00006570

00004008 <PORT2_COMB_Handler>:

/* --------------------------------------- */
/* Combined interrupt handler for GPIO #2  */
/*                                         */
void PORT2_COMB_Handler(void)
{
    4008:	b508      	push	{r3, lr}
  if (gpio2_irq_expected==0) {
    400a:	4b13      	ldr	r3, [pc, #76]	; (4058 <PORT2_COMB_Handler+0x50>)
    400c:	681a      	ldr	r2, [r3, #0]
    400e:	b18a      	cbz	r2, 4034 <PORT2_COMB_Handler+0x2c>
    puts ("ERROR : Unexpected GPIO 2 interrupt occurred.\n");
    UartEndSimulation();
    while (1);
    }
  else if (gpio2_irq_level_irq!=0) {
    4010:	4a12      	ldr	r2, [pc, #72]	; (405c <PORT2_COMB_Handler+0x54>)
    4012:	6812      	ldr	r2, [r2, #0]
    4014:	b132      	cbz	r2, 4024 <PORT2_COMB_Handler+0x1c>
    if (multi_irq_test > 1) {
    4016:	4a12      	ldr	r2, [pc, #72]	; (4060 <PORT2_COMB_Handler+0x58>)
    4018:	6811      	ldr	r1, [r2, #0]
    401a:	2901      	cmp	r1, #1
    401c:	dd10      	ble.n	4040 <PORT2_COMB_Handler+0x38>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    401e:	6811      	ldr	r1, [r2, #0]
    4020:	3901      	subs	r1, #1
    4022:	6011      	str	r1, [r2, #0]
      /* Deassert interrupt source */
      CM3DS_MPS2_GPIO2->DATAOUT = CM3DS_MPS2_GPIO2->DATAOUT ^ gpio2_irq_expected;
      medium_delay();
      }
    }
  CM3DS_MPS2_GPIO2->INTCLEAR = gpio2_irq_expected;
    4024:	6819      	ldr	r1, [r3, #0]
    4026:	4b0f      	ldr	r3, [pc, #60]	; (4064 <PORT2_COMB_Handler+0x5c>)
  gpio2_irq_occurred++;
    4028:	4a0f      	ldr	r2, [pc, #60]	; (4068 <PORT2_COMB_Handler+0x60>)
  CM3DS_MPS2_GPIO2->INTCLEAR = gpio2_irq_expected;
    402a:	6399      	str	r1, [r3, #56]	; 0x38
  gpio2_irq_occurred++;
    402c:	6813      	ldr	r3, [r2, #0]
    402e:	3301      	adds	r3, #1
    4030:	6013      	str	r3, [r2, #0]
  return;
}
    4032:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 2 interrupt occurred.\n");
    4034:	480d      	ldr	r0, [pc, #52]	; (406c <PORT2_COMB_Handler+0x64>)
    4036:	f000 fe21 	bl	4c7c <puts>
    UartEndSimulation();
    403a:	f000 fd77 	bl	4b2c <UartEndSimulation>
    403e:	e7fe      	b.n	403e <PORT2_COMB_Handler+0x36>
      CM3DS_MPS2_GPIO2->DATAOUT = CM3DS_MPS2_GPIO2->DATAOUT ^ gpio2_irq_expected;
    4040:	4908      	ldr	r1, [pc, #32]	; (4064 <PORT2_COMB_Handler+0x5c>)
    4042:	6848      	ldr	r0, [r1, #4]
    4044:	681a      	ldr	r2, [r3, #0]
    4046:	4042      	eors	r2, r0
    4048:	604a      	str	r2, [r1, #4]
    404a:	f3bf 8f6f 	isb	sy
    404e:	f3bf 8f6f 	isb	sy
    4052:	f3bf 8f6f 	isb	sy
    4056:	e7e5      	b.n	4024 <PORT2_COMB_Handler+0x1c>
    4058:	20000098 	.word	0x20000098
    405c:	2000009c 	.word	0x2000009c
    4060:	200000a4 	.word	0x200000a4
    4064:	40012000 	.word	0x40012000
    4068:	20000090 	.word	0x20000090
    406c:	000065a0 	.word	0x000065a0

00004070 <PORT3_COMB_Handler>:

/* --------------------------------------- */
/* Combined interrupt handler for GPIO #3  */
/*                                         */
void PORT3_COMB_Handler(void)
{
    4070:	b508      	push	{r3, lr}
  if (gpio3_irq_expected==0) {
    4072:	4b13      	ldr	r3, [pc, #76]	; (40c0 <PORT3_COMB_Handler+0x50>)
    4074:	681a      	ldr	r2, [r3, #0]
    4076:	b18a      	cbz	r2, 409c <PORT3_COMB_Handler+0x2c>
    puts ("ERROR : Unexpected GPIO 3 interrupt occurred.\n");
    UartEndSimulation();
    while (1);
    }
  else if (gpio3_irq_level_irq!=0) {
    4078:	4a12      	ldr	r2, [pc, #72]	; (40c4 <PORT3_COMB_Handler+0x54>)
    407a:	6812      	ldr	r2, [r2, #0]
    407c:	b132      	cbz	r2, 408c <PORT3_COMB_Handler+0x1c>
    if (multi_irq_test > 1) {
    407e:	4a12      	ldr	r2, [pc, #72]	; (40c8 <PORT3_COMB_Handler+0x58>)
    4080:	6811      	ldr	r1, [r2, #0]
    4082:	2901      	cmp	r1, #1
    4084:	dd10      	ble.n	40a8 <PORT3_COMB_Handler+0x38>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4086:	6811      	ldr	r1, [r2, #0]
    4088:	3901      	subs	r1, #1
    408a:	6011      	str	r1, [r2, #0]
      /* Deassert interrupt source */
      CM3DS_MPS2_GPIO3->DATAOUT = CM3DS_MPS2_GPIO3->DATAOUT ^ gpio3_irq_expected;
      medium_delay();
      }
    }
  CM3DS_MPS2_GPIO3->INTCLEAR = gpio3_irq_expected;
    408c:	6819      	ldr	r1, [r3, #0]
    408e:	4b0f      	ldr	r3, [pc, #60]	; (40cc <PORT3_COMB_Handler+0x5c>)
  gpio3_irq_occurred++;
    4090:	4a0f      	ldr	r2, [pc, #60]	; (40d0 <PORT3_COMB_Handler+0x60>)
  CM3DS_MPS2_GPIO3->INTCLEAR = gpio3_irq_expected;
    4092:	6399      	str	r1, [r3, #56]	; 0x38
  gpio3_irq_occurred++;
    4094:	6813      	ldr	r3, [r2, #0]
    4096:	3301      	adds	r3, #1
    4098:	6013      	str	r3, [r2, #0]
  return;
}
    409a:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 3 interrupt occurred.\n");
    409c:	480d      	ldr	r0, [pc, #52]	; (40d4 <PORT3_COMB_Handler+0x64>)
    409e:	f000 fded 	bl	4c7c <puts>
    UartEndSimulation();
    40a2:	f000 fd43 	bl	4b2c <UartEndSimulation>
    40a6:	e7fe      	b.n	40a6 <PORT3_COMB_Handler+0x36>
      CM3DS_MPS2_GPIO3->DATAOUT = CM3DS_MPS2_GPIO3->DATAOUT ^ gpio3_irq_expected;
    40a8:	4908      	ldr	r1, [pc, #32]	; (40cc <PORT3_COMB_Handler+0x5c>)
    40aa:	6848      	ldr	r0, [r1, #4]
    40ac:	681a      	ldr	r2, [r3, #0]
    40ae:	4042      	eors	r2, r0
    40b0:	604a      	str	r2, [r1, #4]
    40b2:	f3bf 8f6f 	isb	sy
    40b6:	f3bf 8f6f 	isb	sy
    40ba:	f3bf 8f6f 	isb	sy
    40be:	e7e5      	b.n	408c <PORT3_COMB_Handler+0x1c>
    40c0:	20000088 	.word	0x20000088
    40c4:	200000b4 	.word	0x200000b4
    40c8:	200000a4 	.word	0x200000a4
    40cc:	40013000 	.word	0x40013000
    40d0:	20000094 	.word	0x20000094
    40d4:	000065d0 	.word	0x000065d0

000040d8 <PORT0_0_Handler>:

/* ----------------------------------------- */
/* Individual interrupt handler for GPIO #0  */
/*                                           */
void PORT0_0_Handler(void){
    40d8:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    40da:	4b16      	ldr	r3, [pc, #88]	; (4134 <PORT0_0_Handler+0x5c>)
    40dc:	681a      	ldr	r2, [r3, #0]
    40de:	b1b2      	cbz	r2, 410e <PORT0_0_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    40e0:	4a15      	ldr	r2, [pc, #84]	; (4138 <PORT0_0_Handler+0x60>)
    40e2:	6812      	ldr	r2, [r2, #0]
    40e4:	b132      	cbz	r2, 40f4 <PORT0_0_Handler+0x1c>
    if (multi_irq_test > 1) {
    40e6:	4a15      	ldr	r2, [pc, #84]	; (413c <PORT0_0_Handler+0x64>)
    40e8:	6811      	ldr	r1, [r2, #0]
    40ea:	2901      	cmp	r1, #1
    40ec:	dd15      	ble.n	411a <PORT0_0_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    40ee:	6811      	ldr	r1, [r2, #0]
    40f0:	3901      	subs	r1, #1
    40f2:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    40f4:	681a      	ldr	r2, [r3, #0]
    40f6:	4b12      	ldr	r3, [pc, #72]	; (4140 <PORT0_0_Handler+0x68>)
  gpio0_irq_occurred++;
    40f8:	4912      	ldr	r1, [pc, #72]	; (4144 <PORT0_0_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    40fa:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    40fc:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[0]++;
    40fe:	4a12      	ldr	r2, [pc, #72]	; (4148 <PORT0_0_Handler+0x70>)
  gpio0_irq_occurred++;
    4100:	3301      	adds	r3, #1
    4102:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[0]++;
    4104:	7813      	ldrb	r3, [r2, #0]
    4106:	3301      	adds	r3, #1
    4108:	b2db      	uxtb	r3, r3
    410a:	7013      	strb	r3, [r2, #0]
  return;
}
    410c:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    410e:	480f      	ldr	r0, [pc, #60]	; (414c <PORT0_0_Handler+0x74>)
    4110:	f000 fdb4 	bl	4c7c <puts>
    UartEndSimulation();
    4114:	f000 fd0a 	bl	4b2c <UartEndSimulation>
    4118:	e7fe      	b.n	4118 <PORT0_0_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    411a:	4909      	ldr	r1, [pc, #36]	; (4140 <PORT0_0_Handler+0x68>)
    411c:	6848      	ldr	r0, [r1, #4]
    411e:	681a      	ldr	r2, [r3, #0]
    4120:	4042      	eors	r2, r0
    4122:	604a      	str	r2, [r1, #4]
    4124:	f3bf 8f6f 	isb	sy
    4128:	f3bf 8f6f 	isb	sy
    412c:	f3bf 8f6f 	isb	sy
    4130:	e7e0      	b.n	40f4 <PORT0_0_Handler+0x1c>
    4132:	bf00      	nop
    4134:	20000074 	.word	0x20000074
    4138:	200000b0 	.word	0x200000b0
    413c:	200000a4 	.word	0x200000a4
    4140:	40010000 	.word	0x40010000
    4144:	200000a8 	.word	0x200000a8
    4148:	20000078 	.word	0x20000078
    414c:	00006540 	.word	0x00006540

00004150 <PORT0_1_Handler>:
void PORT0_1_Handler(void){
    4150:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    4152:	4b16      	ldr	r3, [pc, #88]	; (41ac <PORT0_1_Handler+0x5c>)
    4154:	681a      	ldr	r2, [r3, #0]
    4156:	b1b2      	cbz	r2, 4186 <PORT0_1_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4158:	4a15      	ldr	r2, [pc, #84]	; (41b0 <PORT0_1_Handler+0x60>)
    415a:	6812      	ldr	r2, [r2, #0]
    415c:	b132      	cbz	r2, 416c <PORT0_1_Handler+0x1c>
    if (multi_irq_test > 1) {
    415e:	4a15      	ldr	r2, [pc, #84]	; (41b4 <PORT0_1_Handler+0x64>)
    4160:	6811      	ldr	r1, [r2, #0]
    4162:	2901      	cmp	r1, #1
    4164:	dd15      	ble.n	4192 <PORT0_1_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4166:	6811      	ldr	r1, [r2, #0]
    4168:	3901      	subs	r1, #1
    416a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    416c:	681a      	ldr	r2, [r3, #0]
    416e:	4b12      	ldr	r3, [pc, #72]	; (41b8 <PORT0_1_Handler+0x68>)
  gpio0_irq_occurred++;
    4170:	4912      	ldr	r1, [pc, #72]	; (41bc <PORT0_1_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4172:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4174:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[1]++;
    4176:	4a12      	ldr	r2, [pc, #72]	; (41c0 <PORT0_1_Handler+0x70>)
  gpio0_irq_occurred++;
    4178:	3301      	adds	r3, #1
    417a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[1]++;
    417c:	7853      	ldrb	r3, [r2, #1]
    417e:	3301      	adds	r3, #1
    4180:	b2db      	uxtb	r3, r3
    4182:	7053      	strb	r3, [r2, #1]
  return;
}
    4184:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4186:	480f      	ldr	r0, [pc, #60]	; (41c4 <PORT0_1_Handler+0x74>)
    4188:	f000 fd78 	bl	4c7c <puts>
    UartEndSimulation();
    418c:	f000 fcce 	bl	4b2c <UartEndSimulation>
    4190:	e7fe      	b.n	4190 <PORT0_1_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4192:	4909      	ldr	r1, [pc, #36]	; (41b8 <PORT0_1_Handler+0x68>)
    4194:	6848      	ldr	r0, [r1, #4]
    4196:	681a      	ldr	r2, [r3, #0]
    4198:	4042      	eors	r2, r0
    419a:	604a      	str	r2, [r1, #4]
    419c:	f3bf 8f6f 	isb	sy
    41a0:	f3bf 8f6f 	isb	sy
    41a4:	f3bf 8f6f 	isb	sy
    41a8:	e7e0      	b.n	416c <PORT0_1_Handler+0x1c>
    41aa:	bf00      	nop
    41ac:	20000074 	.word	0x20000074
    41b0:	200000b0 	.word	0x200000b0
    41b4:	200000a4 	.word	0x200000a4
    41b8:	40010000 	.word	0x40010000
    41bc:	200000a8 	.word	0x200000a8
    41c0:	20000078 	.word	0x20000078
    41c4:	00006540 	.word	0x00006540

000041c8 <PORT0_2_Handler>:
void PORT0_2_Handler(void){
    41c8:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    41ca:	4b16      	ldr	r3, [pc, #88]	; (4224 <PORT0_2_Handler+0x5c>)
    41cc:	681a      	ldr	r2, [r3, #0]
    41ce:	b1b2      	cbz	r2, 41fe <PORT0_2_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    41d0:	4a15      	ldr	r2, [pc, #84]	; (4228 <PORT0_2_Handler+0x60>)
    41d2:	6812      	ldr	r2, [r2, #0]
    41d4:	b132      	cbz	r2, 41e4 <PORT0_2_Handler+0x1c>
    if (multi_irq_test > 1) {
    41d6:	4a15      	ldr	r2, [pc, #84]	; (422c <PORT0_2_Handler+0x64>)
    41d8:	6811      	ldr	r1, [r2, #0]
    41da:	2901      	cmp	r1, #1
    41dc:	dd15      	ble.n	420a <PORT0_2_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    41de:	6811      	ldr	r1, [r2, #0]
    41e0:	3901      	subs	r1, #1
    41e2:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    41e4:	681a      	ldr	r2, [r3, #0]
    41e6:	4b12      	ldr	r3, [pc, #72]	; (4230 <PORT0_2_Handler+0x68>)
  gpio0_irq_occurred++;
    41e8:	4912      	ldr	r1, [pc, #72]	; (4234 <PORT0_2_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    41ea:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    41ec:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[2]++;
    41ee:	4a12      	ldr	r2, [pc, #72]	; (4238 <PORT0_2_Handler+0x70>)
  gpio0_irq_occurred++;
    41f0:	3301      	adds	r3, #1
    41f2:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[2]++;
    41f4:	7893      	ldrb	r3, [r2, #2]
    41f6:	3301      	adds	r3, #1
    41f8:	b2db      	uxtb	r3, r3
    41fa:	7093      	strb	r3, [r2, #2]
  return;
}
    41fc:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    41fe:	480f      	ldr	r0, [pc, #60]	; (423c <PORT0_2_Handler+0x74>)
    4200:	f000 fd3c 	bl	4c7c <puts>
    UartEndSimulation();
    4204:	f000 fc92 	bl	4b2c <UartEndSimulation>
    4208:	e7fe      	b.n	4208 <PORT0_2_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    420a:	4909      	ldr	r1, [pc, #36]	; (4230 <PORT0_2_Handler+0x68>)
    420c:	6848      	ldr	r0, [r1, #4]
    420e:	681a      	ldr	r2, [r3, #0]
    4210:	4042      	eors	r2, r0
    4212:	604a      	str	r2, [r1, #4]
    4214:	f3bf 8f6f 	isb	sy
    4218:	f3bf 8f6f 	isb	sy
    421c:	f3bf 8f6f 	isb	sy
    4220:	e7e0      	b.n	41e4 <PORT0_2_Handler+0x1c>
    4222:	bf00      	nop
    4224:	20000074 	.word	0x20000074
    4228:	200000b0 	.word	0x200000b0
    422c:	200000a4 	.word	0x200000a4
    4230:	40010000 	.word	0x40010000
    4234:	200000a8 	.word	0x200000a8
    4238:	20000078 	.word	0x20000078
    423c:	00006540 	.word	0x00006540

00004240 <PORT0_3_Handler>:
void PORT0_3_Handler(void){
    4240:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    4242:	4b16      	ldr	r3, [pc, #88]	; (429c <PORT0_3_Handler+0x5c>)
    4244:	681a      	ldr	r2, [r3, #0]
    4246:	b1b2      	cbz	r2, 4276 <PORT0_3_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4248:	4a15      	ldr	r2, [pc, #84]	; (42a0 <PORT0_3_Handler+0x60>)
    424a:	6812      	ldr	r2, [r2, #0]
    424c:	b132      	cbz	r2, 425c <PORT0_3_Handler+0x1c>
    if (multi_irq_test > 1) {
    424e:	4a15      	ldr	r2, [pc, #84]	; (42a4 <PORT0_3_Handler+0x64>)
    4250:	6811      	ldr	r1, [r2, #0]
    4252:	2901      	cmp	r1, #1
    4254:	dd15      	ble.n	4282 <PORT0_3_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4256:	6811      	ldr	r1, [r2, #0]
    4258:	3901      	subs	r1, #1
    425a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    425c:	681a      	ldr	r2, [r3, #0]
    425e:	4b12      	ldr	r3, [pc, #72]	; (42a8 <PORT0_3_Handler+0x68>)
  gpio0_irq_occurred++;
    4260:	4912      	ldr	r1, [pc, #72]	; (42ac <PORT0_3_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4262:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4264:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[3]++;
    4266:	4a12      	ldr	r2, [pc, #72]	; (42b0 <PORT0_3_Handler+0x70>)
  gpio0_irq_occurred++;
    4268:	3301      	adds	r3, #1
    426a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[3]++;
    426c:	78d3      	ldrb	r3, [r2, #3]
    426e:	3301      	adds	r3, #1
    4270:	b2db      	uxtb	r3, r3
    4272:	70d3      	strb	r3, [r2, #3]
  return;
}
    4274:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4276:	480f      	ldr	r0, [pc, #60]	; (42b4 <PORT0_3_Handler+0x74>)
    4278:	f000 fd00 	bl	4c7c <puts>
    UartEndSimulation();
    427c:	f000 fc56 	bl	4b2c <UartEndSimulation>
    4280:	e7fe      	b.n	4280 <PORT0_3_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4282:	4909      	ldr	r1, [pc, #36]	; (42a8 <PORT0_3_Handler+0x68>)
    4284:	6848      	ldr	r0, [r1, #4]
    4286:	681a      	ldr	r2, [r3, #0]
    4288:	4042      	eors	r2, r0
    428a:	604a      	str	r2, [r1, #4]
    428c:	f3bf 8f6f 	isb	sy
    4290:	f3bf 8f6f 	isb	sy
    4294:	f3bf 8f6f 	isb	sy
    4298:	e7e0      	b.n	425c <PORT0_3_Handler+0x1c>
    429a:	bf00      	nop
    429c:	20000074 	.word	0x20000074
    42a0:	200000b0 	.word	0x200000b0
    42a4:	200000a4 	.word	0x200000a4
    42a8:	40010000 	.word	0x40010000
    42ac:	200000a8 	.word	0x200000a8
    42b0:	20000078 	.word	0x20000078
    42b4:	00006540 	.word	0x00006540

000042b8 <PORT0_4_Handler>:
void PORT0_4_Handler(void){
    42b8:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    42ba:	4b16      	ldr	r3, [pc, #88]	; (4314 <PORT0_4_Handler+0x5c>)
    42bc:	681a      	ldr	r2, [r3, #0]
    42be:	b1b2      	cbz	r2, 42ee <PORT0_4_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    42c0:	4a15      	ldr	r2, [pc, #84]	; (4318 <PORT0_4_Handler+0x60>)
    42c2:	6812      	ldr	r2, [r2, #0]
    42c4:	b132      	cbz	r2, 42d4 <PORT0_4_Handler+0x1c>
    if (multi_irq_test > 1) {
    42c6:	4a15      	ldr	r2, [pc, #84]	; (431c <PORT0_4_Handler+0x64>)
    42c8:	6811      	ldr	r1, [r2, #0]
    42ca:	2901      	cmp	r1, #1
    42cc:	dd15      	ble.n	42fa <PORT0_4_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    42ce:	6811      	ldr	r1, [r2, #0]
    42d0:	3901      	subs	r1, #1
    42d2:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    42d4:	681a      	ldr	r2, [r3, #0]
    42d6:	4b12      	ldr	r3, [pc, #72]	; (4320 <PORT0_4_Handler+0x68>)
  gpio0_irq_occurred++;
    42d8:	4912      	ldr	r1, [pc, #72]	; (4324 <PORT0_4_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    42da:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    42dc:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[4]++;
    42de:	4a12      	ldr	r2, [pc, #72]	; (4328 <PORT0_4_Handler+0x70>)
  gpio0_irq_occurred++;
    42e0:	3301      	adds	r3, #1
    42e2:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[4]++;
    42e4:	7913      	ldrb	r3, [r2, #4]
    42e6:	3301      	adds	r3, #1
    42e8:	b2db      	uxtb	r3, r3
    42ea:	7113      	strb	r3, [r2, #4]
  return;
}
    42ec:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    42ee:	480f      	ldr	r0, [pc, #60]	; (432c <PORT0_4_Handler+0x74>)
    42f0:	f000 fcc4 	bl	4c7c <puts>
    UartEndSimulation();
    42f4:	f000 fc1a 	bl	4b2c <UartEndSimulation>
    42f8:	e7fe      	b.n	42f8 <PORT0_4_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    42fa:	4909      	ldr	r1, [pc, #36]	; (4320 <PORT0_4_Handler+0x68>)
    42fc:	6848      	ldr	r0, [r1, #4]
    42fe:	681a      	ldr	r2, [r3, #0]
    4300:	4042      	eors	r2, r0
    4302:	604a      	str	r2, [r1, #4]
    4304:	f3bf 8f6f 	isb	sy
    4308:	f3bf 8f6f 	isb	sy
    430c:	f3bf 8f6f 	isb	sy
    4310:	e7e0      	b.n	42d4 <PORT0_4_Handler+0x1c>
    4312:	bf00      	nop
    4314:	20000074 	.word	0x20000074
    4318:	200000b0 	.word	0x200000b0
    431c:	200000a4 	.word	0x200000a4
    4320:	40010000 	.word	0x40010000
    4324:	200000a8 	.word	0x200000a8
    4328:	20000078 	.word	0x20000078
    432c:	00006540 	.word	0x00006540

00004330 <PORT0_5_Handler>:
void PORT0_5_Handler(void){
    4330:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    4332:	4b16      	ldr	r3, [pc, #88]	; (438c <PORT0_5_Handler+0x5c>)
    4334:	681a      	ldr	r2, [r3, #0]
    4336:	b1b2      	cbz	r2, 4366 <PORT0_5_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4338:	4a15      	ldr	r2, [pc, #84]	; (4390 <PORT0_5_Handler+0x60>)
    433a:	6812      	ldr	r2, [r2, #0]
    433c:	b132      	cbz	r2, 434c <PORT0_5_Handler+0x1c>
    if (multi_irq_test > 1) {
    433e:	4a15      	ldr	r2, [pc, #84]	; (4394 <PORT0_5_Handler+0x64>)
    4340:	6811      	ldr	r1, [r2, #0]
    4342:	2901      	cmp	r1, #1
    4344:	dd15      	ble.n	4372 <PORT0_5_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4346:	6811      	ldr	r1, [r2, #0]
    4348:	3901      	subs	r1, #1
    434a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    434c:	681a      	ldr	r2, [r3, #0]
    434e:	4b12      	ldr	r3, [pc, #72]	; (4398 <PORT0_5_Handler+0x68>)
  gpio0_irq_occurred++;
    4350:	4912      	ldr	r1, [pc, #72]	; (439c <PORT0_5_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4352:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4354:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[5]++;
    4356:	4a12      	ldr	r2, [pc, #72]	; (43a0 <PORT0_5_Handler+0x70>)
  gpio0_irq_occurred++;
    4358:	3301      	adds	r3, #1
    435a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[5]++;
    435c:	7953      	ldrb	r3, [r2, #5]
    435e:	3301      	adds	r3, #1
    4360:	b2db      	uxtb	r3, r3
    4362:	7153      	strb	r3, [r2, #5]
  return;
}
    4364:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4366:	480f      	ldr	r0, [pc, #60]	; (43a4 <PORT0_5_Handler+0x74>)
    4368:	f000 fc88 	bl	4c7c <puts>
    UartEndSimulation();
    436c:	f000 fbde 	bl	4b2c <UartEndSimulation>
    4370:	e7fe      	b.n	4370 <PORT0_5_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4372:	4909      	ldr	r1, [pc, #36]	; (4398 <PORT0_5_Handler+0x68>)
    4374:	6848      	ldr	r0, [r1, #4]
    4376:	681a      	ldr	r2, [r3, #0]
    4378:	4042      	eors	r2, r0
    437a:	604a      	str	r2, [r1, #4]
    437c:	f3bf 8f6f 	isb	sy
    4380:	f3bf 8f6f 	isb	sy
    4384:	f3bf 8f6f 	isb	sy
    4388:	e7e0      	b.n	434c <PORT0_5_Handler+0x1c>
    438a:	bf00      	nop
    438c:	20000074 	.word	0x20000074
    4390:	200000b0 	.word	0x200000b0
    4394:	200000a4 	.word	0x200000a4
    4398:	40010000 	.word	0x40010000
    439c:	200000a8 	.word	0x200000a8
    43a0:	20000078 	.word	0x20000078
    43a4:	00006540 	.word	0x00006540

000043a8 <PORT0_6_Handler>:
void PORT0_6_Handler(void){
    43a8:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    43aa:	4b16      	ldr	r3, [pc, #88]	; (4404 <PORT0_6_Handler+0x5c>)
    43ac:	681a      	ldr	r2, [r3, #0]
    43ae:	b1b2      	cbz	r2, 43de <PORT0_6_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    43b0:	4a15      	ldr	r2, [pc, #84]	; (4408 <PORT0_6_Handler+0x60>)
    43b2:	6812      	ldr	r2, [r2, #0]
    43b4:	b132      	cbz	r2, 43c4 <PORT0_6_Handler+0x1c>
    if (multi_irq_test > 1) {
    43b6:	4a15      	ldr	r2, [pc, #84]	; (440c <PORT0_6_Handler+0x64>)
    43b8:	6811      	ldr	r1, [r2, #0]
    43ba:	2901      	cmp	r1, #1
    43bc:	dd15      	ble.n	43ea <PORT0_6_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    43be:	6811      	ldr	r1, [r2, #0]
    43c0:	3901      	subs	r1, #1
    43c2:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    43c4:	681a      	ldr	r2, [r3, #0]
    43c6:	4b12      	ldr	r3, [pc, #72]	; (4410 <PORT0_6_Handler+0x68>)
  gpio0_irq_occurred++;
    43c8:	4912      	ldr	r1, [pc, #72]	; (4414 <PORT0_6_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    43ca:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    43cc:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[6]++;
    43ce:	4a12      	ldr	r2, [pc, #72]	; (4418 <PORT0_6_Handler+0x70>)
  gpio0_irq_occurred++;
    43d0:	3301      	adds	r3, #1
    43d2:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[6]++;
    43d4:	7993      	ldrb	r3, [r2, #6]
    43d6:	3301      	adds	r3, #1
    43d8:	b2db      	uxtb	r3, r3
    43da:	7193      	strb	r3, [r2, #6]
  return;
}
    43dc:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    43de:	480f      	ldr	r0, [pc, #60]	; (441c <PORT0_6_Handler+0x74>)
    43e0:	f000 fc4c 	bl	4c7c <puts>
    UartEndSimulation();
    43e4:	f000 fba2 	bl	4b2c <UartEndSimulation>
    43e8:	e7fe      	b.n	43e8 <PORT0_6_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    43ea:	4909      	ldr	r1, [pc, #36]	; (4410 <PORT0_6_Handler+0x68>)
    43ec:	6848      	ldr	r0, [r1, #4]
    43ee:	681a      	ldr	r2, [r3, #0]
    43f0:	4042      	eors	r2, r0
    43f2:	604a      	str	r2, [r1, #4]
    43f4:	f3bf 8f6f 	isb	sy
    43f8:	f3bf 8f6f 	isb	sy
    43fc:	f3bf 8f6f 	isb	sy
    4400:	e7e0      	b.n	43c4 <PORT0_6_Handler+0x1c>
    4402:	bf00      	nop
    4404:	20000074 	.word	0x20000074
    4408:	200000b0 	.word	0x200000b0
    440c:	200000a4 	.word	0x200000a4
    4410:	40010000 	.word	0x40010000
    4414:	200000a8 	.word	0x200000a8
    4418:	20000078 	.word	0x20000078
    441c:	00006540 	.word	0x00006540

00004420 <PORT0_7_Handler>:
void PORT0_7_Handler(void){
    4420:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    4422:	4b16      	ldr	r3, [pc, #88]	; (447c <PORT0_7_Handler+0x5c>)
    4424:	681a      	ldr	r2, [r3, #0]
    4426:	b1b2      	cbz	r2, 4456 <PORT0_7_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4428:	4a15      	ldr	r2, [pc, #84]	; (4480 <PORT0_7_Handler+0x60>)
    442a:	6812      	ldr	r2, [r2, #0]
    442c:	b132      	cbz	r2, 443c <PORT0_7_Handler+0x1c>
    if (multi_irq_test > 1) {
    442e:	4a15      	ldr	r2, [pc, #84]	; (4484 <PORT0_7_Handler+0x64>)
    4430:	6811      	ldr	r1, [r2, #0]
    4432:	2901      	cmp	r1, #1
    4434:	dd15      	ble.n	4462 <PORT0_7_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4436:	6811      	ldr	r1, [r2, #0]
    4438:	3901      	subs	r1, #1
    443a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    443c:	681a      	ldr	r2, [r3, #0]
    443e:	4b12      	ldr	r3, [pc, #72]	; (4488 <PORT0_7_Handler+0x68>)
  gpio0_irq_occurred++;
    4440:	4912      	ldr	r1, [pc, #72]	; (448c <PORT0_7_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4442:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4444:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[7]++;
    4446:	4a12      	ldr	r2, [pc, #72]	; (4490 <PORT0_7_Handler+0x70>)
  gpio0_irq_occurred++;
    4448:	3301      	adds	r3, #1
    444a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[7]++;
    444c:	79d3      	ldrb	r3, [r2, #7]
    444e:	3301      	adds	r3, #1
    4450:	b2db      	uxtb	r3, r3
    4452:	71d3      	strb	r3, [r2, #7]
  return;
}
    4454:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4456:	480f      	ldr	r0, [pc, #60]	; (4494 <PORT0_7_Handler+0x74>)
    4458:	f000 fc10 	bl	4c7c <puts>
    UartEndSimulation();
    445c:	f000 fb66 	bl	4b2c <UartEndSimulation>
    4460:	e7fe      	b.n	4460 <PORT0_7_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4462:	4909      	ldr	r1, [pc, #36]	; (4488 <PORT0_7_Handler+0x68>)
    4464:	6848      	ldr	r0, [r1, #4]
    4466:	681a      	ldr	r2, [r3, #0]
    4468:	4042      	eors	r2, r0
    446a:	604a      	str	r2, [r1, #4]
    446c:	f3bf 8f6f 	isb	sy
    4470:	f3bf 8f6f 	isb	sy
    4474:	f3bf 8f6f 	isb	sy
    4478:	e7e0      	b.n	443c <PORT0_7_Handler+0x1c>
    447a:	bf00      	nop
    447c:	20000074 	.word	0x20000074
    4480:	200000b0 	.word	0x200000b0
    4484:	200000a4 	.word	0x200000a4
    4488:	40010000 	.word	0x40010000
    448c:	200000a8 	.word	0x200000a8
    4490:	20000078 	.word	0x20000078
    4494:	00006540 	.word	0x00006540

00004498 <PORT0_8_Handler>:
void PORT0_8_Handler(void){
    4498:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    449a:	4b16      	ldr	r3, [pc, #88]	; (44f4 <PORT0_8_Handler+0x5c>)
    449c:	681a      	ldr	r2, [r3, #0]
    449e:	b1b2      	cbz	r2, 44ce <PORT0_8_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    44a0:	4a15      	ldr	r2, [pc, #84]	; (44f8 <PORT0_8_Handler+0x60>)
    44a2:	6812      	ldr	r2, [r2, #0]
    44a4:	b132      	cbz	r2, 44b4 <PORT0_8_Handler+0x1c>
    if (multi_irq_test > 1) {
    44a6:	4a15      	ldr	r2, [pc, #84]	; (44fc <PORT0_8_Handler+0x64>)
    44a8:	6811      	ldr	r1, [r2, #0]
    44aa:	2901      	cmp	r1, #1
    44ac:	dd15      	ble.n	44da <PORT0_8_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    44ae:	6811      	ldr	r1, [r2, #0]
    44b0:	3901      	subs	r1, #1
    44b2:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    44b4:	681a      	ldr	r2, [r3, #0]
    44b6:	4b12      	ldr	r3, [pc, #72]	; (4500 <PORT0_8_Handler+0x68>)
  gpio0_irq_occurred++;
    44b8:	4912      	ldr	r1, [pc, #72]	; (4504 <PORT0_8_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    44ba:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    44bc:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[8]++;
    44be:	4a12      	ldr	r2, [pc, #72]	; (4508 <PORT0_8_Handler+0x70>)
  gpio0_irq_occurred++;
    44c0:	3301      	adds	r3, #1
    44c2:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[8]++;
    44c4:	7a13      	ldrb	r3, [r2, #8]
    44c6:	3301      	adds	r3, #1
    44c8:	b2db      	uxtb	r3, r3
    44ca:	7213      	strb	r3, [r2, #8]
  return;
}
    44cc:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    44ce:	480f      	ldr	r0, [pc, #60]	; (450c <PORT0_8_Handler+0x74>)
    44d0:	f000 fbd4 	bl	4c7c <puts>
    UartEndSimulation();
    44d4:	f000 fb2a 	bl	4b2c <UartEndSimulation>
    44d8:	e7fe      	b.n	44d8 <PORT0_8_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    44da:	4909      	ldr	r1, [pc, #36]	; (4500 <PORT0_8_Handler+0x68>)
    44dc:	6848      	ldr	r0, [r1, #4]
    44de:	681a      	ldr	r2, [r3, #0]
    44e0:	4042      	eors	r2, r0
    44e2:	604a      	str	r2, [r1, #4]
    44e4:	f3bf 8f6f 	isb	sy
    44e8:	f3bf 8f6f 	isb	sy
    44ec:	f3bf 8f6f 	isb	sy
    44f0:	e7e0      	b.n	44b4 <PORT0_8_Handler+0x1c>
    44f2:	bf00      	nop
    44f4:	20000074 	.word	0x20000074
    44f8:	200000b0 	.word	0x200000b0
    44fc:	200000a4 	.word	0x200000a4
    4500:	40010000 	.word	0x40010000
    4504:	200000a8 	.word	0x200000a8
    4508:	20000078 	.word	0x20000078
    450c:	00006540 	.word	0x00006540

00004510 <PORT0_9_Handler>:
void PORT0_9_Handler(void){
    4510:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    4512:	4b16      	ldr	r3, [pc, #88]	; (456c <PORT0_9_Handler+0x5c>)
    4514:	681a      	ldr	r2, [r3, #0]
    4516:	b1b2      	cbz	r2, 4546 <PORT0_9_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4518:	4a15      	ldr	r2, [pc, #84]	; (4570 <PORT0_9_Handler+0x60>)
    451a:	6812      	ldr	r2, [r2, #0]
    451c:	b132      	cbz	r2, 452c <PORT0_9_Handler+0x1c>
    if (multi_irq_test > 1) {
    451e:	4a15      	ldr	r2, [pc, #84]	; (4574 <PORT0_9_Handler+0x64>)
    4520:	6811      	ldr	r1, [r2, #0]
    4522:	2901      	cmp	r1, #1
    4524:	dd15      	ble.n	4552 <PORT0_9_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4526:	6811      	ldr	r1, [r2, #0]
    4528:	3901      	subs	r1, #1
    452a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	4b12      	ldr	r3, [pc, #72]	; (4578 <PORT0_9_Handler+0x68>)
  gpio0_irq_occurred++;
    4530:	4912      	ldr	r1, [pc, #72]	; (457c <PORT0_9_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4532:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4534:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[9]++;
    4536:	4a12      	ldr	r2, [pc, #72]	; (4580 <PORT0_9_Handler+0x70>)
  gpio0_irq_occurred++;
    4538:	3301      	adds	r3, #1
    453a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[9]++;
    453c:	7a53      	ldrb	r3, [r2, #9]
    453e:	3301      	adds	r3, #1
    4540:	b2db      	uxtb	r3, r3
    4542:	7253      	strb	r3, [r2, #9]
  return;
}
    4544:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4546:	480f      	ldr	r0, [pc, #60]	; (4584 <PORT0_9_Handler+0x74>)
    4548:	f000 fb98 	bl	4c7c <puts>
    UartEndSimulation();
    454c:	f000 faee 	bl	4b2c <UartEndSimulation>
    4550:	e7fe      	b.n	4550 <PORT0_9_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4552:	4909      	ldr	r1, [pc, #36]	; (4578 <PORT0_9_Handler+0x68>)
    4554:	6848      	ldr	r0, [r1, #4]
    4556:	681a      	ldr	r2, [r3, #0]
    4558:	4042      	eors	r2, r0
    455a:	604a      	str	r2, [r1, #4]
    455c:	f3bf 8f6f 	isb	sy
    4560:	f3bf 8f6f 	isb	sy
    4564:	f3bf 8f6f 	isb	sy
    4568:	e7e0      	b.n	452c <PORT0_9_Handler+0x1c>
    456a:	bf00      	nop
    456c:	20000074 	.word	0x20000074
    4570:	200000b0 	.word	0x200000b0
    4574:	200000a4 	.word	0x200000a4
    4578:	40010000 	.word	0x40010000
    457c:	200000a8 	.word	0x200000a8
    4580:	20000078 	.word	0x20000078
    4584:	00006540 	.word	0x00006540

00004588 <PORT0_10_Handler>:
void PORT0_10_Handler(void){
    4588:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    458a:	4b16      	ldr	r3, [pc, #88]	; (45e4 <PORT0_10_Handler+0x5c>)
    458c:	681a      	ldr	r2, [r3, #0]
    458e:	b1b2      	cbz	r2, 45be <PORT0_10_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4590:	4a15      	ldr	r2, [pc, #84]	; (45e8 <PORT0_10_Handler+0x60>)
    4592:	6812      	ldr	r2, [r2, #0]
    4594:	b132      	cbz	r2, 45a4 <PORT0_10_Handler+0x1c>
    if (multi_irq_test > 1) {
    4596:	4a15      	ldr	r2, [pc, #84]	; (45ec <PORT0_10_Handler+0x64>)
    4598:	6811      	ldr	r1, [r2, #0]
    459a:	2901      	cmp	r1, #1
    459c:	dd15      	ble.n	45ca <PORT0_10_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    459e:	6811      	ldr	r1, [r2, #0]
    45a0:	3901      	subs	r1, #1
    45a2:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    45a4:	681a      	ldr	r2, [r3, #0]
    45a6:	4b12      	ldr	r3, [pc, #72]	; (45f0 <PORT0_10_Handler+0x68>)
  gpio0_irq_occurred++;
    45a8:	4912      	ldr	r1, [pc, #72]	; (45f4 <PORT0_10_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    45aa:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    45ac:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[10]++;
    45ae:	4a12      	ldr	r2, [pc, #72]	; (45f8 <PORT0_10_Handler+0x70>)
  gpio0_irq_occurred++;
    45b0:	3301      	adds	r3, #1
    45b2:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[10]++;
    45b4:	7a93      	ldrb	r3, [r2, #10]
    45b6:	3301      	adds	r3, #1
    45b8:	b2db      	uxtb	r3, r3
    45ba:	7293      	strb	r3, [r2, #10]
  return;
}
    45bc:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    45be:	480f      	ldr	r0, [pc, #60]	; (45fc <PORT0_10_Handler+0x74>)
    45c0:	f000 fb5c 	bl	4c7c <puts>
    UartEndSimulation();
    45c4:	f000 fab2 	bl	4b2c <UartEndSimulation>
    45c8:	e7fe      	b.n	45c8 <PORT0_10_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    45ca:	4909      	ldr	r1, [pc, #36]	; (45f0 <PORT0_10_Handler+0x68>)
    45cc:	6848      	ldr	r0, [r1, #4]
    45ce:	681a      	ldr	r2, [r3, #0]
    45d0:	4042      	eors	r2, r0
    45d2:	604a      	str	r2, [r1, #4]
    45d4:	f3bf 8f6f 	isb	sy
    45d8:	f3bf 8f6f 	isb	sy
    45dc:	f3bf 8f6f 	isb	sy
    45e0:	e7e0      	b.n	45a4 <PORT0_10_Handler+0x1c>
    45e2:	bf00      	nop
    45e4:	20000074 	.word	0x20000074
    45e8:	200000b0 	.word	0x200000b0
    45ec:	200000a4 	.word	0x200000a4
    45f0:	40010000 	.word	0x40010000
    45f4:	200000a8 	.word	0x200000a8
    45f8:	20000078 	.word	0x20000078
    45fc:	00006540 	.word	0x00006540

00004600 <PORT0_11_Handler>:
void PORT0_11_Handler(void){
    4600:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    4602:	4b16      	ldr	r3, [pc, #88]	; (465c <PORT0_11_Handler+0x5c>)
    4604:	681a      	ldr	r2, [r3, #0]
    4606:	b1b2      	cbz	r2, 4636 <PORT0_11_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4608:	4a15      	ldr	r2, [pc, #84]	; (4660 <PORT0_11_Handler+0x60>)
    460a:	6812      	ldr	r2, [r2, #0]
    460c:	b132      	cbz	r2, 461c <PORT0_11_Handler+0x1c>
    if (multi_irq_test > 1) {
    460e:	4a15      	ldr	r2, [pc, #84]	; (4664 <PORT0_11_Handler+0x64>)
    4610:	6811      	ldr	r1, [r2, #0]
    4612:	2901      	cmp	r1, #1
    4614:	dd15      	ble.n	4642 <PORT0_11_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4616:	6811      	ldr	r1, [r2, #0]
    4618:	3901      	subs	r1, #1
    461a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    461c:	681a      	ldr	r2, [r3, #0]
    461e:	4b12      	ldr	r3, [pc, #72]	; (4668 <PORT0_11_Handler+0x68>)
  gpio0_irq_occurred++;
    4620:	4912      	ldr	r1, [pc, #72]	; (466c <PORT0_11_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4622:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4624:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[11]++;
    4626:	4a12      	ldr	r2, [pc, #72]	; (4670 <PORT0_11_Handler+0x70>)
  gpio0_irq_occurred++;
    4628:	3301      	adds	r3, #1
    462a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[11]++;
    462c:	7ad3      	ldrb	r3, [r2, #11]
    462e:	3301      	adds	r3, #1
    4630:	b2db      	uxtb	r3, r3
    4632:	72d3      	strb	r3, [r2, #11]
  return;
}
    4634:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4636:	480f      	ldr	r0, [pc, #60]	; (4674 <PORT0_11_Handler+0x74>)
    4638:	f000 fb20 	bl	4c7c <puts>
    UartEndSimulation();
    463c:	f000 fa76 	bl	4b2c <UartEndSimulation>
    4640:	e7fe      	b.n	4640 <PORT0_11_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4642:	4909      	ldr	r1, [pc, #36]	; (4668 <PORT0_11_Handler+0x68>)
    4644:	6848      	ldr	r0, [r1, #4]
    4646:	681a      	ldr	r2, [r3, #0]
    4648:	4042      	eors	r2, r0
    464a:	604a      	str	r2, [r1, #4]
    464c:	f3bf 8f6f 	isb	sy
    4650:	f3bf 8f6f 	isb	sy
    4654:	f3bf 8f6f 	isb	sy
    4658:	e7e0      	b.n	461c <PORT0_11_Handler+0x1c>
    465a:	bf00      	nop
    465c:	20000074 	.word	0x20000074
    4660:	200000b0 	.word	0x200000b0
    4664:	200000a4 	.word	0x200000a4
    4668:	40010000 	.word	0x40010000
    466c:	200000a8 	.word	0x200000a8
    4670:	20000078 	.word	0x20000078
    4674:	00006540 	.word	0x00006540

00004678 <PORT0_12_Handler>:
void PORT0_12_Handler(void){
    4678:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    467a:	4b16      	ldr	r3, [pc, #88]	; (46d4 <PORT0_12_Handler+0x5c>)
    467c:	681a      	ldr	r2, [r3, #0]
    467e:	b1b2      	cbz	r2, 46ae <PORT0_12_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4680:	4a15      	ldr	r2, [pc, #84]	; (46d8 <PORT0_12_Handler+0x60>)
    4682:	6812      	ldr	r2, [r2, #0]
    4684:	b132      	cbz	r2, 4694 <PORT0_12_Handler+0x1c>
    if (multi_irq_test > 1) {
    4686:	4a15      	ldr	r2, [pc, #84]	; (46dc <PORT0_12_Handler+0x64>)
    4688:	6811      	ldr	r1, [r2, #0]
    468a:	2901      	cmp	r1, #1
    468c:	dd15      	ble.n	46ba <PORT0_12_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    468e:	6811      	ldr	r1, [r2, #0]
    4690:	3901      	subs	r1, #1
    4692:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4694:	681a      	ldr	r2, [r3, #0]
    4696:	4b12      	ldr	r3, [pc, #72]	; (46e0 <PORT0_12_Handler+0x68>)
  gpio0_irq_occurred++;
    4698:	4912      	ldr	r1, [pc, #72]	; (46e4 <PORT0_12_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    469a:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    469c:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[12]++;
    469e:	4a12      	ldr	r2, [pc, #72]	; (46e8 <PORT0_12_Handler+0x70>)
  gpio0_irq_occurred++;
    46a0:	3301      	adds	r3, #1
    46a2:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[12]++;
    46a4:	7b13      	ldrb	r3, [r2, #12]
    46a6:	3301      	adds	r3, #1
    46a8:	b2db      	uxtb	r3, r3
    46aa:	7313      	strb	r3, [r2, #12]
  return;
}
    46ac:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    46ae:	480f      	ldr	r0, [pc, #60]	; (46ec <PORT0_12_Handler+0x74>)
    46b0:	f000 fae4 	bl	4c7c <puts>
    UartEndSimulation();
    46b4:	f000 fa3a 	bl	4b2c <UartEndSimulation>
    46b8:	e7fe      	b.n	46b8 <PORT0_12_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    46ba:	4909      	ldr	r1, [pc, #36]	; (46e0 <PORT0_12_Handler+0x68>)
    46bc:	6848      	ldr	r0, [r1, #4]
    46be:	681a      	ldr	r2, [r3, #0]
    46c0:	4042      	eors	r2, r0
    46c2:	604a      	str	r2, [r1, #4]
    46c4:	f3bf 8f6f 	isb	sy
    46c8:	f3bf 8f6f 	isb	sy
    46cc:	f3bf 8f6f 	isb	sy
    46d0:	e7e0      	b.n	4694 <PORT0_12_Handler+0x1c>
    46d2:	bf00      	nop
    46d4:	20000074 	.word	0x20000074
    46d8:	200000b0 	.word	0x200000b0
    46dc:	200000a4 	.word	0x200000a4
    46e0:	40010000 	.word	0x40010000
    46e4:	200000a8 	.word	0x200000a8
    46e8:	20000078 	.word	0x20000078
    46ec:	00006540 	.word	0x00006540

000046f0 <PORT0_13_Handler>:
void PORT0_13_Handler(void){
    46f0:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    46f2:	4b16      	ldr	r3, [pc, #88]	; (474c <PORT0_13_Handler+0x5c>)
    46f4:	681a      	ldr	r2, [r3, #0]
    46f6:	b1b2      	cbz	r2, 4726 <PORT0_13_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    46f8:	4a15      	ldr	r2, [pc, #84]	; (4750 <PORT0_13_Handler+0x60>)
    46fa:	6812      	ldr	r2, [r2, #0]
    46fc:	b132      	cbz	r2, 470c <PORT0_13_Handler+0x1c>
    if (multi_irq_test > 1) {
    46fe:	4a15      	ldr	r2, [pc, #84]	; (4754 <PORT0_13_Handler+0x64>)
    4700:	6811      	ldr	r1, [r2, #0]
    4702:	2901      	cmp	r1, #1
    4704:	dd15      	ble.n	4732 <PORT0_13_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    4706:	6811      	ldr	r1, [r2, #0]
    4708:	3901      	subs	r1, #1
    470a:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    470c:	681a      	ldr	r2, [r3, #0]
    470e:	4b12      	ldr	r3, [pc, #72]	; (4758 <PORT0_13_Handler+0x68>)
  gpio0_irq_occurred++;
    4710:	4912      	ldr	r1, [pc, #72]	; (475c <PORT0_13_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4712:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4714:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[13]++;
    4716:	4a12      	ldr	r2, [pc, #72]	; (4760 <PORT0_13_Handler+0x70>)
  gpio0_irq_occurred++;
    4718:	3301      	adds	r3, #1
    471a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[13]++;
    471c:	7b53      	ldrb	r3, [r2, #13]
    471e:	3301      	adds	r3, #1
    4720:	b2db      	uxtb	r3, r3
    4722:	7353      	strb	r3, [r2, #13]
  return;
}
    4724:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4726:	480f      	ldr	r0, [pc, #60]	; (4764 <PORT0_13_Handler+0x74>)
    4728:	f000 faa8 	bl	4c7c <puts>
    UartEndSimulation();
    472c:	f000 f9fe 	bl	4b2c <UartEndSimulation>
    4730:	e7fe      	b.n	4730 <PORT0_13_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4732:	4909      	ldr	r1, [pc, #36]	; (4758 <PORT0_13_Handler+0x68>)
    4734:	6848      	ldr	r0, [r1, #4]
    4736:	681a      	ldr	r2, [r3, #0]
    4738:	4042      	eors	r2, r0
    473a:	604a      	str	r2, [r1, #4]
    473c:	f3bf 8f6f 	isb	sy
    4740:	f3bf 8f6f 	isb	sy
    4744:	f3bf 8f6f 	isb	sy
    4748:	e7e0      	b.n	470c <PORT0_13_Handler+0x1c>
    474a:	bf00      	nop
    474c:	20000074 	.word	0x20000074
    4750:	200000b0 	.word	0x200000b0
    4754:	200000a4 	.word	0x200000a4
    4758:	40010000 	.word	0x40010000
    475c:	200000a8 	.word	0x200000a8
    4760:	20000078 	.word	0x20000078
    4764:	00006540 	.word	0x00006540

00004768 <PORT0_14_Handler>:
void PORT0_14_Handler(void){
    4768:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    476a:	4b16      	ldr	r3, [pc, #88]	; (47c4 <PORT0_14_Handler+0x5c>)
    476c:	681a      	ldr	r2, [r3, #0]
    476e:	b1b2      	cbz	r2, 479e <PORT0_14_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    4770:	4a15      	ldr	r2, [pc, #84]	; (47c8 <PORT0_14_Handler+0x60>)
    4772:	6812      	ldr	r2, [r2, #0]
    4774:	b132      	cbz	r2, 4784 <PORT0_14_Handler+0x1c>
    if (multi_irq_test > 1) {
    4776:	4a15      	ldr	r2, [pc, #84]	; (47cc <PORT0_14_Handler+0x64>)
    4778:	6811      	ldr	r1, [r2, #0]
    477a:	2901      	cmp	r1, #1
    477c:	dd15      	ble.n	47aa <PORT0_14_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    477e:	6811      	ldr	r1, [r2, #0]
    4780:	3901      	subs	r1, #1
    4782:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4784:	681a      	ldr	r2, [r3, #0]
    4786:	4b12      	ldr	r3, [pc, #72]	; (47d0 <PORT0_14_Handler+0x68>)
  gpio0_irq_occurred++;
    4788:	4912      	ldr	r1, [pc, #72]	; (47d4 <PORT0_14_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    478a:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    478c:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[14]++;
    478e:	4a12      	ldr	r2, [pc, #72]	; (47d8 <PORT0_14_Handler+0x70>)
  gpio0_irq_occurred++;
    4790:	3301      	adds	r3, #1
    4792:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[14]++;
    4794:	7b93      	ldrb	r3, [r2, #14]
    4796:	3301      	adds	r3, #1
    4798:	b2db      	uxtb	r3, r3
    479a:	7393      	strb	r3, [r2, #14]
  return;
}
    479c:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    479e:	480f      	ldr	r0, [pc, #60]	; (47dc <PORT0_14_Handler+0x74>)
    47a0:	f000 fa6c 	bl	4c7c <puts>
    UartEndSimulation();
    47a4:	f000 f9c2 	bl	4b2c <UartEndSimulation>
    47a8:	e7fe      	b.n	47a8 <PORT0_14_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    47aa:	4909      	ldr	r1, [pc, #36]	; (47d0 <PORT0_14_Handler+0x68>)
    47ac:	6848      	ldr	r0, [r1, #4]
    47ae:	681a      	ldr	r2, [r3, #0]
    47b0:	4042      	eors	r2, r0
    47b2:	604a      	str	r2, [r1, #4]
    47b4:	f3bf 8f6f 	isb	sy
    47b8:	f3bf 8f6f 	isb	sy
    47bc:	f3bf 8f6f 	isb	sy
    47c0:	e7e0      	b.n	4784 <PORT0_14_Handler+0x1c>
    47c2:	bf00      	nop
    47c4:	20000074 	.word	0x20000074
    47c8:	200000b0 	.word	0x200000b0
    47cc:	200000a4 	.word	0x200000a4
    47d0:	40010000 	.word	0x40010000
    47d4:	200000a8 	.word	0x200000a8
    47d8:	20000078 	.word	0x20000078
    47dc:	00006540 	.word	0x00006540

000047e0 <PORT0_15_Handler>:
void PORT0_15_Handler(void){
    47e0:	b508      	push	{r3, lr}
  if (gpio0_irq_expected==0) {
    47e2:	4b16      	ldr	r3, [pc, #88]	; (483c <PORT0_15_Handler+0x5c>)
    47e4:	681a      	ldr	r2, [r3, #0]
    47e6:	b1b2      	cbz	r2, 4816 <PORT0_15_Handler+0x36>
  else if (gpio0_irq_level_irq!=0) {
    47e8:	4a15      	ldr	r2, [pc, #84]	; (4840 <PORT0_15_Handler+0x60>)
    47ea:	6812      	ldr	r2, [r2, #0]
    47ec:	b132      	cbz	r2, 47fc <PORT0_15_Handler+0x1c>
    if (multi_irq_test > 1) {
    47ee:	4a15      	ldr	r2, [pc, #84]	; (4844 <PORT0_15_Handler+0x64>)
    47f0:	6811      	ldr	r1, [r2, #0]
    47f2:	2901      	cmp	r1, #1
    47f4:	dd15      	ble.n	4822 <PORT0_15_Handler+0x42>
      multi_irq_test--; /* twice here : 3->2, 2->1 */
    47f6:	6811      	ldr	r1, [r2, #0]
    47f8:	3901      	subs	r1, #1
    47fa:	6011      	str	r1, [r2, #0]
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    47fc:	681a      	ldr	r2, [r3, #0]
    47fe:	4b12      	ldr	r3, [pc, #72]	; (4848 <PORT0_15_Handler+0x68>)
  gpio0_irq_occurred++;
    4800:	4912      	ldr	r1, [pc, #72]	; (484c <PORT0_15_Handler+0x6c>)
  CM3DS_MPS2_GPIO0->INTCLEAR = gpio0_irq_expected;
    4802:	639a      	str	r2, [r3, #56]	; 0x38
  gpio0_irq_occurred++;
    4804:	680b      	ldr	r3, [r1, #0]
  PORT0_COMB_Handler();
  gpio0_irq_flags[15]++;
    4806:	4a12      	ldr	r2, [pc, #72]	; (4850 <PORT0_15_Handler+0x70>)
  gpio0_irq_occurred++;
    4808:	3301      	adds	r3, #1
    480a:	600b      	str	r3, [r1, #0]
  gpio0_irq_flags[15]++;
    480c:	7bd3      	ldrb	r3, [r2, #15]
    480e:	3301      	adds	r3, #1
    4810:	b2db      	uxtb	r3, r3
    4812:	73d3      	strb	r3, [r2, #15]
  return;
}
    4814:	bd08      	pop	{r3, pc}
    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
    4816:	480f      	ldr	r0, [pc, #60]	; (4854 <PORT0_15_Handler+0x74>)
    4818:	f000 fa30 	bl	4c7c <puts>
    UartEndSimulation();
    481c:	f000 f986 	bl	4b2c <UartEndSimulation>
    4820:	e7fe      	b.n	4820 <PORT0_15_Handler+0x40>
      CM3DS_MPS2_GPIO0->DATAOUT = CM3DS_MPS2_GPIO0->DATAOUT ^ gpio0_irq_expected;
    4822:	4909      	ldr	r1, [pc, #36]	; (4848 <PORT0_15_Handler+0x68>)
    4824:	6848      	ldr	r0, [r1, #4]
    4826:	681a      	ldr	r2, [r3, #0]
    4828:	4042      	eors	r2, r0
    482a:	604a      	str	r2, [r1, #4]
    482c:	f3bf 8f6f 	isb	sy
    4830:	f3bf 8f6f 	isb	sy
    4834:	f3bf 8f6f 	isb	sy
    4838:	e7e0      	b.n	47fc <PORT0_15_Handler+0x1c>
    483a:	bf00      	nop
    483c:	20000074 	.word	0x20000074
    4840:	200000b0 	.word	0x200000b0
    4844:	200000a4 	.word	0x200000a4
    4848:	40010000 	.word	0x40010000
    484c:	200000a8 	.word	0x200000a8
    4850:	20000078 	.word	0x20000078
    4854:	00006540 	.word	0x00006540

00004858 <main>:
{
    4858:	b538      	push	{r3, r4, r5, lr}
  UartStdOutInit();
    485a:	f000 f94f 	bl	4afc <UartStdOutInit>
  puts("Cortex-M3 DesignStart - GPIO Test - revision $Revision: 243249 $\n");
    485e:	4874      	ldr	r0, [pc, #464]	; (4a30 <main+0x1d8>)
    4860:	f000 fa0c 	bl	4c7c <puts>
  gpio0_irq_occurred = 0;
    4864:	2300      	movs	r3, #0
    4866:	4c73      	ldr	r4, [pc, #460]	; (4a34 <main+0x1dc>)
  gpio1_irq_occurred = 0;
    4868:	4973      	ldr	r1, [pc, #460]	; (4a38 <main+0x1e0>)
  gpio2_irq_occurred = 0;
    486a:	4a74      	ldr	r2, [pc, #464]	; (4a3c <main+0x1e4>)
  gpio3_irq_occurred = 0;
    486c:	4874      	ldr	r0, [pc, #464]	; (4a40 <main+0x1e8>)
  gpio0_irq_occurred = 0;
    486e:	6023      	str	r3, [r4, #0]
  gpio0_irq_expected = 0;
    4870:	4d74      	ldr	r5, [pc, #464]	; (4a44 <main+0x1ec>)
  gpio1_irq_occurred = 0;
    4872:	600b      	str	r3, [r1, #0]
  gpio1_irq_expected = 0;
    4874:	4c74      	ldr	r4, [pc, #464]	; (4a48 <main+0x1f0>)
  gpio2_irq_occurred = 0;
    4876:	6013      	str	r3, [r2, #0]
  gpio2_irq_expected = 0;
    4878:	4974      	ldr	r1, [pc, #464]	; (4a4c <main+0x1f4>)
  gpio3_irq_expected = 0;
    487a:	4a75      	ldr	r2, [pc, #468]	; (4a50 <main+0x1f8>)
  gpio3_irq_occurred = 0;
    487c:	6003      	str	r3, [r0, #0]
  puts("1) GPIO 0");
    487e:	4875      	ldr	r0, [pc, #468]	; (4a54 <main+0x1fc>)
  gpio0_irq_expected = 0;
    4880:	602b      	str	r3, [r5, #0]
  gpio1_irq_expected = 0;
    4882:	6023      	str	r3, [r4, #0]
  gpio2_irq_expected = 0;
    4884:	600b      	str	r3, [r1, #0]
  gpio3_irq_expected = 0;
    4886:	6013      	str	r3, [r2, #0]
  puts("1) GPIO 0");
    4888:	f000 f9f8 	bl	4c7c <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
    488c:	4b72      	ldr	r3, [pc, #456]	; (4a58 <main+0x200>)
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    488e:	4a73      	ldr	r2, [pc, #460]	; (4a5c <main+0x204>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
    4890:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    4892:	6812      	ldr	r2, [r2, #0]
    4894:	2a20      	cmp	r2, #32
    4896:	d103      	bne.n	48a0 <main+0x48>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
    4898:	4a71      	ldr	r2, [pc, #452]	; (4a60 <main+0x208>)
    489a:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    489c:	2ab8      	cmp	r2, #184	; 0xb8
    489e:	d068      	beq.n	4972 <main+0x11a>
    puts ("- GPIO #0 not present. Tests skipped.");
    48a0:	4870      	ldr	r0, [pc, #448]	; (4a64 <main+0x20c>)
    48a2:	f000 f9eb 	bl	4c7c <puts>
  int result=0;
    48a6:	2400      	movs	r4, #0
  puts("\n2) GPIO 1");
    48a8:	486f      	ldr	r0, [pc, #444]	; (4a68 <main+0x210>)
    48aa:	f000 f9e7 	bl	4c7c <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
    48ae:	4b6f      	ldr	r3, [pc, #444]	; (4a6c <main+0x214>)
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    48b0:	4a6f      	ldr	r2, [pc, #444]	; (4a70 <main+0x218>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
    48b2:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    48b4:	6812      	ldr	r2, [r2, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
    48b6:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    48b8:	2a20      	cmp	r2, #32
    48ba:	d103      	bne.n	48c4 <main+0x6c>
      (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8) ||
    48bc:	4a6d      	ldr	r2, [pc, #436]	; (4a74 <main+0x21c>)
    48be:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    48c0:	2ab8      	cmp	r2, #184	; 0xb8
    48c2:	d06c      	beq.n	499e <main+0x146>
    puts ("- GPIO #1 not present. Tests skipped.");
    48c4:	486c      	ldr	r0, [pc, #432]	; (4a78 <main+0x220>)
    48c6:	f000 f9d9 	bl	4c7c <puts>
  puts("\n3) GPIO 2");
    48ca:	486c      	ldr	r0, [pc, #432]	; (4a7c <main+0x224>)
    48cc:	f000 f9d6 	bl	4c7c <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
    48d0:	4b66      	ldr	r3, [pc, #408]	; (4a6c <main+0x214>)
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
    48d2:	4a6b      	ldr	r2, [pc, #428]	; (4a80 <main+0x228>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
    48d4:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
    48d6:	6812      	ldr	r2, [r2, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO1_BASE  + 0xFE8) & 0x07;
    48d8:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
    48da:	2a20      	cmp	r2, #32
    48dc:	d103      	bne.n	48e6 <main+0x8e>
      (HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE4) != 0xB8) ||
    48de:	4a69      	ldr	r2, [pc, #420]	; (4a84 <main+0x22c>)
    48e0:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE0) != 0x20) ||
    48e2:	2ab8      	cmp	r2, #184	; 0xb8
    48e4:	d070      	beq.n	49c8 <main+0x170>
    puts ("- GPIO #2 not present. Tests skipped.");
    48e6:	4868      	ldr	r0, [pc, #416]	; (4a88 <main+0x230>)
    48e8:	f000 f9c8 	bl	4c7c <puts>
  puts("\n3) GPIO 3");
    48ec:	4867      	ldr	r0, [pc, #412]	; (4a8c <main+0x234>)
    48ee:	f000 f9c5 	bl	4c7c <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO3_BASE  + 0xFE8) & 0x07;
    48f2:	4b67      	ldr	r3, [pc, #412]	; (4a90 <main+0x238>)
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
    48f4:	4a67      	ldr	r2, [pc, #412]	; (4a94 <main+0x23c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO3_BASE  + 0xFE8) & 0x07;
    48f6:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
    48f8:	6812      	ldr	r2, [r2, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO3_BASE  + 0xFE8) & 0x07;
    48fa:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
    48fc:	2a20      	cmp	r2, #32
    48fe:	d103      	bne.n	4908 <main+0xb0>
      (HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE4) != 0xB8) ||
    4900:	4a65      	ldr	r2, [pc, #404]	; (4a98 <main+0x240>)
    4902:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE0) != 0x20) ||
    4904:	2ab8      	cmp	r2, #184	; 0xb8
    4906:	d074      	beq.n	49f2 <main+0x19a>
    puts ("- GPIO #3 not present. Tests skipped.");
    4908:	4864      	ldr	r0, [pc, #400]	; (4a9c <main+0x244>)
    490a:	f000 f9b7 	bl	4c7c <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO4_BASE  + 0xFE8) & 0x07;
    490e:	4b64      	ldr	r3, [pc, #400]	; (4aa0 <main+0x248>)
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
    4910:	4a64      	ldr	r2, [pc, #400]	; (4aa4 <main+0x24c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO4_BASE  + 0xFE8) & 0x07;
    4912:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
    4914:	6812      	ldr	r2, [r2, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO4_BASE  + 0xFE8) & 0x07;
    4916:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
    4918:	2a20      	cmp	r2, #32
    491a:	d103      	bne.n	4924 <main+0xcc>
      (HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE4) != 0xB8) ||
    491c:	4a62      	ldr	r2, [pc, #392]	; (4aa8 <main+0x250>)
    491e:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE0) != 0x20) ||
    4920:	2ab8      	cmp	r2, #184	; 0xb8
    4922:	d07b      	beq.n	4a1c <main+0x1c4>
    puts ("- GPIO #4 not present. Tests skipped.");
    4924:	4861      	ldr	r0, [pc, #388]	; (4aac <main+0x254>)
    4926:	f000 f9a9 	bl	4c7c <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO5_BASE  + 0xFE8) & 0x07;
    492a:	4b61      	ldr	r3, [pc, #388]	; (4ab0 <main+0x258>)
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
    492c:	4a61      	ldr	r2, [pc, #388]	; (4ab4 <main+0x25c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO5_BASE  + 0xFE8) & 0x07;
    492e:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
    4930:	6812      	ldr	r2, [r2, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO5_BASE  + 0xFE8) & 0x07;
    4932:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
    4934:	2a20      	cmp	r2, #32
    4936:	d103      	bne.n	4940 <main+0xe8>
      (HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE4) != 0xB8) ||
    4938:	4a5f      	ldr	r2, [pc, #380]	; (4ab8 <main+0x260>)
    493a:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE0) != 0x20) ||
    493c:	2ab8      	cmp	r2, #184	; 0xb8
    493e:	d00f      	beq.n	4960 <main+0x108>
    puts ("- GPIO #5 not present. Tests skipped.");
    4940:	485e      	ldr	r0, [pc, #376]	; (4abc <main+0x264>)
    4942:	f000 f99b 	bl	4c7c <puts>
  if (result==0) {
    4946:	b13c      	cbz	r4, 4958 <main+0x100>
    printf ("\n** TEST FAILED **, Error code = (0x%x)\n", result);
    4948:	4621      	mov	r1, r4
    494a:	485d      	ldr	r0, [pc, #372]	; (4ac0 <main+0x268>)
    494c:	f000 f922 	bl	4b94 <iprintf>
  UartEndSimulation();
    4950:	f000 f8ec 	bl	4b2c <UartEndSimulation>
}
    4954:	2000      	movs	r0, #0
    4956:	bd38      	pop	{r3, r4, r5, pc}
    printf ("\n** TEST PASSED **\n");
    4958:	485a      	ldr	r0, [pc, #360]	; (4ac4 <main+0x26c>)
    495a:	f000 f98f 	bl	4c7c <puts>
    495e:	e7f7      	b.n	4950 <main+0xf8>
      (HW32_REG(CM3DS_MPS2_GPIO5_BASE + 0xFE4) != 0xB8) ||
    4960:	f003 0307 	and.w	r3, r3, #7
    4964:	2b03      	cmp	r3, #3
    4966:	d1eb      	bne.n	4940 <main+0xe8>
    result += gpio_unused_addresses_test(CM3DS_MPS2_GPIO5);
    4968:	4857      	ldr	r0, [pc, #348]	; (4ac8 <main+0x270>)
    496a:	f7fd fe55 	bl	2618 <gpio_unused_addresses_test>
    496e:	4404      	add	r4, r0
    4970:	e7e9      	b.n	4946 <main+0xee>
    4972:	b2db      	uxtb	r3, r3
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
    4974:	f003 0307 	and.w	r3, r3, #7
    4978:	2b03      	cmp	r3, #3
    497a:	d191      	bne.n	48a0 <main+0x48>
    result += gpio_register_rw_test(CM3DS_MPS2_GPIO0);
    497c:	4853      	ldr	r0, [pc, #332]	; (4acc <main+0x274>)
    497e:	f7fc f88b 	bl	a98 <gpio_register_rw_test>
    4982:	4604      	mov	r4, r0
    result += gpio_interrupt_test(CM3DS_MPS2_GPIO0);
    4984:	4851      	ldr	r0, [pc, #324]	; (4acc <main+0x274>)
    4986:	f7fe f837 	bl	29f8 <gpio_interrupt_test>
    498a:	4404      	add	r4, r0
    result += gpio_masked_access_test(CM3DS_MPS2_GPIO0);
    498c:	484f      	ldr	r0, [pc, #316]	; (4acc <main+0x274>)
    498e:	f7fb fcdf 	bl	350 <gpio_masked_access_test>
    4992:	4404      	add	r4, r0
    result += gpio_unused_addresses_test(CM3DS_MPS2_GPIO0);
    4994:	484d      	ldr	r0, [pc, #308]	; (4acc <main+0x274>)
    4996:	f7fd fe3f 	bl	2618 <gpio_unused_addresses_test>
    499a:	4404      	add	r4, r0
    499c:	e784      	b.n	48a8 <main+0x50>
      (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8) ||
    499e:	f003 0307 	and.w	r3, r3, #7
    49a2:	2b03      	cmp	r3, #3
    49a4:	d18e      	bne.n	48c4 <main+0x6c>
    result += gpio_register_rw_test(CM3DS_MPS2_GPIO1);
    49a6:	484a      	ldr	r0, [pc, #296]	; (4ad0 <main+0x278>)
    49a8:	f7fc f876 	bl	a98 <gpio_register_rw_test>
    49ac:	4404      	add	r4, r0
    result += gpio_interrupt_test(CM3DS_MPS2_GPIO1);
    49ae:	4848      	ldr	r0, [pc, #288]	; (4ad0 <main+0x278>)
    49b0:	f7fe f822 	bl	29f8 <gpio_interrupt_test>
    49b4:	4404      	add	r4, r0
    result += gpio_masked_access_test(CM3DS_MPS2_GPIO1);
    49b6:	4846      	ldr	r0, [pc, #280]	; (4ad0 <main+0x278>)
    49b8:	f7fb fcca 	bl	350 <gpio_masked_access_test>
    49bc:	4404      	add	r4, r0
    result += gpio_unused_addresses_test(CM3DS_MPS2_GPIO1);
    49be:	4844      	ldr	r0, [pc, #272]	; (4ad0 <main+0x278>)
    49c0:	f7fd fe2a 	bl	2618 <gpio_unused_addresses_test>
    49c4:	4404      	add	r4, r0
    49c6:	e780      	b.n	48ca <main+0x72>
      (HW32_REG(CM3DS_MPS2_GPIO2_BASE + 0xFE4) != 0xB8) ||
    49c8:	f003 0307 	and.w	r3, r3, #7
    49cc:	2b03      	cmp	r3, #3
    49ce:	d18a      	bne.n	48e6 <main+0x8e>
    result += gpio_register_rw_test(CM3DS_MPS2_GPIO2);
    49d0:	4840      	ldr	r0, [pc, #256]	; (4ad4 <main+0x27c>)
    49d2:	f7fc f861 	bl	a98 <gpio_register_rw_test>
    49d6:	4404      	add	r4, r0
    result += gpio_interrupt_test(CM3DS_MPS2_GPIO2);
    49d8:	483e      	ldr	r0, [pc, #248]	; (4ad4 <main+0x27c>)
    49da:	f7fe f80d 	bl	29f8 <gpio_interrupt_test>
    49de:	4404      	add	r4, r0
    result += gpio_masked_access_test(CM3DS_MPS2_GPIO2);
    49e0:	483c      	ldr	r0, [pc, #240]	; (4ad4 <main+0x27c>)
    49e2:	f7fb fcb5 	bl	350 <gpio_masked_access_test>
    49e6:	4404      	add	r4, r0
    result += gpio_unused_addresses_test(CM3DS_MPS2_GPIO2);
    49e8:	483a      	ldr	r0, [pc, #232]	; (4ad4 <main+0x27c>)
    49ea:	f7fd fe15 	bl	2618 <gpio_unused_addresses_test>
    49ee:	4404      	add	r4, r0
    49f0:	e77c      	b.n	48ec <main+0x94>
      (HW32_REG(CM3DS_MPS2_GPIO3_BASE + 0xFE4) != 0xB8) ||
    49f2:	f003 0307 	and.w	r3, r3, #7
    49f6:	2b03      	cmp	r3, #3
    49f8:	d186      	bne.n	4908 <main+0xb0>
    result += gpio_register_rw_test(CM3DS_MPS2_GPIO3);
    49fa:	4837      	ldr	r0, [pc, #220]	; (4ad8 <main+0x280>)
    49fc:	f7fc f84c 	bl	a98 <gpio_register_rw_test>
    4a00:	4404      	add	r4, r0
    result += gpio_interrupt_test(CM3DS_MPS2_GPIO3);
    4a02:	4835      	ldr	r0, [pc, #212]	; (4ad8 <main+0x280>)
    4a04:	f7fd fff8 	bl	29f8 <gpio_interrupt_test>
    4a08:	4404      	add	r4, r0
    result += gpio_masked_access_test(CM3DS_MPS2_GPIO3);
    4a0a:	4833      	ldr	r0, [pc, #204]	; (4ad8 <main+0x280>)
    4a0c:	f7fb fca0 	bl	350 <gpio_masked_access_test>
    4a10:	4404      	add	r4, r0
    result += gpio_unused_addresses_test(CM3DS_MPS2_GPIO3);
    4a12:	4831      	ldr	r0, [pc, #196]	; (4ad8 <main+0x280>)
    4a14:	f7fd fe00 	bl	2618 <gpio_unused_addresses_test>
    4a18:	4404      	add	r4, r0
    4a1a:	e778      	b.n	490e <main+0xb6>
      (HW32_REG(CM3DS_MPS2_GPIO4_BASE + 0xFE4) != 0xB8) ||
    4a1c:	f003 0307 	and.w	r3, r3, #7
    4a20:	2b03      	cmp	r3, #3
    4a22:	f47f af7f 	bne.w	4924 <main+0xcc>
    result += gpio_unused_addresses_test(CM3DS_MPS2_GPIO4);
    4a26:	482d      	ldr	r0, [pc, #180]	; (4adc <main+0x284>)
    4a28:	f7fd fdf6 	bl	2618 <gpio_unused_addresses_test>
    4a2c:	4404      	add	r4, r0
    4a2e:	e77c      	b.n	492a <main+0xd2>
    4a30:	0000639c 	.word	0x0000639c
    4a34:	200000a8 	.word	0x200000a8
    4a38:	200000ac 	.word	0x200000ac
    4a3c:	20000090 	.word	0x20000090
    4a40:	20000094 	.word	0x20000094
    4a44:	20000074 	.word	0x20000074
    4a48:	2000008c 	.word	0x2000008c
    4a4c:	20000098 	.word	0x20000098
    4a50:	20000088 	.word	0x20000088
    4a54:	000063e0 	.word	0x000063e0
    4a58:	40010fe8 	.word	0x40010fe8
    4a5c:	40010fe0 	.word	0x40010fe0
    4a60:	40010fe4 	.word	0x40010fe4
    4a64:	000063ec 	.word	0x000063ec
    4a68:	00006414 	.word	0x00006414
    4a6c:	40011fe8 	.word	0x40011fe8
    4a70:	40011fe0 	.word	0x40011fe0
    4a74:	40011fe4 	.word	0x40011fe4
    4a78:	00006420 	.word	0x00006420
    4a7c:	00006448 	.word	0x00006448
    4a80:	40012fe0 	.word	0x40012fe0
    4a84:	40012fe4 	.word	0x40012fe4
    4a88:	00006454 	.word	0x00006454
    4a8c:	0000647c 	.word	0x0000647c
    4a90:	40013fe8 	.word	0x40013fe8
    4a94:	40013fe0 	.word	0x40013fe0
    4a98:	40013fe4 	.word	0x40013fe4
    4a9c:	00006488 	.word	0x00006488
    4aa0:	40030fe8 	.word	0x40030fe8
    4aa4:	40030fe0 	.word	0x40030fe0
    4aa8:	40030fe4 	.word	0x40030fe4
    4aac:	000064b0 	.word	0x000064b0
    4ab0:	40031fe8 	.word	0x40031fe8
    4ab4:	40031fe0 	.word	0x40031fe0
    4ab8:	40031fe4 	.word	0x40031fe4
    4abc:	000064d8 	.word	0x000064d8
    4ac0:	00006514 	.word	0x00006514
    4ac4:	00006500 	.word	0x00006500
    4ac8:	40031000 	.word	0x40031000
    4acc:	40010000 	.word	0x40010000
    4ad0:	40011000 	.word	0x40011000
    4ad4:	40012000 	.word	0x40012000
    4ad8:	40013000 	.word	0x40013000
    4adc:	40030000 	.word	0x40030000

00004ae0 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
    4ae0:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
    4ae2:	4616      	mov	r6, r2
    4ae4:	b13a      	cbz	r2, 4af6 <_write+0x16>
    4ae6:	1e4c      	subs	r4, r1, #1
    4ae8:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
    4aea:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    4aee:	f000 f80d 	bl	4b0c <UartPutc>
  for (i=0; i<len;i++) {
    4af2:	42ac      	cmp	r4, r5
    4af4:	d1f9      	bne.n	4aea <_write+0xa>
    }
  return len;
}
    4af6:	4630      	mov	r0, r6
    4af8:	bd70      	pop	{r4, r5, r6, pc}
    4afa:	bf00      	nop

00004afc <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
    4afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4b00:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
    4b02:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
    4b04:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
    4b06:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
    4b08:	4770      	bx	lr
    4b0a:	bf00      	nop

00004b0c <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
    4b0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    4b10:	6853      	ldr	r3, [r2, #4]
    4b12:	07db      	lsls	r3, r3, #31
    4b14:	d4fc      	bmi.n	4b10 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
    4b16:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
    4b18:	4770      	bx	lr
    4b1a:	bf00      	nop

00004b1c <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
    4b1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    4b20:	6853      	ldr	r3, [r2, #4]
    4b22:	079b      	lsls	r3, r3, #30
    4b24:	d5fc      	bpl.n	4b20 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
    4b26:	6810      	ldr	r0, [r2, #0]
}
    4b28:	b2c0      	uxtb	r0, r0
    4b2a:	4770      	bx	lr

00004b2c <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
    4b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4b30:	685a      	ldr	r2, [r3, #4]
    4b32:	07d2      	lsls	r2, r2, #31
    4b34:	d4fc      	bmi.n	4b30 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
    4b36:	2204      	movs	r2, #4
    4b38:	601a      	str	r2, [r3, #0]
    4b3a:	e7fe      	b.n	4b3a <UartEndSimulation+0xe>

00004b3c <SystemCoreClockUpdate>:
    4b3c:	4b01      	ldr	r3, [pc, #4]	; (4b44 <SystemCoreClockUpdate+0x8>)
    4b3e:	4a02      	ldr	r2, [pc, #8]	; (4b48 <SystemCoreClockUpdate+0xc>)
    4b40:	601a      	str	r2, [r3, #0]
    4b42:	4770      	bx	lr
    4b44:	20000000 	.word	0x20000000
    4b48:	017d7840 	.word	0x017d7840

00004b4c <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    4b4c:	4b01      	ldr	r3, [pc, #4]	; (4b54 <SystemInit+0x8>)
    4b4e:	4a02      	ldr	r2, [pc, #8]	; (4b58 <SystemInit+0xc>)
    4b50:	601a      	str	r2, [r3, #0]

}
    4b52:	4770      	bx	lr
    4b54:	20000000 	.word	0x20000000
    4b58:	017d7840 	.word	0x017d7840

00004b5c <exit>:
    4b5c:	b508      	push	{r3, lr}
    4b5e:	4b07      	ldr	r3, [pc, #28]	; (4b7c <exit+0x20>)
    4b60:	4604      	mov	r4, r0
    4b62:	b113      	cbz	r3, 4b6a <exit+0xe>
    4b64:	2100      	movs	r1, #0
    4b66:	f3af 8000 	nop.w
    4b6a:	4b05      	ldr	r3, [pc, #20]	; (4b80 <exit+0x24>)
    4b6c:	6818      	ldr	r0, [r3, #0]
    4b6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    4b70:	b103      	cbz	r3, 4b74 <exit+0x18>
    4b72:	4798      	blx	r3
    4b74:	4620      	mov	r0, r4
    4b76:	f000 ff93 	bl	5aa0 <_exit>
    4b7a:	bf00      	nop
    4b7c:	00000000 	.word	0x00000000
    4b80:	00006600 	.word	0x00006600

00004b84 <memset>:
    4b84:	4603      	mov	r3, r0
    4b86:	4402      	add	r2, r0
    4b88:	4293      	cmp	r3, r2
    4b8a:	d100      	bne.n	4b8e <memset+0xa>
    4b8c:	4770      	bx	lr
    4b8e:	f803 1b01 	strb.w	r1, [r3], #1
    4b92:	e7f9      	b.n	4b88 <memset+0x4>

00004b94 <iprintf>:
    4b94:	b40f      	push	{r0, r1, r2, r3}
    4b96:	4b0a      	ldr	r3, [pc, #40]	; (4bc0 <iprintf+0x2c>)
    4b98:	b513      	push	{r0, r1, r4, lr}
    4b9a:	681c      	ldr	r4, [r3, #0]
    4b9c:	b124      	cbz	r4, 4ba8 <iprintf+0x14>
    4b9e:	69a3      	ldr	r3, [r4, #24]
    4ba0:	b913      	cbnz	r3, 4ba8 <iprintf+0x14>
    4ba2:	4620      	mov	r0, r4
    4ba4:	f000 fa22 	bl	4fec <__sinit>
    4ba8:	ab05      	add	r3, sp, #20
    4baa:	9a04      	ldr	r2, [sp, #16]
    4bac:	68a1      	ldr	r1, [r4, #8]
    4bae:	4620      	mov	r0, r4
    4bb0:	9301      	str	r3, [sp, #4]
    4bb2:	f000 fbd7 	bl	5364 <_vfiprintf_r>
    4bb6:	b002      	add	sp, #8
    4bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bbc:	b004      	add	sp, #16
    4bbe:	4770      	bx	lr
    4bc0:	20000004 	.word	0x20000004

00004bc4 <_puts_r>:
    4bc4:	b570      	push	{r4, r5, r6, lr}
    4bc6:	460e      	mov	r6, r1
    4bc8:	4605      	mov	r5, r0
    4bca:	b118      	cbz	r0, 4bd4 <_puts_r+0x10>
    4bcc:	6983      	ldr	r3, [r0, #24]
    4bce:	b90b      	cbnz	r3, 4bd4 <_puts_r+0x10>
    4bd0:	f000 fa0c 	bl	4fec <__sinit>
    4bd4:	69ab      	ldr	r3, [r5, #24]
    4bd6:	68ac      	ldr	r4, [r5, #8]
    4bd8:	b913      	cbnz	r3, 4be0 <_puts_r+0x1c>
    4bda:	4628      	mov	r0, r5
    4bdc:	f000 fa06 	bl	4fec <__sinit>
    4be0:	4b23      	ldr	r3, [pc, #140]	; (4c70 <_puts_r+0xac>)
    4be2:	429c      	cmp	r4, r3
    4be4:	d117      	bne.n	4c16 <_puts_r+0x52>
    4be6:	686c      	ldr	r4, [r5, #4]
    4be8:	89a3      	ldrh	r3, [r4, #12]
    4bea:	071b      	lsls	r3, r3, #28
    4bec:	d51d      	bpl.n	4c2a <_puts_r+0x66>
    4bee:	6923      	ldr	r3, [r4, #16]
    4bf0:	b1db      	cbz	r3, 4c2a <_puts_r+0x66>
    4bf2:	3e01      	subs	r6, #1
    4bf4:	68a3      	ldr	r3, [r4, #8]
    4bf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    4bfa:	3b01      	subs	r3, #1
    4bfc:	60a3      	str	r3, [r4, #8]
    4bfe:	b9e9      	cbnz	r1, 4c3c <_puts_r+0x78>
    4c00:	2b00      	cmp	r3, #0
    4c02:	da2e      	bge.n	4c62 <_puts_r+0x9e>
    4c04:	4622      	mov	r2, r4
    4c06:	210a      	movs	r1, #10
    4c08:	4628      	mov	r0, r5
    4c0a:	f000 f83f 	bl	4c8c <__swbuf_r>
    4c0e:	3001      	adds	r0, #1
    4c10:	d011      	beq.n	4c36 <_puts_r+0x72>
    4c12:	200a      	movs	r0, #10
    4c14:	e011      	b.n	4c3a <_puts_r+0x76>
    4c16:	4b17      	ldr	r3, [pc, #92]	; (4c74 <_puts_r+0xb0>)
    4c18:	429c      	cmp	r4, r3
    4c1a:	d101      	bne.n	4c20 <_puts_r+0x5c>
    4c1c:	68ac      	ldr	r4, [r5, #8]
    4c1e:	e7e3      	b.n	4be8 <_puts_r+0x24>
    4c20:	4b15      	ldr	r3, [pc, #84]	; (4c78 <_puts_r+0xb4>)
    4c22:	429c      	cmp	r4, r3
    4c24:	bf08      	it	eq
    4c26:	68ec      	ldreq	r4, [r5, #12]
    4c28:	e7de      	b.n	4be8 <_puts_r+0x24>
    4c2a:	4621      	mov	r1, r4
    4c2c:	4628      	mov	r0, r5
    4c2e:	f000 f87f 	bl	4d30 <__swsetup_r>
    4c32:	2800      	cmp	r0, #0
    4c34:	d0dd      	beq.n	4bf2 <_puts_r+0x2e>
    4c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c3a:	bd70      	pop	{r4, r5, r6, pc}
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	da04      	bge.n	4c4a <_puts_r+0x86>
    4c40:	69a2      	ldr	r2, [r4, #24]
    4c42:	429a      	cmp	r2, r3
    4c44:	dc06      	bgt.n	4c54 <_puts_r+0x90>
    4c46:	290a      	cmp	r1, #10
    4c48:	d004      	beq.n	4c54 <_puts_r+0x90>
    4c4a:	6823      	ldr	r3, [r4, #0]
    4c4c:	1c5a      	adds	r2, r3, #1
    4c4e:	6022      	str	r2, [r4, #0]
    4c50:	7019      	strb	r1, [r3, #0]
    4c52:	e7cf      	b.n	4bf4 <_puts_r+0x30>
    4c54:	4622      	mov	r2, r4
    4c56:	4628      	mov	r0, r5
    4c58:	f000 f818 	bl	4c8c <__swbuf_r>
    4c5c:	3001      	adds	r0, #1
    4c5e:	d1c9      	bne.n	4bf4 <_puts_r+0x30>
    4c60:	e7e9      	b.n	4c36 <_puts_r+0x72>
    4c62:	200a      	movs	r0, #10
    4c64:	6823      	ldr	r3, [r4, #0]
    4c66:	1c5a      	adds	r2, r3, #1
    4c68:	6022      	str	r2, [r4, #0]
    4c6a:	7018      	strb	r0, [r3, #0]
    4c6c:	e7e5      	b.n	4c3a <_puts_r+0x76>
    4c6e:	bf00      	nop
    4c70:	00006624 	.word	0x00006624
    4c74:	00006644 	.word	0x00006644
    4c78:	00006604 	.word	0x00006604

00004c7c <puts>:
    4c7c:	4b02      	ldr	r3, [pc, #8]	; (4c88 <puts+0xc>)
    4c7e:	4601      	mov	r1, r0
    4c80:	6818      	ldr	r0, [r3, #0]
    4c82:	f7ff bf9f 	b.w	4bc4 <_puts_r>
    4c86:	bf00      	nop
    4c88:	20000004 	.word	0x20000004

00004c8c <__swbuf_r>:
    4c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c8e:	460e      	mov	r6, r1
    4c90:	4614      	mov	r4, r2
    4c92:	4605      	mov	r5, r0
    4c94:	b118      	cbz	r0, 4c9e <__swbuf_r+0x12>
    4c96:	6983      	ldr	r3, [r0, #24]
    4c98:	b90b      	cbnz	r3, 4c9e <__swbuf_r+0x12>
    4c9a:	f000 f9a7 	bl	4fec <__sinit>
    4c9e:	4b21      	ldr	r3, [pc, #132]	; (4d24 <__swbuf_r+0x98>)
    4ca0:	429c      	cmp	r4, r3
    4ca2:	d12a      	bne.n	4cfa <__swbuf_r+0x6e>
    4ca4:	686c      	ldr	r4, [r5, #4]
    4ca6:	69a3      	ldr	r3, [r4, #24]
    4ca8:	60a3      	str	r3, [r4, #8]
    4caa:	89a3      	ldrh	r3, [r4, #12]
    4cac:	071a      	lsls	r2, r3, #28
    4cae:	d52e      	bpl.n	4d0e <__swbuf_r+0x82>
    4cb0:	6923      	ldr	r3, [r4, #16]
    4cb2:	b363      	cbz	r3, 4d0e <__swbuf_r+0x82>
    4cb4:	6923      	ldr	r3, [r4, #16]
    4cb6:	6820      	ldr	r0, [r4, #0]
    4cb8:	b2f6      	uxtb	r6, r6
    4cba:	1ac0      	subs	r0, r0, r3
    4cbc:	6963      	ldr	r3, [r4, #20]
    4cbe:	4637      	mov	r7, r6
    4cc0:	4283      	cmp	r3, r0
    4cc2:	dc04      	bgt.n	4cce <__swbuf_r+0x42>
    4cc4:	4621      	mov	r1, r4
    4cc6:	4628      	mov	r0, r5
    4cc8:	f000 f926 	bl	4f18 <_fflush_r>
    4ccc:	bb28      	cbnz	r0, 4d1a <__swbuf_r+0x8e>
    4cce:	68a3      	ldr	r3, [r4, #8]
    4cd0:	3001      	adds	r0, #1
    4cd2:	3b01      	subs	r3, #1
    4cd4:	60a3      	str	r3, [r4, #8]
    4cd6:	6823      	ldr	r3, [r4, #0]
    4cd8:	1c5a      	adds	r2, r3, #1
    4cda:	6022      	str	r2, [r4, #0]
    4cdc:	701e      	strb	r6, [r3, #0]
    4cde:	6963      	ldr	r3, [r4, #20]
    4ce0:	4283      	cmp	r3, r0
    4ce2:	d004      	beq.n	4cee <__swbuf_r+0x62>
    4ce4:	89a3      	ldrh	r3, [r4, #12]
    4ce6:	07db      	lsls	r3, r3, #31
    4ce8:	d519      	bpl.n	4d1e <__swbuf_r+0x92>
    4cea:	2e0a      	cmp	r6, #10
    4cec:	d117      	bne.n	4d1e <__swbuf_r+0x92>
    4cee:	4621      	mov	r1, r4
    4cf0:	4628      	mov	r0, r5
    4cf2:	f000 f911 	bl	4f18 <_fflush_r>
    4cf6:	b190      	cbz	r0, 4d1e <__swbuf_r+0x92>
    4cf8:	e00f      	b.n	4d1a <__swbuf_r+0x8e>
    4cfa:	4b0b      	ldr	r3, [pc, #44]	; (4d28 <__swbuf_r+0x9c>)
    4cfc:	429c      	cmp	r4, r3
    4cfe:	d101      	bne.n	4d04 <__swbuf_r+0x78>
    4d00:	68ac      	ldr	r4, [r5, #8]
    4d02:	e7d0      	b.n	4ca6 <__swbuf_r+0x1a>
    4d04:	4b09      	ldr	r3, [pc, #36]	; (4d2c <__swbuf_r+0xa0>)
    4d06:	429c      	cmp	r4, r3
    4d08:	bf08      	it	eq
    4d0a:	68ec      	ldreq	r4, [r5, #12]
    4d0c:	e7cb      	b.n	4ca6 <__swbuf_r+0x1a>
    4d0e:	4621      	mov	r1, r4
    4d10:	4628      	mov	r0, r5
    4d12:	f000 f80d 	bl	4d30 <__swsetup_r>
    4d16:	2800      	cmp	r0, #0
    4d18:	d0cc      	beq.n	4cb4 <__swbuf_r+0x28>
    4d1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    4d1e:	4638      	mov	r0, r7
    4d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d22:	bf00      	nop
    4d24:	00006624 	.word	0x00006624
    4d28:	00006644 	.word	0x00006644
    4d2c:	00006604 	.word	0x00006604

00004d30 <__swsetup_r>:
    4d30:	4b32      	ldr	r3, [pc, #200]	; (4dfc <__swsetup_r+0xcc>)
    4d32:	b570      	push	{r4, r5, r6, lr}
    4d34:	681d      	ldr	r5, [r3, #0]
    4d36:	4606      	mov	r6, r0
    4d38:	460c      	mov	r4, r1
    4d3a:	b125      	cbz	r5, 4d46 <__swsetup_r+0x16>
    4d3c:	69ab      	ldr	r3, [r5, #24]
    4d3e:	b913      	cbnz	r3, 4d46 <__swsetup_r+0x16>
    4d40:	4628      	mov	r0, r5
    4d42:	f000 f953 	bl	4fec <__sinit>
    4d46:	4b2e      	ldr	r3, [pc, #184]	; (4e00 <__swsetup_r+0xd0>)
    4d48:	429c      	cmp	r4, r3
    4d4a:	d10f      	bne.n	4d6c <__swsetup_r+0x3c>
    4d4c:	686c      	ldr	r4, [r5, #4]
    4d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4d52:	b29a      	uxth	r2, r3
    4d54:	0715      	lsls	r5, r2, #28
    4d56:	d42c      	bmi.n	4db2 <__swsetup_r+0x82>
    4d58:	06d0      	lsls	r0, r2, #27
    4d5a:	d411      	bmi.n	4d80 <__swsetup_r+0x50>
    4d5c:	2209      	movs	r2, #9
    4d5e:	6032      	str	r2, [r6, #0]
    4d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4d64:	81a3      	strh	r3, [r4, #12]
    4d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4d6a:	e03e      	b.n	4dea <__swsetup_r+0xba>
    4d6c:	4b25      	ldr	r3, [pc, #148]	; (4e04 <__swsetup_r+0xd4>)
    4d6e:	429c      	cmp	r4, r3
    4d70:	d101      	bne.n	4d76 <__swsetup_r+0x46>
    4d72:	68ac      	ldr	r4, [r5, #8]
    4d74:	e7eb      	b.n	4d4e <__swsetup_r+0x1e>
    4d76:	4b24      	ldr	r3, [pc, #144]	; (4e08 <__swsetup_r+0xd8>)
    4d78:	429c      	cmp	r4, r3
    4d7a:	bf08      	it	eq
    4d7c:	68ec      	ldreq	r4, [r5, #12]
    4d7e:	e7e6      	b.n	4d4e <__swsetup_r+0x1e>
    4d80:	0751      	lsls	r1, r2, #29
    4d82:	d512      	bpl.n	4daa <__swsetup_r+0x7a>
    4d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4d86:	b141      	cbz	r1, 4d9a <__swsetup_r+0x6a>
    4d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
    4d8c:	4299      	cmp	r1, r3
    4d8e:	d002      	beq.n	4d96 <__swsetup_r+0x66>
    4d90:	4630      	mov	r0, r6
    4d92:	f000 fa19 	bl	51c8 <_free_r>
    4d96:	2300      	movs	r3, #0
    4d98:	6363      	str	r3, [r4, #52]	; 0x34
    4d9a:	89a3      	ldrh	r3, [r4, #12]
    4d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    4da0:	81a3      	strh	r3, [r4, #12]
    4da2:	2300      	movs	r3, #0
    4da4:	6063      	str	r3, [r4, #4]
    4da6:	6923      	ldr	r3, [r4, #16]
    4da8:	6023      	str	r3, [r4, #0]
    4daa:	89a3      	ldrh	r3, [r4, #12]
    4dac:	f043 0308 	orr.w	r3, r3, #8
    4db0:	81a3      	strh	r3, [r4, #12]
    4db2:	6923      	ldr	r3, [r4, #16]
    4db4:	b94b      	cbnz	r3, 4dca <__swsetup_r+0x9a>
    4db6:	89a3      	ldrh	r3, [r4, #12]
    4db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
    4dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4dc0:	d003      	beq.n	4dca <__swsetup_r+0x9a>
    4dc2:	4621      	mov	r1, r4
    4dc4:	4630      	mov	r0, r6
    4dc6:	f000 f9bf 	bl	5148 <__smakebuf_r>
    4dca:	89a2      	ldrh	r2, [r4, #12]
    4dcc:	f012 0301 	ands.w	r3, r2, #1
    4dd0:	d00c      	beq.n	4dec <__swsetup_r+0xbc>
    4dd2:	2300      	movs	r3, #0
    4dd4:	60a3      	str	r3, [r4, #8]
    4dd6:	6963      	ldr	r3, [r4, #20]
    4dd8:	425b      	negs	r3, r3
    4dda:	61a3      	str	r3, [r4, #24]
    4ddc:	6923      	ldr	r3, [r4, #16]
    4dde:	b953      	cbnz	r3, 4df6 <__swsetup_r+0xc6>
    4de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4de4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    4de8:	d1ba      	bne.n	4d60 <__swsetup_r+0x30>
    4dea:	bd70      	pop	{r4, r5, r6, pc}
    4dec:	0792      	lsls	r2, r2, #30
    4dee:	bf58      	it	pl
    4df0:	6963      	ldrpl	r3, [r4, #20]
    4df2:	60a3      	str	r3, [r4, #8]
    4df4:	e7f2      	b.n	4ddc <__swsetup_r+0xac>
    4df6:	2000      	movs	r0, #0
    4df8:	e7f7      	b.n	4dea <__swsetup_r+0xba>
    4dfa:	bf00      	nop
    4dfc:	20000004 	.word	0x20000004
    4e00:	00006624 	.word	0x00006624
    4e04:	00006644 	.word	0x00006644
    4e08:	00006604 	.word	0x00006604

00004e0c <__sflush_r>:
    4e0c:	898a      	ldrh	r2, [r1, #12]
    4e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e12:	4605      	mov	r5, r0
    4e14:	0710      	lsls	r0, r2, #28
    4e16:	460c      	mov	r4, r1
    4e18:	d458      	bmi.n	4ecc <__sflush_r+0xc0>
    4e1a:	684b      	ldr	r3, [r1, #4]
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	dc05      	bgt.n	4e2c <__sflush_r+0x20>
    4e20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4e22:	2b00      	cmp	r3, #0
    4e24:	dc02      	bgt.n	4e2c <__sflush_r+0x20>
    4e26:	2000      	movs	r0, #0
    4e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    4e2e:	2e00      	cmp	r6, #0
    4e30:	d0f9      	beq.n	4e26 <__sflush_r+0x1a>
    4e32:	2300      	movs	r3, #0
    4e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    4e38:	682f      	ldr	r7, [r5, #0]
    4e3a:	6a21      	ldr	r1, [r4, #32]
    4e3c:	602b      	str	r3, [r5, #0]
    4e3e:	d032      	beq.n	4ea6 <__sflush_r+0x9a>
    4e40:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4e42:	89a3      	ldrh	r3, [r4, #12]
    4e44:	075a      	lsls	r2, r3, #29
    4e46:	d505      	bpl.n	4e54 <__sflush_r+0x48>
    4e48:	6863      	ldr	r3, [r4, #4]
    4e4a:	1ac0      	subs	r0, r0, r3
    4e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e4e:	b10b      	cbz	r3, 4e54 <__sflush_r+0x48>
    4e50:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4e52:	1ac0      	subs	r0, r0, r3
    4e54:	2300      	movs	r3, #0
    4e56:	4602      	mov	r2, r0
    4e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    4e5a:	6a21      	ldr	r1, [r4, #32]
    4e5c:	4628      	mov	r0, r5
    4e5e:	47b0      	blx	r6
    4e60:	1c43      	adds	r3, r0, #1
    4e62:	89a3      	ldrh	r3, [r4, #12]
    4e64:	d106      	bne.n	4e74 <__sflush_r+0x68>
    4e66:	6829      	ldr	r1, [r5, #0]
    4e68:	291d      	cmp	r1, #29
    4e6a:	d848      	bhi.n	4efe <__sflush_r+0xf2>
    4e6c:	4a29      	ldr	r2, [pc, #164]	; (4f14 <__sflush_r+0x108>)
    4e6e:	40ca      	lsrs	r2, r1
    4e70:	07d6      	lsls	r6, r2, #31
    4e72:	d544      	bpl.n	4efe <__sflush_r+0xf2>
    4e74:	2200      	movs	r2, #0
    4e76:	6062      	str	r2, [r4, #4]
    4e78:	6922      	ldr	r2, [r4, #16]
    4e7a:	04d9      	lsls	r1, r3, #19
    4e7c:	6022      	str	r2, [r4, #0]
    4e7e:	d504      	bpl.n	4e8a <__sflush_r+0x7e>
    4e80:	1c42      	adds	r2, r0, #1
    4e82:	d101      	bne.n	4e88 <__sflush_r+0x7c>
    4e84:	682b      	ldr	r3, [r5, #0]
    4e86:	b903      	cbnz	r3, 4e8a <__sflush_r+0x7e>
    4e88:	6560      	str	r0, [r4, #84]	; 0x54
    4e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e8c:	602f      	str	r7, [r5, #0]
    4e8e:	2900      	cmp	r1, #0
    4e90:	d0c9      	beq.n	4e26 <__sflush_r+0x1a>
    4e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
    4e96:	4299      	cmp	r1, r3
    4e98:	d002      	beq.n	4ea0 <__sflush_r+0x94>
    4e9a:	4628      	mov	r0, r5
    4e9c:	f000 f994 	bl	51c8 <_free_r>
    4ea0:	2000      	movs	r0, #0
    4ea2:	6360      	str	r0, [r4, #52]	; 0x34
    4ea4:	e7c0      	b.n	4e28 <__sflush_r+0x1c>
    4ea6:	2301      	movs	r3, #1
    4ea8:	4628      	mov	r0, r5
    4eaa:	47b0      	blx	r6
    4eac:	1c41      	adds	r1, r0, #1
    4eae:	d1c8      	bne.n	4e42 <__sflush_r+0x36>
    4eb0:	682b      	ldr	r3, [r5, #0]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d0c5      	beq.n	4e42 <__sflush_r+0x36>
    4eb6:	2b1d      	cmp	r3, #29
    4eb8:	d001      	beq.n	4ebe <__sflush_r+0xb2>
    4eba:	2b16      	cmp	r3, #22
    4ebc:	d101      	bne.n	4ec2 <__sflush_r+0xb6>
    4ebe:	602f      	str	r7, [r5, #0]
    4ec0:	e7b1      	b.n	4e26 <__sflush_r+0x1a>
    4ec2:	89a3      	ldrh	r3, [r4, #12]
    4ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4ec8:	81a3      	strh	r3, [r4, #12]
    4eca:	e7ad      	b.n	4e28 <__sflush_r+0x1c>
    4ecc:	690f      	ldr	r7, [r1, #16]
    4ece:	2f00      	cmp	r7, #0
    4ed0:	d0a9      	beq.n	4e26 <__sflush_r+0x1a>
    4ed2:	0793      	lsls	r3, r2, #30
    4ed4:	bf18      	it	ne
    4ed6:	2300      	movne	r3, #0
    4ed8:	680e      	ldr	r6, [r1, #0]
    4eda:	bf08      	it	eq
    4edc:	694b      	ldreq	r3, [r1, #20]
    4ede:	eba6 0807 	sub.w	r8, r6, r7
    4ee2:	600f      	str	r7, [r1, #0]
    4ee4:	608b      	str	r3, [r1, #8]
    4ee6:	f1b8 0f00 	cmp.w	r8, #0
    4eea:	dd9c      	ble.n	4e26 <__sflush_r+0x1a>
    4eec:	4643      	mov	r3, r8
    4eee:	463a      	mov	r2, r7
    4ef0:	6a21      	ldr	r1, [r4, #32]
    4ef2:	4628      	mov	r0, r5
    4ef4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4ef6:	47b0      	blx	r6
    4ef8:	2800      	cmp	r0, #0
    4efa:	dc06      	bgt.n	4f0a <__sflush_r+0xfe>
    4efc:	89a3      	ldrh	r3, [r4, #12]
    4efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4f02:	81a3      	strh	r3, [r4, #12]
    4f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f08:	e78e      	b.n	4e28 <__sflush_r+0x1c>
    4f0a:	4407      	add	r7, r0
    4f0c:	eba8 0800 	sub.w	r8, r8, r0
    4f10:	e7e9      	b.n	4ee6 <__sflush_r+0xda>
    4f12:	bf00      	nop
    4f14:	20400001 	.word	0x20400001

00004f18 <_fflush_r>:
    4f18:	b538      	push	{r3, r4, r5, lr}
    4f1a:	690b      	ldr	r3, [r1, #16]
    4f1c:	4605      	mov	r5, r0
    4f1e:	460c      	mov	r4, r1
    4f20:	b1db      	cbz	r3, 4f5a <_fflush_r+0x42>
    4f22:	b118      	cbz	r0, 4f2c <_fflush_r+0x14>
    4f24:	6983      	ldr	r3, [r0, #24]
    4f26:	b90b      	cbnz	r3, 4f2c <_fflush_r+0x14>
    4f28:	f000 f860 	bl	4fec <__sinit>
    4f2c:	4b0c      	ldr	r3, [pc, #48]	; (4f60 <_fflush_r+0x48>)
    4f2e:	429c      	cmp	r4, r3
    4f30:	d109      	bne.n	4f46 <_fflush_r+0x2e>
    4f32:	686c      	ldr	r4, [r5, #4]
    4f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4f38:	b17b      	cbz	r3, 4f5a <_fflush_r+0x42>
    4f3a:	4621      	mov	r1, r4
    4f3c:	4628      	mov	r0, r5
    4f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4f42:	f7ff bf63 	b.w	4e0c <__sflush_r>
    4f46:	4b07      	ldr	r3, [pc, #28]	; (4f64 <_fflush_r+0x4c>)
    4f48:	429c      	cmp	r4, r3
    4f4a:	d101      	bne.n	4f50 <_fflush_r+0x38>
    4f4c:	68ac      	ldr	r4, [r5, #8]
    4f4e:	e7f1      	b.n	4f34 <_fflush_r+0x1c>
    4f50:	4b05      	ldr	r3, [pc, #20]	; (4f68 <_fflush_r+0x50>)
    4f52:	429c      	cmp	r4, r3
    4f54:	bf08      	it	eq
    4f56:	68ec      	ldreq	r4, [r5, #12]
    4f58:	e7ec      	b.n	4f34 <_fflush_r+0x1c>
    4f5a:	2000      	movs	r0, #0
    4f5c:	bd38      	pop	{r3, r4, r5, pc}
    4f5e:	bf00      	nop
    4f60:	00006624 	.word	0x00006624
    4f64:	00006644 	.word	0x00006644
    4f68:	00006604 	.word	0x00006604

00004f6c <std>:
    4f6c:	2300      	movs	r3, #0
    4f6e:	b510      	push	{r4, lr}
    4f70:	4604      	mov	r4, r0
    4f72:	e9c0 3300 	strd	r3, r3, [r0]
    4f76:	6083      	str	r3, [r0, #8]
    4f78:	8181      	strh	r1, [r0, #12]
    4f7a:	6643      	str	r3, [r0, #100]	; 0x64
    4f7c:	81c2      	strh	r2, [r0, #14]
    4f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    4f82:	6183      	str	r3, [r0, #24]
    4f84:	4619      	mov	r1, r3
    4f86:	2208      	movs	r2, #8
    4f88:	305c      	adds	r0, #92	; 0x5c
    4f8a:	f7ff fdfb 	bl	4b84 <memset>
    4f8e:	4b05      	ldr	r3, [pc, #20]	; (4fa4 <std+0x38>)
    4f90:	6224      	str	r4, [r4, #32]
    4f92:	6263      	str	r3, [r4, #36]	; 0x24
    4f94:	4b04      	ldr	r3, [pc, #16]	; (4fa8 <std+0x3c>)
    4f96:	62a3      	str	r3, [r4, #40]	; 0x28
    4f98:	4b04      	ldr	r3, [pc, #16]	; (4fac <std+0x40>)
    4f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
    4f9c:	4b04      	ldr	r3, [pc, #16]	; (4fb0 <std+0x44>)
    4f9e:	6323      	str	r3, [r4, #48]	; 0x30
    4fa0:	bd10      	pop	{r4, pc}
    4fa2:	bf00      	nop
    4fa4:	000058bd 	.word	0x000058bd
    4fa8:	000058df 	.word	0x000058df
    4fac:	00005917 	.word	0x00005917
    4fb0:	0000593b 	.word	0x0000593b

00004fb4 <_cleanup_r>:
    4fb4:	4901      	ldr	r1, [pc, #4]	; (4fbc <_cleanup_r+0x8>)
    4fb6:	f000 b885 	b.w	50c4 <_fwalk_reent>
    4fba:	bf00      	nop
    4fbc:	00004f19 	.word	0x00004f19

00004fc0 <__sfmoreglue>:
    4fc0:	b570      	push	{r4, r5, r6, lr}
    4fc2:	2568      	movs	r5, #104	; 0x68
    4fc4:	1e4a      	subs	r2, r1, #1
    4fc6:	4355      	muls	r5, r2
    4fc8:	460e      	mov	r6, r1
    4fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
    4fce:	f000 f947 	bl	5260 <_malloc_r>
    4fd2:	4604      	mov	r4, r0
    4fd4:	b140      	cbz	r0, 4fe8 <__sfmoreglue+0x28>
    4fd6:	2100      	movs	r1, #0
    4fd8:	e9c0 1600 	strd	r1, r6, [r0]
    4fdc:	300c      	adds	r0, #12
    4fde:	60a0      	str	r0, [r4, #8]
    4fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    4fe4:	f7ff fdce 	bl	4b84 <memset>
    4fe8:	4620      	mov	r0, r4
    4fea:	bd70      	pop	{r4, r5, r6, pc}

00004fec <__sinit>:
    4fec:	6983      	ldr	r3, [r0, #24]
    4fee:	b510      	push	{r4, lr}
    4ff0:	4604      	mov	r4, r0
    4ff2:	bb33      	cbnz	r3, 5042 <__sinit+0x56>
    4ff4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    4ff8:	6503      	str	r3, [r0, #80]	; 0x50
    4ffa:	4b12      	ldr	r3, [pc, #72]	; (5044 <__sinit+0x58>)
    4ffc:	4a12      	ldr	r2, [pc, #72]	; (5048 <__sinit+0x5c>)
    4ffe:	681b      	ldr	r3, [r3, #0]
    5000:	6282      	str	r2, [r0, #40]	; 0x28
    5002:	4298      	cmp	r0, r3
    5004:	bf04      	itt	eq
    5006:	2301      	moveq	r3, #1
    5008:	6183      	streq	r3, [r0, #24]
    500a:	f000 f81f 	bl	504c <__sfp>
    500e:	6060      	str	r0, [r4, #4]
    5010:	4620      	mov	r0, r4
    5012:	f000 f81b 	bl	504c <__sfp>
    5016:	60a0      	str	r0, [r4, #8]
    5018:	4620      	mov	r0, r4
    501a:	f000 f817 	bl	504c <__sfp>
    501e:	2200      	movs	r2, #0
    5020:	60e0      	str	r0, [r4, #12]
    5022:	2104      	movs	r1, #4
    5024:	6860      	ldr	r0, [r4, #4]
    5026:	f7ff ffa1 	bl	4f6c <std>
    502a:	2201      	movs	r2, #1
    502c:	2109      	movs	r1, #9
    502e:	68a0      	ldr	r0, [r4, #8]
    5030:	f7ff ff9c 	bl	4f6c <std>
    5034:	2202      	movs	r2, #2
    5036:	2112      	movs	r1, #18
    5038:	68e0      	ldr	r0, [r4, #12]
    503a:	f7ff ff97 	bl	4f6c <std>
    503e:	2301      	movs	r3, #1
    5040:	61a3      	str	r3, [r4, #24]
    5042:	bd10      	pop	{r4, pc}
    5044:	00006600 	.word	0x00006600
    5048:	00004fb5 	.word	0x00004fb5

0000504c <__sfp>:
    504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504e:	4b1b      	ldr	r3, [pc, #108]	; (50bc <__sfp+0x70>)
    5050:	4607      	mov	r7, r0
    5052:	681e      	ldr	r6, [r3, #0]
    5054:	69b3      	ldr	r3, [r6, #24]
    5056:	b913      	cbnz	r3, 505e <__sfp+0x12>
    5058:	4630      	mov	r0, r6
    505a:	f7ff ffc7 	bl	4fec <__sinit>
    505e:	3648      	adds	r6, #72	; 0x48
    5060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    5064:	3b01      	subs	r3, #1
    5066:	d503      	bpl.n	5070 <__sfp+0x24>
    5068:	6833      	ldr	r3, [r6, #0]
    506a:	b133      	cbz	r3, 507a <__sfp+0x2e>
    506c:	6836      	ldr	r6, [r6, #0]
    506e:	e7f7      	b.n	5060 <__sfp+0x14>
    5070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    5074:	b16d      	cbz	r5, 5092 <__sfp+0x46>
    5076:	3468      	adds	r4, #104	; 0x68
    5078:	e7f4      	b.n	5064 <__sfp+0x18>
    507a:	2104      	movs	r1, #4
    507c:	4638      	mov	r0, r7
    507e:	f7ff ff9f 	bl	4fc0 <__sfmoreglue>
    5082:	6030      	str	r0, [r6, #0]
    5084:	2800      	cmp	r0, #0
    5086:	d1f1      	bne.n	506c <__sfp+0x20>
    5088:	230c      	movs	r3, #12
    508a:	4604      	mov	r4, r0
    508c:	603b      	str	r3, [r7, #0]
    508e:	4620      	mov	r0, r4
    5090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5092:	4b0b      	ldr	r3, [pc, #44]	; (50c0 <__sfp+0x74>)
    5094:	6665      	str	r5, [r4, #100]	; 0x64
    5096:	e9c4 5500 	strd	r5, r5, [r4]
    509a:	60a5      	str	r5, [r4, #8]
    509c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    50a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
    50a4:	2208      	movs	r2, #8
    50a6:	4629      	mov	r1, r5
    50a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    50ac:	f7ff fd6a 	bl	4b84 <memset>
    50b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    50b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    50b8:	e7e9      	b.n	508e <__sfp+0x42>
    50ba:	bf00      	nop
    50bc:	00006600 	.word	0x00006600
    50c0:	ffff0001 	.word	0xffff0001

000050c4 <_fwalk_reent>:
    50c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50c8:	4680      	mov	r8, r0
    50ca:	4689      	mov	r9, r1
    50cc:	2600      	movs	r6, #0
    50ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
    50d2:	b914      	cbnz	r4, 50da <_fwalk_reent+0x16>
    50d4:	4630      	mov	r0, r6
    50d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    50de:	3f01      	subs	r7, #1
    50e0:	d501      	bpl.n	50e6 <_fwalk_reent+0x22>
    50e2:	6824      	ldr	r4, [r4, #0]
    50e4:	e7f5      	b.n	50d2 <_fwalk_reent+0xe>
    50e6:	89ab      	ldrh	r3, [r5, #12]
    50e8:	2b01      	cmp	r3, #1
    50ea:	d907      	bls.n	50fc <_fwalk_reent+0x38>
    50ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    50f0:	3301      	adds	r3, #1
    50f2:	d003      	beq.n	50fc <_fwalk_reent+0x38>
    50f4:	4629      	mov	r1, r5
    50f6:	4640      	mov	r0, r8
    50f8:	47c8      	blx	r9
    50fa:	4306      	orrs	r6, r0
    50fc:	3568      	adds	r5, #104	; 0x68
    50fe:	e7ee      	b.n	50de <_fwalk_reent+0x1a>

00005100 <__swhatbuf_r>:
    5100:	b570      	push	{r4, r5, r6, lr}
    5102:	460e      	mov	r6, r1
    5104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5108:	b096      	sub	sp, #88	; 0x58
    510a:	2900      	cmp	r1, #0
    510c:	4614      	mov	r4, r2
    510e:	461d      	mov	r5, r3
    5110:	da07      	bge.n	5122 <__swhatbuf_r+0x22>
    5112:	2300      	movs	r3, #0
    5114:	602b      	str	r3, [r5, #0]
    5116:	89b3      	ldrh	r3, [r6, #12]
    5118:	061a      	lsls	r2, r3, #24
    511a:	d410      	bmi.n	513e <__swhatbuf_r+0x3e>
    511c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5120:	e00e      	b.n	5140 <__swhatbuf_r+0x40>
    5122:	466a      	mov	r2, sp
    5124:	f000 fc30 	bl	5988 <_fstat_r>
    5128:	2800      	cmp	r0, #0
    512a:	dbf2      	blt.n	5112 <__swhatbuf_r+0x12>
    512c:	9a01      	ldr	r2, [sp, #4]
    512e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    5132:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    5136:	425a      	negs	r2, r3
    5138:	415a      	adcs	r2, r3
    513a:	602a      	str	r2, [r5, #0]
    513c:	e7ee      	b.n	511c <__swhatbuf_r+0x1c>
    513e:	2340      	movs	r3, #64	; 0x40
    5140:	2000      	movs	r0, #0
    5142:	6023      	str	r3, [r4, #0]
    5144:	b016      	add	sp, #88	; 0x58
    5146:	bd70      	pop	{r4, r5, r6, pc}

00005148 <__smakebuf_r>:
    5148:	898b      	ldrh	r3, [r1, #12]
    514a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    514c:	079d      	lsls	r5, r3, #30
    514e:	4606      	mov	r6, r0
    5150:	460c      	mov	r4, r1
    5152:	d507      	bpl.n	5164 <__smakebuf_r+0x1c>
    5154:	f104 0347 	add.w	r3, r4, #71	; 0x47
    5158:	6023      	str	r3, [r4, #0]
    515a:	6123      	str	r3, [r4, #16]
    515c:	2301      	movs	r3, #1
    515e:	6163      	str	r3, [r4, #20]
    5160:	b002      	add	sp, #8
    5162:	bd70      	pop	{r4, r5, r6, pc}
    5164:	ab01      	add	r3, sp, #4
    5166:	466a      	mov	r2, sp
    5168:	f7ff ffca 	bl	5100 <__swhatbuf_r>
    516c:	9900      	ldr	r1, [sp, #0]
    516e:	4605      	mov	r5, r0
    5170:	4630      	mov	r0, r6
    5172:	f000 f875 	bl	5260 <_malloc_r>
    5176:	b948      	cbnz	r0, 518c <__smakebuf_r+0x44>
    5178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    517c:	059a      	lsls	r2, r3, #22
    517e:	d4ef      	bmi.n	5160 <__smakebuf_r+0x18>
    5180:	f023 0303 	bic.w	r3, r3, #3
    5184:	f043 0302 	orr.w	r3, r3, #2
    5188:	81a3      	strh	r3, [r4, #12]
    518a:	e7e3      	b.n	5154 <__smakebuf_r+0xc>
    518c:	4b0d      	ldr	r3, [pc, #52]	; (51c4 <__smakebuf_r+0x7c>)
    518e:	62b3      	str	r3, [r6, #40]	; 0x28
    5190:	89a3      	ldrh	r3, [r4, #12]
    5192:	6020      	str	r0, [r4, #0]
    5194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5198:	81a3      	strh	r3, [r4, #12]
    519a:	9b00      	ldr	r3, [sp, #0]
    519c:	6120      	str	r0, [r4, #16]
    519e:	6163      	str	r3, [r4, #20]
    51a0:	9b01      	ldr	r3, [sp, #4]
    51a2:	b15b      	cbz	r3, 51bc <__smakebuf_r+0x74>
    51a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    51a8:	4630      	mov	r0, r6
    51aa:	f000 fbff 	bl	59ac <_isatty_r>
    51ae:	b128      	cbz	r0, 51bc <__smakebuf_r+0x74>
    51b0:	89a3      	ldrh	r3, [r4, #12]
    51b2:	f023 0303 	bic.w	r3, r3, #3
    51b6:	f043 0301 	orr.w	r3, r3, #1
    51ba:	81a3      	strh	r3, [r4, #12]
    51bc:	89a3      	ldrh	r3, [r4, #12]
    51be:	431d      	orrs	r5, r3
    51c0:	81a5      	strh	r5, [r4, #12]
    51c2:	e7cd      	b.n	5160 <__smakebuf_r+0x18>
    51c4:	00004fb5 	.word	0x00004fb5

000051c8 <_free_r>:
    51c8:	b538      	push	{r3, r4, r5, lr}
    51ca:	4605      	mov	r5, r0
    51cc:	2900      	cmp	r1, #0
    51ce:	d043      	beq.n	5258 <_free_r+0x90>
    51d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    51d4:	1f0c      	subs	r4, r1, #4
    51d6:	2b00      	cmp	r3, #0
    51d8:	bfb8      	it	lt
    51da:	18e4      	addlt	r4, r4, r3
    51dc:	f000 fc16 	bl	5a0c <__malloc_lock>
    51e0:	4a1e      	ldr	r2, [pc, #120]	; (525c <_free_r+0x94>)
    51e2:	6813      	ldr	r3, [r2, #0]
    51e4:	4610      	mov	r0, r2
    51e6:	b933      	cbnz	r3, 51f6 <_free_r+0x2e>
    51e8:	6063      	str	r3, [r4, #4]
    51ea:	6014      	str	r4, [r2, #0]
    51ec:	4628      	mov	r0, r5
    51ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    51f2:	f000 bc0c 	b.w	5a0e <__malloc_unlock>
    51f6:	42a3      	cmp	r3, r4
    51f8:	d90b      	bls.n	5212 <_free_r+0x4a>
    51fa:	6821      	ldr	r1, [r4, #0]
    51fc:	1862      	adds	r2, r4, r1
    51fe:	4293      	cmp	r3, r2
    5200:	bf01      	itttt	eq
    5202:	681a      	ldreq	r2, [r3, #0]
    5204:	685b      	ldreq	r3, [r3, #4]
    5206:	1852      	addeq	r2, r2, r1
    5208:	6022      	streq	r2, [r4, #0]
    520a:	6063      	str	r3, [r4, #4]
    520c:	6004      	str	r4, [r0, #0]
    520e:	e7ed      	b.n	51ec <_free_r+0x24>
    5210:	4613      	mov	r3, r2
    5212:	685a      	ldr	r2, [r3, #4]
    5214:	b10a      	cbz	r2, 521a <_free_r+0x52>
    5216:	42a2      	cmp	r2, r4
    5218:	d9fa      	bls.n	5210 <_free_r+0x48>
    521a:	6819      	ldr	r1, [r3, #0]
    521c:	1858      	adds	r0, r3, r1
    521e:	42a0      	cmp	r0, r4
    5220:	d10b      	bne.n	523a <_free_r+0x72>
    5222:	6820      	ldr	r0, [r4, #0]
    5224:	4401      	add	r1, r0
    5226:	1858      	adds	r0, r3, r1
    5228:	4282      	cmp	r2, r0
    522a:	6019      	str	r1, [r3, #0]
    522c:	d1de      	bne.n	51ec <_free_r+0x24>
    522e:	6810      	ldr	r0, [r2, #0]
    5230:	6852      	ldr	r2, [r2, #4]
    5232:	4401      	add	r1, r0
    5234:	6019      	str	r1, [r3, #0]
    5236:	605a      	str	r2, [r3, #4]
    5238:	e7d8      	b.n	51ec <_free_r+0x24>
    523a:	d902      	bls.n	5242 <_free_r+0x7a>
    523c:	230c      	movs	r3, #12
    523e:	602b      	str	r3, [r5, #0]
    5240:	e7d4      	b.n	51ec <_free_r+0x24>
    5242:	6820      	ldr	r0, [r4, #0]
    5244:	1821      	adds	r1, r4, r0
    5246:	428a      	cmp	r2, r1
    5248:	bf01      	itttt	eq
    524a:	6811      	ldreq	r1, [r2, #0]
    524c:	6852      	ldreq	r2, [r2, #4]
    524e:	1809      	addeq	r1, r1, r0
    5250:	6021      	streq	r1, [r4, #0]
    5252:	6062      	str	r2, [r4, #4]
    5254:	605c      	str	r4, [r3, #4]
    5256:	e7c9      	b.n	51ec <_free_r+0x24>
    5258:	bd38      	pop	{r3, r4, r5, pc}
    525a:	bf00      	nop
    525c:	20000068 	.word	0x20000068

00005260 <_malloc_r>:
    5260:	b570      	push	{r4, r5, r6, lr}
    5262:	1ccd      	adds	r5, r1, #3
    5264:	f025 0503 	bic.w	r5, r5, #3
    5268:	3508      	adds	r5, #8
    526a:	2d0c      	cmp	r5, #12
    526c:	bf38      	it	cc
    526e:	250c      	movcc	r5, #12
    5270:	2d00      	cmp	r5, #0
    5272:	4606      	mov	r6, r0
    5274:	db01      	blt.n	527a <_malloc_r+0x1a>
    5276:	42a9      	cmp	r1, r5
    5278:	d903      	bls.n	5282 <_malloc_r+0x22>
    527a:	230c      	movs	r3, #12
    527c:	6033      	str	r3, [r6, #0]
    527e:	2000      	movs	r0, #0
    5280:	bd70      	pop	{r4, r5, r6, pc}
    5282:	f000 fbc3 	bl	5a0c <__malloc_lock>
    5286:	4a21      	ldr	r2, [pc, #132]	; (530c <_malloc_r+0xac>)
    5288:	6814      	ldr	r4, [r2, #0]
    528a:	4621      	mov	r1, r4
    528c:	b991      	cbnz	r1, 52b4 <_malloc_r+0x54>
    528e:	4c20      	ldr	r4, [pc, #128]	; (5310 <_malloc_r+0xb0>)
    5290:	6823      	ldr	r3, [r4, #0]
    5292:	b91b      	cbnz	r3, 529c <_malloc_r+0x3c>
    5294:	4630      	mov	r0, r6
    5296:	f000 fb01 	bl	589c <_sbrk_r>
    529a:	6020      	str	r0, [r4, #0]
    529c:	4629      	mov	r1, r5
    529e:	4630      	mov	r0, r6
    52a0:	f000 fafc 	bl	589c <_sbrk_r>
    52a4:	1c43      	adds	r3, r0, #1
    52a6:	d124      	bne.n	52f2 <_malloc_r+0x92>
    52a8:	230c      	movs	r3, #12
    52aa:	4630      	mov	r0, r6
    52ac:	6033      	str	r3, [r6, #0]
    52ae:	f000 fbae 	bl	5a0e <__malloc_unlock>
    52b2:	e7e4      	b.n	527e <_malloc_r+0x1e>
    52b4:	680b      	ldr	r3, [r1, #0]
    52b6:	1b5b      	subs	r3, r3, r5
    52b8:	d418      	bmi.n	52ec <_malloc_r+0x8c>
    52ba:	2b0b      	cmp	r3, #11
    52bc:	d90f      	bls.n	52de <_malloc_r+0x7e>
    52be:	600b      	str	r3, [r1, #0]
    52c0:	18cc      	adds	r4, r1, r3
    52c2:	50cd      	str	r5, [r1, r3]
    52c4:	4630      	mov	r0, r6
    52c6:	f000 fba2 	bl	5a0e <__malloc_unlock>
    52ca:	f104 000b 	add.w	r0, r4, #11
    52ce:	1d23      	adds	r3, r4, #4
    52d0:	f020 0007 	bic.w	r0, r0, #7
    52d4:	1ac3      	subs	r3, r0, r3
    52d6:	d0d3      	beq.n	5280 <_malloc_r+0x20>
    52d8:	425a      	negs	r2, r3
    52da:	50e2      	str	r2, [r4, r3]
    52dc:	e7d0      	b.n	5280 <_malloc_r+0x20>
    52de:	684b      	ldr	r3, [r1, #4]
    52e0:	428c      	cmp	r4, r1
    52e2:	bf16      	itet	ne
    52e4:	6063      	strne	r3, [r4, #4]
    52e6:	6013      	streq	r3, [r2, #0]
    52e8:	460c      	movne	r4, r1
    52ea:	e7eb      	b.n	52c4 <_malloc_r+0x64>
    52ec:	460c      	mov	r4, r1
    52ee:	6849      	ldr	r1, [r1, #4]
    52f0:	e7cc      	b.n	528c <_malloc_r+0x2c>
    52f2:	1cc4      	adds	r4, r0, #3
    52f4:	f024 0403 	bic.w	r4, r4, #3
    52f8:	42a0      	cmp	r0, r4
    52fa:	d005      	beq.n	5308 <_malloc_r+0xa8>
    52fc:	1a21      	subs	r1, r4, r0
    52fe:	4630      	mov	r0, r6
    5300:	f000 facc 	bl	589c <_sbrk_r>
    5304:	3001      	adds	r0, #1
    5306:	d0cf      	beq.n	52a8 <_malloc_r+0x48>
    5308:	6025      	str	r5, [r4, #0]
    530a:	e7db      	b.n	52c4 <_malloc_r+0x64>
    530c:	20000068 	.word	0x20000068
    5310:	2000006c 	.word	0x2000006c

00005314 <__sfputc_r>:
    5314:	6893      	ldr	r3, [r2, #8]
    5316:	b410      	push	{r4}
    5318:	3b01      	subs	r3, #1
    531a:	2b00      	cmp	r3, #0
    531c:	6093      	str	r3, [r2, #8]
    531e:	da07      	bge.n	5330 <__sfputc_r+0x1c>
    5320:	6994      	ldr	r4, [r2, #24]
    5322:	42a3      	cmp	r3, r4
    5324:	db01      	blt.n	532a <__sfputc_r+0x16>
    5326:	290a      	cmp	r1, #10
    5328:	d102      	bne.n	5330 <__sfputc_r+0x1c>
    532a:	bc10      	pop	{r4}
    532c:	f7ff bcae 	b.w	4c8c <__swbuf_r>
    5330:	6813      	ldr	r3, [r2, #0]
    5332:	1c58      	adds	r0, r3, #1
    5334:	6010      	str	r0, [r2, #0]
    5336:	7019      	strb	r1, [r3, #0]
    5338:	4608      	mov	r0, r1
    533a:	bc10      	pop	{r4}
    533c:	4770      	bx	lr

0000533e <__sfputs_r>:
    533e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5340:	4606      	mov	r6, r0
    5342:	460f      	mov	r7, r1
    5344:	4614      	mov	r4, r2
    5346:	18d5      	adds	r5, r2, r3
    5348:	42ac      	cmp	r4, r5
    534a:	d101      	bne.n	5350 <__sfputs_r+0x12>
    534c:	2000      	movs	r0, #0
    534e:	e007      	b.n	5360 <__sfputs_r+0x22>
    5350:	463a      	mov	r2, r7
    5352:	f814 1b01 	ldrb.w	r1, [r4], #1
    5356:	4630      	mov	r0, r6
    5358:	f7ff ffdc 	bl	5314 <__sfputc_r>
    535c:	1c43      	adds	r3, r0, #1
    535e:	d1f3      	bne.n	5348 <__sfputs_r+0xa>
    5360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005364 <_vfiprintf_r>:
    5364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5368:	b09d      	sub	sp, #116	; 0x74
    536a:	460c      	mov	r4, r1
    536c:	4617      	mov	r7, r2
    536e:	9303      	str	r3, [sp, #12]
    5370:	4606      	mov	r6, r0
    5372:	b118      	cbz	r0, 537c <_vfiprintf_r+0x18>
    5374:	6983      	ldr	r3, [r0, #24]
    5376:	b90b      	cbnz	r3, 537c <_vfiprintf_r+0x18>
    5378:	f7ff fe38 	bl	4fec <__sinit>
    537c:	4b7b      	ldr	r3, [pc, #492]	; (556c <_vfiprintf_r+0x208>)
    537e:	429c      	cmp	r4, r3
    5380:	d157      	bne.n	5432 <_vfiprintf_r+0xce>
    5382:	6874      	ldr	r4, [r6, #4]
    5384:	89a3      	ldrh	r3, [r4, #12]
    5386:	0718      	lsls	r0, r3, #28
    5388:	d55d      	bpl.n	5446 <_vfiprintf_r+0xe2>
    538a:	6923      	ldr	r3, [r4, #16]
    538c:	2b00      	cmp	r3, #0
    538e:	d05a      	beq.n	5446 <_vfiprintf_r+0xe2>
    5390:	2300      	movs	r3, #0
    5392:	9309      	str	r3, [sp, #36]	; 0x24
    5394:	2320      	movs	r3, #32
    5396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    539a:	2330      	movs	r3, #48	; 0x30
    539c:	f04f 0b01 	mov.w	fp, #1
    53a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    53a4:	46b8      	mov	r8, r7
    53a6:	4645      	mov	r5, r8
    53a8:	f815 3b01 	ldrb.w	r3, [r5], #1
    53ac:	b10b      	cbz	r3, 53b2 <_vfiprintf_r+0x4e>
    53ae:	2b25      	cmp	r3, #37	; 0x25
    53b0:	d154      	bne.n	545c <_vfiprintf_r+0xf8>
    53b2:	ebb8 0a07 	subs.w	sl, r8, r7
    53b6:	d00b      	beq.n	53d0 <_vfiprintf_r+0x6c>
    53b8:	4653      	mov	r3, sl
    53ba:	463a      	mov	r2, r7
    53bc:	4621      	mov	r1, r4
    53be:	4630      	mov	r0, r6
    53c0:	f7ff ffbd 	bl	533e <__sfputs_r>
    53c4:	3001      	adds	r0, #1
    53c6:	f000 80c2 	beq.w	554e <_vfiprintf_r+0x1ea>
    53ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    53cc:	4453      	add	r3, sl
    53ce:	9309      	str	r3, [sp, #36]	; 0x24
    53d0:	f898 3000 	ldrb.w	r3, [r8]
    53d4:	2b00      	cmp	r3, #0
    53d6:	f000 80ba 	beq.w	554e <_vfiprintf_r+0x1ea>
    53da:	2300      	movs	r3, #0
    53dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    53e4:	9304      	str	r3, [sp, #16]
    53e6:	9307      	str	r3, [sp, #28]
    53e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    53ec:	931a      	str	r3, [sp, #104]	; 0x68
    53ee:	46a8      	mov	r8, r5
    53f0:	2205      	movs	r2, #5
    53f2:	f818 1b01 	ldrb.w	r1, [r8], #1
    53f6:	485e      	ldr	r0, [pc, #376]	; (5570 <_vfiprintf_r+0x20c>)
    53f8:	f000 fafa 	bl	59f0 <memchr>
    53fc:	9b04      	ldr	r3, [sp, #16]
    53fe:	bb78      	cbnz	r0, 5460 <_vfiprintf_r+0xfc>
    5400:	06d9      	lsls	r1, r3, #27
    5402:	bf44      	itt	mi
    5404:	2220      	movmi	r2, #32
    5406:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    540a:	071a      	lsls	r2, r3, #28
    540c:	bf44      	itt	mi
    540e:	222b      	movmi	r2, #43	; 0x2b
    5410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5414:	782a      	ldrb	r2, [r5, #0]
    5416:	2a2a      	cmp	r2, #42	; 0x2a
    5418:	d02a      	beq.n	5470 <_vfiprintf_r+0x10c>
    541a:	46a8      	mov	r8, r5
    541c:	2000      	movs	r0, #0
    541e:	250a      	movs	r5, #10
    5420:	9a07      	ldr	r2, [sp, #28]
    5422:	4641      	mov	r1, r8
    5424:	f811 3b01 	ldrb.w	r3, [r1], #1
    5428:	3b30      	subs	r3, #48	; 0x30
    542a:	2b09      	cmp	r3, #9
    542c:	d969      	bls.n	5502 <_vfiprintf_r+0x19e>
    542e:	b360      	cbz	r0, 548a <_vfiprintf_r+0x126>
    5430:	e024      	b.n	547c <_vfiprintf_r+0x118>
    5432:	4b50      	ldr	r3, [pc, #320]	; (5574 <_vfiprintf_r+0x210>)
    5434:	429c      	cmp	r4, r3
    5436:	d101      	bne.n	543c <_vfiprintf_r+0xd8>
    5438:	68b4      	ldr	r4, [r6, #8]
    543a:	e7a3      	b.n	5384 <_vfiprintf_r+0x20>
    543c:	4b4e      	ldr	r3, [pc, #312]	; (5578 <_vfiprintf_r+0x214>)
    543e:	429c      	cmp	r4, r3
    5440:	bf08      	it	eq
    5442:	68f4      	ldreq	r4, [r6, #12]
    5444:	e79e      	b.n	5384 <_vfiprintf_r+0x20>
    5446:	4621      	mov	r1, r4
    5448:	4630      	mov	r0, r6
    544a:	f7ff fc71 	bl	4d30 <__swsetup_r>
    544e:	2800      	cmp	r0, #0
    5450:	d09e      	beq.n	5390 <_vfiprintf_r+0x2c>
    5452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5456:	b01d      	add	sp, #116	; 0x74
    5458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    545c:	46a8      	mov	r8, r5
    545e:	e7a2      	b.n	53a6 <_vfiprintf_r+0x42>
    5460:	4a43      	ldr	r2, [pc, #268]	; (5570 <_vfiprintf_r+0x20c>)
    5462:	4645      	mov	r5, r8
    5464:	1a80      	subs	r0, r0, r2
    5466:	fa0b f000 	lsl.w	r0, fp, r0
    546a:	4318      	orrs	r0, r3
    546c:	9004      	str	r0, [sp, #16]
    546e:	e7be      	b.n	53ee <_vfiprintf_r+0x8a>
    5470:	9a03      	ldr	r2, [sp, #12]
    5472:	1d11      	adds	r1, r2, #4
    5474:	6812      	ldr	r2, [r2, #0]
    5476:	9103      	str	r1, [sp, #12]
    5478:	2a00      	cmp	r2, #0
    547a:	db01      	blt.n	5480 <_vfiprintf_r+0x11c>
    547c:	9207      	str	r2, [sp, #28]
    547e:	e004      	b.n	548a <_vfiprintf_r+0x126>
    5480:	4252      	negs	r2, r2
    5482:	f043 0302 	orr.w	r3, r3, #2
    5486:	9207      	str	r2, [sp, #28]
    5488:	9304      	str	r3, [sp, #16]
    548a:	f898 3000 	ldrb.w	r3, [r8]
    548e:	2b2e      	cmp	r3, #46	; 0x2e
    5490:	d10e      	bne.n	54b0 <_vfiprintf_r+0x14c>
    5492:	f898 3001 	ldrb.w	r3, [r8, #1]
    5496:	2b2a      	cmp	r3, #42	; 0x2a
    5498:	d138      	bne.n	550c <_vfiprintf_r+0x1a8>
    549a:	9b03      	ldr	r3, [sp, #12]
    549c:	f108 0802 	add.w	r8, r8, #2
    54a0:	1d1a      	adds	r2, r3, #4
    54a2:	681b      	ldr	r3, [r3, #0]
    54a4:	9203      	str	r2, [sp, #12]
    54a6:	2b00      	cmp	r3, #0
    54a8:	bfb8      	it	lt
    54aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    54ae:	9305      	str	r3, [sp, #20]
    54b0:	4d32      	ldr	r5, [pc, #200]	; (557c <_vfiprintf_r+0x218>)
    54b2:	2203      	movs	r2, #3
    54b4:	f898 1000 	ldrb.w	r1, [r8]
    54b8:	4628      	mov	r0, r5
    54ba:	f000 fa99 	bl	59f0 <memchr>
    54be:	b140      	cbz	r0, 54d2 <_vfiprintf_r+0x16e>
    54c0:	2340      	movs	r3, #64	; 0x40
    54c2:	1b40      	subs	r0, r0, r5
    54c4:	fa03 f000 	lsl.w	r0, r3, r0
    54c8:	9b04      	ldr	r3, [sp, #16]
    54ca:	f108 0801 	add.w	r8, r8, #1
    54ce:	4303      	orrs	r3, r0
    54d0:	9304      	str	r3, [sp, #16]
    54d2:	f898 1000 	ldrb.w	r1, [r8]
    54d6:	2206      	movs	r2, #6
    54d8:	4829      	ldr	r0, [pc, #164]	; (5580 <_vfiprintf_r+0x21c>)
    54da:	f108 0701 	add.w	r7, r8, #1
    54de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    54e2:	f000 fa85 	bl	59f0 <memchr>
    54e6:	2800      	cmp	r0, #0
    54e8:	d037      	beq.n	555a <_vfiprintf_r+0x1f6>
    54ea:	4b26      	ldr	r3, [pc, #152]	; (5584 <_vfiprintf_r+0x220>)
    54ec:	bb1b      	cbnz	r3, 5536 <_vfiprintf_r+0x1d2>
    54ee:	9b03      	ldr	r3, [sp, #12]
    54f0:	3307      	adds	r3, #7
    54f2:	f023 0307 	bic.w	r3, r3, #7
    54f6:	3308      	adds	r3, #8
    54f8:	9303      	str	r3, [sp, #12]
    54fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    54fc:	444b      	add	r3, r9
    54fe:	9309      	str	r3, [sp, #36]	; 0x24
    5500:	e750      	b.n	53a4 <_vfiprintf_r+0x40>
    5502:	fb05 3202 	mla	r2, r5, r2, r3
    5506:	2001      	movs	r0, #1
    5508:	4688      	mov	r8, r1
    550a:	e78a      	b.n	5422 <_vfiprintf_r+0xbe>
    550c:	2300      	movs	r3, #0
    550e:	250a      	movs	r5, #10
    5510:	4619      	mov	r1, r3
    5512:	f108 0801 	add.w	r8, r8, #1
    5516:	9305      	str	r3, [sp, #20]
    5518:	4640      	mov	r0, r8
    551a:	f810 2b01 	ldrb.w	r2, [r0], #1
    551e:	3a30      	subs	r2, #48	; 0x30
    5520:	2a09      	cmp	r2, #9
    5522:	d903      	bls.n	552c <_vfiprintf_r+0x1c8>
    5524:	2b00      	cmp	r3, #0
    5526:	d0c3      	beq.n	54b0 <_vfiprintf_r+0x14c>
    5528:	9105      	str	r1, [sp, #20]
    552a:	e7c1      	b.n	54b0 <_vfiprintf_r+0x14c>
    552c:	fb05 2101 	mla	r1, r5, r1, r2
    5530:	2301      	movs	r3, #1
    5532:	4680      	mov	r8, r0
    5534:	e7f0      	b.n	5518 <_vfiprintf_r+0x1b4>
    5536:	ab03      	add	r3, sp, #12
    5538:	9300      	str	r3, [sp, #0]
    553a:	4622      	mov	r2, r4
    553c:	4b12      	ldr	r3, [pc, #72]	; (5588 <_vfiprintf_r+0x224>)
    553e:	a904      	add	r1, sp, #16
    5540:	4630      	mov	r0, r6
    5542:	f3af 8000 	nop.w
    5546:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    554a:	4681      	mov	r9, r0
    554c:	d1d5      	bne.n	54fa <_vfiprintf_r+0x196>
    554e:	89a3      	ldrh	r3, [r4, #12]
    5550:	065b      	lsls	r3, r3, #25
    5552:	f53f af7e 	bmi.w	5452 <_vfiprintf_r+0xee>
    5556:	9809      	ldr	r0, [sp, #36]	; 0x24
    5558:	e77d      	b.n	5456 <_vfiprintf_r+0xf2>
    555a:	ab03      	add	r3, sp, #12
    555c:	9300      	str	r3, [sp, #0]
    555e:	4622      	mov	r2, r4
    5560:	4b09      	ldr	r3, [pc, #36]	; (5588 <_vfiprintf_r+0x224>)
    5562:	a904      	add	r1, sp, #16
    5564:	4630      	mov	r0, r6
    5566:	f000 f887 	bl	5678 <_printf_i>
    556a:	e7ec      	b.n	5546 <_vfiprintf_r+0x1e2>
    556c:	00006624 	.word	0x00006624
    5570:	00006664 	.word	0x00006664
    5574:	00006644 	.word	0x00006644
    5578:	00006604 	.word	0x00006604
    557c:	0000666a 	.word	0x0000666a
    5580:	0000666e 	.word	0x0000666e
    5584:	00000000 	.word	0x00000000
    5588:	0000533f 	.word	0x0000533f

0000558c <_printf_common>:
    558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5590:	4691      	mov	r9, r2
    5592:	461f      	mov	r7, r3
    5594:	688a      	ldr	r2, [r1, #8]
    5596:	690b      	ldr	r3, [r1, #16]
    5598:	4606      	mov	r6, r0
    559a:	4293      	cmp	r3, r2
    559c:	bfb8      	it	lt
    559e:	4613      	movlt	r3, r2
    55a0:	f8c9 3000 	str.w	r3, [r9]
    55a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    55a8:	460c      	mov	r4, r1
    55aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
    55ae:	b112      	cbz	r2, 55b6 <_printf_common+0x2a>
    55b0:	3301      	adds	r3, #1
    55b2:	f8c9 3000 	str.w	r3, [r9]
    55b6:	6823      	ldr	r3, [r4, #0]
    55b8:	0699      	lsls	r1, r3, #26
    55ba:	bf42      	ittt	mi
    55bc:	f8d9 3000 	ldrmi.w	r3, [r9]
    55c0:	3302      	addmi	r3, #2
    55c2:	f8c9 3000 	strmi.w	r3, [r9]
    55c6:	6825      	ldr	r5, [r4, #0]
    55c8:	f015 0506 	ands.w	r5, r5, #6
    55cc:	d107      	bne.n	55de <_printf_common+0x52>
    55ce:	f104 0a19 	add.w	sl, r4, #25
    55d2:	68e3      	ldr	r3, [r4, #12]
    55d4:	f8d9 2000 	ldr.w	r2, [r9]
    55d8:	1a9b      	subs	r3, r3, r2
    55da:	42ab      	cmp	r3, r5
    55dc:	dc29      	bgt.n	5632 <_printf_common+0xa6>
    55de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    55e2:	6822      	ldr	r2, [r4, #0]
    55e4:	3300      	adds	r3, #0
    55e6:	bf18      	it	ne
    55e8:	2301      	movne	r3, #1
    55ea:	0692      	lsls	r2, r2, #26
    55ec:	d42e      	bmi.n	564c <_printf_common+0xc0>
    55ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
    55f2:	4639      	mov	r1, r7
    55f4:	4630      	mov	r0, r6
    55f6:	47c0      	blx	r8
    55f8:	3001      	adds	r0, #1
    55fa:	d021      	beq.n	5640 <_printf_common+0xb4>
    55fc:	6823      	ldr	r3, [r4, #0]
    55fe:	68e5      	ldr	r5, [r4, #12]
    5600:	f003 0306 	and.w	r3, r3, #6
    5604:	2b04      	cmp	r3, #4
    5606:	bf18      	it	ne
    5608:	2500      	movne	r5, #0
    560a:	f8d9 2000 	ldr.w	r2, [r9]
    560e:	f04f 0900 	mov.w	r9, #0
    5612:	bf08      	it	eq
    5614:	1aad      	subeq	r5, r5, r2
    5616:	68a3      	ldr	r3, [r4, #8]
    5618:	6922      	ldr	r2, [r4, #16]
    561a:	bf08      	it	eq
    561c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5620:	4293      	cmp	r3, r2
    5622:	bfc4      	itt	gt
    5624:	1a9b      	subgt	r3, r3, r2
    5626:	18ed      	addgt	r5, r5, r3
    5628:	341a      	adds	r4, #26
    562a:	454d      	cmp	r5, r9
    562c:	d11a      	bne.n	5664 <_printf_common+0xd8>
    562e:	2000      	movs	r0, #0
    5630:	e008      	b.n	5644 <_printf_common+0xb8>
    5632:	2301      	movs	r3, #1
    5634:	4652      	mov	r2, sl
    5636:	4639      	mov	r1, r7
    5638:	4630      	mov	r0, r6
    563a:	47c0      	blx	r8
    563c:	3001      	adds	r0, #1
    563e:	d103      	bne.n	5648 <_printf_common+0xbc>
    5640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5648:	3501      	adds	r5, #1
    564a:	e7c2      	b.n	55d2 <_printf_common+0x46>
    564c:	2030      	movs	r0, #48	; 0x30
    564e:	18e1      	adds	r1, r4, r3
    5650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5654:	1c5a      	adds	r2, r3, #1
    5656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    565a:	4422      	add	r2, r4
    565c:	3302      	adds	r3, #2
    565e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5662:	e7c4      	b.n	55ee <_printf_common+0x62>
    5664:	2301      	movs	r3, #1
    5666:	4622      	mov	r2, r4
    5668:	4639      	mov	r1, r7
    566a:	4630      	mov	r0, r6
    566c:	47c0      	blx	r8
    566e:	3001      	adds	r0, #1
    5670:	d0e6      	beq.n	5640 <_printf_common+0xb4>
    5672:	f109 0901 	add.w	r9, r9, #1
    5676:	e7d8      	b.n	562a <_printf_common+0x9e>

00005678 <_printf_i>:
    5678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    567c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    5680:	460c      	mov	r4, r1
    5682:	7e09      	ldrb	r1, [r1, #24]
    5684:	b085      	sub	sp, #20
    5686:	296e      	cmp	r1, #110	; 0x6e
    5688:	4617      	mov	r7, r2
    568a:	4606      	mov	r6, r0
    568c:	4698      	mov	r8, r3
    568e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5690:	f000 80b3 	beq.w	57fa <_printf_i+0x182>
    5694:	d822      	bhi.n	56dc <_printf_i+0x64>
    5696:	2963      	cmp	r1, #99	; 0x63
    5698:	d036      	beq.n	5708 <_printf_i+0x90>
    569a:	d80a      	bhi.n	56b2 <_printf_i+0x3a>
    569c:	2900      	cmp	r1, #0
    569e:	f000 80b9 	beq.w	5814 <_printf_i+0x19c>
    56a2:	2958      	cmp	r1, #88	; 0x58
    56a4:	f000 8083 	beq.w	57ae <_printf_i+0x136>
    56a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    56ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    56b0:	e032      	b.n	5718 <_printf_i+0xa0>
    56b2:	2964      	cmp	r1, #100	; 0x64
    56b4:	d001      	beq.n	56ba <_printf_i+0x42>
    56b6:	2969      	cmp	r1, #105	; 0x69
    56b8:	d1f6      	bne.n	56a8 <_printf_i+0x30>
    56ba:	6820      	ldr	r0, [r4, #0]
    56bc:	6813      	ldr	r3, [r2, #0]
    56be:	0605      	lsls	r5, r0, #24
    56c0:	f103 0104 	add.w	r1, r3, #4
    56c4:	d52a      	bpl.n	571c <_printf_i+0xa4>
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	6011      	str	r1, [r2, #0]
    56ca:	2b00      	cmp	r3, #0
    56cc:	da03      	bge.n	56d6 <_printf_i+0x5e>
    56ce:	222d      	movs	r2, #45	; 0x2d
    56d0:	425b      	negs	r3, r3
    56d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    56d6:	486f      	ldr	r0, [pc, #444]	; (5894 <_printf_i+0x21c>)
    56d8:	220a      	movs	r2, #10
    56da:	e039      	b.n	5750 <_printf_i+0xd8>
    56dc:	2973      	cmp	r1, #115	; 0x73
    56de:	f000 809d 	beq.w	581c <_printf_i+0x1a4>
    56e2:	d808      	bhi.n	56f6 <_printf_i+0x7e>
    56e4:	296f      	cmp	r1, #111	; 0x6f
    56e6:	d020      	beq.n	572a <_printf_i+0xb2>
    56e8:	2970      	cmp	r1, #112	; 0x70
    56ea:	d1dd      	bne.n	56a8 <_printf_i+0x30>
    56ec:	6823      	ldr	r3, [r4, #0]
    56ee:	f043 0320 	orr.w	r3, r3, #32
    56f2:	6023      	str	r3, [r4, #0]
    56f4:	e003      	b.n	56fe <_printf_i+0x86>
    56f6:	2975      	cmp	r1, #117	; 0x75
    56f8:	d017      	beq.n	572a <_printf_i+0xb2>
    56fa:	2978      	cmp	r1, #120	; 0x78
    56fc:	d1d4      	bne.n	56a8 <_printf_i+0x30>
    56fe:	2378      	movs	r3, #120	; 0x78
    5700:	4865      	ldr	r0, [pc, #404]	; (5898 <_printf_i+0x220>)
    5702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    5706:	e055      	b.n	57b4 <_printf_i+0x13c>
    5708:	6813      	ldr	r3, [r2, #0]
    570a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    570e:	1d19      	adds	r1, r3, #4
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	6011      	str	r1, [r2, #0]
    5714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5718:	2301      	movs	r3, #1
    571a:	e08c      	b.n	5836 <_printf_i+0x1be>
    571c:	681b      	ldr	r3, [r3, #0]
    571e:	f010 0f40 	tst.w	r0, #64	; 0x40
    5722:	6011      	str	r1, [r2, #0]
    5724:	bf18      	it	ne
    5726:	b21b      	sxthne	r3, r3
    5728:	e7cf      	b.n	56ca <_printf_i+0x52>
    572a:	6813      	ldr	r3, [r2, #0]
    572c:	6825      	ldr	r5, [r4, #0]
    572e:	1d18      	adds	r0, r3, #4
    5730:	6010      	str	r0, [r2, #0]
    5732:	0628      	lsls	r0, r5, #24
    5734:	d501      	bpl.n	573a <_printf_i+0xc2>
    5736:	681b      	ldr	r3, [r3, #0]
    5738:	e002      	b.n	5740 <_printf_i+0xc8>
    573a:	0668      	lsls	r0, r5, #25
    573c:	d5fb      	bpl.n	5736 <_printf_i+0xbe>
    573e:	881b      	ldrh	r3, [r3, #0]
    5740:	296f      	cmp	r1, #111	; 0x6f
    5742:	bf14      	ite	ne
    5744:	220a      	movne	r2, #10
    5746:	2208      	moveq	r2, #8
    5748:	4852      	ldr	r0, [pc, #328]	; (5894 <_printf_i+0x21c>)
    574a:	2100      	movs	r1, #0
    574c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    5750:	6865      	ldr	r5, [r4, #4]
    5752:	2d00      	cmp	r5, #0
    5754:	60a5      	str	r5, [r4, #8]
    5756:	f2c0 8095 	blt.w	5884 <_printf_i+0x20c>
    575a:	6821      	ldr	r1, [r4, #0]
    575c:	f021 0104 	bic.w	r1, r1, #4
    5760:	6021      	str	r1, [r4, #0]
    5762:	2b00      	cmp	r3, #0
    5764:	d13d      	bne.n	57e2 <_printf_i+0x16a>
    5766:	2d00      	cmp	r5, #0
    5768:	f040 808e 	bne.w	5888 <_printf_i+0x210>
    576c:	4665      	mov	r5, ip
    576e:	2a08      	cmp	r2, #8
    5770:	d10b      	bne.n	578a <_printf_i+0x112>
    5772:	6823      	ldr	r3, [r4, #0]
    5774:	07db      	lsls	r3, r3, #31
    5776:	d508      	bpl.n	578a <_printf_i+0x112>
    5778:	6923      	ldr	r3, [r4, #16]
    577a:	6862      	ldr	r2, [r4, #4]
    577c:	429a      	cmp	r2, r3
    577e:	bfde      	ittt	le
    5780:	2330      	movle	r3, #48	; 0x30
    5782:	f805 3c01 	strble.w	r3, [r5, #-1]
    5786:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    578a:	ebac 0305 	sub.w	r3, ip, r5
    578e:	6123      	str	r3, [r4, #16]
    5790:	f8cd 8000 	str.w	r8, [sp]
    5794:	463b      	mov	r3, r7
    5796:	aa03      	add	r2, sp, #12
    5798:	4621      	mov	r1, r4
    579a:	4630      	mov	r0, r6
    579c:	f7ff fef6 	bl	558c <_printf_common>
    57a0:	3001      	adds	r0, #1
    57a2:	d14d      	bne.n	5840 <_printf_i+0x1c8>
    57a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    57a8:	b005      	add	sp, #20
    57aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    57ae:	4839      	ldr	r0, [pc, #228]	; (5894 <_printf_i+0x21c>)
    57b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    57b4:	6813      	ldr	r3, [r2, #0]
    57b6:	6821      	ldr	r1, [r4, #0]
    57b8:	1d1d      	adds	r5, r3, #4
    57ba:	681b      	ldr	r3, [r3, #0]
    57bc:	6015      	str	r5, [r2, #0]
    57be:	060a      	lsls	r2, r1, #24
    57c0:	d50b      	bpl.n	57da <_printf_i+0x162>
    57c2:	07ca      	lsls	r2, r1, #31
    57c4:	bf44      	itt	mi
    57c6:	f041 0120 	orrmi.w	r1, r1, #32
    57ca:	6021      	strmi	r1, [r4, #0]
    57cc:	b91b      	cbnz	r3, 57d6 <_printf_i+0x15e>
    57ce:	6822      	ldr	r2, [r4, #0]
    57d0:	f022 0220 	bic.w	r2, r2, #32
    57d4:	6022      	str	r2, [r4, #0]
    57d6:	2210      	movs	r2, #16
    57d8:	e7b7      	b.n	574a <_printf_i+0xd2>
    57da:	064d      	lsls	r5, r1, #25
    57dc:	bf48      	it	mi
    57de:	b29b      	uxthmi	r3, r3
    57e0:	e7ef      	b.n	57c2 <_printf_i+0x14a>
    57e2:	4665      	mov	r5, ip
    57e4:	fbb3 f1f2 	udiv	r1, r3, r2
    57e8:	fb02 3311 	mls	r3, r2, r1, r3
    57ec:	5cc3      	ldrb	r3, [r0, r3]
    57ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
    57f2:	460b      	mov	r3, r1
    57f4:	2900      	cmp	r1, #0
    57f6:	d1f5      	bne.n	57e4 <_printf_i+0x16c>
    57f8:	e7b9      	b.n	576e <_printf_i+0xf6>
    57fa:	6813      	ldr	r3, [r2, #0]
    57fc:	6825      	ldr	r5, [r4, #0]
    57fe:	1d18      	adds	r0, r3, #4
    5800:	6961      	ldr	r1, [r4, #20]
    5802:	6010      	str	r0, [r2, #0]
    5804:	0628      	lsls	r0, r5, #24
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	d501      	bpl.n	580e <_printf_i+0x196>
    580a:	6019      	str	r1, [r3, #0]
    580c:	e002      	b.n	5814 <_printf_i+0x19c>
    580e:	066a      	lsls	r2, r5, #25
    5810:	d5fb      	bpl.n	580a <_printf_i+0x192>
    5812:	8019      	strh	r1, [r3, #0]
    5814:	2300      	movs	r3, #0
    5816:	4665      	mov	r5, ip
    5818:	6123      	str	r3, [r4, #16]
    581a:	e7b9      	b.n	5790 <_printf_i+0x118>
    581c:	6813      	ldr	r3, [r2, #0]
    581e:	1d19      	adds	r1, r3, #4
    5820:	6011      	str	r1, [r2, #0]
    5822:	681d      	ldr	r5, [r3, #0]
    5824:	6862      	ldr	r2, [r4, #4]
    5826:	2100      	movs	r1, #0
    5828:	4628      	mov	r0, r5
    582a:	f000 f8e1 	bl	59f0 <memchr>
    582e:	b108      	cbz	r0, 5834 <_printf_i+0x1bc>
    5830:	1b40      	subs	r0, r0, r5
    5832:	6060      	str	r0, [r4, #4]
    5834:	6863      	ldr	r3, [r4, #4]
    5836:	6123      	str	r3, [r4, #16]
    5838:	2300      	movs	r3, #0
    583a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    583e:	e7a7      	b.n	5790 <_printf_i+0x118>
    5840:	6923      	ldr	r3, [r4, #16]
    5842:	462a      	mov	r2, r5
    5844:	4639      	mov	r1, r7
    5846:	4630      	mov	r0, r6
    5848:	47c0      	blx	r8
    584a:	3001      	adds	r0, #1
    584c:	d0aa      	beq.n	57a4 <_printf_i+0x12c>
    584e:	6823      	ldr	r3, [r4, #0]
    5850:	079b      	lsls	r3, r3, #30
    5852:	d413      	bmi.n	587c <_printf_i+0x204>
    5854:	68e0      	ldr	r0, [r4, #12]
    5856:	9b03      	ldr	r3, [sp, #12]
    5858:	4298      	cmp	r0, r3
    585a:	bfb8      	it	lt
    585c:	4618      	movlt	r0, r3
    585e:	e7a3      	b.n	57a8 <_printf_i+0x130>
    5860:	2301      	movs	r3, #1
    5862:	464a      	mov	r2, r9
    5864:	4639      	mov	r1, r7
    5866:	4630      	mov	r0, r6
    5868:	47c0      	blx	r8
    586a:	3001      	adds	r0, #1
    586c:	d09a      	beq.n	57a4 <_printf_i+0x12c>
    586e:	3501      	adds	r5, #1
    5870:	68e3      	ldr	r3, [r4, #12]
    5872:	9a03      	ldr	r2, [sp, #12]
    5874:	1a9b      	subs	r3, r3, r2
    5876:	42ab      	cmp	r3, r5
    5878:	dcf2      	bgt.n	5860 <_printf_i+0x1e8>
    587a:	e7eb      	b.n	5854 <_printf_i+0x1dc>
    587c:	2500      	movs	r5, #0
    587e:	f104 0919 	add.w	r9, r4, #25
    5882:	e7f5      	b.n	5870 <_printf_i+0x1f8>
    5884:	2b00      	cmp	r3, #0
    5886:	d1ac      	bne.n	57e2 <_printf_i+0x16a>
    5888:	7803      	ldrb	r3, [r0, #0]
    588a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    588e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5892:	e76c      	b.n	576e <_printf_i+0xf6>
    5894:	00006675 	.word	0x00006675
    5898:	00006686 	.word	0x00006686

0000589c <_sbrk_r>:
    589c:	b538      	push	{r3, r4, r5, lr}
    589e:	2300      	movs	r3, #0
    58a0:	4c05      	ldr	r4, [pc, #20]	; (58b8 <_sbrk_r+0x1c>)
    58a2:	4605      	mov	r5, r0
    58a4:	4608      	mov	r0, r1
    58a6:	6023      	str	r3, [r4, #0]
    58a8:	f000 f8ec 	bl	5a84 <_sbrk>
    58ac:	1c43      	adds	r3, r0, #1
    58ae:	d102      	bne.n	58b6 <_sbrk_r+0x1a>
    58b0:	6823      	ldr	r3, [r4, #0]
    58b2:	b103      	cbz	r3, 58b6 <_sbrk_r+0x1a>
    58b4:	602b      	str	r3, [r5, #0]
    58b6:	bd38      	pop	{r3, r4, r5, pc}
    58b8:	200000bc 	.word	0x200000bc

000058bc <__sread>:
    58bc:	b510      	push	{r4, lr}
    58be:	460c      	mov	r4, r1
    58c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    58c4:	f000 f8a4 	bl	5a10 <_read_r>
    58c8:	2800      	cmp	r0, #0
    58ca:	bfab      	itete	ge
    58cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    58ce:	89a3      	ldrhlt	r3, [r4, #12]
    58d0:	181b      	addge	r3, r3, r0
    58d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    58d6:	bfac      	ite	ge
    58d8:	6563      	strge	r3, [r4, #84]	; 0x54
    58da:	81a3      	strhlt	r3, [r4, #12]
    58dc:	bd10      	pop	{r4, pc}

000058de <__swrite>:
    58de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58e2:	461f      	mov	r7, r3
    58e4:	898b      	ldrh	r3, [r1, #12]
    58e6:	4605      	mov	r5, r0
    58e8:	05db      	lsls	r3, r3, #23
    58ea:	460c      	mov	r4, r1
    58ec:	4616      	mov	r6, r2
    58ee:	d505      	bpl.n	58fc <__swrite+0x1e>
    58f0:	2302      	movs	r3, #2
    58f2:	2200      	movs	r2, #0
    58f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    58f8:	f000 f868 	bl	59cc <_lseek_r>
    58fc:	89a3      	ldrh	r3, [r4, #12]
    58fe:	4632      	mov	r2, r6
    5900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5904:	81a3      	strh	r3, [r4, #12]
    5906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    590a:	463b      	mov	r3, r7
    590c:	4628      	mov	r0, r5
    590e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5912:	f000 b817 	b.w	5944 <_write_r>

00005916 <__sseek>:
    5916:	b510      	push	{r4, lr}
    5918:	460c      	mov	r4, r1
    591a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    591e:	f000 f855 	bl	59cc <_lseek_r>
    5922:	1c43      	adds	r3, r0, #1
    5924:	89a3      	ldrh	r3, [r4, #12]
    5926:	bf15      	itete	ne
    5928:	6560      	strne	r0, [r4, #84]	; 0x54
    592a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    592e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5932:	81a3      	strheq	r3, [r4, #12]
    5934:	bf18      	it	ne
    5936:	81a3      	strhne	r3, [r4, #12]
    5938:	bd10      	pop	{r4, pc}

0000593a <__sclose>:
    593a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    593e:	f000 b813 	b.w	5968 <_close_r>
	...

00005944 <_write_r>:
    5944:	b538      	push	{r3, r4, r5, lr}
    5946:	4605      	mov	r5, r0
    5948:	4608      	mov	r0, r1
    594a:	4611      	mov	r1, r2
    594c:	2200      	movs	r2, #0
    594e:	4c05      	ldr	r4, [pc, #20]	; (5964 <_write_r+0x20>)
    5950:	6022      	str	r2, [r4, #0]
    5952:	461a      	mov	r2, r3
    5954:	f7ff f8c4 	bl	4ae0 <_write>
    5958:	1c43      	adds	r3, r0, #1
    595a:	d102      	bne.n	5962 <_write_r+0x1e>
    595c:	6823      	ldr	r3, [r4, #0]
    595e:	b103      	cbz	r3, 5962 <_write_r+0x1e>
    5960:	602b      	str	r3, [r5, #0]
    5962:	bd38      	pop	{r3, r4, r5, pc}
    5964:	200000bc 	.word	0x200000bc

00005968 <_close_r>:
    5968:	b538      	push	{r3, r4, r5, lr}
    596a:	2300      	movs	r3, #0
    596c:	4c05      	ldr	r4, [pc, #20]	; (5984 <_close_r+0x1c>)
    596e:	4605      	mov	r5, r0
    5970:	4608      	mov	r0, r1
    5972:	6023      	str	r3, [r4, #0]
    5974:	f000 f85e 	bl	5a34 <_close>
    5978:	1c43      	adds	r3, r0, #1
    597a:	d102      	bne.n	5982 <_close_r+0x1a>
    597c:	6823      	ldr	r3, [r4, #0]
    597e:	b103      	cbz	r3, 5982 <_close_r+0x1a>
    5980:	602b      	str	r3, [r5, #0]
    5982:	bd38      	pop	{r3, r4, r5, pc}
    5984:	200000bc 	.word	0x200000bc

00005988 <_fstat_r>:
    5988:	b538      	push	{r3, r4, r5, lr}
    598a:	2300      	movs	r3, #0
    598c:	4c06      	ldr	r4, [pc, #24]	; (59a8 <_fstat_r+0x20>)
    598e:	4605      	mov	r5, r0
    5990:	4608      	mov	r0, r1
    5992:	4611      	mov	r1, r2
    5994:	6023      	str	r3, [r4, #0]
    5996:	f000 f855 	bl	5a44 <_fstat>
    599a:	1c43      	adds	r3, r0, #1
    599c:	d102      	bne.n	59a4 <_fstat_r+0x1c>
    599e:	6823      	ldr	r3, [r4, #0]
    59a0:	b103      	cbz	r3, 59a4 <_fstat_r+0x1c>
    59a2:	602b      	str	r3, [r5, #0]
    59a4:	bd38      	pop	{r3, r4, r5, pc}
    59a6:	bf00      	nop
    59a8:	200000bc 	.word	0x200000bc

000059ac <_isatty_r>:
    59ac:	b538      	push	{r3, r4, r5, lr}
    59ae:	2300      	movs	r3, #0
    59b0:	4c05      	ldr	r4, [pc, #20]	; (59c8 <_isatty_r+0x1c>)
    59b2:	4605      	mov	r5, r0
    59b4:	4608      	mov	r0, r1
    59b6:	6023      	str	r3, [r4, #0]
    59b8:	f000 f84c 	bl	5a54 <_isatty>
    59bc:	1c43      	adds	r3, r0, #1
    59be:	d102      	bne.n	59c6 <_isatty_r+0x1a>
    59c0:	6823      	ldr	r3, [r4, #0]
    59c2:	b103      	cbz	r3, 59c6 <_isatty_r+0x1a>
    59c4:	602b      	str	r3, [r5, #0]
    59c6:	bd38      	pop	{r3, r4, r5, pc}
    59c8:	200000bc 	.word	0x200000bc

000059cc <_lseek_r>:
    59cc:	b538      	push	{r3, r4, r5, lr}
    59ce:	4605      	mov	r5, r0
    59d0:	4608      	mov	r0, r1
    59d2:	4611      	mov	r1, r2
    59d4:	2200      	movs	r2, #0
    59d6:	4c05      	ldr	r4, [pc, #20]	; (59ec <_lseek_r+0x20>)
    59d8:	6022      	str	r2, [r4, #0]
    59da:	461a      	mov	r2, r3
    59dc:	f000 f842 	bl	5a64 <_lseek>
    59e0:	1c43      	adds	r3, r0, #1
    59e2:	d102      	bne.n	59ea <_lseek_r+0x1e>
    59e4:	6823      	ldr	r3, [r4, #0]
    59e6:	b103      	cbz	r3, 59ea <_lseek_r+0x1e>
    59e8:	602b      	str	r3, [r5, #0]
    59ea:	bd38      	pop	{r3, r4, r5, pc}
    59ec:	200000bc 	.word	0x200000bc

000059f0 <memchr>:
    59f0:	b510      	push	{r4, lr}
    59f2:	b2c9      	uxtb	r1, r1
    59f4:	4402      	add	r2, r0
    59f6:	4290      	cmp	r0, r2
    59f8:	4603      	mov	r3, r0
    59fa:	d101      	bne.n	5a00 <memchr+0x10>
    59fc:	2300      	movs	r3, #0
    59fe:	e003      	b.n	5a08 <memchr+0x18>
    5a00:	781c      	ldrb	r4, [r3, #0]
    5a02:	3001      	adds	r0, #1
    5a04:	428c      	cmp	r4, r1
    5a06:	d1f6      	bne.n	59f6 <memchr+0x6>
    5a08:	4618      	mov	r0, r3
    5a0a:	bd10      	pop	{r4, pc}

00005a0c <__malloc_lock>:
    5a0c:	4770      	bx	lr

00005a0e <__malloc_unlock>:
    5a0e:	4770      	bx	lr

00005a10 <_read_r>:
    5a10:	b538      	push	{r3, r4, r5, lr}
    5a12:	4605      	mov	r5, r0
    5a14:	4608      	mov	r0, r1
    5a16:	4611      	mov	r1, r2
    5a18:	2200      	movs	r2, #0
    5a1a:	4c05      	ldr	r4, [pc, #20]	; (5a30 <_read_r+0x20>)
    5a1c:	6022      	str	r2, [r4, #0]
    5a1e:	461a      	mov	r2, r3
    5a20:	f000 f828 	bl	5a74 <_read>
    5a24:	1c43      	adds	r3, r0, #1
    5a26:	d102      	bne.n	5a2e <_read_r+0x1e>
    5a28:	6823      	ldr	r3, [r4, #0]
    5a2a:	b103      	cbz	r3, 5a2e <_read_r+0x1e>
    5a2c:	602b      	str	r3, [r5, #0]
    5a2e:	bd38      	pop	{r3, r4, r5, pc}
    5a30:	200000bc 	.word	0x200000bc

00005a34 <_close>:
    5a34:	2258      	movs	r2, #88	; 0x58
    5a36:	4b02      	ldr	r3, [pc, #8]	; (5a40 <_close+0xc>)
    5a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a3c:	601a      	str	r2, [r3, #0]
    5a3e:	4770      	bx	lr
    5a40:	200000bc 	.word	0x200000bc

00005a44 <_fstat>:
    5a44:	2258      	movs	r2, #88	; 0x58
    5a46:	4b02      	ldr	r3, [pc, #8]	; (5a50 <_fstat+0xc>)
    5a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a4c:	601a      	str	r2, [r3, #0]
    5a4e:	4770      	bx	lr
    5a50:	200000bc 	.word	0x200000bc

00005a54 <_isatty>:
    5a54:	2258      	movs	r2, #88	; 0x58
    5a56:	4b02      	ldr	r3, [pc, #8]	; (5a60 <_isatty+0xc>)
    5a58:	2000      	movs	r0, #0
    5a5a:	601a      	str	r2, [r3, #0]
    5a5c:	4770      	bx	lr
    5a5e:	bf00      	nop
    5a60:	200000bc 	.word	0x200000bc

00005a64 <_lseek>:
    5a64:	2258      	movs	r2, #88	; 0x58
    5a66:	4b02      	ldr	r3, [pc, #8]	; (5a70 <_lseek+0xc>)
    5a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a6c:	601a      	str	r2, [r3, #0]
    5a6e:	4770      	bx	lr
    5a70:	200000bc 	.word	0x200000bc

00005a74 <_read>:
    5a74:	2258      	movs	r2, #88	; 0x58
    5a76:	4b02      	ldr	r3, [pc, #8]	; (5a80 <_read+0xc>)
    5a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a7c:	601a      	str	r2, [r3, #0]
    5a7e:	4770      	bx	lr
    5a80:	200000bc 	.word	0x200000bc

00005a84 <_sbrk>:
    5a84:	4a04      	ldr	r2, [pc, #16]	; (5a98 <_sbrk+0x14>)
    5a86:	4905      	ldr	r1, [pc, #20]	; (5a9c <_sbrk+0x18>)
    5a88:	6813      	ldr	r3, [r2, #0]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	bf08      	it	eq
    5a8e:	460b      	moveq	r3, r1
    5a90:	4418      	add	r0, r3
    5a92:	6010      	str	r0, [r2, #0]
    5a94:	4618      	mov	r0, r3
    5a96:	4770      	bx	lr
    5a98:	20000070 	.word	0x20000070
    5a9c:	200000c0 	.word	0x200000c0

00005aa0 <_exit>:
    5aa0:	e7fe      	b.n	5aa0 <_exit>
    5aa2:	bf00      	nop

00005aa4 <_init>:
    5aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aa6:	bf00      	nop

00005aa8 <_fini>:
    5aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aaa:	bf00      	nop
    5aac:	4f495047 	.word	0x4f495047
    5ab0:	73616d20 	.word	0x73616d20
    5ab4:	6361206b 	.word	0x6361206b
    5ab8:	73736563 	.word	0x73736563
    5abc:	73657420 	.word	0x73657420
    5ac0:	00000074 	.word	0x00000074
    5ac4:	6f6c202d 	.word	0x6f6c202d
    5ac8:	20726577 	.word	0x20726577
    5acc:	65747962 	.word	0x65747962
    5ad0:	00000000 	.word	0x00000000
    5ad4:	4f525245 	.word	0x4f525245
    5ad8:	49203a52 	.word	0x49203a52
    5adc:	7475706e 	.word	0x7475706e
    5ae0:	72617020 	.word	0x72617020
    5ae4:	74656d61 	.word	0x74656d61
    5ae8:	69207265 	.word	0x69207265
    5aec:	6c61766e 	.word	0x6c61766e
    5af0:	69206469 	.word	0x69206469
    5af4:	7566206e 	.word	0x7566206e
    5af8:	6974636e 	.word	0x6974636e
    5afc:	27206e6f 	.word	0x27206e6f
    5b00:	6f697067 	.word	0x6f697067
    5b04:	73616d5f 	.word	0x73616d5f
    5b08:	5f64656b 	.word	0x5f64656b
    5b0c:	65636361 	.word	0x65636361
    5b10:	745f7373 	.word	0x745f7373
    5b14:	27747365 	.word	0x27747365
    5b18:	0000002e 	.word	0x0000002e
    5b1c:	4f525245 	.word	0x4f525245
    5b20:	203a2052 	.word	0x203a2052
    5b24:	6d20424c 	.word	0x6d20424c
    5b28:	656b7361 	.word	0x656b7361
    5b2c:	63612064 	.word	0x63612064
    5b30:	73736563 	.word	0x73736563
    5b34:	69616620 	.word	0x69616620
    5b38:	2064656c 	.word	0x2064656c
    5b3c:	25783028 	.word	0x25783028
    5b40:	61202978 	.word	0x61202978
    5b44:	616d2074 	.word	0x616d2074
    5b48:	3d206b73 	.word	0x3d206b73
    5b4c:	0a642520 	.word	0x0a642520
    5b50:	00000000 	.word	0x00000000
    5b54:	65776f4c 	.word	0x65776f4c
    5b58:	79422072 	.word	0x79422072
    5b5c:	4d206574 	.word	0x4d206574
    5b60:	206b7361 	.word	0x206b7361
    5b64:	65636341 	.word	0x65636341
    5b68:	54207373 	.word	0x54207373
    5b6c:	73747365 	.word	0x73747365
    5b70:	73615020 	.word	0x73615020
    5b74:	0a646573 	.word	0x0a646573
    5b78:	00000000 	.word	0x00000000
    5b7c:	65776f4c 	.word	0x65776f4c
    5b80:	79422072 	.word	0x79422072
    5b84:	4d206574 	.word	0x4d206574
    5b88:	206b7361 	.word	0x206b7361
    5b8c:	65636341 	.word	0x65636341
    5b90:	54207373 	.word	0x54207373
    5b94:	73747365 	.word	0x73747365
    5b98:	69614620 	.word	0x69614620
    5b9c:	0a64656c 	.word	0x0a64656c
    5ba0:	00000000 	.word	0x00000000
    5ba4:	7075202d 	.word	0x7075202d
    5ba8:	20726570 	.word	0x20726570
    5bac:	65747962 	.word	0x65747962
    5bb0:	00000000 	.word	0x00000000
    5bb4:	4f525245 	.word	0x4f525245
    5bb8:	203a2052 	.word	0x203a2052
    5bbc:	6d204255 	.word	0x6d204255
    5bc0:	656b7361 	.word	0x656b7361
    5bc4:	63612064 	.word	0x63612064
    5bc8:	73736563 	.word	0x73736563
    5bcc:	69616620 	.word	0x69616620
    5bd0:	2064656c 	.word	0x2064656c
    5bd4:	25783028 	.word	0x25783028
    5bd8:	61202978 	.word	0x61202978
    5bdc:	616d2074 	.word	0x616d2074
    5be0:	3d206b73 	.word	0x3d206b73
    5be4:	0a642520 	.word	0x0a642520
    5be8:	00000000 	.word	0x00000000
    5bec:	65707055 	.word	0x65707055
    5bf0:	79422072 	.word	0x79422072
    5bf4:	4d206574 	.word	0x4d206574
    5bf8:	206b7361 	.word	0x206b7361
    5bfc:	65636341 	.word	0x65636341
    5c00:	54207373 	.word	0x54207373
    5c04:	73747365 	.word	0x73747365
    5c08:	73615020 	.word	0x73615020
    5c0c:	0a646573 	.word	0x0a646573
    5c10:	00000000 	.word	0x00000000
    5c14:	65707055 	.word	0x65707055
    5c18:	79422072 	.word	0x79422072
    5c1c:	4d206574 	.word	0x4d206574
    5c20:	206b7361 	.word	0x206b7361
    5c24:	65636341 	.word	0x65636341
    5c28:	54207373 	.word	0x54207373
    5c2c:	73747365 	.word	0x73747365
    5c30:	69614620 	.word	0x69614620
    5c34:	0a64656c 	.word	0x0a64656c
    5c38:	00000000 	.word	0x00000000
    5c3c:	6b73614d 	.word	0x6b73614d
    5c40:	63634120 	.word	0x63634120
    5c44:	20737365 	.word	0x20737365
    5c48:	74736554 	.word	0x74736554
    5c4c:	61462073 	.word	0x61462073
    5c50:	64656c69 	.word	0x64656c69
    5c54:	7245202c 	.word	0x7245202c
    5c58:	20726f72 	.word	0x20726f72
    5c5c:	65646f43 	.word	0x65646f43
    5c60:	3028203a 	.word	0x3028203a
    5c64:	29782578 	.word	0x29782578
    5c68:	0000000a 	.word	0x0000000a
    5c6c:	6b73614d 	.word	0x6b73614d
    5c70:	63634120 	.word	0x63634120
    5c74:	20737365 	.word	0x20737365
    5c78:	74736554 	.word	0x74736554
    5c7c:	61502073 	.word	0x61502073
    5c80:	64657373 	.word	0x64657373
    5c84:	0000000a 	.word	0x0000000a
    5c88:	4f525245 	.word	0x4f525245
    5c8c:	49203a52 	.word	0x49203a52
    5c90:	7475706e 	.word	0x7475706e
    5c94:	72617020 	.word	0x72617020
    5c98:	74656d61 	.word	0x74656d61
    5c9c:	69207265 	.word	0x69207265
    5ca0:	6c61766e 	.word	0x6c61766e
    5ca4:	69206469 	.word	0x69206469
    5ca8:	7566206e 	.word	0x7566206e
    5cac:	6974636e 	.word	0x6974636e
    5cb0:	27206e6f 	.word	0x27206e6f
    5cb4:	6f697067 	.word	0x6f697067
    5cb8:	6765725f 	.word	0x6765725f
    5cbc:	65747369 	.word	0x65747369
    5cc0:	77725f72 	.word	0x77725f72
    5cc4:	7365745f 	.word	0x7365745f
    5cc8:	002e2774 	.word	0x002e2774
    5ccc:	4f495047 	.word	0x4f495047
    5cd0:	572f5220 	.word	0x572f5220
    5cd4:	73657420 	.word	0x73657420
    5cd8:	00000074 	.word	0x00000074
    5cdc:	6e69202d 	.word	0x6e69202d
    5ce0:	61697469 	.word	0x61697469
    5ce4:	6176206c 	.word	0x6176206c
    5ce8:	7365756c 	.word	0x7365756c
    5cec:	00000000 	.word	0x00000000
    5cf0:	6863202d 	.word	0x6863202d
    5cf4:	206b6365 	.word	0x206b6365
    5cf8:	76204449 	.word	0x76204449
    5cfc:	65756c61 	.word	0x65756c61
    5d00:	57282073 	.word	0x57282073
    5d04:	2044524f 	.word	0x2044524f
    5d08:	65636361 	.word	0x65636361
    5d0c:	73657373 	.word	0x73657373
    5d10:	00000029 	.word	0x00000029
    5d14:	4f525245 	.word	0x4f525245
    5d18:	203a2052 	.word	0x203a2052
    5d1c:	74696e69 	.word	0x74696e69
    5d20:	206c6169 	.word	0x206c6169
    5d24:	756c6176 	.word	0x756c6176
    5d28:	61662065 	.word	0x61662065
    5d2c:	64656c69 	.word	0x64656c69
    5d30:	78302820 	.word	0x78302820
    5d34:	0a297825 	.word	0x0a297825
    5d38:	00000000 	.word	0x00000000
    5d3c:	7277202d 	.word	0x7277202d
    5d40:	20657469 	.word	0x20657469
    5d44:	76204449 	.word	0x76204449
    5d48:	65756c61 	.word	0x65756c61
    5d4c:	48282073 	.word	0x48282073
    5d50:	20464c41 	.word	0x20464c41
    5d54:	44524f57 	.word	0x44524f57
    5d58:	63636120 	.word	0x63636120
    5d5c:	65737365 	.word	0x65737365
    5d60:	6c202c73 	.word	0x6c202c73
    5d64:	7265776f 	.word	0x7265776f
    5d68:	202d2029 	.word	0x202d2029
    5d6c:	756f6873 	.word	0x756f6873
    5d70:	6820646c 	.word	0x6820646c
    5d74:	20657661 	.word	0x20657661
    5d78:	65206f6e 	.word	0x65206f6e
    5d7c:	63656666 	.word	0x63656666
    5d80:	00000074 	.word	0x00000074
    5d84:	6863202d 	.word	0x6863202d
    5d88:	206b6365 	.word	0x206b6365
    5d8c:	76204449 	.word	0x76204449
    5d90:	65756c61 	.word	0x65756c61
    5d94:	48282073 	.word	0x48282073
    5d98:	20464c41 	.word	0x20464c41
    5d9c:	44524f57 	.word	0x44524f57
    5da0:	63636120 	.word	0x63636120
    5da4:	65737365 	.word	0x65737365
    5da8:	6c202c73 	.word	0x6c202c73
    5dac:	7265776f 	.word	0x7265776f
    5db0:	00000029 	.word	0x00000029
    5db4:	7277202d 	.word	0x7277202d
    5db8:	20657469 	.word	0x20657469
    5dbc:	76204449 	.word	0x76204449
    5dc0:	65756c61 	.word	0x65756c61
    5dc4:	48282073 	.word	0x48282073
    5dc8:	20464c41 	.word	0x20464c41
    5dcc:	44524f57 	.word	0x44524f57
    5dd0:	63636120 	.word	0x63636120
    5dd4:	65737365 	.word	0x65737365
    5dd8:	75202c73 	.word	0x75202c73
    5ddc:	72657070 	.word	0x72657070
    5de0:	202d2029 	.word	0x202d2029
    5de4:	756f6873 	.word	0x756f6873
    5de8:	6820646c 	.word	0x6820646c
    5dec:	20657661 	.word	0x20657661
    5df0:	65206f6e 	.word	0x65206f6e
    5df4:	63656666 	.word	0x63656666
    5df8:	00000074 	.word	0x00000074
    5dfc:	6863202d 	.word	0x6863202d
    5e00:	206b6365 	.word	0x206b6365
    5e04:	76204449 	.word	0x76204449
    5e08:	65756c61 	.word	0x65756c61
    5e0c:	48282073 	.word	0x48282073
    5e10:	20464c41 	.word	0x20464c41
    5e14:	44524f57 	.word	0x44524f57
    5e18:	63636120 	.word	0x63636120
    5e1c:	65737365 	.word	0x65737365
    5e20:	75202c73 	.word	0x75202c73
    5e24:	72657070 	.word	0x72657070
    5e28:	00000029 	.word	0x00000029
    5e2c:	7277202d 	.word	0x7277202d
    5e30:	20657469 	.word	0x20657469
    5e34:	76204449 	.word	0x76204449
    5e38:	65756c61 	.word	0x65756c61
    5e3c:	42282073 	.word	0x42282073
    5e40:	20455459 	.word	0x20455459
    5e44:	65636361 	.word	0x65636361
    5e48:	73657373 	.word	0x73657373
    5e4c:	7962202c 	.word	0x7962202c
    5e50:	30206574 	.word	0x30206574
    5e54:	202d2029 	.word	0x202d2029
    5e58:	756f6873 	.word	0x756f6873
    5e5c:	6820646c 	.word	0x6820646c
    5e60:	20657661 	.word	0x20657661
    5e64:	65206f6e 	.word	0x65206f6e
    5e68:	63656666 	.word	0x63656666
    5e6c:	00000074 	.word	0x00000074
    5e70:	6863202d 	.word	0x6863202d
    5e74:	206b6365 	.word	0x206b6365
    5e78:	76204449 	.word	0x76204449
    5e7c:	65756c61 	.word	0x65756c61
    5e80:	42282073 	.word	0x42282073
    5e84:	20455459 	.word	0x20455459
    5e88:	65636361 	.word	0x65636361
    5e8c:	73657373 	.word	0x73657373
    5e90:	7962202c 	.word	0x7962202c
    5e94:	30206574 	.word	0x30206574
    5e98:	00000029 	.word	0x00000029
    5e9c:	7277202d 	.word	0x7277202d
    5ea0:	20657469 	.word	0x20657469
    5ea4:	76204449 	.word	0x76204449
    5ea8:	65756c61 	.word	0x65756c61
    5eac:	42282073 	.word	0x42282073
    5eb0:	20455459 	.word	0x20455459
    5eb4:	65636361 	.word	0x65636361
    5eb8:	73657373 	.word	0x73657373
    5ebc:	7962202c 	.word	0x7962202c
    5ec0:	31206574 	.word	0x31206574
    5ec4:	202d2029 	.word	0x202d2029
    5ec8:	756f6873 	.word	0x756f6873
    5ecc:	6820646c 	.word	0x6820646c
    5ed0:	20657661 	.word	0x20657661
    5ed4:	65206f6e 	.word	0x65206f6e
    5ed8:	63656666 	.word	0x63656666
    5edc:	00000074 	.word	0x00000074
    5ee0:	6863202d 	.word	0x6863202d
    5ee4:	206b6365 	.word	0x206b6365
    5ee8:	76204449 	.word	0x76204449
    5eec:	65756c61 	.word	0x65756c61
    5ef0:	42282073 	.word	0x42282073
    5ef4:	20455459 	.word	0x20455459
    5ef8:	65636361 	.word	0x65636361
    5efc:	73657373 	.word	0x73657373
    5f00:	7962202c 	.word	0x7962202c
    5f04:	31206574 	.word	0x31206574
    5f08:	00000029 	.word	0x00000029
    5f0c:	4f525245 	.word	0x4f525245
    5f10:	203a2052 	.word	0x203a2052
    5f14:	74696e69 	.word	0x74696e69
    5f18:	206c6169 	.word	0x206c6169
    5f1c:	756c6176 	.word	0x756c6176
    5f20:	61662065 	.word	0x61662065
    5f24:	64656c69 	.word	0x64656c69
    5f28:	206e6f20 	.word	0x206e6f20
    5f2c:	65747962 	.word	0x65747962
    5f30:	61203020 	.word	0x61203020
    5f34:	3120646e 	.word	0x3120646e
    5f38:	63636120 	.word	0x63636120
    5f3c:	65737365 	.word	0x65737365
    5f40:	30282073 	.word	0x30282073
    5f44:	29782578 	.word	0x29782578
    5f48:	0000000a 	.word	0x0000000a
    5f4c:	7277202d 	.word	0x7277202d
    5f50:	20657469 	.word	0x20657469
    5f54:	76204449 	.word	0x76204449
    5f58:	65756c61 	.word	0x65756c61
    5f5c:	42282073 	.word	0x42282073
    5f60:	20455459 	.word	0x20455459
    5f64:	65636361 	.word	0x65636361
    5f68:	73657373 	.word	0x73657373
    5f6c:	7962202c 	.word	0x7962202c
    5f70:	32206574 	.word	0x32206574
    5f74:	202d2029 	.word	0x202d2029
    5f78:	756f6873 	.word	0x756f6873
    5f7c:	6820646c 	.word	0x6820646c
    5f80:	20657661 	.word	0x20657661
    5f84:	65206f6e 	.word	0x65206f6e
    5f88:	63656666 	.word	0x63656666
    5f8c:	00000074 	.word	0x00000074
    5f90:	6863202d 	.word	0x6863202d
    5f94:	206b6365 	.word	0x206b6365
    5f98:	76204449 	.word	0x76204449
    5f9c:	65756c61 	.word	0x65756c61
    5fa0:	42282073 	.word	0x42282073
    5fa4:	20455459 	.word	0x20455459
    5fa8:	65636361 	.word	0x65636361
    5fac:	73657373 	.word	0x73657373
    5fb0:	7962202c 	.word	0x7962202c
    5fb4:	32206574 	.word	0x32206574
    5fb8:	00000029 	.word	0x00000029
    5fbc:	7277202d 	.word	0x7277202d
    5fc0:	20657469 	.word	0x20657469
    5fc4:	76204449 	.word	0x76204449
    5fc8:	65756c61 	.word	0x65756c61
    5fcc:	42282073 	.word	0x42282073
    5fd0:	20455459 	.word	0x20455459
    5fd4:	65636361 	.word	0x65636361
    5fd8:	73657373 	.word	0x73657373
    5fdc:	7962202c 	.word	0x7962202c
    5fe0:	33206574 	.word	0x33206574
    5fe4:	202d2029 	.word	0x202d2029
    5fe8:	756f6873 	.word	0x756f6873
    5fec:	6820646c 	.word	0x6820646c
    5ff0:	20657661 	.word	0x20657661
    5ff4:	65206f6e 	.word	0x65206f6e
    5ff8:	63656666 	.word	0x63656666
    5ffc:	00000074 	.word	0x00000074
    6000:	6863202d 	.word	0x6863202d
    6004:	206b6365 	.word	0x206b6365
    6008:	76204449 	.word	0x76204449
    600c:	65756c61 	.word	0x65756c61
    6010:	42282073 	.word	0x42282073
    6014:	20455459 	.word	0x20455459
    6018:	65636361 	.word	0x65636361
    601c:	73657373 	.word	0x73657373
    6020:	7962202c 	.word	0x7962202c
    6024:	33206574 	.word	0x33206574
    6028:	00000029 	.word	0x00000029
    602c:	4f525245 	.word	0x4f525245
    6030:	203a2052 	.word	0x203a2052
    6034:	74696e69 	.word	0x74696e69
    6038:	206c6169 	.word	0x206c6169
    603c:	756c6176 	.word	0x756c6176
    6040:	61662065 	.word	0x61662065
    6044:	64656c69 	.word	0x64656c69
    6048:	206e6f20 	.word	0x206e6f20
    604c:	65747962 	.word	0x65747962
    6050:	61203220 	.word	0x61203220
    6054:	3320646e 	.word	0x3320646e
    6058:	63636120 	.word	0x63636120
    605c:	65737365 	.word	0x65737365
    6060:	30282073 	.word	0x30282073
    6064:	29782578 	.word	0x29782578
    6068:	0000000a 	.word	0x0000000a
    606c:	6572202d 	.word	0x6572202d
    6070:	772f6461 	.word	0x772f6461
    6074:	65746972 	.word	0x65746972
    6078:	00000000 	.word	0x00000000
    607c:	4f525245 	.word	0x4f525245
    6080:	203a2052 	.word	0x203a2052
    6084:	64616552 	.word	0x64616552
    6088:	6972772f 	.word	0x6972772f
    608c:	23206574 	.word	0x23206574
    6090:	61662031 	.word	0x61662031
    6094:	64656c69 	.word	0x64656c69
    6098:	25783028 	.word	0x25783028
    609c:	000a2978 	.word	0x000a2978
    60a0:	4f525245 	.word	0x4f525245
    60a4:	203a2052 	.word	0x203a2052
    60a8:	64616552 	.word	0x64616552
    60ac:	6972772f 	.word	0x6972772f
    60b0:	23206574 	.word	0x23206574
    60b4:	61662032 	.word	0x61662032
    60b8:	64656c69 	.word	0x64656c69
    60bc:	25783028 	.word	0x25783028
    60c0:	000a2978 	.word	0x000a2978
    60c4:	4f525245 	.word	0x4f525245
    60c8:	203a2052 	.word	0x203a2052
    60cc:	64616552 	.word	0x64616552
    60d0:	6972772f 	.word	0x6972772f
    60d4:	23206574 	.word	0x23206574
    60d8:	61662033 	.word	0x61662033
    60dc:	64656c69 	.word	0x64656c69
    60e0:	25783028 	.word	0x25783028
    60e4:	000a2978 	.word	0x000a2978
    60e8:	4f525245 	.word	0x4f525245
    60ec:	203a2052 	.word	0x203a2052
    60f0:	64616552 	.word	0x64616552
    60f4:	6972772f 	.word	0x6972772f
    60f8:	23206574 	.word	0x23206574
    60fc:	61662034 	.word	0x61662034
    6100:	64656c69 	.word	0x64656c69
    6104:	25783028 	.word	0x25783028
    6108:	000a2978 	.word	0x000a2978
    610c:	4e49202d 	.word	0x4e49202d
    6110:	41545354 	.word	0x41545354
    6114:	2f535554 	.word	0x2f535554
    6118:	43544e49 	.word	0x43544e49
    611c:	5241454c 	.word	0x5241454c
    6120:	772f7220 	.word	0x772f7220
    6124:	00000000 	.word	0x00000000
    6128:	4f525245 	.word	0x4f525245
    612c:	203a2052 	.word	0x203a2052
    6130:	53544e49 	.word	0x53544e49
    6134:	55544154 	.word	0x55544154
    6138:	4e492f53 	.word	0x4e492f53
    613c:	454c4354 	.word	0x454c4354
    6140:	72205241 	.word	0x72205241
    6144:	6620772f 	.word	0x6620772f
    6148:	656c6961 	.word	0x656c6961
    614c:	30282064 	.word	0x30282064
    6150:	29782578 	.word	0x29782578
    6154:	0000000a 	.word	0x0000000a
    6158:	7373654c 	.word	0x7373654c
    615c:	65687420 	.word	0x65687420
    6160:	3233206e 	.word	0x3233206e
    6164:	51524920 	.word	0x51524920
    6168:	206e6920 	.word	0x206e6920
    616c:	69736564 	.word	0x69736564
    6170:	000a6e67 	.word	0x000a6e67
    6174:	4f525245 	.word	0x4f525245
    6178:	203a2052 	.word	0x203a2052
    617c:	20515249 	.word	0x20515249
    6180:	646e6570 	.word	0x646e6570
    6184:	20676e69 	.word	0x20676e69
    6188:	6c696166 	.word	0x6c696166
    618c:	28206465 	.word	0x28206465
    6190:	78257830 	.word	0x78257830
    6194:	00000a29 	.word	0x00000a29
    6198:	69676552 	.word	0x69676552
    619c:	72657473 	.word	0x72657473
    61a0:	61655220 	.word	0x61655220
    61a4:	72572f64 	.word	0x72572f64
    61a8:	20657469 	.word	0x20657469
    61ac:	74736554 	.word	0x74736554
    61b0:	73615020 	.word	0x73615020
    61b4:	00646573 	.word	0x00646573
    61b8:	4f495047 	.word	0x4f495047
    61bc:	756e5520 	.word	0x756e5520
    61c0:	20646573 	.word	0x20646573
    61c4:	72646461 	.word	0x72646461
    61c8:	20737365 	.word	0x20737365
    61cc:	74736574 	.word	0x74736574
    61d0:	00000000 	.word	0x00000000
    61d4:	4f525245 	.word	0x4f525245
    61d8:	49203a52 	.word	0x49203a52
    61dc:	7475706e 	.word	0x7475706e
    61e0:	72617020 	.word	0x72617020
    61e4:	74656d61 	.word	0x74656d61
    61e8:	69207265 	.word	0x69207265
    61ec:	6c61766e 	.word	0x6c61766e
    61f0:	69206469 	.word	0x69206469
    61f4:	7566206e 	.word	0x7566206e
    61f8:	6974636e 	.word	0x6974636e
    61fc:	27206e6f 	.word	0x27206e6f
    6200:	6f697067 	.word	0x6f697067
    6204:	756e755f 	.word	0x756e755f
    6208:	5f646573 	.word	0x5f646573
    620c:	72646461 	.word	0x72646461
    6210:	65737365 	.word	0x65737365
    6214:	65745f73 	.word	0x65745f73
    6218:	2e277473 	.word	0x2e277473
    621c:	00000000 	.word	0x00000000
    6220:	4f525245 	.word	0x4f525245
    6224:	203a2052 	.word	0x203a2052
    6228:	73756e55 	.word	0x73756e55
    622c:	61206465 	.word	0x61206465
    6230:	65726464 	.word	0x65726464
    6234:	73657373 	.word	0x73657373
    6238:	69616620 	.word	0x69616620
    623c:	2064656c 	.word	0x2064656c
    6240:	25783028 	.word	0x25783028
    6244:	000a2978 	.word	0x000a2978
    6248:	6e55202d 	.word	0x6e55202d
    624c:	64657375 	.word	0x64657375
    6250:	64646120 	.word	0x64646120
    6254:	73736572 	.word	0x73736572
    6258:	54207365 	.word	0x54207365
    625c:	20747365 	.word	0x20747365
    6260:	73736150 	.word	0x73736150
    6264:	00006465 	.word	0x00006465
    6268:	4f525245 	.word	0x4f525245
    626c:	49203a52 	.word	0x49203a52
    6270:	7475706e 	.word	0x7475706e
    6274:	72617020 	.word	0x72617020
    6278:	74656d61 	.word	0x74656d61
    627c:	69207265 	.word	0x69207265
    6280:	6c61766e 	.word	0x6c61766e
    6284:	69206469 	.word	0x69206469
    6288:	7566206e 	.word	0x7566206e
    628c:	6974636e 	.word	0x6974636e
    6290:	27206e6f 	.word	0x27206e6f
    6294:	6f697067 	.word	0x6f697067
    6298:	746e695f 	.word	0x746e695f
    629c:	75727265 	.word	0x75727265
    62a0:	745f7470 	.word	0x745f7470
    62a4:	27747365 	.word	0x27747365
    62a8:	0000002e 	.word	0x0000002e
    62ac:	4f495047 	.word	0x4f495047
    62b0:	746e6920 	.word	0x746e6920
    62b4:	75727265 	.word	0x75727265
    62b8:	74207470 	.word	0x74207470
    62bc:	00747365 	.word	0x00747365
    62c0:	65746e49 	.word	0x65746e49
    62c4:	70757272 	.word	0x70757272
    62c8:	4f502074 	.word	0x4f502074
    62cc:	5f305452 	.word	0x5f305452
    62d0:	5f4c4c41 	.word	0x5f4c4c41
    62d4:	6e515249 	.word	0x6e515249
    62d8:	746f6e20 	.word	0x746f6e20
    62dc:	61766120 	.word	0x61766120
    62e0:	62616c69 	.word	0x62616c69
    62e4:	002e656c 	.word	0x002e656c
    62e8:	65746e49 	.word	0x65746e49
    62ec:	70757272 	.word	0x70757272
    62f0:	4f502074 	.word	0x4f502074
    62f4:	5f315452 	.word	0x5f315452
    62f8:	5f4c4c41 	.word	0x5f4c4c41
    62fc:	6e515249 	.word	0x6e515249
    6300:	746f6e20 	.word	0x746f6e20
    6304:	61766120 	.word	0x61766120
    6308:	62616c69 	.word	0x62616c69
    630c:	002e656c 	.word	0x002e656c
    6310:	65746e49 	.word	0x65746e49
    6314:	70757272 	.word	0x70757272
    6318:	4f502074 	.word	0x4f502074
    631c:	5f325452 	.word	0x5f325452
    6320:	5f4c4c41 	.word	0x5f4c4c41
    6324:	6e515249 	.word	0x6e515249
    6328:	746f6e20 	.word	0x746f6e20
    632c:	61766120 	.word	0x61766120
    6330:	62616c69 	.word	0x62616c69
    6334:	002e656c 	.word	0x002e656c
    6338:	65746e49 	.word	0x65746e49
    633c:	70757272 	.word	0x70757272
    6340:	4f502074 	.word	0x4f502074
    6344:	5f335452 	.word	0x5f335452
    6348:	5f4c4c41 	.word	0x5f4c4c41
    634c:	6e515249 	.word	0x6e515249
    6350:	746f6e20 	.word	0x746f6e20
    6354:	61766120 	.word	0x61766120
    6358:	62616c69 	.word	0x62616c69
    635c:	002e656c 	.word	0x002e656c
    6360:	4f525245 	.word	0x4f525245
    6364:	203a2052 	.word	0x203a2052
    6368:	65746e49 	.word	0x65746e49
    636c:	70757272 	.word	0x70757272
    6370:	61662074 	.word	0x61662074
    6374:	64656c69 	.word	0x64656c69
    6378:	78302820 	.word	0x78302820
    637c:	0a297825 	.word	0x0a297825
    6380:	00000000 	.word	0x00000000
    6384:	65746e49 	.word	0x65746e49
    6388:	70757272 	.word	0x70757272
    638c:	65542074 	.word	0x65542074
    6390:	50207473 	.word	0x50207473
    6394:	65737361 	.word	0x65737361
    6398:	00000064 	.word	0x00000064
    639c:	74726f43 	.word	0x74726f43
    63a0:	4d2d7865 	.word	0x4d2d7865
    63a4:	65442033 	.word	0x65442033
    63a8:	6e676973 	.word	0x6e676973
    63ac:	72617453 	.word	0x72617453
    63b0:	202d2074 	.word	0x202d2074
    63b4:	4f495047 	.word	0x4f495047
    63b8:	73655420 	.word	0x73655420
    63bc:	202d2074 	.word	0x202d2074
    63c0:	69766572 	.word	0x69766572
    63c4:	6e6f6973 	.word	0x6e6f6973
    63c8:	65522420 	.word	0x65522420
    63cc:	69736976 	.word	0x69736976
    63d0:	203a6e6f 	.word	0x203a6e6f
    63d4:	32333432 	.word	0x32333432
    63d8:	24203934 	.word	0x24203934
    63dc:	0000000a 	.word	0x0000000a
    63e0:	47202931 	.word	0x47202931
    63e4:	204f4950 	.word	0x204f4950
    63e8:	00000030 	.word	0x00000030
    63ec:	5047202d 	.word	0x5047202d
    63f0:	23204f49 	.word	0x23204f49
    63f4:	6f6e2030 	.word	0x6f6e2030
    63f8:	72702074 	.word	0x72702074
    63fc:	6e657365 	.word	0x6e657365
    6400:	54202e74 	.word	0x54202e74
    6404:	73747365 	.word	0x73747365
    6408:	696b7320 	.word	0x696b7320
    640c:	64657070 	.word	0x64657070
    6410:	0000002e 	.word	0x0000002e
    6414:	2029320a 	.word	0x2029320a
    6418:	4f495047 	.word	0x4f495047
    641c:	00003120 	.word	0x00003120
    6420:	5047202d 	.word	0x5047202d
    6424:	23204f49 	.word	0x23204f49
    6428:	6f6e2031 	.word	0x6f6e2031
    642c:	72702074 	.word	0x72702074
    6430:	6e657365 	.word	0x6e657365
    6434:	54202e74 	.word	0x54202e74
    6438:	73747365 	.word	0x73747365
    643c:	696b7320 	.word	0x696b7320
    6440:	64657070 	.word	0x64657070
    6444:	0000002e 	.word	0x0000002e
    6448:	2029330a 	.word	0x2029330a
    644c:	4f495047 	.word	0x4f495047
    6450:	00003220 	.word	0x00003220
    6454:	5047202d 	.word	0x5047202d
    6458:	23204f49 	.word	0x23204f49
    645c:	6f6e2032 	.word	0x6f6e2032
    6460:	72702074 	.word	0x72702074
    6464:	6e657365 	.word	0x6e657365
    6468:	54202e74 	.word	0x54202e74
    646c:	73747365 	.word	0x73747365
    6470:	696b7320 	.word	0x696b7320
    6474:	64657070 	.word	0x64657070
    6478:	0000002e 	.word	0x0000002e
    647c:	2029330a 	.word	0x2029330a
    6480:	4f495047 	.word	0x4f495047
    6484:	00003320 	.word	0x00003320
    6488:	5047202d 	.word	0x5047202d
    648c:	23204f49 	.word	0x23204f49
    6490:	6f6e2033 	.word	0x6f6e2033
    6494:	72702074 	.word	0x72702074
    6498:	6e657365 	.word	0x6e657365
    649c:	54202e74 	.word	0x54202e74
    64a0:	73747365 	.word	0x73747365
    64a4:	696b7320 	.word	0x696b7320
    64a8:	64657070 	.word	0x64657070
    64ac:	0000002e 	.word	0x0000002e
    64b0:	5047202d 	.word	0x5047202d
    64b4:	23204f49 	.word	0x23204f49
    64b8:	6f6e2034 	.word	0x6f6e2034
    64bc:	72702074 	.word	0x72702074
    64c0:	6e657365 	.word	0x6e657365
    64c4:	54202e74 	.word	0x54202e74
    64c8:	73747365 	.word	0x73747365
    64cc:	696b7320 	.word	0x696b7320
    64d0:	64657070 	.word	0x64657070
    64d4:	0000002e 	.word	0x0000002e
    64d8:	5047202d 	.word	0x5047202d
    64dc:	23204f49 	.word	0x23204f49
    64e0:	6f6e2035 	.word	0x6f6e2035
    64e4:	72702074 	.word	0x72702074
    64e8:	6e657365 	.word	0x6e657365
    64ec:	54202e74 	.word	0x54202e74
    64f0:	73747365 	.word	0x73747365
    64f4:	696b7320 	.word	0x696b7320
    64f8:	64657070 	.word	0x64657070
    64fc:	0000002e 	.word	0x0000002e
    6500:	202a2a0a 	.word	0x202a2a0a
    6504:	54534554 	.word	0x54534554
    6508:	53415020 	.word	0x53415020
    650c:	20444553 	.word	0x20444553
    6510:	00002a2a 	.word	0x00002a2a
    6514:	202a2a0a 	.word	0x202a2a0a
    6518:	54534554 	.word	0x54534554
    651c:	49414620 	.word	0x49414620
    6520:	2044454c 	.word	0x2044454c
    6524:	202c2a2a 	.word	0x202c2a2a
    6528:	6f727245 	.word	0x6f727245
    652c:	6f632072 	.word	0x6f632072
    6530:	3d206564 	.word	0x3d206564
    6534:	78302820 	.word	0x78302820
    6538:	0a297825 	.word	0x0a297825
    653c:	00000000 	.word	0x00000000
    6540:	4f525245 	.word	0x4f525245
    6544:	203a2052 	.word	0x203a2052
    6548:	78656e55 	.word	0x78656e55
    654c:	74636570 	.word	0x74636570
    6550:	47206465 	.word	0x47206465
    6554:	204f4950 	.word	0x204f4950
    6558:	6e692030 	.word	0x6e692030
    655c:	72726574 	.word	0x72726574
    6560:	20747075 	.word	0x20747075
    6564:	7563636f 	.word	0x7563636f
    6568:	64657272 	.word	0x64657272
    656c:	00000a2e 	.word	0x00000a2e
    6570:	4f525245 	.word	0x4f525245
    6574:	203a2052 	.word	0x203a2052
    6578:	78656e55 	.word	0x78656e55
    657c:	74636570 	.word	0x74636570
    6580:	47206465 	.word	0x47206465
    6584:	204f4950 	.word	0x204f4950
    6588:	6e692031 	.word	0x6e692031
    658c:	72726574 	.word	0x72726574
    6590:	20747075 	.word	0x20747075
    6594:	7563636f 	.word	0x7563636f
    6598:	64657272 	.word	0x64657272
    659c:	00000a2e 	.word	0x00000a2e
    65a0:	4f525245 	.word	0x4f525245
    65a4:	203a2052 	.word	0x203a2052
    65a8:	78656e55 	.word	0x78656e55
    65ac:	74636570 	.word	0x74636570
    65b0:	47206465 	.word	0x47206465
    65b4:	204f4950 	.word	0x204f4950
    65b8:	6e692032 	.word	0x6e692032
    65bc:	72726574 	.word	0x72726574
    65c0:	20747075 	.word	0x20747075
    65c4:	7563636f 	.word	0x7563636f
    65c8:	64657272 	.word	0x64657272
    65cc:	00000a2e 	.word	0x00000a2e
    65d0:	4f525245 	.word	0x4f525245
    65d4:	203a2052 	.word	0x203a2052
    65d8:	78656e55 	.word	0x78656e55
    65dc:	74636570 	.word	0x74636570
    65e0:	47206465 	.word	0x47206465
    65e4:	204f4950 	.word	0x204f4950
    65e8:	6e692033 	.word	0x6e692033
    65ec:	72726574 	.word	0x72726574
    65f0:	20747075 	.word	0x20747075
    65f4:	7563636f 	.word	0x7563636f
    65f8:	64657272 	.word	0x64657272
    65fc:	00000a2e 	.word	0x00000a2e

00006600 <_global_impure_ptr>:
    6600:	20000008                                ... 

00006604 <__sf_fake_stderr>:
	...

00006624 <__sf_fake_stdin>:
	...

00006644 <__sf_fake_stdout>:
	...
    6664:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6674:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6684:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6694:	                                         ef.
