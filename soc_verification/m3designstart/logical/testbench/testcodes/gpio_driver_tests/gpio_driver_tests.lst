
gpio_driver_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	00000a0d 	.word	0x00000a0d
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fcc9 	bl	ae0 <main>
    bl    exit
     14e:	f001 fa39 	bl	15c4 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00002d97 	.word	0x00002d97
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	2000006c 	.word	0x2000006c
    ldr r1, =__bss_start__
     160:	2000006c 	.word	0x2000006c
    ldr r2, =__bss_end__
     164:	200000c4 	.word	0x200000c4
    ldr     r0,=SystemInit
     168:	000015b5 	.word	0x000015b5

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <RTC_Handler+0x2>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     1f0:	6001      	str	r1, [r0, #0]
     1f2:	f3bf 8f4f 	dsb	sy
     1f6:	4770      	bx	lr

000001f8 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     1f8:	b406      	push	{r1, r2}
     1fa:	6801      	ldr	r1, [r0, #0]
     1fc:	f3bf 8f4f 	dsb	sy
     200:	0008      	movs	r0, r1
     202:	bc06      	pop	{r1, r2}
     204:	4770      	bx	lr
     206:	bf00      	nop

00000208 <gpio0_id_check>:
*/
int gpio0_id_check(void)
{
unsigned char gpio_id;

  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     208:	4a09      	ldr	r2, [pc, #36]	; (230 <gpio0_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     20a:	4b0a      	ldr	r3, [pc, #40]	; (234 <gpio0_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     20c:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     20e:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     210:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     212:	2b20      	cmp	r3, #32
     214:	d001      	beq.n	21a <gpio0_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     216:	2001      	movs	r0, #1
  else
    return 0;
}
     218:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     21a:	4b07      	ldr	r3, [pc, #28]	; (238 <gpio0_id_check+0x30>)
     21c:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     21e:	2bb8      	cmp	r3, #184	; 0xb8
     220:	d1f9      	bne.n	216 <gpio0_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     222:	f000 0007 	and.w	r0, r0, #7
     226:	3803      	subs	r0, #3
     228:	bf18      	it	ne
     22a:	2001      	movne	r0, #1
     22c:	4770      	bx	lr
     22e:	bf00      	nop
     230:	40010fe8 	.word	0x40010fe8
     234:	40010fe0 	.word	0x40010fe0
     238:	40010fe4 	.word	0x40010fe4

0000023c <GPIO_OPEN>:
    - else test passed for specified pin
    - if the OUTENABLE register is cleared then the test is classed as passed
    */

int GPIO_OPEN(void)       /*output enable function*/
{
     23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int err_code = 0;
  uint32_t i = 0;
  uint32_t mask = 0;

  puts("Stage 1 - GPIO Output Enable Test\n");
     240:	483e      	ldr	r0, [pc, #248]	; (33c <GPIO_OPEN+0x100>)
     242:	f001 fa4f 	bl	16e4 <puts>

  puts("- Stage 1a - Set GPIO Output Enable\n");
     246:	483e      	ldr	r0, [pc, #248]	; (340 <GPIO_OPEN+0x104>)
     248:	f001 fa4c 	bl	16e4 <puts>
  the actual I/O port status is determined by external pull up so it is
  0xFFFF at starting.  By enabling output enable bit by bit,
  the read back value of I/O port data become 0xFFFE, 0xFFFC, 0xFFF8, etc.
  */

  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;     /* set data on all pins to logic 0 for the pull up resistor*/
     24c:	2200      	movs	r2, #0
     24e:	4b3d      	ldr	r3, [pc, #244]	; (344 <GPIO_OPEN+0x108>)
  uint32_t mask = 0;
     250:	4616      	mov	r6, r2
  int err_code = 0;
     252:	4614      	mov	r4, r2

    /* enable every pin starting at pin0 to pin15 while keeping the previous ones enabled */
    /* so that the transition of the output enable register is as follows: 0000 -> 0001 -> 0011 -> 0111 -> 1111 */

    mask |= i; /* mask is the expected value of OUTENABLE */
    CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, i);    /* set specified bit in out enable register */
     254:	4698      	mov	r8, r3
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;     /* set data on all pins to logic 0 for the pull up resistor*/
     256:	f04f 0910 	mov.w	r9, #16
  for(i = 1; i < 65536; i <<= 1){
     25a:	2701      	movs	r7, #1
     25c:	4d3a      	ldr	r5, [pc, #232]	; (348 <GPIO_OPEN+0x10c>)
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;     /* set data on all pins to logic 0 for the pull up resistor*/
     25e:	605a      	str	r2, [r3, #4]
    CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, i);    /* set specified bit in out enable register */
     260:	4639      	mov	r1, r7
     262:	4640      	mov	r0, r8
     264:	f000 fd4c 	bl	d00 <CM3DS_MPS2_gpio_SetOutEnable>

    if(CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0) != mask) err_code += 1;   /*check if the output enable register is not the*/
     268:	4640      	mov	r0, r8
     26a:	f000 fd4d 	bl	d08 <CM3DS_MPS2_gpio_GetOutEnable>
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & (~mask) & datamask)) err_code += 1; /*same as the mask i.e. set up to and including*/
     26e:	f8d8 2000 	ldr.w	r2, [r8]
     272:	6829      	ldr	r1, [r5, #0]
     274:	682b      	ldr	r3, [r5, #0]
    mask |= i; /* mask is the expected value of OUTENABLE */
     276:	433e      	orrs	r6, r7
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & (~mask) & datamask)) err_code += 1; /*same as the mask i.e. set up to and including*/
     278:	b29b      	uxth	r3, r3
    if(CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0) != mask) err_code += 1;   /*check if the output enable register is not the*/
     27a:	42b0      	cmp	r0, r6
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & (~mask) & datamask)) err_code += 1; /*same as the mask i.e. set up to and including*/
     27c:	ea02 0201 	and.w	r2, r2, r1
     280:	ea23 0306 	bic.w	r3, r3, r6
    if(CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0) != mask) err_code += 1;   /*check if the output enable register is not the*/
     284:	bf18      	it	ne
     286:	3401      	addne	r4, #1
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & (~mask) & datamask)) err_code += 1; /*same as the mask i.e. set up to and including*/
     288:	429a      	cmp	r2, r3
     28a:	bf18      	it	ne
     28c:	3401      	addne	r4, #1
  for(i = 1; i < 65536; i <<= 1){
     28e:	f1b9 0901 	subs.w	r9, r9, #1
     292:	ea4f 0747 	mov.w	r7, r7, lsl #1
     296:	d1e3      	bne.n	260 <GPIO_OPEN+0x24>
  }                                                                     /*the bit being set then increment error code */

  /* OUTENABLE should be 0xFFFF */
  printf("Output Enable Status: 0x%x\n\n", CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0));
     298:	482a      	ldr	r0, [pc, #168]	; (344 <GPIO_OPEN+0x108>)
     29a:	f000 fd35 	bl	d08 <CM3DS_MPS2_gpio_GetOutEnable>
     29e:	4601      	mov	r1, r0
     2a0:	482a      	ldr	r0, [pc, #168]	; (34c <GPIO_OPEN+0x110>)
     2a2:	f001 f9ab 	bl	15fc <iprintf>
  mask = 0;

  if(err_code) printf("Set Enable Test Failed, Error code: (0x%x\n)", err_code);
     2a6:	2c00      	cmp	r4, #0
     2a8:	d03d      	beq.n	326 <GPIO_OPEN+0xea>
     2aa:	4621      	mov	r1, r4
     2ac:	4828      	ldr	r0, [pc, #160]	; (350 <GPIO_OPEN+0x114>)
     2ae:	f001 f9a5 	bl	15fc <iprintf>
  else puts("Set Enable Test Passed\n");

  puts("- Stage 1b - Clear GPIO Output Enable\n");
     2b2:	4828      	ldr	r0, [pc, #160]	; (354 <GPIO_OPEN+0x118>)
     2b4:	f001 fa16 	bl	16e4 <puts>
     2b8:	f04f 0a10 	mov.w	sl, #16
  mask = 0;
     2bc:	f04f 0900 	mov.w	r9, #0

  for(i = 1; i < 65536; i <<= 1){
     2c0:	2601      	movs	r6, #1
    /* disable every pin starting at pin0 to pin15 while keeping the previously disabled ones disabled */
    /* and previously enabled ones enabled starting at all enabled so that the transition of the output*/
    /* enable register is as follows: 1111 -> 1110 -> 1100 -> 1000 -> 0000 */

    mask |= i;
    CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO0, i);  /*clear specified bit in out enable register*/
     2c2:	4f20      	ldr	r7, [pc, #128]	; (344 <GPIO_OPEN+0x108>)

    if(~(CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0) | 0xFFFF0000) != mask)  /*check if the output enable register is not the*/
     2c4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 364 <GPIO_OPEN+0x128>
    CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO0, i);  /*clear specified bit in out enable register*/
     2c8:	4631      	mov	r1, r6
     2ca:	4638      	mov	r0, r7
     2cc:	f000 fd1a 	bl	d04 <CM3DS_MPS2_gpio_ClrOutEnable>
    if(~(CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0) | 0xFFFF0000) != mask)  /*check if the output enable register is not the*/
     2d0:	4638      	mov	r0, r7
     2d2:	f000 fd19 	bl	d08 <CM3DS_MPS2_gpio_GetOutEnable>
     2d6:	ea40 0008 	orr.w	r0, r0, r8
     2da:	43c0      	mvns	r0, r0
      err_code += 1;                                                    /*same as the mask i.e. clear up to and including*/
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & mask & datamask))    /*the bit being set then increment error code */
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	6829      	ldr	r1, [r5, #0]
     2e0:	682b      	ldr	r3, [r5, #0]
    mask |= i;
     2e2:	ea49 0906 	orr.w	r9, r9, r6
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & mask & datamask))    /*the bit being set then increment error code */
     2e6:	b29b      	uxth	r3, r3
    if(~(CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0) | 0xFFFF0000) != mask)  /*check if the output enable register is not the*/
     2e8:	4548      	cmp	r0, r9
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & mask & datamask))    /*the bit being set then increment error code */
     2ea:	ea02 0201 	and.w	r2, r2, r1
     2ee:	ea03 0309 	and.w	r3, r3, r9
      err_code += 1;                                                    /*same as the mask i.e. clear up to and including*/
     2f2:	bf18      	it	ne
     2f4:	3401      	addne	r4, #1
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & mask & datamask))    /*the bit being set then increment error code */
     2f6:	429a      	cmp	r2, r3
      err_code += 1;
     2f8:	bf18      	it	ne
     2fa:	3401      	addne	r4, #1
  for(i = 1; i < 65536; i <<= 1){
     2fc:	f1ba 0a01 	subs.w	sl, sl, #1
     300:	ea4f 0646 	mov.w	r6, r6, lsl #1
     304:	d1e0      	bne.n	2c8 <GPIO_OPEN+0x8c>
  }

  printf("Output Enable Status: 0x%x\n\n", CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO0));
     306:	480f      	ldr	r0, [pc, #60]	; (344 <GPIO_OPEN+0x108>)
     308:	f000 fcfe 	bl	d08 <CM3DS_MPS2_gpio_GetOutEnable>
     30c:	4601      	mov	r1, r0
     30e:	480f      	ldr	r0, [pc, #60]	; (34c <GPIO_OPEN+0x110>)
     310:	f001 f974 	bl	15fc <iprintf>

  if(err_code) printf("Clear Output Enable Test Failed, Error code: (0x%x)\n", err_code);
     314:	b15c      	cbz	r4, 32e <GPIO_OPEN+0xf2>
     316:	4621      	mov	r1, r4
  else puts("Clear Output Enable Test Passed\n");

  if(!err_code) return 0;
  else return 1;
     318:	2401      	movs	r4, #1
  if(err_code) printf("Clear Output Enable Test Failed, Error code: (0x%x)\n", err_code);
     31a:	480f      	ldr	r0, [pc, #60]	; (358 <GPIO_OPEN+0x11c>)
     31c:	f001 f96e 	bl	15fc <iprintf>
}
     320:	4620      	mov	r0, r4
     322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else puts("Set Enable Test Passed\n");
     326:	480d      	ldr	r0, [pc, #52]	; (35c <GPIO_OPEN+0x120>)
     328:	f001 f9dc 	bl	16e4 <puts>
     32c:	e7c1      	b.n	2b2 <GPIO_OPEN+0x76>
  else puts("Clear Output Enable Test Passed\n");
     32e:	480c      	ldr	r0, [pc, #48]	; (360 <GPIO_OPEN+0x124>)
     330:	f001 f9d8 	bl	16e4 <puts>
}
     334:	4620      	mov	r0, r4
     336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     33a:	bf00      	nop
     33c:	000025d4 	.word	0x000025d4
     340:	000025f8 	.word	0x000025f8
     344:	40010000 	.word	0x40010000
     348:	20000000 	.word	0x20000000
     34c:	00002620 	.word	0x00002620
     350:	00002640 	.word	0x00002640
     354:	00002684 	.word	0x00002684
     358:	000026ac 	.word	0x000026ac
     35c:	0000266c 	.word	0x0000266c
     360:	000026e4 	.word	0x000026e4
     364:	ffff0000 	.word	0xffff0000

00000368 <GPIO_AltFuncEN>:
    - else test passed for specified pin
    - if the AltFunc register is set to 0x0 then the test is classed as passed
    */

int GPIO_AltFuncEN(void)
{
     368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int err_code = 0;
  uint32_t i = 0;
  uint32_t mask = 0;
     36c:	2500      	movs	r5, #0

  puts("Stage 2 - GPIO Alternative Function Enable Test\n");
     36e:	482f      	ldr	r0, [pc, #188]	; (42c <GPIO_AltFuncEN+0xc4>)
     370:	f001 f9b8 	bl	16e4 <puts>

  puts("- Stage 2a - Set GPIO Alternative Function Enable\n");
     374:	482e      	ldr	r0, [pc, #184]	; (430 <GPIO_AltFuncEN+0xc8>)
     376:	f001 f9b5 	bl	16e4 <puts>

  CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO0, 0xFFFF);         /* Clear alternate function on all GPIO Port 0 pins to zero */
     37a:	f64f 71ff 	movw	r1, #65535	; 0xffff
     37e:	482d      	ldr	r0, [pc, #180]	; (434 <GPIO_AltFuncEN+0xcc>)
  int err_code = 0;
     380:	462f      	mov	r7, r5
  CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO0, 0xFFFF);         /* Clear alternate function on all GPIO Port 0 pins to zero */
     382:	f000 fcc5 	bl	d10 <CM3DS_MPS2_gpio_ClrAltFunc>
     386:	2610      	movs	r6, #16

  for(i = 1; i < 65536; i <<= 1){
     388:	2401      	movs	r4, #1

  //Set alternate function on all GPIO Port 0 pins which have an alternate function
    mask |= i;
    CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO0, i);                     //set alternate function register for the specified bit
     38a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 434 <GPIO_AltFuncEN+0xcc>
     38e:	4621      	mov	r1, r4
     390:	4640      	mov	r0, r8
     392:	f000 fcbb 	bl	d0c <CM3DS_MPS2_gpio_SetAltFunc>
    if(CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO0) != (ALTMASK & mask)) /*check if the AltFunc register is not the same as the*/
     396:	4640      	mov	r0, r8
     398:	f000 fcbc 	bl	d14 <CM3DS_MPS2_gpio_GetAltFunc>
    mask |= i;
     39c:	4325      	orrs	r5, r4
    if(CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO0) != (ALTMASK & mask)) /*check if the AltFunc register is not the same as the*/
     39e:	b2ab      	uxth	r3, r5
     3a0:	4298      	cmp	r0, r3
      err_code += i;                                             /*AltFunc mask i.e. all pins which have one, up to and including*/
     3a2:	bf18      	it	ne
     3a4:	193f      	addne	r7, r7, r4
  for(i = 1; i < 65536; i <<= 1){
     3a6:	3e01      	subs	r6, #1
     3a8:	ea4f 0444 	mov.w	r4, r4, lsl #1
     3ac:	d1ef      	bne.n	38e <GPIO_AltFuncEN+0x26>
  }                                                              /*the bit being set then if not increment error code */

  printf("\nAlternate Function Enable Status: 0x%x\n\n", CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO0));
     3ae:	4821      	ldr	r0, [pc, #132]	; (434 <GPIO_AltFuncEN+0xcc>)
     3b0:	f000 fcb0 	bl	d14 <CM3DS_MPS2_gpio_GetAltFunc>
     3b4:	4601      	mov	r1, r0
     3b6:	4820      	ldr	r0, [pc, #128]	; (438 <GPIO_AltFuncEN+0xd0>)
     3b8:	f001 f920 	bl	15fc <iprintf>

  if(err_code) printf("Set Enable Test Failed, Error code: (0x%x\n)", err_code);
     3bc:	b367      	cbz	r7, 418 <GPIO_AltFuncEN+0xb0>
     3be:	4639      	mov	r1, r7
     3c0:	481e      	ldr	r0, [pc, #120]	; (43c <GPIO_AltFuncEN+0xd4>)
     3c2:	f001 f91b 	bl	15fc <iprintf>
  else puts("Set Enable Test Passed\n");    //if the port did not set the AltFunc as expected display error*/

  puts("- Stage 2b - Clear GPIO Alternative Function Enable\n");
     3c6:	481e      	ldr	r0, [pc, #120]	; (440 <GPIO_AltFuncEN+0xd8>)
     3c8:	f001 f98c 	bl	16e4 <puts>
     3cc:	2610      	movs	r6, #16

  mask = 0;
     3ce:	2500      	movs	r5, #0

  for(i = 1; i < 65536; i <<= 1){
     3d0:	2401      	movs	r4, #1

    mask |= i;

    /*clear alternate function register for the specified bit*/

    CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO0, i);
     3d2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 434 <GPIO_AltFuncEN+0xcc>
     3d6:	4621      	mov	r1, r4
     3d8:	4640      	mov	r0, r8
     3da:	f000 fc99 	bl	d10 <CM3DS_MPS2_gpio_ClrAltFunc>
    mask |= i;
     3de:	4325      	orrs	r5, r4

    if(CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO0) != (ALTMASK & ~mask)) /*check if the AltFunc register is not the same as the*/
     3e0:	4640      	mov	r0, r8
     3e2:	f000 fc97 	bl	d14 <CM3DS_MPS2_gpio_GetAltFunc>
     3e6:	43eb      	mvns	r3, r5
     3e8:	b29b      	uxth	r3, r3
     3ea:	4298      	cmp	r0, r3
      err_code += i;                                                         /*AltFunc mask i.e. all pins which have one, up to and including*/
     3ec:	bf18      	it	ne
     3ee:	193f      	addne	r7, r7, r4
  for(i = 1; i < 65536; i <<= 1){
     3f0:	3e01      	subs	r6, #1
     3f2:	ea4f 0444 	mov.w	r4, r4, lsl #1
     3f6:	d1ee      	bne.n	3d6 <GPIO_AltFuncEN+0x6e>
                                                                             /*the bit being set then if not increment error code */
  }

  printf("Alternate Function Enable Status: 0x%x\n\n", CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO0)); /*display Port's AltFunc Setting*/
     3f8:	480e      	ldr	r0, [pc, #56]	; (434 <GPIO_AltFuncEN+0xcc>)
     3fa:	f000 fc8b 	bl	d14 <CM3DS_MPS2_gpio_GetAltFunc>
     3fe:	4601      	mov	r1, r0
     400:	4810      	ldr	r0, [pc, #64]	; (444 <GPIO_AltFuncEN+0xdc>)
     402:	f001 f8fb 	bl	15fc <iprintf>

  if(err_code) printf("Clear Enable Test Failed, Error code: (0x%x)\n", err_code);
     406:	b15f      	cbz	r7, 420 <GPIO_AltFuncEN+0xb8>
     408:	4639      	mov	r1, r7
  else puts("Clear Enable Test Passed\n");  /*if the port did not clear the AltFunc as expected display error*/

  if(!err_code) return 0;
  else return 2;
     40a:	2702      	movs	r7, #2
  if(err_code) printf("Clear Enable Test Failed, Error code: (0x%x)\n", err_code);
     40c:	480e      	ldr	r0, [pc, #56]	; (448 <GPIO_AltFuncEN+0xe0>)
     40e:	f001 f8f5 	bl	15fc <iprintf>
}
     412:	4638      	mov	r0, r7
     414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else puts("Set Enable Test Passed\n");    //if the port did not set the AltFunc as expected display error*/
     418:	480c      	ldr	r0, [pc, #48]	; (44c <GPIO_AltFuncEN+0xe4>)
     41a:	f001 f963 	bl	16e4 <puts>
     41e:	e7d2      	b.n	3c6 <GPIO_AltFuncEN+0x5e>
  else puts("Clear Enable Test Passed\n");  /*if the port did not clear the AltFunc as expected display error*/
     420:	480b      	ldr	r0, [pc, #44]	; (450 <GPIO_AltFuncEN+0xe8>)
     422:	f001 f95f 	bl	16e4 <puts>
}
     426:	4638      	mov	r0, r7
     428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     42c:	00002708 	.word	0x00002708
     430:	0000273c 	.word	0x0000273c
     434:	40010000 	.word	0x40010000
     438:	00002770 	.word	0x00002770
     43c:	00002640 	.word	0x00002640
     440:	0000279c 	.word	0x0000279c
     444:	000027d4 	.word	0x000027d4
     448:	00002800 	.word	0x00002800
     44c:	0000266c 	.word	0x0000266c
     450:	00002830 	.word	0x00002830

00000454 <GPIO_IRQ>:
    - if test on each pin passes the test as a whole passes and return 0 to main
    - else return an error
    */

int GPIO_IRQ(void)
{
     454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  puts("Stage 3 - GPIO Pin IRQ Test\n");

  puts("- Stage 3a - GPIO High Level IRQ Test\n");

  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;                         //set data out to 0 to test high level IRQ
     458:	2400      	movs	r4, #0
{
     45a:	b083      	sub	sp, #12
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;                         //set data out to 0 to test high level IRQ
     45c:	4dc8      	ldr	r5, [pc, #800]	; (780 <GPIO_IRQ+0x32c>)
  puts("Stage 3 - GPIO Pin IRQ Test\n");
     45e:	48c9      	ldr	r0, [pc, #804]	; (784 <GPIO_IRQ+0x330>)
     460:	f001 f940 	bl	16e4 <puts>
  puts("- Stage 3a - GPIO High Level IRQ Test\n");
     464:	48c8      	ldr	r0, [pc, #800]	; (788 <GPIO_IRQ+0x334>)
     466:	f001 f93d 	bl	16e4 <puts>
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;                         //set data out to 0 to test high level IRQ
     46a:	606c      	str	r4, [r5, #4]
  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0xFFFF);         //set output enable to output on all ports of GPIO 0
     46c:	4628      	mov	r0, r5
     46e:	f64f 71ff 	movw	r1, #65535	; 0xffff
     472:	f000 fc45 	bl	d00 <CM3DS_MPS2_gpio_SetOutEnable>

  for(i = 0; i < 16; i++)
  {
    CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO0, i);         //set all pins to high level interrupt and clear any
     476:	4621      	mov	r1, r4
     478:	4628      	mov	r0, r5
     47a:	f000 fc5f 	bl	d3c <CM3DS_MPS2_gpio_SetIntHighLevel>
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, i);                //outstanding set interrupts
     47e:	4621      	mov	r1, r4
     480:	4628      	mov	r0, r5
  for(i = 0; i < 16; i++)
     482:	3401      	adds	r4, #1
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, i);                //outstanding set interrupts
     484:	f000 fc48 	bl	d18 <CM3DS_MPS2_gpio_IntClear>
  for(i = 0; i < 16; i++)
     488:	2c10      	cmp	r4, #16
     48a:	d1f4      	bne.n	476 <GPIO_IRQ+0x22>
  int irq_counter = 0;
     48c:	f04f 0a00 	mov.w	sl, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     490:	2240      	movs	r2, #64	; 0x40
     492:	4bbe      	ldr	r3, [pc, #760]	; (78c <GPIO_IRQ+0x338>)

  NVIC_ClearPendingIRQ(PORT0_ALL_IRQn);                   //clear all global NVIC PORT0 pending interrupts

  NVIC_EnableIRQ(PORT0_ALL_IRQn);                         //enable NVIC interrupts on PORT0

  for(i = 0; i < 16; i++){
     494:	4654      	mov	r4, sl
     496:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  uint32_t err_code = 0, return_val = 0;
     49a:	4657      	mov	r7, sl
    if(((1<<i) & datamask) != 0) {
     49c:	f04f 0b01 	mov.w	fp, #1
     4a0:	4ebb      	ldr	r6, [pc, #748]	; (790 <GPIO_IRQ+0x33c>)
     4a2:	f8df 8310 	ldr.w	r8, [pc, #784]	; 7b4 <GPIO_IRQ+0x360>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     4a6:	601a      	str	r2, [r3, #0]
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);            //enable interrupt for the pin to be tested
     4a8:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 780 <GPIO_IRQ+0x32c>
     4ac:	e002      	b.n	4b4 <GPIO_IRQ+0x60>
  for(i = 0; i < 16; i++){
     4ae:	3401      	adds	r4, #1
     4b0:	2c10      	cmp	r4, #16
     4b2:	d02b      	beq.n	50c <GPIO_IRQ+0xb8>
    if(((1<<i) & datamask) != 0) {
     4b4:	6833      	ldr	r3, [r6, #0]
     4b6:	fa0b f504 	lsl.w	r5, fp, r4
     4ba:	421d      	tst	r5, r3
     4bc:	d0f7      	beq.n	4ae <GPIO_IRQ+0x5a>
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);            //enable interrupt for the pin to be tested
     4be:	4621      	mov	r1, r4
     4c0:	48af      	ldr	r0, [pc, #700]	; (780 <GPIO_IRQ+0x32c>)
     4c2:	f000 fc2f 	bl	d24 <CM3DS_MPS2_gpio_SetIntEnable>

      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 << (2*i));//check to see if the interrupt enable register is
     4c6:	f8d9 3020 	ldr.w	r3, [r9, #32]
     4ca:	0062      	lsls	r2, r4, #1
     4cc:	421d      	tst	r5, r3
      N = i;

      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i);                //set data out on pin0 high to cause a high level interrupt
                                                            //repeat for all other pins 0001 -> 0010 -> 0100 -> 1000

      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i );           /*clear interrupt enable*/
     4ce:	4621      	mov	r1, r4
      N = i;
     4d0:	f8c8 4000 	str.w	r4, [r8]
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i );           /*clear interrupt enable*/
     4d4:	48aa      	ldr	r0, [pc, #680]	; (780 <GPIO_IRQ+0x32c>)
      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i);                //set data out on pin0 high to cause a high level interrupt
     4d6:	f8c9 5004 	str.w	r5, [r9, #4]
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 << (2*i));//check to see if the interrupt enable register is
     4da:	bf08      	it	eq
     4dc:	fa0b f702 	lsleq.w	r7, fp, r2
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i );           /*clear interrupt enable*/
     4e0:	f000 fc26 	bl	d30 <CM3DS_MPS2_gpio_ClrIntEnable>

      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i)) err_code = (1 << (2*i +1));//check to see if the interrupt enable register is
     4e4:	f8d9 1020 	ldr.w	r1, [r9, #32]
     4e8:	0063      	lsls	r3, r4, #1
     4ea:	43a9      	bics	r1, r5
                                                                          //clear for the pin which it should have just been

      /* check to see whether intstatus, for the specified pin, is 2, which corresponds to a high level interrupt */

      if(intstatus[i] == 2) irq_counter++;
     4ec:	eb08 0284 	add.w	r2, r8, r4, lsl #2
      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i)) err_code = (1 << (2*i +1));//check to see if the interrupt enable register is
     4f0:	bf18      	it	ne
     4f2:	1c5f      	addne	r7, r3, #1
      if(intstatus[i] == 2) irq_counter++;
     4f4:	6853      	ldr	r3, [r2, #4]
      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i)) err_code = (1 << (2*i +1));//check to see if the interrupt enable register is
     4f6:	bf18      	it	ne
     4f8:	fa0b f707 	lslne.w	r7, fp, r7
  for(i = 0; i < 16; i++){
     4fc:	3401      	adds	r4, #1
      if(intstatus[i] == 2) irq_counter++;
     4fe:	2b02      	cmp	r3, #2
     500:	bf0c      	ite	eq
     502:	f10a 0a01 	addeq.w	sl, sl, #1
      else err_code |= (1 << i);
     506:	432f      	orrne	r7, r5
  for(i = 0; i < 16; i++){
     508:	2c10      	cmp	r4, #16
     50a:	d1d3      	bne.n	4b4 <GPIO_IRQ+0x60>
    }
  }

  if((irq_counter == 14) && (err_code == 0)) puts("High Level IRQ Tests Passed Successfully\n");
     50c:	f1ba 0f0e 	cmp.w	sl, #14
     510:	d102      	bne.n	518 <GPIO_IRQ+0xc4>
     512:	2f00      	cmp	r7, #0
     514:	f000 8150 	beq.w	7b8 <GPIO_IRQ+0x364>
  else{
    printf("\nHigh Level IRQ Tests Failed, Error Code: (0x%x)\n", err_code);
     518:	4639      	mov	r1, r7
     51a:	489e      	ldr	r0, [pc, #632]	; (794 <GPIO_IRQ+0x340>)
     51c:	f001 f86e 	bl	15fc <iprintf>
     520:	2308      	movs	r3, #8
     522:	9300      	str	r3, [sp, #0]
    err_code = 0;       /*if the port did not have 1 HL IRQ for each pin as expected then display error*/
    return_val = 8;
  }

  puts("- Stage 3b - GPIO Rising Edge IRQ Test\n");
     524:	489c      	ldr	r0, [pc, #624]	; (798 <GPIO_IRQ+0x344>)
     526:	f001 f8dd 	bl	16e4 <puts>

  irq_counter = 0;

  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;   //set data out to 0 to test rising edge IRQ
     52a:	2200      	movs	r2, #0
     52c:	4b94      	ldr	r3, [pc, #592]	; (780 <GPIO_IRQ+0x32c>)

  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO0, i); //set all pins to rising edge interrupts
     52e:	4614      	mov	r4, r2
     530:	461d      	mov	r5, r3
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;   //set data out to 0 to test rising edge IRQ
     532:	605a      	str	r2, [r3, #4]
  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO0, i); //set all pins to rising edge interrupts
     534:	4621      	mov	r1, r4
     536:	4628      	mov	r0, r5
     538:	3401      	adds	r4, #1
     53a:	f000 fc05 	bl	d48 <CM3DS_MPS2_gpio_SetIntRisingEdge>
     53e:	2c10      	cmp	r4, #16
     540:	d1f8      	bne.n	534 <GPIO_IRQ+0xe0>
  irq_counter = 0;
     542:	f04f 0a00 	mov.w	sl, #0

  for(i = 0; i < 16; i++){
    if(((1<<i) & datamask) != 0) {
     546:	f04f 0b01 	mov.w	fp, #1
  for(i = 0; i < 16; i++){
     54a:	4654      	mov	r4, sl
     54c:	46d1      	mov	r9, sl
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);    //enable interrupts on specified pin then set data out to 1
     54e:	4f8c      	ldr	r7, [pc, #560]	; (780 <GPIO_IRQ+0x32c>)
     550:	e002      	b.n	558 <GPIO_IRQ+0x104>
  for(i = 0; i < 16; i++){
     552:	3401      	adds	r4, #1
     554:	2c10      	cmp	r4, #16
     556:	d02e      	beq.n	5b6 <GPIO_IRQ+0x162>
    if(((1<<i) & datamask) != 0) {
     558:	6833      	ldr	r3, [r6, #0]
     55a:	fa0b f504 	lsl.w	r5, fp, r4
     55e:	421d      	tst	r5, r3
     560:	d0f7      	beq.n	552 <GPIO_IRQ+0xfe>
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);    //enable interrupts on specified pin then set data out to 1
     562:	4621      	mov	r1, r4
     564:	4886      	ldr	r0, [pc, #536]	; (780 <GPIO_IRQ+0x32c>)
     566:	f000 fbdd 	bl	d24 <CM3DS_MPS2_gpio_SetIntEnable>
                                                  //for pin 0 then repeat for all subsequent pins whilst still

      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 <<(2*i));//check to see if the interrupt enable register is
     56a:	6a3b      	ldr	r3, [r7, #32]
                                                                      //set for the pin which it should have just been
      N = i;
     56c:	f8c8 4000 	str.w	r4, [r8]
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 <<(2*i));//check to see if the interrupt enable register is
     570:	421d      	tst	r5, r3

      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i) | CM3DS_MPS2_GPIO0->DATA; //keeping all other pins high 0000->0001->0011->0111->1111
     572:	683b      	ldr	r3, [r7, #0]
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 <<(2*i));//check to see if the interrupt enable register is
     574:	ea4f 0244 	mov.w	r2, r4, lsl #1
      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i) | CM3DS_MPS2_GPIO0->DATA; //keeping all other pins high 0000->0001->0011->0111->1111
     578:	ea43 0305 	orr.w	r3, r3, r5

      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);                     //clear interrupt enable for specified pin
     57c:	4621      	mov	r1, r4
      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i) | CM3DS_MPS2_GPIO0->DATA; //keeping all other pins high 0000->0001->0011->0111->1111
     57e:	607b      	str	r3, [r7, #4]
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);                     //clear interrupt enable for specified pin
     580:	487f      	ldr	r0, [pc, #508]	; (780 <GPIO_IRQ+0x32c>)
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 <<(2*i));//check to see if the interrupt enable register is
     582:	bf08      	it	eq
     584:	fa0b f902 	lsleq.w	r9, fp, r2
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);                     //clear interrupt enable for specified pin
     588:	f000 fbd2 	bl	d30 <CM3DS_MPS2_gpio_ClrIntEnable>

      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i)) err_code = (1 <<(2*i + 1));//check to see if the interrupt enable register is
     58c:	6a39      	ldr	r1, [r7, #32]
     58e:	0063      	lsls	r3, r4, #1
     590:	43a9      	bics	r1, r5
                                                                          //clear for the pin which it should have just been

      /* check to see whether intstatus, for the specified pin, is 1, which corresponds to a rising edge interrupt */

      if(intstatus[i] == 1) irq_counter++;
     592:	eb08 0284 	add.w	r2, r8, r4, lsl #2
      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i)) err_code = (1 <<(2*i + 1));//check to see if the interrupt enable register is
     596:	bf18      	it	ne
     598:	f103 0901 	addne.w	r9, r3, #1
      if(intstatus[i] == 1) irq_counter++;
     59c:	6853      	ldr	r3, [r2, #4]
      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i)) err_code = (1 <<(2*i + 1));//check to see if the interrupt enable register is
     59e:	bf18      	it	ne
     5a0:	fa0b f909 	lslne.w	r9, fp, r9
  for(i = 0; i < 16; i++){
     5a4:	3401      	adds	r4, #1
      if(intstatus[i] == 1) irq_counter++;
     5a6:	2b01      	cmp	r3, #1
     5a8:	bf0c      	ite	eq
     5aa:	f10a 0a01 	addeq.w	sl, sl, #1
      else err_code |= (1 << i);
     5ae:	ea49 0905 	orrne.w	r9, r9, r5
  for(i = 0; i < 16; i++){
     5b2:	2c10      	cmp	r4, #16
     5b4:	d1d0      	bne.n	558 <GPIO_IRQ+0x104>
    }
  }

  if((irq_counter == 14) && (err_code == 0)) puts("Rising Edge IRQ Tests Passed Successfully\n");
     5b6:	f1ba 0f0e 	cmp.w	sl, #14
     5ba:	d103      	bne.n	5c4 <GPIO_IRQ+0x170>
     5bc:	f1b9 0f00 	cmp.w	r9, #0
     5c0:	f000 80ff 	beq.w	7c2 <GPIO_IRQ+0x36e>
  else{
    printf("\nRising Edge IRQ Tests Failed, Error Code: (0x%x)\n", err_code);
     5c4:	4649      	mov	r1, r9
     5c6:	4875      	ldr	r0, [pc, #468]	; (79c <GPIO_IRQ+0x348>)
     5c8:	f001 f818 	bl	15fc <iprintf>
    err_code = 0;     /*if the port did not have 1 RE IRQ for each pin as expected then display error*/
    return_val = 16;
  }

  puts("- Stage 3c - GPIO Falling Edge IRQ Test\n");
     5cc:	4874      	ldr	r0, [pc, #464]	; (7a0 <GPIO_IRQ+0x34c>)
     5ce:	f001 f889 	bl	16e4 <puts>

  irq_counter = 0;

  CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;
     5d2:	4b6b      	ldr	r3, [pc, #428]	; (780 <GPIO_IRQ+0x32c>)
     5d4:	f64f 72ff 	movw	r2, #65535	; 0xffff

  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO0, i);   //set all pins to falling edge interrupts
     5d8:	461f      	mov	r7, r3
     5da:	2500      	movs	r5, #0
  CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;
     5dc:	605a      	str	r2, [r3, #4]
  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO0, i);   //set all pins to falling edge interrupts
     5de:	4629      	mov	r1, r5
     5e0:	4638      	mov	r0, r7
     5e2:	3501      	adds	r5, #1
     5e4:	f000 fbbc 	bl	d60 <CM3DS_MPS2_gpio_SetIntFallingEdge>
     5e8:	2d10      	cmp	r5, #16
     5ea:	d1f8      	bne.n	5de <GPIO_IRQ+0x18a>
  irq_counter = 0;
     5ec:	2300      	movs	r3, #0

  for(i = 0; i < 16; i++){
    /* Counter change from 0->1->2 ...15 */
    if(((1<<i) & datamask) != 0) {
     5ee:	f04f 0a01 	mov.w	sl, #1
  irq_counter = 0;
     5f2:	9300      	str	r3, [sp, #0]
  for(i = 0; i < 16; i++){
     5f4:	461d      	mov	r5, r3
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);    //enable interrupts on specified pin then set data out to
     5f6:	f8df b188 	ldr.w	fp, [pc, #392]	; 780 <GPIO_IRQ+0x32c>
     5fa:	4699      	mov	r9, r3
     5fc:	9401      	str	r4, [sp, #4]
     5fe:	e002      	b.n	606 <GPIO_IRQ+0x1b2>
  for(i = 0; i < 16; i++){
     600:	3501      	adds	r5, #1
     602:	2d10      	cmp	r5, #16
     604:	d036      	beq.n	674 <GPIO_IRQ+0x220>
    if(((1<<i) & datamask) != 0) {
     606:	6831      	ldr	r1, [r6, #0]
     608:	fa0a f405 	lsl.w	r4, sl, r5
     60c:	420c      	tst	r4, r1
     60e:	d0f7      	beq.n	600 <GPIO_IRQ+0x1ac>
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i)))    //check to see if the interrupt enable register is
        err_code = (1 << 2*i);                      //set for the pin which it should have just been

      N = i;

      CM3DS_MPS2_GPIO0->DATAOUT = (CM3DS_MPS2_GPIO0->DATA  & ~(1 << i));
     610:	43e7      	mvns	r7, r4
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);    //enable interrupts on specified pin then set data out to
     612:	4629      	mov	r1, r5
     614:	485a      	ldr	r0, [pc, #360]	; (780 <GPIO_IRQ+0x32c>)
     616:	f000 fb85 	bl	d24 <CM3DS_MPS2_gpio_SetIntEnable>
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i)))    //check to see if the interrupt enable register is
     61a:	f8db 3020 	ldr.w	r3, [fp, #32]
      N = i;
     61e:	f8c8 5000 	str.w	r5, [r8]
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i)))    //check to see if the interrupt enable register is
     622:	421c      	tst	r4, r3
      CM3DS_MPS2_GPIO0->DATAOUT = (CM3DS_MPS2_GPIO0->DATA  & ~(1 << i));
     624:	f8db 3000 	ldr.w	r3, [fp]

      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);    //disable interrupts on specified pin
     628:	4629      	mov	r1, r5
      CM3DS_MPS2_GPIO0->DATAOUT = (CM3DS_MPS2_GPIO0->DATA  & ~(1 << i));
     62a:	ea03 0307 	and.w	r3, r3, r7
        err_code = (1 << 2*i);                      //set for the pin which it should have just been
     62e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
      CM3DS_MPS2_GPIO0->DATAOUT = (CM3DS_MPS2_GPIO0->DATA  & ~(1 << i));
     632:	f8cb 3004 	str.w	r3, [fp, #4]
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);    //disable interrupts on specified pin
     636:	4852      	ldr	r0, [pc, #328]	; (780 <GPIO_IRQ+0x32c>)
        err_code = (1 << 2*i);                      //set for the pin which it should have just been
     638:	bf08      	it	eq
     63a:	fa0a f90e 	lsleq.w	r9, sl, lr
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);    //disable interrupts on specified pin
     63e:	f000 fb77 	bl	d30 <CM3DS_MPS2_gpio_ClrIntEnable>

      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i))      //check to see if the interrupt enable register is
     642:	f8db 3020 	ldr.w	r3, [fp, #32]
        err_code = (1 << (2*i + 1));                //clear for the pin which it should have just been
     646:	0069      	lsls	r1, r5, #1
      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i))      //check to see if the interrupt enable register is
     648:	421f      	tst	r7, r3

      /* check to see whether intstatus, for the specified pin, is 3, which corresponds to a falling edge interrupt */

      if(intstatus[i] == 3) irq_counter++;
     64a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
        err_code = (1 << (2*i + 1));                //clear for the pin which it should have just been
     64e:	bf18      	it	ne
     650:	f101 0901 	addne.w	r9, r1, #1
      if(intstatus[i] == 3) irq_counter++;
     654:	6841      	ldr	r1, [r0, #4]
        err_code = (1 << (2*i + 1));                //clear for the pin which it should have just been
     656:	bf18      	it	ne
     658:	fa0a f909 	lslne.w	r9, sl, r9
      if(intstatus[i] == 3) irq_counter++;
     65c:	2903      	cmp	r1, #3
     65e:	bf08      	it	eq
     660:	9b00      	ldreq	r3, [sp, #0]
  for(i = 0; i < 16; i++){
     662:	f105 0501 	add.w	r5, r5, #1
      if(intstatus[i] == 3) irq_counter++;
     666:	bf06      	itte	eq
     668:	3301      	addeq	r3, #1
     66a:	9300      	streq	r3, [sp, #0]
      else err_code |= (1 << i);
     66c:	ea49 0904 	orrne.w	r9, r9, r4
  for(i = 0; i < 16; i++){
     670:	2d10      	cmp	r5, #16
     672:	d1c8      	bne.n	606 <GPIO_IRQ+0x1b2>
    }
  }

  if((irq_counter == 14) && (err_code == 0)) puts("Falling Edge IRQ Tests Passed Successfully\n");
     674:	e9dd 3400 	ldrd	r3, r4, [sp]
     678:	2b0e      	cmp	r3, #14
     67a:	464a      	mov	r2, r9
     67c:	d102      	bne.n	684 <GPIO_IRQ+0x230>
     67e:	2a00      	cmp	r2, #0
     680:	f000 80a4 	beq.w	7cc <GPIO_IRQ+0x378>
  else{
    printf("\nFalling Edge IRQ Tests Failed, Error Code: (0x%x)\n", err_code);
     684:	4611      	mov	r1, r2
     686:	4847      	ldr	r0, [pc, #284]	; (7a4 <GPIO_IRQ+0x350>)
     688:	f000 ffb8 	bl	15fc <iprintf>
     68c:	2420      	movs	r4, #32
    err_code = 0; /*if the port did not have 1 FE IRQ for each pin as expected then display error*/
    return_val = 32;
  }

  puts("- Stage 3d - GPIO Low Level IRQ Test\n");
     68e:	4846      	ldr	r0, [pc, #280]	; (7a8 <GPIO_IRQ+0x354>)
     690:	f001 f828 	bl	16e4 <puts>

  irq_counter = 0;
  data = 0xFFFE;

  CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;           //set dataout to all ones ready to test low level interrupts
     694:	4b3a      	ldr	r3, [pc, #232]	; (780 <GPIO_IRQ+0x32c>)
  data = 0xFFFE;
     696:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;           //set dataout to all ones ready to test low level interrupts
     69a:	f64f 72ff 	movw	r2, #65535	; 0xffff

  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO0, i);            //set all pins to low level interrupts
     69e:	461f      	mov	r7, r3
     6a0:	2500      	movs	r5, #0
  data = 0xFFFE;
     6a2:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
  CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;           //set dataout to all ones ready to test low level interrupts
     6a6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO0, i);            //set all pins to low level interrupts
     6a8:	4629      	mov	r1, r5
     6aa:	4638      	mov	r0, r7
     6ac:	3501      	adds	r5, #1
     6ae:	f000 fb51 	bl	d54 <CM3DS_MPS2_gpio_SetIntLowLevel>
     6b2:	2d10      	cmp	r5, #16
     6b4:	d1f8      	bne.n	6a8 <GPIO_IRQ+0x254>
  irq_counter = 0;
     6b6:	2300      	movs	r3, #0

  for(i = 0; i < 16; i++){
    if(((1<<i) & datamask) != 0) {
     6b8:	f04f 0b01 	mov.w	fp, #1
  irq_counter = 0;
     6bc:	9300      	str	r3, [sp, #0]
  for(i = 0; i < 16; i++){
     6be:	461d      	mov	r5, r3
     6c0:	4699      	mov	r9, r3
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);                          //enable interrupts on specified pin and set the
     6c2:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 780 <GPIO_IRQ+0x32c>
     6c6:	e002      	b.n	6ce <GPIO_IRQ+0x27a>
  for(i = 0; i < 16; i++){
     6c8:	3501      	adds	r5, #1
     6ca:	2d10      	cmp	r5, #16
     6cc:	d036      	beq.n	73c <GPIO_IRQ+0x2e8>
    if(((1<<i) & datamask) != 0) {
     6ce:	6832      	ldr	r2, [r6, #0]
     6d0:	fa0b f705 	lsl.w	r7, fp, r5
     6d4:	4217      	tst	r7, r2
     6d6:	d0f7      	beq.n	6c8 <GPIO_IRQ+0x274>
      CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, i);                          //enable interrupts on specified pin and set the
     6d8:	4629      	mov	r1, r5
     6da:	4829      	ldr	r0, [pc, #164]	; (780 <GPIO_IRQ+0x32c>)
     6dc:	f000 fb22 	bl	d24 <CM3DS_MPS2_gpio_SetIntEnable>
                                                                        //data output to 0xFFFF XOR with 1 shifted to the
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 << (2*i)); //pins position so that just the desired pin is
     6e0:	f8da 3020 	ldr.w	r3, [sl, #32]
                                                                         //set to 0 1111 -> 1110 -> 1101 -> 1011 -> 1111
      N = i;

      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i) ^ 0xFFFF;
     6e4:	f487 427f 	eor.w	r2, r7, #65280	; 0xff00
     6e8:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 << (2*i)); //pins position so that just the desired pin is
     6ec:	421f      	tst	r7, r3

      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);                                    //disable interrupts on specified pin
     6ee:	4629      	mov	r1, r5
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 << (2*i)); //pins position so that just the desired pin is
     6f0:	ea4f 0e45 	mov.w	lr, r5, lsl #1
      N = i;
     6f4:	f8c8 5000 	str.w	r5, [r8]
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);                                    //disable interrupts on specified pin
     6f8:	4821      	ldr	r0, [pc, #132]	; (780 <GPIO_IRQ+0x32c>)
      CM3DS_MPS2_GPIO0->DATAOUT = (0x0001 << i) ^ 0xFFFF;
     6fa:	f8ca 2004 	str.w	r2, [sl, #4]
      if(!((CM3DS_MPS2_GPIO0->INTENSET) & (1 << i))) err_code = (1 << (2*i)); //pins position so that just the desired pin is
     6fe:	bf08      	it	eq
     700:	fa0b f90e 	lsleq.w	r9, fp, lr
      CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, i);                                    //disable interrupts on specified pin
     704:	f000 fb14 	bl	d30 <CM3DS_MPS2_gpio_ClrIntEnable>

      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i))                      //check to see if the interrupt enable register is
     708:	f8da 0020 	ldr.w	r0, [sl, #32]
        err_code = (1 << (2*i + 1));                                //clear for the pin which it should have just been
     70c:	006a      	lsls	r2, r5, #1
      if((CM3DS_MPS2_GPIO0->INTENSET) & ~(1 << i))                      //check to see if the interrupt enable register is
     70e:	ea30 0307 	bics.w	r3, r0, r7

      /* check to see whether intstatus, for the specified pin, is 4, which corresponds to a low level interrupt */

      if(intstatus[i] == 4) irq_counter++;
     712:	eb08 0185 	add.w	r1, r8, r5, lsl #2
        err_code = (1 << (2*i + 1));                                //clear for the pin which it should have just been
     716:	bf18      	it	ne
     718:	f102 0901 	addne.w	r9, r2, #1
      if(intstatus[i] == 4) irq_counter++;
     71c:	684a      	ldr	r2, [r1, #4]
        err_code = (1 << (2*i + 1));                                //clear for the pin which it should have just been
     71e:	bf18      	it	ne
     720:	fa0b f909 	lslne.w	r9, fp, r9
      if(intstatus[i] == 4) irq_counter++;
     724:	2a04      	cmp	r2, #4
     726:	bf08      	it	eq
     728:	9b00      	ldreq	r3, [sp, #0]
  for(i = 0; i < 16; i++){
     72a:	f105 0501 	add.w	r5, r5, #1
      if(intstatus[i] == 4) irq_counter++;
     72e:	bf06      	itte	eq
     730:	3301      	addeq	r3, #1
     732:	9300      	streq	r3, [sp, #0]
      else err_code |= (1 << i);
     734:	ea49 0907 	orrne.w	r9, r9, r7
  for(i = 0; i < 16; i++){
     738:	2d10      	cmp	r5, #16
     73a:	d1c8      	bne.n	6ce <GPIO_IRQ+0x27a>
    }
  }

  if((irq_counter == 14) && (err_code == 0)) puts("Low Level IRQ Tests Passed Successfully\n");
     73c:	9b00      	ldr	r3, [sp, #0]
     73e:	2b0e      	cmp	r3, #14
     740:	d102      	bne.n	748 <GPIO_IRQ+0x2f4>
     742:	f1b9 0f00 	cmp.w	r9, #0
     746:	d017      	beq.n	778 <GPIO_IRQ+0x324>
  else{
    printf("\nLow Level IRQ Tests Failed, Error Code: (0x%x)\n\n", err_code);
     748:	4649      	mov	r1, r9
     74a:	4818      	ldr	r0, [pc, #96]	; (7ac <GPIO_IRQ+0x358>)
     74c:	f000 ff56 	bl	15fc <iprintf>
     750:	2440      	movs	r4, #64	; 0x40
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     752:	2240      	movs	r2, #64	; 0x40

  NVIC_DisableIRQ(PORT0_ALL_IRQn);                                       //disable all GPIO interrupts on PORT 0

  NVIC_ClearPendingIRQ(PORT0_ALL_IRQn);                                  //clear any outstanding GPIO interrupts

  for(i = 0; i < 16; i++) CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, i);         //clear any outstanding GPIO interrupts
     754:	2500      	movs	r5, #0
     756:	4b0d      	ldr	r3, [pc, #52]	; (78c <GPIO_IRQ+0x338>)
     758:	4e09      	ldr	r6, [pc, #36]	; (780 <GPIO_IRQ+0x32c>)
     75a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     75e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     762:	4629      	mov	r1, r5
     764:	4630      	mov	r0, r6
     766:	3501      	adds	r5, #1
     768:	f000 fad6 	bl	d18 <CM3DS_MPS2_gpio_IntClear>
     76c:	2d10      	cmp	r5, #16
     76e:	d1f8      	bne.n	762 <GPIO_IRQ+0x30e>

  return return_val;
}
     770:	4620      	mov	r0, r4
     772:	b003      	add	sp, #12
     774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((irq_counter == 14) && (err_code == 0)) puts("Low Level IRQ Tests Passed Successfully\n");
     778:	480d      	ldr	r0, [pc, #52]	; (7b0 <GPIO_IRQ+0x35c>)
     77a:	f000 ffb3 	bl	16e4 <puts>
     77e:	e7e8      	b.n	752 <GPIO_IRQ+0x2fe>
     780:	40010000 	.word	0x40010000
     784:	0000284c 	.word	0x0000284c
     788:	0000286c 	.word	0x0000286c
     78c:	e000e100 	.word	0xe000e100
     790:	20000000 	.word	0x20000000
     794:	000028c0 	.word	0x000028c0
     798:	000028f4 	.word	0x000028f4
     79c:	00002948 	.word	0x00002948
     7a0:	0000297c 	.word	0x0000297c
     7a4:	000029d4 	.word	0x000029d4
     7a8:	00002a08 	.word	0x00002a08
     7ac:	00002a5c 	.word	0x00002a5c
     7b0:	00002a30 	.word	0x00002a30
     7b4:	2000006c 	.word	0x2000006c
  if((irq_counter == 14) && (err_code == 0)) puts("High Level IRQ Tests Passed Successfully\n");
     7b8:	4806      	ldr	r0, [pc, #24]	; (7d4 <GPIO_IRQ+0x380>)
     7ba:	9700      	str	r7, [sp, #0]
     7bc:	f000 ff92 	bl	16e4 <puts>
     7c0:	e6b0      	b.n	524 <GPIO_IRQ+0xd0>
  if((irq_counter == 14) && (err_code == 0)) puts("Rising Edge IRQ Tests Passed Successfully\n");
     7c2:	4805      	ldr	r0, [pc, #20]	; (7d8 <GPIO_IRQ+0x384>)
     7c4:	9c00      	ldr	r4, [sp, #0]
     7c6:	f000 ff8d 	bl	16e4 <puts>
     7ca:	e6ff      	b.n	5cc <GPIO_IRQ+0x178>
  if((irq_counter == 14) && (err_code == 0)) puts("Falling Edge IRQ Tests Passed Successfully\n");
     7cc:	4803      	ldr	r0, [pc, #12]	; (7dc <GPIO_IRQ+0x388>)
     7ce:	f000 ff89 	bl	16e4 <puts>
     7d2:	e75c      	b.n	68e <GPIO_IRQ+0x23a>
     7d4:	00002894 	.word	0x00002894
     7d8:	0000291c 	.word	0x0000291c
     7dc:	000029a8 	.word	0x000029a8

000007e0 <GPIO_Mask_OP>:
      clear the output port for the previous masks and reset both the previous masks and the expected value
    - repeat process again until it has occurred 8 times
*/

int GPIO_Mask_OP(void)
{
     7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i = 0, random_mask = 0, exp_value = 0, random_value, prev_masks[2] = { 0 }, mask = 0;


  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0xFFFF);

  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;
     7e4:	2500      	movs	r5, #0
  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0xFFFF);
     7e6:	4c7e      	ldr	r4, [pc, #504]	; (9e0 <GPIO_Mask_OP+0x200>)
     7e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     7ec:	4620      	mov	r0, r4
     7ee:	f000 fa87 	bl	d00 <CM3DS_MPS2_gpio_SetOutEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;
     7f2:	6065      	str	r5, [r4, #4]

  puts("Stage 4 - GPIO Masked Output Test\n");
     7f4:	487b      	ldr	r0, [pc, #492]	; (9e4 <GPIO_Mask_OP+0x204>)
     7f6:	f000 ff75 	bl	16e4 <puts>

  puts("- Stage 4a - GPIO Masked Output - Deterministic Test\n");
     7fa:	487b      	ldr	r0, [pc, #492]	; (9e8 <GPIO_Mask_OP+0x208>)

  for(i = 0; i < 16; i++){
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, (1 << i));   //test each pin on the GPIO to check that masked
     7fc:	46a0      	mov	r8, r4
  puts("- Stage 4a - GPIO Masked Output - Deterministic Test\n");
     7fe:	f000 ff71 	bl	16e4 <puts>
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, (1 << i));   //test each pin on the GPIO to check that masked
     802:	f04f 0901 	mov.w	r9, #1
  for(i = 0; i < 16; i++){
     806:	462e      	mov	r6, r5
  int err_code = 0, err_code_all = 0;
     808:	462f      	mov	r7, r5
     80a:	4d78      	ldr	r5, [pc, #480]	; (9ec <GPIO_Mask_OP+0x20c>)
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, (1 << i));   //test each pin on the GPIO to check that masked
     80c:	fa09 f406 	lsl.w	r4, r9, r6
     810:	4622      	mov	r2, r4
     812:	f64f 71ff 	movw	r1, #65535	; 0xffff
     816:	4872      	ldr	r0, [pc, #456]	; (9e0 <GPIO_Mask_OP+0x200>)
     818:	f000 faa8 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     81c:	f3bf 8f6f 	isb	sy
    small_delay();                                             //access works for each pin individually
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & (1 << i) & datamask))
     820:	f8d8 c000 	ldr.w	ip, [r8]
     824:	f8d5 e000 	ldr.w	lr, [r5]
     828:	682b      	ldr	r3, [r5, #0]
     82a:	ea0c 0c0e 	and.w	ip, ip, lr
     82e:	4023      	ands	r3, r4
     830:	459c      	cmp	ip, r3
      err_code |= (1 << i);
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, (1 << i));   //clear value back to zero
     832:	4622      	mov	r2, r4
     834:	f04f 0100 	mov.w	r1, #0
     838:	4869      	ldr	r0, [pc, #420]	; (9e0 <GPIO_Mask_OP+0x200>)
      err_code |= (1 << i);
     83a:	bf18      	it	ne
     83c:	4327      	orrne	r7, r4
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, (1 << i));   //clear value back to zero
     83e:	f000 fa95 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
     842:	f3bf 8f6f 	isb	sy
  for(i = 0; i < 16; i++){
     846:	3601      	adds	r6, #1
     848:	2e10      	cmp	r6, #16
     84a:	d1df      	bne.n	80c <GPIO_Mask_OP+0x2c>
    small_delay();
  }

  CM3DS_MPS2_GPIO0->DATAOUT = 0;
     84c:	2300      	movs	r3, #0

  for(i = 0; i < 16; i++){
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, (1 << i));   //test each pin on the GPIO to check that masked
     84e:	2601      	movs	r6, #1
  uint32_t i = 0, random_mask = 0, exp_value = 0, random_value, prev_masks[2] = { 0 }, mask = 0;
     850:	4699      	mov	r9, r3
  for(i = 0; i < 16; i++){
     852:	461c      	mov	r4, r3
  CM3DS_MPS2_GPIO0->DATAOUT = 0;
     854:	f8c8 3004 	str.w	r3, [r8, #4]
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, (1 << i));   //test each pin on the GPIO to check that masked
     858:	f8df 8184 	ldr.w	r8, [pc, #388]	; 9e0 <GPIO_Mask_OP+0x200>
     85c:	fa06 fa04 	lsl.w	sl, r6, r4
     860:	4652      	mov	r2, sl
     862:	f64f 71ff 	movw	r1, #65535	; 0xffff
     866:	485e      	ldr	r0, [pc, #376]	; (9e0 <GPIO_Mask_OP+0x200>)
     868:	f000 fa80 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
     86c:	f3bf 8f6f 	isb	sy
    small_delay();                                             //access works for each pin individually
    mask |= (1 << i);
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & mask & datamask)) //test do not reset to ensure that the masked output
     870:	f8d8 2000 	ldr.w	r2, [r8]
     874:	6829      	ldr	r1, [r5, #0]
     876:	682b      	ldr	r3, [r5, #0]
    mask |= (1 << i);
     878:	ea49 090a 	orr.w	r9, r9, sl
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & mask & datamask)) //test do not reset to ensure that the masked output
     87c:	400a      	ands	r2, r1
     87e:	ea03 0309 	and.w	r3, r3, r9
     882:	429a      	cmp	r2, r3
     884:	d004      	beq.n	890 <GPIO_Mask_OP+0xb0>
      err_code |= (1 << (i + 16));                             //goes through the transition 0001->0011->0111->1111
     886:	f104 0310 	add.w	r3, r4, #16
     88a:	fa06 f303 	lsl.w	r3, r6, r3
     88e:	431f      	orrs	r7, r3
     890:	f3bf 8f6f 	isb	sy
  for(i = 0; i < 16; i++){
     894:	3401      	adds	r4, #1
     896:	2c10      	cmp	r4, #16
     898:	d1e0      	bne.n	85c <GPIO_Mask_OP+0x7c>
    small_delay();
  }

  if(!err_code) puts("Stage 4a Deterministic Masked Output Tests Passed Successfully\n");
     89a:	2f00      	cmp	r7, #0
     89c:	f040 809a 	bne.w	9d4 <GPIO_Mask_OP+0x1f4>
     8a0:	4853      	ldr	r0, [pc, #332]	; (9f0 <GPIO_Mask_OP+0x210>)
     8a2:	f000 ff1f 	bl	16e4 <puts>

  puts("- Stage 4b - GPIO Masked Output - Random Test\n");

  err_code = 0;

  CM3DS_MPS2_GPIO0->DATAOUT = 0;
     8a6:	f04f 0800 	mov.w	r8, #0
     8aa:	4c4d      	ldr	r4, [pc, #308]	; (9e0 <GPIO_Mask_OP+0x200>)
  puts("- Stage 4b - GPIO Masked Output - Random Test\n");
     8ac:	4851      	ldr	r0, [pc, #324]	; (9f4 <GPIO_Mask_OP+0x214>)
     8ae:	f000 ff19 	bl	16e4 <puts>
  CM3DS_MPS2_GPIO0->DATAOUT = 0;
     8b2:	f8c4 8004 	str.w	r8, [r4, #4]

  srand(RANDOM_NUMBER);
     8b6:	4850      	ldr	r0, [pc, #320]	; (9f8 <GPIO_Mask_OP+0x218>)

  for(i = 0; i < 16; i++){                                         //repeat same process but with 16 random mask
     8b8:	4646      	mov	r6, r8
  err_code = 0;
     8ba:	46c1      	mov	r9, r8
    random_mask = (rand() % 65536);                                //values, the random function is seeded with a
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, random_mask);    //#define at the top of the program called RANDOM_NUMBER
     8bc:	46a2      	mov	sl, r4
  srand(RANDOM_NUMBER);
     8be:	f000 ff19 	bl	16f4 <srand>
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & random_mask & datamask)) //can be easily changed to perform tests on 16
      err_code |= (1 << i);                                 // more different random numbers
     8c2:	f04f 0801 	mov.w	r8, #1
    random_mask = (rand() % 65536);                                //values, the random function is seeded with a
     8c6:	f000 ff39 	bl	173c <rand>
     8ca:	4243      	negs	r3, r0
     8cc:	b29b      	uxth	r3, r3
     8ce:	b284      	uxth	r4, r0
     8d0:	bf58      	it	pl
     8d2:	425c      	negpl	r4, r3
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0xFFFF, random_mask);    //#define at the top of the program called RANDOM_NUMBER
     8d4:	4622      	mov	r2, r4
     8d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
     8da:	4841      	ldr	r0, [pc, #260]	; (9e0 <GPIO_Mask_OP+0x200>)
     8dc:	f000 fa46 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (0xFFFF & random_mask & datamask)) //can be easily changed to perform tests on 16
     8e0:	f8da 2000 	ldr.w	r2, [sl]
     8e4:	6829      	ldr	r1, [r5, #0]
     8e6:	682b      	ldr	r3, [r5, #0]
     8e8:	ea02 0c01 	and.w	ip, r2, r1
     8ec:	b29b      	uxth	r3, r3
     8ee:	4023      	ands	r3, r4
     8f0:	459c      	cmp	ip, r3
      err_code |= (1 << i);                                 // more different random numbers
     8f2:	bf18      	it	ne
     8f4:	fa08 f306 	lslne.w	r3, r8, r6
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, random_mask);
     8f8:	4622      	mov	r2, r4
     8fa:	f04f 0100 	mov.w	r1, #0
     8fe:	4838      	ldr	r0, [pc, #224]	; (9e0 <GPIO_Mask_OP+0x200>)
  for(i = 0; i < 16; i++){                                         //repeat same process but with 16 random mask
     900:	f106 0601 	add.w	r6, r6, #1
      err_code |= (1 << i);                                 // more different random numbers
     904:	bf18      	it	ne
     906:	ea49 0903 	orrne.w	r9, r9, r3
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, random_mask);
     90a:	f000 fa2f 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
  for(i = 0; i < 16; i++){                                         //repeat same process but with 16 random mask
     90e:	2e10      	cmp	r6, #16
     910:	d1d9      	bne.n	8c6 <GPIO_Mask_OP+0xe6>
  }

  CM3DS_MPS2_GPIO0->DATAOUT = 0;
     912:	2300      	movs	r3, #0
     914:	4634      	mov	r4, r6
  uint32_t i = 0, random_mask = 0, exp_value = 0, random_value, prev_masks[2] = { 0 }, mask = 0;
     916:	469b      	mov	fp, r3
     918:	4698      	mov	r8, r3
     91a:	461e      	mov	r6, r3
  CM3DS_MPS2_GPIO0->DATAOUT = 0;
     91c:	f8ca 3004 	str.w	r3, [sl, #4]
     920:	e01e      	b.n	960 <GPIO_Mask_OP+0x180>
                                                            //repeat same process but with 16 random mask values,
    random_mask = (rand() % 65536);                         //which are only cleared every other iteration so that
    random_value = (rand() % 65536);                        //they accumulate, the first value is outputted using
                                                            //masked access and then not cleared then a second value
    if(prev_masks[0] == 0) prev_masks[0] = random_mask;     //is outputted using another mask and then the resulting
    else prev_masks[1] = random_mask;                       //output is then checked against the expected output
     922:	46d3      	mov	fp, sl
     924:	ea81 0306 	eor.w	r3, r1, r6
     928:	ea03 030a 	and.w	r3, r3, sl

    exp_value = ((random_mask & random_value) | (exp_value & ~random_mask));

    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, random_value, random_mask);
     92c:	4652      	mov	r2, sl
     92e:	482c      	ldr	r0, [pc, #176]	; (9e0 <GPIO_Mask_OP+0x200>)
    exp_value = ((random_mask & random_value) | (exp_value & ~random_mask));
     930:	405e      	eors	r6, r3
    CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, random_value, random_mask);
     932:	f000 fa1b 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>

    if((CM3DS_MPS2_GPIO0->DATA & datamask) != (exp_value & datamask))
     936:	4b2a      	ldr	r3, [pc, #168]	; (9e0 <GPIO_Mask_OP+0x200>)
     938:	681a      	ldr	r2, [r3, #0]
     93a:	6829      	ldr	r1, [r5, #0]
     93c:	682b      	ldr	r3, [r5, #0]
     93e:	400a      	ands	r2, r1
     940:	4033      	ands	r3, r6
     942:	429a      	cmp	r2, r3
     944:	d003      	beq.n	94e <GPIO_Mask_OP+0x16e>
      err_code |= (1 << (i + 16));
     946:	2301      	movs	r3, #1
     948:	40a3      	lsls	r3, r4
     94a:	ea49 0903 	orr.w	r9, r9, r3
     94e:	3401      	adds	r4, #1

    /* For every two non-zero mask writes taken place,
    reset the data using the stored mask value and
    clear the exp_value back to 0 */
    if((prev_masks[0] != 0) && (prev_masks[1] != 0)){
     950:	f1b8 0f00 	cmp.w	r8, #0
     954:	d002      	beq.n	95c <GPIO_Mask_OP+0x17c>
     956:	f1bb 0f00 	cmp.w	fp, #0
     95a:	d116      	bne.n	98a <GPIO_Mask_OP+0x1aa>
  for(i = 0; i < 16; i++){
     95c:	2c20      	cmp	r4, #32
     95e:	d024      	beq.n	9aa <GPIO_Mask_OP+0x1ca>
    random_mask = (rand() % 65536);                         //which are only cleared every other iteration so that
     960:	f000 feec 	bl	173c <rand>
     964:	4243      	negs	r3, r0
     966:	b29b      	uxth	r3, r3
     968:	fa1f fa80 	uxth.w	sl, r0
     96c:	bf58      	it	pl
     96e:	f1c3 0a00 	rsbpl	sl, r3, #0
    random_value = (rand() % 65536);                        //they accumulate, the first value is outputted using
     972:	f000 fee3 	bl	173c <rand>
     976:	4243      	negs	r3, r0
     978:	b29b      	uxth	r3, r3
     97a:	b281      	uxth	r1, r0
     97c:	bf58      	it	pl
     97e:	4259      	negpl	r1, r3
    if(prev_masks[0] == 0) prev_masks[0] = random_mask;     //is outputted using another mask and then the resulting
     980:	f1b8 0f00 	cmp.w	r8, #0
     984:	d1cd      	bne.n	922 <GPIO_Mask_OP+0x142>
     986:	46d0      	mov	r8, sl
     988:	e7cc      	b.n	924 <GPIO_Mask_OP+0x144>
      CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, prev_masks[0]);
     98a:	4642      	mov	r2, r8
     98c:	2100      	movs	r1, #0
     98e:	4814      	ldr	r0, [pc, #80]	; (9e0 <GPIO_Mask_OP+0x200>)
     990:	f000 f9ec 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
      CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, prev_masks[1]);
     994:	465a      	mov	r2, fp
      prev_masks[0] = 0;
      prev_masks[1] = 0;
     996:	f04f 0b00 	mov.w	fp, #0
      CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO0, 0x0000, prev_masks[1]);
     99a:	4811      	ldr	r0, [pc, #68]	; (9e0 <GPIO_Mask_OP+0x200>)
     99c:	4659      	mov	r1, fp
     99e:	f000 f9e5 	bl	d6c <CM3DS_MPS2_gpio_MaskedWrite>
  for(i = 0; i < 16; i++){
     9a2:	2c20      	cmp	r4, #32
      prev_masks[0] = 0;
     9a4:	46d8      	mov	r8, fp
      exp_value = 0;
     9a6:	465e      	mov	r6, fp
  for(i = 0; i < 16; i++){
     9a8:	d1da      	bne.n	960 <GPIO_Mask_OP+0x180>
    }
  }

  if(!err_code) puts("Stage 4b Random Masked Output Tests Passed Successfully\n");
     9aa:	f1b9 0f00 	cmp.w	r9, #0
     9ae:	d109      	bne.n	9c4 <GPIO_Mask_OP+0x1e4>
     9b0:	4812      	ldr	r0, [pc, #72]	; (9fc <GPIO_Mask_OP+0x21c>)
     9b2:	f000 fe97 	bl	16e4 <puts>
    printf("\nStage 4b Random Masked Output Tests Failed, Error Code: (0x%x)\n", err_code);
    err_code_all |= 2;
    }


  if(!err_code_all) puts("\nAll Masked Output Tests Passed Successfully\n");
     9b6:	b94f      	cbnz	r7, 9cc <GPIO_Mask_OP+0x1ec>
     9b8:	4811      	ldr	r0, [pc, #68]	; (a00 <GPIO_Mask_OP+0x220>)
     9ba:	f000 fe93 	bl	16e4 <puts>

  if(!err_code_all) return 0;
  else return 4;
}
     9be:	4638      	mov	r0, r7
     9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printf("\nStage 4b Random Masked Output Tests Failed, Error Code: (0x%x)\n", err_code);
     9c4:	4649      	mov	r1, r9
     9c6:	480f      	ldr	r0, [pc, #60]	; (a04 <GPIO_Mask_OP+0x224>)
     9c8:	f000 fe18 	bl	15fc <iprintf>
  else return 4;
     9cc:	2704      	movs	r7, #4
}
     9ce:	4638      	mov	r0, r7
     9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printf("\nStage 4a Deterministic Masked Output Tests Failed, Error Code: (0x%x)\n", err_code);
     9d4:	4639      	mov	r1, r7
     9d6:	480c      	ldr	r0, [pc, #48]	; (a08 <GPIO_Mask_OP+0x228>)
     9d8:	f000 fe10 	bl	15fc <iprintf>
    err_code_all |= 1;
     9dc:	2701      	movs	r7, #1
     9de:	e762      	b.n	8a6 <GPIO_Mask_OP+0xc6>
     9e0:	40010000 	.word	0x40010000
     9e4:	00002a90 	.word	0x00002a90
     9e8:	00002ab4 	.word	0x00002ab4
     9ec:	20000000 	.word	0x20000000
     9f0:	00002aec 	.word	0x00002aec
     9f4:	00002b74 	.word	0x00002b74
     9f8:	02d5c3e1 	.word	0x02d5c3e1
     9fc:	00002ba4 	.word	0x00002ba4
     a00:	00002c24 	.word	0x00002c24
     a04:	00002be0 	.word	0x00002be0
     a08:	00002b2c 	.word	0x00002b2c

00000a0c <PORT0_COMB_Handler>:
//0 = undefined, 1 = rising edge, 2 = high level, 3 = falling edge, 4 = low level

void PORT0_COMB_Handler(void)
{

  if((CM3DS_MPS2_GPIO0->INTPOLSET)){
     a0c:	4a31      	ldr	r2, [pc, #196]	; (ad4 <PORT0_COMB_Handler+0xc8>)
{
     a0e:	b4f0      	push	{r4, r5, r6, r7}
  if((CM3DS_MPS2_GPIO0->INTPOLSET)){
     a10:	6b13      	ldr	r3, [r2, #48]	; 0x30
     a12:	b1c3      	cbz	r3, a46 <PORT0_COMB_Handler+0x3a>
    if((CM3DS_MPS2_GPIO0->INTTYPESET)){
     a14:	6a90      	ldr	r0, [r2, #40]	; 0x28
     a16:	2800      	cmp	r0, #0
     a18:	d043      	beq.n	aa2 <PORT0_COMB_Handler+0x96>
      if((CM3DS_MPS2_GPIO0->DATA & datamask) == ((data |= (1 << N)) & datamask))
     a1a:	2501      	movs	r5, #1
     a1c:	4b2e      	ldr	r3, [pc, #184]	; (ad8 <PORT0_COMB_Handler+0xcc>)
     a1e:	4c2f      	ldr	r4, [pc, #188]	; (adc <PORT0_COMB_Handler+0xd0>)
     a20:	6819      	ldr	r1, [r3, #0]
     a22:	6810      	ldr	r0, [r2, #0]
     a24:	6826      	ldr	r6, [r4, #0]
     a26:	6c5f      	ldr	r7, [r3, #68]	; 0x44
     a28:	fa05 f201 	lsl.w	r2, r5, r1
     a2c:	433a      	orrs	r2, r7
     a2e:	645a      	str	r2, [r3, #68]	; 0x44
     a30:	6824      	ldr	r4, [r4, #0]
     a32:	ea00 0106 	and.w	r1, r0, r6
     a36:	4022      	ands	r2, r4
     a38:	4291      	cmp	r1, r2
     a3a:	d045      	beq.n	ac8 <PORT0_COMB_Handler+0xbc>
        CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;
      }
    }
  }
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, N);
}
     a3c:	bcf0      	pop	{r4, r5, r6, r7}
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, N);
     a3e:	6819      	ldr	r1, [r3, #0]
     a40:	4824      	ldr	r0, [pc, #144]	; (ad4 <PORT0_COMB_Handler+0xc8>)
     a42:	f000 b969 	b.w	d18 <CM3DS_MPS2_gpio_IntClear>
    if((CM3DS_MPS2_GPIO0->INTTYPESET)){
     a46:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a48:	b1ab      	cbz	r3, a76 <PORT0_COMB_Handler+0x6a>
      if((CM3DS_MPS2_GPIO0->DATA & datamask) == ((data &= ~(1 << N)) & datamask)) intstatus[N] = 3;       /*falling edge*/
     a4a:	2001      	movs	r0, #1
     a4c:	4b22      	ldr	r3, [pc, #136]	; (ad8 <PORT0_COMB_Handler+0xcc>)
     a4e:	4c23      	ldr	r4, [pc, #140]	; (adc <PORT0_COMB_Handler+0xd0>)
     a50:	681e      	ldr	r6, [r3, #0]
     a52:	6811      	ldr	r1, [r2, #0]
     a54:	6825      	ldr	r5, [r4, #0]
     a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     a58:	40b0      	lsls	r0, r6
     a5a:	ea22 0200 	bic.w	r2, r2, r0
     a5e:	645a      	str	r2, [r3, #68]	; 0x44
     a60:	6820      	ldr	r0, [r4, #0]
     a62:	4029      	ands	r1, r5
     a64:	4002      	ands	r2, r0
     a66:	4291      	cmp	r1, r2
     a68:	d1e8      	bne.n	a3c <PORT0_COMB_Handler+0x30>
     a6a:	2103      	movs	r1, #3
     a6c:	681a      	ldr	r2, [r3, #0]
     a6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a72:	6051      	str	r1, [r2, #4]
     a74:	e7e2      	b.n	a3c <PORT0_COMB_Handler+0x30>
      if((CM3DS_MPS2_GPIO0->DATA & datamask) == ((0xFFFF ^ (1 << N)) & datamask)){
     a76:	2101      	movs	r1, #1
     a78:	f64f 75ff 	movw	r5, #65535	; 0xffff
     a7c:	4c17      	ldr	r4, [pc, #92]	; (adc <PORT0_COMB_Handler+0xd0>)
     a7e:	4b16      	ldr	r3, [pc, #88]	; (ad8 <PORT0_COMB_Handler+0xcc>)
     a80:	6810      	ldr	r0, [r2, #0]
     a82:	6826      	ldr	r6, [r4, #0]
     a84:	681f      	ldr	r7, [r3, #0]
     a86:	6824      	ldr	r4, [r4, #0]
     a88:	40b9      	lsls	r1, r7
     a8a:	4069      	eors	r1, r5
     a8c:	4030      	ands	r0, r6
     a8e:	4021      	ands	r1, r4
     a90:	4288      	cmp	r0, r1
     a92:	d1d3      	bne.n	a3c <PORT0_COMB_Handler+0x30>
        intstatus[N] = 4;                                                   /*low level*/
     a94:	2004      	movs	r0, #4
     a96:	6819      	ldr	r1, [r3, #0]
     a98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     a9c:	6048      	str	r0, [r1, #4]
        CM3DS_MPS2_GPIO0->DATAOUT = 0xFFFF;
     a9e:	6055      	str	r5, [r2, #4]
     aa0:	e7cc      	b.n	a3c <PORT0_COMB_Handler+0x30>
      if((CM3DS_MPS2_GPIO0->DATA & datamask) == ((1 << N) & datamask)){
     aa2:	2101      	movs	r1, #1
     aa4:	4d0d      	ldr	r5, [pc, #52]	; (adc <PORT0_COMB_Handler+0xd0>)
     aa6:	4b0c      	ldr	r3, [pc, #48]	; (ad8 <PORT0_COMB_Handler+0xcc>)
     aa8:	6814      	ldr	r4, [r2, #0]
     aaa:	682e      	ldr	r6, [r5, #0]
     aac:	681f      	ldr	r7, [r3, #0]
     aae:	682d      	ldr	r5, [r5, #0]
     ab0:	40b9      	lsls	r1, r7
     ab2:	4034      	ands	r4, r6
     ab4:	4029      	ands	r1, r5
     ab6:	428c      	cmp	r4, r1
     ab8:	d1c0      	bne.n	a3c <PORT0_COMB_Handler+0x30>
        intstatus[N] = 2;                                                   /*high level*/
     aba:	2402      	movs	r4, #2
     abc:	6819      	ldr	r1, [r3, #0]
     abe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     ac2:	604c      	str	r4, [r1, #4]
        CM3DS_MPS2_GPIO0->DATAOUT = 0x0000;
     ac4:	6050      	str	r0, [r2, #4]
     ac6:	e7b9      	b.n	a3c <PORT0_COMB_Handler+0x30>
        intstatus[N] = 1;                                                 /*rising edge*/
     ac8:	681a      	ldr	r2, [r3, #0]
     aca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     ace:	6055      	str	r5, [r2, #4]
     ad0:	e7b4      	b.n	a3c <PORT0_COMB_Handler+0x30>
     ad2:	bf00      	nop
     ad4:	40010000 	.word	0x40010000
     ad8:	2000006c 	.word	0x2000006c
     adc:	20000000 	.word	0x20000000

00000ae0 <main>:
{
     ae0:	b510      	push	{r4, lr}
  UartStdOutInit();
     ae2:	f000 f84f 	bl	b84 <UartStdOutInit>
  puts("Cortex-M3 DesignStart - GPIO Driver Test - revision $Revision: 242484 $\n");
     ae6:	4819      	ldr	r0, [pc, #100]	; (b4c <main+0x6c>)
     ae8:	f000 fdfc 	bl	16e4 <puts>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     aec:	4b18      	ldr	r3, [pc, #96]	; (b50 <main+0x70>)
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     aee:	4a19      	ldr	r2, [pc, #100]	; (b54 <main+0x74>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE  + 0xFE8) & 0x07;
     af0:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     af2:	6812      	ldr	r2, [r2, #0]
     af4:	2a20      	cmp	r2, #32
     af6:	d103      	bne.n	b00 <main+0x20>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     af8:	4a17      	ldr	r2, [pc, #92]	; (b58 <main+0x78>)
     afa:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     afc:	2ab8      	cmp	r2, #184	; 0xb8
     afe:	d007      	beq.n	b10 <main+0x30>
    puts ("GPIO 0 not present. Test skipped.");
     b00:	4816      	ldr	r0, [pc, #88]	; (b5c <main+0x7c>)
     b02:	f000 fdef 	bl	16e4 <puts>
    return 0;}
     b06:	2400      	movs	r4, #0
    UartEndSimulation();
     b08:	f000 f854 	bl	bb4 <UartEndSimulation>
}
     b0c:	4620      	mov	r0, r4
     b0e:	bd10      	pop	{r4, pc}
     b10:	b2db      	uxtb	r3, r3
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     b12:	f003 0307 	and.w	r3, r3, #7
     b16:	2b03      	cmp	r3, #3
     b18:	d1f2      	bne.n	b00 <main+0x20>
  result |= GPIO_OPEN();
     b1a:	f7ff fb8f 	bl	23c <GPIO_OPEN>
     b1e:	4604      	mov	r4, r0
  result |= GPIO_AltFuncEN();
     b20:	f7ff fc22 	bl	368 <GPIO_AltFuncEN>
     b24:	4304      	orrs	r4, r0
  result |= GPIO_IRQ();
     b26:	f7ff fc95 	bl	454 <GPIO_IRQ>
     b2a:	4304      	orrs	r4, r0
  result |= GPIO_Mask_OP();
     b2c:	f7ff fe58 	bl	7e0 <GPIO_Mask_OP>
  if(result == 0) {
     b30:	4304      	orrs	r4, r0
     b32:	d105      	bne.n	b40 <main+0x60>
    puts("** TEST PASSED **\n");
     b34:	480a      	ldr	r0, [pc, #40]	; (b60 <main+0x80>)
     b36:	f000 fdd5 	bl	16e4 <puts>
  UartEndSimulation();
     b3a:	f000 f83b 	bl	bb4 <UartEndSimulation>
  return result;
     b3e:	e7e5      	b.n	b0c <main+0x2c>
    printf("** TEST FAILED **, Error code: (0x%x)\n", result);
     b40:	4621      	mov	r1, r4
     b42:	4808      	ldr	r0, [pc, #32]	; (b64 <main+0x84>)
     b44:	f000 fd5a 	bl	15fc <iprintf>
     b48:	e7f7      	b.n	b3a <main+0x5a>
     b4a:	bf00      	nop
     b4c:	00002c54 	.word	0x00002c54
     b50:	40010fe8 	.word	0x40010fe8
     b54:	40010fe0 	.word	0x40010fe0
     b58:	40010fe4 	.word	0x40010fe4
     b5c:	00002ca0 	.word	0x00002ca0
     b60:	00002cc4 	.word	0x00002cc4
     b64:	00002cd8 	.word	0x00002cd8

00000b68 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     b68:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     b6a:	4616      	mov	r6, r2
     b6c:	b13a      	cbz	r2, b7e <_write+0x16>
     b6e:	1e4c      	subs	r4, r1, #1
     b70:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     b72:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     b76:	f000 f80d 	bl	b94 <UartPutc>
  for (i=0; i<len;i++) {
     b7a:	42ac      	cmp	r4, r5
     b7c:	d1f9      	bne.n	b72 <_write+0xa>
    }
  return len;
}
     b7e:	4630      	mov	r0, r6
     b80:	bd70      	pop	{r4, r5, r6, pc}
     b82:	bf00      	nop

00000b84 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     b88:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     b8a:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     b8c:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     b8e:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     b94:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     b98:	6853      	ldr	r3, [r2, #4]
     b9a:	07db      	lsls	r3, r3, #31
     b9c:	d4fc      	bmi.n	b98 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     b9e:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     ba0:	4770      	bx	lr
     ba2:	bf00      	nop

00000ba4 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     ba4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     ba8:	6853      	ldr	r3, [r2, #4]
     baa:	079b      	lsls	r3, r3, #30
     bac:	d5fc      	bpl.n	ba8 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     bae:	6810      	ldr	r0, [r2, #0]
}
     bb0:	b2c0      	uxtb	r0, r0
     bb2:	4770      	bx	lr

00000bb4 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     bb8:	685a      	ldr	r2, [r3, #4]
     bba:	07d2      	lsls	r2, r2, #31
     bbc:	d4fc      	bmi.n	bb8 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     bbe:	2204      	movs	r2, #4
     bc0:	601a      	str	r2, [r3, #0]
     bc2:	e7fe      	b.n	bc2 <UartEndSimulation+0xe>

00000bc4 <CM3DS_MPS2_timer_EnableIRQ>:
 * @brief  Enable the microcontroller timer interrupts.
 */

 void CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     bc4:	6803      	ldr	r3, [r0, #0]
     bc6:	f043 0308 	orr.w	r3, r3, #8
     bca:	6003      	str	r3, [r0, #0]
 }
     bcc:	4770      	bx	lr
     bce:	bf00      	nop

00000bd0 <CM3DS_MPS2_timer_DisableIRQ>:
 * @brief  Disable the microcontroller timer interrutps.
 */

 void CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     bd0:	6803      	ldr	r3, [r0, #0]
     bd2:	f023 0308 	bic.w	r3, r3, #8
     bd6:	6003      	str	r3, [r0, #0]
 }
     bd8:	4770      	bx	lr
     bda:	bf00      	nop

00000bdc <CM3DS_MPS2_timer_StartTimer>:
 * @brief  Start the Timer.
 */

 void CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     bdc:	6803      	ldr	r3, [r0, #0]
     bde:	f043 0301 	orr.w	r3, r3, #1
     be2:	6003      	str	r3, [r0, #0]
 }
     be4:	4770      	bx	lr
     be6:	bf00      	nop

00000be8 <CM3DS_MPS2_timer_StopTimer>:
 * @brief  Stop the Timer.
 */

 void CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     be8:	6803      	ldr	r3, [r0, #0]
     bea:	f023 0301 	bic.w	r3, r3, #1
     bee:	6003      	str	r3, [r0, #0]
 }
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop

00000bf4 <CM3DS_MPS2_timer_GetValue>:
 * @brief  Returns the current value of the timer.
 */

 uint32_t CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->VALUE;
     bf4:	6840      	ldr	r0, [r0, #4]
 }
     bf6:	4770      	bx	lr

00000bf8 <CM3DS_MPS2_timer_SetValue>:
 * @brief  Sets the timer to the specified value.
 */

 void CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->VALUE = value;
     bf8:	6041      	str	r1, [r0, #4]
 }
     bfa:	4770      	bx	lr

00000bfc <CM3DS_MPS2_timer_GetReload>:
 * @brief  Returns the reload value of the timer. The reload value is the value which the timer is set to after an underflow occurs.
 */

 uint32_t CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->RELOAD;
     bfc:	6880      	ldr	r0, [r0, #8]
 }
     bfe:	4770      	bx	lr

00000c00 <CM3DS_MPS2_timer_SetReload>:
 * @brief  Sets the reload value of the timer to the specified value. The reload value is the value which the timer is set to after an underflow occurs.
 */

 void CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->RELOAD = value;
     c00:	6081      	str	r1, [r0, #8]
 }
     c02:	4770      	bx	lr

00000c04 <CM3DS_MPS2_timer_ClearIRQ>:
 * @brief  Clears the timer IRQ if set.
 */

 void CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->INTCLEAR = CM3DS_MPS2_TIMER_INTCLEAR_Msk;
     c04:	2301      	movs	r3, #1
     c06:	60c3      	str	r3, [r0, #12]
 }
     c08:	4770      	bx	lr
     c0a:	bf00      	nop

00000c0c <CM3DS_MPS2_timer_StatusIRQ>:
 * @brief  Returns the IRQ status of the timer in question.
 */

 uint32_t  CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->INTSTATUS;
     c0c:	68c0      	ldr	r0, [r0, #12]
 }
     c0e:	4770      	bx	lr

00000c10 <CM3DS_MPS2_timer_Init_IntClock>:
 */

  void CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     c10:	2300      	movs	r3, #0
     c12:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     c14:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     c16:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                          /* non zero - enable IRQ */
     c18:	b912      	cbnz	r2, c20 <CM3DS_MPS2_timer_Init_IntClock+0x10>
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else{                                                                                   /* zero - do not enable IRQ */
         CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk);                                       /* enable timer */
     c1a:	2301      	movs	r3, #1
     c1c:	6003      	str	r3, [r0, #0]
        }
 }
     c1e:	4770      	bx	lr
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
     c20:	2309      	movs	r3, #9
     c22:	6003      	str	r3, [r0, #0]
     c24:	4770      	bx	lr
     c26:	bf00      	nop

00000c28 <CM3DS_MPS2_timer_Init_ExtClock>:
 */

 void CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     c28:	2300      	movs	r3, #0
     c2a:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     c2c:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     c2e:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     c30:	b912      	cbnz	r2, c38 <CM3DS_MPS2_timer_Init_ExtClock+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk |CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     c32:	2305      	movs	r3, #5
     c34:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk);                                   /* enable timer */
         }
 }
     c36:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     c38:	230d      	movs	r3, #13
     c3a:	6003      	str	r3, [r0, #0]
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop

00000c40 <CM3DS_MPS2_timer_Init_ExtEnable>:
 */

 void CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     c40:	2300      	movs	r3, #0
     c42:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     c44:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     c46:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     c48:	b912      	cbnz	r2, c50 <CM3DS_MPS2_timer_Init_ExtEnable+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     c4a:	2303      	movs	r3, #3
     c4c:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk);                                    /* enable timer */
         }
 }
     c4e:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     c50:	230b      	movs	r3, #11
     c52:	6003      	str	r3, [r0, #0]
     c54:	4770      	bx	lr
     c56:	bf00      	nop

00000c58 <CM3DS_MPS2_uart_init>:
 * @return 1 if initialisation failed, 0 if successful.
 */

 uint32_t CM3DS_MPS2_uart_init(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, uint32_t divider, uint32_t tx_en,
                           uint32_t rx_en, uint32_t tx_irq_en, uint32_t rx_irq_en, uint32_t tx_ovrirq_en, uint32_t rx_ovrirq_en)
 {
     c58:	b4f0      	push	{r4, r5, r6, r7}
       uint32_t new_ctrl=0;

       if (tx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_TXEN_Msk;
     c5a:	3200      	adds	r2, #0
     c5c:	bf18      	it	ne
     c5e:	2201      	movne	r2, #1
 {
     c60:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
     c64:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
       if (rx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_RXEN_Msk;
     c68:	b10b      	cbz	r3, c6e <CM3DS_MPS2_uart_init+0x16>
     c6a:	f042 0202 	orr.w	r2, r2, #2
       if (tx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_TXIRQEN_Msk;
     c6e:	b10f      	cbz	r7, c74 <CM3DS_MPS2_uart_init+0x1c>
     c70:	f042 0204 	orr.w	r2, r2, #4
       if (rx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_RXIRQEN_Msk;
     c74:	b10e      	cbz	r6, c7a <CM3DS_MPS2_uart_init+0x22>
     c76:	f042 0208 	orr.w	r2, r2, #8
       if (tx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_TXORIRQEN_Msk;
     c7a:	b10d      	cbz	r5, c80 <CM3DS_MPS2_uart_init+0x28>
     c7c:	f042 0210 	orr.w	r2, r2, #16
       if (rx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_RXORIRQEN_Msk;
     c80:	b10c      	cbz	r4, c86 <CM3DS_MPS2_uart_init+0x2e>
     c82:	f042 0220 	orr.w	r2, r2, #32

       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     c86:	2300      	movs	r3, #0
       CM3DS_MPS2_UART->BAUDDIV = divider;
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */

       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
       else return 0;
 }
     c88:	bcf0      	pop	{r4, r5, r6, r7}
       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     c8a:	6083      	str	r3, [r0, #8]
       CM3DS_MPS2_UART->BAUDDIV = divider;
     c8c:	6101      	str	r1, [r0, #16]
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */
     c8e:	6082      	str	r2, [r0, #8]
       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
     c90:	6843      	ldr	r3, [r0, #4]
     c92:	f013 0f0c 	tst.w	r3, #12
 }
     c96:	bf14      	ite	ne
     c98:	2001      	movne	r0, #1
     c9a:	2000      	moveq	r0, #0
     c9c:	4770      	bx	lr
     c9e:	bf00      	nop

00000ca0 <CM3DS_MPS2_uart_GetRxBufferFull>:
 * @brief  Returns whether the RX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk)>> CM3DS_MPS2_UART_STATE_RXBF_Pos);
     ca0:	6840      	ldr	r0, [r0, #4]
 }
     ca2:	f3c0 0040 	ubfx	r0, r0, #1, #1
     ca6:	4770      	bx	lr

00000ca8 <CM3DS_MPS2_uart_GetTxBufferFull>:
 * @brief  Returns whether the TX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk)>> CM3DS_MPS2_UART_STATE_TXBF_Pos);
     ca8:	6840      	ldr	r0, [r0, #4]
 }
     caa:	f000 0001 	and.w	r0, r0, #1
     cae:	4770      	bx	lr

00000cb0 <CM3DS_MPS2_uart_SendChar>:
 * @brief  Sends a character to the TX buffer for transmission.
 */

 void CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, char txchar)
 {
       while(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk);
     cb0:	6843      	ldr	r3, [r0, #4]
     cb2:	07db      	lsls	r3, r3, #31
     cb4:	d4fc      	bmi.n	cb0 <CM3DS_MPS2_uart_SendChar>
       CM3DS_MPS2_UART->DATA = (uint32_t)txchar;
     cb6:	6001      	str	r1, [r0, #0]
 }
     cb8:	4770      	bx	lr
     cba:	bf00      	nop

00000cbc <CM3DS_MPS2_uart_ReceiveChar>:
 * @brief  returns the character from the RX buffer which has been received.
 */

 char CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       while(!(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk));
     cbc:	6843      	ldr	r3, [r0, #4]
     cbe:	079b      	lsls	r3, r3, #30
     cc0:	d5fc      	bpl.n	cbc <CM3DS_MPS2_uart_ReceiveChar>
       return (char)(CM3DS_MPS2_UART->DATA);
     cc2:	6800      	ldr	r0, [r0, #0]
 }
     cc4:	b2c0      	uxtb	r0, r0
     cc6:	4770      	bx	lr

00000cc8 <CM3DS_MPS2_uart_GetOverrunStatus>:
 */


 uint32_t CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     cc8:	6840      	ldr	r0, [r0, #4]
 }
     cca:	f3c0 0081 	ubfx	r0, r0, #2, #2
     cce:	4770      	bx	lr

00000cd0 <CM3DS_MPS2_uart_ClearOverrunStatus>:
 * @brief  Clears the overrun status of both the RX & TX buffers and then returns the current overrun status.
 */

 uint32_t CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->STATE = (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk);
     cd0:	230c      	movs	r3, #12
     cd2:	6043      	str	r3, [r0, #4]
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     cd4:	6840      	ldr	r0, [r0, #4]
 }
     cd6:	f3c0 0081 	ubfx	r0, r0, #2, #2
     cda:	4770      	bx	lr

00000cdc <CM3DS_MPS2_uart_GetBaudDivider>:
 * @brief  Returns the current UART Baud rate divider. Note that the Baud rate divider is the difference between the clock frequency and the Baud frequency.
 */

 uint32_t CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return CM3DS_MPS2_UART->BAUDDIV;
     cdc:	6900      	ldr	r0, [r0, #16]
 }
     cde:	4770      	bx	lr

00000ce0 <CM3DS_MPS2_uart_GetTxIRQStatus>:
 * @brief  Returns the TX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_TXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_TXIRQ_Pos);
     ce0:	68c0      	ldr	r0, [r0, #12]
 }
     ce2:	f000 0001 	and.w	r0, r0, #1
     ce6:	4770      	bx	lr

00000ce8 <CM3DS_MPS2_uart_GetRxIRQStatus>:
 * @brief  Returns the RX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_RXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_RXIRQ_Pos);
     ce8:	68c0      	ldr	r0, [r0, #12]
 }
     cea:	f3c0 0040 	ubfx	r0, r0, #1, #1
     cee:	4770      	bx	lr

00000cf0 <CM3DS_MPS2_uart_ClearTxIRQ>:
 * @brief  Clears the TX buffer full interrupt status.
 */

 void CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_TXIRQ_Msk;
     cf0:	2301      	movs	r3, #1
     cf2:	60c3      	str	r3, [r0, #12]
 }
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <CM3DS_MPS2_uart_ClearRxIRQ>:
 * @brief  Clears the RX interrupt status.
 */

 void CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_RXIRQ_Msk;
     cf8:	2302      	movs	r3, #2
     cfa:	60c3      	str	r3, [r0, #12]
 }
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop

00000d00 <CM3DS_MPS2_gpio_SetOutEnable>:
 * @brief  Sets pins on a port as an output. Set the bit corresponding to the pin number to 1 for output i.e. Set bit 1 of outenable to 1 to set pin 1 as an output. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableset)
 {
       CM3DS_MPS2_GPIO->OUTENABLESET = outenableset;
     d00:	6101      	str	r1, [r0, #16]
 }
     d02:	4770      	bx	lr

00000d04 <CM3DS_MPS2_gpio_ClrOutEnable>:
 * @brief  Sets pins on a port as an input. Set the bit corresponding to the pin number to 1 for input i.e. Set bit 1 of outenable to 1 to set pin 1 as an input. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableclr)
 {
       CM3DS_MPS2_GPIO->OUTENABLECLR = outenableclr;
     d04:	6141      	str	r1, [r0, #20]
 }
     d06:	4770      	bx	lr

00000d08 <CM3DS_MPS2_gpio_GetOutEnable>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set as inputs or outputs i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is an output.
 */

 uint32_t CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->OUTENABLESET;
     d08:	6900      	ldr	r0, [r0, #16]
 }
     d0a:	4770      	bx	lr

00000d0c <CM3DS_MPS2_gpio_SetAltFunc>:
 * @brief  enables the alternative function for pins. Set the bit corresponding to the pin number to 1 for alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to its alternative function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncset)
 {
       CM3DS_MPS2_GPIO->ALTFUNCSET = AltFuncset;
     d0c:	6181      	str	r1, [r0, #24]
 }
     d0e:	4770      	bx	lr

00000d10 <CM3DS_MPS2_gpio_ClrAltFunc>:
 * @brief  disables the alternative function for pins. Set the bit corresponding to the pin number to 1 to disable alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to the orignal output function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncclr)
 {
       CM3DS_MPS2_GPIO->ALTFUNCCLR = AltFuncclr;
     d10:	61c1      	str	r1, [r0, #28]
 }
     d12:	4770      	bx	lr

00000d14 <CM3DS_MPS2_gpio_GetAltFunc>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set to their alternative or their original output functionality i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is set to its alternative function.
 */

 uint32_t CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->ALTFUNCSET;
     d14:	6980      	ldr	r0, [r0, #24]
 }
     d16:	4770      	bx	lr

00000d18 <CM3DS_MPS2_gpio_IntClear>:
 * @brief  Clears the interrupt flag for the specified pin and then returns the new interrupt status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTCLEAR = (1 << Num);
     d18:	2301      	movs	r3, #1
     d1a:	fa03 f101 	lsl.w	r1, r3, r1
     d1e:	6381      	str	r1, [r0, #56]	; 0x38

       return CM3DS_MPS2_GPIO->INTSTATUS;
     d20:	6b80      	ldr	r0, [r0, #56]	; 0x38
 }
     d22:	4770      	bx	lr

00000d24 <CM3DS_MPS2_gpio_SetIntEnable>:
 * @brief  Enables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENSET = (1 << Num);
     d24:	2301      	movs	r3, #1
     d26:	fa03 f101 	lsl.w	r1, r3, r1
     d2a:	6201      	str	r1, [r0, #32]

       return CM3DS_MPS2_GPIO->INTENSET;
     d2c:	6a00      	ldr	r0, [r0, #32]
 }
     d2e:	4770      	bx	lr

00000d30 <CM3DS_MPS2_gpio_ClrIntEnable>:
 * @brief  Disables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

  uint32_t CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENCLR = (1 << Num);
     d30:	2301      	movs	r3, #1
     d32:	fa03 f101 	lsl.w	r1, r3, r1
     d36:	6241      	str	r1, [r0, #36]	; 0x24

       return CM3DS_MPS2_GPIO->INTENCLR;
     d38:	6a40      	ldr	r0, [r0, #36]	; 0x24
 }
     d3a:	4770      	bx	lr

00000d3c <CM3DS_MPS2_gpio_SetIntHighLevel>:
 * @brief  Changes the interrupt type for the specified pin to a high level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num); /* Clear INT TYPE bit */
     d3c:	2301      	movs	r3, #1
     d3e:	fa03 f101 	lsl.w	r1, r3, r1
     d42:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     d44:	6301      	str	r1, [r0, #48]	; 0x30
 }
     d46:	4770      	bx	lr

00000d48 <CM3DS_MPS2_gpio_SetIntRisingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a rising edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num); /* Set INT TYPE bit */
     d48:	2301      	movs	r3, #1
     d4a:	fa03 f101 	lsl.w	r1, r3, r1
     d4e:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     d50:	6301      	str	r1, [r0, #48]	; 0x30
 }
     d52:	4770      	bx	lr

00000d54 <CM3DS_MPS2_gpio_SetIntLowLevel>:
 * @brief  Changes the interrupt type for the specified pin to a low level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num);  /* Clear INT TYPE bit */
     d54:	2301      	movs	r3, #1
     d56:	fa03 f101 	lsl.w	r1, r3, r1
     d5a:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     d5c:	6341      	str	r1, [r0, #52]	; 0x34
 }
     d5e:	4770      	bx	lr

00000d60 <CM3DS_MPS2_gpio_SetIntFallingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a falling edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num);  /* Set INT TYPE bit */
     d60:	2301      	movs	r3, #1
     d62:	fa03 f101 	lsl.w	r1, r3, r1
     d66:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     d68:	6341      	str	r1, [r0, #52]	; 0x34
 }
     d6a:	4770      	bx	lr

00000d6c <CM3DS_MPS2_gpio_MaskedWrite>:
 * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
 */

 void CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t value, uint32_t mask)
 {
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     d6c:	b2d3      	uxtb	r3, r2
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     d6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     d72:	f503 7380 	add.w	r3, r3, #256	; 0x100
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     d76:	f502 7200 	add.w	r2, r2, #512	; 0x200
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     d7a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     d7e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 }
     d82:	4770      	bx	lr

00000d84 <CM3DS_MPS2_i2s_config>:
                uint32_t rx_enable, uint32_t rx_int_enable, uint32_t rx_waterlevel)
 {
   uint32_t i2s_control_val;
   // TX water level range from 3 to 0
   // Generate IRQ if TX Fifo space > TX water level
   if (tx_waterlevel > 3) return 1; // Error if out of range
     d84:	2b03      	cmp	r3, #3
     d86:	d820      	bhi.n	dca <CM3DS_MPS2_i2s_config+0x46>
 {
     d88:	b410      	push	{r4}
   // RX water level range from 4 to 1
   // Generate IRQ if RX Fifo space < RX water level
   if ((rx_waterlevel > 4)||(rx_waterlevel == 0)) return 1; // Error if out of range
     d8a:	9c03      	ldr	r4, [sp, #12]
     d8c:	3c01      	subs	r4, #1
     d8e:	2c03      	cmp	r4, #3
     d90:	d818      	bhi.n	dc4 <CM3DS_MPS2_i2s_config+0x40>
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
                      (tx_waterlevel << CM3DS_MPS2_I2S_CONTROL_TXWLVL_Pos) |
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
                  (tx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXEN_Pos;
     d92:	f001 0401 	and.w	r4, r1, #1
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     d96:	9901      	ldr	r1, [sp, #4]
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
     d98:	0052      	lsls	r2, r2, #1
     d9a:	f002 0202 	and.w	r2, r2, #2
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     d9e:	0089      	lsls	r1, r1, #2
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     da0:	4322      	orrs	r2, r4
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     da2:	f001 0104 	and.w	r1, r1, #4
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     da6:	430a      	orrs	r2, r1
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     da8:	9902      	ldr	r1, [sp, #8]
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     daa:	9c03      	ldr	r4, [sp, #12]
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     dac:	00c9      	lsls	r1, r1, #3
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     dae:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     db2:	f001 0108 	and.w	r1, r1, #8
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     db6:	430a      	orrs	r2, r1
     db8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

   pI2S->CONTROL  = i2s_control_val;
     dbc:	6003      	str	r3, [r0, #0]
   return 0;
 }
     dbe:	bc10      	pop	{r4}
   return 0;
     dc0:	2000      	movs	r0, #0
 }
     dc2:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     dc4:	2001      	movs	r0, #1
 }
     dc6:	bc10      	pop	{r4}
     dc8:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     dca:	2001      	movs	r0, #1
 }
     dcc:	4770      	bx	lr
     dce:	bf00      	nop

00000dd0 <CM3DS_MPS2_i2s_tx_fifo_empty>:

 int CM3DS_MPS2_i2s_tx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_TXEmpty_Pos;
     dd0:	6840      	ldr	r0, [r0, #4]
   }
     dd2:	f3c0 0080 	ubfx	r0, r0, #2, #1
     dd6:	4770      	bx	lr

00000dd8 <CM3DS_MPS2_i2s_tx_fifo_full>:

 int CM3DS_MPS2_i2s_tx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXFull_Pos;
     dd8:	6840      	ldr	r0, [r0, #4]
   }
     dda:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     dde:	4770      	bx	lr

00000de0 <CM3DS_MPS2_i2s_rx_fifo_empty>:

 int CM3DS_MPS2_i2s_rx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_RXEmpty_Pos;
     de0:	6840      	ldr	r0, [r0, #4]
   }
     de2:	f3c0 1000 	ubfx	r0, r0, #4, #1
     de6:	4770      	bx	lr

00000de8 <CM3DS_MPS2_i2s_rx_fifo_full>:

 int CM3DS_MPS2_i2s_rx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXFull_Pos;
     de8:	6840      	ldr	r0, [r0, #4]
   }
     dea:	f3c0 1040 	ubfx	r0, r0, #5, #1
     dee:	4770      	bx	lr

00000df0 <CM3DS_MPS2_i2s_rx_irq_alert>:

 int CM3DS_MPS2_i2s_rx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXIRQ_Pos;
     df0:	6840      	ldr	r0, [r0, #4]
   }
     df2:	f3c0 0040 	ubfx	r0, r0, #1, #1
     df6:	4770      	bx	lr

00000df8 <CM3DS_MPS2_i2s_tx_irq_alert>:

 int CM3DS_MPS2_i2s_tx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXIRQ_Pos;
     df8:	6840      	ldr	r0, [r0, #4]
   }
     dfa:	f000 0001 	and.w	r0, r0, #1
     dfe:	4770      	bx	lr

00000e00 <CM3DS_MPS2_i2s_tx_stop>:

 int CM3DS_MPS2_i2s_tx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     e00:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     e02:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     e04:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     e06:	f023 0301 	bic.w	r3, r3, #1
     e0a:	6013      	str	r3, [r2, #0]
   }
     e0c:	4770      	bx	lr
     e0e:	bf00      	nop

00000e10 <CM3DS_MPS2_i2s_rx_stop>:

 int CM3DS_MPS2_i2s_rx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     e10:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     e12:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     e14:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     e16:	f023 0304 	bic.w	r3, r3, #4
     e1a:	6013      	str	r3, [r2, #0]
   }
     e1c:	4770      	bx	lr
     e1e:	bf00      	nop

00000e20 <CM3DS_MPS2_i2s_get_tx_error>:

 int CM3DS_MPS2_i2s_get_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_TXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_TXERR_Pos);
     e20:	6880      	ldr	r0, [r0, #8]
   }
     e22:	f000 0001 	and.w	r0, r0, #1
     e26:	4770      	bx	lr

00000e28 <CM3DS_MPS2_i2s_get_rx_error>:

 int CM3DS_MPS2_i2s_get_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_RXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_RXERR_Pos);
     e28:	6880      	ldr	r0, [r0, #8]
   }
     e2a:	f3c0 0040 	ubfx	r0, r0, #1, #1
     e2e:	4770      	bx	lr

00000e30 <CM3DS_MPS2_i2s_clear_tx_error>:

 void CM3DS_MPS2_i2s_clear_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_TXERR_Msk;
     e30:	2301      	movs	r3, #1
     e32:	6083      	str	r3, [r0, #8]
   return;
   }
     e34:	4770      	bx	lr
     e36:	bf00      	nop

00000e38 <CM3DS_MPS2_i2s_clear_rx_error>:

 void CM3DS_MPS2_i2s_clear_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_RXERR_Msk;
     e38:	2302      	movs	r3, #2
     e3a:	6083      	str	r3, [r0, #8]
   return;;
   }
     e3c:	4770      	bx	lr
     e3e:	bf00      	nop

00000e40 <CM3DS_MPS2_i2s_fifo_reset>:

 void CM3DS_MPS2_i2s_fifo_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     e40:	6803      	ldr	r3, [r0, #0]
     e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     e46:	6003      	str	r3, [r0, #0]
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     e48:	6803      	ldr	r3, [r0, #0]
     e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     e4e:	6003      	str	r3, [r0, #0]
   return;
   }
     e50:	4770      	bx	lr
     e52:	bf00      	nop

00000e54 <CM3DS_MPS2_i2s_codec_reset>:

 void CM3DS_MPS2_i2s_codec_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   int i;
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     e54:	6803      	ldr	r3, [r0, #0]
     e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e5a:	6003      	str	r3, [r0, #0]
  __ASM volatile ("nop");
     e5c:	bf00      	nop
     e5e:	bf00      	nop
     e60:	bf00      	nop
     e62:	bf00      	nop
     e64:	bf00      	nop
     e66:	bf00      	nop
   for (i=0;i<6;i++) { // delay loop
     __NOP();
     }
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     e68:	6803      	ldr	r3, [r0, #0]
     e6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
     e6e:	6003      	str	r3, [r0, #0]
   return;
   }
     e70:	4770      	bx	lr
     e72:	bf00      	nop

00000e74 <CM3DS_MPS2_i2s_speed_config>:

 int CM3DS_MPS2_i2s_speed_config(CM3DS_MPS2_I2S_TypeDef *pI2S, uint32_t divide_ratio){
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     e74:	f240 33ed 	movw	r3, #1005	; 0x3ed
     e78:	f1a1 0212 	sub.w	r2, r1, #18
     e7c:	429a      	cmp	r2, r3
   if (divide_ratio > 0x3FF) return 1; // Error: Divide ratio too large (only 10 bits)

   pI2S->DIVIDE = divide_ratio;
     e7e:	bf9a      	itte	ls
     e80:	60c1      	strls	r1, [r0, #12]
   return 0;
     e82:	2000      	movls	r0, #0
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     e84:	2001      	movhi	r0, #1
   }
     e86:	4770      	bx	lr

00000e88 <CM3DS_MPS2_i2c_send_byte>:
 {
     int loop;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e88:	2201      	movs	r2, #1
     e8a:	4b2e      	ldr	r3, [pc, #184]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     e8c:	605a      	str	r2, [r3, #4]
         // apSleepus(1);
         if (c & (1 << (7 - loop)))
     e8e:	09c2      	lsrs	r2, r0, #7
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e90:	f04f 0202 	mov.w	r2, #2
         else
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e94:	bf0c      	ite	eq
     e96:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e98:	601a      	strne	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e9a:	2201      	movs	r2, #1
     e9c:	4b29      	ldr	r3, [pc, #164]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     e9e:	0641      	lsls	r1, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ea0:	601a      	str	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ea2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ea4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ea6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eaa:	bf54      	ite	pl
     eac:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eae:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eb0:	2201      	movs	r2, #1
     eb2:	4b24      	ldr	r3, [pc, #144]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     eb4:	0681      	lsls	r1, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eb6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eb8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eba:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ebc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ec0:	bf54      	ite	pl
     ec2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ec4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ec6:	2201      	movs	r2, #1
     ec8:	4b1e      	ldr	r3, [pc, #120]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     eca:	06c1      	lsls	r1, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ecc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ece:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ed2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ed6:	bf54      	ite	pl
     ed8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eda:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     edc:	2201      	movs	r2, #1
     ede:	4b19      	ldr	r3, [pc, #100]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     ee0:	0701      	lsls	r1, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ee2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ee4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ee6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ee8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eec:	bf54      	ite	pl
     eee:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ef2:	2201      	movs	r2, #1
     ef4:	4b13      	ldr	r3, [pc, #76]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     ef6:	0741      	lsls	r1, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ef8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     efa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     efc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     efe:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f02:	bf54      	ite	pl
     f04:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f06:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f08:	2201      	movs	r2, #1
     f0a:	4b0e      	ldr	r3, [pc, #56]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f0c:	0781      	lsls	r1, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f0e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f10:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f12:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f14:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f18:	bf54      	ite	pl
     f1a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f1c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f1e:	2201      	movs	r2, #1
     f20:	4b08      	ldr	r3, [pc, #32]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     f22:	07c1      	lsls	r1, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f24:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f26:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f28:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f2a:	f04f 0202 	mov.w	r2, #2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f2e:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f32:	bf4c      	ite	mi
     f34:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f36:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f38:	2201      	movs	r2, #1
     f3a:	4b02      	ldr	r3, [pc, #8]	; (f44 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     f3c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f3e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f40:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
 }
     f42:	4770      	bx	lr
     f44:	40023000 	.word	0x40023000

00000f48 <CM3DS_MPS2_i2c_receive_byte>:
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     data         = 0;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f48:	2201      	movs	r2, #1
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f4a:	2103      	movs	r1, #3
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f4c:	2002      	movs	r0, #2
     f4e:	4b2c      	ldr	r3, [pc, #176]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     f50:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f52:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f54:	6019      	str	r1, [r3, #0]
         // apSleepus(1);
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     f56:	6818      	ldr	r0, [r3, #0]
             data += (1 << (7 - loop));
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f58:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f5c:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5e:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f60:	2103      	movs	r1, #3
     data         = 0;
     f62:	f010 0f02 	tst.w	r0, #2
     f66:	bf14      	ite	ne
     f68:	2080      	movne	r0, #128	; 0x80
     f6a:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f70:	4b23      	ldr	r3, [pc, #140]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     f72:	bf48      	it	mi
     f74:	3040      	addmi	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f76:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f78:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f7a:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     f7c:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f7e:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     f80:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f82:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f86:	4b1e      	ldr	r3, [pc, #120]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     f88:	bf48      	it	mi
     f8a:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f8c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f8e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f90:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     f92:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     f94:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     f96:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f98:	f04f 0201 	mov.w	r2, #1
     f9c:	4b18      	ldr	r3, [pc, #96]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     f9e:	bf48      	it	mi
     fa0:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fa2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fa4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fa6:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fa8:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     faa:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb0:	4b13      	ldr	r3, [pc, #76]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     fb2:	bf48      	it	mi
     fb4:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fba:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fbc:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fbe:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fc0:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fc2:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc6:	4b0e      	ldr	r3, [pc, #56]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     fc8:	bf48      	it	mi
     fca:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fcc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fce:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fd0:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fd2:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fd4:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fd6:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fd8:	f04f 0201 	mov.w	r2, #1
     fdc:	4b08      	ldr	r3, [pc, #32]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     fde:	bf48      	it	mi
     fe0:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     fe6:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fe8:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fea:	2101      	movs	r1, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     fec:	079b      	lsls	r3, r3, #30
             data += (1 << (7 - loop));
     fee:	bf48      	it	mi
     ff0:	1880      	addmi	r0, r0, r2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ff2:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff4:	4b02      	ldr	r3, [pc, #8]	; (1000 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     // apSleepus(1);

     return data;
 }
     ff6:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff8:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ffa:	605a      	str	r2, [r3, #4]
 }
     ffc:	4770      	bx	lr
     ffe:	bf00      	nop
    1000:	40023000 	.word	0x40023000

00001004 <CM3DS_MPS2_i2c_receive_ack>:
     int nack;

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1004:	2201      	movs	r2, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1006:	2102      	movs	r1, #2
    1008:	4b06      	ldr	r3, [pc, #24]	; (1024 <CM3DS_MPS2_i2c_receive_ack+0x20>)
    100a:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    100c:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    100e:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1010:	6818      	ldr	r0, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1012:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     if(nack==0)
    1014:	f010 0f02 	tst.w	r0, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1018:	6019      	str	r1, [r3, #0]
         return 1;

     return 0;
 }
    101a:	bf0c      	ite	eq
    101c:	4610      	moveq	r0, r2
    101e:	2000      	movne	r0, #0
    1020:	4770      	bx	lr
    1022:	bf00      	nop
    1024:	40023000 	.word	0x40023000

00001028 <CM3DS_MPS2_i2c_send_ack>:

 // Write the acknowledge bit
 void CM3DS_MPS2_i2c_send_ack(void)
 {
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1028:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    102a:	2102      	movs	r1, #2
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    102c:	4b03      	ldr	r3, [pc, #12]	; (103c <CM3DS_MPS2_i2c_send_ack+0x14>)
    102e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1030:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1032:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1034:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1036:	6059      	str	r1, [r3, #4]
     // apSleepus(1);
 }
    1038:	4770      	bx	lr
    103a:	bf00      	nop
    103c:	40023000 	.word	0x40023000

00001040 <CM3DS_MPS2_i2c_read>:

 // Write data stream and read one byte
 unsigned char CM3DS_MPS2_i2c_read(unsigned char reg_addr, unsigned char sadr)
 {
    1040:	b430      	push	{r4, r5}

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1042:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1044:	2401      	movs	r4, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    1046:	2503      	movs	r5, #3
    1048:	4b91      	ldr	r3, [pc, #580]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
    104a:	601d      	str	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    104c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    104e:	605c      	str	r4, [r3, #4]
         if (c & (1 << (7 - loop)))
    1050:	09cc      	lsrs	r4, r1, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1052:	bf0c      	ite	eq
    1054:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1056:	601a      	strne	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1058:	2201      	movs	r2, #1
    105a:	4b8d      	ldr	r3, [pc, #564]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    105c:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    105e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1060:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1062:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1064:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1068:	bf54      	ite	pl
    106a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    106c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    106e:	2201      	movs	r2, #1
    1070:	4b87      	ldr	r3, [pc, #540]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1072:	068d      	lsls	r5, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1074:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1076:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1078:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    107a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    107e:	bf54      	ite	pl
    1080:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1082:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1084:	2201      	movs	r2, #1
    1086:	4b82      	ldr	r3, [pc, #520]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1088:	06cc      	lsls	r4, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    108a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    108c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    108e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1090:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1094:	bf54      	ite	pl
    1096:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1098:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    109a:	2201      	movs	r2, #1
    109c:	4b7c      	ldr	r3, [pc, #496]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    109e:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10a0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10a6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10aa:	bf54      	ite	pl
    10ac:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10ae:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10b0:	2201      	movs	r2, #1
    10b2:	4b77      	ldr	r3, [pc, #476]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10b4:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10b6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ba:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10bc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10c0:	bf54      	ite	pl
    10c2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10c4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10c6:	2201      	movs	r2, #1
    10c8:	4b71      	ldr	r3, [pc, #452]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10ca:	078d      	lsls	r5, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10cc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ce:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10d2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10d6:	bf54      	ite	pl
    10d8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10da:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10dc:	2201      	movs	r2, #1
    10de:	4b6c      	ldr	r3, [pc, #432]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    10e0:	07cc      	lsls	r4, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10e2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10e8:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10ec:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10f0:	bf4c      	ite	mi
    10f2:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10f4:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10f6:	2201      	movs	r2, #1
    10f8:	4b65      	ldr	r3, [pc, #404]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
    10fa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10fc:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10fe:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1100:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1102:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1104:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1106:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1108:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    110a:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    110c:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    110e:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1110:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1114:	bf0c      	ite	eq
    1116:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1118:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    111a:	4b5d      	ldr	r3, [pc, #372]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    111c:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    111e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1120:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1122:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1124:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1128:	bf54      	ite	pl
    112a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    112c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    112e:	2201      	movs	r2, #1
    1130:	4b57      	ldr	r3, [pc, #348]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1132:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1134:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1136:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1138:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    113a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    113e:	bf54      	ite	pl
    1140:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1142:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1144:	2201      	movs	r2, #1
    1146:	4b52      	ldr	r3, [pc, #328]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1148:	06c5      	lsls	r5, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    114a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    114c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    114e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1150:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1154:	bf54      	ite	pl
    1156:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1158:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    115a:	2201      	movs	r2, #1
    115c:	4b4c      	ldr	r3, [pc, #304]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    115e:	0704      	lsls	r4, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1160:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1162:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1164:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1166:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    116a:	bf54      	ite	pl
    116c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    116e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1170:	2201      	movs	r2, #1
    1172:	4b47      	ldr	r3, [pc, #284]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1174:	0745      	lsls	r5, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1176:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1178:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    117a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    117c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1180:	bf54      	ite	pl
    1182:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1184:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1186:	2201      	movs	r2, #1
    1188:	4b41      	ldr	r3, [pc, #260]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    118a:	0784      	lsls	r4, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    118c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    118e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1190:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1192:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1196:	bf54      	ite	pl
    1198:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    119a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    119c:	2201      	movs	r2, #1
    119e:	4b3c      	ldr	r3, [pc, #240]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11a0:	07c0      	lsls	r0, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11a2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11a4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11a6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11a8:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ac:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11b0:	bf4c      	ite	mi
    11b2:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11b4:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11b6:	2201      	movs	r2, #1
     CM3DS_MPS2_i2c_send_byte(reg_addr);
     CM3DS_MPS2_i2c_receive_ack();

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    11b8:	2403      	movs	r4, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ba:	4b35      	ldr	r3, [pc, #212]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
    11bc:	4311      	orrs	r1, r2
    11be:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11c0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11c2:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11c4:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11c6:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11c8:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    11ca:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11cc:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ce:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    11d0:	601c      	str	r4, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11d2:	6058      	str	r0, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11d4:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    11d6:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11d8:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11dc:	bf0c      	ite	eq
    11de:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11e0:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11e2:	4b2b      	ldr	r3, [pc, #172]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11e4:	064d      	lsls	r5, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11e6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11ea:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ec:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11f0:	bf54      	ite	pl
    11f2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11f4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11f6:	2201      	movs	r2, #1
    11f8:	4b25      	ldr	r3, [pc, #148]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    11fa:	068c      	lsls	r4, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11fc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11fe:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1200:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1202:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1206:	bf54      	ite	pl
    1208:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    120a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    120c:	2201      	movs	r2, #1
    120e:	4b20      	ldr	r3, [pc, #128]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1210:	06c8      	lsls	r0, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1212:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1214:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1216:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1218:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    121c:	bf54      	ite	pl
    121e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1220:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1222:	2201      	movs	r2, #1
    1224:	4b1a      	ldr	r3, [pc, #104]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1226:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1228:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    122a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    122c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    122e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1232:	bf54      	ite	pl
    1234:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1236:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1238:	2201      	movs	r2, #1
    123a:	4b15      	ldr	r3, [pc, #84]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    123c:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    123e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1240:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1242:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1244:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1248:	bf54      	ite	pl
    124a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    124c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    124e:	2201      	movs	r2, #1
    1250:	4b0f      	ldr	r3, [pc, #60]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1252:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1254:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1256:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1258:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    125a:	f04f 0202 	mov.w	r2, #2
    125e:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1262:	bf54      	ite	pl
    1264:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1266:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1268:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    126a:	2003      	movs	r0, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    126c:	4b08      	ldr	r3, [pc, #32]	; (1290 <CM3DS_MPS2_i2c_read+0x250>)
    126e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1270:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1272:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1274:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1276:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1278:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    127a:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    127c:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    127e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1280:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1282:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1284:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1286:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1288:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    128a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    128c:	6018      	str	r0, [r3, #0]
    128e:	e001      	b.n	1294 <CM3DS_MPS2_i2c_read+0x254>
    1290:	40023000 	.word	0x40023000
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1294:	6819      	ldr	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1296:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1298:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    129a:	6018      	str	r0, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    129c:	681b      	ldr	r3, [r3, #0]
     data         = 0;
    129e:	f011 0f02 	tst.w	r1, #2
    12a2:	bf14      	ite	ne
    12a4:	2080      	movne	r0, #128	; 0x80
    12a6:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12a8:	079b      	lsls	r3, r3, #30
    12aa:	d500      	bpl.n	12ae <CM3DS_MPS2_i2c_read+0x26e>
             data += (1 << (7 - loop));
    12ac:	3040      	adds	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ae:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12b0:	2103      	movs	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12b2:	4b27      	ldr	r3, [pc, #156]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
    12b4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12b6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12b8:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12ba:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12bc:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12be:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12c0:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12c4:	4b22      	ldr	r3, [pc, #136]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    12c6:	bf48      	it	mi
    12c8:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ca:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12cc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12ce:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12d0:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12d2:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12d4:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12d6:	f04f 0201 	mov.w	r2, #1
    12da:	4b1d      	ldr	r3, [pc, #116]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    12dc:	bf48      	it	mi
    12de:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12e0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12e2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12e4:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12e6:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12e8:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ee:	4b18      	ldr	r3, [pc, #96]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    12f0:	bf48      	it	mi
    12f2:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12f4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12f6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12f8:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12fa:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    12fc:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	079d      	lsls	r5, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1302:	4b13      	ldr	r3, [pc, #76]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1304:	bf48      	it	mi
    1306:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1308:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    130a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    130c:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    130e:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1310:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	079c      	lsls	r4, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1316:	4b0e      	ldr	r3, [pc, #56]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1318:	bf48      	it	mi
    131a:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    131c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    131e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1320:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	0799      	lsls	r1, r3, #30
    1326:	d500      	bpl.n	132a <CM3DS_MPS2_i2c_read+0x2ea>
             data += (1 << (7 - loop));
    1328:	4410      	add	r0, r2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    132a:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);

     return rxdata;
 }
    132c:	bc30      	pop	{r4, r5}
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    132e:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1330:	4b07      	ldr	r3, [pc, #28]	; (1350 <CM3DS_MPS2_i2c_read+0x310>)
     return rxdata;
    1332:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1334:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1336:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1338:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    133a:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    133c:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    133e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1340:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1342:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1344:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1346:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1348:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    134a:	6019      	str	r1, [r3, #0]
 }
    134c:	4770      	bx	lr
    134e:	bf00      	nop
    1350:	40023000 	.word	0x40023000

00001354 <CM3DS_MPS2_i2c_write>:

 // Write data stream and write one byte
 void CM3DS_MPS2_i2c_write(unsigned char reg_addr, unsigned char data_byte, unsigned char sadr)
 {
    1354:	b470      	push	{r4, r5, r6}
     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    1356:	2603      	movs	r6, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1358:	2501      	movs	r5, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    135a:	2402      	movs	r4, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    135c:	4b90      	ldr	r3, [pc, #576]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
    135e:	601e      	str	r6, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1360:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1362:	605d      	str	r5, [r3, #4]
         if (c & (1 << (7 - loop)))
    1364:	09d5      	lsrs	r5, r2, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1366:	bf0c      	ite	eq
    1368:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    136a:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    136c:	2401      	movs	r4, #1
    136e:	4b8c      	ldr	r3, [pc, #560]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1370:	0655      	lsls	r5, r2, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1372:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1374:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1376:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1378:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    137c:	bf54      	ite	pl
    137e:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1380:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1382:	2401      	movs	r4, #1
    1384:	4b86      	ldr	r3, [pc, #536]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1386:	0696      	lsls	r6, r2, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1388:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    138a:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    138c:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    138e:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1392:	bf54      	ite	pl
    1394:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1396:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1398:	2401      	movs	r4, #1
    139a:	4b81      	ldr	r3, [pc, #516]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    139c:	06d5      	lsls	r5, r2, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    139e:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13a0:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13a2:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13a4:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13a8:	bf54      	ite	pl
    13aa:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13ac:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13ae:	2401      	movs	r4, #1
    13b0:	4b7b      	ldr	r3, [pc, #492]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    13b2:	0716      	lsls	r6, r2, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13b4:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13b6:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13b8:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13ba:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13be:	bf54      	ite	pl
    13c0:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13c2:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13c4:	2401      	movs	r4, #1
    13c6:	4b76      	ldr	r3, [pc, #472]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    13c8:	0755      	lsls	r5, r2, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13ca:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13cc:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13ce:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13d0:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13d4:	bf54      	ite	pl
    13d6:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13d8:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13da:	2401      	movs	r4, #1
    13dc:	4b70      	ldr	r3, [pc, #448]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    13de:	0796      	lsls	r6, r2, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13e0:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13e2:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13e4:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13e6:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    13ea:	bf54      	ite	pl
    13ec:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13ee:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13f0:	2401      	movs	r4, #1
         if (c & (1 << (7 - loop)))
    13f2:	f012 0f01 	tst.w	r2, #1
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    13f6:	f04f 0202 	mov.w	r2, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    13fa:	4b69      	ldr	r3, [pc, #420]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
    13fc:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    13fe:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1400:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1402:	bf14      	ite	ne
    1404:	601a      	strne	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1406:	605a      	streq	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1408:	2402      	movs	r4, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    140a:	2201      	movs	r2, #1
    140c:	4b64      	ldr	r3, [pc, #400]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
    140e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1410:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1412:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1414:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1416:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1418:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    141a:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    141c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    141e:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1420:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    1422:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1424:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1428:	bf0c      	ite	eq
    142a:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    142c:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    142e:	4b5c      	ldr	r3, [pc, #368]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1430:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1432:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1434:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1436:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1438:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    143c:	bf54      	ite	pl
    143e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1440:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1442:	2201      	movs	r2, #1
    1444:	4b56      	ldr	r3, [pc, #344]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1446:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1448:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    144a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    144c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    144e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1452:	bf54      	ite	pl
    1454:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1456:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1458:	2201      	movs	r2, #1
    145a:	4b51      	ldr	r3, [pc, #324]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    145c:	06c6      	lsls	r6, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    145e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1460:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1462:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1464:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1468:	bf54      	ite	pl
    146a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    146c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    146e:	2201      	movs	r2, #1
    1470:	4b4b      	ldr	r3, [pc, #300]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1472:	0705      	lsls	r5, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1474:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1476:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1478:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    147a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    147e:	bf54      	ite	pl
    1480:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1482:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1484:	2201      	movs	r2, #1
    1486:	4b46      	ldr	r3, [pc, #280]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1488:	0744      	lsls	r4, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    148a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    148c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    148e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1490:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1494:	bf54      	ite	pl
    1496:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1498:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    149a:	2201      	movs	r2, #1
    149c:	4b40      	ldr	r3, [pc, #256]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    149e:	0786      	lsls	r6, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14a0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14a2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14a4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14a6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14aa:	bf54      	ite	pl
    14ac:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14ae:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14b0:	2201      	movs	r2, #1
    14b2:	4b3b      	ldr	r3, [pc, #236]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    14b4:	07c5      	lsls	r5, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14b6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14b8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14ba:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14bc:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14c0:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14c4:	bf4c      	ite	mi
    14c6:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14c8:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14ca:	2201      	movs	r2, #1
    14cc:	4b34      	ldr	r3, [pc, #208]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
    14ce:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14d0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14d2:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14d4:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14d6:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14d8:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    14da:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14dc:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14de:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14e0:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    14e2:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14e4:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14e8:	bf0c      	ite	eq
    14ea:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14ec:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14ee:	4b2c      	ldr	r3, [pc, #176]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    14f0:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    14f2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14f4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    14f6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    14f8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    14fc:	bf54      	ite	pl
    14fe:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1500:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1502:	2201      	movs	r2, #1
    1504:	4b26      	ldr	r3, [pc, #152]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1506:	0688      	lsls	r0, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1508:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    150a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    150c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    150e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1512:	bf54      	ite	pl
    1514:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1516:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1518:	2201      	movs	r2, #1
    151a:	4b21      	ldr	r3, [pc, #132]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    151c:	06ce      	lsls	r6, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    151e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1520:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1522:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1524:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1528:	bf54      	ite	pl
    152a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    152c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    152e:	2201      	movs	r2, #1
    1530:	4b1b      	ldr	r3, [pc, #108]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1532:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1534:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1536:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1538:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    153a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    153e:	bf54      	ite	pl
    1540:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1542:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1544:	2201      	movs	r2, #1
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1548:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    154a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    154c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    154e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1550:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1554:	bf54      	ite	pl
    1556:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1558:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    155a:	2201      	movs	r2, #1
    155c:	4b10      	ldr	r3, [pc, #64]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    155e:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1560:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1562:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1564:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1566:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    156a:	bf54      	ite	pl
    156c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    156e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1570:	2201      	movs	r2, #1
    1572:	4b0b      	ldr	r3, [pc, #44]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1574:	07c9      	lsls	r1, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1576:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1578:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    157a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    157c:	f04f 0202 	mov.w	r2, #2
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
 }
    1580:	bc70      	pop	{r4, r5, r6}
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1582:	bf4c      	ite	mi
    1584:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1586:	605a      	strpl	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1588:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    158a:	2201      	movs	r2, #1
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <CM3DS_MPS2_i2c_write+0x24c>)
    158e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1590:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1592:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1594:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1596:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1598:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    159a:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    159c:	6019      	str	r1, [r3, #0]
 }
    159e:	4770      	bx	lr
    15a0:	40023000 	.word	0x40023000

000015a4 <SystemCoreClockUpdate>:
    15a4:	4b01      	ldr	r3, [pc, #4]	; (15ac <SystemCoreClockUpdate+0x8>)
    15a6:	4a02      	ldr	r2, [pc, #8]	; (15b0 <SystemCoreClockUpdate+0xc>)
    15a8:	601a      	str	r2, [r3, #0]
    15aa:	4770      	bx	lr
    15ac:	20000004 	.word	0x20000004
    15b0:	017d7840 	.word	0x017d7840

000015b4 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    15b4:	4b01      	ldr	r3, [pc, #4]	; (15bc <SystemInit+0x8>)
    15b6:	4a02      	ldr	r2, [pc, #8]	; (15c0 <SystemInit+0xc>)
    15b8:	601a      	str	r2, [r3, #0]

}
    15ba:	4770      	bx	lr
    15bc:	20000004 	.word	0x20000004
    15c0:	017d7840 	.word	0x017d7840

000015c4 <exit>:
    15c4:	b508      	push	{r3, lr}
    15c6:	4b07      	ldr	r3, [pc, #28]	; (15e4 <exit+0x20>)
    15c8:	4604      	mov	r4, r0
    15ca:	b113      	cbz	r3, 15d2 <exit+0xe>
    15cc:	2100      	movs	r1, #0
    15ce:	f3af 8000 	nop.w
    15d2:	4b05      	ldr	r3, [pc, #20]	; (15e8 <exit+0x24>)
    15d4:	6818      	ldr	r0, [r3, #0]
    15d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    15d8:	b103      	cbz	r3, 15dc <exit+0x18>
    15da:	4798      	blx	r3
    15dc:	4620      	mov	r0, r4
    15de:	f000 fff3 	bl	25c8 <_exit>
    15e2:	bf00      	nop
    15e4:	00000000 	.word	0x00000000
    15e8:	00002d00 	.word	0x00002d00

000015ec <memset>:
    15ec:	4603      	mov	r3, r0
    15ee:	4402      	add	r2, r0
    15f0:	4293      	cmp	r3, r2
    15f2:	d100      	bne.n	15f6 <memset+0xa>
    15f4:	4770      	bx	lr
    15f6:	f803 1b01 	strb.w	r1, [r3], #1
    15fa:	e7f9      	b.n	15f0 <memset+0x4>

000015fc <iprintf>:
    15fc:	b40f      	push	{r0, r1, r2, r3}
    15fe:	4b0a      	ldr	r3, [pc, #40]	; (1628 <iprintf+0x2c>)
    1600:	b513      	push	{r0, r1, r4, lr}
    1602:	681c      	ldr	r4, [r3, #0]
    1604:	b124      	cbz	r4, 1610 <iprintf+0x14>
    1606:	69a3      	ldr	r3, [r4, #24]
    1608:	b913      	cbnz	r3, 1610 <iprintf+0x14>
    160a:	4620      	mov	r0, r4
    160c:	f000 fa7a 	bl	1b04 <__sinit>
    1610:	ab05      	add	r3, sp, #20
    1612:	9a04      	ldr	r2, [sp, #16]
    1614:	68a1      	ldr	r1, [r4, #8]
    1616:	4620      	mov	r0, r4
    1618:	9301      	str	r3, [sp, #4]
    161a:	f000 fc37 	bl	1e8c <_vfiprintf_r>
    161e:	b002      	add	sp, #8
    1620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1624:	b004      	add	sp, #16
    1626:	4770      	bx	lr
    1628:	20000008 	.word	0x20000008

0000162c <_puts_r>:
    162c:	b570      	push	{r4, r5, r6, lr}
    162e:	460e      	mov	r6, r1
    1630:	4605      	mov	r5, r0
    1632:	b118      	cbz	r0, 163c <_puts_r+0x10>
    1634:	6983      	ldr	r3, [r0, #24]
    1636:	b90b      	cbnz	r3, 163c <_puts_r+0x10>
    1638:	f000 fa64 	bl	1b04 <__sinit>
    163c:	69ab      	ldr	r3, [r5, #24]
    163e:	68ac      	ldr	r4, [r5, #8]
    1640:	b913      	cbnz	r3, 1648 <_puts_r+0x1c>
    1642:	4628      	mov	r0, r5
    1644:	f000 fa5e 	bl	1b04 <__sinit>
    1648:	4b23      	ldr	r3, [pc, #140]	; (16d8 <_puts_r+0xac>)
    164a:	429c      	cmp	r4, r3
    164c:	d117      	bne.n	167e <_puts_r+0x52>
    164e:	686c      	ldr	r4, [r5, #4]
    1650:	89a3      	ldrh	r3, [r4, #12]
    1652:	071b      	lsls	r3, r3, #28
    1654:	d51d      	bpl.n	1692 <_puts_r+0x66>
    1656:	6923      	ldr	r3, [r4, #16]
    1658:	b1db      	cbz	r3, 1692 <_puts_r+0x66>
    165a:	3e01      	subs	r6, #1
    165c:	68a3      	ldr	r3, [r4, #8]
    165e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1662:	3b01      	subs	r3, #1
    1664:	60a3      	str	r3, [r4, #8]
    1666:	b9e9      	cbnz	r1, 16a4 <_puts_r+0x78>
    1668:	2b00      	cmp	r3, #0
    166a:	da2e      	bge.n	16ca <_puts_r+0x9e>
    166c:	4622      	mov	r2, r4
    166e:	210a      	movs	r1, #10
    1670:	4628      	mov	r0, r5
    1672:	f000 f897 	bl	17a4 <__swbuf_r>
    1676:	3001      	adds	r0, #1
    1678:	d011      	beq.n	169e <_puts_r+0x72>
    167a:	200a      	movs	r0, #10
    167c:	e011      	b.n	16a2 <_puts_r+0x76>
    167e:	4b17      	ldr	r3, [pc, #92]	; (16dc <_puts_r+0xb0>)
    1680:	429c      	cmp	r4, r3
    1682:	d101      	bne.n	1688 <_puts_r+0x5c>
    1684:	68ac      	ldr	r4, [r5, #8]
    1686:	e7e3      	b.n	1650 <_puts_r+0x24>
    1688:	4b15      	ldr	r3, [pc, #84]	; (16e0 <_puts_r+0xb4>)
    168a:	429c      	cmp	r4, r3
    168c:	bf08      	it	eq
    168e:	68ec      	ldreq	r4, [r5, #12]
    1690:	e7de      	b.n	1650 <_puts_r+0x24>
    1692:	4621      	mov	r1, r4
    1694:	4628      	mov	r0, r5
    1696:	f000 f8d7 	bl	1848 <__swsetup_r>
    169a:	2800      	cmp	r0, #0
    169c:	d0dd      	beq.n	165a <_puts_r+0x2e>
    169e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16a2:	bd70      	pop	{r4, r5, r6, pc}
    16a4:	2b00      	cmp	r3, #0
    16a6:	da04      	bge.n	16b2 <_puts_r+0x86>
    16a8:	69a2      	ldr	r2, [r4, #24]
    16aa:	429a      	cmp	r2, r3
    16ac:	dc06      	bgt.n	16bc <_puts_r+0x90>
    16ae:	290a      	cmp	r1, #10
    16b0:	d004      	beq.n	16bc <_puts_r+0x90>
    16b2:	6823      	ldr	r3, [r4, #0]
    16b4:	1c5a      	adds	r2, r3, #1
    16b6:	6022      	str	r2, [r4, #0]
    16b8:	7019      	strb	r1, [r3, #0]
    16ba:	e7cf      	b.n	165c <_puts_r+0x30>
    16bc:	4622      	mov	r2, r4
    16be:	4628      	mov	r0, r5
    16c0:	f000 f870 	bl	17a4 <__swbuf_r>
    16c4:	3001      	adds	r0, #1
    16c6:	d1c9      	bne.n	165c <_puts_r+0x30>
    16c8:	e7e9      	b.n	169e <_puts_r+0x72>
    16ca:	200a      	movs	r0, #10
    16cc:	6823      	ldr	r3, [r4, #0]
    16ce:	1c5a      	adds	r2, r3, #1
    16d0:	6022      	str	r2, [r4, #0]
    16d2:	7018      	strb	r0, [r3, #0]
    16d4:	e7e5      	b.n	16a2 <_puts_r+0x76>
    16d6:	bf00      	nop
    16d8:	00002d24 	.word	0x00002d24
    16dc:	00002d44 	.word	0x00002d44
    16e0:	00002d04 	.word	0x00002d04

000016e4 <puts>:
    16e4:	4b02      	ldr	r3, [pc, #8]	; (16f0 <puts+0xc>)
    16e6:	4601      	mov	r1, r0
    16e8:	6818      	ldr	r0, [r3, #0]
    16ea:	f7ff bf9f 	b.w	162c <_puts_r>
    16ee:	bf00      	nop
    16f0:	20000008 	.word	0x20000008

000016f4 <srand>:
    16f4:	b538      	push	{r3, r4, r5, lr}
    16f6:	4b0d      	ldr	r3, [pc, #52]	; (172c <srand+0x38>)
    16f8:	4605      	mov	r5, r0
    16fa:	681c      	ldr	r4, [r3, #0]
    16fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    16fe:	b97b      	cbnz	r3, 1720 <srand+0x2c>
    1700:	2018      	movs	r0, #24
    1702:	f000 faed 	bl	1ce0 <malloc>
    1706:	4a0a      	ldr	r2, [pc, #40]	; (1730 <srand+0x3c>)
    1708:	4b0a      	ldr	r3, [pc, #40]	; (1734 <srand+0x40>)
    170a:	63a0      	str	r0, [r4, #56]	; 0x38
    170c:	e9c0 2300 	strd	r2, r3, [r0]
    1710:	4b09      	ldr	r3, [pc, #36]	; (1738 <srand+0x44>)
    1712:	2201      	movs	r2, #1
    1714:	6083      	str	r3, [r0, #8]
    1716:	230b      	movs	r3, #11
    1718:	8183      	strh	r3, [r0, #12]
    171a:	2300      	movs	r3, #0
    171c:	e9c0 2304 	strd	r2, r3, [r0, #16]
    1720:	2200      	movs	r2, #0
    1722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1724:	611d      	str	r5, [r3, #16]
    1726:	615a      	str	r2, [r3, #20]
    1728:	bd38      	pop	{r3, r4, r5, pc}
    172a:	bf00      	nop
    172c:	20000008 	.word	0x20000008
    1730:	abcd330e 	.word	0xabcd330e
    1734:	e66d1234 	.word	0xe66d1234
    1738:	0005deec 	.word	0x0005deec

0000173c <rand>:
    173c:	b538      	push	{r3, r4, r5, lr}
    173e:	4b13      	ldr	r3, [pc, #76]	; (178c <rand+0x50>)
    1740:	681c      	ldr	r4, [r3, #0]
    1742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1744:	b97b      	cbnz	r3, 1766 <rand+0x2a>
    1746:	2018      	movs	r0, #24
    1748:	f000 faca 	bl	1ce0 <malloc>
    174c:	4a10      	ldr	r2, [pc, #64]	; (1790 <rand+0x54>)
    174e:	4b11      	ldr	r3, [pc, #68]	; (1794 <rand+0x58>)
    1750:	63a0      	str	r0, [r4, #56]	; 0x38
    1752:	e9c0 2300 	strd	r2, r3, [r0]
    1756:	4b10      	ldr	r3, [pc, #64]	; (1798 <rand+0x5c>)
    1758:	2201      	movs	r2, #1
    175a:	6083      	str	r3, [r0, #8]
    175c:	230b      	movs	r3, #11
    175e:	8183      	strh	r3, [r0, #12]
    1760:	2300      	movs	r3, #0
    1762:	e9c0 2304 	strd	r2, r3, [r0, #16]
    1766:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1768:	480c      	ldr	r0, [pc, #48]	; (179c <rand+0x60>)
    176a:	690a      	ldr	r2, [r1, #16]
    176c:	694b      	ldr	r3, [r1, #20]
    176e:	4350      	muls	r0, r2
    1770:	4c0b      	ldr	r4, [pc, #44]	; (17a0 <rand+0x64>)
    1772:	fb04 0003 	mla	r0, r4, r3, r0
    1776:	fba2 2304 	umull	r2, r3, r2, r4
    177a:	4403      	add	r3, r0
    177c:	1c54      	adds	r4, r2, #1
    177e:	f143 0500 	adc.w	r5, r3, #0
    1782:	e9c1 4504 	strd	r4, r5, [r1, #16]
    1786:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
    178a:	bd38      	pop	{r3, r4, r5, pc}
    178c:	20000008 	.word	0x20000008
    1790:	abcd330e 	.word	0xabcd330e
    1794:	e66d1234 	.word	0xe66d1234
    1798:	0005deec 	.word	0x0005deec
    179c:	5851f42d 	.word	0x5851f42d
    17a0:	4c957f2d 	.word	0x4c957f2d

000017a4 <__swbuf_r>:
    17a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17a6:	460e      	mov	r6, r1
    17a8:	4614      	mov	r4, r2
    17aa:	4605      	mov	r5, r0
    17ac:	b118      	cbz	r0, 17b6 <__swbuf_r+0x12>
    17ae:	6983      	ldr	r3, [r0, #24]
    17b0:	b90b      	cbnz	r3, 17b6 <__swbuf_r+0x12>
    17b2:	f000 f9a7 	bl	1b04 <__sinit>
    17b6:	4b21      	ldr	r3, [pc, #132]	; (183c <__swbuf_r+0x98>)
    17b8:	429c      	cmp	r4, r3
    17ba:	d12a      	bne.n	1812 <__swbuf_r+0x6e>
    17bc:	686c      	ldr	r4, [r5, #4]
    17be:	69a3      	ldr	r3, [r4, #24]
    17c0:	60a3      	str	r3, [r4, #8]
    17c2:	89a3      	ldrh	r3, [r4, #12]
    17c4:	071a      	lsls	r2, r3, #28
    17c6:	d52e      	bpl.n	1826 <__swbuf_r+0x82>
    17c8:	6923      	ldr	r3, [r4, #16]
    17ca:	b363      	cbz	r3, 1826 <__swbuf_r+0x82>
    17cc:	6923      	ldr	r3, [r4, #16]
    17ce:	6820      	ldr	r0, [r4, #0]
    17d0:	b2f6      	uxtb	r6, r6
    17d2:	1ac0      	subs	r0, r0, r3
    17d4:	6963      	ldr	r3, [r4, #20]
    17d6:	4637      	mov	r7, r6
    17d8:	4283      	cmp	r3, r0
    17da:	dc04      	bgt.n	17e6 <__swbuf_r+0x42>
    17dc:	4621      	mov	r1, r4
    17de:	4628      	mov	r0, r5
    17e0:	f000 f926 	bl	1a30 <_fflush_r>
    17e4:	bb28      	cbnz	r0, 1832 <__swbuf_r+0x8e>
    17e6:	68a3      	ldr	r3, [r4, #8]
    17e8:	3001      	adds	r0, #1
    17ea:	3b01      	subs	r3, #1
    17ec:	60a3      	str	r3, [r4, #8]
    17ee:	6823      	ldr	r3, [r4, #0]
    17f0:	1c5a      	adds	r2, r3, #1
    17f2:	6022      	str	r2, [r4, #0]
    17f4:	701e      	strb	r6, [r3, #0]
    17f6:	6963      	ldr	r3, [r4, #20]
    17f8:	4283      	cmp	r3, r0
    17fa:	d004      	beq.n	1806 <__swbuf_r+0x62>
    17fc:	89a3      	ldrh	r3, [r4, #12]
    17fe:	07db      	lsls	r3, r3, #31
    1800:	d519      	bpl.n	1836 <__swbuf_r+0x92>
    1802:	2e0a      	cmp	r6, #10
    1804:	d117      	bne.n	1836 <__swbuf_r+0x92>
    1806:	4621      	mov	r1, r4
    1808:	4628      	mov	r0, r5
    180a:	f000 f911 	bl	1a30 <_fflush_r>
    180e:	b190      	cbz	r0, 1836 <__swbuf_r+0x92>
    1810:	e00f      	b.n	1832 <__swbuf_r+0x8e>
    1812:	4b0b      	ldr	r3, [pc, #44]	; (1840 <__swbuf_r+0x9c>)
    1814:	429c      	cmp	r4, r3
    1816:	d101      	bne.n	181c <__swbuf_r+0x78>
    1818:	68ac      	ldr	r4, [r5, #8]
    181a:	e7d0      	b.n	17be <__swbuf_r+0x1a>
    181c:	4b09      	ldr	r3, [pc, #36]	; (1844 <__swbuf_r+0xa0>)
    181e:	429c      	cmp	r4, r3
    1820:	bf08      	it	eq
    1822:	68ec      	ldreq	r4, [r5, #12]
    1824:	e7cb      	b.n	17be <__swbuf_r+0x1a>
    1826:	4621      	mov	r1, r4
    1828:	4628      	mov	r0, r5
    182a:	f000 f80d 	bl	1848 <__swsetup_r>
    182e:	2800      	cmp	r0, #0
    1830:	d0cc      	beq.n	17cc <__swbuf_r+0x28>
    1832:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1836:	4638      	mov	r0, r7
    1838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    183a:	bf00      	nop
    183c:	00002d24 	.word	0x00002d24
    1840:	00002d44 	.word	0x00002d44
    1844:	00002d04 	.word	0x00002d04

00001848 <__swsetup_r>:
    1848:	4b32      	ldr	r3, [pc, #200]	; (1914 <__swsetup_r+0xcc>)
    184a:	b570      	push	{r4, r5, r6, lr}
    184c:	681d      	ldr	r5, [r3, #0]
    184e:	4606      	mov	r6, r0
    1850:	460c      	mov	r4, r1
    1852:	b125      	cbz	r5, 185e <__swsetup_r+0x16>
    1854:	69ab      	ldr	r3, [r5, #24]
    1856:	b913      	cbnz	r3, 185e <__swsetup_r+0x16>
    1858:	4628      	mov	r0, r5
    185a:	f000 f953 	bl	1b04 <__sinit>
    185e:	4b2e      	ldr	r3, [pc, #184]	; (1918 <__swsetup_r+0xd0>)
    1860:	429c      	cmp	r4, r3
    1862:	d10f      	bne.n	1884 <__swsetup_r+0x3c>
    1864:	686c      	ldr	r4, [r5, #4]
    1866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    186a:	b29a      	uxth	r2, r3
    186c:	0715      	lsls	r5, r2, #28
    186e:	d42c      	bmi.n	18ca <__swsetup_r+0x82>
    1870:	06d0      	lsls	r0, r2, #27
    1872:	d411      	bmi.n	1898 <__swsetup_r+0x50>
    1874:	2209      	movs	r2, #9
    1876:	6032      	str	r2, [r6, #0]
    1878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    187c:	81a3      	strh	r3, [r4, #12]
    187e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1882:	e03e      	b.n	1902 <__swsetup_r+0xba>
    1884:	4b25      	ldr	r3, [pc, #148]	; (191c <__swsetup_r+0xd4>)
    1886:	429c      	cmp	r4, r3
    1888:	d101      	bne.n	188e <__swsetup_r+0x46>
    188a:	68ac      	ldr	r4, [r5, #8]
    188c:	e7eb      	b.n	1866 <__swsetup_r+0x1e>
    188e:	4b24      	ldr	r3, [pc, #144]	; (1920 <__swsetup_r+0xd8>)
    1890:	429c      	cmp	r4, r3
    1892:	bf08      	it	eq
    1894:	68ec      	ldreq	r4, [r5, #12]
    1896:	e7e6      	b.n	1866 <__swsetup_r+0x1e>
    1898:	0751      	lsls	r1, r2, #29
    189a:	d512      	bpl.n	18c2 <__swsetup_r+0x7a>
    189c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    189e:	b141      	cbz	r1, 18b2 <__swsetup_r+0x6a>
    18a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    18a4:	4299      	cmp	r1, r3
    18a6:	d002      	beq.n	18ae <__swsetup_r+0x66>
    18a8:	4630      	mov	r0, r6
    18aa:	f000 fa21 	bl	1cf0 <_free_r>
    18ae:	2300      	movs	r3, #0
    18b0:	6363      	str	r3, [r4, #52]	; 0x34
    18b2:	89a3      	ldrh	r3, [r4, #12]
    18b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    18b8:	81a3      	strh	r3, [r4, #12]
    18ba:	2300      	movs	r3, #0
    18bc:	6063      	str	r3, [r4, #4]
    18be:	6923      	ldr	r3, [r4, #16]
    18c0:	6023      	str	r3, [r4, #0]
    18c2:	89a3      	ldrh	r3, [r4, #12]
    18c4:	f043 0308 	orr.w	r3, r3, #8
    18c8:	81a3      	strh	r3, [r4, #12]
    18ca:	6923      	ldr	r3, [r4, #16]
    18cc:	b94b      	cbnz	r3, 18e2 <__swsetup_r+0x9a>
    18ce:	89a3      	ldrh	r3, [r4, #12]
    18d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    18d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    18d8:	d003      	beq.n	18e2 <__swsetup_r+0x9a>
    18da:	4621      	mov	r1, r4
    18dc:	4630      	mov	r0, r6
    18de:	f000 f9bf 	bl	1c60 <__smakebuf_r>
    18e2:	89a2      	ldrh	r2, [r4, #12]
    18e4:	f012 0301 	ands.w	r3, r2, #1
    18e8:	d00c      	beq.n	1904 <__swsetup_r+0xbc>
    18ea:	2300      	movs	r3, #0
    18ec:	60a3      	str	r3, [r4, #8]
    18ee:	6963      	ldr	r3, [r4, #20]
    18f0:	425b      	negs	r3, r3
    18f2:	61a3      	str	r3, [r4, #24]
    18f4:	6923      	ldr	r3, [r4, #16]
    18f6:	b953      	cbnz	r3, 190e <__swsetup_r+0xc6>
    18f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    18fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1900:	d1ba      	bne.n	1878 <__swsetup_r+0x30>
    1902:	bd70      	pop	{r4, r5, r6, pc}
    1904:	0792      	lsls	r2, r2, #30
    1906:	bf58      	it	pl
    1908:	6963      	ldrpl	r3, [r4, #20]
    190a:	60a3      	str	r3, [r4, #8]
    190c:	e7f2      	b.n	18f4 <__swsetup_r+0xac>
    190e:	2000      	movs	r0, #0
    1910:	e7f7      	b.n	1902 <__swsetup_r+0xba>
    1912:	bf00      	nop
    1914:	20000008 	.word	0x20000008
    1918:	00002d24 	.word	0x00002d24
    191c:	00002d44 	.word	0x00002d44
    1920:	00002d04 	.word	0x00002d04

00001924 <__sflush_r>:
    1924:	898a      	ldrh	r2, [r1, #12]
    1926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    192a:	4605      	mov	r5, r0
    192c:	0710      	lsls	r0, r2, #28
    192e:	460c      	mov	r4, r1
    1930:	d458      	bmi.n	19e4 <__sflush_r+0xc0>
    1932:	684b      	ldr	r3, [r1, #4]
    1934:	2b00      	cmp	r3, #0
    1936:	dc05      	bgt.n	1944 <__sflush_r+0x20>
    1938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    193a:	2b00      	cmp	r3, #0
    193c:	dc02      	bgt.n	1944 <__sflush_r+0x20>
    193e:	2000      	movs	r0, #0
    1940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1946:	2e00      	cmp	r6, #0
    1948:	d0f9      	beq.n	193e <__sflush_r+0x1a>
    194a:	2300      	movs	r3, #0
    194c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1950:	682f      	ldr	r7, [r5, #0]
    1952:	6a21      	ldr	r1, [r4, #32]
    1954:	602b      	str	r3, [r5, #0]
    1956:	d032      	beq.n	19be <__sflush_r+0x9a>
    1958:	6d60      	ldr	r0, [r4, #84]	; 0x54
    195a:	89a3      	ldrh	r3, [r4, #12]
    195c:	075a      	lsls	r2, r3, #29
    195e:	d505      	bpl.n	196c <__sflush_r+0x48>
    1960:	6863      	ldr	r3, [r4, #4]
    1962:	1ac0      	subs	r0, r0, r3
    1964:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1966:	b10b      	cbz	r3, 196c <__sflush_r+0x48>
    1968:	6c23      	ldr	r3, [r4, #64]	; 0x40
    196a:	1ac0      	subs	r0, r0, r3
    196c:	2300      	movs	r3, #0
    196e:	4602      	mov	r2, r0
    1970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1972:	6a21      	ldr	r1, [r4, #32]
    1974:	4628      	mov	r0, r5
    1976:	47b0      	blx	r6
    1978:	1c43      	adds	r3, r0, #1
    197a:	89a3      	ldrh	r3, [r4, #12]
    197c:	d106      	bne.n	198c <__sflush_r+0x68>
    197e:	6829      	ldr	r1, [r5, #0]
    1980:	291d      	cmp	r1, #29
    1982:	d848      	bhi.n	1a16 <__sflush_r+0xf2>
    1984:	4a29      	ldr	r2, [pc, #164]	; (1a2c <__sflush_r+0x108>)
    1986:	40ca      	lsrs	r2, r1
    1988:	07d6      	lsls	r6, r2, #31
    198a:	d544      	bpl.n	1a16 <__sflush_r+0xf2>
    198c:	2200      	movs	r2, #0
    198e:	6062      	str	r2, [r4, #4]
    1990:	6922      	ldr	r2, [r4, #16]
    1992:	04d9      	lsls	r1, r3, #19
    1994:	6022      	str	r2, [r4, #0]
    1996:	d504      	bpl.n	19a2 <__sflush_r+0x7e>
    1998:	1c42      	adds	r2, r0, #1
    199a:	d101      	bne.n	19a0 <__sflush_r+0x7c>
    199c:	682b      	ldr	r3, [r5, #0]
    199e:	b903      	cbnz	r3, 19a2 <__sflush_r+0x7e>
    19a0:	6560      	str	r0, [r4, #84]	; 0x54
    19a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    19a4:	602f      	str	r7, [r5, #0]
    19a6:	2900      	cmp	r1, #0
    19a8:	d0c9      	beq.n	193e <__sflush_r+0x1a>
    19aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
    19ae:	4299      	cmp	r1, r3
    19b0:	d002      	beq.n	19b8 <__sflush_r+0x94>
    19b2:	4628      	mov	r0, r5
    19b4:	f000 f99c 	bl	1cf0 <_free_r>
    19b8:	2000      	movs	r0, #0
    19ba:	6360      	str	r0, [r4, #52]	; 0x34
    19bc:	e7c0      	b.n	1940 <__sflush_r+0x1c>
    19be:	2301      	movs	r3, #1
    19c0:	4628      	mov	r0, r5
    19c2:	47b0      	blx	r6
    19c4:	1c41      	adds	r1, r0, #1
    19c6:	d1c8      	bne.n	195a <__sflush_r+0x36>
    19c8:	682b      	ldr	r3, [r5, #0]
    19ca:	2b00      	cmp	r3, #0
    19cc:	d0c5      	beq.n	195a <__sflush_r+0x36>
    19ce:	2b1d      	cmp	r3, #29
    19d0:	d001      	beq.n	19d6 <__sflush_r+0xb2>
    19d2:	2b16      	cmp	r3, #22
    19d4:	d101      	bne.n	19da <__sflush_r+0xb6>
    19d6:	602f      	str	r7, [r5, #0]
    19d8:	e7b1      	b.n	193e <__sflush_r+0x1a>
    19da:	89a3      	ldrh	r3, [r4, #12]
    19dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19e0:	81a3      	strh	r3, [r4, #12]
    19e2:	e7ad      	b.n	1940 <__sflush_r+0x1c>
    19e4:	690f      	ldr	r7, [r1, #16]
    19e6:	2f00      	cmp	r7, #0
    19e8:	d0a9      	beq.n	193e <__sflush_r+0x1a>
    19ea:	0793      	lsls	r3, r2, #30
    19ec:	bf18      	it	ne
    19ee:	2300      	movne	r3, #0
    19f0:	680e      	ldr	r6, [r1, #0]
    19f2:	bf08      	it	eq
    19f4:	694b      	ldreq	r3, [r1, #20]
    19f6:	eba6 0807 	sub.w	r8, r6, r7
    19fa:	600f      	str	r7, [r1, #0]
    19fc:	608b      	str	r3, [r1, #8]
    19fe:	f1b8 0f00 	cmp.w	r8, #0
    1a02:	dd9c      	ble.n	193e <__sflush_r+0x1a>
    1a04:	4643      	mov	r3, r8
    1a06:	463a      	mov	r2, r7
    1a08:	6a21      	ldr	r1, [r4, #32]
    1a0a:	4628      	mov	r0, r5
    1a0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1a0e:	47b0      	blx	r6
    1a10:	2800      	cmp	r0, #0
    1a12:	dc06      	bgt.n	1a22 <__sflush_r+0xfe>
    1a14:	89a3      	ldrh	r3, [r4, #12]
    1a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a1a:	81a3      	strh	r3, [r4, #12]
    1a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a20:	e78e      	b.n	1940 <__sflush_r+0x1c>
    1a22:	4407      	add	r7, r0
    1a24:	eba8 0800 	sub.w	r8, r8, r0
    1a28:	e7e9      	b.n	19fe <__sflush_r+0xda>
    1a2a:	bf00      	nop
    1a2c:	20400001 	.word	0x20400001

00001a30 <_fflush_r>:
    1a30:	b538      	push	{r3, r4, r5, lr}
    1a32:	690b      	ldr	r3, [r1, #16]
    1a34:	4605      	mov	r5, r0
    1a36:	460c      	mov	r4, r1
    1a38:	b1db      	cbz	r3, 1a72 <_fflush_r+0x42>
    1a3a:	b118      	cbz	r0, 1a44 <_fflush_r+0x14>
    1a3c:	6983      	ldr	r3, [r0, #24]
    1a3e:	b90b      	cbnz	r3, 1a44 <_fflush_r+0x14>
    1a40:	f000 f860 	bl	1b04 <__sinit>
    1a44:	4b0c      	ldr	r3, [pc, #48]	; (1a78 <_fflush_r+0x48>)
    1a46:	429c      	cmp	r4, r3
    1a48:	d109      	bne.n	1a5e <_fflush_r+0x2e>
    1a4a:	686c      	ldr	r4, [r5, #4]
    1a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a50:	b17b      	cbz	r3, 1a72 <_fflush_r+0x42>
    1a52:	4621      	mov	r1, r4
    1a54:	4628      	mov	r0, r5
    1a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a5a:	f7ff bf63 	b.w	1924 <__sflush_r>
    1a5e:	4b07      	ldr	r3, [pc, #28]	; (1a7c <_fflush_r+0x4c>)
    1a60:	429c      	cmp	r4, r3
    1a62:	d101      	bne.n	1a68 <_fflush_r+0x38>
    1a64:	68ac      	ldr	r4, [r5, #8]
    1a66:	e7f1      	b.n	1a4c <_fflush_r+0x1c>
    1a68:	4b05      	ldr	r3, [pc, #20]	; (1a80 <_fflush_r+0x50>)
    1a6a:	429c      	cmp	r4, r3
    1a6c:	bf08      	it	eq
    1a6e:	68ec      	ldreq	r4, [r5, #12]
    1a70:	e7ec      	b.n	1a4c <_fflush_r+0x1c>
    1a72:	2000      	movs	r0, #0
    1a74:	bd38      	pop	{r3, r4, r5, pc}
    1a76:	bf00      	nop
    1a78:	00002d24 	.word	0x00002d24
    1a7c:	00002d44 	.word	0x00002d44
    1a80:	00002d04 	.word	0x00002d04

00001a84 <std>:
    1a84:	2300      	movs	r3, #0
    1a86:	b510      	push	{r4, lr}
    1a88:	4604      	mov	r4, r0
    1a8a:	e9c0 3300 	strd	r3, r3, [r0]
    1a8e:	6083      	str	r3, [r0, #8]
    1a90:	8181      	strh	r1, [r0, #12]
    1a92:	6643      	str	r3, [r0, #100]	; 0x64
    1a94:	81c2      	strh	r2, [r0, #14]
    1a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1a9a:	6183      	str	r3, [r0, #24]
    1a9c:	4619      	mov	r1, r3
    1a9e:	2208      	movs	r2, #8
    1aa0:	305c      	adds	r0, #92	; 0x5c
    1aa2:	f7ff fda3 	bl	15ec <memset>
    1aa6:	4b05      	ldr	r3, [pc, #20]	; (1abc <std+0x38>)
    1aa8:	6224      	str	r4, [r4, #32]
    1aaa:	6263      	str	r3, [r4, #36]	; 0x24
    1aac:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <std+0x3c>)
    1aae:	62a3      	str	r3, [r4, #40]	; 0x28
    1ab0:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <std+0x40>)
    1ab2:	62e3      	str	r3, [r4, #44]	; 0x2c
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <std+0x44>)
    1ab6:	6323      	str	r3, [r4, #48]	; 0x30
    1ab8:	bd10      	pop	{r4, pc}
    1aba:	bf00      	nop
    1abc:	000023e5 	.word	0x000023e5
    1ac0:	00002407 	.word	0x00002407
    1ac4:	0000243f 	.word	0x0000243f
    1ac8:	00002463 	.word	0x00002463

00001acc <_cleanup_r>:
    1acc:	4901      	ldr	r1, [pc, #4]	; (1ad4 <_cleanup_r+0x8>)
    1ace:	f000 b885 	b.w	1bdc <_fwalk_reent>
    1ad2:	bf00      	nop
    1ad4:	00001a31 	.word	0x00001a31

00001ad8 <__sfmoreglue>:
    1ad8:	b570      	push	{r4, r5, r6, lr}
    1ada:	2568      	movs	r5, #104	; 0x68
    1adc:	1e4a      	subs	r2, r1, #1
    1ade:	4355      	muls	r5, r2
    1ae0:	460e      	mov	r6, r1
    1ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1ae6:	f000 f94f 	bl	1d88 <_malloc_r>
    1aea:	4604      	mov	r4, r0
    1aec:	b140      	cbz	r0, 1b00 <__sfmoreglue+0x28>
    1aee:	2100      	movs	r1, #0
    1af0:	e9c0 1600 	strd	r1, r6, [r0]
    1af4:	300c      	adds	r0, #12
    1af6:	60a0      	str	r0, [r4, #8]
    1af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1afc:	f7ff fd76 	bl	15ec <memset>
    1b00:	4620      	mov	r0, r4
    1b02:	bd70      	pop	{r4, r5, r6, pc}

00001b04 <__sinit>:
    1b04:	6983      	ldr	r3, [r0, #24]
    1b06:	b510      	push	{r4, lr}
    1b08:	4604      	mov	r4, r0
    1b0a:	bb33      	cbnz	r3, 1b5a <__sinit+0x56>
    1b0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    1b10:	6503      	str	r3, [r0, #80]	; 0x50
    1b12:	4b12      	ldr	r3, [pc, #72]	; (1b5c <__sinit+0x58>)
    1b14:	4a12      	ldr	r2, [pc, #72]	; (1b60 <__sinit+0x5c>)
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	6282      	str	r2, [r0, #40]	; 0x28
    1b1a:	4298      	cmp	r0, r3
    1b1c:	bf04      	itt	eq
    1b1e:	2301      	moveq	r3, #1
    1b20:	6183      	streq	r3, [r0, #24]
    1b22:	f000 f81f 	bl	1b64 <__sfp>
    1b26:	6060      	str	r0, [r4, #4]
    1b28:	4620      	mov	r0, r4
    1b2a:	f000 f81b 	bl	1b64 <__sfp>
    1b2e:	60a0      	str	r0, [r4, #8]
    1b30:	4620      	mov	r0, r4
    1b32:	f000 f817 	bl	1b64 <__sfp>
    1b36:	2200      	movs	r2, #0
    1b38:	60e0      	str	r0, [r4, #12]
    1b3a:	2104      	movs	r1, #4
    1b3c:	6860      	ldr	r0, [r4, #4]
    1b3e:	f7ff ffa1 	bl	1a84 <std>
    1b42:	2201      	movs	r2, #1
    1b44:	2109      	movs	r1, #9
    1b46:	68a0      	ldr	r0, [r4, #8]
    1b48:	f7ff ff9c 	bl	1a84 <std>
    1b4c:	2202      	movs	r2, #2
    1b4e:	2112      	movs	r1, #18
    1b50:	68e0      	ldr	r0, [r4, #12]
    1b52:	f7ff ff97 	bl	1a84 <std>
    1b56:	2301      	movs	r3, #1
    1b58:	61a3      	str	r3, [r4, #24]
    1b5a:	bd10      	pop	{r4, pc}
    1b5c:	00002d00 	.word	0x00002d00
    1b60:	00001acd 	.word	0x00001acd

00001b64 <__sfp>:
    1b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b66:	4b1b      	ldr	r3, [pc, #108]	; (1bd4 <__sfp+0x70>)
    1b68:	4607      	mov	r7, r0
    1b6a:	681e      	ldr	r6, [r3, #0]
    1b6c:	69b3      	ldr	r3, [r6, #24]
    1b6e:	b913      	cbnz	r3, 1b76 <__sfp+0x12>
    1b70:	4630      	mov	r0, r6
    1b72:	f7ff ffc7 	bl	1b04 <__sinit>
    1b76:	3648      	adds	r6, #72	; 0x48
    1b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    1b7c:	3b01      	subs	r3, #1
    1b7e:	d503      	bpl.n	1b88 <__sfp+0x24>
    1b80:	6833      	ldr	r3, [r6, #0]
    1b82:	b133      	cbz	r3, 1b92 <__sfp+0x2e>
    1b84:	6836      	ldr	r6, [r6, #0]
    1b86:	e7f7      	b.n	1b78 <__sfp+0x14>
    1b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1b8c:	b16d      	cbz	r5, 1baa <__sfp+0x46>
    1b8e:	3468      	adds	r4, #104	; 0x68
    1b90:	e7f4      	b.n	1b7c <__sfp+0x18>
    1b92:	2104      	movs	r1, #4
    1b94:	4638      	mov	r0, r7
    1b96:	f7ff ff9f 	bl	1ad8 <__sfmoreglue>
    1b9a:	6030      	str	r0, [r6, #0]
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d1f1      	bne.n	1b84 <__sfp+0x20>
    1ba0:	230c      	movs	r3, #12
    1ba2:	4604      	mov	r4, r0
    1ba4:	603b      	str	r3, [r7, #0]
    1ba6:	4620      	mov	r0, r4
    1ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <__sfp+0x74>)
    1bac:	6665      	str	r5, [r4, #100]	; 0x64
    1bae:	e9c4 5500 	strd	r5, r5, [r4]
    1bb2:	60a5      	str	r5, [r4, #8]
    1bb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
    1bb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1bbc:	2208      	movs	r2, #8
    1bbe:	4629      	mov	r1, r5
    1bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1bc4:	f7ff fd12 	bl	15ec <memset>
    1bc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    1bcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    1bd0:	e7e9      	b.n	1ba6 <__sfp+0x42>
    1bd2:	bf00      	nop
    1bd4:	00002d00 	.word	0x00002d00
    1bd8:	ffff0001 	.word	0xffff0001

00001bdc <_fwalk_reent>:
    1bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1be0:	4680      	mov	r8, r0
    1be2:	4689      	mov	r9, r1
    1be4:	2600      	movs	r6, #0
    1be6:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1bea:	b914      	cbnz	r4, 1bf2 <_fwalk_reent+0x16>
    1bec:	4630      	mov	r0, r6
    1bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1bf2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    1bf6:	3f01      	subs	r7, #1
    1bf8:	d501      	bpl.n	1bfe <_fwalk_reent+0x22>
    1bfa:	6824      	ldr	r4, [r4, #0]
    1bfc:	e7f5      	b.n	1bea <_fwalk_reent+0xe>
    1bfe:	89ab      	ldrh	r3, [r5, #12]
    1c00:	2b01      	cmp	r3, #1
    1c02:	d907      	bls.n	1c14 <_fwalk_reent+0x38>
    1c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1c08:	3301      	adds	r3, #1
    1c0a:	d003      	beq.n	1c14 <_fwalk_reent+0x38>
    1c0c:	4629      	mov	r1, r5
    1c0e:	4640      	mov	r0, r8
    1c10:	47c8      	blx	r9
    1c12:	4306      	orrs	r6, r0
    1c14:	3568      	adds	r5, #104	; 0x68
    1c16:	e7ee      	b.n	1bf6 <_fwalk_reent+0x1a>

00001c18 <__swhatbuf_r>:
    1c18:	b570      	push	{r4, r5, r6, lr}
    1c1a:	460e      	mov	r6, r1
    1c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1c20:	b096      	sub	sp, #88	; 0x58
    1c22:	2900      	cmp	r1, #0
    1c24:	4614      	mov	r4, r2
    1c26:	461d      	mov	r5, r3
    1c28:	da07      	bge.n	1c3a <__swhatbuf_r+0x22>
    1c2a:	2300      	movs	r3, #0
    1c2c:	602b      	str	r3, [r5, #0]
    1c2e:	89b3      	ldrh	r3, [r6, #12]
    1c30:	061a      	lsls	r2, r3, #24
    1c32:	d410      	bmi.n	1c56 <__swhatbuf_r+0x3e>
    1c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1c38:	e00e      	b.n	1c58 <__swhatbuf_r+0x40>
    1c3a:	466a      	mov	r2, sp
    1c3c:	f000 fc38 	bl	24b0 <_fstat_r>
    1c40:	2800      	cmp	r0, #0
    1c42:	dbf2      	blt.n	1c2a <__swhatbuf_r+0x12>
    1c44:	9a01      	ldr	r2, [sp, #4]
    1c46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1c4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1c4e:	425a      	negs	r2, r3
    1c50:	415a      	adcs	r2, r3
    1c52:	602a      	str	r2, [r5, #0]
    1c54:	e7ee      	b.n	1c34 <__swhatbuf_r+0x1c>
    1c56:	2340      	movs	r3, #64	; 0x40
    1c58:	2000      	movs	r0, #0
    1c5a:	6023      	str	r3, [r4, #0]
    1c5c:	b016      	add	sp, #88	; 0x58
    1c5e:	bd70      	pop	{r4, r5, r6, pc}

00001c60 <__smakebuf_r>:
    1c60:	898b      	ldrh	r3, [r1, #12]
    1c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1c64:	079d      	lsls	r5, r3, #30
    1c66:	4606      	mov	r6, r0
    1c68:	460c      	mov	r4, r1
    1c6a:	d507      	bpl.n	1c7c <__smakebuf_r+0x1c>
    1c6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1c70:	6023      	str	r3, [r4, #0]
    1c72:	6123      	str	r3, [r4, #16]
    1c74:	2301      	movs	r3, #1
    1c76:	6163      	str	r3, [r4, #20]
    1c78:	b002      	add	sp, #8
    1c7a:	bd70      	pop	{r4, r5, r6, pc}
    1c7c:	ab01      	add	r3, sp, #4
    1c7e:	466a      	mov	r2, sp
    1c80:	f7ff ffca 	bl	1c18 <__swhatbuf_r>
    1c84:	9900      	ldr	r1, [sp, #0]
    1c86:	4605      	mov	r5, r0
    1c88:	4630      	mov	r0, r6
    1c8a:	f000 f87d 	bl	1d88 <_malloc_r>
    1c8e:	b948      	cbnz	r0, 1ca4 <__smakebuf_r+0x44>
    1c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c94:	059a      	lsls	r2, r3, #22
    1c96:	d4ef      	bmi.n	1c78 <__smakebuf_r+0x18>
    1c98:	f023 0303 	bic.w	r3, r3, #3
    1c9c:	f043 0302 	orr.w	r3, r3, #2
    1ca0:	81a3      	strh	r3, [r4, #12]
    1ca2:	e7e3      	b.n	1c6c <__smakebuf_r+0xc>
    1ca4:	4b0d      	ldr	r3, [pc, #52]	; (1cdc <__smakebuf_r+0x7c>)
    1ca6:	62b3      	str	r3, [r6, #40]	; 0x28
    1ca8:	89a3      	ldrh	r3, [r4, #12]
    1caa:	6020      	str	r0, [r4, #0]
    1cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1cb0:	81a3      	strh	r3, [r4, #12]
    1cb2:	9b00      	ldr	r3, [sp, #0]
    1cb4:	6120      	str	r0, [r4, #16]
    1cb6:	6163      	str	r3, [r4, #20]
    1cb8:	9b01      	ldr	r3, [sp, #4]
    1cba:	b15b      	cbz	r3, 1cd4 <__smakebuf_r+0x74>
    1cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1cc0:	4630      	mov	r0, r6
    1cc2:	f000 fc07 	bl	24d4 <_isatty_r>
    1cc6:	b128      	cbz	r0, 1cd4 <__smakebuf_r+0x74>
    1cc8:	89a3      	ldrh	r3, [r4, #12]
    1cca:	f023 0303 	bic.w	r3, r3, #3
    1cce:	f043 0301 	orr.w	r3, r3, #1
    1cd2:	81a3      	strh	r3, [r4, #12]
    1cd4:	89a3      	ldrh	r3, [r4, #12]
    1cd6:	431d      	orrs	r5, r3
    1cd8:	81a5      	strh	r5, [r4, #12]
    1cda:	e7cd      	b.n	1c78 <__smakebuf_r+0x18>
    1cdc:	00001acd 	.word	0x00001acd

00001ce0 <malloc>:
    1ce0:	4b02      	ldr	r3, [pc, #8]	; (1cec <malloc+0xc>)
    1ce2:	4601      	mov	r1, r0
    1ce4:	6818      	ldr	r0, [r3, #0]
    1ce6:	f000 b84f 	b.w	1d88 <_malloc_r>
    1cea:	bf00      	nop
    1cec:	20000008 	.word	0x20000008

00001cf0 <_free_r>:
    1cf0:	b538      	push	{r3, r4, r5, lr}
    1cf2:	4605      	mov	r5, r0
    1cf4:	2900      	cmp	r1, #0
    1cf6:	d043      	beq.n	1d80 <_free_r+0x90>
    1cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1cfc:	1f0c      	subs	r4, r1, #4
    1cfe:	2b00      	cmp	r3, #0
    1d00:	bfb8      	it	lt
    1d02:	18e4      	addlt	r4, r4, r3
    1d04:	f000 fc16 	bl	2534 <__malloc_lock>
    1d08:	4a1e      	ldr	r2, [pc, #120]	; (1d84 <_free_r+0x94>)
    1d0a:	6813      	ldr	r3, [r2, #0]
    1d0c:	4610      	mov	r0, r2
    1d0e:	b933      	cbnz	r3, 1d1e <_free_r+0x2e>
    1d10:	6063      	str	r3, [r4, #4]
    1d12:	6014      	str	r4, [r2, #0]
    1d14:	4628      	mov	r0, r5
    1d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1d1a:	f000 bc0c 	b.w	2536 <__malloc_unlock>
    1d1e:	42a3      	cmp	r3, r4
    1d20:	d90b      	bls.n	1d3a <_free_r+0x4a>
    1d22:	6821      	ldr	r1, [r4, #0]
    1d24:	1862      	adds	r2, r4, r1
    1d26:	4293      	cmp	r3, r2
    1d28:	bf01      	itttt	eq
    1d2a:	681a      	ldreq	r2, [r3, #0]
    1d2c:	685b      	ldreq	r3, [r3, #4]
    1d2e:	1852      	addeq	r2, r2, r1
    1d30:	6022      	streq	r2, [r4, #0]
    1d32:	6063      	str	r3, [r4, #4]
    1d34:	6004      	str	r4, [r0, #0]
    1d36:	e7ed      	b.n	1d14 <_free_r+0x24>
    1d38:	4613      	mov	r3, r2
    1d3a:	685a      	ldr	r2, [r3, #4]
    1d3c:	b10a      	cbz	r2, 1d42 <_free_r+0x52>
    1d3e:	42a2      	cmp	r2, r4
    1d40:	d9fa      	bls.n	1d38 <_free_r+0x48>
    1d42:	6819      	ldr	r1, [r3, #0]
    1d44:	1858      	adds	r0, r3, r1
    1d46:	42a0      	cmp	r0, r4
    1d48:	d10b      	bne.n	1d62 <_free_r+0x72>
    1d4a:	6820      	ldr	r0, [r4, #0]
    1d4c:	4401      	add	r1, r0
    1d4e:	1858      	adds	r0, r3, r1
    1d50:	4282      	cmp	r2, r0
    1d52:	6019      	str	r1, [r3, #0]
    1d54:	d1de      	bne.n	1d14 <_free_r+0x24>
    1d56:	6810      	ldr	r0, [r2, #0]
    1d58:	6852      	ldr	r2, [r2, #4]
    1d5a:	4401      	add	r1, r0
    1d5c:	6019      	str	r1, [r3, #0]
    1d5e:	605a      	str	r2, [r3, #4]
    1d60:	e7d8      	b.n	1d14 <_free_r+0x24>
    1d62:	d902      	bls.n	1d6a <_free_r+0x7a>
    1d64:	230c      	movs	r3, #12
    1d66:	602b      	str	r3, [r5, #0]
    1d68:	e7d4      	b.n	1d14 <_free_r+0x24>
    1d6a:	6820      	ldr	r0, [r4, #0]
    1d6c:	1821      	adds	r1, r4, r0
    1d6e:	428a      	cmp	r2, r1
    1d70:	bf01      	itttt	eq
    1d72:	6811      	ldreq	r1, [r2, #0]
    1d74:	6852      	ldreq	r2, [r2, #4]
    1d76:	1809      	addeq	r1, r1, r0
    1d78:	6021      	streq	r1, [r4, #0]
    1d7a:	6062      	str	r2, [r4, #4]
    1d7c:	605c      	str	r4, [r3, #4]
    1d7e:	e7c9      	b.n	1d14 <_free_r+0x24>
    1d80:	bd38      	pop	{r3, r4, r5, pc}
    1d82:	bf00      	nop
    1d84:	200000b4 	.word	0x200000b4

00001d88 <_malloc_r>:
    1d88:	b570      	push	{r4, r5, r6, lr}
    1d8a:	1ccd      	adds	r5, r1, #3
    1d8c:	f025 0503 	bic.w	r5, r5, #3
    1d90:	3508      	adds	r5, #8
    1d92:	2d0c      	cmp	r5, #12
    1d94:	bf38      	it	cc
    1d96:	250c      	movcc	r5, #12
    1d98:	2d00      	cmp	r5, #0
    1d9a:	4606      	mov	r6, r0
    1d9c:	db01      	blt.n	1da2 <_malloc_r+0x1a>
    1d9e:	42a9      	cmp	r1, r5
    1da0:	d903      	bls.n	1daa <_malloc_r+0x22>
    1da2:	230c      	movs	r3, #12
    1da4:	6033      	str	r3, [r6, #0]
    1da6:	2000      	movs	r0, #0
    1da8:	bd70      	pop	{r4, r5, r6, pc}
    1daa:	f000 fbc3 	bl	2534 <__malloc_lock>
    1dae:	4a21      	ldr	r2, [pc, #132]	; (1e34 <_malloc_r+0xac>)
    1db0:	6814      	ldr	r4, [r2, #0]
    1db2:	4621      	mov	r1, r4
    1db4:	b991      	cbnz	r1, 1ddc <_malloc_r+0x54>
    1db6:	4c20      	ldr	r4, [pc, #128]	; (1e38 <_malloc_r+0xb0>)
    1db8:	6823      	ldr	r3, [r4, #0]
    1dba:	b91b      	cbnz	r3, 1dc4 <_malloc_r+0x3c>
    1dbc:	4630      	mov	r0, r6
    1dbe:	f000 fb01 	bl	23c4 <_sbrk_r>
    1dc2:	6020      	str	r0, [r4, #0]
    1dc4:	4629      	mov	r1, r5
    1dc6:	4630      	mov	r0, r6
    1dc8:	f000 fafc 	bl	23c4 <_sbrk_r>
    1dcc:	1c43      	adds	r3, r0, #1
    1dce:	d124      	bne.n	1e1a <_malloc_r+0x92>
    1dd0:	230c      	movs	r3, #12
    1dd2:	4630      	mov	r0, r6
    1dd4:	6033      	str	r3, [r6, #0]
    1dd6:	f000 fbae 	bl	2536 <__malloc_unlock>
    1dda:	e7e4      	b.n	1da6 <_malloc_r+0x1e>
    1ddc:	680b      	ldr	r3, [r1, #0]
    1dde:	1b5b      	subs	r3, r3, r5
    1de0:	d418      	bmi.n	1e14 <_malloc_r+0x8c>
    1de2:	2b0b      	cmp	r3, #11
    1de4:	d90f      	bls.n	1e06 <_malloc_r+0x7e>
    1de6:	600b      	str	r3, [r1, #0]
    1de8:	18cc      	adds	r4, r1, r3
    1dea:	50cd      	str	r5, [r1, r3]
    1dec:	4630      	mov	r0, r6
    1dee:	f000 fba2 	bl	2536 <__malloc_unlock>
    1df2:	f104 000b 	add.w	r0, r4, #11
    1df6:	1d23      	adds	r3, r4, #4
    1df8:	f020 0007 	bic.w	r0, r0, #7
    1dfc:	1ac3      	subs	r3, r0, r3
    1dfe:	d0d3      	beq.n	1da8 <_malloc_r+0x20>
    1e00:	425a      	negs	r2, r3
    1e02:	50e2      	str	r2, [r4, r3]
    1e04:	e7d0      	b.n	1da8 <_malloc_r+0x20>
    1e06:	684b      	ldr	r3, [r1, #4]
    1e08:	428c      	cmp	r4, r1
    1e0a:	bf16      	itet	ne
    1e0c:	6063      	strne	r3, [r4, #4]
    1e0e:	6013      	streq	r3, [r2, #0]
    1e10:	460c      	movne	r4, r1
    1e12:	e7eb      	b.n	1dec <_malloc_r+0x64>
    1e14:	460c      	mov	r4, r1
    1e16:	6849      	ldr	r1, [r1, #4]
    1e18:	e7cc      	b.n	1db4 <_malloc_r+0x2c>
    1e1a:	1cc4      	adds	r4, r0, #3
    1e1c:	f024 0403 	bic.w	r4, r4, #3
    1e20:	42a0      	cmp	r0, r4
    1e22:	d005      	beq.n	1e30 <_malloc_r+0xa8>
    1e24:	1a21      	subs	r1, r4, r0
    1e26:	4630      	mov	r0, r6
    1e28:	f000 facc 	bl	23c4 <_sbrk_r>
    1e2c:	3001      	adds	r0, #1
    1e2e:	d0cf      	beq.n	1dd0 <_malloc_r+0x48>
    1e30:	6025      	str	r5, [r4, #0]
    1e32:	e7db      	b.n	1dec <_malloc_r+0x64>
    1e34:	200000b4 	.word	0x200000b4
    1e38:	200000b8 	.word	0x200000b8

00001e3c <__sfputc_r>:
    1e3c:	6893      	ldr	r3, [r2, #8]
    1e3e:	b410      	push	{r4}
    1e40:	3b01      	subs	r3, #1
    1e42:	2b00      	cmp	r3, #0
    1e44:	6093      	str	r3, [r2, #8]
    1e46:	da07      	bge.n	1e58 <__sfputc_r+0x1c>
    1e48:	6994      	ldr	r4, [r2, #24]
    1e4a:	42a3      	cmp	r3, r4
    1e4c:	db01      	blt.n	1e52 <__sfputc_r+0x16>
    1e4e:	290a      	cmp	r1, #10
    1e50:	d102      	bne.n	1e58 <__sfputc_r+0x1c>
    1e52:	bc10      	pop	{r4}
    1e54:	f7ff bca6 	b.w	17a4 <__swbuf_r>
    1e58:	6813      	ldr	r3, [r2, #0]
    1e5a:	1c58      	adds	r0, r3, #1
    1e5c:	6010      	str	r0, [r2, #0]
    1e5e:	7019      	strb	r1, [r3, #0]
    1e60:	4608      	mov	r0, r1
    1e62:	bc10      	pop	{r4}
    1e64:	4770      	bx	lr

00001e66 <__sfputs_r>:
    1e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e68:	4606      	mov	r6, r0
    1e6a:	460f      	mov	r7, r1
    1e6c:	4614      	mov	r4, r2
    1e6e:	18d5      	adds	r5, r2, r3
    1e70:	42ac      	cmp	r4, r5
    1e72:	d101      	bne.n	1e78 <__sfputs_r+0x12>
    1e74:	2000      	movs	r0, #0
    1e76:	e007      	b.n	1e88 <__sfputs_r+0x22>
    1e78:	463a      	mov	r2, r7
    1e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
    1e7e:	4630      	mov	r0, r6
    1e80:	f7ff ffdc 	bl	1e3c <__sfputc_r>
    1e84:	1c43      	adds	r3, r0, #1
    1e86:	d1f3      	bne.n	1e70 <__sfputs_r+0xa>
    1e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001e8c <_vfiprintf_r>:
    1e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e90:	b09d      	sub	sp, #116	; 0x74
    1e92:	460c      	mov	r4, r1
    1e94:	4617      	mov	r7, r2
    1e96:	9303      	str	r3, [sp, #12]
    1e98:	4606      	mov	r6, r0
    1e9a:	b118      	cbz	r0, 1ea4 <_vfiprintf_r+0x18>
    1e9c:	6983      	ldr	r3, [r0, #24]
    1e9e:	b90b      	cbnz	r3, 1ea4 <_vfiprintf_r+0x18>
    1ea0:	f7ff fe30 	bl	1b04 <__sinit>
    1ea4:	4b7b      	ldr	r3, [pc, #492]	; (2094 <_vfiprintf_r+0x208>)
    1ea6:	429c      	cmp	r4, r3
    1ea8:	d157      	bne.n	1f5a <_vfiprintf_r+0xce>
    1eaa:	6874      	ldr	r4, [r6, #4]
    1eac:	89a3      	ldrh	r3, [r4, #12]
    1eae:	0718      	lsls	r0, r3, #28
    1eb0:	d55d      	bpl.n	1f6e <_vfiprintf_r+0xe2>
    1eb2:	6923      	ldr	r3, [r4, #16]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d05a      	beq.n	1f6e <_vfiprintf_r+0xe2>
    1eb8:	2300      	movs	r3, #0
    1eba:	9309      	str	r3, [sp, #36]	; 0x24
    1ebc:	2320      	movs	r3, #32
    1ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1ec2:	2330      	movs	r3, #48	; 0x30
    1ec4:	f04f 0b01 	mov.w	fp, #1
    1ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1ecc:	46b8      	mov	r8, r7
    1ece:	4645      	mov	r5, r8
    1ed0:	f815 3b01 	ldrb.w	r3, [r5], #1
    1ed4:	b10b      	cbz	r3, 1eda <_vfiprintf_r+0x4e>
    1ed6:	2b25      	cmp	r3, #37	; 0x25
    1ed8:	d154      	bne.n	1f84 <_vfiprintf_r+0xf8>
    1eda:	ebb8 0a07 	subs.w	sl, r8, r7
    1ede:	d00b      	beq.n	1ef8 <_vfiprintf_r+0x6c>
    1ee0:	4653      	mov	r3, sl
    1ee2:	463a      	mov	r2, r7
    1ee4:	4621      	mov	r1, r4
    1ee6:	4630      	mov	r0, r6
    1ee8:	f7ff ffbd 	bl	1e66 <__sfputs_r>
    1eec:	3001      	adds	r0, #1
    1eee:	f000 80c2 	beq.w	2076 <_vfiprintf_r+0x1ea>
    1ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ef4:	4453      	add	r3, sl
    1ef6:	9309      	str	r3, [sp, #36]	; 0x24
    1ef8:	f898 3000 	ldrb.w	r3, [r8]
    1efc:	2b00      	cmp	r3, #0
    1efe:	f000 80ba 	beq.w	2076 <_vfiprintf_r+0x1ea>
    1f02:	2300      	movs	r3, #0
    1f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1f0c:	9304      	str	r3, [sp, #16]
    1f0e:	9307      	str	r3, [sp, #28]
    1f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1f14:	931a      	str	r3, [sp, #104]	; 0x68
    1f16:	46a8      	mov	r8, r5
    1f18:	2205      	movs	r2, #5
    1f1a:	f818 1b01 	ldrb.w	r1, [r8], #1
    1f1e:	485e      	ldr	r0, [pc, #376]	; (2098 <_vfiprintf_r+0x20c>)
    1f20:	f000 fafa 	bl	2518 <memchr>
    1f24:	9b04      	ldr	r3, [sp, #16]
    1f26:	bb78      	cbnz	r0, 1f88 <_vfiprintf_r+0xfc>
    1f28:	06d9      	lsls	r1, r3, #27
    1f2a:	bf44      	itt	mi
    1f2c:	2220      	movmi	r2, #32
    1f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1f32:	071a      	lsls	r2, r3, #28
    1f34:	bf44      	itt	mi
    1f36:	222b      	movmi	r2, #43	; 0x2b
    1f38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1f3c:	782a      	ldrb	r2, [r5, #0]
    1f3e:	2a2a      	cmp	r2, #42	; 0x2a
    1f40:	d02a      	beq.n	1f98 <_vfiprintf_r+0x10c>
    1f42:	46a8      	mov	r8, r5
    1f44:	2000      	movs	r0, #0
    1f46:	250a      	movs	r5, #10
    1f48:	9a07      	ldr	r2, [sp, #28]
    1f4a:	4641      	mov	r1, r8
    1f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1f50:	3b30      	subs	r3, #48	; 0x30
    1f52:	2b09      	cmp	r3, #9
    1f54:	d969      	bls.n	202a <_vfiprintf_r+0x19e>
    1f56:	b360      	cbz	r0, 1fb2 <_vfiprintf_r+0x126>
    1f58:	e024      	b.n	1fa4 <_vfiprintf_r+0x118>
    1f5a:	4b50      	ldr	r3, [pc, #320]	; (209c <_vfiprintf_r+0x210>)
    1f5c:	429c      	cmp	r4, r3
    1f5e:	d101      	bne.n	1f64 <_vfiprintf_r+0xd8>
    1f60:	68b4      	ldr	r4, [r6, #8]
    1f62:	e7a3      	b.n	1eac <_vfiprintf_r+0x20>
    1f64:	4b4e      	ldr	r3, [pc, #312]	; (20a0 <_vfiprintf_r+0x214>)
    1f66:	429c      	cmp	r4, r3
    1f68:	bf08      	it	eq
    1f6a:	68f4      	ldreq	r4, [r6, #12]
    1f6c:	e79e      	b.n	1eac <_vfiprintf_r+0x20>
    1f6e:	4621      	mov	r1, r4
    1f70:	4630      	mov	r0, r6
    1f72:	f7ff fc69 	bl	1848 <__swsetup_r>
    1f76:	2800      	cmp	r0, #0
    1f78:	d09e      	beq.n	1eb8 <_vfiprintf_r+0x2c>
    1f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f7e:	b01d      	add	sp, #116	; 0x74
    1f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f84:	46a8      	mov	r8, r5
    1f86:	e7a2      	b.n	1ece <_vfiprintf_r+0x42>
    1f88:	4a43      	ldr	r2, [pc, #268]	; (2098 <_vfiprintf_r+0x20c>)
    1f8a:	4645      	mov	r5, r8
    1f8c:	1a80      	subs	r0, r0, r2
    1f8e:	fa0b f000 	lsl.w	r0, fp, r0
    1f92:	4318      	orrs	r0, r3
    1f94:	9004      	str	r0, [sp, #16]
    1f96:	e7be      	b.n	1f16 <_vfiprintf_r+0x8a>
    1f98:	9a03      	ldr	r2, [sp, #12]
    1f9a:	1d11      	adds	r1, r2, #4
    1f9c:	6812      	ldr	r2, [r2, #0]
    1f9e:	9103      	str	r1, [sp, #12]
    1fa0:	2a00      	cmp	r2, #0
    1fa2:	db01      	blt.n	1fa8 <_vfiprintf_r+0x11c>
    1fa4:	9207      	str	r2, [sp, #28]
    1fa6:	e004      	b.n	1fb2 <_vfiprintf_r+0x126>
    1fa8:	4252      	negs	r2, r2
    1faa:	f043 0302 	orr.w	r3, r3, #2
    1fae:	9207      	str	r2, [sp, #28]
    1fb0:	9304      	str	r3, [sp, #16]
    1fb2:	f898 3000 	ldrb.w	r3, [r8]
    1fb6:	2b2e      	cmp	r3, #46	; 0x2e
    1fb8:	d10e      	bne.n	1fd8 <_vfiprintf_r+0x14c>
    1fba:	f898 3001 	ldrb.w	r3, [r8, #1]
    1fbe:	2b2a      	cmp	r3, #42	; 0x2a
    1fc0:	d138      	bne.n	2034 <_vfiprintf_r+0x1a8>
    1fc2:	9b03      	ldr	r3, [sp, #12]
    1fc4:	f108 0802 	add.w	r8, r8, #2
    1fc8:	1d1a      	adds	r2, r3, #4
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	9203      	str	r2, [sp, #12]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	bfb8      	it	lt
    1fd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1fd6:	9305      	str	r3, [sp, #20]
    1fd8:	4d32      	ldr	r5, [pc, #200]	; (20a4 <_vfiprintf_r+0x218>)
    1fda:	2203      	movs	r2, #3
    1fdc:	f898 1000 	ldrb.w	r1, [r8]
    1fe0:	4628      	mov	r0, r5
    1fe2:	f000 fa99 	bl	2518 <memchr>
    1fe6:	b140      	cbz	r0, 1ffa <_vfiprintf_r+0x16e>
    1fe8:	2340      	movs	r3, #64	; 0x40
    1fea:	1b40      	subs	r0, r0, r5
    1fec:	fa03 f000 	lsl.w	r0, r3, r0
    1ff0:	9b04      	ldr	r3, [sp, #16]
    1ff2:	f108 0801 	add.w	r8, r8, #1
    1ff6:	4303      	orrs	r3, r0
    1ff8:	9304      	str	r3, [sp, #16]
    1ffa:	f898 1000 	ldrb.w	r1, [r8]
    1ffe:	2206      	movs	r2, #6
    2000:	4829      	ldr	r0, [pc, #164]	; (20a8 <_vfiprintf_r+0x21c>)
    2002:	f108 0701 	add.w	r7, r8, #1
    2006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    200a:	f000 fa85 	bl	2518 <memchr>
    200e:	2800      	cmp	r0, #0
    2010:	d037      	beq.n	2082 <_vfiprintf_r+0x1f6>
    2012:	4b26      	ldr	r3, [pc, #152]	; (20ac <_vfiprintf_r+0x220>)
    2014:	bb1b      	cbnz	r3, 205e <_vfiprintf_r+0x1d2>
    2016:	9b03      	ldr	r3, [sp, #12]
    2018:	3307      	adds	r3, #7
    201a:	f023 0307 	bic.w	r3, r3, #7
    201e:	3308      	adds	r3, #8
    2020:	9303      	str	r3, [sp, #12]
    2022:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2024:	444b      	add	r3, r9
    2026:	9309      	str	r3, [sp, #36]	; 0x24
    2028:	e750      	b.n	1ecc <_vfiprintf_r+0x40>
    202a:	fb05 3202 	mla	r2, r5, r2, r3
    202e:	2001      	movs	r0, #1
    2030:	4688      	mov	r8, r1
    2032:	e78a      	b.n	1f4a <_vfiprintf_r+0xbe>
    2034:	2300      	movs	r3, #0
    2036:	250a      	movs	r5, #10
    2038:	4619      	mov	r1, r3
    203a:	f108 0801 	add.w	r8, r8, #1
    203e:	9305      	str	r3, [sp, #20]
    2040:	4640      	mov	r0, r8
    2042:	f810 2b01 	ldrb.w	r2, [r0], #1
    2046:	3a30      	subs	r2, #48	; 0x30
    2048:	2a09      	cmp	r2, #9
    204a:	d903      	bls.n	2054 <_vfiprintf_r+0x1c8>
    204c:	2b00      	cmp	r3, #0
    204e:	d0c3      	beq.n	1fd8 <_vfiprintf_r+0x14c>
    2050:	9105      	str	r1, [sp, #20]
    2052:	e7c1      	b.n	1fd8 <_vfiprintf_r+0x14c>
    2054:	fb05 2101 	mla	r1, r5, r1, r2
    2058:	2301      	movs	r3, #1
    205a:	4680      	mov	r8, r0
    205c:	e7f0      	b.n	2040 <_vfiprintf_r+0x1b4>
    205e:	ab03      	add	r3, sp, #12
    2060:	9300      	str	r3, [sp, #0]
    2062:	4622      	mov	r2, r4
    2064:	4b12      	ldr	r3, [pc, #72]	; (20b0 <_vfiprintf_r+0x224>)
    2066:	a904      	add	r1, sp, #16
    2068:	4630      	mov	r0, r6
    206a:	f3af 8000 	nop.w
    206e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2072:	4681      	mov	r9, r0
    2074:	d1d5      	bne.n	2022 <_vfiprintf_r+0x196>
    2076:	89a3      	ldrh	r3, [r4, #12]
    2078:	065b      	lsls	r3, r3, #25
    207a:	f53f af7e 	bmi.w	1f7a <_vfiprintf_r+0xee>
    207e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2080:	e77d      	b.n	1f7e <_vfiprintf_r+0xf2>
    2082:	ab03      	add	r3, sp, #12
    2084:	9300      	str	r3, [sp, #0]
    2086:	4622      	mov	r2, r4
    2088:	4b09      	ldr	r3, [pc, #36]	; (20b0 <_vfiprintf_r+0x224>)
    208a:	a904      	add	r1, sp, #16
    208c:	4630      	mov	r0, r6
    208e:	f000 f887 	bl	21a0 <_printf_i>
    2092:	e7ec      	b.n	206e <_vfiprintf_r+0x1e2>
    2094:	00002d24 	.word	0x00002d24
    2098:	00002d64 	.word	0x00002d64
    209c:	00002d44 	.word	0x00002d44
    20a0:	00002d04 	.word	0x00002d04
    20a4:	00002d6a 	.word	0x00002d6a
    20a8:	00002d6e 	.word	0x00002d6e
    20ac:	00000000 	.word	0x00000000
    20b0:	00001e67 	.word	0x00001e67

000020b4 <_printf_common>:
    20b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20b8:	4691      	mov	r9, r2
    20ba:	461f      	mov	r7, r3
    20bc:	688a      	ldr	r2, [r1, #8]
    20be:	690b      	ldr	r3, [r1, #16]
    20c0:	4606      	mov	r6, r0
    20c2:	4293      	cmp	r3, r2
    20c4:	bfb8      	it	lt
    20c6:	4613      	movlt	r3, r2
    20c8:	f8c9 3000 	str.w	r3, [r9]
    20cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    20d0:	460c      	mov	r4, r1
    20d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    20d6:	b112      	cbz	r2, 20de <_printf_common+0x2a>
    20d8:	3301      	adds	r3, #1
    20da:	f8c9 3000 	str.w	r3, [r9]
    20de:	6823      	ldr	r3, [r4, #0]
    20e0:	0699      	lsls	r1, r3, #26
    20e2:	bf42      	ittt	mi
    20e4:	f8d9 3000 	ldrmi.w	r3, [r9]
    20e8:	3302      	addmi	r3, #2
    20ea:	f8c9 3000 	strmi.w	r3, [r9]
    20ee:	6825      	ldr	r5, [r4, #0]
    20f0:	f015 0506 	ands.w	r5, r5, #6
    20f4:	d107      	bne.n	2106 <_printf_common+0x52>
    20f6:	f104 0a19 	add.w	sl, r4, #25
    20fa:	68e3      	ldr	r3, [r4, #12]
    20fc:	f8d9 2000 	ldr.w	r2, [r9]
    2100:	1a9b      	subs	r3, r3, r2
    2102:	42ab      	cmp	r3, r5
    2104:	dc29      	bgt.n	215a <_printf_common+0xa6>
    2106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    210a:	6822      	ldr	r2, [r4, #0]
    210c:	3300      	adds	r3, #0
    210e:	bf18      	it	ne
    2110:	2301      	movne	r3, #1
    2112:	0692      	lsls	r2, r2, #26
    2114:	d42e      	bmi.n	2174 <_printf_common+0xc0>
    2116:	f104 0243 	add.w	r2, r4, #67	; 0x43
    211a:	4639      	mov	r1, r7
    211c:	4630      	mov	r0, r6
    211e:	47c0      	blx	r8
    2120:	3001      	adds	r0, #1
    2122:	d021      	beq.n	2168 <_printf_common+0xb4>
    2124:	6823      	ldr	r3, [r4, #0]
    2126:	68e5      	ldr	r5, [r4, #12]
    2128:	f003 0306 	and.w	r3, r3, #6
    212c:	2b04      	cmp	r3, #4
    212e:	bf18      	it	ne
    2130:	2500      	movne	r5, #0
    2132:	f8d9 2000 	ldr.w	r2, [r9]
    2136:	f04f 0900 	mov.w	r9, #0
    213a:	bf08      	it	eq
    213c:	1aad      	subeq	r5, r5, r2
    213e:	68a3      	ldr	r3, [r4, #8]
    2140:	6922      	ldr	r2, [r4, #16]
    2142:	bf08      	it	eq
    2144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2148:	4293      	cmp	r3, r2
    214a:	bfc4      	itt	gt
    214c:	1a9b      	subgt	r3, r3, r2
    214e:	18ed      	addgt	r5, r5, r3
    2150:	341a      	adds	r4, #26
    2152:	454d      	cmp	r5, r9
    2154:	d11a      	bne.n	218c <_printf_common+0xd8>
    2156:	2000      	movs	r0, #0
    2158:	e008      	b.n	216c <_printf_common+0xb8>
    215a:	2301      	movs	r3, #1
    215c:	4652      	mov	r2, sl
    215e:	4639      	mov	r1, r7
    2160:	4630      	mov	r0, r6
    2162:	47c0      	blx	r8
    2164:	3001      	adds	r0, #1
    2166:	d103      	bne.n	2170 <_printf_common+0xbc>
    2168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2170:	3501      	adds	r5, #1
    2172:	e7c2      	b.n	20fa <_printf_common+0x46>
    2174:	2030      	movs	r0, #48	; 0x30
    2176:	18e1      	adds	r1, r4, r3
    2178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    217c:	1c5a      	adds	r2, r3, #1
    217e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    2182:	4422      	add	r2, r4
    2184:	3302      	adds	r3, #2
    2186:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    218a:	e7c4      	b.n	2116 <_printf_common+0x62>
    218c:	2301      	movs	r3, #1
    218e:	4622      	mov	r2, r4
    2190:	4639      	mov	r1, r7
    2192:	4630      	mov	r0, r6
    2194:	47c0      	blx	r8
    2196:	3001      	adds	r0, #1
    2198:	d0e6      	beq.n	2168 <_printf_common+0xb4>
    219a:	f109 0901 	add.w	r9, r9, #1
    219e:	e7d8      	b.n	2152 <_printf_common+0x9e>

000021a0 <_printf_i>:
    21a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    21a8:	460c      	mov	r4, r1
    21aa:	7e09      	ldrb	r1, [r1, #24]
    21ac:	b085      	sub	sp, #20
    21ae:	296e      	cmp	r1, #110	; 0x6e
    21b0:	4617      	mov	r7, r2
    21b2:	4606      	mov	r6, r0
    21b4:	4698      	mov	r8, r3
    21b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    21b8:	f000 80b3 	beq.w	2322 <_printf_i+0x182>
    21bc:	d822      	bhi.n	2204 <_printf_i+0x64>
    21be:	2963      	cmp	r1, #99	; 0x63
    21c0:	d036      	beq.n	2230 <_printf_i+0x90>
    21c2:	d80a      	bhi.n	21da <_printf_i+0x3a>
    21c4:	2900      	cmp	r1, #0
    21c6:	f000 80b9 	beq.w	233c <_printf_i+0x19c>
    21ca:	2958      	cmp	r1, #88	; 0x58
    21cc:	f000 8083 	beq.w	22d6 <_printf_i+0x136>
    21d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    21d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    21d8:	e032      	b.n	2240 <_printf_i+0xa0>
    21da:	2964      	cmp	r1, #100	; 0x64
    21dc:	d001      	beq.n	21e2 <_printf_i+0x42>
    21de:	2969      	cmp	r1, #105	; 0x69
    21e0:	d1f6      	bne.n	21d0 <_printf_i+0x30>
    21e2:	6820      	ldr	r0, [r4, #0]
    21e4:	6813      	ldr	r3, [r2, #0]
    21e6:	0605      	lsls	r5, r0, #24
    21e8:	f103 0104 	add.w	r1, r3, #4
    21ec:	d52a      	bpl.n	2244 <_printf_i+0xa4>
    21ee:	681b      	ldr	r3, [r3, #0]
    21f0:	6011      	str	r1, [r2, #0]
    21f2:	2b00      	cmp	r3, #0
    21f4:	da03      	bge.n	21fe <_printf_i+0x5e>
    21f6:	222d      	movs	r2, #45	; 0x2d
    21f8:	425b      	negs	r3, r3
    21fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    21fe:	486f      	ldr	r0, [pc, #444]	; (23bc <_printf_i+0x21c>)
    2200:	220a      	movs	r2, #10
    2202:	e039      	b.n	2278 <_printf_i+0xd8>
    2204:	2973      	cmp	r1, #115	; 0x73
    2206:	f000 809d 	beq.w	2344 <_printf_i+0x1a4>
    220a:	d808      	bhi.n	221e <_printf_i+0x7e>
    220c:	296f      	cmp	r1, #111	; 0x6f
    220e:	d020      	beq.n	2252 <_printf_i+0xb2>
    2210:	2970      	cmp	r1, #112	; 0x70
    2212:	d1dd      	bne.n	21d0 <_printf_i+0x30>
    2214:	6823      	ldr	r3, [r4, #0]
    2216:	f043 0320 	orr.w	r3, r3, #32
    221a:	6023      	str	r3, [r4, #0]
    221c:	e003      	b.n	2226 <_printf_i+0x86>
    221e:	2975      	cmp	r1, #117	; 0x75
    2220:	d017      	beq.n	2252 <_printf_i+0xb2>
    2222:	2978      	cmp	r1, #120	; 0x78
    2224:	d1d4      	bne.n	21d0 <_printf_i+0x30>
    2226:	2378      	movs	r3, #120	; 0x78
    2228:	4865      	ldr	r0, [pc, #404]	; (23c0 <_printf_i+0x220>)
    222a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    222e:	e055      	b.n	22dc <_printf_i+0x13c>
    2230:	6813      	ldr	r3, [r2, #0]
    2232:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2236:	1d19      	adds	r1, r3, #4
    2238:	681b      	ldr	r3, [r3, #0]
    223a:	6011      	str	r1, [r2, #0]
    223c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2240:	2301      	movs	r3, #1
    2242:	e08c      	b.n	235e <_printf_i+0x1be>
    2244:	681b      	ldr	r3, [r3, #0]
    2246:	f010 0f40 	tst.w	r0, #64	; 0x40
    224a:	6011      	str	r1, [r2, #0]
    224c:	bf18      	it	ne
    224e:	b21b      	sxthne	r3, r3
    2250:	e7cf      	b.n	21f2 <_printf_i+0x52>
    2252:	6813      	ldr	r3, [r2, #0]
    2254:	6825      	ldr	r5, [r4, #0]
    2256:	1d18      	adds	r0, r3, #4
    2258:	6010      	str	r0, [r2, #0]
    225a:	0628      	lsls	r0, r5, #24
    225c:	d501      	bpl.n	2262 <_printf_i+0xc2>
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	e002      	b.n	2268 <_printf_i+0xc8>
    2262:	0668      	lsls	r0, r5, #25
    2264:	d5fb      	bpl.n	225e <_printf_i+0xbe>
    2266:	881b      	ldrh	r3, [r3, #0]
    2268:	296f      	cmp	r1, #111	; 0x6f
    226a:	bf14      	ite	ne
    226c:	220a      	movne	r2, #10
    226e:	2208      	moveq	r2, #8
    2270:	4852      	ldr	r0, [pc, #328]	; (23bc <_printf_i+0x21c>)
    2272:	2100      	movs	r1, #0
    2274:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    2278:	6865      	ldr	r5, [r4, #4]
    227a:	2d00      	cmp	r5, #0
    227c:	60a5      	str	r5, [r4, #8]
    227e:	f2c0 8095 	blt.w	23ac <_printf_i+0x20c>
    2282:	6821      	ldr	r1, [r4, #0]
    2284:	f021 0104 	bic.w	r1, r1, #4
    2288:	6021      	str	r1, [r4, #0]
    228a:	2b00      	cmp	r3, #0
    228c:	d13d      	bne.n	230a <_printf_i+0x16a>
    228e:	2d00      	cmp	r5, #0
    2290:	f040 808e 	bne.w	23b0 <_printf_i+0x210>
    2294:	4665      	mov	r5, ip
    2296:	2a08      	cmp	r2, #8
    2298:	d10b      	bne.n	22b2 <_printf_i+0x112>
    229a:	6823      	ldr	r3, [r4, #0]
    229c:	07db      	lsls	r3, r3, #31
    229e:	d508      	bpl.n	22b2 <_printf_i+0x112>
    22a0:	6923      	ldr	r3, [r4, #16]
    22a2:	6862      	ldr	r2, [r4, #4]
    22a4:	429a      	cmp	r2, r3
    22a6:	bfde      	ittt	le
    22a8:	2330      	movle	r3, #48	; 0x30
    22aa:	f805 3c01 	strble.w	r3, [r5, #-1]
    22ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    22b2:	ebac 0305 	sub.w	r3, ip, r5
    22b6:	6123      	str	r3, [r4, #16]
    22b8:	f8cd 8000 	str.w	r8, [sp]
    22bc:	463b      	mov	r3, r7
    22be:	aa03      	add	r2, sp, #12
    22c0:	4621      	mov	r1, r4
    22c2:	4630      	mov	r0, r6
    22c4:	f7ff fef6 	bl	20b4 <_printf_common>
    22c8:	3001      	adds	r0, #1
    22ca:	d14d      	bne.n	2368 <_printf_i+0x1c8>
    22cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22d0:	b005      	add	sp, #20
    22d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    22d6:	4839      	ldr	r0, [pc, #228]	; (23bc <_printf_i+0x21c>)
    22d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    22dc:	6813      	ldr	r3, [r2, #0]
    22de:	6821      	ldr	r1, [r4, #0]
    22e0:	1d1d      	adds	r5, r3, #4
    22e2:	681b      	ldr	r3, [r3, #0]
    22e4:	6015      	str	r5, [r2, #0]
    22e6:	060a      	lsls	r2, r1, #24
    22e8:	d50b      	bpl.n	2302 <_printf_i+0x162>
    22ea:	07ca      	lsls	r2, r1, #31
    22ec:	bf44      	itt	mi
    22ee:	f041 0120 	orrmi.w	r1, r1, #32
    22f2:	6021      	strmi	r1, [r4, #0]
    22f4:	b91b      	cbnz	r3, 22fe <_printf_i+0x15e>
    22f6:	6822      	ldr	r2, [r4, #0]
    22f8:	f022 0220 	bic.w	r2, r2, #32
    22fc:	6022      	str	r2, [r4, #0]
    22fe:	2210      	movs	r2, #16
    2300:	e7b7      	b.n	2272 <_printf_i+0xd2>
    2302:	064d      	lsls	r5, r1, #25
    2304:	bf48      	it	mi
    2306:	b29b      	uxthmi	r3, r3
    2308:	e7ef      	b.n	22ea <_printf_i+0x14a>
    230a:	4665      	mov	r5, ip
    230c:	fbb3 f1f2 	udiv	r1, r3, r2
    2310:	fb02 3311 	mls	r3, r2, r1, r3
    2314:	5cc3      	ldrb	r3, [r0, r3]
    2316:	f805 3d01 	strb.w	r3, [r5, #-1]!
    231a:	460b      	mov	r3, r1
    231c:	2900      	cmp	r1, #0
    231e:	d1f5      	bne.n	230c <_printf_i+0x16c>
    2320:	e7b9      	b.n	2296 <_printf_i+0xf6>
    2322:	6813      	ldr	r3, [r2, #0]
    2324:	6825      	ldr	r5, [r4, #0]
    2326:	1d18      	adds	r0, r3, #4
    2328:	6961      	ldr	r1, [r4, #20]
    232a:	6010      	str	r0, [r2, #0]
    232c:	0628      	lsls	r0, r5, #24
    232e:	681b      	ldr	r3, [r3, #0]
    2330:	d501      	bpl.n	2336 <_printf_i+0x196>
    2332:	6019      	str	r1, [r3, #0]
    2334:	e002      	b.n	233c <_printf_i+0x19c>
    2336:	066a      	lsls	r2, r5, #25
    2338:	d5fb      	bpl.n	2332 <_printf_i+0x192>
    233a:	8019      	strh	r1, [r3, #0]
    233c:	2300      	movs	r3, #0
    233e:	4665      	mov	r5, ip
    2340:	6123      	str	r3, [r4, #16]
    2342:	e7b9      	b.n	22b8 <_printf_i+0x118>
    2344:	6813      	ldr	r3, [r2, #0]
    2346:	1d19      	adds	r1, r3, #4
    2348:	6011      	str	r1, [r2, #0]
    234a:	681d      	ldr	r5, [r3, #0]
    234c:	6862      	ldr	r2, [r4, #4]
    234e:	2100      	movs	r1, #0
    2350:	4628      	mov	r0, r5
    2352:	f000 f8e1 	bl	2518 <memchr>
    2356:	b108      	cbz	r0, 235c <_printf_i+0x1bc>
    2358:	1b40      	subs	r0, r0, r5
    235a:	6060      	str	r0, [r4, #4]
    235c:	6863      	ldr	r3, [r4, #4]
    235e:	6123      	str	r3, [r4, #16]
    2360:	2300      	movs	r3, #0
    2362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2366:	e7a7      	b.n	22b8 <_printf_i+0x118>
    2368:	6923      	ldr	r3, [r4, #16]
    236a:	462a      	mov	r2, r5
    236c:	4639      	mov	r1, r7
    236e:	4630      	mov	r0, r6
    2370:	47c0      	blx	r8
    2372:	3001      	adds	r0, #1
    2374:	d0aa      	beq.n	22cc <_printf_i+0x12c>
    2376:	6823      	ldr	r3, [r4, #0]
    2378:	079b      	lsls	r3, r3, #30
    237a:	d413      	bmi.n	23a4 <_printf_i+0x204>
    237c:	68e0      	ldr	r0, [r4, #12]
    237e:	9b03      	ldr	r3, [sp, #12]
    2380:	4298      	cmp	r0, r3
    2382:	bfb8      	it	lt
    2384:	4618      	movlt	r0, r3
    2386:	e7a3      	b.n	22d0 <_printf_i+0x130>
    2388:	2301      	movs	r3, #1
    238a:	464a      	mov	r2, r9
    238c:	4639      	mov	r1, r7
    238e:	4630      	mov	r0, r6
    2390:	47c0      	blx	r8
    2392:	3001      	adds	r0, #1
    2394:	d09a      	beq.n	22cc <_printf_i+0x12c>
    2396:	3501      	adds	r5, #1
    2398:	68e3      	ldr	r3, [r4, #12]
    239a:	9a03      	ldr	r2, [sp, #12]
    239c:	1a9b      	subs	r3, r3, r2
    239e:	42ab      	cmp	r3, r5
    23a0:	dcf2      	bgt.n	2388 <_printf_i+0x1e8>
    23a2:	e7eb      	b.n	237c <_printf_i+0x1dc>
    23a4:	2500      	movs	r5, #0
    23a6:	f104 0919 	add.w	r9, r4, #25
    23aa:	e7f5      	b.n	2398 <_printf_i+0x1f8>
    23ac:	2b00      	cmp	r3, #0
    23ae:	d1ac      	bne.n	230a <_printf_i+0x16a>
    23b0:	7803      	ldrb	r3, [r0, #0]
    23b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    23b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    23ba:	e76c      	b.n	2296 <_printf_i+0xf6>
    23bc:	00002d75 	.word	0x00002d75
    23c0:	00002d86 	.word	0x00002d86

000023c4 <_sbrk_r>:
    23c4:	b538      	push	{r3, r4, r5, lr}
    23c6:	2300      	movs	r3, #0
    23c8:	4c05      	ldr	r4, [pc, #20]	; (23e0 <_sbrk_r+0x1c>)
    23ca:	4605      	mov	r5, r0
    23cc:	4608      	mov	r0, r1
    23ce:	6023      	str	r3, [r4, #0]
    23d0:	f000 f8ec 	bl	25ac <_sbrk>
    23d4:	1c43      	adds	r3, r0, #1
    23d6:	d102      	bne.n	23de <_sbrk_r+0x1a>
    23d8:	6823      	ldr	r3, [r4, #0]
    23da:	b103      	cbz	r3, 23de <_sbrk_r+0x1a>
    23dc:	602b      	str	r3, [r5, #0]
    23de:	bd38      	pop	{r3, r4, r5, pc}
    23e0:	200000c0 	.word	0x200000c0

000023e4 <__sread>:
    23e4:	b510      	push	{r4, lr}
    23e6:	460c      	mov	r4, r1
    23e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    23ec:	f000 f8a4 	bl	2538 <_read_r>
    23f0:	2800      	cmp	r0, #0
    23f2:	bfab      	itete	ge
    23f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    23f6:	89a3      	ldrhlt	r3, [r4, #12]
    23f8:	181b      	addge	r3, r3, r0
    23fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    23fe:	bfac      	ite	ge
    2400:	6563      	strge	r3, [r4, #84]	; 0x54
    2402:	81a3      	strhlt	r3, [r4, #12]
    2404:	bd10      	pop	{r4, pc}

00002406 <__swrite>:
    2406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    240a:	461f      	mov	r7, r3
    240c:	898b      	ldrh	r3, [r1, #12]
    240e:	4605      	mov	r5, r0
    2410:	05db      	lsls	r3, r3, #23
    2412:	460c      	mov	r4, r1
    2414:	4616      	mov	r6, r2
    2416:	d505      	bpl.n	2424 <__swrite+0x1e>
    2418:	2302      	movs	r3, #2
    241a:	2200      	movs	r2, #0
    241c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2420:	f000 f868 	bl	24f4 <_lseek_r>
    2424:	89a3      	ldrh	r3, [r4, #12]
    2426:	4632      	mov	r2, r6
    2428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    242c:	81a3      	strh	r3, [r4, #12]
    242e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2432:	463b      	mov	r3, r7
    2434:	4628      	mov	r0, r5
    2436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    243a:	f000 b817 	b.w	246c <_write_r>

0000243e <__sseek>:
    243e:	b510      	push	{r4, lr}
    2440:	460c      	mov	r4, r1
    2442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2446:	f000 f855 	bl	24f4 <_lseek_r>
    244a:	1c43      	adds	r3, r0, #1
    244c:	89a3      	ldrh	r3, [r4, #12]
    244e:	bf15      	itete	ne
    2450:	6560      	strne	r0, [r4, #84]	; 0x54
    2452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    245a:	81a3      	strheq	r3, [r4, #12]
    245c:	bf18      	it	ne
    245e:	81a3      	strhne	r3, [r4, #12]
    2460:	bd10      	pop	{r4, pc}

00002462 <__sclose>:
    2462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2466:	f000 b813 	b.w	2490 <_close_r>
	...

0000246c <_write_r>:
    246c:	b538      	push	{r3, r4, r5, lr}
    246e:	4605      	mov	r5, r0
    2470:	4608      	mov	r0, r1
    2472:	4611      	mov	r1, r2
    2474:	2200      	movs	r2, #0
    2476:	4c05      	ldr	r4, [pc, #20]	; (248c <_write_r+0x20>)
    2478:	6022      	str	r2, [r4, #0]
    247a:	461a      	mov	r2, r3
    247c:	f7fe fb74 	bl	b68 <_write>
    2480:	1c43      	adds	r3, r0, #1
    2482:	d102      	bne.n	248a <_write_r+0x1e>
    2484:	6823      	ldr	r3, [r4, #0]
    2486:	b103      	cbz	r3, 248a <_write_r+0x1e>
    2488:	602b      	str	r3, [r5, #0]
    248a:	bd38      	pop	{r3, r4, r5, pc}
    248c:	200000c0 	.word	0x200000c0

00002490 <_close_r>:
    2490:	b538      	push	{r3, r4, r5, lr}
    2492:	2300      	movs	r3, #0
    2494:	4c05      	ldr	r4, [pc, #20]	; (24ac <_close_r+0x1c>)
    2496:	4605      	mov	r5, r0
    2498:	4608      	mov	r0, r1
    249a:	6023      	str	r3, [r4, #0]
    249c:	f000 f85e 	bl	255c <_close>
    24a0:	1c43      	adds	r3, r0, #1
    24a2:	d102      	bne.n	24aa <_close_r+0x1a>
    24a4:	6823      	ldr	r3, [r4, #0]
    24a6:	b103      	cbz	r3, 24aa <_close_r+0x1a>
    24a8:	602b      	str	r3, [r5, #0]
    24aa:	bd38      	pop	{r3, r4, r5, pc}
    24ac:	200000c0 	.word	0x200000c0

000024b0 <_fstat_r>:
    24b0:	b538      	push	{r3, r4, r5, lr}
    24b2:	2300      	movs	r3, #0
    24b4:	4c06      	ldr	r4, [pc, #24]	; (24d0 <_fstat_r+0x20>)
    24b6:	4605      	mov	r5, r0
    24b8:	4608      	mov	r0, r1
    24ba:	4611      	mov	r1, r2
    24bc:	6023      	str	r3, [r4, #0]
    24be:	f000 f855 	bl	256c <_fstat>
    24c2:	1c43      	adds	r3, r0, #1
    24c4:	d102      	bne.n	24cc <_fstat_r+0x1c>
    24c6:	6823      	ldr	r3, [r4, #0]
    24c8:	b103      	cbz	r3, 24cc <_fstat_r+0x1c>
    24ca:	602b      	str	r3, [r5, #0]
    24cc:	bd38      	pop	{r3, r4, r5, pc}
    24ce:	bf00      	nop
    24d0:	200000c0 	.word	0x200000c0

000024d4 <_isatty_r>:
    24d4:	b538      	push	{r3, r4, r5, lr}
    24d6:	2300      	movs	r3, #0
    24d8:	4c05      	ldr	r4, [pc, #20]	; (24f0 <_isatty_r+0x1c>)
    24da:	4605      	mov	r5, r0
    24dc:	4608      	mov	r0, r1
    24de:	6023      	str	r3, [r4, #0]
    24e0:	f000 f84c 	bl	257c <_isatty>
    24e4:	1c43      	adds	r3, r0, #1
    24e6:	d102      	bne.n	24ee <_isatty_r+0x1a>
    24e8:	6823      	ldr	r3, [r4, #0]
    24ea:	b103      	cbz	r3, 24ee <_isatty_r+0x1a>
    24ec:	602b      	str	r3, [r5, #0]
    24ee:	bd38      	pop	{r3, r4, r5, pc}
    24f0:	200000c0 	.word	0x200000c0

000024f4 <_lseek_r>:
    24f4:	b538      	push	{r3, r4, r5, lr}
    24f6:	4605      	mov	r5, r0
    24f8:	4608      	mov	r0, r1
    24fa:	4611      	mov	r1, r2
    24fc:	2200      	movs	r2, #0
    24fe:	4c05      	ldr	r4, [pc, #20]	; (2514 <_lseek_r+0x20>)
    2500:	6022      	str	r2, [r4, #0]
    2502:	461a      	mov	r2, r3
    2504:	f000 f842 	bl	258c <_lseek>
    2508:	1c43      	adds	r3, r0, #1
    250a:	d102      	bne.n	2512 <_lseek_r+0x1e>
    250c:	6823      	ldr	r3, [r4, #0]
    250e:	b103      	cbz	r3, 2512 <_lseek_r+0x1e>
    2510:	602b      	str	r3, [r5, #0]
    2512:	bd38      	pop	{r3, r4, r5, pc}
    2514:	200000c0 	.word	0x200000c0

00002518 <memchr>:
    2518:	b510      	push	{r4, lr}
    251a:	b2c9      	uxtb	r1, r1
    251c:	4402      	add	r2, r0
    251e:	4290      	cmp	r0, r2
    2520:	4603      	mov	r3, r0
    2522:	d101      	bne.n	2528 <memchr+0x10>
    2524:	2300      	movs	r3, #0
    2526:	e003      	b.n	2530 <memchr+0x18>
    2528:	781c      	ldrb	r4, [r3, #0]
    252a:	3001      	adds	r0, #1
    252c:	428c      	cmp	r4, r1
    252e:	d1f6      	bne.n	251e <memchr+0x6>
    2530:	4618      	mov	r0, r3
    2532:	bd10      	pop	{r4, pc}

00002534 <__malloc_lock>:
    2534:	4770      	bx	lr

00002536 <__malloc_unlock>:
    2536:	4770      	bx	lr

00002538 <_read_r>:
    2538:	b538      	push	{r3, r4, r5, lr}
    253a:	4605      	mov	r5, r0
    253c:	4608      	mov	r0, r1
    253e:	4611      	mov	r1, r2
    2540:	2200      	movs	r2, #0
    2542:	4c05      	ldr	r4, [pc, #20]	; (2558 <_read_r+0x20>)
    2544:	6022      	str	r2, [r4, #0]
    2546:	461a      	mov	r2, r3
    2548:	f000 f828 	bl	259c <_read>
    254c:	1c43      	adds	r3, r0, #1
    254e:	d102      	bne.n	2556 <_read_r+0x1e>
    2550:	6823      	ldr	r3, [r4, #0]
    2552:	b103      	cbz	r3, 2556 <_read_r+0x1e>
    2554:	602b      	str	r3, [r5, #0]
    2556:	bd38      	pop	{r3, r4, r5, pc}
    2558:	200000c0 	.word	0x200000c0

0000255c <_close>:
    255c:	2258      	movs	r2, #88	; 0x58
    255e:	4b02      	ldr	r3, [pc, #8]	; (2568 <_close+0xc>)
    2560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2564:	601a      	str	r2, [r3, #0]
    2566:	4770      	bx	lr
    2568:	200000c0 	.word	0x200000c0

0000256c <_fstat>:
    256c:	2258      	movs	r2, #88	; 0x58
    256e:	4b02      	ldr	r3, [pc, #8]	; (2578 <_fstat+0xc>)
    2570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2574:	601a      	str	r2, [r3, #0]
    2576:	4770      	bx	lr
    2578:	200000c0 	.word	0x200000c0

0000257c <_isatty>:
    257c:	2258      	movs	r2, #88	; 0x58
    257e:	4b02      	ldr	r3, [pc, #8]	; (2588 <_isatty+0xc>)
    2580:	2000      	movs	r0, #0
    2582:	601a      	str	r2, [r3, #0]
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	200000c0 	.word	0x200000c0

0000258c <_lseek>:
    258c:	2258      	movs	r2, #88	; 0x58
    258e:	4b02      	ldr	r3, [pc, #8]	; (2598 <_lseek+0xc>)
    2590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2594:	601a      	str	r2, [r3, #0]
    2596:	4770      	bx	lr
    2598:	200000c0 	.word	0x200000c0

0000259c <_read>:
    259c:	2258      	movs	r2, #88	; 0x58
    259e:	4b02      	ldr	r3, [pc, #8]	; (25a8 <_read+0xc>)
    25a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25a4:	601a      	str	r2, [r3, #0]
    25a6:	4770      	bx	lr
    25a8:	200000c0 	.word	0x200000c0

000025ac <_sbrk>:
    25ac:	4a04      	ldr	r2, [pc, #16]	; (25c0 <_sbrk+0x14>)
    25ae:	4905      	ldr	r1, [pc, #20]	; (25c4 <_sbrk+0x18>)
    25b0:	6813      	ldr	r3, [r2, #0]
    25b2:	2b00      	cmp	r3, #0
    25b4:	bf08      	it	eq
    25b6:	460b      	moveq	r3, r1
    25b8:	4418      	add	r0, r3
    25ba:	6010      	str	r0, [r2, #0]
    25bc:	4618      	mov	r0, r3
    25be:	4770      	bx	lr
    25c0:	200000bc 	.word	0x200000bc
    25c4:	200000c8 	.word	0x200000c8

000025c8 <_exit>:
    25c8:	e7fe      	b.n	25c8 <_exit>
    25ca:	bf00      	nop

000025cc <_init>:
    25cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ce:	bf00      	nop

000025d0 <_fini>:
    25d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25d2:	bf00      	nop
    25d4:	67617453 	.word	0x67617453
    25d8:	20312065 	.word	0x20312065
    25dc:	5047202d 	.word	0x5047202d
    25e0:	4f204f49 	.word	0x4f204f49
    25e4:	75707475 	.word	0x75707475
    25e8:	6e452074 	.word	0x6e452074
    25ec:	656c6261 	.word	0x656c6261
    25f0:	73655420 	.word	0x73655420
    25f4:	00000a74 	.word	0x00000a74
    25f8:	7453202d 	.word	0x7453202d
    25fc:	20656761 	.word	0x20656761
    2600:	2d206131 	.word	0x2d206131
    2604:	74655320 	.word	0x74655320
    2608:	49504720 	.word	0x49504720
    260c:	754f204f 	.word	0x754f204f
    2610:	74757074 	.word	0x74757074
    2614:	616e4520 	.word	0x616e4520
    2618:	0a656c62 	.word	0x0a656c62
    261c:	00000000 	.word	0x00000000
    2620:	7074754f 	.word	0x7074754f
    2624:	45207475 	.word	0x45207475
    2628:	6c62616e 	.word	0x6c62616e
    262c:	74532065 	.word	0x74532065
    2630:	73757461 	.word	0x73757461
    2634:	7830203a 	.word	0x7830203a
    2638:	0a0a7825 	.word	0x0a0a7825
    263c:	00000000 	.word	0x00000000
    2640:	20746553 	.word	0x20746553
    2644:	62616e45 	.word	0x62616e45
    2648:	5420656c 	.word	0x5420656c
    264c:	20747365 	.word	0x20747365
    2650:	6c696146 	.word	0x6c696146
    2654:	202c6465 	.word	0x202c6465
    2658:	6f727245 	.word	0x6f727245
    265c:	6f632072 	.word	0x6f632072
    2660:	203a6564 	.word	0x203a6564
    2664:	25783028 	.word	0x25783028
    2668:	00290a78 	.word	0x00290a78
    266c:	20746553 	.word	0x20746553
    2670:	62616e45 	.word	0x62616e45
    2674:	5420656c 	.word	0x5420656c
    2678:	20747365 	.word	0x20747365
    267c:	73736150 	.word	0x73736150
    2680:	000a6465 	.word	0x000a6465
    2684:	7453202d 	.word	0x7453202d
    2688:	20656761 	.word	0x20656761
    268c:	2d206231 	.word	0x2d206231
    2690:	656c4320 	.word	0x656c4320
    2694:	47207261 	.word	0x47207261
    2698:	204f4950 	.word	0x204f4950
    269c:	7074754f 	.word	0x7074754f
    26a0:	45207475 	.word	0x45207475
    26a4:	6c62616e 	.word	0x6c62616e
    26a8:	00000a65 	.word	0x00000a65
    26ac:	61656c43 	.word	0x61656c43
    26b0:	754f2072 	.word	0x754f2072
    26b4:	74757074 	.word	0x74757074
    26b8:	616e4520 	.word	0x616e4520
    26bc:	20656c62 	.word	0x20656c62
    26c0:	74736554 	.word	0x74736554
    26c4:	69614620 	.word	0x69614620
    26c8:	2c64656c 	.word	0x2c64656c
    26cc:	72724520 	.word	0x72724520
    26d0:	6320726f 	.word	0x6320726f
    26d4:	3a65646f 	.word	0x3a65646f
    26d8:	78302820 	.word	0x78302820
    26dc:	0a297825 	.word	0x0a297825
    26e0:	00000000 	.word	0x00000000
    26e4:	61656c43 	.word	0x61656c43
    26e8:	754f2072 	.word	0x754f2072
    26ec:	74757074 	.word	0x74757074
    26f0:	616e4520 	.word	0x616e4520
    26f4:	20656c62 	.word	0x20656c62
    26f8:	74736554 	.word	0x74736554
    26fc:	73615020 	.word	0x73615020
    2700:	0a646573 	.word	0x0a646573
    2704:	00000000 	.word	0x00000000
    2708:	67617453 	.word	0x67617453
    270c:	20322065 	.word	0x20322065
    2710:	5047202d 	.word	0x5047202d
    2714:	41204f49 	.word	0x41204f49
    2718:	7265746c 	.word	0x7265746c
    271c:	6974616e 	.word	0x6974616e
    2720:	46206576 	.word	0x46206576
    2724:	74636e75 	.word	0x74636e75
    2728:	206e6f69 	.word	0x206e6f69
    272c:	62616e45 	.word	0x62616e45
    2730:	5420656c 	.word	0x5420656c
    2734:	0a747365 	.word	0x0a747365
    2738:	00000000 	.word	0x00000000
    273c:	7453202d 	.word	0x7453202d
    2740:	20656761 	.word	0x20656761
    2744:	2d206132 	.word	0x2d206132
    2748:	74655320 	.word	0x74655320
    274c:	49504720 	.word	0x49504720
    2750:	6c41204f 	.word	0x6c41204f
    2754:	6e726574 	.word	0x6e726574
    2758:	76697461 	.word	0x76697461
    275c:	75462065 	.word	0x75462065
    2760:	6974636e 	.word	0x6974636e
    2764:	45206e6f 	.word	0x45206e6f
    2768:	6c62616e 	.word	0x6c62616e
    276c:	00000a65 	.word	0x00000a65
    2770:	746c410a 	.word	0x746c410a
    2774:	616e7265 	.word	0x616e7265
    2778:	46206574 	.word	0x46206574
    277c:	74636e75 	.word	0x74636e75
    2780:	206e6f69 	.word	0x206e6f69
    2784:	62616e45 	.word	0x62616e45
    2788:	5320656c 	.word	0x5320656c
    278c:	75746174 	.word	0x75746174
    2790:	30203a73 	.word	0x30203a73
    2794:	0a782578 	.word	0x0a782578
    2798:	0000000a 	.word	0x0000000a
    279c:	7453202d 	.word	0x7453202d
    27a0:	20656761 	.word	0x20656761
    27a4:	2d206232 	.word	0x2d206232
    27a8:	656c4320 	.word	0x656c4320
    27ac:	47207261 	.word	0x47207261
    27b0:	204f4950 	.word	0x204f4950
    27b4:	65746c41 	.word	0x65746c41
    27b8:	74616e72 	.word	0x74616e72
    27bc:	20657669 	.word	0x20657669
    27c0:	636e7546 	.word	0x636e7546
    27c4:	6e6f6974 	.word	0x6e6f6974
    27c8:	616e4520 	.word	0x616e4520
    27cc:	0a656c62 	.word	0x0a656c62
    27d0:	00000000 	.word	0x00000000
    27d4:	65746c41 	.word	0x65746c41
    27d8:	74616e72 	.word	0x74616e72
    27dc:	75462065 	.word	0x75462065
    27e0:	6974636e 	.word	0x6974636e
    27e4:	45206e6f 	.word	0x45206e6f
    27e8:	6c62616e 	.word	0x6c62616e
    27ec:	74532065 	.word	0x74532065
    27f0:	73757461 	.word	0x73757461
    27f4:	7830203a 	.word	0x7830203a
    27f8:	0a0a7825 	.word	0x0a0a7825
    27fc:	00000000 	.word	0x00000000
    2800:	61656c43 	.word	0x61656c43
    2804:	6e452072 	.word	0x6e452072
    2808:	656c6261 	.word	0x656c6261
    280c:	73655420 	.word	0x73655420
    2810:	61462074 	.word	0x61462074
    2814:	64656c69 	.word	0x64656c69
    2818:	7245202c 	.word	0x7245202c
    281c:	20726f72 	.word	0x20726f72
    2820:	65646f63 	.word	0x65646f63
    2824:	3028203a 	.word	0x3028203a
    2828:	29782578 	.word	0x29782578
    282c:	0000000a 	.word	0x0000000a
    2830:	61656c43 	.word	0x61656c43
    2834:	6e452072 	.word	0x6e452072
    2838:	656c6261 	.word	0x656c6261
    283c:	73655420 	.word	0x73655420
    2840:	61502074 	.word	0x61502074
    2844:	64657373 	.word	0x64657373
    2848:	0000000a 	.word	0x0000000a
    284c:	67617453 	.word	0x67617453
    2850:	20332065 	.word	0x20332065
    2854:	5047202d 	.word	0x5047202d
    2858:	50204f49 	.word	0x50204f49
    285c:	49206e69 	.word	0x49206e69
    2860:	54205152 	.word	0x54205152
    2864:	0a747365 	.word	0x0a747365
    2868:	00000000 	.word	0x00000000
    286c:	7453202d 	.word	0x7453202d
    2870:	20656761 	.word	0x20656761
    2874:	2d206133 	.word	0x2d206133
    2878:	49504720 	.word	0x49504720
    287c:	6948204f 	.word	0x6948204f
    2880:	4c206867 	.word	0x4c206867
    2884:	6c657665 	.word	0x6c657665
    2888:	51524920 	.word	0x51524920
    288c:	73655420 	.word	0x73655420
    2890:	00000a74 	.word	0x00000a74
    2894:	68676948 	.word	0x68676948
    2898:	76654c20 	.word	0x76654c20
    289c:	49206c65 	.word	0x49206c65
    28a0:	54205152 	.word	0x54205152
    28a4:	73747365 	.word	0x73747365
    28a8:	73615020 	.word	0x73615020
    28ac:	20646573 	.word	0x20646573
    28b0:	63637553 	.word	0x63637553
    28b4:	66737365 	.word	0x66737365
    28b8:	796c6c75 	.word	0x796c6c75
    28bc:	0000000a 	.word	0x0000000a
    28c0:	6769480a 	.word	0x6769480a
    28c4:	654c2068 	.word	0x654c2068
    28c8:	206c6576 	.word	0x206c6576
    28cc:	20515249 	.word	0x20515249
    28d0:	74736554 	.word	0x74736554
    28d4:	61462073 	.word	0x61462073
    28d8:	64656c69 	.word	0x64656c69
    28dc:	7245202c 	.word	0x7245202c
    28e0:	20726f72 	.word	0x20726f72
    28e4:	65646f43 	.word	0x65646f43
    28e8:	3028203a 	.word	0x3028203a
    28ec:	29782578 	.word	0x29782578
    28f0:	0000000a 	.word	0x0000000a
    28f4:	7453202d 	.word	0x7453202d
    28f8:	20656761 	.word	0x20656761
    28fc:	2d206233 	.word	0x2d206233
    2900:	49504720 	.word	0x49504720
    2904:	6952204f 	.word	0x6952204f
    2908:	676e6973 	.word	0x676e6973
    290c:	67644520 	.word	0x67644520
    2910:	52492065 	.word	0x52492065
    2914:	65542051 	.word	0x65542051
    2918:	000a7473 	.word	0x000a7473
    291c:	69736952 	.word	0x69736952
    2920:	4520676e 	.word	0x4520676e
    2924:	20656764 	.word	0x20656764
    2928:	20515249 	.word	0x20515249
    292c:	74736554 	.word	0x74736554
    2930:	61502073 	.word	0x61502073
    2934:	64657373 	.word	0x64657373
    2938:	63755320 	.word	0x63755320
    293c:	73736563 	.word	0x73736563
    2940:	6c6c7566 	.word	0x6c6c7566
    2944:	00000a79 	.word	0x00000a79
    2948:	7369520a 	.word	0x7369520a
    294c:	20676e69 	.word	0x20676e69
    2950:	65676445 	.word	0x65676445
    2954:	51524920 	.word	0x51524920
    2958:	73655420 	.word	0x73655420
    295c:	46207374 	.word	0x46207374
    2960:	656c6961 	.word	0x656c6961
    2964:	45202c64 	.word	0x45202c64
    2968:	726f7272 	.word	0x726f7272
    296c:	646f4320 	.word	0x646f4320
    2970:	28203a65 	.word	0x28203a65
    2974:	78257830 	.word	0x78257830
    2978:	00000a29 	.word	0x00000a29
    297c:	7453202d 	.word	0x7453202d
    2980:	20656761 	.word	0x20656761
    2984:	2d206333 	.word	0x2d206333
    2988:	49504720 	.word	0x49504720
    298c:	6146204f 	.word	0x6146204f
    2990:	6e696c6c 	.word	0x6e696c6c
    2994:	64452067 	.word	0x64452067
    2998:	49206567 	.word	0x49206567
    299c:	54205152 	.word	0x54205152
    29a0:	0a747365 	.word	0x0a747365
    29a4:	00000000 	.word	0x00000000
    29a8:	6c6c6146 	.word	0x6c6c6146
    29ac:	20676e69 	.word	0x20676e69
    29b0:	65676445 	.word	0x65676445
    29b4:	51524920 	.word	0x51524920
    29b8:	73655420 	.word	0x73655420
    29bc:	50207374 	.word	0x50207374
    29c0:	65737361 	.word	0x65737361
    29c4:	75532064 	.word	0x75532064
    29c8:	73656363 	.word	0x73656363
    29cc:	6c756673 	.word	0x6c756673
    29d0:	000a796c 	.word	0x000a796c
    29d4:	6c61460a 	.word	0x6c61460a
    29d8:	676e696c 	.word	0x676e696c
    29dc:	67644520 	.word	0x67644520
    29e0:	52492065 	.word	0x52492065
    29e4:	65542051 	.word	0x65542051
    29e8:	20737473 	.word	0x20737473
    29ec:	6c696146 	.word	0x6c696146
    29f0:	202c6465 	.word	0x202c6465
    29f4:	6f727245 	.word	0x6f727245
    29f8:	6f432072 	.word	0x6f432072
    29fc:	203a6564 	.word	0x203a6564
    2a00:	25783028 	.word	0x25783028
    2a04:	000a2978 	.word	0x000a2978
    2a08:	7453202d 	.word	0x7453202d
    2a0c:	20656761 	.word	0x20656761
    2a10:	2d206433 	.word	0x2d206433
    2a14:	49504720 	.word	0x49504720
    2a18:	6f4c204f 	.word	0x6f4c204f
    2a1c:	654c2077 	.word	0x654c2077
    2a20:	206c6576 	.word	0x206c6576
    2a24:	20515249 	.word	0x20515249
    2a28:	74736554 	.word	0x74736554
    2a2c:	0000000a 	.word	0x0000000a
    2a30:	20776f4c 	.word	0x20776f4c
    2a34:	6576654c 	.word	0x6576654c
    2a38:	5249206c 	.word	0x5249206c
    2a3c:	65542051 	.word	0x65542051
    2a40:	20737473 	.word	0x20737473
    2a44:	73736150 	.word	0x73736150
    2a48:	53206465 	.word	0x53206465
    2a4c:	65636375 	.word	0x65636375
    2a50:	75667373 	.word	0x75667373
    2a54:	0a796c6c 	.word	0x0a796c6c
    2a58:	00000000 	.word	0x00000000
    2a5c:	776f4c0a 	.word	0x776f4c0a
    2a60:	76654c20 	.word	0x76654c20
    2a64:	49206c65 	.word	0x49206c65
    2a68:	54205152 	.word	0x54205152
    2a6c:	73747365 	.word	0x73747365
    2a70:	69614620 	.word	0x69614620
    2a74:	2c64656c 	.word	0x2c64656c
    2a78:	72724520 	.word	0x72724520
    2a7c:	4320726f 	.word	0x4320726f
    2a80:	3a65646f 	.word	0x3a65646f
    2a84:	78302820 	.word	0x78302820
    2a88:	0a297825 	.word	0x0a297825
    2a8c:	0000000a 	.word	0x0000000a
    2a90:	67617453 	.word	0x67617453
    2a94:	20342065 	.word	0x20342065
    2a98:	5047202d 	.word	0x5047202d
    2a9c:	4d204f49 	.word	0x4d204f49
    2aa0:	656b7361 	.word	0x656b7361
    2aa4:	754f2064 	.word	0x754f2064
    2aa8:	74757074 	.word	0x74757074
    2aac:	73655420 	.word	0x73655420
    2ab0:	00000a74 	.word	0x00000a74
    2ab4:	7453202d 	.word	0x7453202d
    2ab8:	20656761 	.word	0x20656761
    2abc:	2d206134 	.word	0x2d206134
    2ac0:	49504720 	.word	0x49504720
    2ac4:	614d204f 	.word	0x614d204f
    2ac8:	64656b73 	.word	0x64656b73
    2acc:	74754f20 	.word	0x74754f20
    2ad0:	20747570 	.word	0x20747570
    2ad4:	6544202d 	.word	0x6544202d
    2ad8:	6d726574 	.word	0x6d726574
    2adc:	73696e69 	.word	0x73696e69
    2ae0:	20636974 	.word	0x20636974
    2ae4:	74736554 	.word	0x74736554
    2ae8:	0000000a 	.word	0x0000000a
    2aec:	67617453 	.word	0x67617453
    2af0:	61342065 	.word	0x61342065
    2af4:	74654420 	.word	0x74654420
    2af8:	696d7265 	.word	0x696d7265
    2afc:	7473696e 	.word	0x7473696e
    2b00:	4d206369 	.word	0x4d206369
    2b04:	656b7361 	.word	0x656b7361
    2b08:	754f2064 	.word	0x754f2064
    2b0c:	74757074 	.word	0x74757074
    2b10:	73655420 	.word	0x73655420
    2b14:	50207374 	.word	0x50207374
    2b18:	65737361 	.word	0x65737361
    2b1c:	75532064 	.word	0x75532064
    2b20:	73656363 	.word	0x73656363
    2b24:	6c756673 	.word	0x6c756673
    2b28:	000a796c 	.word	0x000a796c
    2b2c:	6174530a 	.word	0x6174530a
    2b30:	34206567 	.word	0x34206567
    2b34:	65442061 	.word	0x65442061
    2b38:	6d726574 	.word	0x6d726574
    2b3c:	73696e69 	.word	0x73696e69
    2b40:	20636974 	.word	0x20636974
    2b44:	6b73614d 	.word	0x6b73614d
    2b48:	4f206465 	.word	0x4f206465
    2b4c:	75707475 	.word	0x75707475
    2b50:	65542074 	.word	0x65542074
    2b54:	20737473 	.word	0x20737473
    2b58:	6c696146 	.word	0x6c696146
    2b5c:	202c6465 	.word	0x202c6465
    2b60:	6f727245 	.word	0x6f727245
    2b64:	6f432072 	.word	0x6f432072
    2b68:	203a6564 	.word	0x203a6564
    2b6c:	25783028 	.word	0x25783028
    2b70:	000a2978 	.word	0x000a2978
    2b74:	7453202d 	.word	0x7453202d
    2b78:	20656761 	.word	0x20656761
    2b7c:	2d206234 	.word	0x2d206234
    2b80:	49504720 	.word	0x49504720
    2b84:	614d204f 	.word	0x614d204f
    2b88:	64656b73 	.word	0x64656b73
    2b8c:	74754f20 	.word	0x74754f20
    2b90:	20747570 	.word	0x20747570
    2b94:	6152202d 	.word	0x6152202d
    2b98:	6d6f646e 	.word	0x6d6f646e
    2b9c:	73655420 	.word	0x73655420
    2ba0:	00000a74 	.word	0x00000a74
    2ba4:	67617453 	.word	0x67617453
    2ba8:	62342065 	.word	0x62342065
    2bac:	6e615220 	.word	0x6e615220
    2bb0:	206d6f64 	.word	0x206d6f64
    2bb4:	6b73614d 	.word	0x6b73614d
    2bb8:	4f206465 	.word	0x4f206465
    2bbc:	75707475 	.word	0x75707475
    2bc0:	65542074 	.word	0x65542074
    2bc4:	20737473 	.word	0x20737473
    2bc8:	73736150 	.word	0x73736150
    2bcc:	53206465 	.word	0x53206465
    2bd0:	65636375 	.word	0x65636375
    2bd4:	75667373 	.word	0x75667373
    2bd8:	0a796c6c 	.word	0x0a796c6c
    2bdc:	00000000 	.word	0x00000000
    2be0:	6174530a 	.word	0x6174530a
    2be4:	34206567 	.word	0x34206567
    2be8:	61522062 	.word	0x61522062
    2bec:	6d6f646e 	.word	0x6d6f646e
    2bf0:	73614d20 	.word	0x73614d20
    2bf4:	2064656b 	.word	0x2064656b
    2bf8:	7074754f 	.word	0x7074754f
    2bfc:	54207475 	.word	0x54207475
    2c00:	73747365 	.word	0x73747365
    2c04:	69614620 	.word	0x69614620
    2c08:	2c64656c 	.word	0x2c64656c
    2c0c:	72724520 	.word	0x72724520
    2c10:	4320726f 	.word	0x4320726f
    2c14:	3a65646f 	.word	0x3a65646f
    2c18:	78302820 	.word	0x78302820
    2c1c:	0a297825 	.word	0x0a297825
    2c20:	00000000 	.word	0x00000000
    2c24:	6c6c410a 	.word	0x6c6c410a
    2c28:	73614d20 	.word	0x73614d20
    2c2c:	2064656b 	.word	0x2064656b
    2c30:	7074754f 	.word	0x7074754f
    2c34:	54207475 	.word	0x54207475
    2c38:	73747365 	.word	0x73747365
    2c3c:	73615020 	.word	0x73615020
    2c40:	20646573 	.word	0x20646573
    2c44:	63637553 	.word	0x63637553
    2c48:	66737365 	.word	0x66737365
    2c4c:	796c6c75 	.word	0x796c6c75
    2c50:	0000000a 	.word	0x0000000a
    2c54:	74726f43 	.word	0x74726f43
    2c58:	4d2d7865 	.word	0x4d2d7865
    2c5c:	65442033 	.word	0x65442033
    2c60:	6e676973 	.word	0x6e676973
    2c64:	72617453 	.word	0x72617453
    2c68:	202d2074 	.word	0x202d2074
    2c6c:	4f495047 	.word	0x4f495047
    2c70:	69724420 	.word	0x69724420
    2c74:	20726576 	.word	0x20726576
    2c78:	74736554 	.word	0x74736554
    2c7c:	72202d20 	.word	0x72202d20
    2c80:	73697665 	.word	0x73697665
    2c84:	206e6f69 	.word	0x206e6f69
    2c88:	76655224 	.word	0x76655224
    2c8c:	6f697369 	.word	0x6f697369
    2c90:	32203a6e 	.word	0x32203a6e
    2c94:	38343234 	.word	0x38343234
    2c98:	0a242034 	.word	0x0a242034
    2c9c:	00000000 	.word	0x00000000
    2ca0:	4f495047 	.word	0x4f495047
    2ca4:	6e203020 	.word	0x6e203020
    2ca8:	7020746f 	.word	0x7020746f
    2cac:	65736572 	.word	0x65736572
    2cb0:	202e746e 	.word	0x202e746e
    2cb4:	74736554 	.word	0x74736554
    2cb8:	696b7320 	.word	0x696b7320
    2cbc:	64657070 	.word	0x64657070
    2cc0:	0000002e 	.word	0x0000002e
    2cc4:	54202a2a 	.word	0x54202a2a
    2cc8:	20545345 	.word	0x20545345
    2ccc:	53534150 	.word	0x53534150
    2cd0:	2a204445 	.word	0x2a204445
    2cd4:	00000a2a 	.word	0x00000a2a
    2cd8:	54202a2a 	.word	0x54202a2a
    2cdc:	20545345 	.word	0x20545345
    2ce0:	4c494146 	.word	0x4c494146
    2ce4:	2a204445 	.word	0x2a204445
    2ce8:	45202c2a 	.word	0x45202c2a
    2cec:	726f7272 	.word	0x726f7272
    2cf0:	646f6320 	.word	0x646f6320
    2cf4:	28203a65 	.word	0x28203a65
    2cf8:	78257830 	.word	0x78257830
    2cfc:	00000a29 	.word	0x00000a29

00002d00 <_global_impure_ptr>:
    2d00:	2000000c                                ... 

00002d04 <__sf_fake_stderr>:
	...

00002d24 <__sf_fake_stdin>:
	...

00002d44 <__sf_fake_stdout>:
	...
    2d64:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2d74:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2d84:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2d94:	                                         ef.
