
sleep_demo.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	00000211 	.word	0x00000211
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 f89d 	bl	288 <main>
    bl    exit
     14e:	f000 ffdf 	bl	1110 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00001cf4 	.word	0x00001cf4
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000080 	.word	0x20000080
    ldr     r0,=SystemInit
     168:	00001101 	.word	0x00001101

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <PORT1_COMB_Handler+0x2>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <timer0_id_check>:
/* Macros for word access to address */
#define HW32_REG(ADDRESS)  (*((volatile unsigned long  *)(ADDRESS)))

int timer0_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <Stack_Size+0x8>)
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	2b22      	cmp	r3, #34	; 0x22
     1f6:	d001      	beq.n	1fc <timer0_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     1f8:	2001      	movs	r0, #1
else
  return 0;
}
     1fa:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8))
     1fc:	4b03      	ldr	r3, [pc, #12]	; (20c <Stack_Size+0xc>)
     1fe:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     200:	38b8      	subs	r0, #184	; 0xb8
     202:	bf18      	it	ne
     204:	2001      	movne	r0, #1
     206:	4770      	bx	lr
     208:	40000fe0 	.word	0x40000fe0
     20c:	40000fe4 	.word	0x40000fe4

00000210 <TIMER0_Handler>:
//
// Timer interrupt handler
//

void TIMER0_Handler(void)
{
     210:	b510      	push	{r4, lr}
  CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER0);
  // Signal to main code that the INT was taken
  IntTaken++;
     212:	4c19      	ldr	r4, [pc, #100]	; (278 <TIMER0_Handler+0x68>)
  CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER0);
     214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     218:	f000 fa9a 	bl	750 <CM3DS_MPS2_timer_ClearIRQ>
  IntTaken++;
     21c:	6823      	ldr	r3, [r4, #0]
     21e:	3301      	adds	r3, #1
     220:	6023      	str	r3, [r4, #0]
  if (SleepOnExitTest==1){
     222:	6863      	ldr	r3, [r4, #4]
     224:	2b01      	cmp	r3, #1
     226:	d009      	beq.n	23c <TIMER0_Handler+0x2c>
      CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
      CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
      }
   } else {
    // Stop the timer and disable interrupt generation
    CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     228:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     22c:	f000 fa82 	bl	734 <CM3DS_MPS2_timer_StopTimer>
    CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
  }

}
     230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     234:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     238:	f000 ba70 	b.w	71c <CM3DS_MPS2_timer_DisableIRQ>
    puts("  TIMER IRQ.");
     23c:	480f      	ldr	r0, [pc, #60]	; (27c <TIMER0_Handler+0x6c>)
     23e:	f000 ffdf 	bl	1200 <puts>
    if (IntTaken==1){
     242:	6823      	ldr	r3, [r4, #0]
     244:	2b01      	cmp	r3, #1
     246:	d003      	beq.n	250 <TIMER0_Handler+0x40>
    if (IntTaken==2){
     248:	6823      	ldr	r3, [r4, #0]
     24a:	2b02      	cmp	r3, #2
     24c:	d004      	beq.n	258 <TIMER0_Handler+0x48>
}
     24e:	bd10      	pop	{r4, pc}
      puts("  Enter sleep...");
     250:	480b      	ldr	r0, [pc, #44]	; (280 <TIMER0_Handler+0x70>)
     252:	f000 ffd5 	bl	1200 <puts>
     256:	e7f7      	b.n	248 <TIMER0_Handler+0x38>
      SCB->SCR &= ~(1UL << 1);
     258:	4a0a      	ldr	r2, [pc, #40]	; (284 <TIMER0_Handler+0x74>)
      CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     25a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
      SCB->SCR &= ~(1UL << 1);
     25e:	6913      	ldr	r3, [r2, #16]
     260:	f023 0302 	bic.w	r3, r3, #2
     264:	6113      	str	r3, [r2, #16]
      CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     266:	f000 fa65 	bl	734 <CM3DS_MPS2_timer_StopTimer>
}
     26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     26e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     272:	f000 ba53 	b.w	71c <CM3DS_MPS2_timer_DisableIRQ>
     276:	bf00      	nop
     278:	20000068 	.word	0x20000068
     27c:	00001c6c 	.word	0x00001c6c
     280:	00001c7c 	.word	0x00001c7c
     284:	e000ed00 	.word	0xe000ed00

00000288 <main>:
{
     288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  UartStdOutInit();
     28c:	f000 fa20 	bl	6d0 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - Sleep Demo - revision $Revision: 243249 $\n");
     290:	48a7      	ldr	r0, [pc, #668]	; (530 <main+0x2a8>)
     292:	f000 ffb5 	bl	1200 <puts>
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     296:	4ba7      	ldr	r3, [pc, #668]	; (534 <main+0x2ac>)
     298:	681b      	ldr	r3, [r3, #0]
     29a:	2b22      	cmp	r3, #34	; 0x22
     29c:	d007      	beq.n	2ae <main+0x26>
    puts ("** TEST SKIPPED ** Timer 0 not present.");
     29e:	48a6      	ldr	r0, [pc, #664]	; (538 <main+0x2b0>)
     2a0:	f000 ffae 	bl	1200 <puts>
    UartEndSimulation();
     2a4:	f000 fa2c 	bl	700 <UartEndSimulation>
}
     2a8:	2000      	movs	r0, #0
     2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8))
     2ae:	4ba3      	ldr	r3, [pc, #652]	; (53c <main+0x2b4>)
     2b0:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     2b2:	2bb8      	cmp	r3, #184	; 0xb8
     2b4:	d1f3      	bne.n	29e <main+0x16>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     2b6:	f44f 7580 	mov.w	r5, #256	; 0x100
  puts("\n- WFI SLEEP:");
     2ba:	48a1      	ldr	r0, [pc, #644]	; (540 <main+0x2b8>)
     2bc:	f000 ffa0 	bl	1200 <puts>
  SCB->SCR &= ~(1UL << 2);
     2c0:	49a0      	ldr	r1, [pc, #640]	; (544 <main+0x2bc>)
     2c2:	4ca1      	ldr	r4, [pc, #644]	; (548 <main+0x2c0>)
     2c4:	690b      	ldr	r3, [r1, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     2c6:	2201      	movs	r2, #1
  SCB->SCR &= ~(1UL << 2);
     2c8:	f023 0304 	bic.w	r3, r3, #4
     2cc:	610b      	str	r3, [r1, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     2ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     2d2:	21f0      	movs	r1, #240	; 0xf0
     2d4:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
     2d8:	f000 fa40 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     2dc:	6025      	str	r5, [r4, #0]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     2de:	bf30      	wfi
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     2e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  if (IntTaken) puts("  TIMER IRQ.\n");
     2e4:	4c99      	ldr	r4, [pc, #612]	; (54c <main+0x2c4>)
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     2e6:	f000 fa25 	bl	734 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     2ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     2ee:	f000 fa15 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
  if (IntTaken) puts("  TIMER IRQ.\n");
     2f2:	6823      	ldr	r3, [r4, #0]
     2f4:	2b00      	cmp	r3, #0
     2f6:	f040 81cb 	bne.w	690 <main+0x408>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     2fa:	f44f 7680 	mov.w	r6, #256	; 0x100
  IntTaken = 0; // Reset software variable
     2fe:	2700      	movs	r7, #0
     300:	4d91      	ldr	r5, [pc, #580]	; (548 <main+0x2c0>)
  puts("\n- WFE SLEEP:");
     302:	4893      	ldr	r0, [pc, #588]	; (550 <main+0x2c8>)
     304:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
  IntTaken = 0; // Reset software variable
     308:	6027      	str	r7, [r4, #0]
  puts("\n- WFE SLEEP:");
     30a:	f000 ff79 	bl	1200 <puts>
  SCB->SCR &= ~(1UL << 2);
     30e:	498d      	ldr	r1, [pc, #564]	; (544 <main+0x2bc>)
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     310:	2201      	movs	r2, #1
  SCB->SCR &= ~(1UL << 2);
     312:	690b      	ldr	r3, [r1, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  SCB->SCR &= ~(1UL << 2);
     318:	f023 0304 	bic.w	r3, r3, #4
     31c:	610b      	str	r3, [r1, #16]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     31e:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     322:	21f0      	movs	r1, #240	; 0xf0
  IntTaken = 0; // Reset software variable
     324:	6027      	str	r7, [r4, #0]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     326:	f000 fa19 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     32a:	602e      	str	r6, [r5, #0]
  while  (IntTaken==0) { /* Loop for sleep :
     32c:	6823      	ldr	r3, [r4, #0]
     32e:	b91b      	cbnz	r3, 338 <main+0xb0>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     330:	bf20      	wfe
     332:	6823      	ldr	r3, [r4, #0]
     334:	2b00      	cmp	r3, #0
     336:	d0fb      	beq.n	330 <main+0xa8>
  IntTaken = 0; // Reset software variable
     338:	2600      	movs	r6, #0
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     33a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     33e:	f000 f9f9 	bl	734 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     342:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     346:	f000 f9e9 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
  puts("  TIMER IRQ.\n");
     34a:	4882      	ldr	r0, [pc, #520]	; (554 <main+0x2cc>)
     34c:	f000 ff58 	bl	1200 <puts>
  puts("\n- SLEEP-ON-EXIT:");
     350:	4881      	ldr	r0, [pc, #516]	; (558 <main+0x2d0>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     352:	f44f 7580 	mov.w	r5, #256	; 0x100
  IntTaken = 0; // Reset software variable
     356:	6026      	str	r6, [r4, #0]
  puts("\n- SLEEP-ON-EXIT:");
     358:	f000 ff52 	bl	1200 <puts>
  SleepOnExitTest = 1;
     35c:	f04f 0c01 	mov.w	ip, #1
  SCB->SCR &= ~(1UL << 2);
     360:	4b78      	ldr	r3, [pc, #480]	; (544 <main+0x2bc>)
     362:	4f79      	ldr	r7, [pc, #484]	; (548 <main+0x2c0>)
     364:	691a      	ldr	r2, [r3, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  SCB->SCR &= ~(1UL << 2);
     36a:	f022 0204 	bic.w	r2, r2, #4
     36e:	611a      	str	r2, [r3, #16]
  SCB->SCR |= (1UL << 1);
     370:	691a      	ldr	r2, [r3, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     372:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  SCB->SCR |= (1UL << 1);
     376:	f042 0202 	orr.w	r2, r2, #2
     37a:	611a      	str	r2, [r3, #16]
     37c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     380:	4662      	mov	r2, ip
  IntTaken = 0; // Reset software variable
     382:	6026      	str	r6, [r4, #0]
  SleepOnExitTest = 1;
     384:	f8c4 c004 	str.w	ip, [r4, #4]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     388:	f000 f9e8 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     38c:	603d      	str	r5, [r7, #0]
  while  (IntTaken==0) {
     38e:	6823      	ldr	r3, [r4, #0]
     390:	2b00      	cmp	r3, #0
     392:	d0fc      	beq.n	38e <main+0x106>
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     394:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     398:	f000 f9cc 	bl	734 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     39c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     3a0:	f000 f9bc 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
  IntTaken = 0; // Reset software variable
     3a4:	2300      	movs	r3, #0
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     3a6:	f44f 7780 	mov.w	r7, #256	; 0x100
  SCB->SCR &= ~(1UL << 1);
     3aa:	4d66      	ldr	r5, [pc, #408]	; (544 <main+0x2bc>)
  IntTaken = 0; // Reset software variable
     3ac:	6023      	str	r3, [r4, #0]
  SleepOnExitTest = 0;
     3ae:	6063      	str	r3, [r4, #4]
  SCB->SCR &= ~(1UL << 1);
     3b0:	692b      	ldr	r3, [r5, #16]
  puts("\n- WFI DEEP SLEEP:");
     3b2:	486a      	ldr	r0, [pc, #424]	; (55c <main+0x2d4>)
  SCB->SCR &= ~(1UL << 1);
     3b4:	f023 0302 	bic.w	r3, r3, #2
     3b8:	612b      	str	r3, [r5, #16]
  puts("\n- WFI DEEP SLEEP:");
     3ba:	f000 ff21 	bl	1200 <puts>
  SCB->SCR |= (1UL << 2);
     3be:	692b      	ldr	r3, [r5, #16]
     3c0:	4e61      	ldr	r6, [pc, #388]	; (548 <main+0x2c0>)
     3c2:	f043 0304 	orr.w	r3, r3, #4
     3c6:	612b      	str	r3, [r5, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     3c8:	2201      	movs	r2, #1
     3ca:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
     3ce:	21f0      	movs	r1, #240	; 0xf0
     3d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     3d4:	f000 f9c2 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     3d8:	6037      	str	r7, [r6, #0]
  __ASM volatile ("wfi");
     3da:	bf30      	wfi
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     3dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     3e0:	f000 f9a8 	bl	734 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     3e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     3e8:	f000 f998 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
  if (IntTaken) puts("  TIMER IRQ.\n");
     3ec:	6823      	ldr	r3, [r4, #0]
     3ee:	2b00      	cmp	r3, #0
     3f0:	f040 814a 	bne.w	688 <main+0x400>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     3f4:	f44f 7680 	mov.w	r6, #256	; 0x100
  IntTaken = 0; // Reset software variable
     3f8:	2700      	movs	r7, #0
     3fa:	4d53      	ldr	r5, [pc, #332]	; (548 <main+0x2c0>)
  puts("\n- WFE DEEP SLEEP:");
     3fc:	4858      	ldr	r0, [pc, #352]	; (560 <main+0x2d8>)
     3fe:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
  IntTaken = 0; // Reset software variable
     402:	6027      	str	r7, [r4, #0]
  puts("\n- WFE DEEP SLEEP:");
     404:	f000 fefc 	bl	1200 <puts>
  SCB->SCR |= (1UL << 2);
     408:	494e      	ldr	r1, [pc, #312]	; (544 <main+0x2bc>)
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     40a:	2201      	movs	r2, #1
  SCB->SCR |= (1UL << 2);
     40c:	690b      	ldr	r3, [r1, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     40e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  SCB->SCR |= (1UL << 2);
     412:	f043 0304 	orr.w	r3, r3, #4
     416:	610b      	str	r3, [r1, #16]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     418:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     41c:	21f0      	movs	r1, #240	; 0xf0
  IntTaken = 0; // Reset software variable
     41e:	6027      	str	r7, [r4, #0]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     420:	f000 f99c 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     424:	602e      	str	r6, [r5, #0]
  while  (IntTaken==0) { /* Loop for sleep :
     426:	6823      	ldr	r3, [r4, #0]
     428:	b91b      	cbnz	r3, 432 <main+0x1aa>
  __ASM volatile ("wfe");
     42a:	bf20      	wfe
     42c:	6823      	ldr	r3, [r4, #0]
     42e:	2b00      	cmp	r3, #0
     430:	d0fb      	beq.n	42a <main+0x1a2>
  IntTaken = 0; // Reset software variable
     432:	2600      	movs	r6, #0
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     434:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     438:	f000 f97c 	bl	734 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     43c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     440:	f000 f96c 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
  puts("  TIMER IRQ.\n");
     444:	4843      	ldr	r0, [pc, #268]	; (554 <main+0x2cc>)
     446:	f000 fedb 	bl	1200 <puts>
  puts("\n- SLEEP-ON-EXIT deep sleep:");
     44a:	4846      	ldr	r0, [pc, #280]	; (564 <main+0x2dc>)
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     44c:	f44f 7580 	mov.w	r5, #256	; 0x100
  IntTaken = 0; // Reset software variable
     450:	6026      	str	r6, [r4, #0]
  puts("\n- SLEEP-ON-EXIT deep sleep:");
     452:	f000 fed5 	bl	1200 <puts>
  SleepOnExitTest = 1;
     456:	f04f 0c01 	mov.w	ip, #1
  SCB->SCR |= (1UL << 2);
     45a:	4b3a      	ldr	r3, [pc, #232]	; (544 <main+0x2bc>)
     45c:	4f3a      	ldr	r7, [pc, #232]	; (548 <main+0x2c0>)
     45e:	691a      	ldr	r2, [r3, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  SCB->SCR |= (1UL << 2);
     464:	f042 0204 	orr.w	r2, r2, #4
     468:	611a      	str	r2, [r3, #16]
  SCB->SCR |= (1UL << 1);
     46a:	691a      	ldr	r2, [r3, #16]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     46c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  SCB->SCR |= (1UL << 1);
     470:	f042 0202 	orr.w	r2, r2, #2
     474:	611a      	str	r2, [r3, #16]
     476:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     47a:	4662      	mov	r2, ip
  IntTaken = 0; // Reset software variable
     47c:	6026      	str	r6, [r4, #0]
  SleepOnExitTest = 1;
     47e:	f8c4 c004 	str.w	ip, [r4, #4]
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     482:	f000 f96b 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     486:	603d      	str	r5, [r7, #0]
  while  (IntTaken==0) {
     488:	6823      	ldr	r3, [r4, #0]
     48a:	2b00      	cmp	r3, #0
     48c:	d0fc      	beq.n	488 <main+0x200>
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     48e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     492:	f000 f94f 	bl	734 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     496:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     49a:	f000 f93f 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
  IntTaken = 0; // Reset software variable
     49e:	2300      	movs	r3, #0
  CM3DS_MPS2_SYSCON->PMUCTRL = CM3DS_MPS2_SYSCON_PMUCTRL_EN_Msk; // set bit
     4a0:	2601      	movs	r6, #1
  SCB->SCR &= ~(1UL << 1);
     4a2:	4d28      	ldr	r5, [pc, #160]	; (544 <main+0x2bc>)
  IntTaken = 0; // Reset software variable
     4a4:	6023      	str	r3, [r4, #0]
  SleepOnExitTest = 0;
     4a6:	6063      	str	r3, [r4, #4]
  SCB->SCR &= ~(1UL << 1);
     4a8:	692b      	ldr	r3, [r5, #16]
  puts("\n- Detecting PMU control");
     4aa:	482f      	ldr	r0, [pc, #188]	; (568 <main+0x2e0>)
  SCB->SCR &= ~(1UL << 1);
     4ac:	f023 0302 	bic.w	r3, r3, #2
     4b0:	612b      	str	r3, [r5, #16]
  puts("\n- Detecting PMU control");
     4b2:	f000 fea5 	bl	1200 <puts>
  CM3DS_MPS2_SYSCON->PMUCTRL = CM3DS_MPS2_SYSCON_PMUCTRL_EN_Msk; // set bit
     4b6:	4b2d      	ldr	r3, [pc, #180]	; (56c <main+0x2e4>)
     4b8:	605e      	str	r6, [r3, #4]
  if ((CM3DS_MPS2_SYSCON->PMUCTRL & CM3DS_MPS2_SYSCON_PMUCTRL_EN_Msk)==0) {
     4ba:	685b      	ldr	r3, [r3, #4]
     4bc:	07da      	lsls	r2, r3, #31
     4be:	d45d      	bmi.n	57c <main+0x2f4>
    puts ("PMU not available\n");
     4c0:	482b      	ldr	r0, [pc, #172]	; (570 <main+0x2e8>)
     4c2:	f000 fe9d 	bl	1200 <puts>
    CM3DS_MPS2_SYSCON->PMUCTRL = 0; // Clear bit
     4c6:	2200      	movs	r2, #0
     4c8:	4b28      	ldr	r3, [pc, #160]	; (56c <main+0x2e4>)
     4ca:	605a      	str	r2, [r3, #4]
    if ((CM3DS_MPS2_SYSCON->PMUCTRL & CM3DS_MPS2_SYSCON_PMUCTRL_EN_Msk)!=0) {
     4cc:	685b      	ldr	r3, [r3, #4]
     4ce:	07db      	lsls	r3, r3, #31
     4d0:	f100 80d6 	bmi.w	680 <main+0x3f8>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     4d4:	f44f 7680 	mov.w	r6, #256	; 0x100
    puts("\n- WFI DEEP SLEEP with WIC switched off");
     4d8:	4826      	ldr	r0, [pc, #152]	; (574 <main+0x2ec>)
     4da:	f000 fe91 	bl	1200 <puts>
    SCB->SCR |= (1UL << 2);
     4de:	4919      	ldr	r1, [pc, #100]	; (544 <main+0x2bc>)
     4e0:	4d19      	ldr	r5, [pc, #100]	; (548 <main+0x2c0>)
     4e2:	690b      	ldr	r3, [r1, #16]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     4e4:	2201      	movs	r2, #1
    SCB->SCR |= (1UL << 2);
     4e6:	f043 0304 	orr.w	r3, r3, #4
     4ea:	610b      	str	r3, [r1, #16]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     4ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     4f0:	21f0      	movs	r1, #240	; 0xf0
     4f2:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
     4f6:	f000 f931 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     4fa:	602e      	str	r6, [r5, #0]
  __ASM volatile ("wfi");
     4fc:	bf30      	wfi
    CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     4fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     502:	f000 f917 	bl	734 <CM3DS_MPS2_timer_StopTimer>
    CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     506:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     50a:	f000 f907 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
    if (IntTaken) puts("  TIMER IRQ.\n");
     50e:	6823      	ldr	r3, [r4, #0]
     510:	2b00      	cmp	r3, #0
     512:	f040 80b1 	bne.w	678 <main+0x3f0>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     516:	f44f 7180 	mov.w	r1, #256	; 0x100
  IntTaken = 0;
     51a:	2300      	movs	r3, #0
     51c:	4a0a      	ldr	r2, [pc, #40]	; (548 <main+0x2c0>)
  printf("** TEST PASSED ** \n");
     51e:	4816      	ldr	r0, [pc, #88]	; (578 <main+0x2f0>)
     520:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  IntTaken = 0;
     524:	6023      	str	r3, [r4, #0]
  printf("** TEST PASSED ** \n");
     526:	f000 fe6b 	bl	1200 <puts>
  UartEndSimulation();
     52a:	f000 f8e9 	bl	700 <UartEndSimulation>
  return 0;
     52e:	e6bb      	b.n	2a8 <main+0x20>
     530:	00001a8c 	.word	0x00001a8c
     534:	40000fe0 	.word	0x40000fe0
     538:	00001ae0 	.word	0x00001ae0
     53c:	40000fe4 	.word	0x40000fe4
     540:	00001ad0 	.word	0x00001ad0
     544:	e000ed00 	.word	0xe000ed00
     548:	e000e100 	.word	0xe000e100
     54c:	20000068 	.word	0x20000068
     550:	00001b18 	.word	0x00001b18
     554:	00001b08 	.word	0x00001b08
     558:	00001b28 	.word	0x00001b28
     55c:	00001b3c 	.word	0x00001b3c
     560:	00001b50 	.word	0x00001b50
     564:	00001b64 	.word	0x00001b64
     568:	00001b84 	.word	0x00001b84
     56c:	4001f000 	.word	0x4001f000
     570:	00001ba0 	.word	0x00001ba0
     574:	00001c30 	.word	0x00001c30
     578:	00001c58 	.word	0x00001c58
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     57c:	f44f 7880 	mov.w	r8, #256	; 0x100
    puts("\n- WFI DEEP SLEEP with WIC");
     580:	4845      	ldr	r0, [pc, #276]	; (698 <main+0x410>)
     582:	f000 fe3d 	bl	1200 <puts>
    SCB->SCR |= (1UL << 2);
     586:	692b      	ldr	r3, [r5, #16]
     588:	4f44      	ldr	r7, [pc, #272]	; (69c <main+0x414>)
     58a:	f043 0304 	orr.w	r3, r3, #4
     58e:	612b      	str	r3, [r5, #16]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     590:	4632      	mov	r2, r6
     592:	21f0      	movs	r1, #240	; 0xf0
     594:	f8c7 8180 	str.w	r8, [r7, #384]	; 0x180
     598:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     59c:	f000 f8de 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     5a0:	f8c7 8000 	str.w	r8, [r7]
     5a4:	bf30      	wfi
    CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     5a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     5aa:	f000 f8c3 	bl	734 <CM3DS_MPS2_timer_StopTimer>
    CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     5ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     5b2:	f000 f8b3 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
    if (IntTaken) puts("  TIMER IRQ.\n");
     5b6:	6823      	ldr	r3, [r4, #0]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d159      	bne.n	670 <main+0x3e8>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     5bc:	f44f 7680 	mov.w	r6, #256	; 0x100
    IntTaken = 0; // Reset software variable
     5c0:	2700      	movs	r7, #0
     5c2:	4d36      	ldr	r5, [pc, #216]	; (69c <main+0x414>)
    puts("\n- WFE DEEP SLEEP with WIC");
     5c4:	4836      	ldr	r0, [pc, #216]	; (6a0 <main+0x418>)
     5c6:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
    IntTaken = 0; // Reset software variable
     5ca:	6027      	str	r7, [r4, #0]
    puts("\n- WFE DEEP SLEEP with WIC");
     5cc:	f000 fe18 	bl	1200 <puts>
    SCB->SCR |= (1UL << 2);
     5d0:	4934      	ldr	r1, [pc, #208]	; (6a4 <main+0x41c>)
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     5d2:	2201      	movs	r2, #1
    SCB->SCR |= (1UL << 2);
     5d4:	690b      	ldr	r3, [r1, #16]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     5d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    SCB->SCR |= (1UL << 2);
     5da:	f043 0304 	orr.w	r3, r3, #4
     5de:	610b      	str	r3, [r1, #16]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     5e0:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     5e4:	21f0      	movs	r1, #240	; 0xf0
    IntTaken = 0; // Reset software variable
     5e6:	6027      	str	r7, [r4, #0]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF0, 1);
     5e8:	f000 f8b8 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     5ec:	602e      	str	r6, [r5, #0]
     5ee:	e000      	b.n	5f2 <main+0x36a>
  __ASM volatile ("wfe");
     5f0:	bf20      	wfe
    while  (IntTaken==0) { /* Loop for sleep :
     5f2:	6823      	ldr	r3, [r4, #0]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d0fb      	beq.n	5f0 <main+0x368>
    IntTaken = 0; // Reset software variable
     5f8:	f04f 0800 	mov.w	r8, #0
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     5fc:	f44f 7680 	mov.w	r6, #256	; 0x100
    SleepOnExitTest = 1;
     600:	2701      	movs	r7, #1
    CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     606:	f000 f895 	bl	734 <CM3DS_MPS2_timer_StopTimer>
    CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     60a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     60e:	f000 f885 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
    puts("  TIMER IRQ.\n");
     612:	4825      	ldr	r0, [pc, #148]	; (6a8 <main+0x420>)
     614:	f000 fdf4 	bl	1200 <puts>
    puts("\n- SLEEP-ON-EXIT with WIC:");
     618:	4824      	ldr	r0, [pc, #144]	; (6ac <main+0x424>)
    IntTaken = 0; // Reset software variable
     61a:	f8c4 8000 	str.w	r8, [r4]
    puts("\n- SLEEP-ON-EXIT with WIC:");
     61e:	f000 fdef 	bl	1200 <puts>
    SCB->SCR |= (1UL << 1);
     622:	4a20      	ldr	r2, [pc, #128]	; (6a4 <main+0x41c>)
     624:	4d1d      	ldr	r5, [pc, #116]	; (69c <main+0x414>)
     626:	6913      	ldr	r3, [r2, #16]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    SCB->SCR |= (1UL << 1);
     62c:	f043 0302 	orr.w	r3, r3, #2
     630:	6113      	str	r3, [r2, #16]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     632:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     636:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
     63a:	463a      	mov	r2, r7
    IntTaken = 0; // Reset software variable
     63c:	f8c4 8000 	str.w	r8, [r4]
    SleepOnExitTest = 1;
     640:	6067      	str	r7, [r4, #4]
    CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x2000, 1);
     642:	f000 f88b 	bl	75c <CM3DS_MPS2_timer_Init_IntClock>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     646:	602e      	str	r6, [r5, #0]
    while  (IntTaken==0) {
     648:	6823      	ldr	r3, [r4, #0]
     64a:	2b00      	cmp	r3, #0
     64c:	d0fc      	beq.n	648 <main+0x3c0>
    CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     64e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     652:	f000 f86f 	bl	734 <CM3DS_MPS2_timer_StopTimer>
    CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     656:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     65a:	f000 f85f 	bl	71c <CM3DS_MPS2_timer_DisableIRQ>
    IntTaken = 0; // Reset software variable
     65e:	2300      	movs	r3, #0
    SCB->SCR &= ~(1UL << 1);
     660:	4a10      	ldr	r2, [pc, #64]	; (6a4 <main+0x41c>)
    IntTaken = 0; // Reset software variable
     662:	6023      	str	r3, [r4, #0]
    SleepOnExitTest = 0;
     664:	6063      	str	r3, [r4, #4]
    SCB->SCR &= ~(1UL << 1);
     666:	6913      	ldr	r3, [r2, #16]
     668:	f023 0302 	bic.w	r3, r3, #2
     66c:	6113      	str	r3, [r2, #16]
     66e:	e72a      	b.n	4c6 <main+0x23e>
    if (IntTaken) puts("  TIMER IRQ.\n");
     670:	480d      	ldr	r0, [pc, #52]	; (6a8 <main+0x420>)
     672:	f000 fdc5 	bl	1200 <puts>
     676:	e7a1      	b.n	5bc <main+0x334>
    if (IntTaken) puts("  TIMER IRQ.\n");
     678:	480b      	ldr	r0, [pc, #44]	; (6a8 <main+0x420>)
     67a:	f000 fdc1 	bl	1200 <puts>
     67e:	e74a      	b.n	516 <main+0x28e>
      puts ("ERROR:PMU control cannot be cleared\n");
     680:	480b      	ldr	r0, [pc, #44]	; (6b0 <main+0x428>)
     682:	f000 fdbd 	bl	1200 <puts>
     686:	e725      	b.n	4d4 <main+0x24c>
  if (IntTaken) puts("  TIMER IRQ.\n");
     688:	4807      	ldr	r0, [pc, #28]	; (6a8 <main+0x420>)
     68a:	f000 fdb9 	bl	1200 <puts>
     68e:	e6b1      	b.n	3f4 <main+0x16c>
  if (IntTaken) puts("  TIMER IRQ.\n");
     690:	4805      	ldr	r0, [pc, #20]	; (6a8 <main+0x420>)
     692:	f000 fdb5 	bl	1200 <puts>
     696:	e630      	b.n	2fa <main+0x72>
     698:	00001bb4 	.word	0x00001bb4
     69c:	e000e100 	.word	0xe000e100
     6a0:	00001bd0 	.word	0x00001bd0
     6a4:	e000ed00 	.word	0xe000ed00
     6a8:	00001b08 	.word	0x00001b08
     6ac:	00001bec 	.word	0x00001bec
     6b0:	00001c08 	.word	0x00001c08

000006b4 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     6b4:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     6b6:	4616      	mov	r6, r2
     6b8:	b13a      	cbz	r2, 6ca <_write+0x16>
     6ba:	1e4c      	subs	r4, r1, #1
     6bc:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     6be:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     6c2:	f000 f80d 	bl	6e0 <UartPutc>
  for (i=0; i<len;i++) {
     6c6:	42ac      	cmp	r4, r5
     6c8:	d1f9      	bne.n	6be <_write+0xa>
    }
  return len;
}
     6ca:	4630      	mov	r0, r6
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	bf00      	nop

000006d0 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     6d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     6d4:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     6d6:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     6d8:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     6da:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     6dc:	4770      	bx	lr
     6de:	bf00      	nop

000006e0 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     6e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     6e4:	6853      	ldr	r3, [r2, #4]
     6e6:	07db      	lsls	r3, r3, #31
     6e8:	d4fc      	bmi.n	6e4 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     6ea:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     6ec:	4770      	bx	lr
     6ee:	bf00      	nop

000006f0 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     6f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     6f4:	6853      	ldr	r3, [r2, #4]
     6f6:	079b      	lsls	r3, r3, #30
     6f8:	d5fc      	bpl.n	6f4 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     6fa:	6810      	ldr	r0, [r2, #0]
}
     6fc:	b2c0      	uxtb	r0, r0
     6fe:	4770      	bx	lr

00000700 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     704:	685a      	ldr	r2, [r3, #4]
     706:	07d2      	lsls	r2, r2, #31
     708:	d4fc      	bmi.n	704 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     70a:	2204      	movs	r2, #4
     70c:	601a      	str	r2, [r3, #0]
     70e:	e7fe      	b.n	70e <UartEndSimulation+0xe>

00000710 <CM3DS_MPS2_timer_EnableIRQ>:
 * @brief  Enable the microcontroller timer interrupts.
 */

 void CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     710:	6803      	ldr	r3, [r0, #0]
     712:	f043 0308 	orr.w	r3, r3, #8
     716:	6003      	str	r3, [r0, #0]
 }
     718:	4770      	bx	lr
     71a:	bf00      	nop

0000071c <CM3DS_MPS2_timer_DisableIRQ>:
 * @brief  Disable the microcontroller timer interrutps.
 */

 void CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     71c:	6803      	ldr	r3, [r0, #0]
     71e:	f023 0308 	bic.w	r3, r3, #8
     722:	6003      	str	r3, [r0, #0]
 }
     724:	4770      	bx	lr
     726:	bf00      	nop

00000728 <CM3DS_MPS2_timer_StartTimer>:
 * @brief  Start the Timer.
 */

 void CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     728:	6803      	ldr	r3, [r0, #0]
     72a:	f043 0301 	orr.w	r3, r3, #1
     72e:	6003      	str	r3, [r0, #0]
 }
     730:	4770      	bx	lr
     732:	bf00      	nop

00000734 <CM3DS_MPS2_timer_StopTimer>:
 * @brief  Stop the Timer.
 */

 void CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     734:	6803      	ldr	r3, [r0, #0]
     736:	f023 0301 	bic.w	r3, r3, #1
     73a:	6003      	str	r3, [r0, #0]
 }
     73c:	4770      	bx	lr
     73e:	bf00      	nop

00000740 <CM3DS_MPS2_timer_GetValue>:
 * @brief  Returns the current value of the timer.
 */

 uint32_t CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->VALUE;
     740:	6840      	ldr	r0, [r0, #4]
 }
     742:	4770      	bx	lr

00000744 <CM3DS_MPS2_timer_SetValue>:
 * @brief  Sets the timer to the specified value.
 */

 void CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->VALUE = value;
     744:	6041      	str	r1, [r0, #4]
 }
     746:	4770      	bx	lr

00000748 <CM3DS_MPS2_timer_GetReload>:
 * @brief  Returns the reload value of the timer. The reload value is the value which the timer is set to after an underflow occurs.
 */

 uint32_t CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->RELOAD;
     748:	6880      	ldr	r0, [r0, #8]
 }
     74a:	4770      	bx	lr

0000074c <CM3DS_MPS2_timer_SetReload>:
 * @brief  Sets the reload value of the timer to the specified value. The reload value is the value which the timer is set to after an underflow occurs.
 */

 void CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->RELOAD = value;
     74c:	6081      	str	r1, [r0, #8]
 }
     74e:	4770      	bx	lr

00000750 <CM3DS_MPS2_timer_ClearIRQ>:
 * @brief  Clears the timer IRQ if set.
 */

 void CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->INTCLEAR = CM3DS_MPS2_TIMER_INTCLEAR_Msk;
     750:	2301      	movs	r3, #1
     752:	60c3      	str	r3, [r0, #12]
 }
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <CM3DS_MPS2_timer_StatusIRQ>:
 * @brief  Returns the IRQ status of the timer in question.
 */

 uint32_t  CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->INTSTATUS;
     758:	68c0      	ldr	r0, [r0, #12]
 }
     75a:	4770      	bx	lr

0000075c <CM3DS_MPS2_timer_Init_IntClock>:
 */

  void CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     75c:	2300      	movs	r3, #0
     75e:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     760:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     762:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                          /* non zero - enable IRQ */
     764:	b912      	cbnz	r2, 76c <CM3DS_MPS2_timer_Init_IntClock+0x10>
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else{                                                                                   /* zero - do not enable IRQ */
         CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk);                                       /* enable timer */
     766:	2301      	movs	r3, #1
     768:	6003      	str	r3, [r0, #0]
        }
 }
     76a:	4770      	bx	lr
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
     76c:	2309      	movs	r3, #9
     76e:	6003      	str	r3, [r0, #0]
     770:	4770      	bx	lr
     772:	bf00      	nop

00000774 <CM3DS_MPS2_timer_Init_ExtClock>:
 */

 void CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     774:	2300      	movs	r3, #0
     776:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     778:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     77a:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     77c:	b912      	cbnz	r2, 784 <CM3DS_MPS2_timer_Init_ExtClock+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk |CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     77e:	2305      	movs	r3, #5
     780:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk);                                   /* enable timer */
         }
 }
     782:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     784:	230d      	movs	r3, #13
     786:	6003      	str	r3, [r0, #0]
     788:	4770      	bx	lr
     78a:	bf00      	nop

0000078c <CM3DS_MPS2_timer_Init_ExtEnable>:
 */

 void CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     78c:	2300      	movs	r3, #0
     78e:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     790:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     792:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     794:	b912      	cbnz	r2, 79c <CM3DS_MPS2_timer_Init_ExtEnable+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     796:	2303      	movs	r3, #3
     798:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk);                                    /* enable timer */
         }
 }
     79a:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     79c:	230b      	movs	r3, #11
     79e:	6003      	str	r3, [r0, #0]
     7a0:	4770      	bx	lr
     7a2:	bf00      	nop

000007a4 <CM3DS_MPS2_uart_init>:
 * @return 1 if initialisation failed, 0 if successful.
 */

 uint32_t CM3DS_MPS2_uart_init(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, uint32_t divider, uint32_t tx_en,
                           uint32_t rx_en, uint32_t tx_irq_en, uint32_t rx_irq_en, uint32_t tx_ovrirq_en, uint32_t rx_ovrirq_en)
 {
     7a4:	b4f0      	push	{r4, r5, r6, r7}
       uint32_t new_ctrl=0;

       if (tx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_TXEN_Msk;
     7a6:	3200      	adds	r2, #0
     7a8:	bf18      	it	ne
     7aa:	2201      	movne	r2, #1
 {
     7ac:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
     7b0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
       if (rx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_RXEN_Msk;
     7b4:	b10b      	cbz	r3, 7ba <CM3DS_MPS2_uart_init+0x16>
     7b6:	f042 0202 	orr.w	r2, r2, #2
       if (tx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_TXIRQEN_Msk;
     7ba:	b10f      	cbz	r7, 7c0 <CM3DS_MPS2_uart_init+0x1c>
     7bc:	f042 0204 	orr.w	r2, r2, #4
       if (rx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_RXIRQEN_Msk;
     7c0:	b10e      	cbz	r6, 7c6 <CM3DS_MPS2_uart_init+0x22>
     7c2:	f042 0208 	orr.w	r2, r2, #8
       if (tx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_TXORIRQEN_Msk;
     7c6:	b10d      	cbz	r5, 7cc <CM3DS_MPS2_uart_init+0x28>
     7c8:	f042 0210 	orr.w	r2, r2, #16
       if (rx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_RXORIRQEN_Msk;
     7cc:	b10c      	cbz	r4, 7d2 <CM3DS_MPS2_uart_init+0x2e>
     7ce:	f042 0220 	orr.w	r2, r2, #32

       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     7d2:	2300      	movs	r3, #0
       CM3DS_MPS2_UART->BAUDDIV = divider;
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */

       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
       else return 0;
 }
     7d4:	bcf0      	pop	{r4, r5, r6, r7}
       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     7d6:	6083      	str	r3, [r0, #8]
       CM3DS_MPS2_UART->BAUDDIV = divider;
     7d8:	6101      	str	r1, [r0, #16]
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */
     7da:	6082      	str	r2, [r0, #8]
       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
     7dc:	6843      	ldr	r3, [r0, #4]
     7de:	f013 0f0c 	tst.w	r3, #12
 }
     7e2:	bf14      	ite	ne
     7e4:	2001      	movne	r0, #1
     7e6:	2000      	moveq	r0, #0
     7e8:	4770      	bx	lr
     7ea:	bf00      	nop

000007ec <CM3DS_MPS2_uart_GetRxBufferFull>:
 * @brief  Returns whether the RX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk)>> CM3DS_MPS2_UART_STATE_RXBF_Pos);
     7ec:	6840      	ldr	r0, [r0, #4]
 }
     7ee:	f3c0 0040 	ubfx	r0, r0, #1, #1
     7f2:	4770      	bx	lr

000007f4 <CM3DS_MPS2_uart_GetTxBufferFull>:
 * @brief  Returns whether the TX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk)>> CM3DS_MPS2_UART_STATE_TXBF_Pos);
     7f4:	6840      	ldr	r0, [r0, #4]
 }
     7f6:	f000 0001 	and.w	r0, r0, #1
     7fa:	4770      	bx	lr

000007fc <CM3DS_MPS2_uart_SendChar>:
 * @brief  Sends a character to the TX buffer for transmission.
 */

 void CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, char txchar)
 {
       while(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk);
     7fc:	6843      	ldr	r3, [r0, #4]
     7fe:	07db      	lsls	r3, r3, #31
     800:	d4fc      	bmi.n	7fc <CM3DS_MPS2_uart_SendChar>
       CM3DS_MPS2_UART->DATA = (uint32_t)txchar;
     802:	6001      	str	r1, [r0, #0]
 }
     804:	4770      	bx	lr
     806:	bf00      	nop

00000808 <CM3DS_MPS2_uart_ReceiveChar>:
 * @brief  returns the character from the RX buffer which has been received.
 */

 char CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       while(!(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk));
     808:	6843      	ldr	r3, [r0, #4]
     80a:	079b      	lsls	r3, r3, #30
     80c:	d5fc      	bpl.n	808 <CM3DS_MPS2_uart_ReceiveChar>
       return (char)(CM3DS_MPS2_UART->DATA);
     80e:	6800      	ldr	r0, [r0, #0]
 }
     810:	b2c0      	uxtb	r0, r0
     812:	4770      	bx	lr

00000814 <CM3DS_MPS2_uart_GetOverrunStatus>:
 */


 uint32_t CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     814:	6840      	ldr	r0, [r0, #4]
 }
     816:	f3c0 0081 	ubfx	r0, r0, #2, #2
     81a:	4770      	bx	lr

0000081c <CM3DS_MPS2_uart_ClearOverrunStatus>:
 * @brief  Clears the overrun status of both the RX & TX buffers and then returns the current overrun status.
 */

 uint32_t CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->STATE = (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk);
     81c:	230c      	movs	r3, #12
     81e:	6043      	str	r3, [r0, #4]
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     820:	6840      	ldr	r0, [r0, #4]
 }
     822:	f3c0 0081 	ubfx	r0, r0, #2, #2
     826:	4770      	bx	lr

00000828 <CM3DS_MPS2_uart_GetBaudDivider>:
 * @brief  Returns the current UART Baud rate divider. Note that the Baud rate divider is the difference between the clock frequency and the Baud frequency.
 */

 uint32_t CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return CM3DS_MPS2_UART->BAUDDIV;
     828:	6900      	ldr	r0, [r0, #16]
 }
     82a:	4770      	bx	lr

0000082c <CM3DS_MPS2_uart_GetTxIRQStatus>:
 * @brief  Returns the TX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_TXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_TXIRQ_Pos);
     82c:	68c0      	ldr	r0, [r0, #12]
 }
     82e:	f000 0001 	and.w	r0, r0, #1
     832:	4770      	bx	lr

00000834 <CM3DS_MPS2_uart_GetRxIRQStatus>:
 * @brief  Returns the RX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_RXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_RXIRQ_Pos);
     834:	68c0      	ldr	r0, [r0, #12]
 }
     836:	f3c0 0040 	ubfx	r0, r0, #1, #1
     83a:	4770      	bx	lr

0000083c <CM3DS_MPS2_uart_ClearTxIRQ>:
 * @brief  Clears the TX buffer full interrupt status.
 */

 void CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_TXIRQ_Msk;
     83c:	2301      	movs	r3, #1
     83e:	60c3      	str	r3, [r0, #12]
 }
     840:	4770      	bx	lr
     842:	bf00      	nop

00000844 <CM3DS_MPS2_uart_ClearRxIRQ>:
 * @brief  Clears the RX interrupt status.
 */

 void CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_RXIRQ_Msk;
     844:	2302      	movs	r3, #2
     846:	60c3      	str	r3, [r0, #12]
 }
     848:	4770      	bx	lr
     84a:	bf00      	nop

0000084c <CM3DS_MPS2_gpio_SetOutEnable>:
 * @brief  Sets pins on a port as an output. Set the bit corresponding to the pin number to 1 for output i.e. Set bit 1 of outenable to 1 to set pin 1 as an output. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableset)
 {
       CM3DS_MPS2_GPIO->OUTENABLESET = outenableset;
     84c:	6101      	str	r1, [r0, #16]
 }
     84e:	4770      	bx	lr

00000850 <CM3DS_MPS2_gpio_ClrOutEnable>:
 * @brief  Sets pins on a port as an input. Set the bit corresponding to the pin number to 1 for input i.e. Set bit 1 of outenable to 1 to set pin 1 as an input. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableclr)
 {
       CM3DS_MPS2_GPIO->OUTENABLECLR = outenableclr;
     850:	6141      	str	r1, [r0, #20]
 }
     852:	4770      	bx	lr

00000854 <CM3DS_MPS2_gpio_GetOutEnable>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set as inputs or outputs i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is an output.
 */

 uint32_t CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->OUTENABLESET;
     854:	6900      	ldr	r0, [r0, #16]
 }
     856:	4770      	bx	lr

00000858 <CM3DS_MPS2_gpio_SetAltFunc>:
 * @brief  enables the alternative function for pins. Set the bit corresponding to the pin number to 1 for alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to its alternative function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncset)
 {
       CM3DS_MPS2_GPIO->ALTFUNCSET = AltFuncset;
     858:	6181      	str	r1, [r0, #24]
 }
     85a:	4770      	bx	lr

0000085c <CM3DS_MPS2_gpio_ClrAltFunc>:
 * @brief  disables the alternative function for pins. Set the bit corresponding to the pin number to 1 to disable alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to the orignal output function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncclr)
 {
       CM3DS_MPS2_GPIO->ALTFUNCCLR = AltFuncclr;
     85c:	61c1      	str	r1, [r0, #28]
 }
     85e:	4770      	bx	lr

00000860 <CM3DS_MPS2_gpio_GetAltFunc>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set to their alternative or their original output functionality i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is set to its alternative function.
 */

 uint32_t CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->ALTFUNCSET;
     860:	6980      	ldr	r0, [r0, #24]
 }
     862:	4770      	bx	lr

00000864 <CM3DS_MPS2_gpio_IntClear>:
 * @brief  Clears the interrupt flag for the specified pin and then returns the new interrupt status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTCLEAR = (1 << Num);
     864:	2301      	movs	r3, #1
     866:	fa03 f101 	lsl.w	r1, r3, r1
     86a:	6381      	str	r1, [r0, #56]	; 0x38

       return CM3DS_MPS2_GPIO->INTSTATUS;
     86c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 }
     86e:	4770      	bx	lr

00000870 <CM3DS_MPS2_gpio_SetIntEnable>:
 * @brief  Enables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENSET = (1 << Num);
     870:	2301      	movs	r3, #1
     872:	fa03 f101 	lsl.w	r1, r3, r1
     876:	6201      	str	r1, [r0, #32]

       return CM3DS_MPS2_GPIO->INTENSET;
     878:	6a00      	ldr	r0, [r0, #32]
 }
     87a:	4770      	bx	lr

0000087c <CM3DS_MPS2_gpio_ClrIntEnable>:
 * @brief  Disables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

  uint32_t CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENCLR = (1 << Num);
     87c:	2301      	movs	r3, #1
     87e:	fa03 f101 	lsl.w	r1, r3, r1
     882:	6241      	str	r1, [r0, #36]	; 0x24

       return CM3DS_MPS2_GPIO->INTENCLR;
     884:	6a40      	ldr	r0, [r0, #36]	; 0x24
 }
     886:	4770      	bx	lr

00000888 <CM3DS_MPS2_gpio_SetIntHighLevel>:
 * @brief  Changes the interrupt type for the specified pin to a high level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num); /* Clear INT TYPE bit */
     888:	2301      	movs	r3, #1
     88a:	fa03 f101 	lsl.w	r1, r3, r1
     88e:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     890:	6301      	str	r1, [r0, #48]	; 0x30
 }
     892:	4770      	bx	lr

00000894 <CM3DS_MPS2_gpio_SetIntRisingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a rising edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num); /* Set INT TYPE bit */
     894:	2301      	movs	r3, #1
     896:	fa03 f101 	lsl.w	r1, r3, r1
     89a:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     89c:	6301      	str	r1, [r0, #48]	; 0x30
 }
     89e:	4770      	bx	lr

000008a0 <CM3DS_MPS2_gpio_SetIntLowLevel>:
 * @brief  Changes the interrupt type for the specified pin to a low level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num);  /* Clear INT TYPE bit */
     8a0:	2301      	movs	r3, #1
     8a2:	fa03 f101 	lsl.w	r1, r3, r1
     8a6:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     8a8:	6341      	str	r1, [r0, #52]	; 0x34
 }
     8aa:	4770      	bx	lr

000008ac <CM3DS_MPS2_gpio_SetIntFallingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a falling edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num);  /* Set INT TYPE bit */
     8ac:	2301      	movs	r3, #1
     8ae:	fa03 f101 	lsl.w	r1, r3, r1
     8b2:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     8b4:	6341      	str	r1, [r0, #52]	; 0x34
 }
     8b6:	4770      	bx	lr

000008b8 <CM3DS_MPS2_gpio_MaskedWrite>:
 * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
 */

 void CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t value, uint32_t mask)
 {
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     8b8:	b2d3      	uxtb	r3, r2
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     8ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     8be:	f503 7380 	add.w	r3, r3, #256	; 0x100
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     8c2:	f502 7200 	add.w	r2, r2, #512	; 0x200
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     8c6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     8ca:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 }
     8ce:	4770      	bx	lr

000008d0 <CM3DS_MPS2_i2s_config>:
                uint32_t rx_enable, uint32_t rx_int_enable, uint32_t rx_waterlevel)
 {
   uint32_t i2s_control_val;
   // TX water level range from 3 to 0
   // Generate IRQ if TX Fifo space > TX water level
   if (tx_waterlevel > 3) return 1; // Error if out of range
     8d0:	2b03      	cmp	r3, #3
     8d2:	d820      	bhi.n	916 <CM3DS_MPS2_i2s_config+0x46>
 {
     8d4:	b410      	push	{r4}
   // RX water level range from 4 to 1
   // Generate IRQ if RX Fifo space < RX water level
   if ((rx_waterlevel > 4)||(rx_waterlevel == 0)) return 1; // Error if out of range
     8d6:	9c03      	ldr	r4, [sp, #12]
     8d8:	3c01      	subs	r4, #1
     8da:	2c03      	cmp	r4, #3
     8dc:	d818      	bhi.n	910 <CM3DS_MPS2_i2s_config+0x40>
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
                      (tx_waterlevel << CM3DS_MPS2_I2S_CONTROL_TXWLVL_Pos) |
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
                  (tx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXEN_Pos;
     8de:	f001 0401 	and.w	r4, r1, #1
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     8e2:	9901      	ldr	r1, [sp, #4]
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
     8e4:	0052      	lsls	r2, r2, #1
     8e6:	f002 0202 	and.w	r2, r2, #2
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     8ea:	0089      	lsls	r1, r1, #2
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     8ec:	4322      	orrs	r2, r4
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     8ee:	f001 0104 	and.w	r1, r1, #4
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     8f2:	430a      	orrs	r2, r1
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     8f4:	9902      	ldr	r1, [sp, #8]
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     8f6:	9c03      	ldr	r4, [sp, #12]
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     8f8:	00c9      	lsls	r1, r1, #3
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     8fa:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     8fe:	f001 0108 	and.w	r1, r1, #8
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     902:	430a      	orrs	r2, r1
     904:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

   pI2S->CONTROL  = i2s_control_val;
     908:	6003      	str	r3, [r0, #0]
   return 0;
 }
     90a:	bc10      	pop	{r4}
   return 0;
     90c:	2000      	movs	r0, #0
 }
     90e:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     910:	2001      	movs	r0, #1
 }
     912:	bc10      	pop	{r4}
     914:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     916:	2001      	movs	r0, #1
 }
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <CM3DS_MPS2_i2s_tx_fifo_empty>:

 int CM3DS_MPS2_i2s_tx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_TXEmpty_Pos;
     91c:	6840      	ldr	r0, [r0, #4]
   }
     91e:	f3c0 0080 	ubfx	r0, r0, #2, #1
     922:	4770      	bx	lr

00000924 <CM3DS_MPS2_i2s_tx_fifo_full>:

 int CM3DS_MPS2_i2s_tx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXFull_Pos;
     924:	6840      	ldr	r0, [r0, #4]
   }
     926:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     92a:	4770      	bx	lr

0000092c <CM3DS_MPS2_i2s_rx_fifo_empty>:

 int CM3DS_MPS2_i2s_rx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_RXEmpty_Pos;
     92c:	6840      	ldr	r0, [r0, #4]
   }
     92e:	f3c0 1000 	ubfx	r0, r0, #4, #1
     932:	4770      	bx	lr

00000934 <CM3DS_MPS2_i2s_rx_fifo_full>:

 int CM3DS_MPS2_i2s_rx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXFull_Pos;
     934:	6840      	ldr	r0, [r0, #4]
   }
     936:	f3c0 1040 	ubfx	r0, r0, #5, #1
     93a:	4770      	bx	lr

0000093c <CM3DS_MPS2_i2s_rx_irq_alert>:

 int CM3DS_MPS2_i2s_rx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXIRQ_Pos;
     93c:	6840      	ldr	r0, [r0, #4]
   }
     93e:	f3c0 0040 	ubfx	r0, r0, #1, #1
     942:	4770      	bx	lr

00000944 <CM3DS_MPS2_i2s_tx_irq_alert>:

 int CM3DS_MPS2_i2s_tx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXIRQ_Pos;
     944:	6840      	ldr	r0, [r0, #4]
   }
     946:	f000 0001 	and.w	r0, r0, #1
     94a:	4770      	bx	lr

0000094c <CM3DS_MPS2_i2s_tx_stop>:

 int CM3DS_MPS2_i2s_tx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     94c:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     94e:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     950:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     952:	f023 0301 	bic.w	r3, r3, #1
     956:	6013      	str	r3, [r2, #0]
   }
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <CM3DS_MPS2_i2s_rx_stop>:

 int CM3DS_MPS2_i2s_rx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     95c:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     95e:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     960:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     962:	f023 0304 	bic.w	r3, r3, #4
     966:	6013      	str	r3, [r2, #0]
   }
     968:	4770      	bx	lr
     96a:	bf00      	nop

0000096c <CM3DS_MPS2_i2s_get_tx_error>:

 int CM3DS_MPS2_i2s_get_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_TXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_TXERR_Pos);
     96c:	6880      	ldr	r0, [r0, #8]
   }
     96e:	f000 0001 	and.w	r0, r0, #1
     972:	4770      	bx	lr

00000974 <CM3DS_MPS2_i2s_get_rx_error>:

 int CM3DS_MPS2_i2s_get_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_RXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_RXERR_Pos);
     974:	6880      	ldr	r0, [r0, #8]
   }
     976:	f3c0 0040 	ubfx	r0, r0, #1, #1
     97a:	4770      	bx	lr

0000097c <CM3DS_MPS2_i2s_clear_tx_error>:

 void CM3DS_MPS2_i2s_clear_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_TXERR_Msk;
     97c:	2301      	movs	r3, #1
     97e:	6083      	str	r3, [r0, #8]
   return;
   }
     980:	4770      	bx	lr
     982:	bf00      	nop

00000984 <CM3DS_MPS2_i2s_clear_rx_error>:

 void CM3DS_MPS2_i2s_clear_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_RXERR_Msk;
     984:	2302      	movs	r3, #2
     986:	6083      	str	r3, [r0, #8]
   return;;
   }
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <CM3DS_MPS2_i2s_fifo_reset>:

 void CM3DS_MPS2_i2s_fifo_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     98c:	6803      	ldr	r3, [r0, #0]
     98e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     992:	6003      	str	r3, [r0, #0]
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     994:	6803      	ldr	r3, [r0, #0]
     996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     99a:	6003      	str	r3, [r0, #0]
   return;
   }
     99c:	4770      	bx	lr
     99e:	bf00      	nop

000009a0 <CM3DS_MPS2_i2s_codec_reset>:

 void CM3DS_MPS2_i2s_codec_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   int i;
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     9a0:	6803      	ldr	r3, [r0, #0]
     9a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     9a6:	6003      	str	r3, [r0, #0]
  __ASM volatile ("nop");
     9a8:	bf00      	nop
     9aa:	bf00      	nop
     9ac:	bf00      	nop
     9ae:	bf00      	nop
     9b0:	bf00      	nop
     9b2:	bf00      	nop
   for (i=0;i<6;i++) { // delay loop
     __NOP();
     }
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     9b4:	6803      	ldr	r3, [r0, #0]
     9b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
     9ba:	6003      	str	r3, [r0, #0]
   return;
   }
     9bc:	4770      	bx	lr
     9be:	bf00      	nop

000009c0 <CM3DS_MPS2_i2s_speed_config>:

 int CM3DS_MPS2_i2s_speed_config(CM3DS_MPS2_I2S_TypeDef *pI2S, uint32_t divide_ratio){
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     9c0:	f240 33ed 	movw	r3, #1005	; 0x3ed
     9c4:	f1a1 0212 	sub.w	r2, r1, #18
     9c8:	429a      	cmp	r2, r3
   if (divide_ratio > 0x3FF) return 1; // Error: Divide ratio too large (only 10 bits)

   pI2S->DIVIDE = divide_ratio;
     9ca:	bf9a      	itte	ls
     9cc:	60c1      	strls	r1, [r0, #12]
   return 0;
     9ce:	2000      	movls	r0, #0
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     9d0:	2001      	movhi	r0, #1
   }
     9d2:	4770      	bx	lr

000009d4 <CM3DS_MPS2_i2c_send_byte>:
 {
     int loop;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9d4:	2201      	movs	r2, #1
     9d6:	4b2e      	ldr	r3, [pc, #184]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     9d8:	605a      	str	r2, [r3, #4]
         // apSleepus(1);
         if (c & (1 << (7 - loop)))
     9da:	09c2      	lsrs	r2, r0, #7
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     9dc:	f04f 0202 	mov.w	r2, #2
         else
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     9e0:	bf0c      	ite	eq
     9e2:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     9e4:	601a      	strne	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     9e6:	2201      	movs	r2, #1
     9e8:	4b29      	ldr	r3, [pc, #164]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     9ea:	0641      	lsls	r1, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     9ec:	601a      	str	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9ee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     9f0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     9f2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     9f6:	bf54      	ite	pl
     9f8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     9fa:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     9fc:	2201      	movs	r2, #1
     9fe:	4b24      	ldr	r3, [pc, #144]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     a00:	0681      	lsls	r1, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a02:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a04:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a06:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a08:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a0c:	bf54      	ite	pl
     a0e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a10:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a12:	2201      	movs	r2, #1
     a14:	4b1e      	ldr	r3, [pc, #120]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     a16:	06c1      	lsls	r1, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a18:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a1a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a1c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a1e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a22:	bf54      	ite	pl
     a24:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a26:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a28:	2201      	movs	r2, #1
     a2a:	4b19      	ldr	r3, [pc, #100]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     a2c:	0701      	lsls	r1, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a2e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a30:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a32:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a34:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a38:	bf54      	ite	pl
     a3a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a3c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a3e:	2201      	movs	r2, #1
     a40:	4b13      	ldr	r3, [pc, #76]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     a42:	0741      	lsls	r1, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a44:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a46:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a48:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a4a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a4e:	bf54      	ite	pl
     a50:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a52:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a54:	2201      	movs	r2, #1
     a56:	4b0e      	ldr	r3, [pc, #56]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     a58:	0781      	lsls	r1, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a5a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a5c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a5e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a60:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a64:	bf54      	ite	pl
     a66:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a68:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a6a:	2201      	movs	r2, #1
     a6c:	4b08      	ldr	r3, [pc, #32]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     a6e:	07c1      	lsls	r1, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a70:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a72:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a74:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a76:	f04f 0202 	mov.w	r2, #2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a7a:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a7e:	bf4c      	ite	mi
     a80:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     a82:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     a84:	2201      	movs	r2, #1
     a86:	4b02      	ldr	r3, [pc, #8]	; (a90 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     a88:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a8a:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a8c:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
 }
     a8e:	4770      	bx	lr
     a90:	40023000 	.word	0x40023000

00000a94 <CM3DS_MPS2_i2c_receive_byte>:
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     data         = 0;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a94:	2201      	movs	r2, #1
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     a96:	2103      	movs	r1, #3
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     a98:	2002      	movs	r0, #2
     a9a:	4b2c      	ldr	r3, [pc, #176]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     a9c:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     a9e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     aa0:	6019      	str	r1, [r3, #0]
         // apSleepus(1);
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     aa2:	6818      	ldr	r0, [r3, #0]
             data += (1 << (7 - loop));
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     aa4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     aa6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     aa8:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     aaa:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     aac:	2103      	movs	r1, #3
     data         = 0;
     aae:	f010 0f02 	tst.w	r0, #2
     ab2:	bf14      	ite	ne
     ab4:	2080      	movne	r0, #128	; 0x80
     ab6:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     abc:	4b23      	ldr	r3, [pc, #140]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     abe:	bf48      	it	mi
     ac0:	3040      	addmi	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ac2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ac4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     ac6:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     ac8:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     aca:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     acc:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     ace:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ad2:	4b1e      	ldr	r3, [pc, #120]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     ad4:	bf48      	it	mi
     ad6:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ad8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ada:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     adc:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     ade:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     ae0:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     ae2:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ae4:	f04f 0201 	mov.w	r2, #1
     ae8:	4b18      	ldr	r3, [pc, #96]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     aea:	bf48      	it	mi
     aec:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     aee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     af0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     af2:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     af4:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     af6:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     afc:	4b13      	ldr	r3, [pc, #76]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     afe:	bf48      	it	mi
     b00:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b02:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b04:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     b06:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     b08:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b0a:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     b0c:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     b0e:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b12:	4b0e      	ldr	r3, [pc, #56]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     b14:	bf48      	it	mi
     b16:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b18:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b1a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     b1c:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     b1e:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     b20:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     b22:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b24:	f04f 0201 	mov.w	r2, #1
     b28:	4b08      	ldr	r3, [pc, #32]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     b2a:	bf48      	it	mi
     b2c:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b2e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b30:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     b32:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     b34:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b36:	2101      	movs	r1, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     b38:	079b      	lsls	r3, r3, #30
             data += (1 << (7 - loop));
     b3a:	bf48      	it	mi
     b3c:	1880      	addmi	r0, r0, r2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     b3e:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b40:	4b02      	ldr	r3, [pc, #8]	; (b4c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     // apSleepus(1);

     return data;
 }
     b42:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b44:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     b46:	605a      	str	r2, [r3, #4]
 }
     b48:	4770      	bx	lr
     b4a:	bf00      	nop
     b4c:	40023000 	.word	0x40023000

00000b50 <CM3DS_MPS2_i2c_receive_ack>:
     int nack;

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b50:	2201      	movs	r2, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     b52:	2102      	movs	r1, #2
     b54:	4b06      	ldr	r3, [pc, #24]	; (b70 <CM3DS_MPS2_i2c_receive_ack+0x20>)
     b56:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b58:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     b5a:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     b5c:	6818      	ldr	r0, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b5e:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     if(nack==0)
     b60:	f010 0f02 	tst.w	r0, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     b64:	6019      	str	r1, [r3, #0]
         return 1;

     return 0;
 }
     b66:	bf0c      	ite	eq
     b68:	4610      	moveq	r0, r2
     b6a:	2000      	movne	r0, #0
     b6c:	4770      	bx	lr
     b6e:	bf00      	nop
     b70:	40023000 	.word	0x40023000

00000b74 <CM3DS_MPS2_i2c_send_ack>:

 // Write the acknowledge bit
 void CM3DS_MPS2_i2c_send_ack(void)
 {
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b74:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     b76:	2102      	movs	r1, #2
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b78:	4b03      	ldr	r3, [pc, #12]	; (b88 <CM3DS_MPS2_i2c_send_ack+0x14>)
     b7a:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     b7c:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     b7e:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b80:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     b82:	6059      	str	r1, [r3, #4]
     // apSleepus(1);
 }
     b84:	4770      	bx	lr
     b86:	bf00      	nop
     b88:	40023000 	.word	0x40023000

00000b8c <CM3DS_MPS2_i2c_read>:

 // Write data stream and read one byte
 unsigned char CM3DS_MPS2_i2c_read(unsigned char reg_addr, unsigned char sadr)
 {
     b8c:	b430      	push	{r4, r5}

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     b8e:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b90:	2401      	movs	r4, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     b92:	2503      	movs	r5, #3
     b94:	4b91      	ldr	r3, [pc, #580]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
     b96:	601d      	str	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     b98:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     b9a:	605c      	str	r4, [r3, #4]
         if (c & (1 << (7 - loop)))
     b9c:	09cc      	lsrs	r4, r1, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     b9e:	bf0c      	ite	eq
     ba0:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ba2:	601a      	strne	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ba4:	2201      	movs	r2, #1
     ba6:	4b8d      	ldr	r3, [pc, #564]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     ba8:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     baa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bac:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bae:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bb0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     bb4:	bf54      	ite	pl
     bb6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bb8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     bba:	2201      	movs	r2, #1
     bbc:	4b87      	ldr	r3, [pc, #540]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     bbe:	068d      	lsls	r5, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     bc0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bc2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bc4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bc6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     bca:	bf54      	ite	pl
     bcc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bce:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     bd0:	2201      	movs	r2, #1
     bd2:	4b82      	ldr	r3, [pc, #520]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     bd4:	06cc      	lsls	r4, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     bd6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bd8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bda:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bdc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     be0:	bf54      	ite	pl
     be2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     be4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     be6:	2201      	movs	r2, #1
     be8:	4b7c      	ldr	r3, [pc, #496]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     bea:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     bec:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     bf0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bf2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     bf6:	bf54      	ite	pl
     bf8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     bfa:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     bfc:	2201      	movs	r2, #1
     bfe:	4b77      	ldr	r3, [pc, #476]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     c00:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c02:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c04:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c06:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c08:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c0c:	bf54      	ite	pl
     c0e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c10:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c12:	2201      	movs	r2, #1
     c14:	4b71      	ldr	r3, [pc, #452]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     c16:	078d      	lsls	r5, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c18:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c1a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c1c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c1e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c22:	bf54      	ite	pl
     c24:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c26:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c28:	2201      	movs	r2, #1
     c2a:	4b6c      	ldr	r3, [pc, #432]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     c2c:	07cc      	lsls	r4, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c2e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c30:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c32:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c34:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c38:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c3c:	bf4c      	ite	mi
     c3e:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c40:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c42:	2201      	movs	r2, #1
     c44:	4b65      	ldr	r3, [pc, #404]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
     c46:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c48:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c4a:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c4c:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c4e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c50:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     c52:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c54:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c56:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c58:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     c5a:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c5c:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c60:	bf0c      	ite	eq
     c62:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c64:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c66:	4b5d      	ldr	r3, [pc, #372]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     c68:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c6a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c6c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c6e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c70:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c74:	bf54      	ite	pl
     c76:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c78:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c7a:	2201      	movs	r2, #1
     c7c:	4b57      	ldr	r3, [pc, #348]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     c7e:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c80:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c82:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c84:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c86:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c8a:	bf54      	ite	pl
     c8c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c8e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c90:	2201      	movs	r2, #1
     c92:	4b52      	ldr	r3, [pc, #328]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     c94:	06c5      	lsls	r5, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c96:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c98:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c9a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c9c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ca0:	bf54      	ite	pl
     ca2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ca4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ca6:	2201      	movs	r2, #1
     ca8:	4b4c      	ldr	r3, [pc, #304]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     caa:	0704      	lsls	r4, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cac:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cae:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cb0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cb2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cb6:	bf54      	ite	pl
     cb8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cba:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cbc:	2201      	movs	r2, #1
     cbe:	4b47      	ldr	r3, [pc, #284]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     cc0:	0745      	lsls	r5, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cc2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cc4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cc6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cc8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ccc:	bf54      	ite	pl
     cce:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cd0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cd2:	2201      	movs	r2, #1
     cd4:	4b41      	ldr	r3, [pc, #260]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     cd6:	0784      	lsls	r4, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cd8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cda:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cdc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cde:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ce2:	bf54      	ite	pl
     ce4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ce6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ce8:	2201      	movs	r2, #1
     cea:	4b3c      	ldr	r3, [pc, #240]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     cec:	07c0      	lsls	r0, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cee:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cf4:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cf8:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cfc:	bf4c      	ite	mi
     cfe:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d00:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d02:	2201      	movs	r2, #1
     CM3DS_MPS2_i2c_send_byte(reg_addr);
     CM3DS_MPS2_i2c_receive_ack();

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     d04:	2403      	movs	r4, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d06:	4b35      	ldr	r3, [pc, #212]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
     d08:	4311      	orrs	r1, r2
     d0a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d0c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d0e:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d10:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d12:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d14:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     d16:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d18:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d1a:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     d1c:	601c      	str	r4, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d1e:	6058      	str	r0, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d20:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     d22:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d24:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d28:	bf0c      	ite	eq
     d2a:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d2c:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d2e:	4b2b      	ldr	r3, [pc, #172]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     d30:	064d      	lsls	r5, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d32:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d34:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d36:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d38:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d3c:	bf54      	ite	pl
     d3e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d40:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d42:	2201      	movs	r2, #1
     d44:	4b25      	ldr	r3, [pc, #148]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     d46:	068c      	lsls	r4, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d48:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d4a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d4c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d4e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d52:	bf54      	ite	pl
     d54:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d56:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d58:	2201      	movs	r2, #1
     d5a:	4b20      	ldr	r3, [pc, #128]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     d5c:	06c8      	lsls	r0, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d5e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d60:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d62:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d64:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d68:	bf54      	ite	pl
     d6a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d6c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d6e:	2201      	movs	r2, #1
     d70:	4b1a      	ldr	r3, [pc, #104]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     d72:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d74:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d76:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d78:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d7a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d7e:	bf54      	ite	pl
     d80:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d82:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d84:	2201      	movs	r2, #1
     d86:	4b15      	ldr	r3, [pc, #84]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     d88:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d8a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d8c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d8e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d90:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d94:	bf54      	ite	pl
     d96:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d98:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d9a:	2201      	movs	r2, #1
     d9c:	4b0f      	ldr	r3, [pc, #60]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     d9e:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     da0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     da2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     da4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     da6:	f04f 0202 	mov.w	r2, #2
     daa:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     dae:	bf54      	ite	pl
     db0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     db2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     db4:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     db6:	2003      	movs	r0, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     db8:	4b08      	ldr	r3, [pc, #32]	; (ddc <CM3DS_MPS2_i2c_read+0x250>)
     dba:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dbc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dbe:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dc0:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     dc2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc4:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dc6:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dc8:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dca:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     dcc:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     dce:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dd0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dd2:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dd4:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dd6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     dd8:	6018      	str	r0, [r3, #0]
     dda:	e001      	b.n	de0 <CM3DS_MPS2_i2c_read+0x254>
     ddc:	40023000 	.word	0x40023000
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     de0:	6819      	ldr	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     de2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     de4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     de6:	6018      	str	r0, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     de8:	681b      	ldr	r3, [r3, #0]
     data         = 0;
     dea:	f011 0f02 	tst.w	r1, #2
     dee:	bf14      	ite	ne
     df0:	2080      	movne	r0, #128	; 0x80
     df2:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     df4:	079b      	lsls	r3, r3, #30
     df6:	d500      	bpl.n	dfa <CM3DS_MPS2_i2c_read+0x26e>
             data += (1 << (7 - loop));
     df8:	3040      	adds	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dfa:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     dfc:	2103      	movs	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dfe:	4b27      	ldr	r3, [pc, #156]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
     e00:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e02:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e04:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e06:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e08:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e0a:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e0c:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e10:	4b22      	ldr	r3, [pc, #136]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
     e12:	bf48      	it	mi
     e14:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e16:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e18:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e1a:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e1c:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e1e:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e20:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e22:	f04f 0201 	mov.w	r2, #1
     e26:	4b1d      	ldr	r3, [pc, #116]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
     e28:	bf48      	it	mi
     e2a:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e2c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e2e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e30:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e32:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e34:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e3a:	4b18      	ldr	r3, [pc, #96]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
     e3c:	bf48      	it	mi
     e3e:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e40:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e42:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e44:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e46:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e48:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	079d      	lsls	r5, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e4e:	4b13      	ldr	r3, [pc, #76]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
     e50:	bf48      	it	mi
     e52:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e54:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e56:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e58:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e5a:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e5c:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	079c      	lsls	r4, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e62:	4b0e      	ldr	r3, [pc, #56]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
     e64:	bf48      	it	mi
     e66:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e68:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e6a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     e6c:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	0799      	lsls	r1, r3, #30
     e72:	d500      	bpl.n	e76 <CM3DS_MPS2_i2c_read+0x2ea>
             data += (1 << (7 - loop));
     e74:	4410      	add	r0, r2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e76:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);

     return rxdata;
 }
     e78:	bc30      	pop	{r4, r5}
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e7a:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e7c:	4b07      	ldr	r3, [pc, #28]	; (e9c <CM3DS_MPS2_i2c_read+0x310>)
     return rxdata;
     e7e:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e80:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e82:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e84:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e86:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e88:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e8a:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e8c:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e8e:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e90:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e92:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e94:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e96:	6019      	str	r1, [r3, #0]
 }
     e98:	4770      	bx	lr
     e9a:	bf00      	nop
     e9c:	40023000 	.word	0x40023000

00000ea0 <CM3DS_MPS2_i2c_write>:

 // Write data stream and write one byte
 void CM3DS_MPS2_i2c_write(unsigned char reg_addr, unsigned char data_byte, unsigned char sadr)
 {
     ea0:	b470      	push	{r4, r5, r6}
     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     ea2:	2603      	movs	r6, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ea4:	2501      	movs	r5, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ea6:	2402      	movs	r4, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     ea8:	4b90      	ldr	r3, [pc, #576]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
     eaa:	601e      	str	r6, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eac:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eae:	605d      	str	r5, [r3, #4]
         if (c & (1 << (7 - loop)))
     eb0:	09d5      	lsrs	r5, r2, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eb2:	bf0c      	ite	eq
     eb4:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eb6:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eb8:	2401      	movs	r4, #1
     eba:	4b8c      	ldr	r3, [pc, #560]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     ebc:	0655      	lsls	r5, r2, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ebe:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ec0:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ec2:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ec4:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ec8:	bf54      	ite	pl
     eca:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ecc:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ece:	2401      	movs	r4, #1
     ed0:	4b86      	ldr	r3, [pc, #536]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     ed2:	0696      	lsls	r6, r2, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ed4:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed6:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed8:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eda:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ede:	bf54      	ite	pl
     ee0:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ee2:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ee4:	2401      	movs	r4, #1
     ee6:	4b81      	ldr	r3, [pc, #516]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     ee8:	06d5      	lsls	r5, r2, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eea:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eec:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eee:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef0:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ef4:	bf54      	ite	pl
     ef6:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef8:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     efa:	2401      	movs	r4, #1
     efc:	4b7b      	ldr	r3, [pc, #492]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     efe:	0716      	lsls	r6, r2, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f00:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f02:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f04:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f06:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f0a:	bf54      	ite	pl
     f0c:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f0e:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f10:	2401      	movs	r4, #1
     f12:	4b76      	ldr	r3, [pc, #472]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     f14:	0755      	lsls	r5, r2, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f16:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f18:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f1a:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f1c:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f20:	bf54      	ite	pl
     f22:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f24:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f26:	2401      	movs	r4, #1
     f28:	4b70      	ldr	r3, [pc, #448]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     f2a:	0796      	lsls	r6, r2, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f2c:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f2e:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f30:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f32:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f36:	bf54      	ite	pl
     f38:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f3a:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f3c:	2401      	movs	r4, #1
         if (c & (1 << (7 - loop)))
     f3e:	f012 0f01 	tst.w	r2, #1
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f42:	f04f 0202 	mov.w	r2, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f46:	4b69      	ldr	r3, [pc, #420]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
     f48:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f4a:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f4c:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f4e:	bf14      	ite	ne
     f50:	601a      	strne	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f52:	605a      	streq	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f54:	2402      	movs	r4, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f56:	2201      	movs	r2, #1
     f58:	4b64      	ldr	r3, [pc, #400]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
     f5a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f5e:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f60:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f62:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f64:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     f66:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f68:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f6a:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f6c:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     f6e:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f70:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f74:	bf0c      	ite	eq
     f76:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f78:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f7a:	4b5c      	ldr	r3, [pc, #368]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     f7c:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f7e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f80:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f82:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f84:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f88:	bf54      	ite	pl
     f8a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f8c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f8e:	2201      	movs	r2, #1
     f90:	4b56      	ldr	r3, [pc, #344]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     f92:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f94:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f96:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f98:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f9a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f9e:	bf54      	ite	pl
     fa0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fa2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fa4:	2201      	movs	r2, #1
     fa6:	4b51      	ldr	r3, [pc, #324]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     fa8:	06c6      	lsls	r6, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     faa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fac:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fae:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fb0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fb4:	bf54      	ite	pl
     fb6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fb8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fba:	2201      	movs	r2, #1
     fbc:	4b4b      	ldr	r3, [pc, #300]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     fbe:	0705      	lsls	r5, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fc0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fc6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fca:	bf54      	ite	pl
     fcc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fce:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fd0:	2201      	movs	r2, #1
     fd2:	4b46      	ldr	r3, [pc, #280]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     fd4:	0744      	lsls	r4, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fd6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fd8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fda:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fdc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fe0:	bf54      	ite	pl
     fe2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fe4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fe6:	2201      	movs	r2, #1
     fe8:	4b40      	ldr	r3, [pc, #256]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
     fea:	0786      	lsls	r6, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fec:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ff2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ff6:	bf54      	ite	pl
     ff8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ffa:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ffc:	2201      	movs	r2, #1
     ffe:	4b3b      	ldr	r3, [pc, #236]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1000:	07c5      	lsls	r5, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1002:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1004:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1006:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1008:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    100c:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1010:	bf4c      	ite	mi
    1012:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1014:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1016:	2201      	movs	r2, #1
    1018:	4b34      	ldr	r3, [pc, #208]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
    101a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    101c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    101e:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1020:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1022:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1024:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1026:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1028:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    102a:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    102c:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    102e:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1030:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1034:	bf0c      	ite	eq
    1036:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1038:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    103a:	4b2c      	ldr	r3, [pc, #176]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    103c:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    103e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1040:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1042:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1044:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1048:	bf54      	ite	pl
    104a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    104c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    104e:	2201      	movs	r2, #1
    1050:	4b26      	ldr	r3, [pc, #152]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1052:	0688      	lsls	r0, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1054:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1056:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1058:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    105a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    105e:	bf54      	ite	pl
    1060:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1062:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1064:	2201      	movs	r2, #1
    1066:	4b21      	ldr	r3, [pc, #132]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1068:	06ce      	lsls	r6, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    106a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    106c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    106e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1070:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1074:	bf54      	ite	pl
    1076:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1078:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    107a:	2201      	movs	r2, #1
    107c:	4b1b      	ldr	r3, [pc, #108]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    107e:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1080:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1082:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1084:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1086:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    108a:	bf54      	ite	pl
    108c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    108e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1090:	2201      	movs	r2, #1
    1092:	4b16      	ldr	r3, [pc, #88]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1094:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1096:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1098:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    109a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    109c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10a0:	bf54      	ite	pl
    10a2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10a4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10a6:	2201      	movs	r2, #1
    10a8:	4b10      	ldr	r3, [pc, #64]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    10aa:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10ac:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ae:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10b2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10b6:	bf54      	ite	pl
    10b8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10ba:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10bc:	2201      	movs	r2, #1
    10be:	4b0b      	ldr	r3, [pc, #44]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    10c0:	07c9      	lsls	r1, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10c2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10c4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10c6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10c8:	f04f 0202 	mov.w	r2, #2
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
 }
    10cc:	bc70      	pop	{r4, r5, r6}
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10ce:	bf4c      	ite	mi
    10d0:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10d2:	605a      	strpl	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10d4:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10d6:	2201      	movs	r2, #1
    10d8:	4b04      	ldr	r3, [pc, #16]	; (10ec <CM3DS_MPS2_i2c_write+0x24c>)
    10da:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10dc:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10de:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10e0:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e2:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10e4:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10e6:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10e8:	6019      	str	r1, [r3, #0]
 }
    10ea:	4770      	bx	lr
    10ec:	40023000 	.word	0x40023000

000010f0 <SystemCoreClockUpdate>:
    10f0:	4b01      	ldr	r3, [pc, #4]	; (10f8 <SystemCoreClockUpdate+0x8>)
    10f2:	4a02      	ldr	r2, [pc, #8]	; (10fc <SystemCoreClockUpdate+0xc>)
    10f4:	601a      	str	r2, [r3, #0]
    10f6:	4770      	bx	lr
    10f8:	20000000 	.word	0x20000000
    10fc:	017d7840 	.word	0x017d7840

00001100 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    1100:	4b01      	ldr	r3, [pc, #4]	; (1108 <SystemInit+0x8>)
    1102:	4a02      	ldr	r2, [pc, #8]	; (110c <SystemInit+0xc>)
    1104:	601a      	str	r2, [r3, #0]

}
    1106:	4770      	bx	lr
    1108:	20000000 	.word	0x20000000
    110c:	017d7840 	.word	0x017d7840

00001110 <exit>:
    1110:	b508      	push	{r3, lr}
    1112:	4b07      	ldr	r3, [pc, #28]	; (1130 <exit+0x20>)
    1114:	4604      	mov	r4, r0
    1116:	b113      	cbz	r3, 111e <exit+0xe>
    1118:	2100      	movs	r1, #0
    111a:	f3af 8000 	nop.w
    111e:	4b05      	ldr	r3, [pc, #20]	; (1134 <exit+0x24>)
    1120:	6818      	ldr	r0, [r3, #0]
    1122:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1124:	b103      	cbz	r3, 1128 <exit+0x18>
    1126:	4798      	blx	r3
    1128:	4620      	mov	r0, r4
    112a:	f000 fca9 	bl	1a80 <_exit>
    112e:	bf00      	nop
    1130:	00000000 	.word	0x00000000
    1134:	00001c90 	.word	0x00001c90

00001138 <memset>:
    1138:	4603      	mov	r3, r0
    113a:	4402      	add	r2, r0
    113c:	4293      	cmp	r3, r2
    113e:	d100      	bne.n	1142 <memset+0xa>
    1140:	4770      	bx	lr
    1142:	f803 1b01 	strb.w	r1, [r3], #1
    1146:	e7f9      	b.n	113c <memset+0x4>

00001148 <_puts_r>:
    1148:	b570      	push	{r4, r5, r6, lr}
    114a:	460e      	mov	r6, r1
    114c:	4605      	mov	r5, r0
    114e:	b118      	cbz	r0, 1158 <_puts_r+0x10>
    1150:	6983      	ldr	r3, [r0, #24]
    1152:	b90b      	cbnz	r3, 1158 <_puts_r+0x10>
    1154:	f000 fa0c 	bl	1570 <__sinit>
    1158:	69ab      	ldr	r3, [r5, #24]
    115a:	68ac      	ldr	r4, [r5, #8]
    115c:	b913      	cbnz	r3, 1164 <_puts_r+0x1c>
    115e:	4628      	mov	r0, r5
    1160:	f000 fa06 	bl	1570 <__sinit>
    1164:	4b23      	ldr	r3, [pc, #140]	; (11f4 <_puts_r+0xac>)
    1166:	429c      	cmp	r4, r3
    1168:	d117      	bne.n	119a <_puts_r+0x52>
    116a:	686c      	ldr	r4, [r5, #4]
    116c:	89a3      	ldrh	r3, [r4, #12]
    116e:	071b      	lsls	r3, r3, #28
    1170:	d51d      	bpl.n	11ae <_puts_r+0x66>
    1172:	6923      	ldr	r3, [r4, #16]
    1174:	b1db      	cbz	r3, 11ae <_puts_r+0x66>
    1176:	3e01      	subs	r6, #1
    1178:	68a3      	ldr	r3, [r4, #8]
    117a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    117e:	3b01      	subs	r3, #1
    1180:	60a3      	str	r3, [r4, #8]
    1182:	b9e9      	cbnz	r1, 11c0 <_puts_r+0x78>
    1184:	2b00      	cmp	r3, #0
    1186:	da2e      	bge.n	11e6 <_puts_r+0x9e>
    1188:	4622      	mov	r2, r4
    118a:	210a      	movs	r1, #10
    118c:	4628      	mov	r0, r5
    118e:	f000 f83f 	bl	1210 <__swbuf_r>
    1192:	3001      	adds	r0, #1
    1194:	d011      	beq.n	11ba <_puts_r+0x72>
    1196:	200a      	movs	r0, #10
    1198:	e011      	b.n	11be <_puts_r+0x76>
    119a:	4b17      	ldr	r3, [pc, #92]	; (11f8 <_puts_r+0xb0>)
    119c:	429c      	cmp	r4, r3
    119e:	d101      	bne.n	11a4 <_puts_r+0x5c>
    11a0:	68ac      	ldr	r4, [r5, #8]
    11a2:	e7e3      	b.n	116c <_puts_r+0x24>
    11a4:	4b15      	ldr	r3, [pc, #84]	; (11fc <_puts_r+0xb4>)
    11a6:	429c      	cmp	r4, r3
    11a8:	bf08      	it	eq
    11aa:	68ec      	ldreq	r4, [r5, #12]
    11ac:	e7de      	b.n	116c <_puts_r+0x24>
    11ae:	4621      	mov	r1, r4
    11b0:	4628      	mov	r0, r5
    11b2:	f000 f87f 	bl	12b4 <__swsetup_r>
    11b6:	2800      	cmp	r0, #0
    11b8:	d0dd      	beq.n	1176 <_puts_r+0x2e>
    11ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    11be:	bd70      	pop	{r4, r5, r6, pc}
    11c0:	2b00      	cmp	r3, #0
    11c2:	da04      	bge.n	11ce <_puts_r+0x86>
    11c4:	69a2      	ldr	r2, [r4, #24]
    11c6:	429a      	cmp	r2, r3
    11c8:	dc06      	bgt.n	11d8 <_puts_r+0x90>
    11ca:	290a      	cmp	r1, #10
    11cc:	d004      	beq.n	11d8 <_puts_r+0x90>
    11ce:	6823      	ldr	r3, [r4, #0]
    11d0:	1c5a      	adds	r2, r3, #1
    11d2:	6022      	str	r2, [r4, #0]
    11d4:	7019      	strb	r1, [r3, #0]
    11d6:	e7cf      	b.n	1178 <_puts_r+0x30>
    11d8:	4622      	mov	r2, r4
    11da:	4628      	mov	r0, r5
    11dc:	f000 f818 	bl	1210 <__swbuf_r>
    11e0:	3001      	adds	r0, #1
    11e2:	d1c9      	bne.n	1178 <_puts_r+0x30>
    11e4:	e7e9      	b.n	11ba <_puts_r+0x72>
    11e6:	200a      	movs	r0, #10
    11e8:	6823      	ldr	r3, [r4, #0]
    11ea:	1c5a      	adds	r2, r3, #1
    11ec:	6022      	str	r2, [r4, #0]
    11ee:	7018      	strb	r0, [r3, #0]
    11f0:	e7e5      	b.n	11be <_puts_r+0x76>
    11f2:	bf00      	nop
    11f4:	00001cb4 	.word	0x00001cb4
    11f8:	00001cd4 	.word	0x00001cd4
    11fc:	00001c94 	.word	0x00001c94

00001200 <puts>:
    1200:	4b02      	ldr	r3, [pc, #8]	; (120c <puts+0xc>)
    1202:	4601      	mov	r1, r0
    1204:	6818      	ldr	r0, [r3, #0]
    1206:	f7ff bf9f 	b.w	1148 <_puts_r>
    120a:	bf00      	nop
    120c:	20000004 	.word	0x20000004

00001210 <__swbuf_r>:
    1210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1212:	460e      	mov	r6, r1
    1214:	4614      	mov	r4, r2
    1216:	4605      	mov	r5, r0
    1218:	b118      	cbz	r0, 1222 <__swbuf_r+0x12>
    121a:	6983      	ldr	r3, [r0, #24]
    121c:	b90b      	cbnz	r3, 1222 <__swbuf_r+0x12>
    121e:	f000 f9a7 	bl	1570 <__sinit>
    1222:	4b21      	ldr	r3, [pc, #132]	; (12a8 <__swbuf_r+0x98>)
    1224:	429c      	cmp	r4, r3
    1226:	d12a      	bne.n	127e <__swbuf_r+0x6e>
    1228:	686c      	ldr	r4, [r5, #4]
    122a:	69a3      	ldr	r3, [r4, #24]
    122c:	60a3      	str	r3, [r4, #8]
    122e:	89a3      	ldrh	r3, [r4, #12]
    1230:	071a      	lsls	r2, r3, #28
    1232:	d52e      	bpl.n	1292 <__swbuf_r+0x82>
    1234:	6923      	ldr	r3, [r4, #16]
    1236:	b363      	cbz	r3, 1292 <__swbuf_r+0x82>
    1238:	6923      	ldr	r3, [r4, #16]
    123a:	6820      	ldr	r0, [r4, #0]
    123c:	b2f6      	uxtb	r6, r6
    123e:	1ac0      	subs	r0, r0, r3
    1240:	6963      	ldr	r3, [r4, #20]
    1242:	4637      	mov	r7, r6
    1244:	4283      	cmp	r3, r0
    1246:	dc04      	bgt.n	1252 <__swbuf_r+0x42>
    1248:	4621      	mov	r1, r4
    124a:	4628      	mov	r0, r5
    124c:	f000 f926 	bl	149c <_fflush_r>
    1250:	bb28      	cbnz	r0, 129e <__swbuf_r+0x8e>
    1252:	68a3      	ldr	r3, [r4, #8]
    1254:	3001      	adds	r0, #1
    1256:	3b01      	subs	r3, #1
    1258:	60a3      	str	r3, [r4, #8]
    125a:	6823      	ldr	r3, [r4, #0]
    125c:	1c5a      	adds	r2, r3, #1
    125e:	6022      	str	r2, [r4, #0]
    1260:	701e      	strb	r6, [r3, #0]
    1262:	6963      	ldr	r3, [r4, #20]
    1264:	4283      	cmp	r3, r0
    1266:	d004      	beq.n	1272 <__swbuf_r+0x62>
    1268:	89a3      	ldrh	r3, [r4, #12]
    126a:	07db      	lsls	r3, r3, #31
    126c:	d519      	bpl.n	12a2 <__swbuf_r+0x92>
    126e:	2e0a      	cmp	r6, #10
    1270:	d117      	bne.n	12a2 <__swbuf_r+0x92>
    1272:	4621      	mov	r1, r4
    1274:	4628      	mov	r0, r5
    1276:	f000 f911 	bl	149c <_fflush_r>
    127a:	b190      	cbz	r0, 12a2 <__swbuf_r+0x92>
    127c:	e00f      	b.n	129e <__swbuf_r+0x8e>
    127e:	4b0b      	ldr	r3, [pc, #44]	; (12ac <__swbuf_r+0x9c>)
    1280:	429c      	cmp	r4, r3
    1282:	d101      	bne.n	1288 <__swbuf_r+0x78>
    1284:	68ac      	ldr	r4, [r5, #8]
    1286:	e7d0      	b.n	122a <__swbuf_r+0x1a>
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <__swbuf_r+0xa0>)
    128a:	429c      	cmp	r4, r3
    128c:	bf08      	it	eq
    128e:	68ec      	ldreq	r4, [r5, #12]
    1290:	e7cb      	b.n	122a <__swbuf_r+0x1a>
    1292:	4621      	mov	r1, r4
    1294:	4628      	mov	r0, r5
    1296:	f000 f80d 	bl	12b4 <__swsetup_r>
    129a:	2800      	cmp	r0, #0
    129c:	d0cc      	beq.n	1238 <__swbuf_r+0x28>
    129e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    12a2:	4638      	mov	r0, r7
    12a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12a6:	bf00      	nop
    12a8:	00001cb4 	.word	0x00001cb4
    12ac:	00001cd4 	.word	0x00001cd4
    12b0:	00001c94 	.word	0x00001c94

000012b4 <__swsetup_r>:
    12b4:	4b32      	ldr	r3, [pc, #200]	; (1380 <__swsetup_r+0xcc>)
    12b6:	b570      	push	{r4, r5, r6, lr}
    12b8:	681d      	ldr	r5, [r3, #0]
    12ba:	4606      	mov	r6, r0
    12bc:	460c      	mov	r4, r1
    12be:	b125      	cbz	r5, 12ca <__swsetup_r+0x16>
    12c0:	69ab      	ldr	r3, [r5, #24]
    12c2:	b913      	cbnz	r3, 12ca <__swsetup_r+0x16>
    12c4:	4628      	mov	r0, r5
    12c6:	f000 f953 	bl	1570 <__sinit>
    12ca:	4b2e      	ldr	r3, [pc, #184]	; (1384 <__swsetup_r+0xd0>)
    12cc:	429c      	cmp	r4, r3
    12ce:	d10f      	bne.n	12f0 <__swsetup_r+0x3c>
    12d0:	686c      	ldr	r4, [r5, #4]
    12d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    12d6:	b29a      	uxth	r2, r3
    12d8:	0715      	lsls	r5, r2, #28
    12da:	d42c      	bmi.n	1336 <__swsetup_r+0x82>
    12dc:	06d0      	lsls	r0, r2, #27
    12de:	d411      	bmi.n	1304 <__swsetup_r+0x50>
    12e0:	2209      	movs	r2, #9
    12e2:	6032      	str	r2, [r6, #0]
    12e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    12e8:	81a3      	strh	r3, [r4, #12]
    12ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12ee:	e03e      	b.n	136e <__swsetup_r+0xba>
    12f0:	4b25      	ldr	r3, [pc, #148]	; (1388 <__swsetup_r+0xd4>)
    12f2:	429c      	cmp	r4, r3
    12f4:	d101      	bne.n	12fa <__swsetup_r+0x46>
    12f6:	68ac      	ldr	r4, [r5, #8]
    12f8:	e7eb      	b.n	12d2 <__swsetup_r+0x1e>
    12fa:	4b24      	ldr	r3, [pc, #144]	; (138c <__swsetup_r+0xd8>)
    12fc:	429c      	cmp	r4, r3
    12fe:	bf08      	it	eq
    1300:	68ec      	ldreq	r4, [r5, #12]
    1302:	e7e6      	b.n	12d2 <__swsetup_r+0x1e>
    1304:	0751      	lsls	r1, r2, #29
    1306:	d512      	bpl.n	132e <__swsetup_r+0x7a>
    1308:	6b61      	ldr	r1, [r4, #52]	; 0x34
    130a:	b141      	cbz	r1, 131e <__swsetup_r+0x6a>
    130c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1310:	4299      	cmp	r1, r3
    1312:	d002      	beq.n	131a <__swsetup_r+0x66>
    1314:	4630      	mov	r0, r6
    1316:	f000 fa19 	bl	174c <_free_r>
    131a:	2300      	movs	r3, #0
    131c:	6363      	str	r3, [r4, #52]	; 0x34
    131e:	89a3      	ldrh	r3, [r4, #12]
    1320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1324:	81a3      	strh	r3, [r4, #12]
    1326:	2300      	movs	r3, #0
    1328:	6063      	str	r3, [r4, #4]
    132a:	6923      	ldr	r3, [r4, #16]
    132c:	6023      	str	r3, [r4, #0]
    132e:	89a3      	ldrh	r3, [r4, #12]
    1330:	f043 0308 	orr.w	r3, r3, #8
    1334:	81a3      	strh	r3, [r4, #12]
    1336:	6923      	ldr	r3, [r4, #16]
    1338:	b94b      	cbnz	r3, 134e <__swsetup_r+0x9a>
    133a:	89a3      	ldrh	r3, [r4, #12]
    133c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1344:	d003      	beq.n	134e <__swsetup_r+0x9a>
    1346:	4621      	mov	r1, r4
    1348:	4630      	mov	r0, r6
    134a:	f000 f9bf 	bl	16cc <__smakebuf_r>
    134e:	89a2      	ldrh	r2, [r4, #12]
    1350:	f012 0301 	ands.w	r3, r2, #1
    1354:	d00c      	beq.n	1370 <__swsetup_r+0xbc>
    1356:	2300      	movs	r3, #0
    1358:	60a3      	str	r3, [r4, #8]
    135a:	6963      	ldr	r3, [r4, #20]
    135c:	425b      	negs	r3, r3
    135e:	61a3      	str	r3, [r4, #24]
    1360:	6923      	ldr	r3, [r4, #16]
    1362:	b953      	cbnz	r3, 137a <__swsetup_r+0xc6>
    1364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1368:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    136c:	d1ba      	bne.n	12e4 <__swsetup_r+0x30>
    136e:	bd70      	pop	{r4, r5, r6, pc}
    1370:	0792      	lsls	r2, r2, #30
    1372:	bf58      	it	pl
    1374:	6963      	ldrpl	r3, [r4, #20]
    1376:	60a3      	str	r3, [r4, #8]
    1378:	e7f2      	b.n	1360 <__swsetup_r+0xac>
    137a:	2000      	movs	r0, #0
    137c:	e7f7      	b.n	136e <__swsetup_r+0xba>
    137e:	bf00      	nop
    1380:	20000004 	.word	0x20000004
    1384:	00001cb4 	.word	0x00001cb4
    1388:	00001cd4 	.word	0x00001cd4
    138c:	00001c94 	.word	0x00001c94

00001390 <__sflush_r>:
    1390:	898a      	ldrh	r2, [r1, #12]
    1392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1396:	4605      	mov	r5, r0
    1398:	0710      	lsls	r0, r2, #28
    139a:	460c      	mov	r4, r1
    139c:	d458      	bmi.n	1450 <__sflush_r+0xc0>
    139e:	684b      	ldr	r3, [r1, #4]
    13a0:	2b00      	cmp	r3, #0
    13a2:	dc05      	bgt.n	13b0 <__sflush_r+0x20>
    13a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    13a6:	2b00      	cmp	r3, #0
    13a8:	dc02      	bgt.n	13b0 <__sflush_r+0x20>
    13aa:	2000      	movs	r0, #0
    13ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    13b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    13b2:	2e00      	cmp	r6, #0
    13b4:	d0f9      	beq.n	13aa <__sflush_r+0x1a>
    13b6:	2300      	movs	r3, #0
    13b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    13bc:	682f      	ldr	r7, [r5, #0]
    13be:	6a21      	ldr	r1, [r4, #32]
    13c0:	602b      	str	r3, [r5, #0]
    13c2:	d032      	beq.n	142a <__sflush_r+0x9a>
    13c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    13c6:	89a3      	ldrh	r3, [r4, #12]
    13c8:	075a      	lsls	r2, r3, #29
    13ca:	d505      	bpl.n	13d8 <__sflush_r+0x48>
    13cc:	6863      	ldr	r3, [r4, #4]
    13ce:	1ac0      	subs	r0, r0, r3
    13d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    13d2:	b10b      	cbz	r3, 13d8 <__sflush_r+0x48>
    13d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    13d6:	1ac0      	subs	r0, r0, r3
    13d8:	2300      	movs	r3, #0
    13da:	4602      	mov	r2, r0
    13dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    13de:	6a21      	ldr	r1, [r4, #32]
    13e0:	4628      	mov	r0, r5
    13e2:	47b0      	blx	r6
    13e4:	1c43      	adds	r3, r0, #1
    13e6:	89a3      	ldrh	r3, [r4, #12]
    13e8:	d106      	bne.n	13f8 <__sflush_r+0x68>
    13ea:	6829      	ldr	r1, [r5, #0]
    13ec:	291d      	cmp	r1, #29
    13ee:	d848      	bhi.n	1482 <__sflush_r+0xf2>
    13f0:	4a29      	ldr	r2, [pc, #164]	; (1498 <__sflush_r+0x108>)
    13f2:	40ca      	lsrs	r2, r1
    13f4:	07d6      	lsls	r6, r2, #31
    13f6:	d544      	bpl.n	1482 <__sflush_r+0xf2>
    13f8:	2200      	movs	r2, #0
    13fa:	6062      	str	r2, [r4, #4]
    13fc:	6922      	ldr	r2, [r4, #16]
    13fe:	04d9      	lsls	r1, r3, #19
    1400:	6022      	str	r2, [r4, #0]
    1402:	d504      	bpl.n	140e <__sflush_r+0x7e>
    1404:	1c42      	adds	r2, r0, #1
    1406:	d101      	bne.n	140c <__sflush_r+0x7c>
    1408:	682b      	ldr	r3, [r5, #0]
    140a:	b903      	cbnz	r3, 140e <__sflush_r+0x7e>
    140c:	6560      	str	r0, [r4, #84]	; 0x54
    140e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1410:	602f      	str	r7, [r5, #0]
    1412:	2900      	cmp	r1, #0
    1414:	d0c9      	beq.n	13aa <__sflush_r+0x1a>
    1416:	f104 0344 	add.w	r3, r4, #68	; 0x44
    141a:	4299      	cmp	r1, r3
    141c:	d002      	beq.n	1424 <__sflush_r+0x94>
    141e:	4628      	mov	r0, r5
    1420:	f000 f994 	bl	174c <_free_r>
    1424:	2000      	movs	r0, #0
    1426:	6360      	str	r0, [r4, #52]	; 0x34
    1428:	e7c0      	b.n	13ac <__sflush_r+0x1c>
    142a:	2301      	movs	r3, #1
    142c:	4628      	mov	r0, r5
    142e:	47b0      	blx	r6
    1430:	1c41      	adds	r1, r0, #1
    1432:	d1c8      	bne.n	13c6 <__sflush_r+0x36>
    1434:	682b      	ldr	r3, [r5, #0]
    1436:	2b00      	cmp	r3, #0
    1438:	d0c5      	beq.n	13c6 <__sflush_r+0x36>
    143a:	2b1d      	cmp	r3, #29
    143c:	d001      	beq.n	1442 <__sflush_r+0xb2>
    143e:	2b16      	cmp	r3, #22
    1440:	d101      	bne.n	1446 <__sflush_r+0xb6>
    1442:	602f      	str	r7, [r5, #0]
    1444:	e7b1      	b.n	13aa <__sflush_r+0x1a>
    1446:	89a3      	ldrh	r3, [r4, #12]
    1448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    144c:	81a3      	strh	r3, [r4, #12]
    144e:	e7ad      	b.n	13ac <__sflush_r+0x1c>
    1450:	690f      	ldr	r7, [r1, #16]
    1452:	2f00      	cmp	r7, #0
    1454:	d0a9      	beq.n	13aa <__sflush_r+0x1a>
    1456:	0793      	lsls	r3, r2, #30
    1458:	bf18      	it	ne
    145a:	2300      	movne	r3, #0
    145c:	680e      	ldr	r6, [r1, #0]
    145e:	bf08      	it	eq
    1460:	694b      	ldreq	r3, [r1, #20]
    1462:	eba6 0807 	sub.w	r8, r6, r7
    1466:	600f      	str	r7, [r1, #0]
    1468:	608b      	str	r3, [r1, #8]
    146a:	f1b8 0f00 	cmp.w	r8, #0
    146e:	dd9c      	ble.n	13aa <__sflush_r+0x1a>
    1470:	4643      	mov	r3, r8
    1472:	463a      	mov	r2, r7
    1474:	6a21      	ldr	r1, [r4, #32]
    1476:	4628      	mov	r0, r5
    1478:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    147a:	47b0      	blx	r6
    147c:	2800      	cmp	r0, #0
    147e:	dc06      	bgt.n	148e <__sflush_r+0xfe>
    1480:	89a3      	ldrh	r3, [r4, #12]
    1482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1486:	81a3      	strh	r3, [r4, #12]
    1488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    148c:	e78e      	b.n	13ac <__sflush_r+0x1c>
    148e:	4407      	add	r7, r0
    1490:	eba8 0800 	sub.w	r8, r8, r0
    1494:	e7e9      	b.n	146a <__sflush_r+0xda>
    1496:	bf00      	nop
    1498:	20400001 	.word	0x20400001

0000149c <_fflush_r>:
    149c:	b538      	push	{r3, r4, r5, lr}
    149e:	690b      	ldr	r3, [r1, #16]
    14a0:	4605      	mov	r5, r0
    14a2:	460c      	mov	r4, r1
    14a4:	b1db      	cbz	r3, 14de <_fflush_r+0x42>
    14a6:	b118      	cbz	r0, 14b0 <_fflush_r+0x14>
    14a8:	6983      	ldr	r3, [r0, #24]
    14aa:	b90b      	cbnz	r3, 14b0 <_fflush_r+0x14>
    14ac:	f000 f860 	bl	1570 <__sinit>
    14b0:	4b0c      	ldr	r3, [pc, #48]	; (14e4 <_fflush_r+0x48>)
    14b2:	429c      	cmp	r4, r3
    14b4:	d109      	bne.n	14ca <_fflush_r+0x2e>
    14b6:	686c      	ldr	r4, [r5, #4]
    14b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    14bc:	b17b      	cbz	r3, 14de <_fflush_r+0x42>
    14be:	4621      	mov	r1, r4
    14c0:	4628      	mov	r0, r5
    14c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    14c6:	f7ff bf63 	b.w	1390 <__sflush_r>
    14ca:	4b07      	ldr	r3, [pc, #28]	; (14e8 <_fflush_r+0x4c>)
    14cc:	429c      	cmp	r4, r3
    14ce:	d101      	bne.n	14d4 <_fflush_r+0x38>
    14d0:	68ac      	ldr	r4, [r5, #8]
    14d2:	e7f1      	b.n	14b8 <_fflush_r+0x1c>
    14d4:	4b05      	ldr	r3, [pc, #20]	; (14ec <_fflush_r+0x50>)
    14d6:	429c      	cmp	r4, r3
    14d8:	bf08      	it	eq
    14da:	68ec      	ldreq	r4, [r5, #12]
    14dc:	e7ec      	b.n	14b8 <_fflush_r+0x1c>
    14de:	2000      	movs	r0, #0
    14e0:	bd38      	pop	{r3, r4, r5, pc}
    14e2:	bf00      	nop
    14e4:	00001cb4 	.word	0x00001cb4
    14e8:	00001cd4 	.word	0x00001cd4
    14ec:	00001c94 	.word	0x00001c94

000014f0 <std>:
    14f0:	2300      	movs	r3, #0
    14f2:	b510      	push	{r4, lr}
    14f4:	4604      	mov	r4, r0
    14f6:	e9c0 3300 	strd	r3, r3, [r0]
    14fa:	6083      	str	r3, [r0, #8]
    14fc:	8181      	strh	r1, [r0, #12]
    14fe:	6643      	str	r3, [r0, #100]	; 0x64
    1500:	81c2      	strh	r2, [r0, #14]
    1502:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1506:	6183      	str	r3, [r0, #24]
    1508:	4619      	mov	r1, r3
    150a:	2208      	movs	r2, #8
    150c:	305c      	adds	r0, #92	; 0x5c
    150e:	f7ff fe13 	bl	1138 <memset>
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <std+0x38>)
    1514:	6224      	str	r4, [r4, #32]
    1516:	6263      	str	r3, [r4, #36]	; 0x24
    1518:	4b04      	ldr	r3, [pc, #16]	; (152c <std+0x3c>)
    151a:	62a3      	str	r3, [r4, #40]	; 0x28
    151c:	4b04      	ldr	r3, [pc, #16]	; (1530 <std+0x40>)
    151e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1520:	4b04      	ldr	r3, [pc, #16]	; (1534 <std+0x44>)
    1522:	6323      	str	r3, [r4, #48]	; 0x30
    1524:	bd10      	pop	{r4, pc}
    1526:	bf00      	nop
    1528:	000018b9 	.word	0x000018b9
    152c:	000018db 	.word	0x000018db
    1530:	00001913 	.word	0x00001913
    1534:	00001937 	.word	0x00001937

00001538 <_cleanup_r>:
    1538:	4901      	ldr	r1, [pc, #4]	; (1540 <_cleanup_r+0x8>)
    153a:	f000 b885 	b.w	1648 <_fwalk_reent>
    153e:	bf00      	nop
    1540:	0000149d 	.word	0x0000149d

00001544 <__sfmoreglue>:
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	2568      	movs	r5, #104	; 0x68
    1548:	1e4a      	subs	r2, r1, #1
    154a:	4355      	muls	r5, r2
    154c:	460e      	mov	r6, r1
    154e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1552:	f000 f947 	bl	17e4 <_malloc_r>
    1556:	4604      	mov	r4, r0
    1558:	b140      	cbz	r0, 156c <__sfmoreglue+0x28>
    155a:	2100      	movs	r1, #0
    155c:	e9c0 1600 	strd	r1, r6, [r0]
    1560:	300c      	adds	r0, #12
    1562:	60a0      	str	r0, [r4, #8]
    1564:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1568:	f7ff fde6 	bl	1138 <memset>
    156c:	4620      	mov	r0, r4
    156e:	bd70      	pop	{r4, r5, r6, pc}

00001570 <__sinit>:
    1570:	6983      	ldr	r3, [r0, #24]
    1572:	b510      	push	{r4, lr}
    1574:	4604      	mov	r4, r0
    1576:	bb33      	cbnz	r3, 15c6 <__sinit+0x56>
    1578:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    157c:	6503      	str	r3, [r0, #80]	; 0x50
    157e:	4b12      	ldr	r3, [pc, #72]	; (15c8 <__sinit+0x58>)
    1580:	4a12      	ldr	r2, [pc, #72]	; (15cc <__sinit+0x5c>)
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	6282      	str	r2, [r0, #40]	; 0x28
    1586:	4298      	cmp	r0, r3
    1588:	bf04      	itt	eq
    158a:	2301      	moveq	r3, #1
    158c:	6183      	streq	r3, [r0, #24]
    158e:	f000 f81f 	bl	15d0 <__sfp>
    1592:	6060      	str	r0, [r4, #4]
    1594:	4620      	mov	r0, r4
    1596:	f000 f81b 	bl	15d0 <__sfp>
    159a:	60a0      	str	r0, [r4, #8]
    159c:	4620      	mov	r0, r4
    159e:	f000 f817 	bl	15d0 <__sfp>
    15a2:	2200      	movs	r2, #0
    15a4:	60e0      	str	r0, [r4, #12]
    15a6:	2104      	movs	r1, #4
    15a8:	6860      	ldr	r0, [r4, #4]
    15aa:	f7ff ffa1 	bl	14f0 <std>
    15ae:	2201      	movs	r2, #1
    15b0:	2109      	movs	r1, #9
    15b2:	68a0      	ldr	r0, [r4, #8]
    15b4:	f7ff ff9c 	bl	14f0 <std>
    15b8:	2202      	movs	r2, #2
    15ba:	2112      	movs	r1, #18
    15bc:	68e0      	ldr	r0, [r4, #12]
    15be:	f7ff ff97 	bl	14f0 <std>
    15c2:	2301      	movs	r3, #1
    15c4:	61a3      	str	r3, [r4, #24]
    15c6:	bd10      	pop	{r4, pc}
    15c8:	00001c90 	.word	0x00001c90
    15cc:	00001539 	.word	0x00001539

000015d0 <__sfp>:
    15d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15d2:	4b1b      	ldr	r3, [pc, #108]	; (1640 <__sfp+0x70>)
    15d4:	4607      	mov	r7, r0
    15d6:	681e      	ldr	r6, [r3, #0]
    15d8:	69b3      	ldr	r3, [r6, #24]
    15da:	b913      	cbnz	r3, 15e2 <__sfp+0x12>
    15dc:	4630      	mov	r0, r6
    15de:	f7ff ffc7 	bl	1570 <__sinit>
    15e2:	3648      	adds	r6, #72	; 0x48
    15e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    15e8:	3b01      	subs	r3, #1
    15ea:	d503      	bpl.n	15f4 <__sfp+0x24>
    15ec:	6833      	ldr	r3, [r6, #0]
    15ee:	b133      	cbz	r3, 15fe <__sfp+0x2e>
    15f0:	6836      	ldr	r6, [r6, #0]
    15f2:	e7f7      	b.n	15e4 <__sfp+0x14>
    15f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    15f8:	b16d      	cbz	r5, 1616 <__sfp+0x46>
    15fa:	3468      	adds	r4, #104	; 0x68
    15fc:	e7f4      	b.n	15e8 <__sfp+0x18>
    15fe:	2104      	movs	r1, #4
    1600:	4638      	mov	r0, r7
    1602:	f7ff ff9f 	bl	1544 <__sfmoreglue>
    1606:	6030      	str	r0, [r6, #0]
    1608:	2800      	cmp	r0, #0
    160a:	d1f1      	bne.n	15f0 <__sfp+0x20>
    160c:	230c      	movs	r3, #12
    160e:	4604      	mov	r4, r0
    1610:	603b      	str	r3, [r7, #0]
    1612:	4620      	mov	r0, r4
    1614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1616:	4b0b      	ldr	r3, [pc, #44]	; (1644 <__sfp+0x74>)
    1618:	6665      	str	r5, [r4, #100]	; 0x64
    161a:	e9c4 5500 	strd	r5, r5, [r4]
    161e:	60a5      	str	r5, [r4, #8]
    1620:	e9c4 3503 	strd	r3, r5, [r4, #12]
    1624:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1628:	2208      	movs	r2, #8
    162a:	4629      	mov	r1, r5
    162c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1630:	f7ff fd82 	bl	1138 <memset>
    1634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    1638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    163c:	e7e9      	b.n	1612 <__sfp+0x42>
    163e:	bf00      	nop
    1640:	00001c90 	.word	0x00001c90
    1644:	ffff0001 	.word	0xffff0001

00001648 <_fwalk_reent>:
    1648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    164c:	4680      	mov	r8, r0
    164e:	4689      	mov	r9, r1
    1650:	2600      	movs	r6, #0
    1652:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1656:	b914      	cbnz	r4, 165e <_fwalk_reent+0x16>
    1658:	4630      	mov	r0, r6
    165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    165e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    1662:	3f01      	subs	r7, #1
    1664:	d501      	bpl.n	166a <_fwalk_reent+0x22>
    1666:	6824      	ldr	r4, [r4, #0]
    1668:	e7f5      	b.n	1656 <_fwalk_reent+0xe>
    166a:	89ab      	ldrh	r3, [r5, #12]
    166c:	2b01      	cmp	r3, #1
    166e:	d907      	bls.n	1680 <_fwalk_reent+0x38>
    1670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1674:	3301      	adds	r3, #1
    1676:	d003      	beq.n	1680 <_fwalk_reent+0x38>
    1678:	4629      	mov	r1, r5
    167a:	4640      	mov	r0, r8
    167c:	47c8      	blx	r9
    167e:	4306      	orrs	r6, r0
    1680:	3568      	adds	r5, #104	; 0x68
    1682:	e7ee      	b.n	1662 <_fwalk_reent+0x1a>

00001684 <__swhatbuf_r>:
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	460e      	mov	r6, r1
    1688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    168c:	b096      	sub	sp, #88	; 0x58
    168e:	2900      	cmp	r1, #0
    1690:	4614      	mov	r4, r2
    1692:	461d      	mov	r5, r3
    1694:	da07      	bge.n	16a6 <__swhatbuf_r+0x22>
    1696:	2300      	movs	r3, #0
    1698:	602b      	str	r3, [r5, #0]
    169a:	89b3      	ldrh	r3, [r6, #12]
    169c:	061a      	lsls	r2, r3, #24
    169e:	d410      	bmi.n	16c2 <__swhatbuf_r+0x3e>
    16a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    16a4:	e00e      	b.n	16c4 <__swhatbuf_r+0x40>
    16a6:	466a      	mov	r2, sp
    16a8:	f000 f96c 	bl	1984 <_fstat_r>
    16ac:	2800      	cmp	r0, #0
    16ae:	dbf2      	blt.n	1696 <__swhatbuf_r+0x12>
    16b0:	9a01      	ldr	r2, [sp, #4]
    16b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    16b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    16ba:	425a      	negs	r2, r3
    16bc:	415a      	adcs	r2, r3
    16be:	602a      	str	r2, [r5, #0]
    16c0:	e7ee      	b.n	16a0 <__swhatbuf_r+0x1c>
    16c2:	2340      	movs	r3, #64	; 0x40
    16c4:	2000      	movs	r0, #0
    16c6:	6023      	str	r3, [r4, #0]
    16c8:	b016      	add	sp, #88	; 0x58
    16ca:	bd70      	pop	{r4, r5, r6, pc}

000016cc <__smakebuf_r>:
    16cc:	898b      	ldrh	r3, [r1, #12]
    16ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
    16d0:	079d      	lsls	r5, r3, #30
    16d2:	4606      	mov	r6, r0
    16d4:	460c      	mov	r4, r1
    16d6:	d507      	bpl.n	16e8 <__smakebuf_r+0x1c>
    16d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    16dc:	6023      	str	r3, [r4, #0]
    16de:	6123      	str	r3, [r4, #16]
    16e0:	2301      	movs	r3, #1
    16e2:	6163      	str	r3, [r4, #20]
    16e4:	b002      	add	sp, #8
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	ab01      	add	r3, sp, #4
    16ea:	466a      	mov	r2, sp
    16ec:	f7ff ffca 	bl	1684 <__swhatbuf_r>
    16f0:	9900      	ldr	r1, [sp, #0]
    16f2:	4605      	mov	r5, r0
    16f4:	4630      	mov	r0, r6
    16f6:	f000 f875 	bl	17e4 <_malloc_r>
    16fa:	b948      	cbnz	r0, 1710 <__smakebuf_r+0x44>
    16fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1700:	059a      	lsls	r2, r3, #22
    1702:	d4ef      	bmi.n	16e4 <__smakebuf_r+0x18>
    1704:	f023 0303 	bic.w	r3, r3, #3
    1708:	f043 0302 	orr.w	r3, r3, #2
    170c:	81a3      	strh	r3, [r4, #12]
    170e:	e7e3      	b.n	16d8 <__smakebuf_r+0xc>
    1710:	4b0d      	ldr	r3, [pc, #52]	; (1748 <__smakebuf_r+0x7c>)
    1712:	62b3      	str	r3, [r6, #40]	; 0x28
    1714:	89a3      	ldrh	r3, [r4, #12]
    1716:	6020      	str	r0, [r4, #0]
    1718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    171c:	81a3      	strh	r3, [r4, #12]
    171e:	9b00      	ldr	r3, [sp, #0]
    1720:	6120      	str	r0, [r4, #16]
    1722:	6163      	str	r3, [r4, #20]
    1724:	9b01      	ldr	r3, [sp, #4]
    1726:	b15b      	cbz	r3, 1740 <__smakebuf_r+0x74>
    1728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    172c:	4630      	mov	r0, r6
    172e:	f000 f93b 	bl	19a8 <_isatty_r>
    1732:	b128      	cbz	r0, 1740 <__smakebuf_r+0x74>
    1734:	89a3      	ldrh	r3, [r4, #12]
    1736:	f023 0303 	bic.w	r3, r3, #3
    173a:	f043 0301 	orr.w	r3, r3, #1
    173e:	81a3      	strh	r3, [r4, #12]
    1740:	89a3      	ldrh	r3, [r4, #12]
    1742:	431d      	orrs	r5, r3
    1744:	81a5      	strh	r5, [r4, #12]
    1746:	e7cd      	b.n	16e4 <__smakebuf_r+0x18>
    1748:	00001539 	.word	0x00001539

0000174c <_free_r>:
    174c:	b538      	push	{r3, r4, r5, lr}
    174e:	4605      	mov	r5, r0
    1750:	2900      	cmp	r1, #0
    1752:	d043      	beq.n	17dc <_free_r+0x90>
    1754:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1758:	1f0c      	subs	r4, r1, #4
    175a:	2b00      	cmp	r3, #0
    175c:	bfb8      	it	lt
    175e:	18e4      	addlt	r4, r4, r3
    1760:	f000 f944 	bl	19ec <__malloc_lock>
    1764:	4a1e      	ldr	r2, [pc, #120]	; (17e0 <_free_r+0x94>)
    1766:	6813      	ldr	r3, [r2, #0]
    1768:	4610      	mov	r0, r2
    176a:	b933      	cbnz	r3, 177a <_free_r+0x2e>
    176c:	6063      	str	r3, [r4, #4]
    176e:	6014      	str	r4, [r2, #0]
    1770:	4628      	mov	r0, r5
    1772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1776:	f000 b93a 	b.w	19ee <__malloc_unlock>
    177a:	42a3      	cmp	r3, r4
    177c:	d90b      	bls.n	1796 <_free_r+0x4a>
    177e:	6821      	ldr	r1, [r4, #0]
    1780:	1862      	adds	r2, r4, r1
    1782:	4293      	cmp	r3, r2
    1784:	bf01      	itttt	eq
    1786:	681a      	ldreq	r2, [r3, #0]
    1788:	685b      	ldreq	r3, [r3, #4]
    178a:	1852      	addeq	r2, r2, r1
    178c:	6022      	streq	r2, [r4, #0]
    178e:	6063      	str	r3, [r4, #4]
    1790:	6004      	str	r4, [r0, #0]
    1792:	e7ed      	b.n	1770 <_free_r+0x24>
    1794:	4613      	mov	r3, r2
    1796:	685a      	ldr	r2, [r3, #4]
    1798:	b10a      	cbz	r2, 179e <_free_r+0x52>
    179a:	42a2      	cmp	r2, r4
    179c:	d9fa      	bls.n	1794 <_free_r+0x48>
    179e:	6819      	ldr	r1, [r3, #0]
    17a0:	1858      	adds	r0, r3, r1
    17a2:	42a0      	cmp	r0, r4
    17a4:	d10b      	bne.n	17be <_free_r+0x72>
    17a6:	6820      	ldr	r0, [r4, #0]
    17a8:	4401      	add	r1, r0
    17aa:	1858      	adds	r0, r3, r1
    17ac:	4282      	cmp	r2, r0
    17ae:	6019      	str	r1, [r3, #0]
    17b0:	d1de      	bne.n	1770 <_free_r+0x24>
    17b2:	6810      	ldr	r0, [r2, #0]
    17b4:	6852      	ldr	r2, [r2, #4]
    17b6:	4401      	add	r1, r0
    17b8:	6019      	str	r1, [r3, #0]
    17ba:	605a      	str	r2, [r3, #4]
    17bc:	e7d8      	b.n	1770 <_free_r+0x24>
    17be:	d902      	bls.n	17c6 <_free_r+0x7a>
    17c0:	230c      	movs	r3, #12
    17c2:	602b      	str	r3, [r5, #0]
    17c4:	e7d4      	b.n	1770 <_free_r+0x24>
    17c6:	6820      	ldr	r0, [r4, #0]
    17c8:	1821      	adds	r1, r4, r0
    17ca:	428a      	cmp	r2, r1
    17cc:	bf01      	itttt	eq
    17ce:	6811      	ldreq	r1, [r2, #0]
    17d0:	6852      	ldreq	r2, [r2, #4]
    17d2:	1809      	addeq	r1, r1, r0
    17d4:	6021      	streq	r1, [r4, #0]
    17d6:	6062      	str	r2, [r4, #4]
    17d8:	605c      	str	r4, [r3, #4]
    17da:	e7c9      	b.n	1770 <_free_r+0x24>
    17dc:	bd38      	pop	{r3, r4, r5, pc}
    17de:	bf00      	nop
    17e0:	20000070 	.word	0x20000070

000017e4 <_malloc_r>:
    17e4:	b570      	push	{r4, r5, r6, lr}
    17e6:	1ccd      	adds	r5, r1, #3
    17e8:	f025 0503 	bic.w	r5, r5, #3
    17ec:	3508      	adds	r5, #8
    17ee:	2d0c      	cmp	r5, #12
    17f0:	bf38      	it	cc
    17f2:	250c      	movcc	r5, #12
    17f4:	2d00      	cmp	r5, #0
    17f6:	4606      	mov	r6, r0
    17f8:	db01      	blt.n	17fe <_malloc_r+0x1a>
    17fa:	42a9      	cmp	r1, r5
    17fc:	d903      	bls.n	1806 <_malloc_r+0x22>
    17fe:	230c      	movs	r3, #12
    1800:	6033      	str	r3, [r6, #0]
    1802:	2000      	movs	r0, #0
    1804:	bd70      	pop	{r4, r5, r6, pc}
    1806:	f000 f8f1 	bl	19ec <__malloc_lock>
    180a:	4a21      	ldr	r2, [pc, #132]	; (1890 <_malloc_r+0xac>)
    180c:	6814      	ldr	r4, [r2, #0]
    180e:	4621      	mov	r1, r4
    1810:	b991      	cbnz	r1, 1838 <_malloc_r+0x54>
    1812:	4c20      	ldr	r4, [pc, #128]	; (1894 <_malloc_r+0xb0>)
    1814:	6823      	ldr	r3, [r4, #0]
    1816:	b91b      	cbnz	r3, 1820 <_malloc_r+0x3c>
    1818:	4630      	mov	r0, r6
    181a:	f000 f83d 	bl	1898 <_sbrk_r>
    181e:	6020      	str	r0, [r4, #0]
    1820:	4629      	mov	r1, r5
    1822:	4630      	mov	r0, r6
    1824:	f000 f838 	bl	1898 <_sbrk_r>
    1828:	1c43      	adds	r3, r0, #1
    182a:	d124      	bne.n	1876 <_malloc_r+0x92>
    182c:	230c      	movs	r3, #12
    182e:	4630      	mov	r0, r6
    1830:	6033      	str	r3, [r6, #0]
    1832:	f000 f8dc 	bl	19ee <__malloc_unlock>
    1836:	e7e4      	b.n	1802 <_malloc_r+0x1e>
    1838:	680b      	ldr	r3, [r1, #0]
    183a:	1b5b      	subs	r3, r3, r5
    183c:	d418      	bmi.n	1870 <_malloc_r+0x8c>
    183e:	2b0b      	cmp	r3, #11
    1840:	d90f      	bls.n	1862 <_malloc_r+0x7e>
    1842:	600b      	str	r3, [r1, #0]
    1844:	18cc      	adds	r4, r1, r3
    1846:	50cd      	str	r5, [r1, r3]
    1848:	4630      	mov	r0, r6
    184a:	f000 f8d0 	bl	19ee <__malloc_unlock>
    184e:	f104 000b 	add.w	r0, r4, #11
    1852:	1d23      	adds	r3, r4, #4
    1854:	f020 0007 	bic.w	r0, r0, #7
    1858:	1ac3      	subs	r3, r0, r3
    185a:	d0d3      	beq.n	1804 <_malloc_r+0x20>
    185c:	425a      	negs	r2, r3
    185e:	50e2      	str	r2, [r4, r3]
    1860:	e7d0      	b.n	1804 <_malloc_r+0x20>
    1862:	684b      	ldr	r3, [r1, #4]
    1864:	428c      	cmp	r4, r1
    1866:	bf16      	itet	ne
    1868:	6063      	strne	r3, [r4, #4]
    186a:	6013      	streq	r3, [r2, #0]
    186c:	460c      	movne	r4, r1
    186e:	e7eb      	b.n	1848 <_malloc_r+0x64>
    1870:	460c      	mov	r4, r1
    1872:	6849      	ldr	r1, [r1, #4]
    1874:	e7cc      	b.n	1810 <_malloc_r+0x2c>
    1876:	1cc4      	adds	r4, r0, #3
    1878:	f024 0403 	bic.w	r4, r4, #3
    187c:	42a0      	cmp	r0, r4
    187e:	d005      	beq.n	188c <_malloc_r+0xa8>
    1880:	1a21      	subs	r1, r4, r0
    1882:	4630      	mov	r0, r6
    1884:	f000 f808 	bl	1898 <_sbrk_r>
    1888:	3001      	adds	r0, #1
    188a:	d0cf      	beq.n	182c <_malloc_r+0x48>
    188c:	6025      	str	r5, [r4, #0]
    188e:	e7db      	b.n	1848 <_malloc_r+0x64>
    1890:	20000070 	.word	0x20000070
    1894:	20000074 	.word	0x20000074

00001898 <_sbrk_r>:
    1898:	b538      	push	{r3, r4, r5, lr}
    189a:	2300      	movs	r3, #0
    189c:	4c05      	ldr	r4, [pc, #20]	; (18b4 <_sbrk_r+0x1c>)
    189e:	4605      	mov	r5, r0
    18a0:	4608      	mov	r0, r1
    18a2:	6023      	str	r3, [r4, #0]
    18a4:	f000 f8de 	bl	1a64 <_sbrk>
    18a8:	1c43      	adds	r3, r0, #1
    18aa:	d102      	bne.n	18b2 <_sbrk_r+0x1a>
    18ac:	6823      	ldr	r3, [r4, #0]
    18ae:	b103      	cbz	r3, 18b2 <_sbrk_r+0x1a>
    18b0:	602b      	str	r3, [r5, #0]
    18b2:	bd38      	pop	{r3, r4, r5, pc}
    18b4:	2000007c 	.word	0x2000007c

000018b8 <__sread>:
    18b8:	b510      	push	{r4, lr}
    18ba:	460c      	mov	r4, r1
    18bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    18c0:	f000 f896 	bl	19f0 <_read_r>
    18c4:	2800      	cmp	r0, #0
    18c6:	bfab      	itete	ge
    18c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    18ca:	89a3      	ldrhlt	r3, [r4, #12]
    18cc:	181b      	addge	r3, r3, r0
    18ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    18d2:	bfac      	ite	ge
    18d4:	6563      	strge	r3, [r4, #84]	; 0x54
    18d6:	81a3      	strhlt	r3, [r4, #12]
    18d8:	bd10      	pop	{r4, pc}

000018da <__swrite>:
    18da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18de:	461f      	mov	r7, r3
    18e0:	898b      	ldrh	r3, [r1, #12]
    18e2:	4605      	mov	r5, r0
    18e4:	05db      	lsls	r3, r3, #23
    18e6:	460c      	mov	r4, r1
    18e8:	4616      	mov	r6, r2
    18ea:	d505      	bpl.n	18f8 <__swrite+0x1e>
    18ec:	2302      	movs	r3, #2
    18ee:	2200      	movs	r2, #0
    18f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    18f4:	f000 f868 	bl	19c8 <_lseek_r>
    18f8:	89a3      	ldrh	r3, [r4, #12]
    18fa:	4632      	mov	r2, r6
    18fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1900:	81a3      	strh	r3, [r4, #12]
    1902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1906:	463b      	mov	r3, r7
    1908:	4628      	mov	r0, r5
    190a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    190e:	f000 b817 	b.w	1940 <_write_r>

00001912 <__sseek>:
    1912:	b510      	push	{r4, lr}
    1914:	460c      	mov	r4, r1
    1916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    191a:	f000 f855 	bl	19c8 <_lseek_r>
    191e:	1c43      	adds	r3, r0, #1
    1920:	89a3      	ldrh	r3, [r4, #12]
    1922:	bf15      	itete	ne
    1924:	6560      	strne	r0, [r4, #84]	; 0x54
    1926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    192a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    192e:	81a3      	strheq	r3, [r4, #12]
    1930:	bf18      	it	ne
    1932:	81a3      	strhne	r3, [r4, #12]
    1934:	bd10      	pop	{r4, pc}

00001936 <__sclose>:
    1936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    193a:	f000 b813 	b.w	1964 <_close_r>
	...

00001940 <_write_r>:
    1940:	b538      	push	{r3, r4, r5, lr}
    1942:	4605      	mov	r5, r0
    1944:	4608      	mov	r0, r1
    1946:	4611      	mov	r1, r2
    1948:	2200      	movs	r2, #0
    194a:	4c05      	ldr	r4, [pc, #20]	; (1960 <_write_r+0x20>)
    194c:	6022      	str	r2, [r4, #0]
    194e:	461a      	mov	r2, r3
    1950:	f7fe feb0 	bl	6b4 <_write>
    1954:	1c43      	adds	r3, r0, #1
    1956:	d102      	bne.n	195e <_write_r+0x1e>
    1958:	6823      	ldr	r3, [r4, #0]
    195a:	b103      	cbz	r3, 195e <_write_r+0x1e>
    195c:	602b      	str	r3, [r5, #0]
    195e:	bd38      	pop	{r3, r4, r5, pc}
    1960:	2000007c 	.word	0x2000007c

00001964 <_close_r>:
    1964:	b538      	push	{r3, r4, r5, lr}
    1966:	2300      	movs	r3, #0
    1968:	4c05      	ldr	r4, [pc, #20]	; (1980 <_close_r+0x1c>)
    196a:	4605      	mov	r5, r0
    196c:	4608      	mov	r0, r1
    196e:	6023      	str	r3, [r4, #0]
    1970:	f000 f850 	bl	1a14 <_close>
    1974:	1c43      	adds	r3, r0, #1
    1976:	d102      	bne.n	197e <_close_r+0x1a>
    1978:	6823      	ldr	r3, [r4, #0]
    197a:	b103      	cbz	r3, 197e <_close_r+0x1a>
    197c:	602b      	str	r3, [r5, #0]
    197e:	bd38      	pop	{r3, r4, r5, pc}
    1980:	2000007c 	.word	0x2000007c

00001984 <_fstat_r>:
    1984:	b538      	push	{r3, r4, r5, lr}
    1986:	2300      	movs	r3, #0
    1988:	4c06      	ldr	r4, [pc, #24]	; (19a4 <_fstat_r+0x20>)
    198a:	4605      	mov	r5, r0
    198c:	4608      	mov	r0, r1
    198e:	4611      	mov	r1, r2
    1990:	6023      	str	r3, [r4, #0]
    1992:	f000 f847 	bl	1a24 <_fstat>
    1996:	1c43      	adds	r3, r0, #1
    1998:	d102      	bne.n	19a0 <_fstat_r+0x1c>
    199a:	6823      	ldr	r3, [r4, #0]
    199c:	b103      	cbz	r3, 19a0 <_fstat_r+0x1c>
    199e:	602b      	str	r3, [r5, #0]
    19a0:	bd38      	pop	{r3, r4, r5, pc}
    19a2:	bf00      	nop
    19a4:	2000007c 	.word	0x2000007c

000019a8 <_isatty_r>:
    19a8:	b538      	push	{r3, r4, r5, lr}
    19aa:	2300      	movs	r3, #0
    19ac:	4c05      	ldr	r4, [pc, #20]	; (19c4 <_isatty_r+0x1c>)
    19ae:	4605      	mov	r5, r0
    19b0:	4608      	mov	r0, r1
    19b2:	6023      	str	r3, [r4, #0]
    19b4:	f000 f83e 	bl	1a34 <_isatty>
    19b8:	1c43      	adds	r3, r0, #1
    19ba:	d102      	bne.n	19c2 <_isatty_r+0x1a>
    19bc:	6823      	ldr	r3, [r4, #0]
    19be:	b103      	cbz	r3, 19c2 <_isatty_r+0x1a>
    19c0:	602b      	str	r3, [r5, #0]
    19c2:	bd38      	pop	{r3, r4, r5, pc}
    19c4:	2000007c 	.word	0x2000007c

000019c8 <_lseek_r>:
    19c8:	b538      	push	{r3, r4, r5, lr}
    19ca:	4605      	mov	r5, r0
    19cc:	4608      	mov	r0, r1
    19ce:	4611      	mov	r1, r2
    19d0:	2200      	movs	r2, #0
    19d2:	4c05      	ldr	r4, [pc, #20]	; (19e8 <_lseek_r+0x20>)
    19d4:	6022      	str	r2, [r4, #0]
    19d6:	461a      	mov	r2, r3
    19d8:	f000 f834 	bl	1a44 <_lseek>
    19dc:	1c43      	adds	r3, r0, #1
    19de:	d102      	bne.n	19e6 <_lseek_r+0x1e>
    19e0:	6823      	ldr	r3, [r4, #0]
    19e2:	b103      	cbz	r3, 19e6 <_lseek_r+0x1e>
    19e4:	602b      	str	r3, [r5, #0]
    19e6:	bd38      	pop	{r3, r4, r5, pc}
    19e8:	2000007c 	.word	0x2000007c

000019ec <__malloc_lock>:
    19ec:	4770      	bx	lr

000019ee <__malloc_unlock>:
    19ee:	4770      	bx	lr

000019f0 <_read_r>:
    19f0:	b538      	push	{r3, r4, r5, lr}
    19f2:	4605      	mov	r5, r0
    19f4:	4608      	mov	r0, r1
    19f6:	4611      	mov	r1, r2
    19f8:	2200      	movs	r2, #0
    19fa:	4c05      	ldr	r4, [pc, #20]	; (1a10 <_read_r+0x20>)
    19fc:	6022      	str	r2, [r4, #0]
    19fe:	461a      	mov	r2, r3
    1a00:	f000 f828 	bl	1a54 <_read>
    1a04:	1c43      	adds	r3, r0, #1
    1a06:	d102      	bne.n	1a0e <_read_r+0x1e>
    1a08:	6823      	ldr	r3, [r4, #0]
    1a0a:	b103      	cbz	r3, 1a0e <_read_r+0x1e>
    1a0c:	602b      	str	r3, [r5, #0]
    1a0e:	bd38      	pop	{r3, r4, r5, pc}
    1a10:	2000007c 	.word	0x2000007c

00001a14 <_close>:
    1a14:	2258      	movs	r2, #88	; 0x58
    1a16:	4b02      	ldr	r3, [pc, #8]	; (1a20 <_close+0xc>)
    1a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a1c:	601a      	str	r2, [r3, #0]
    1a1e:	4770      	bx	lr
    1a20:	2000007c 	.word	0x2000007c

00001a24 <_fstat>:
    1a24:	2258      	movs	r2, #88	; 0x58
    1a26:	4b02      	ldr	r3, [pc, #8]	; (1a30 <_fstat+0xc>)
    1a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a2c:	601a      	str	r2, [r3, #0]
    1a2e:	4770      	bx	lr
    1a30:	2000007c 	.word	0x2000007c

00001a34 <_isatty>:
    1a34:	2258      	movs	r2, #88	; 0x58
    1a36:	4b02      	ldr	r3, [pc, #8]	; (1a40 <_isatty+0xc>)
    1a38:	2000      	movs	r0, #0
    1a3a:	601a      	str	r2, [r3, #0]
    1a3c:	4770      	bx	lr
    1a3e:	bf00      	nop
    1a40:	2000007c 	.word	0x2000007c

00001a44 <_lseek>:
    1a44:	2258      	movs	r2, #88	; 0x58
    1a46:	4b02      	ldr	r3, [pc, #8]	; (1a50 <_lseek+0xc>)
    1a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a4c:	601a      	str	r2, [r3, #0]
    1a4e:	4770      	bx	lr
    1a50:	2000007c 	.word	0x2000007c

00001a54 <_read>:
    1a54:	2258      	movs	r2, #88	; 0x58
    1a56:	4b02      	ldr	r3, [pc, #8]	; (1a60 <_read+0xc>)
    1a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a5c:	601a      	str	r2, [r3, #0]
    1a5e:	4770      	bx	lr
    1a60:	2000007c 	.word	0x2000007c

00001a64 <_sbrk>:
    1a64:	4a04      	ldr	r2, [pc, #16]	; (1a78 <_sbrk+0x14>)
    1a66:	4905      	ldr	r1, [pc, #20]	; (1a7c <_sbrk+0x18>)
    1a68:	6813      	ldr	r3, [r2, #0]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	bf08      	it	eq
    1a6e:	460b      	moveq	r3, r1
    1a70:	4418      	add	r0, r3
    1a72:	6010      	str	r0, [r2, #0]
    1a74:	4618      	mov	r0, r3
    1a76:	4770      	bx	lr
    1a78:	20000078 	.word	0x20000078
    1a7c:	20000080 	.word	0x20000080

00001a80 <_exit>:
    1a80:	e7fe      	b.n	1a80 <_exit>
    1a82:	bf00      	nop

00001a84 <_init>:
    1a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a86:	bf00      	nop

00001a88 <_fini>:
    1a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a8a:	bf00      	nop
    1a8c:	726f430a 	.word	0x726f430a
    1a90:	2d786574 	.word	0x2d786574
    1a94:	4420334d 	.word	0x4420334d
    1a98:	67697365 	.word	0x67697365
    1a9c:	6174536e 	.word	0x6174536e
    1aa0:	2d207472 	.word	0x2d207472
    1aa4:	656c5320 	.word	0x656c5320
    1aa8:	44207065 	.word	0x44207065
    1aac:	206f6d65 	.word	0x206f6d65
    1ab0:	6572202d 	.word	0x6572202d
    1ab4:	69736976 	.word	0x69736976
    1ab8:	24206e6f 	.word	0x24206e6f
    1abc:	69766552 	.word	0x69766552
    1ac0:	6e6f6973 	.word	0x6e6f6973
    1ac4:	3432203a 	.word	0x3432203a
    1ac8:	39343233 	.word	0x39343233
    1acc:	000a2420 	.word	0x000a2420
    1ad0:	57202d0a 	.word	0x57202d0a
    1ad4:	53204946 	.word	0x53204946
    1ad8:	5045454c 	.word	0x5045454c
    1adc:	0000003a 	.word	0x0000003a
    1ae0:	54202a2a 	.word	0x54202a2a
    1ae4:	20545345 	.word	0x20545345
    1ae8:	50494b53 	.word	0x50494b53
    1aec:	20444550 	.word	0x20444550
    1af0:	54202a2a 	.word	0x54202a2a
    1af4:	72656d69 	.word	0x72656d69
    1af8:	6e203020 	.word	0x6e203020
    1afc:	7020746f 	.word	0x7020746f
    1b00:	65736572 	.word	0x65736572
    1b04:	002e746e 	.word	0x002e746e
    1b08:	49542020 	.word	0x49542020
    1b0c:	2052454d 	.word	0x2052454d
    1b10:	2e515249 	.word	0x2e515249
    1b14:	0000000a 	.word	0x0000000a
    1b18:	57202d0a 	.word	0x57202d0a
    1b1c:	53204546 	.word	0x53204546
    1b20:	5045454c 	.word	0x5045454c
    1b24:	0000003a 	.word	0x0000003a
    1b28:	53202d0a 	.word	0x53202d0a
    1b2c:	5045454c 	.word	0x5045454c
    1b30:	2d4e4f2d 	.word	0x2d4e4f2d
    1b34:	54495845 	.word	0x54495845
    1b38:	0000003a 	.word	0x0000003a
    1b3c:	57202d0a 	.word	0x57202d0a
    1b40:	44204946 	.word	0x44204946
    1b44:	20504545 	.word	0x20504545
    1b48:	45454c53 	.word	0x45454c53
    1b4c:	00003a50 	.word	0x00003a50
    1b50:	57202d0a 	.word	0x57202d0a
    1b54:	44204546 	.word	0x44204546
    1b58:	20504545 	.word	0x20504545
    1b5c:	45454c53 	.word	0x45454c53
    1b60:	00003a50 	.word	0x00003a50
    1b64:	53202d0a 	.word	0x53202d0a
    1b68:	5045454c 	.word	0x5045454c
    1b6c:	2d4e4f2d 	.word	0x2d4e4f2d
    1b70:	54495845 	.word	0x54495845
    1b74:	65656420 	.word	0x65656420
    1b78:	6c732070 	.word	0x6c732070
    1b7c:	3a706565 	.word	0x3a706565
    1b80:	00000000 	.word	0x00000000
    1b84:	44202d0a 	.word	0x44202d0a
    1b88:	63657465 	.word	0x63657465
    1b8c:	676e6974 	.word	0x676e6974
    1b90:	554d5020 	.word	0x554d5020
    1b94:	6e6f6320 	.word	0x6e6f6320
    1b98:	6c6f7274 	.word	0x6c6f7274
    1b9c:	00000000 	.word	0x00000000
    1ba0:	20554d50 	.word	0x20554d50
    1ba4:	20746f6e 	.word	0x20746f6e
    1ba8:	69617661 	.word	0x69617661
    1bac:	6c62616c 	.word	0x6c62616c
    1bb0:	00000a65 	.word	0x00000a65
    1bb4:	57202d0a 	.word	0x57202d0a
    1bb8:	44204946 	.word	0x44204946
    1bbc:	20504545 	.word	0x20504545
    1bc0:	45454c53 	.word	0x45454c53
    1bc4:	69772050 	.word	0x69772050
    1bc8:	57206874 	.word	0x57206874
    1bcc:	00004349 	.word	0x00004349
    1bd0:	57202d0a 	.word	0x57202d0a
    1bd4:	44204546 	.word	0x44204546
    1bd8:	20504545 	.word	0x20504545
    1bdc:	45454c53 	.word	0x45454c53
    1be0:	69772050 	.word	0x69772050
    1be4:	57206874 	.word	0x57206874
    1be8:	00004349 	.word	0x00004349
    1bec:	53202d0a 	.word	0x53202d0a
    1bf0:	5045454c 	.word	0x5045454c
    1bf4:	2d4e4f2d 	.word	0x2d4e4f2d
    1bf8:	54495845 	.word	0x54495845
    1bfc:	74697720 	.word	0x74697720
    1c00:	49572068 	.word	0x49572068
    1c04:	00003a43 	.word	0x00003a43
    1c08:	4f525245 	.word	0x4f525245
    1c0c:	4d503a52 	.word	0x4d503a52
    1c10:	6f632055 	.word	0x6f632055
    1c14:	6f72746e 	.word	0x6f72746e
    1c18:	6163206c 	.word	0x6163206c
    1c1c:	746f6e6e 	.word	0x746f6e6e
    1c20:	20656220 	.word	0x20656220
    1c24:	61656c63 	.word	0x61656c63
    1c28:	0a646572 	.word	0x0a646572
    1c2c:	00000000 	.word	0x00000000
    1c30:	57202d0a 	.word	0x57202d0a
    1c34:	44204946 	.word	0x44204946
    1c38:	20504545 	.word	0x20504545
    1c3c:	45454c53 	.word	0x45454c53
    1c40:	69772050 	.word	0x69772050
    1c44:	57206874 	.word	0x57206874
    1c48:	73204349 	.word	0x73204349
    1c4c:	63746977 	.word	0x63746977
    1c50:	20646568 	.word	0x20646568
    1c54:	0066666f 	.word	0x0066666f
    1c58:	54202a2a 	.word	0x54202a2a
    1c5c:	20545345 	.word	0x20545345
    1c60:	53534150 	.word	0x53534150
    1c64:	2a204445 	.word	0x2a204445
    1c68:	0000202a 	.word	0x0000202a
    1c6c:	49542020 	.word	0x49542020
    1c70:	2052454d 	.word	0x2052454d
    1c74:	2e515249 	.word	0x2e515249
    1c78:	00000000 	.word	0x00000000
    1c7c:	6e452020 	.word	0x6e452020
    1c80:	20726574 	.word	0x20726574
    1c84:	65656c73 	.word	0x65656c73
    1c88:	2e2e2e70 	.word	0x2e2e2e70
    1c8c:	00000000 	.word	0x00000000

00001c90 <_global_impure_ptr>:
    1c90:	20000008                                ... 

00001c94 <__sf_fake_stderr>:
	...

00001cb4 <__sf_fake_stdin>:
	...

00001cd4 <__sf_fake_stdout>:
	...
