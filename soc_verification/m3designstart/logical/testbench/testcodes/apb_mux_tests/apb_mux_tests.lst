
apb_mux_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	000002b5 	.word	0x000002b5
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 f8ff 	bl	34c <main>
    bl    exit
     14e:	f000 fa71 	bl	634 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	000019b3 	.word	0x000019b3
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000088 	.word	0x20000088
    ldr     r0,=SystemInit
     168:	00000625 	.word	0x00000625

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <NMI_Handler+0x2>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     1f0:	6001      	str	r1, [r0, #0]
     1f2:	f3bf 8f4f 	dsb	sy
     1f6:	4770      	bx	lr

000001f8 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     1f8:	b406      	push	{r1, r2}
     1fa:	6801      	ldr	r1, [r0, #0]
     1fc:	f3bf 8f4f 	dsb	sy
     200:	0008      	movs	r0, r1
     202:	bc06      	pop	{r1, r2}
     204:	4770      	bx	lr
     206:	bf00      	nop

00000208 <ID_Check>:
  return 0;
}

/* Check the ID register value in offset 0xFC0 to 0xFFC (last 16 words, last 12 are IDs) */
int ID_Check(const unsigned char id_array[], unsigned int offset)
{
     208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     20c:	2400      	movs	r4, #0
     20e:	f501 657c 	add.w	r5, r1, #4032	; 0xfc0
     212:	1e46      	subs	r6, r0, #1
  int i; /* loop counter */
  unsigned long expected_val, actual_val;
  unsigned long compare_mask;
  int           mismatch = 0;
  int           id_is_zero = 0;
     214:	4627      	mov	r7, r4
  int           mismatch = 0;
     216:	46a0      	mov	r8, r4
    if      (i==10) { compare_mask = 0xF0;}  // mask out version field
    else if (i==11) { compare_mask = 0xFF;}  // mask out ECO field and patch field
    else            { compare_mask = 0x00;}  // compare whole value

    if ((expected_val & (~compare_mask)) != (actual_val & (~compare_mask))) {
      printf ("Difference found: %x, expected %x, actual %x\n", test_addr, expected_val, actual_val);
     218:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2b0 <ID_Check+0xa8>
     21c:	e003      	b.n	226 <ID_Check+0x1e>
  for (i=0;i<16;i++) {
     21e:	2c0f      	cmp	r4, #15
     220:	d014      	beq.n	24c <ID_Check+0x44>
     222:	3401      	adds	r4, #1
     224:	3504      	adds	r5, #4
    actual_val   = HW32_REG(test_addr);
     226:	682b      	ldr	r3, [r5, #0]
    expected_val = (int) id_array[i];
     228:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    if (actual_val == 0) id_is_zero++; // Check if all ID are zero at the end
     22c:	b903      	cbnz	r3, 230 <ID_Check+0x28>
     22e:	3701      	adds	r7, #1
    if      (i==10) { compare_mask = 0xF0;}  // mask out version field
     230:	2c0a      	cmp	r4, #10
     232:	d01e      	beq.n	272 <ID_Check+0x6a>
    else if (i==11) { compare_mask = 0xFF;}  // mask out ECO field and patch field
     234:	2c0b      	cmp	r4, #11
     236:	d029      	beq.n	28c <ID_Check+0x84>
    if ((expected_val & (~compare_mask)) != (actual_val & (~compare_mask))) {
     238:	429a      	cmp	r2, r3
     23a:	d0f0      	beq.n	21e <ID_Check+0x16>
      printf ("Difference found: %x, expected %x, actual %x\n", test_addr, expected_val, actual_val);
     23c:	4629      	mov	r1, r5
     23e:	4648      	mov	r0, r9
     240:	f000 fa14 	bl	66c <iprintf>
      mismatch++;
     244:	f108 0801 	add.w	r8, r8, #1
  for (i=0;i<16;i++) {
     248:	2c0f      	cmp	r4, #15
     24a:	d1ea      	bne.n	222 <ID_Check+0x1a>
      }
    } // end_for

    if (id_is_zero == 16) {
     24c:	2f10      	cmp	r7, #16
     24e:	d020      	beq.n	292 <ID_Check+0x8a>
        puts ("  All ID values are 0   : device not present\n");
        return 2; }
    else if (mismatch> 0) {
     250:	f1b8 0f00 	cmp.w	r8, #0
     254:	d007      	beq.n	266 <ID_Check+0x5e>
        puts ("  ID value mismatch(es) : device unknown\n");
        return 1; }
     256:	f04f 0801 	mov.w	r8, #1
        puts ("  ID value mismatch(es) : device unknown\n");
     25a:	4812      	ldr	r0, [pc, #72]	; (2a4 <ID_Check+0x9c>)
     25c:	f000 fa7a 	bl	754 <puts>
    else {
        puts ("  All ID values matched : device present\n");
        return 0;
         }

}
     260:	4640      	mov	r0, r8
     262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        puts ("  All ID values matched : device present\n");
     266:	4810      	ldr	r0, [pc, #64]	; (2a8 <ID_Check+0xa0>)
     268:	f000 fa74 	bl	754 <puts>
}
     26c:	4640      	mov	r0, r8
     26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     272:	f06f 00f0 	mvn.w	r0, #240	; 0xf0
    if ((expected_val & (~compare_mask)) != (actual_val & (~compare_mask))) {
     276:	ea82 0103 	eor.w	r1, r2, r3
     27a:	4201      	tst	r1, r0
     27c:	d0d1      	beq.n	222 <ID_Check+0x1a>
      printf ("Difference found: %x, expected %x, actual %x\n", test_addr, expected_val, actual_val);
     27e:	4629      	mov	r1, r5
     280:	4648      	mov	r0, r9
     282:	f000 f9f3 	bl	66c <iprintf>
      mismatch++;
     286:	f108 0801 	add.w	r8, r8, #1
     28a:	e7dd      	b.n	248 <ID_Check+0x40>
     28c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
     290:	e7f1      	b.n	276 <ID_Check+0x6e>
        return 2; }
     292:	f04f 0802 	mov.w	r8, #2
        puts ("  All ID values are 0   : device not present\n");
     296:	4805      	ldr	r0, [pc, #20]	; (2ac <ID_Check+0xa4>)
     298:	f000 fa5c 	bl	754 <puts>
}
     29c:	4640      	mov	r0, r8
     29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     2a2:	bf00      	nop
     2a4:	00001664 	.word	0x00001664
     2a8:	00001690 	.word	0x00001690
     2ac:	00001634 	.word	0x00001634
     2b0:	00001604 	.word	0x00001604

000002b4 <HardFault_Handler>:
#else
/* gcc toolchain */
void HardFault_Handler(void) __attribute__((naked));
void HardFault_Handler(void)
{
  __asm("  movs   r0,#4\n"
     2b4:	2004      	movs	r0, #4
     2b6:	4671      	mov	r1, lr
     2b8:	4208      	tst	r0, r1
     2ba:	d003      	beq.n	2c4 <stacking_used_MSP>
     2bc:	f3ef 8009 	mrs	r0, PSP
     2c0:	4902      	ldr	r1, [pc, #8]	; (2cc <stacking_used_MSP+0x8>)
     2c2:	4708      	bx	r1

000002c4 <stacking_used_MSP>:
     2c4:	f3ef 8008 	mrs	r0, MSP
     2c8:	4900      	ldr	r1, [pc, #0]	; (2cc <stacking_used_MSP+0x8>)
     2ca:	4708      	bx	r1
     2cc:	000002d1 	.word	0x000002d1

000002d0 <HardFault_Handler_c>:
/* C part of the fault handler - common between ARM / Keil / IAR / gcc */
void HardFault_Handler_c(unsigned int * hardfault_args, unsigned lr_value)
{
  unsigned int stacked_pc;
  unsigned int stacked_r0;
  hardfault_occurred++;
     2d0:	4a16      	ldr	r2, [pc, #88]	; (32c <HardFault_Handler_c+0x5c>)
{
     2d2:	b570      	push	{r4, r5, r6, lr}
  if (hardfault_verbose) puts ("[Hard Fault Handler]");
     2d4:	4d16      	ldr	r5, [pc, #88]	; (330 <HardFault_Handler_c+0x60>)
  hardfault_occurred++;
     2d6:	6813      	ldr	r3, [r2, #0]
  if (hardfault_verbose) puts ("[Hard Fault Handler]");
     2d8:	6829      	ldr	r1, [r5, #0]
  hardfault_occurred++;
     2da:	3301      	adds	r3, #1
{
     2dc:	4604      	mov	r4, r0
  hardfault_occurred++;
     2de:	6013      	str	r3, [r2, #0]
  if (hardfault_verbose) puts ("[Hard Fault Handler]");
     2e0:	b929      	cbnz	r1, 2ee <HardFault_Handler_c+0x1e>
  if (hardfault_expected==0) {
     2e2:	4b14      	ldr	r3, [pc, #80]	; (334 <HardFault_Handler_c+0x64>)
     2e4:	681b      	ldr	r3, [r3, #0]
     2e6:	b1d3      	cbz	r3, 31e <HardFault_Handler_c+0x4e>
  stacked_r0  = ((unsigned long) hardfault_args[0]);
  stacked_pc  = ((unsigned long) hardfault_args[6]);
  if (hardfault_verbose)  printf(" - Stacked R0 : 0x%x\n", stacked_r0);
  if (hardfault_verbose)  printf(" - Stacked PC : 0x%x\n", stacked_pc);
  /* Modify R0 to a valid address */
  hardfault_args[0] = (unsigned long) &temp_data;
     2e8:	4b13      	ldr	r3, [pc, #76]	; (338 <HardFault_Handler_c+0x68>)
     2ea:	6023      	str	r3, [r4, #0]

  return;
}
     2ec:	bd70      	pop	{r4, r5, r6, pc}
  if (hardfault_verbose) puts ("[Hard Fault Handler]");
     2ee:	4813      	ldr	r0, [pc, #76]	; (33c <HardFault_Handler_c+0x6c>)
     2f0:	f000 fa30 	bl	754 <puts>
  if (hardfault_expected==0) {
     2f4:	4b0f      	ldr	r3, [pc, #60]	; (334 <HardFault_Handler_c+0x64>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	b18b      	cbz	r3, 31e <HardFault_Handler_c+0x4e>
  if (hardfault_verbose)  printf(" - Stacked R0 : 0x%x\n", stacked_r0);
     2fa:	682b      	ldr	r3, [r5, #0]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d0f3      	beq.n	2e8 <HardFault_Handler_c+0x18>
     300:	6821      	ldr	r1, [r4, #0]
     302:	480f      	ldr	r0, [pc, #60]	; (340 <HardFault_Handler_c+0x70>)
  stacked_pc  = ((unsigned long) hardfault_args[6]);
     304:	69a6      	ldr	r6, [r4, #24]
  if (hardfault_verbose)  printf(" - Stacked R0 : 0x%x\n", stacked_r0);
     306:	f000 f9b1 	bl	66c <iprintf>
  if (hardfault_verbose)  printf(" - Stacked PC : 0x%x\n", stacked_pc);
     30a:	682b      	ldr	r3, [r5, #0]
     30c:	2b00      	cmp	r3, #0
     30e:	d0eb      	beq.n	2e8 <HardFault_Handler_c+0x18>
     310:	4631      	mov	r1, r6
     312:	480c      	ldr	r0, [pc, #48]	; (344 <HardFault_Handler_c+0x74>)
     314:	f000 f9aa 	bl	66c <iprintf>
  hardfault_args[0] = (unsigned long) &temp_data;
     318:	4b07      	ldr	r3, [pc, #28]	; (338 <HardFault_Handler_c+0x68>)
     31a:	6023      	str	r3, [r4, #0]
}
     31c:	bd70      	pop	{r4, r5, r6, pc}
    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
     31e:	480a      	ldr	r0, [pc, #40]	; (348 <HardFault_Handler_c+0x78>)
     320:	f000 fa18 	bl	754 <puts>
    UartEndSimulation();
     324:	f000 f96e 	bl	604 <UartEndSimulation>
     328:	e7fe      	b.n	328 <HardFault_Handler_c+0x58>
     32a:	bf00      	nop
     32c:	20000078 	.word	0x20000078
     330:	20000068 	.word	0x20000068
     334:	20000080 	.word	0x20000080
     338:	2000007c 	.word	0x2000007c
     33c:	000018a0 	.word	0x000018a0
     340:	000018ec 	.word	0x000018ec
     344:	00001904 	.word	0x00001904
     348:	000018b8 	.word	0x000018b8

0000034c <main>:
{
     34c:	b510      	push	{r4, lr}
  UartStdOutInit();
     34e:	f000 f941 	bl	5d4 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - APB slave mux test - revision $Revision: 243193 $\n");
     352:	486d      	ldr	r0, [pc, #436]	; (508 <main+0x1bc>)
     354:	f000 f9fe 	bl	754 <puts>
  puts(" - Detecting if default peripherals are present ...\n");
     358:	486c      	ldr	r0, [pc, #432]	; (50c <main+0x1c0>)
     35a:	f000 f9fb 	bl	754 <puts>
  temp_data=0;
     35e:	2300      	movs	r3, #0
  hardfault_expected = 0;
     360:	4a6b      	ldr	r2, [pc, #428]	; (510 <main+0x1c4>)
  hardfault_occurred = 0;
     362:	496c      	ldr	r1, [pc, #432]	; (514 <main+0x1c8>)
  temp_data=0;
     364:	4c6c      	ldr	r4, [pc, #432]	; (518 <main+0x1cc>)
  puts ("0: timer 0");
     366:	486d      	ldr	r0, [pc, #436]	; (51c <main+0x1d0>)
  temp_data=0;
     368:	6023      	str	r3, [r4, #0]
  hardfault_occurred = 0;
     36a:	600b      	str	r3, [r1, #0]
  hardfault_expected = 0;
     36c:	6013      	str	r3, [r2, #0]
  puts ("0: timer 0");
     36e:	f000 f9f1 	bl	754 <puts>
    if ( ID_Check(&apb_timer_id[0],     CM3DS_MPS2_TIMER0_BASE   ) == 1 ) err_code |= 1<<0;
     372:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     376:	486a      	ldr	r0, [pc, #424]	; (520 <main+0x1d4>)
     378:	f7ff ff46 	bl	208 <ID_Check>
     37c:	f1a0 0401 	sub.w	r4, r0, #1
  puts ("1: timer 1");
     380:	4868      	ldr	r0, [pc, #416]	; (524 <main+0x1d8>)
     382:	f000 f9e7 	bl	754 <puts>
    if ( ID_Check(&apb_timer_id[0],     CM3DS_MPS2_TIMER1_BASE   ) == 1 ) err_code |= 1<<1;
     386:	4968      	ldr	r1, [pc, #416]	; (528 <main+0x1dc>)
     388:	4865      	ldr	r0, [pc, #404]	; (520 <main+0x1d4>)
     38a:	f7ff ff3d 	bl	208 <ID_Check>
    if ( ID_Check(&apb_timer_id[0],     CM3DS_MPS2_TIMER0_BASE   ) == 1 ) err_code |= 1<<0;
     38e:	fab4 f484 	clz	r4, r4
    if ( ID_Check(&apb_timer_id[0],     CM3DS_MPS2_TIMER1_BASE   ) == 1 ) err_code |= 1<<1;
     392:	2801      	cmp	r0, #1
    if ( ID_Check(&apb_timer_id[0],     CM3DS_MPS2_TIMER0_BASE   ) == 1 ) err_code |= 1<<0;
     394:	ea4f 1454 	mov.w	r4, r4, lsr #5
  puts ("2: dual timer");
     398:	4864      	ldr	r0, [pc, #400]	; (52c <main+0x1e0>)
    if ( ID_Check(&apb_timer_id[0],     CM3DS_MPS2_TIMER1_BASE   ) == 1 ) err_code |= 1<<1;
     39a:	bf08      	it	eq
     39c:	f044 0402 	orreq.w	r4, r4, #2
  puts ("2: dual timer");
     3a0:	f000 f9d8 	bl	754 <puts>
    if ( ID_Check(&apb_dualtimer_id[0], CM3DS_MPS2_DUALTIMER_BASE) == 1 ) err_code |= 1<<2;
     3a4:	4962      	ldr	r1, [pc, #392]	; (530 <main+0x1e4>)
     3a6:	4863      	ldr	r0, [pc, #396]	; (534 <main+0x1e8>)
     3a8:	f7ff ff2e 	bl	208 <ID_Check>
     3ac:	2801      	cmp	r0, #1
  puts ("3: blank");
     3ae:	4862      	ldr	r0, [pc, #392]	; (538 <main+0x1ec>)
    if ( ID_Check(&apb_dualtimer_id[0], CM3DS_MPS2_DUALTIMER_BASE) == 1 ) err_code |= 1<<2;
     3b0:	bf08      	it	eq
     3b2:	f044 0404 	orreq.w	r4, r4, #4
  puts ("3: blank");
     3b6:	f000 f9cd 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0x3000) == 1    ) err_code |= 1<<3;
     3ba:	4960      	ldr	r1, [pc, #384]	; (53c <main+0x1f0>)
     3bc:	4860      	ldr	r0, [pc, #384]	; (540 <main+0x1f4>)
     3be:	f7ff ff23 	bl	208 <ID_Check>
     3c2:	2801      	cmp	r0, #1
  puts ("4: UART 0");
     3c4:	485f      	ldr	r0, [pc, #380]	; (544 <main+0x1f8>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0x3000) == 1    ) err_code |= 1<<3;
     3c6:	bf08      	it	eq
     3c8:	f044 0408 	orreq.w	r4, r4, #8
  puts ("4: UART 0");
     3cc:	f000 f9c2 	bl	754 <puts>
    if ( ID_Check(&apb_uart_id[0],      CM3DS_MPS2_UART0_BASE    ) == 1 ) err_code |= 1<<4;
     3d0:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
     3d4:	485c      	ldr	r0, [pc, #368]	; (548 <main+0x1fc>)
     3d6:	f7ff ff17 	bl	208 <ID_Check>
     3da:	2801      	cmp	r0, #1
  puts ("5: UART 1");
     3dc:	485b      	ldr	r0, [pc, #364]	; (54c <main+0x200>)
    if ( ID_Check(&apb_uart_id[0],      CM3DS_MPS2_UART0_BASE    ) == 1 ) err_code |= 1<<4;
     3de:	bf08      	it	eq
     3e0:	f044 0410 	orreq.w	r4, r4, #16
  puts ("5: UART 1");
     3e4:	f000 f9b6 	bl	754 <puts>
    if ( ID_Check(&apb_uart_id[0],      CM3DS_MPS2_UART1_BASE    ) == 1 ) err_code |= 1<<5;
     3e8:	4959      	ldr	r1, [pc, #356]	; (550 <main+0x204>)
     3ea:	4857      	ldr	r0, [pc, #348]	; (548 <main+0x1fc>)
     3ec:	f7ff ff0c 	bl	208 <ID_Check>
     3f0:	2801      	cmp	r0, #1
  puts ("6: RTC");
     3f2:	4858      	ldr	r0, [pc, #352]	; (554 <main+0x208>)
    if ( ID_Check(&apb_uart_id[0],      CM3DS_MPS2_UART1_BASE    ) == 1 ) err_code |= 1<<5;
     3f4:	bf08      	it	eq
     3f6:	f044 0420 	orreq.w	r4, r4, #32
  puts ("6: RTC");
     3fa:	f000 f9ab 	bl	754 <puts>
    if ( ID_Check(&apb_rtc_id[0],       CM3DS_MPS2_RTC_BASE      ) == 1 ) err_code |= 1<<6;
     3fe:	4956      	ldr	r1, [pc, #344]	; (558 <main+0x20c>)
     400:	4856      	ldr	r0, [pc, #344]	; (55c <main+0x210>)
     402:	f7ff ff01 	bl	208 <ID_Check>
     406:	2801      	cmp	r0, #1
  puts ("7: blank");
     408:	4855      	ldr	r0, [pc, #340]	; (560 <main+0x214>)
    if ( ID_Check(&apb_rtc_id[0],       CM3DS_MPS2_RTC_BASE      ) == 1 ) err_code |= 1<<6;
     40a:	bf08      	it	eq
     40c:	f044 0440 	orreq.w	r4, r4, #64	; 0x40
  puts ("7: blank");
     410:	f000 f9a0 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0x7000          ) == 1 ) err_code |= 1<<7;
     414:	4953      	ldr	r1, [pc, #332]	; (564 <main+0x218>)
     416:	484a      	ldr	r0, [pc, #296]	; (540 <main+0x1f4>)
     418:	f7ff fef6 	bl	208 <ID_Check>
     41c:	2801      	cmp	r0, #1
  puts ("8: Watchdog");
     41e:	4852      	ldr	r0, [pc, #328]	; (568 <main+0x21c>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0x7000          ) == 1 ) err_code |= 1<<7;
     420:	bf08      	it	eq
     422:	f044 0480 	orreq.w	r4, r4, #128	; 0x80
  puts ("8: Watchdog");
     426:	f000 f995 	bl	754 <puts>
    if ( ID_Check(&apb_watchdog_id[0],  CM3DS_MPS2_WATCHDOG_BASE ) == 1 ) err_code |= 1<<8;
     42a:	4950      	ldr	r1, [pc, #320]	; (56c <main+0x220>)
     42c:	4850      	ldr	r0, [pc, #320]	; (570 <main+0x224>)
     42e:	f7ff feeb 	bl	208 <ID_Check>
     432:	2801      	cmp	r0, #1
  puts ("9: blank");
     434:	484f      	ldr	r0, [pc, #316]	; (574 <main+0x228>)
    if ( ID_Check(&apb_watchdog_id[0],  CM3DS_MPS2_WATCHDOG_BASE ) == 1 ) err_code |= 1<<8;
     436:	bf08      	it	eq
     438:	f444 7480 	orreq.w	r4, r4, #256	; 0x100
  puts ("9: blank");
     43c:	f000 f98a 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0x9000          ) == 1 ) err_code |= 1<<9;
     440:	494d      	ldr	r1, [pc, #308]	; (578 <main+0x22c>)
     442:	483f      	ldr	r0, [pc, #252]	; (540 <main+0x1f4>)
     444:	f7ff fee0 	bl	208 <ID_Check>
     448:	2801      	cmp	r0, #1
  puts ("10: blank");
     44a:	484c      	ldr	r0, [pc, #304]	; (57c <main+0x230>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0x9000          ) == 1 ) err_code |= 1<<9;
     44c:	bf08      	it	eq
     44e:	f444 7400 	orreq.w	r4, r4, #512	; 0x200
  puts ("10: blank");
     452:	f000 f97f 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xA000          ) == 1 ) err_code |= 1<<10;
     456:	494a      	ldr	r1, [pc, #296]	; (580 <main+0x234>)
     458:	4839      	ldr	r0, [pc, #228]	; (540 <main+0x1f4>)
     45a:	f7ff fed5 	bl	208 <ID_Check>
     45e:	2801      	cmp	r0, #1
  puts ("11: blank");
     460:	4848      	ldr	r0, [pc, #288]	; (584 <main+0x238>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xA000          ) == 1 ) err_code |= 1<<10;
     462:	bf08      	it	eq
     464:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
  puts ("11: blank");
     468:	f000 f974 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xB000          ) == 1 ) err_code |= 1<<11;
     46c:	4946      	ldr	r1, [pc, #280]	; (588 <main+0x23c>)
     46e:	4834      	ldr	r0, [pc, #208]	; (540 <main+0x1f4>)
     470:	f7ff feca 	bl	208 <ID_Check>
     474:	2801      	cmp	r0, #1
  puts ("12: APB expansion port 12");
     476:	4845      	ldr	r0, [pc, #276]	; (58c <main+0x240>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xB000          ) == 1 ) err_code |= 1<<11;
     478:	bf08      	it	eq
     47a:	f444 6400 	orreq.w	r4, r4, #2048	; 0x800
  puts ("12: APB expansion port 12");
     47e:	f000 f969 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xC000          ) == 1 ) err_code |= 1<<12;
     482:	4943      	ldr	r1, [pc, #268]	; (590 <main+0x244>)
     484:	482e      	ldr	r0, [pc, #184]	; (540 <main+0x1f4>)
     486:	f7ff febf 	bl	208 <ID_Check>
     48a:	2801      	cmp	r0, #1
  puts ("13: APB expansion port 13");
     48c:	4841      	ldr	r0, [pc, #260]	; (594 <main+0x248>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xC000          ) == 1 ) err_code |= 1<<12;
     48e:	bf08      	it	eq
     490:	f444 5480 	orreq.w	r4, r4, #4096	; 0x1000
  puts ("13: APB expansion port 13");
     494:	f000 f95e 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xD000          ) == 1 ) err_code |= 1<<13;
     498:	493f      	ldr	r1, [pc, #252]	; (598 <main+0x24c>)
     49a:	4829      	ldr	r0, [pc, #164]	; (540 <main+0x1f4>)
     49c:	f7ff feb4 	bl	208 <ID_Check>
     4a0:	2801      	cmp	r0, #1
  puts ("14: APB expansion port 14");
     4a2:	483e      	ldr	r0, [pc, #248]	; (59c <main+0x250>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xD000          ) == 1 ) err_code |= 1<<13;
     4a4:	bf08      	it	eq
     4a6:	f444 5400 	orreq.w	r4, r4, #8192	; 0x2000
  puts ("14: APB expansion port 14");
     4aa:	f000 f953 	bl	754 <puts>
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xE000          ) == 1 ) err_code |= 1<<14;
     4ae:	493c      	ldr	r1, [pc, #240]	; (5a0 <main+0x254>)
     4b0:	4823      	ldr	r0, [pc, #140]	; (540 <main+0x1f4>)
     4b2:	f7ff fea9 	bl	208 <ID_Check>
     4b6:	2801      	cmp	r0, #1
  puts ("15: TRNG"); // read TRNG version register
     4b8:	483a      	ldr	r0, [pc, #232]	; (5a4 <main+0x258>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xE000          ) == 1 ) err_code |= 1<<14;
     4ba:	d018      	beq.n	4ee <main+0x1a2>
  puts ("15: TRNG"); // read TRNG version register
     4bc:	f000 f94a 	bl	754 <puts>
    if (HW32_REG(CM3DS_MPS2_APB_BASE+0xF1C0) != 0xf) {
     4c0:	4b39      	ldr	r3, [pc, #228]	; (5a8 <main+0x25c>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	2b0f      	cmp	r3, #15
     4c6:	d009      	beq.n	4dc <main+0x190>
      err_code |= 1<<15;
     4c8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
    printf ("\n** TEST FAILED **, Error code = (0x%x)\n", err_code);
     4cc:	4621      	mov	r1, r4
     4ce:	4837      	ldr	r0, [pc, #220]	; (5ac <main+0x260>)
     4d0:	f000 f8cc 	bl	66c <iprintf>
  UartEndSimulation();
     4d4:	f000 f896 	bl	604 <UartEndSimulation>
}
     4d8:	2000      	movs	r0, #0
     4da:	bd10      	pop	{r4, pc}
      puts ("  Version register matched   : device present\n");
     4dc:	4834      	ldr	r0, [pc, #208]	; (5b0 <main+0x264>)
     4de:	f000 f939 	bl	754 <puts>
  if (err_code==0) {
     4e2:	2c00      	cmp	r4, #0
     4e4:	d1f2      	bne.n	4cc <main+0x180>
    printf ("\n** TEST PASSED **\n");
     4e6:	4833      	ldr	r0, [pc, #204]	; (5b4 <main+0x268>)
     4e8:	f000 f934 	bl	754 <puts>
     4ec:	e7f2      	b.n	4d4 <main+0x188>
  puts ("15: TRNG"); // read TRNG version register
     4ee:	f000 f931 	bl	754 <puts>
    if (HW32_REG(CM3DS_MPS2_APB_BASE+0xF1C0) != 0xf) {
     4f2:	4b2d      	ldr	r3, [pc, #180]	; (5a8 <main+0x25c>)
    if ( ID_Check(&blank_id[0],         CM3DS_MPS2_APB_BASE+0xE000          ) == 1 ) err_code |= 1<<14;
     4f4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    if (HW32_REG(CM3DS_MPS2_APB_BASE+0xF1C0) != 0xf) {
     4f8:	681b      	ldr	r3, [r3, #0]
     4fa:	2b0f      	cmp	r3, #15
     4fc:	d1e4      	bne.n	4c8 <main+0x17c>
      puts ("  Version register matched   : device present\n");
     4fe:	482c      	ldr	r0, [pc, #176]	; (5b0 <main+0x264>)
     500:	f000 f928 	bl	754 <puts>
     504:	e7e2      	b.n	4cc <main+0x180>
     506:	bf00      	nop
     508:	000016bc 	.word	0x000016bc
     50c:	00001708 	.word	0x00001708
     510:	20000080 	.word	0x20000080
     514:	20000078 	.word	0x20000078
     518:	2000007c 	.word	0x2000007c
     51c:	00001740 	.word	0x00001740
     520:	00001584 	.word	0x00001584
     524:	0000174c 	.word	0x0000174c
     528:	40001000 	.word	0x40001000
     52c:	00001758 	.word	0x00001758
     530:	40002000 	.word	0x40002000
     534:	00001594 	.word	0x00001594
     538:	00001768 	.word	0x00001768
     53c:	40003000 	.word	0x40003000
     540:	000015a4 	.word	0x000015a4
     544:	00001774 	.word	0x00001774
     548:	000015b4 	.word	0x000015b4
     54c:	00001780 	.word	0x00001780
     550:	40005000 	.word	0x40005000
     554:	0000178c 	.word	0x0000178c
     558:	40006000 	.word	0x40006000
     55c:	000015c4 	.word	0x000015c4
     560:	00001794 	.word	0x00001794
     564:	40007000 	.word	0x40007000
     568:	000017a0 	.word	0x000017a0
     56c:	40008000 	.word	0x40008000
     570:	000015d4 	.word	0x000015d4
     574:	000017ac 	.word	0x000017ac
     578:	40009000 	.word	0x40009000
     57c:	000017b8 	.word	0x000017b8
     580:	4000a000 	.word	0x4000a000
     584:	000017c4 	.word	0x000017c4
     588:	4000b000 	.word	0x4000b000
     58c:	000017d0 	.word	0x000017d0
     590:	4000c000 	.word	0x4000c000
     594:	000017ec 	.word	0x000017ec
     598:	4000d000 	.word	0x4000d000
     59c:	00001808 	.word	0x00001808
     5a0:	4000e000 	.word	0x4000e000
     5a4:	00001824 	.word	0x00001824
     5a8:	4000f1c0 	.word	0x4000f1c0
     5ac:	00001874 	.word	0x00001874
     5b0:	00001830 	.word	0x00001830
     5b4:	00001860 	.word	0x00001860

000005b8 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     5b8:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     5ba:	4616      	mov	r6, r2
     5bc:	b13a      	cbz	r2, 5ce <_write+0x16>
     5be:	1e4c      	subs	r4, r1, #1
     5c0:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     5c2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     5c6:	f000 f80d 	bl	5e4 <UartPutc>
  for (i=0; i<len;i++) {
     5ca:	42ac      	cmp	r4, r5
     5cc:	d1f9      	bne.n	5c2 <_write+0xa>
    }
  return len;
}
     5ce:	4630      	mov	r0, r6
     5d0:	bd70      	pop	{r4, r5, r6, pc}
     5d2:	bf00      	nop

000005d4 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     5d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     5d8:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     5da:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     5dc:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     5de:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     5e0:	4770      	bx	lr
     5e2:	bf00      	nop

000005e4 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     5e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     5e8:	6853      	ldr	r3, [r2, #4]
     5ea:	07db      	lsls	r3, r3, #31
     5ec:	d4fc      	bmi.n	5e8 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     5ee:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop

000005f4 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     5f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     5f8:	6853      	ldr	r3, [r2, #4]
     5fa:	079b      	lsls	r3, r3, #30
     5fc:	d5fc      	bpl.n	5f8 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     5fe:	6810      	ldr	r0, [r2, #0]
}
     600:	b2c0      	uxtb	r0, r0
     602:	4770      	bx	lr

00000604 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     608:	685a      	ldr	r2, [r3, #4]
     60a:	07d2      	lsls	r2, r2, #31
     60c:	d4fc      	bmi.n	608 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     60e:	2204      	movs	r2, #4
     610:	601a      	str	r2, [r3, #0]
     612:	e7fe      	b.n	612 <UartEndSimulation+0xe>

00000614 <SystemCoreClockUpdate>:
     614:	4b01      	ldr	r3, [pc, #4]	; (61c <SystemCoreClockUpdate+0x8>)
     616:	4a02      	ldr	r2, [pc, #8]	; (620 <SystemCoreClockUpdate+0xc>)
     618:	601a      	str	r2, [r3, #0]
     61a:	4770      	bx	lr
     61c:	20000000 	.word	0x20000000
     620:	017d7840 	.word	0x017d7840

00000624 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
     624:	4b01      	ldr	r3, [pc, #4]	; (62c <SystemInit+0x8>)
     626:	4a02      	ldr	r2, [pc, #8]	; (630 <SystemInit+0xc>)
     628:	601a      	str	r2, [r3, #0]

}
     62a:	4770      	bx	lr
     62c:	20000000 	.word	0x20000000
     630:	017d7840 	.word	0x017d7840

00000634 <exit>:
     634:	b508      	push	{r3, lr}
     636:	4b07      	ldr	r3, [pc, #28]	; (654 <exit+0x20>)
     638:	4604      	mov	r4, r0
     63a:	b113      	cbz	r3, 642 <exit+0xe>
     63c:	2100      	movs	r1, #0
     63e:	f3af 8000 	nop.w
     642:	4b05      	ldr	r3, [pc, #20]	; (658 <exit+0x24>)
     644:	6818      	ldr	r0, [r3, #0]
     646:	6a83      	ldr	r3, [r0, #40]	; 0x28
     648:	b103      	cbz	r3, 64c <exit+0x18>
     64a:	4798      	blx	r3
     64c:	4620      	mov	r0, r4
     64e:	f000 ff93 	bl	1578 <_exit>
     652:	bf00      	nop
     654:	00000000 	.word	0x00000000
     658:	0000191c 	.word	0x0000191c

0000065c <memset>:
     65c:	4603      	mov	r3, r0
     65e:	4402      	add	r2, r0
     660:	4293      	cmp	r3, r2
     662:	d100      	bne.n	666 <memset+0xa>
     664:	4770      	bx	lr
     666:	f803 1b01 	strb.w	r1, [r3], #1
     66a:	e7f9      	b.n	660 <memset+0x4>

0000066c <iprintf>:
     66c:	b40f      	push	{r0, r1, r2, r3}
     66e:	4b0a      	ldr	r3, [pc, #40]	; (698 <iprintf+0x2c>)
     670:	b513      	push	{r0, r1, r4, lr}
     672:	681c      	ldr	r4, [r3, #0]
     674:	b124      	cbz	r4, 680 <iprintf+0x14>
     676:	69a3      	ldr	r3, [r4, #24]
     678:	b913      	cbnz	r3, 680 <iprintf+0x14>
     67a:	4620      	mov	r0, r4
     67c:	f000 fa22 	bl	ac4 <__sinit>
     680:	ab05      	add	r3, sp, #20
     682:	9a04      	ldr	r2, [sp, #16]
     684:	68a1      	ldr	r1, [r4, #8]
     686:	4620      	mov	r0, r4
     688:	9301      	str	r3, [sp, #4]
     68a:	f000 fbd7 	bl	e3c <_vfiprintf_r>
     68e:	b002      	add	sp, #8
     690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     694:	b004      	add	sp, #16
     696:	4770      	bx	lr
     698:	20000004 	.word	0x20000004

0000069c <_puts_r>:
     69c:	b570      	push	{r4, r5, r6, lr}
     69e:	460e      	mov	r6, r1
     6a0:	4605      	mov	r5, r0
     6a2:	b118      	cbz	r0, 6ac <_puts_r+0x10>
     6a4:	6983      	ldr	r3, [r0, #24]
     6a6:	b90b      	cbnz	r3, 6ac <_puts_r+0x10>
     6a8:	f000 fa0c 	bl	ac4 <__sinit>
     6ac:	69ab      	ldr	r3, [r5, #24]
     6ae:	68ac      	ldr	r4, [r5, #8]
     6b0:	b913      	cbnz	r3, 6b8 <_puts_r+0x1c>
     6b2:	4628      	mov	r0, r5
     6b4:	f000 fa06 	bl	ac4 <__sinit>
     6b8:	4b23      	ldr	r3, [pc, #140]	; (748 <_puts_r+0xac>)
     6ba:	429c      	cmp	r4, r3
     6bc:	d117      	bne.n	6ee <_puts_r+0x52>
     6be:	686c      	ldr	r4, [r5, #4]
     6c0:	89a3      	ldrh	r3, [r4, #12]
     6c2:	071b      	lsls	r3, r3, #28
     6c4:	d51d      	bpl.n	702 <_puts_r+0x66>
     6c6:	6923      	ldr	r3, [r4, #16]
     6c8:	b1db      	cbz	r3, 702 <_puts_r+0x66>
     6ca:	3e01      	subs	r6, #1
     6cc:	68a3      	ldr	r3, [r4, #8]
     6ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     6d2:	3b01      	subs	r3, #1
     6d4:	60a3      	str	r3, [r4, #8]
     6d6:	b9e9      	cbnz	r1, 714 <_puts_r+0x78>
     6d8:	2b00      	cmp	r3, #0
     6da:	da2e      	bge.n	73a <_puts_r+0x9e>
     6dc:	4622      	mov	r2, r4
     6de:	210a      	movs	r1, #10
     6e0:	4628      	mov	r0, r5
     6e2:	f000 f83f 	bl	764 <__swbuf_r>
     6e6:	3001      	adds	r0, #1
     6e8:	d011      	beq.n	70e <_puts_r+0x72>
     6ea:	200a      	movs	r0, #10
     6ec:	e011      	b.n	712 <_puts_r+0x76>
     6ee:	4b17      	ldr	r3, [pc, #92]	; (74c <_puts_r+0xb0>)
     6f0:	429c      	cmp	r4, r3
     6f2:	d101      	bne.n	6f8 <_puts_r+0x5c>
     6f4:	68ac      	ldr	r4, [r5, #8]
     6f6:	e7e3      	b.n	6c0 <_puts_r+0x24>
     6f8:	4b15      	ldr	r3, [pc, #84]	; (750 <_puts_r+0xb4>)
     6fa:	429c      	cmp	r4, r3
     6fc:	bf08      	it	eq
     6fe:	68ec      	ldreq	r4, [r5, #12]
     700:	e7de      	b.n	6c0 <_puts_r+0x24>
     702:	4621      	mov	r1, r4
     704:	4628      	mov	r0, r5
     706:	f000 f87f 	bl	808 <__swsetup_r>
     70a:	2800      	cmp	r0, #0
     70c:	d0dd      	beq.n	6ca <_puts_r+0x2e>
     70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     712:	bd70      	pop	{r4, r5, r6, pc}
     714:	2b00      	cmp	r3, #0
     716:	da04      	bge.n	722 <_puts_r+0x86>
     718:	69a2      	ldr	r2, [r4, #24]
     71a:	429a      	cmp	r2, r3
     71c:	dc06      	bgt.n	72c <_puts_r+0x90>
     71e:	290a      	cmp	r1, #10
     720:	d004      	beq.n	72c <_puts_r+0x90>
     722:	6823      	ldr	r3, [r4, #0]
     724:	1c5a      	adds	r2, r3, #1
     726:	6022      	str	r2, [r4, #0]
     728:	7019      	strb	r1, [r3, #0]
     72a:	e7cf      	b.n	6cc <_puts_r+0x30>
     72c:	4622      	mov	r2, r4
     72e:	4628      	mov	r0, r5
     730:	f000 f818 	bl	764 <__swbuf_r>
     734:	3001      	adds	r0, #1
     736:	d1c9      	bne.n	6cc <_puts_r+0x30>
     738:	e7e9      	b.n	70e <_puts_r+0x72>
     73a:	200a      	movs	r0, #10
     73c:	6823      	ldr	r3, [r4, #0]
     73e:	1c5a      	adds	r2, r3, #1
     740:	6022      	str	r2, [r4, #0]
     742:	7018      	strb	r0, [r3, #0]
     744:	e7e5      	b.n	712 <_puts_r+0x76>
     746:	bf00      	nop
     748:	00001940 	.word	0x00001940
     74c:	00001960 	.word	0x00001960
     750:	00001920 	.word	0x00001920

00000754 <puts>:
     754:	4b02      	ldr	r3, [pc, #8]	; (760 <puts+0xc>)
     756:	4601      	mov	r1, r0
     758:	6818      	ldr	r0, [r3, #0]
     75a:	f7ff bf9f 	b.w	69c <_puts_r>
     75e:	bf00      	nop
     760:	20000004 	.word	0x20000004

00000764 <__swbuf_r>:
     764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     766:	460e      	mov	r6, r1
     768:	4614      	mov	r4, r2
     76a:	4605      	mov	r5, r0
     76c:	b118      	cbz	r0, 776 <__swbuf_r+0x12>
     76e:	6983      	ldr	r3, [r0, #24]
     770:	b90b      	cbnz	r3, 776 <__swbuf_r+0x12>
     772:	f000 f9a7 	bl	ac4 <__sinit>
     776:	4b21      	ldr	r3, [pc, #132]	; (7fc <__swbuf_r+0x98>)
     778:	429c      	cmp	r4, r3
     77a:	d12a      	bne.n	7d2 <__swbuf_r+0x6e>
     77c:	686c      	ldr	r4, [r5, #4]
     77e:	69a3      	ldr	r3, [r4, #24]
     780:	60a3      	str	r3, [r4, #8]
     782:	89a3      	ldrh	r3, [r4, #12]
     784:	071a      	lsls	r2, r3, #28
     786:	d52e      	bpl.n	7e6 <__swbuf_r+0x82>
     788:	6923      	ldr	r3, [r4, #16]
     78a:	b363      	cbz	r3, 7e6 <__swbuf_r+0x82>
     78c:	6923      	ldr	r3, [r4, #16]
     78e:	6820      	ldr	r0, [r4, #0]
     790:	b2f6      	uxtb	r6, r6
     792:	1ac0      	subs	r0, r0, r3
     794:	6963      	ldr	r3, [r4, #20]
     796:	4637      	mov	r7, r6
     798:	4283      	cmp	r3, r0
     79a:	dc04      	bgt.n	7a6 <__swbuf_r+0x42>
     79c:	4621      	mov	r1, r4
     79e:	4628      	mov	r0, r5
     7a0:	f000 f926 	bl	9f0 <_fflush_r>
     7a4:	bb28      	cbnz	r0, 7f2 <__swbuf_r+0x8e>
     7a6:	68a3      	ldr	r3, [r4, #8]
     7a8:	3001      	adds	r0, #1
     7aa:	3b01      	subs	r3, #1
     7ac:	60a3      	str	r3, [r4, #8]
     7ae:	6823      	ldr	r3, [r4, #0]
     7b0:	1c5a      	adds	r2, r3, #1
     7b2:	6022      	str	r2, [r4, #0]
     7b4:	701e      	strb	r6, [r3, #0]
     7b6:	6963      	ldr	r3, [r4, #20]
     7b8:	4283      	cmp	r3, r0
     7ba:	d004      	beq.n	7c6 <__swbuf_r+0x62>
     7bc:	89a3      	ldrh	r3, [r4, #12]
     7be:	07db      	lsls	r3, r3, #31
     7c0:	d519      	bpl.n	7f6 <__swbuf_r+0x92>
     7c2:	2e0a      	cmp	r6, #10
     7c4:	d117      	bne.n	7f6 <__swbuf_r+0x92>
     7c6:	4621      	mov	r1, r4
     7c8:	4628      	mov	r0, r5
     7ca:	f000 f911 	bl	9f0 <_fflush_r>
     7ce:	b190      	cbz	r0, 7f6 <__swbuf_r+0x92>
     7d0:	e00f      	b.n	7f2 <__swbuf_r+0x8e>
     7d2:	4b0b      	ldr	r3, [pc, #44]	; (800 <__swbuf_r+0x9c>)
     7d4:	429c      	cmp	r4, r3
     7d6:	d101      	bne.n	7dc <__swbuf_r+0x78>
     7d8:	68ac      	ldr	r4, [r5, #8]
     7da:	e7d0      	b.n	77e <__swbuf_r+0x1a>
     7dc:	4b09      	ldr	r3, [pc, #36]	; (804 <__swbuf_r+0xa0>)
     7de:	429c      	cmp	r4, r3
     7e0:	bf08      	it	eq
     7e2:	68ec      	ldreq	r4, [r5, #12]
     7e4:	e7cb      	b.n	77e <__swbuf_r+0x1a>
     7e6:	4621      	mov	r1, r4
     7e8:	4628      	mov	r0, r5
     7ea:	f000 f80d 	bl	808 <__swsetup_r>
     7ee:	2800      	cmp	r0, #0
     7f0:	d0cc      	beq.n	78c <__swbuf_r+0x28>
     7f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     7f6:	4638      	mov	r0, r7
     7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7fa:	bf00      	nop
     7fc:	00001940 	.word	0x00001940
     800:	00001960 	.word	0x00001960
     804:	00001920 	.word	0x00001920

00000808 <__swsetup_r>:
     808:	4b32      	ldr	r3, [pc, #200]	; (8d4 <__swsetup_r+0xcc>)
     80a:	b570      	push	{r4, r5, r6, lr}
     80c:	681d      	ldr	r5, [r3, #0]
     80e:	4606      	mov	r6, r0
     810:	460c      	mov	r4, r1
     812:	b125      	cbz	r5, 81e <__swsetup_r+0x16>
     814:	69ab      	ldr	r3, [r5, #24]
     816:	b913      	cbnz	r3, 81e <__swsetup_r+0x16>
     818:	4628      	mov	r0, r5
     81a:	f000 f953 	bl	ac4 <__sinit>
     81e:	4b2e      	ldr	r3, [pc, #184]	; (8d8 <__swsetup_r+0xd0>)
     820:	429c      	cmp	r4, r3
     822:	d10f      	bne.n	844 <__swsetup_r+0x3c>
     824:	686c      	ldr	r4, [r5, #4]
     826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     82a:	b29a      	uxth	r2, r3
     82c:	0715      	lsls	r5, r2, #28
     82e:	d42c      	bmi.n	88a <__swsetup_r+0x82>
     830:	06d0      	lsls	r0, r2, #27
     832:	d411      	bmi.n	858 <__swsetup_r+0x50>
     834:	2209      	movs	r2, #9
     836:	6032      	str	r2, [r6, #0]
     838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     83c:	81a3      	strh	r3, [r4, #12]
     83e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     842:	e03e      	b.n	8c2 <__swsetup_r+0xba>
     844:	4b25      	ldr	r3, [pc, #148]	; (8dc <__swsetup_r+0xd4>)
     846:	429c      	cmp	r4, r3
     848:	d101      	bne.n	84e <__swsetup_r+0x46>
     84a:	68ac      	ldr	r4, [r5, #8]
     84c:	e7eb      	b.n	826 <__swsetup_r+0x1e>
     84e:	4b24      	ldr	r3, [pc, #144]	; (8e0 <__swsetup_r+0xd8>)
     850:	429c      	cmp	r4, r3
     852:	bf08      	it	eq
     854:	68ec      	ldreq	r4, [r5, #12]
     856:	e7e6      	b.n	826 <__swsetup_r+0x1e>
     858:	0751      	lsls	r1, r2, #29
     85a:	d512      	bpl.n	882 <__swsetup_r+0x7a>
     85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
     85e:	b141      	cbz	r1, 872 <__swsetup_r+0x6a>
     860:	f104 0344 	add.w	r3, r4, #68	; 0x44
     864:	4299      	cmp	r1, r3
     866:	d002      	beq.n	86e <__swsetup_r+0x66>
     868:	4630      	mov	r0, r6
     86a:	f000 fa19 	bl	ca0 <_free_r>
     86e:	2300      	movs	r3, #0
     870:	6363      	str	r3, [r4, #52]	; 0x34
     872:	89a3      	ldrh	r3, [r4, #12]
     874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
     878:	81a3      	strh	r3, [r4, #12]
     87a:	2300      	movs	r3, #0
     87c:	6063      	str	r3, [r4, #4]
     87e:	6923      	ldr	r3, [r4, #16]
     880:	6023      	str	r3, [r4, #0]
     882:	89a3      	ldrh	r3, [r4, #12]
     884:	f043 0308 	orr.w	r3, r3, #8
     888:	81a3      	strh	r3, [r4, #12]
     88a:	6923      	ldr	r3, [r4, #16]
     88c:	b94b      	cbnz	r3, 8a2 <__swsetup_r+0x9a>
     88e:	89a3      	ldrh	r3, [r4, #12]
     890:	f403 7320 	and.w	r3, r3, #640	; 0x280
     894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     898:	d003      	beq.n	8a2 <__swsetup_r+0x9a>
     89a:	4621      	mov	r1, r4
     89c:	4630      	mov	r0, r6
     89e:	f000 f9bf 	bl	c20 <__smakebuf_r>
     8a2:	89a2      	ldrh	r2, [r4, #12]
     8a4:	f012 0301 	ands.w	r3, r2, #1
     8a8:	d00c      	beq.n	8c4 <__swsetup_r+0xbc>
     8aa:	2300      	movs	r3, #0
     8ac:	60a3      	str	r3, [r4, #8]
     8ae:	6963      	ldr	r3, [r4, #20]
     8b0:	425b      	negs	r3, r3
     8b2:	61a3      	str	r3, [r4, #24]
     8b4:	6923      	ldr	r3, [r4, #16]
     8b6:	b953      	cbnz	r3, 8ce <__swsetup_r+0xc6>
     8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     8bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
     8c0:	d1ba      	bne.n	838 <__swsetup_r+0x30>
     8c2:	bd70      	pop	{r4, r5, r6, pc}
     8c4:	0792      	lsls	r2, r2, #30
     8c6:	bf58      	it	pl
     8c8:	6963      	ldrpl	r3, [r4, #20]
     8ca:	60a3      	str	r3, [r4, #8]
     8cc:	e7f2      	b.n	8b4 <__swsetup_r+0xac>
     8ce:	2000      	movs	r0, #0
     8d0:	e7f7      	b.n	8c2 <__swsetup_r+0xba>
     8d2:	bf00      	nop
     8d4:	20000004 	.word	0x20000004
     8d8:	00001940 	.word	0x00001940
     8dc:	00001960 	.word	0x00001960
     8e0:	00001920 	.word	0x00001920

000008e4 <__sflush_r>:
     8e4:	898a      	ldrh	r2, [r1, #12]
     8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8ea:	4605      	mov	r5, r0
     8ec:	0710      	lsls	r0, r2, #28
     8ee:	460c      	mov	r4, r1
     8f0:	d458      	bmi.n	9a4 <__sflush_r+0xc0>
     8f2:	684b      	ldr	r3, [r1, #4]
     8f4:	2b00      	cmp	r3, #0
     8f6:	dc05      	bgt.n	904 <__sflush_r+0x20>
     8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     8fa:	2b00      	cmp	r3, #0
     8fc:	dc02      	bgt.n	904 <__sflush_r+0x20>
     8fe:	2000      	movs	r0, #0
     900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
     906:	2e00      	cmp	r6, #0
     908:	d0f9      	beq.n	8fe <__sflush_r+0x1a>
     90a:	2300      	movs	r3, #0
     90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
     910:	682f      	ldr	r7, [r5, #0]
     912:	6a21      	ldr	r1, [r4, #32]
     914:	602b      	str	r3, [r5, #0]
     916:	d032      	beq.n	97e <__sflush_r+0x9a>
     918:	6d60      	ldr	r0, [r4, #84]	; 0x54
     91a:	89a3      	ldrh	r3, [r4, #12]
     91c:	075a      	lsls	r2, r3, #29
     91e:	d505      	bpl.n	92c <__sflush_r+0x48>
     920:	6863      	ldr	r3, [r4, #4]
     922:	1ac0      	subs	r0, r0, r3
     924:	6b63      	ldr	r3, [r4, #52]	; 0x34
     926:	b10b      	cbz	r3, 92c <__sflush_r+0x48>
     928:	6c23      	ldr	r3, [r4, #64]	; 0x40
     92a:	1ac0      	subs	r0, r0, r3
     92c:	2300      	movs	r3, #0
     92e:	4602      	mov	r2, r0
     930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
     932:	6a21      	ldr	r1, [r4, #32]
     934:	4628      	mov	r0, r5
     936:	47b0      	blx	r6
     938:	1c43      	adds	r3, r0, #1
     93a:	89a3      	ldrh	r3, [r4, #12]
     93c:	d106      	bne.n	94c <__sflush_r+0x68>
     93e:	6829      	ldr	r1, [r5, #0]
     940:	291d      	cmp	r1, #29
     942:	d848      	bhi.n	9d6 <__sflush_r+0xf2>
     944:	4a29      	ldr	r2, [pc, #164]	; (9ec <__sflush_r+0x108>)
     946:	40ca      	lsrs	r2, r1
     948:	07d6      	lsls	r6, r2, #31
     94a:	d544      	bpl.n	9d6 <__sflush_r+0xf2>
     94c:	2200      	movs	r2, #0
     94e:	6062      	str	r2, [r4, #4]
     950:	6922      	ldr	r2, [r4, #16]
     952:	04d9      	lsls	r1, r3, #19
     954:	6022      	str	r2, [r4, #0]
     956:	d504      	bpl.n	962 <__sflush_r+0x7e>
     958:	1c42      	adds	r2, r0, #1
     95a:	d101      	bne.n	960 <__sflush_r+0x7c>
     95c:	682b      	ldr	r3, [r5, #0]
     95e:	b903      	cbnz	r3, 962 <__sflush_r+0x7e>
     960:	6560      	str	r0, [r4, #84]	; 0x54
     962:	6b61      	ldr	r1, [r4, #52]	; 0x34
     964:	602f      	str	r7, [r5, #0]
     966:	2900      	cmp	r1, #0
     968:	d0c9      	beq.n	8fe <__sflush_r+0x1a>
     96a:	f104 0344 	add.w	r3, r4, #68	; 0x44
     96e:	4299      	cmp	r1, r3
     970:	d002      	beq.n	978 <__sflush_r+0x94>
     972:	4628      	mov	r0, r5
     974:	f000 f994 	bl	ca0 <_free_r>
     978:	2000      	movs	r0, #0
     97a:	6360      	str	r0, [r4, #52]	; 0x34
     97c:	e7c0      	b.n	900 <__sflush_r+0x1c>
     97e:	2301      	movs	r3, #1
     980:	4628      	mov	r0, r5
     982:	47b0      	blx	r6
     984:	1c41      	adds	r1, r0, #1
     986:	d1c8      	bne.n	91a <__sflush_r+0x36>
     988:	682b      	ldr	r3, [r5, #0]
     98a:	2b00      	cmp	r3, #0
     98c:	d0c5      	beq.n	91a <__sflush_r+0x36>
     98e:	2b1d      	cmp	r3, #29
     990:	d001      	beq.n	996 <__sflush_r+0xb2>
     992:	2b16      	cmp	r3, #22
     994:	d101      	bne.n	99a <__sflush_r+0xb6>
     996:	602f      	str	r7, [r5, #0]
     998:	e7b1      	b.n	8fe <__sflush_r+0x1a>
     99a:	89a3      	ldrh	r3, [r4, #12]
     99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9a0:	81a3      	strh	r3, [r4, #12]
     9a2:	e7ad      	b.n	900 <__sflush_r+0x1c>
     9a4:	690f      	ldr	r7, [r1, #16]
     9a6:	2f00      	cmp	r7, #0
     9a8:	d0a9      	beq.n	8fe <__sflush_r+0x1a>
     9aa:	0793      	lsls	r3, r2, #30
     9ac:	bf18      	it	ne
     9ae:	2300      	movne	r3, #0
     9b0:	680e      	ldr	r6, [r1, #0]
     9b2:	bf08      	it	eq
     9b4:	694b      	ldreq	r3, [r1, #20]
     9b6:	eba6 0807 	sub.w	r8, r6, r7
     9ba:	600f      	str	r7, [r1, #0]
     9bc:	608b      	str	r3, [r1, #8]
     9be:	f1b8 0f00 	cmp.w	r8, #0
     9c2:	dd9c      	ble.n	8fe <__sflush_r+0x1a>
     9c4:	4643      	mov	r3, r8
     9c6:	463a      	mov	r2, r7
     9c8:	6a21      	ldr	r1, [r4, #32]
     9ca:	4628      	mov	r0, r5
     9cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
     9ce:	47b0      	blx	r6
     9d0:	2800      	cmp	r0, #0
     9d2:	dc06      	bgt.n	9e2 <__sflush_r+0xfe>
     9d4:	89a3      	ldrh	r3, [r4, #12]
     9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9da:	81a3      	strh	r3, [r4, #12]
     9dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9e0:	e78e      	b.n	900 <__sflush_r+0x1c>
     9e2:	4407      	add	r7, r0
     9e4:	eba8 0800 	sub.w	r8, r8, r0
     9e8:	e7e9      	b.n	9be <__sflush_r+0xda>
     9ea:	bf00      	nop
     9ec:	20400001 	.word	0x20400001

000009f0 <_fflush_r>:
     9f0:	b538      	push	{r3, r4, r5, lr}
     9f2:	690b      	ldr	r3, [r1, #16]
     9f4:	4605      	mov	r5, r0
     9f6:	460c      	mov	r4, r1
     9f8:	b1db      	cbz	r3, a32 <_fflush_r+0x42>
     9fa:	b118      	cbz	r0, a04 <_fflush_r+0x14>
     9fc:	6983      	ldr	r3, [r0, #24]
     9fe:	b90b      	cbnz	r3, a04 <_fflush_r+0x14>
     a00:	f000 f860 	bl	ac4 <__sinit>
     a04:	4b0c      	ldr	r3, [pc, #48]	; (a38 <_fflush_r+0x48>)
     a06:	429c      	cmp	r4, r3
     a08:	d109      	bne.n	a1e <_fflush_r+0x2e>
     a0a:	686c      	ldr	r4, [r5, #4]
     a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     a10:	b17b      	cbz	r3, a32 <_fflush_r+0x42>
     a12:	4621      	mov	r1, r4
     a14:	4628      	mov	r0, r5
     a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     a1a:	f7ff bf63 	b.w	8e4 <__sflush_r>
     a1e:	4b07      	ldr	r3, [pc, #28]	; (a3c <_fflush_r+0x4c>)
     a20:	429c      	cmp	r4, r3
     a22:	d101      	bne.n	a28 <_fflush_r+0x38>
     a24:	68ac      	ldr	r4, [r5, #8]
     a26:	e7f1      	b.n	a0c <_fflush_r+0x1c>
     a28:	4b05      	ldr	r3, [pc, #20]	; (a40 <_fflush_r+0x50>)
     a2a:	429c      	cmp	r4, r3
     a2c:	bf08      	it	eq
     a2e:	68ec      	ldreq	r4, [r5, #12]
     a30:	e7ec      	b.n	a0c <_fflush_r+0x1c>
     a32:	2000      	movs	r0, #0
     a34:	bd38      	pop	{r3, r4, r5, pc}
     a36:	bf00      	nop
     a38:	00001940 	.word	0x00001940
     a3c:	00001960 	.word	0x00001960
     a40:	00001920 	.word	0x00001920

00000a44 <std>:
     a44:	2300      	movs	r3, #0
     a46:	b510      	push	{r4, lr}
     a48:	4604      	mov	r4, r0
     a4a:	e9c0 3300 	strd	r3, r3, [r0]
     a4e:	6083      	str	r3, [r0, #8]
     a50:	8181      	strh	r1, [r0, #12]
     a52:	6643      	str	r3, [r0, #100]	; 0x64
     a54:	81c2      	strh	r2, [r0, #14]
     a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
     a5a:	6183      	str	r3, [r0, #24]
     a5c:	4619      	mov	r1, r3
     a5e:	2208      	movs	r2, #8
     a60:	305c      	adds	r0, #92	; 0x5c
     a62:	f7ff fdfb 	bl	65c <memset>
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <std+0x38>)
     a68:	6224      	str	r4, [r4, #32]
     a6a:	6263      	str	r3, [r4, #36]	; 0x24
     a6c:	4b04      	ldr	r3, [pc, #16]	; (a80 <std+0x3c>)
     a6e:	62a3      	str	r3, [r4, #40]	; 0x28
     a70:	4b04      	ldr	r3, [pc, #16]	; (a84 <std+0x40>)
     a72:	62e3      	str	r3, [r4, #44]	; 0x2c
     a74:	4b04      	ldr	r3, [pc, #16]	; (a88 <std+0x44>)
     a76:	6323      	str	r3, [r4, #48]	; 0x30
     a78:	bd10      	pop	{r4, pc}
     a7a:	bf00      	nop
     a7c:	00001395 	.word	0x00001395
     a80:	000013b7 	.word	0x000013b7
     a84:	000013ef 	.word	0x000013ef
     a88:	00001413 	.word	0x00001413

00000a8c <_cleanup_r>:
     a8c:	4901      	ldr	r1, [pc, #4]	; (a94 <_cleanup_r+0x8>)
     a8e:	f000 b885 	b.w	b9c <_fwalk_reent>
     a92:	bf00      	nop
     a94:	000009f1 	.word	0x000009f1

00000a98 <__sfmoreglue>:
     a98:	b570      	push	{r4, r5, r6, lr}
     a9a:	2568      	movs	r5, #104	; 0x68
     a9c:	1e4a      	subs	r2, r1, #1
     a9e:	4355      	muls	r5, r2
     aa0:	460e      	mov	r6, r1
     aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
     aa6:	f000 f947 	bl	d38 <_malloc_r>
     aaa:	4604      	mov	r4, r0
     aac:	b140      	cbz	r0, ac0 <__sfmoreglue+0x28>
     aae:	2100      	movs	r1, #0
     ab0:	e9c0 1600 	strd	r1, r6, [r0]
     ab4:	300c      	adds	r0, #12
     ab6:	60a0      	str	r0, [r4, #8]
     ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
     abc:	f7ff fdce 	bl	65c <memset>
     ac0:	4620      	mov	r0, r4
     ac2:	bd70      	pop	{r4, r5, r6, pc}

00000ac4 <__sinit>:
     ac4:	6983      	ldr	r3, [r0, #24]
     ac6:	b510      	push	{r4, lr}
     ac8:	4604      	mov	r4, r0
     aca:	bb33      	cbnz	r3, b1a <__sinit+0x56>
     acc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
     ad0:	6503      	str	r3, [r0, #80]	; 0x50
     ad2:	4b12      	ldr	r3, [pc, #72]	; (b1c <__sinit+0x58>)
     ad4:	4a12      	ldr	r2, [pc, #72]	; (b20 <__sinit+0x5c>)
     ad6:	681b      	ldr	r3, [r3, #0]
     ad8:	6282      	str	r2, [r0, #40]	; 0x28
     ada:	4298      	cmp	r0, r3
     adc:	bf04      	itt	eq
     ade:	2301      	moveq	r3, #1
     ae0:	6183      	streq	r3, [r0, #24]
     ae2:	f000 f81f 	bl	b24 <__sfp>
     ae6:	6060      	str	r0, [r4, #4]
     ae8:	4620      	mov	r0, r4
     aea:	f000 f81b 	bl	b24 <__sfp>
     aee:	60a0      	str	r0, [r4, #8]
     af0:	4620      	mov	r0, r4
     af2:	f000 f817 	bl	b24 <__sfp>
     af6:	2200      	movs	r2, #0
     af8:	60e0      	str	r0, [r4, #12]
     afa:	2104      	movs	r1, #4
     afc:	6860      	ldr	r0, [r4, #4]
     afe:	f7ff ffa1 	bl	a44 <std>
     b02:	2201      	movs	r2, #1
     b04:	2109      	movs	r1, #9
     b06:	68a0      	ldr	r0, [r4, #8]
     b08:	f7ff ff9c 	bl	a44 <std>
     b0c:	2202      	movs	r2, #2
     b0e:	2112      	movs	r1, #18
     b10:	68e0      	ldr	r0, [r4, #12]
     b12:	f7ff ff97 	bl	a44 <std>
     b16:	2301      	movs	r3, #1
     b18:	61a3      	str	r3, [r4, #24]
     b1a:	bd10      	pop	{r4, pc}
     b1c:	0000191c 	.word	0x0000191c
     b20:	00000a8d 	.word	0x00000a8d

00000b24 <__sfp>:
     b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b26:	4b1b      	ldr	r3, [pc, #108]	; (b94 <__sfp+0x70>)
     b28:	4607      	mov	r7, r0
     b2a:	681e      	ldr	r6, [r3, #0]
     b2c:	69b3      	ldr	r3, [r6, #24]
     b2e:	b913      	cbnz	r3, b36 <__sfp+0x12>
     b30:	4630      	mov	r0, r6
     b32:	f7ff ffc7 	bl	ac4 <__sinit>
     b36:	3648      	adds	r6, #72	; 0x48
     b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
     b3c:	3b01      	subs	r3, #1
     b3e:	d503      	bpl.n	b48 <__sfp+0x24>
     b40:	6833      	ldr	r3, [r6, #0]
     b42:	b133      	cbz	r3, b52 <__sfp+0x2e>
     b44:	6836      	ldr	r6, [r6, #0]
     b46:	e7f7      	b.n	b38 <__sfp+0x14>
     b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
     b4c:	b16d      	cbz	r5, b6a <__sfp+0x46>
     b4e:	3468      	adds	r4, #104	; 0x68
     b50:	e7f4      	b.n	b3c <__sfp+0x18>
     b52:	2104      	movs	r1, #4
     b54:	4638      	mov	r0, r7
     b56:	f7ff ff9f 	bl	a98 <__sfmoreglue>
     b5a:	6030      	str	r0, [r6, #0]
     b5c:	2800      	cmp	r0, #0
     b5e:	d1f1      	bne.n	b44 <__sfp+0x20>
     b60:	230c      	movs	r3, #12
     b62:	4604      	mov	r4, r0
     b64:	603b      	str	r3, [r7, #0]
     b66:	4620      	mov	r0, r4
     b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b6a:	4b0b      	ldr	r3, [pc, #44]	; (b98 <__sfp+0x74>)
     b6c:	6665      	str	r5, [r4, #100]	; 0x64
     b6e:	e9c4 5500 	strd	r5, r5, [r4]
     b72:	60a5      	str	r5, [r4, #8]
     b74:	e9c4 3503 	strd	r3, r5, [r4, #12]
     b78:	e9c4 5505 	strd	r5, r5, [r4, #20]
     b7c:	2208      	movs	r2, #8
     b7e:	4629      	mov	r1, r5
     b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
     b84:	f7ff fd6a 	bl	65c <memset>
     b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
     b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
     b90:	e7e9      	b.n	b66 <__sfp+0x42>
     b92:	bf00      	nop
     b94:	0000191c 	.word	0x0000191c
     b98:	ffff0001 	.word	0xffff0001

00000b9c <_fwalk_reent>:
     b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ba0:	4680      	mov	r8, r0
     ba2:	4689      	mov	r9, r1
     ba4:	2600      	movs	r6, #0
     ba6:	f100 0448 	add.w	r4, r0, #72	; 0x48
     baa:	b914      	cbnz	r4, bb2 <_fwalk_reent+0x16>
     bac:	4630      	mov	r0, r6
     bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     bb2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
     bb6:	3f01      	subs	r7, #1
     bb8:	d501      	bpl.n	bbe <_fwalk_reent+0x22>
     bba:	6824      	ldr	r4, [r4, #0]
     bbc:	e7f5      	b.n	baa <_fwalk_reent+0xe>
     bbe:	89ab      	ldrh	r3, [r5, #12]
     bc0:	2b01      	cmp	r3, #1
     bc2:	d907      	bls.n	bd4 <_fwalk_reent+0x38>
     bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
     bc8:	3301      	adds	r3, #1
     bca:	d003      	beq.n	bd4 <_fwalk_reent+0x38>
     bcc:	4629      	mov	r1, r5
     bce:	4640      	mov	r0, r8
     bd0:	47c8      	blx	r9
     bd2:	4306      	orrs	r6, r0
     bd4:	3568      	adds	r5, #104	; 0x68
     bd6:	e7ee      	b.n	bb6 <_fwalk_reent+0x1a>

00000bd8 <__swhatbuf_r>:
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	460e      	mov	r6, r1
     bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
     be0:	b096      	sub	sp, #88	; 0x58
     be2:	2900      	cmp	r1, #0
     be4:	4614      	mov	r4, r2
     be6:	461d      	mov	r5, r3
     be8:	da07      	bge.n	bfa <__swhatbuf_r+0x22>
     bea:	2300      	movs	r3, #0
     bec:	602b      	str	r3, [r5, #0]
     bee:	89b3      	ldrh	r3, [r6, #12]
     bf0:	061a      	lsls	r2, r3, #24
     bf2:	d410      	bmi.n	c16 <__swhatbuf_r+0x3e>
     bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
     bf8:	e00e      	b.n	c18 <__swhatbuf_r+0x40>
     bfa:	466a      	mov	r2, sp
     bfc:	f000 fc30 	bl	1460 <_fstat_r>
     c00:	2800      	cmp	r0, #0
     c02:	dbf2      	blt.n	bea <__swhatbuf_r+0x12>
     c04:	9a01      	ldr	r2, [sp, #4]
     c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
     c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
     c0e:	425a      	negs	r2, r3
     c10:	415a      	adcs	r2, r3
     c12:	602a      	str	r2, [r5, #0]
     c14:	e7ee      	b.n	bf4 <__swhatbuf_r+0x1c>
     c16:	2340      	movs	r3, #64	; 0x40
     c18:	2000      	movs	r0, #0
     c1a:	6023      	str	r3, [r4, #0]
     c1c:	b016      	add	sp, #88	; 0x58
     c1e:	bd70      	pop	{r4, r5, r6, pc}

00000c20 <__smakebuf_r>:
     c20:	898b      	ldrh	r3, [r1, #12]
     c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
     c24:	079d      	lsls	r5, r3, #30
     c26:	4606      	mov	r6, r0
     c28:	460c      	mov	r4, r1
     c2a:	d507      	bpl.n	c3c <__smakebuf_r+0x1c>
     c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
     c30:	6023      	str	r3, [r4, #0]
     c32:	6123      	str	r3, [r4, #16]
     c34:	2301      	movs	r3, #1
     c36:	6163      	str	r3, [r4, #20]
     c38:	b002      	add	sp, #8
     c3a:	bd70      	pop	{r4, r5, r6, pc}
     c3c:	ab01      	add	r3, sp, #4
     c3e:	466a      	mov	r2, sp
     c40:	f7ff ffca 	bl	bd8 <__swhatbuf_r>
     c44:	9900      	ldr	r1, [sp, #0]
     c46:	4605      	mov	r5, r0
     c48:	4630      	mov	r0, r6
     c4a:	f000 f875 	bl	d38 <_malloc_r>
     c4e:	b948      	cbnz	r0, c64 <__smakebuf_r+0x44>
     c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
     c54:	059a      	lsls	r2, r3, #22
     c56:	d4ef      	bmi.n	c38 <__smakebuf_r+0x18>
     c58:	f023 0303 	bic.w	r3, r3, #3
     c5c:	f043 0302 	orr.w	r3, r3, #2
     c60:	81a3      	strh	r3, [r4, #12]
     c62:	e7e3      	b.n	c2c <__smakebuf_r+0xc>
     c64:	4b0d      	ldr	r3, [pc, #52]	; (c9c <__smakebuf_r+0x7c>)
     c66:	62b3      	str	r3, [r6, #40]	; 0x28
     c68:	89a3      	ldrh	r3, [r4, #12]
     c6a:	6020      	str	r0, [r4, #0]
     c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     c70:	81a3      	strh	r3, [r4, #12]
     c72:	9b00      	ldr	r3, [sp, #0]
     c74:	6120      	str	r0, [r4, #16]
     c76:	6163      	str	r3, [r4, #20]
     c78:	9b01      	ldr	r3, [sp, #4]
     c7a:	b15b      	cbz	r3, c94 <__smakebuf_r+0x74>
     c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
     c80:	4630      	mov	r0, r6
     c82:	f000 fbff 	bl	1484 <_isatty_r>
     c86:	b128      	cbz	r0, c94 <__smakebuf_r+0x74>
     c88:	89a3      	ldrh	r3, [r4, #12]
     c8a:	f023 0303 	bic.w	r3, r3, #3
     c8e:	f043 0301 	orr.w	r3, r3, #1
     c92:	81a3      	strh	r3, [r4, #12]
     c94:	89a3      	ldrh	r3, [r4, #12]
     c96:	431d      	orrs	r5, r3
     c98:	81a5      	strh	r5, [r4, #12]
     c9a:	e7cd      	b.n	c38 <__smakebuf_r+0x18>
     c9c:	00000a8d 	.word	0x00000a8d

00000ca0 <_free_r>:
     ca0:	b538      	push	{r3, r4, r5, lr}
     ca2:	4605      	mov	r5, r0
     ca4:	2900      	cmp	r1, #0
     ca6:	d043      	beq.n	d30 <_free_r+0x90>
     ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
     cac:	1f0c      	subs	r4, r1, #4
     cae:	2b00      	cmp	r3, #0
     cb0:	bfb8      	it	lt
     cb2:	18e4      	addlt	r4, r4, r3
     cb4:	f000 fc16 	bl	14e4 <__malloc_lock>
     cb8:	4a1e      	ldr	r2, [pc, #120]	; (d34 <_free_r+0x94>)
     cba:	6813      	ldr	r3, [r2, #0]
     cbc:	4610      	mov	r0, r2
     cbe:	b933      	cbnz	r3, cce <_free_r+0x2e>
     cc0:	6063      	str	r3, [r4, #4]
     cc2:	6014      	str	r4, [r2, #0]
     cc4:	4628      	mov	r0, r5
     cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     cca:	f000 bc0c 	b.w	14e6 <__malloc_unlock>
     cce:	42a3      	cmp	r3, r4
     cd0:	d90b      	bls.n	cea <_free_r+0x4a>
     cd2:	6821      	ldr	r1, [r4, #0]
     cd4:	1862      	adds	r2, r4, r1
     cd6:	4293      	cmp	r3, r2
     cd8:	bf01      	itttt	eq
     cda:	681a      	ldreq	r2, [r3, #0]
     cdc:	685b      	ldreq	r3, [r3, #4]
     cde:	1852      	addeq	r2, r2, r1
     ce0:	6022      	streq	r2, [r4, #0]
     ce2:	6063      	str	r3, [r4, #4]
     ce4:	6004      	str	r4, [r0, #0]
     ce6:	e7ed      	b.n	cc4 <_free_r+0x24>
     ce8:	4613      	mov	r3, r2
     cea:	685a      	ldr	r2, [r3, #4]
     cec:	b10a      	cbz	r2, cf2 <_free_r+0x52>
     cee:	42a2      	cmp	r2, r4
     cf0:	d9fa      	bls.n	ce8 <_free_r+0x48>
     cf2:	6819      	ldr	r1, [r3, #0]
     cf4:	1858      	adds	r0, r3, r1
     cf6:	42a0      	cmp	r0, r4
     cf8:	d10b      	bne.n	d12 <_free_r+0x72>
     cfa:	6820      	ldr	r0, [r4, #0]
     cfc:	4401      	add	r1, r0
     cfe:	1858      	adds	r0, r3, r1
     d00:	4282      	cmp	r2, r0
     d02:	6019      	str	r1, [r3, #0]
     d04:	d1de      	bne.n	cc4 <_free_r+0x24>
     d06:	6810      	ldr	r0, [r2, #0]
     d08:	6852      	ldr	r2, [r2, #4]
     d0a:	4401      	add	r1, r0
     d0c:	6019      	str	r1, [r3, #0]
     d0e:	605a      	str	r2, [r3, #4]
     d10:	e7d8      	b.n	cc4 <_free_r+0x24>
     d12:	d902      	bls.n	d1a <_free_r+0x7a>
     d14:	230c      	movs	r3, #12
     d16:	602b      	str	r3, [r5, #0]
     d18:	e7d4      	b.n	cc4 <_free_r+0x24>
     d1a:	6820      	ldr	r0, [r4, #0]
     d1c:	1821      	adds	r1, r4, r0
     d1e:	428a      	cmp	r2, r1
     d20:	bf01      	itttt	eq
     d22:	6811      	ldreq	r1, [r2, #0]
     d24:	6852      	ldreq	r2, [r2, #4]
     d26:	1809      	addeq	r1, r1, r0
     d28:	6021      	streq	r1, [r4, #0]
     d2a:	6062      	str	r2, [r4, #4]
     d2c:	605c      	str	r4, [r3, #4]
     d2e:	e7c9      	b.n	cc4 <_free_r+0x24>
     d30:	bd38      	pop	{r3, r4, r5, pc}
     d32:	bf00      	nop
     d34:	2000006c 	.word	0x2000006c

00000d38 <_malloc_r>:
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	1ccd      	adds	r5, r1, #3
     d3c:	f025 0503 	bic.w	r5, r5, #3
     d40:	3508      	adds	r5, #8
     d42:	2d0c      	cmp	r5, #12
     d44:	bf38      	it	cc
     d46:	250c      	movcc	r5, #12
     d48:	2d00      	cmp	r5, #0
     d4a:	4606      	mov	r6, r0
     d4c:	db01      	blt.n	d52 <_malloc_r+0x1a>
     d4e:	42a9      	cmp	r1, r5
     d50:	d903      	bls.n	d5a <_malloc_r+0x22>
     d52:	230c      	movs	r3, #12
     d54:	6033      	str	r3, [r6, #0]
     d56:	2000      	movs	r0, #0
     d58:	bd70      	pop	{r4, r5, r6, pc}
     d5a:	f000 fbc3 	bl	14e4 <__malloc_lock>
     d5e:	4a21      	ldr	r2, [pc, #132]	; (de4 <_malloc_r+0xac>)
     d60:	6814      	ldr	r4, [r2, #0]
     d62:	4621      	mov	r1, r4
     d64:	b991      	cbnz	r1, d8c <_malloc_r+0x54>
     d66:	4c20      	ldr	r4, [pc, #128]	; (de8 <_malloc_r+0xb0>)
     d68:	6823      	ldr	r3, [r4, #0]
     d6a:	b91b      	cbnz	r3, d74 <_malloc_r+0x3c>
     d6c:	4630      	mov	r0, r6
     d6e:	f000 fb01 	bl	1374 <_sbrk_r>
     d72:	6020      	str	r0, [r4, #0]
     d74:	4629      	mov	r1, r5
     d76:	4630      	mov	r0, r6
     d78:	f000 fafc 	bl	1374 <_sbrk_r>
     d7c:	1c43      	adds	r3, r0, #1
     d7e:	d124      	bne.n	dca <_malloc_r+0x92>
     d80:	230c      	movs	r3, #12
     d82:	4630      	mov	r0, r6
     d84:	6033      	str	r3, [r6, #0]
     d86:	f000 fbae 	bl	14e6 <__malloc_unlock>
     d8a:	e7e4      	b.n	d56 <_malloc_r+0x1e>
     d8c:	680b      	ldr	r3, [r1, #0]
     d8e:	1b5b      	subs	r3, r3, r5
     d90:	d418      	bmi.n	dc4 <_malloc_r+0x8c>
     d92:	2b0b      	cmp	r3, #11
     d94:	d90f      	bls.n	db6 <_malloc_r+0x7e>
     d96:	600b      	str	r3, [r1, #0]
     d98:	18cc      	adds	r4, r1, r3
     d9a:	50cd      	str	r5, [r1, r3]
     d9c:	4630      	mov	r0, r6
     d9e:	f000 fba2 	bl	14e6 <__malloc_unlock>
     da2:	f104 000b 	add.w	r0, r4, #11
     da6:	1d23      	adds	r3, r4, #4
     da8:	f020 0007 	bic.w	r0, r0, #7
     dac:	1ac3      	subs	r3, r0, r3
     dae:	d0d3      	beq.n	d58 <_malloc_r+0x20>
     db0:	425a      	negs	r2, r3
     db2:	50e2      	str	r2, [r4, r3]
     db4:	e7d0      	b.n	d58 <_malloc_r+0x20>
     db6:	684b      	ldr	r3, [r1, #4]
     db8:	428c      	cmp	r4, r1
     dba:	bf16      	itet	ne
     dbc:	6063      	strne	r3, [r4, #4]
     dbe:	6013      	streq	r3, [r2, #0]
     dc0:	460c      	movne	r4, r1
     dc2:	e7eb      	b.n	d9c <_malloc_r+0x64>
     dc4:	460c      	mov	r4, r1
     dc6:	6849      	ldr	r1, [r1, #4]
     dc8:	e7cc      	b.n	d64 <_malloc_r+0x2c>
     dca:	1cc4      	adds	r4, r0, #3
     dcc:	f024 0403 	bic.w	r4, r4, #3
     dd0:	42a0      	cmp	r0, r4
     dd2:	d005      	beq.n	de0 <_malloc_r+0xa8>
     dd4:	1a21      	subs	r1, r4, r0
     dd6:	4630      	mov	r0, r6
     dd8:	f000 facc 	bl	1374 <_sbrk_r>
     ddc:	3001      	adds	r0, #1
     dde:	d0cf      	beq.n	d80 <_malloc_r+0x48>
     de0:	6025      	str	r5, [r4, #0]
     de2:	e7db      	b.n	d9c <_malloc_r+0x64>
     de4:	2000006c 	.word	0x2000006c
     de8:	20000070 	.word	0x20000070

00000dec <__sfputc_r>:
     dec:	6893      	ldr	r3, [r2, #8]
     dee:	b410      	push	{r4}
     df0:	3b01      	subs	r3, #1
     df2:	2b00      	cmp	r3, #0
     df4:	6093      	str	r3, [r2, #8]
     df6:	da07      	bge.n	e08 <__sfputc_r+0x1c>
     df8:	6994      	ldr	r4, [r2, #24]
     dfa:	42a3      	cmp	r3, r4
     dfc:	db01      	blt.n	e02 <__sfputc_r+0x16>
     dfe:	290a      	cmp	r1, #10
     e00:	d102      	bne.n	e08 <__sfputc_r+0x1c>
     e02:	bc10      	pop	{r4}
     e04:	f7ff bcae 	b.w	764 <__swbuf_r>
     e08:	6813      	ldr	r3, [r2, #0]
     e0a:	1c58      	adds	r0, r3, #1
     e0c:	6010      	str	r0, [r2, #0]
     e0e:	7019      	strb	r1, [r3, #0]
     e10:	4608      	mov	r0, r1
     e12:	bc10      	pop	{r4}
     e14:	4770      	bx	lr

00000e16 <__sfputs_r>:
     e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e18:	4606      	mov	r6, r0
     e1a:	460f      	mov	r7, r1
     e1c:	4614      	mov	r4, r2
     e1e:	18d5      	adds	r5, r2, r3
     e20:	42ac      	cmp	r4, r5
     e22:	d101      	bne.n	e28 <__sfputs_r+0x12>
     e24:	2000      	movs	r0, #0
     e26:	e007      	b.n	e38 <__sfputs_r+0x22>
     e28:	463a      	mov	r2, r7
     e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
     e2e:	4630      	mov	r0, r6
     e30:	f7ff ffdc 	bl	dec <__sfputc_r>
     e34:	1c43      	adds	r3, r0, #1
     e36:	d1f3      	bne.n	e20 <__sfputs_r+0xa>
     e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00000e3c <_vfiprintf_r>:
     e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e40:	b09d      	sub	sp, #116	; 0x74
     e42:	460c      	mov	r4, r1
     e44:	4617      	mov	r7, r2
     e46:	9303      	str	r3, [sp, #12]
     e48:	4606      	mov	r6, r0
     e4a:	b118      	cbz	r0, e54 <_vfiprintf_r+0x18>
     e4c:	6983      	ldr	r3, [r0, #24]
     e4e:	b90b      	cbnz	r3, e54 <_vfiprintf_r+0x18>
     e50:	f7ff fe38 	bl	ac4 <__sinit>
     e54:	4b7b      	ldr	r3, [pc, #492]	; (1044 <_vfiprintf_r+0x208>)
     e56:	429c      	cmp	r4, r3
     e58:	d157      	bne.n	f0a <_vfiprintf_r+0xce>
     e5a:	6874      	ldr	r4, [r6, #4]
     e5c:	89a3      	ldrh	r3, [r4, #12]
     e5e:	0718      	lsls	r0, r3, #28
     e60:	d55d      	bpl.n	f1e <_vfiprintf_r+0xe2>
     e62:	6923      	ldr	r3, [r4, #16]
     e64:	2b00      	cmp	r3, #0
     e66:	d05a      	beq.n	f1e <_vfiprintf_r+0xe2>
     e68:	2300      	movs	r3, #0
     e6a:	9309      	str	r3, [sp, #36]	; 0x24
     e6c:	2320      	movs	r3, #32
     e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
     e72:	2330      	movs	r3, #48	; 0x30
     e74:	f04f 0b01 	mov.w	fp, #1
     e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
     e7c:	46b8      	mov	r8, r7
     e7e:	4645      	mov	r5, r8
     e80:	f815 3b01 	ldrb.w	r3, [r5], #1
     e84:	b10b      	cbz	r3, e8a <_vfiprintf_r+0x4e>
     e86:	2b25      	cmp	r3, #37	; 0x25
     e88:	d154      	bne.n	f34 <_vfiprintf_r+0xf8>
     e8a:	ebb8 0a07 	subs.w	sl, r8, r7
     e8e:	d00b      	beq.n	ea8 <_vfiprintf_r+0x6c>
     e90:	4653      	mov	r3, sl
     e92:	463a      	mov	r2, r7
     e94:	4621      	mov	r1, r4
     e96:	4630      	mov	r0, r6
     e98:	f7ff ffbd 	bl	e16 <__sfputs_r>
     e9c:	3001      	adds	r0, #1
     e9e:	f000 80c2 	beq.w	1026 <_vfiprintf_r+0x1ea>
     ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ea4:	4453      	add	r3, sl
     ea6:	9309      	str	r3, [sp, #36]	; 0x24
     ea8:	f898 3000 	ldrb.w	r3, [r8]
     eac:	2b00      	cmp	r3, #0
     eae:	f000 80ba 	beq.w	1026 <_vfiprintf_r+0x1ea>
     eb2:	2300      	movs	r3, #0
     eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
     ebc:	9304      	str	r3, [sp, #16]
     ebe:	9307      	str	r3, [sp, #28]
     ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
     ec4:	931a      	str	r3, [sp, #104]	; 0x68
     ec6:	46a8      	mov	r8, r5
     ec8:	2205      	movs	r2, #5
     eca:	f818 1b01 	ldrb.w	r1, [r8], #1
     ece:	485e      	ldr	r0, [pc, #376]	; (1048 <_vfiprintf_r+0x20c>)
     ed0:	f000 fafa 	bl	14c8 <memchr>
     ed4:	9b04      	ldr	r3, [sp, #16]
     ed6:	bb78      	cbnz	r0, f38 <_vfiprintf_r+0xfc>
     ed8:	06d9      	lsls	r1, r3, #27
     eda:	bf44      	itt	mi
     edc:	2220      	movmi	r2, #32
     ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     ee2:	071a      	lsls	r2, r3, #28
     ee4:	bf44      	itt	mi
     ee6:	222b      	movmi	r2, #43	; 0x2b
     ee8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
     eec:	782a      	ldrb	r2, [r5, #0]
     eee:	2a2a      	cmp	r2, #42	; 0x2a
     ef0:	d02a      	beq.n	f48 <_vfiprintf_r+0x10c>
     ef2:	46a8      	mov	r8, r5
     ef4:	2000      	movs	r0, #0
     ef6:	250a      	movs	r5, #10
     ef8:	9a07      	ldr	r2, [sp, #28]
     efa:	4641      	mov	r1, r8
     efc:	f811 3b01 	ldrb.w	r3, [r1], #1
     f00:	3b30      	subs	r3, #48	; 0x30
     f02:	2b09      	cmp	r3, #9
     f04:	d969      	bls.n	fda <_vfiprintf_r+0x19e>
     f06:	b360      	cbz	r0, f62 <_vfiprintf_r+0x126>
     f08:	e024      	b.n	f54 <_vfiprintf_r+0x118>
     f0a:	4b50      	ldr	r3, [pc, #320]	; (104c <_vfiprintf_r+0x210>)
     f0c:	429c      	cmp	r4, r3
     f0e:	d101      	bne.n	f14 <_vfiprintf_r+0xd8>
     f10:	68b4      	ldr	r4, [r6, #8]
     f12:	e7a3      	b.n	e5c <_vfiprintf_r+0x20>
     f14:	4b4e      	ldr	r3, [pc, #312]	; (1050 <_vfiprintf_r+0x214>)
     f16:	429c      	cmp	r4, r3
     f18:	bf08      	it	eq
     f1a:	68f4      	ldreq	r4, [r6, #12]
     f1c:	e79e      	b.n	e5c <_vfiprintf_r+0x20>
     f1e:	4621      	mov	r1, r4
     f20:	4630      	mov	r0, r6
     f22:	f7ff fc71 	bl	808 <__swsetup_r>
     f26:	2800      	cmp	r0, #0
     f28:	d09e      	beq.n	e68 <_vfiprintf_r+0x2c>
     f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     f2e:	b01d      	add	sp, #116	; 0x74
     f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f34:	46a8      	mov	r8, r5
     f36:	e7a2      	b.n	e7e <_vfiprintf_r+0x42>
     f38:	4a43      	ldr	r2, [pc, #268]	; (1048 <_vfiprintf_r+0x20c>)
     f3a:	4645      	mov	r5, r8
     f3c:	1a80      	subs	r0, r0, r2
     f3e:	fa0b f000 	lsl.w	r0, fp, r0
     f42:	4318      	orrs	r0, r3
     f44:	9004      	str	r0, [sp, #16]
     f46:	e7be      	b.n	ec6 <_vfiprintf_r+0x8a>
     f48:	9a03      	ldr	r2, [sp, #12]
     f4a:	1d11      	adds	r1, r2, #4
     f4c:	6812      	ldr	r2, [r2, #0]
     f4e:	9103      	str	r1, [sp, #12]
     f50:	2a00      	cmp	r2, #0
     f52:	db01      	blt.n	f58 <_vfiprintf_r+0x11c>
     f54:	9207      	str	r2, [sp, #28]
     f56:	e004      	b.n	f62 <_vfiprintf_r+0x126>
     f58:	4252      	negs	r2, r2
     f5a:	f043 0302 	orr.w	r3, r3, #2
     f5e:	9207      	str	r2, [sp, #28]
     f60:	9304      	str	r3, [sp, #16]
     f62:	f898 3000 	ldrb.w	r3, [r8]
     f66:	2b2e      	cmp	r3, #46	; 0x2e
     f68:	d10e      	bne.n	f88 <_vfiprintf_r+0x14c>
     f6a:	f898 3001 	ldrb.w	r3, [r8, #1]
     f6e:	2b2a      	cmp	r3, #42	; 0x2a
     f70:	d138      	bne.n	fe4 <_vfiprintf_r+0x1a8>
     f72:	9b03      	ldr	r3, [sp, #12]
     f74:	f108 0802 	add.w	r8, r8, #2
     f78:	1d1a      	adds	r2, r3, #4
     f7a:	681b      	ldr	r3, [r3, #0]
     f7c:	9203      	str	r2, [sp, #12]
     f7e:	2b00      	cmp	r3, #0
     f80:	bfb8      	it	lt
     f82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
     f86:	9305      	str	r3, [sp, #20]
     f88:	4d32      	ldr	r5, [pc, #200]	; (1054 <_vfiprintf_r+0x218>)
     f8a:	2203      	movs	r2, #3
     f8c:	f898 1000 	ldrb.w	r1, [r8]
     f90:	4628      	mov	r0, r5
     f92:	f000 fa99 	bl	14c8 <memchr>
     f96:	b140      	cbz	r0, faa <_vfiprintf_r+0x16e>
     f98:	2340      	movs	r3, #64	; 0x40
     f9a:	1b40      	subs	r0, r0, r5
     f9c:	fa03 f000 	lsl.w	r0, r3, r0
     fa0:	9b04      	ldr	r3, [sp, #16]
     fa2:	f108 0801 	add.w	r8, r8, #1
     fa6:	4303      	orrs	r3, r0
     fa8:	9304      	str	r3, [sp, #16]
     faa:	f898 1000 	ldrb.w	r1, [r8]
     fae:	2206      	movs	r2, #6
     fb0:	4829      	ldr	r0, [pc, #164]	; (1058 <_vfiprintf_r+0x21c>)
     fb2:	f108 0701 	add.w	r7, r8, #1
     fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
     fba:	f000 fa85 	bl	14c8 <memchr>
     fbe:	2800      	cmp	r0, #0
     fc0:	d037      	beq.n	1032 <_vfiprintf_r+0x1f6>
     fc2:	4b26      	ldr	r3, [pc, #152]	; (105c <_vfiprintf_r+0x220>)
     fc4:	bb1b      	cbnz	r3, 100e <_vfiprintf_r+0x1d2>
     fc6:	9b03      	ldr	r3, [sp, #12]
     fc8:	3307      	adds	r3, #7
     fca:	f023 0307 	bic.w	r3, r3, #7
     fce:	3308      	adds	r3, #8
     fd0:	9303      	str	r3, [sp, #12]
     fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fd4:	444b      	add	r3, r9
     fd6:	9309      	str	r3, [sp, #36]	; 0x24
     fd8:	e750      	b.n	e7c <_vfiprintf_r+0x40>
     fda:	fb05 3202 	mla	r2, r5, r2, r3
     fde:	2001      	movs	r0, #1
     fe0:	4688      	mov	r8, r1
     fe2:	e78a      	b.n	efa <_vfiprintf_r+0xbe>
     fe4:	2300      	movs	r3, #0
     fe6:	250a      	movs	r5, #10
     fe8:	4619      	mov	r1, r3
     fea:	f108 0801 	add.w	r8, r8, #1
     fee:	9305      	str	r3, [sp, #20]
     ff0:	4640      	mov	r0, r8
     ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
     ff6:	3a30      	subs	r2, #48	; 0x30
     ff8:	2a09      	cmp	r2, #9
     ffa:	d903      	bls.n	1004 <_vfiprintf_r+0x1c8>
     ffc:	2b00      	cmp	r3, #0
     ffe:	d0c3      	beq.n	f88 <_vfiprintf_r+0x14c>
    1000:	9105      	str	r1, [sp, #20]
    1002:	e7c1      	b.n	f88 <_vfiprintf_r+0x14c>
    1004:	fb05 2101 	mla	r1, r5, r1, r2
    1008:	2301      	movs	r3, #1
    100a:	4680      	mov	r8, r0
    100c:	e7f0      	b.n	ff0 <_vfiprintf_r+0x1b4>
    100e:	ab03      	add	r3, sp, #12
    1010:	9300      	str	r3, [sp, #0]
    1012:	4622      	mov	r2, r4
    1014:	4b12      	ldr	r3, [pc, #72]	; (1060 <_vfiprintf_r+0x224>)
    1016:	a904      	add	r1, sp, #16
    1018:	4630      	mov	r0, r6
    101a:	f3af 8000 	nop.w
    101e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1022:	4681      	mov	r9, r0
    1024:	d1d5      	bne.n	fd2 <_vfiprintf_r+0x196>
    1026:	89a3      	ldrh	r3, [r4, #12]
    1028:	065b      	lsls	r3, r3, #25
    102a:	f53f af7e 	bmi.w	f2a <_vfiprintf_r+0xee>
    102e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1030:	e77d      	b.n	f2e <_vfiprintf_r+0xf2>
    1032:	ab03      	add	r3, sp, #12
    1034:	9300      	str	r3, [sp, #0]
    1036:	4622      	mov	r2, r4
    1038:	4b09      	ldr	r3, [pc, #36]	; (1060 <_vfiprintf_r+0x224>)
    103a:	a904      	add	r1, sp, #16
    103c:	4630      	mov	r0, r6
    103e:	f000 f887 	bl	1150 <_printf_i>
    1042:	e7ec      	b.n	101e <_vfiprintf_r+0x1e2>
    1044:	00001940 	.word	0x00001940
    1048:	00001980 	.word	0x00001980
    104c:	00001960 	.word	0x00001960
    1050:	00001920 	.word	0x00001920
    1054:	00001986 	.word	0x00001986
    1058:	0000198a 	.word	0x0000198a
    105c:	00000000 	.word	0x00000000
    1060:	00000e17 	.word	0x00000e17

00001064 <_printf_common>:
    1064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1068:	4691      	mov	r9, r2
    106a:	461f      	mov	r7, r3
    106c:	688a      	ldr	r2, [r1, #8]
    106e:	690b      	ldr	r3, [r1, #16]
    1070:	4606      	mov	r6, r0
    1072:	4293      	cmp	r3, r2
    1074:	bfb8      	it	lt
    1076:	4613      	movlt	r3, r2
    1078:	f8c9 3000 	str.w	r3, [r9]
    107c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    1080:	460c      	mov	r4, r1
    1082:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1086:	b112      	cbz	r2, 108e <_printf_common+0x2a>
    1088:	3301      	adds	r3, #1
    108a:	f8c9 3000 	str.w	r3, [r9]
    108e:	6823      	ldr	r3, [r4, #0]
    1090:	0699      	lsls	r1, r3, #26
    1092:	bf42      	ittt	mi
    1094:	f8d9 3000 	ldrmi.w	r3, [r9]
    1098:	3302      	addmi	r3, #2
    109a:	f8c9 3000 	strmi.w	r3, [r9]
    109e:	6825      	ldr	r5, [r4, #0]
    10a0:	f015 0506 	ands.w	r5, r5, #6
    10a4:	d107      	bne.n	10b6 <_printf_common+0x52>
    10a6:	f104 0a19 	add.w	sl, r4, #25
    10aa:	68e3      	ldr	r3, [r4, #12]
    10ac:	f8d9 2000 	ldr.w	r2, [r9]
    10b0:	1a9b      	subs	r3, r3, r2
    10b2:	42ab      	cmp	r3, r5
    10b4:	dc29      	bgt.n	110a <_printf_common+0xa6>
    10b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    10ba:	6822      	ldr	r2, [r4, #0]
    10bc:	3300      	adds	r3, #0
    10be:	bf18      	it	ne
    10c0:	2301      	movne	r3, #1
    10c2:	0692      	lsls	r2, r2, #26
    10c4:	d42e      	bmi.n	1124 <_printf_common+0xc0>
    10c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    10ca:	4639      	mov	r1, r7
    10cc:	4630      	mov	r0, r6
    10ce:	47c0      	blx	r8
    10d0:	3001      	adds	r0, #1
    10d2:	d021      	beq.n	1118 <_printf_common+0xb4>
    10d4:	6823      	ldr	r3, [r4, #0]
    10d6:	68e5      	ldr	r5, [r4, #12]
    10d8:	f003 0306 	and.w	r3, r3, #6
    10dc:	2b04      	cmp	r3, #4
    10de:	bf18      	it	ne
    10e0:	2500      	movne	r5, #0
    10e2:	f8d9 2000 	ldr.w	r2, [r9]
    10e6:	f04f 0900 	mov.w	r9, #0
    10ea:	bf08      	it	eq
    10ec:	1aad      	subeq	r5, r5, r2
    10ee:	68a3      	ldr	r3, [r4, #8]
    10f0:	6922      	ldr	r2, [r4, #16]
    10f2:	bf08      	it	eq
    10f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    10f8:	4293      	cmp	r3, r2
    10fa:	bfc4      	itt	gt
    10fc:	1a9b      	subgt	r3, r3, r2
    10fe:	18ed      	addgt	r5, r5, r3
    1100:	341a      	adds	r4, #26
    1102:	454d      	cmp	r5, r9
    1104:	d11a      	bne.n	113c <_printf_common+0xd8>
    1106:	2000      	movs	r0, #0
    1108:	e008      	b.n	111c <_printf_common+0xb8>
    110a:	2301      	movs	r3, #1
    110c:	4652      	mov	r2, sl
    110e:	4639      	mov	r1, r7
    1110:	4630      	mov	r0, r6
    1112:	47c0      	blx	r8
    1114:	3001      	adds	r0, #1
    1116:	d103      	bne.n	1120 <_printf_common+0xbc>
    1118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1120:	3501      	adds	r5, #1
    1122:	e7c2      	b.n	10aa <_printf_common+0x46>
    1124:	2030      	movs	r0, #48	; 0x30
    1126:	18e1      	adds	r1, r4, r3
    1128:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    112c:	1c5a      	adds	r2, r3, #1
    112e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    1132:	4422      	add	r2, r4
    1134:	3302      	adds	r3, #2
    1136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    113a:	e7c4      	b.n	10c6 <_printf_common+0x62>
    113c:	2301      	movs	r3, #1
    113e:	4622      	mov	r2, r4
    1140:	4639      	mov	r1, r7
    1142:	4630      	mov	r0, r6
    1144:	47c0      	blx	r8
    1146:	3001      	adds	r0, #1
    1148:	d0e6      	beq.n	1118 <_printf_common+0xb4>
    114a:	f109 0901 	add.w	r9, r9, #1
    114e:	e7d8      	b.n	1102 <_printf_common+0x9e>

00001150 <_printf_i>:
    1150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1154:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    1158:	460c      	mov	r4, r1
    115a:	7e09      	ldrb	r1, [r1, #24]
    115c:	b085      	sub	sp, #20
    115e:	296e      	cmp	r1, #110	; 0x6e
    1160:	4617      	mov	r7, r2
    1162:	4606      	mov	r6, r0
    1164:	4698      	mov	r8, r3
    1166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1168:	f000 80b3 	beq.w	12d2 <_printf_i+0x182>
    116c:	d822      	bhi.n	11b4 <_printf_i+0x64>
    116e:	2963      	cmp	r1, #99	; 0x63
    1170:	d036      	beq.n	11e0 <_printf_i+0x90>
    1172:	d80a      	bhi.n	118a <_printf_i+0x3a>
    1174:	2900      	cmp	r1, #0
    1176:	f000 80b9 	beq.w	12ec <_printf_i+0x19c>
    117a:	2958      	cmp	r1, #88	; 0x58
    117c:	f000 8083 	beq.w	1286 <_printf_i+0x136>
    1180:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1184:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    1188:	e032      	b.n	11f0 <_printf_i+0xa0>
    118a:	2964      	cmp	r1, #100	; 0x64
    118c:	d001      	beq.n	1192 <_printf_i+0x42>
    118e:	2969      	cmp	r1, #105	; 0x69
    1190:	d1f6      	bne.n	1180 <_printf_i+0x30>
    1192:	6820      	ldr	r0, [r4, #0]
    1194:	6813      	ldr	r3, [r2, #0]
    1196:	0605      	lsls	r5, r0, #24
    1198:	f103 0104 	add.w	r1, r3, #4
    119c:	d52a      	bpl.n	11f4 <_printf_i+0xa4>
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	6011      	str	r1, [r2, #0]
    11a2:	2b00      	cmp	r3, #0
    11a4:	da03      	bge.n	11ae <_printf_i+0x5e>
    11a6:	222d      	movs	r2, #45	; 0x2d
    11a8:	425b      	negs	r3, r3
    11aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    11ae:	486f      	ldr	r0, [pc, #444]	; (136c <_printf_i+0x21c>)
    11b0:	220a      	movs	r2, #10
    11b2:	e039      	b.n	1228 <_printf_i+0xd8>
    11b4:	2973      	cmp	r1, #115	; 0x73
    11b6:	f000 809d 	beq.w	12f4 <_printf_i+0x1a4>
    11ba:	d808      	bhi.n	11ce <_printf_i+0x7e>
    11bc:	296f      	cmp	r1, #111	; 0x6f
    11be:	d020      	beq.n	1202 <_printf_i+0xb2>
    11c0:	2970      	cmp	r1, #112	; 0x70
    11c2:	d1dd      	bne.n	1180 <_printf_i+0x30>
    11c4:	6823      	ldr	r3, [r4, #0]
    11c6:	f043 0320 	orr.w	r3, r3, #32
    11ca:	6023      	str	r3, [r4, #0]
    11cc:	e003      	b.n	11d6 <_printf_i+0x86>
    11ce:	2975      	cmp	r1, #117	; 0x75
    11d0:	d017      	beq.n	1202 <_printf_i+0xb2>
    11d2:	2978      	cmp	r1, #120	; 0x78
    11d4:	d1d4      	bne.n	1180 <_printf_i+0x30>
    11d6:	2378      	movs	r3, #120	; 0x78
    11d8:	4865      	ldr	r0, [pc, #404]	; (1370 <_printf_i+0x220>)
    11da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    11de:	e055      	b.n	128c <_printf_i+0x13c>
    11e0:	6813      	ldr	r3, [r2, #0]
    11e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    11e6:	1d19      	adds	r1, r3, #4
    11e8:	681b      	ldr	r3, [r3, #0]
    11ea:	6011      	str	r1, [r2, #0]
    11ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    11f0:	2301      	movs	r3, #1
    11f2:	e08c      	b.n	130e <_printf_i+0x1be>
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	f010 0f40 	tst.w	r0, #64	; 0x40
    11fa:	6011      	str	r1, [r2, #0]
    11fc:	bf18      	it	ne
    11fe:	b21b      	sxthne	r3, r3
    1200:	e7cf      	b.n	11a2 <_printf_i+0x52>
    1202:	6813      	ldr	r3, [r2, #0]
    1204:	6825      	ldr	r5, [r4, #0]
    1206:	1d18      	adds	r0, r3, #4
    1208:	6010      	str	r0, [r2, #0]
    120a:	0628      	lsls	r0, r5, #24
    120c:	d501      	bpl.n	1212 <_printf_i+0xc2>
    120e:	681b      	ldr	r3, [r3, #0]
    1210:	e002      	b.n	1218 <_printf_i+0xc8>
    1212:	0668      	lsls	r0, r5, #25
    1214:	d5fb      	bpl.n	120e <_printf_i+0xbe>
    1216:	881b      	ldrh	r3, [r3, #0]
    1218:	296f      	cmp	r1, #111	; 0x6f
    121a:	bf14      	ite	ne
    121c:	220a      	movne	r2, #10
    121e:	2208      	moveq	r2, #8
    1220:	4852      	ldr	r0, [pc, #328]	; (136c <_printf_i+0x21c>)
    1222:	2100      	movs	r1, #0
    1224:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    1228:	6865      	ldr	r5, [r4, #4]
    122a:	2d00      	cmp	r5, #0
    122c:	60a5      	str	r5, [r4, #8]
    122e:	f2c0 8095 	blt.w	135c <_printf_i+0x20c>
    1232:	6821      	ldr	r1, [r4, #0]
    1234:	f021 0104 	bic.w	r1, r1, #4
    1238:	6021      	str	r1, [r4, #0]
    123a:	2b00      	cmp	r3, #0
    123c:	d13d      	bne.n	12ba <_printf_i+0x16a>
    123e:	2d00      	cmp	r5, #0
    1240:	f040 808e 	bne.w	1360 <_printf_i+0x210>
    1244:	4665      	mov	r5, ip
    1246:	2a08      	cmp	r2, #8
    1248:	d10b      	bne.n	1262 <_printf_i+0x112>
    124a:	6823      	ldr	r3, [r4, #0]
    124c:	07db      	lsls	r3, r3, #31
    124e:	d508      	bpl.n	1262 <_printf_i+0x112>
    1250:	6923      	ldr	r3, [r4, #16]
    1252:	6862      	ldr	r2, [r4, #4]
    1254:	429a      	cmp	r2, r3
    1256:	bfde      	ittt	le
    1258:	2330      	movle	r3, #48	; 0x30
    125a:	f805 3c01 	strble.w	r3, [r5, #-1]
    125e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    1262:	ebac 0305 	sub.w	r3, ip, r5
    1266:	6123      	str	r3, [r4, #16]
    1268:	f8cd 8000 	str.w	r8, [sp]
    126c:	463b      	mov	r3, r7
    126e:	aa03      	add	r2, sp, #12
    1270:	4621      	mov	r1, r4
    1272:	4630      	mov	r0, r6
    1274:	f7ff fef6 	bl	1064 <_printf_common>
    1278:	3001      	adds	r0, #1
    127a:	d14d      	bne.n	1318 <_printf_i+0x1c8>
    127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1280:	b005      	add	sp, #20
    1282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1286:	4839      	ldr	r0, [pc, #228]	; (136c <_printf_i+0x21c>)
    1288:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    128c:	6813      	ldr	r3, [r2, #0]
    128e:	6821      	ldr	r1, [r4, #0]
    1290:	1d1d      	adds	r5, r3, #4
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	6015      	str	r5, [r2, #0]
    1296:	060a      	lsls	r2, r1, #24
    1298:	d50b      	bpl.n	12b2 <_printf_i+0x162>
    129a:	07ca      	lsls	r2, r1, #31
    129c:	bf44      	itt	mi
    129e:	f041 0120 	orrmi.w	r1, r1, #32
    12a2:	6021      	strmi	r1, [r4, #0]
    12a4:	b91b      	cbnz	r3, 12ae <_printf_i+0x15e>
    12a6:	6822      	ldr	r2, [r4, #0]
    12a8:	f022 0220 	bic.w	r2, r2, #32
    12ac:	6022      	str	r2, [r4, #0]
    12ae:	2210      	movs	r2, #16
    12b0:	e7b7      	b.n	1222 <_printf_i+0xd2>
    12b2:	064d      	lsls	r5, r1, #25
    12b4:	bf48      	it	mi
    12b6:	b29b      	uxthmi	r3, r3
    12b8:	e7ef      	b.n	129a <_printf_i+0x14a>
    12ba:	4665      	mov	r5, ip
    12bc:	fbb3 f1f2 	udiv	r1, r3, r2
    12c0:	fb02 3311 	mls	r3, r2, r1, r3
    12c4:	5cc3      	ldrb	r3, [r0, r3]
    12c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
    12ca:	460b      	mov	r3, r1
    12cc:	2900      	cmp	r1, #0
    12ce:	d1f5      	bne.n	12bc <_printf_i+0x16c>
    12d0:	e7b9      	b.n	1246 <_printf_i+0xf6>
    12d2:	6813      	ldr	r3, [r2, #0]
    12d4:	6825      	ldr	r5, [r4, #0]
    12d6:	1d18      	adds	r0, r3, #4
    12d8:	6961      	ldr	r1, [r4, #20]
    12da:	6010      	str	r0, [r2, #0]
    12dc:	0628      	lsls	r0, r5, #24
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	d501      	bpl.n	12e6 <_printf_i+0x196>
    12e2:	6019      	str	r1, [r3, #0]
    12e4:	e002      	b.n	12ec <_printf_i+0x19c>
    12e6:	066a      	lsls	r2, r5, #25
    12e8:	d5fb      	bpl.n	12e2 <_printf_i+0x192>
    12ea:	8019      	strh	r1, [r3, #0]
    12ec:	2300      	movs	r3, #0
    12ee:	4665      	mov	r5, ip
    12f0:	6123      	str	r3, [r4, #16]
    12f2:	e7b9      	b.n	1268 <_printf_i+0x118>
    12f4:	6813      	ldr	r3, [r2, #0]
    12f6:	1d19      	adds	r1, r3, #4
    12f8:	6011      	str	r1, [r2, #0]
    12fa:	681d      	ldr	r5, [r3, #0]
    12fc:	6862      	ldr	r2, [r4, #4]
    12fe:	2100      	movs	r1, #0
    1300:	4628      	mov	r0, r5
    1302:	f000 f8e1 	bl	14c8 <memchr>
    1306:	b108      	cbz	r0, 130c <_printf_i+0x1bc>
    1308:	1b40      	subs	r0, r0, r5
    130a:	6060      	str	r0, [r4, #4]
    130c:	6863      	ldr	r3, [r4, #4]
    130e:	6123      	str	r3, [r4, #16]
    1310:	2300      	movs	r3, #0
    1312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    1316:	e7a7      	b.n	1268 <_printf_i+0x118>
    1318:	6923      	ldr	r3, [r4, #16]
    131a:	462a      	mov	r2, r5
    131c:	4639      	mov	r1, r7
    131e:	4630      	mov	r0, r6
    1320:	47c0      	blx	r8
    1322:	3001      	adds	r0, #1
    1324:	d0aa      	beq.n	127c <_printf_i+0x12c>
    1326:	6823      	ldr	r3, [r4, #0]
    1328:	079b      	lsls	r3, r3, #30
    132a:	d413      	bmi.n	1354 <_printf_i+0x204>
    132c:	68e0      	ldr	r0, [r4, #12]
    132e:	9b03      	ldr	r3, [sp, #12]
    1330:	4298      	cmp	r0, r3
    1332:	bfb8      	it	lt
    1334:	4618      	movlt	r0, r3
    1336:	e7a3      	b.n	1280 <_printf_i+0x130>
    1338:	2301      	movs	r3, #1
    133a:	464a      	mov	r2, r9
    133c:	4639      	mov	r1, r7
    133e:	4630      	mov	r0, r6
    1340:	47c0      	blx	r8
    1342:	3001      	adds	r0, #1
    1344:	d09a      	beq.n	127c <_printf_i+0x12c>
    1346:	3501      	adds	r5, #1
    1348:	68e3      	ldr	r3, [r4, #12]
    134a:	9a03      	ldr	r2, [sp, #12]
    134c:	1a9b      	subs	r3, r3, r2
    134e:	42ab      	cmp	r3, r5
    1350:	dcf2      	bgt.n	1338 <_printf_i+0x1e8>
    1352:	e7eb      	b.n	132c <_printf_i+0x1dc>
    1354:	2500      	movs	r5, #0
    1356:	f104 0919 	add.w	r9, r4, #25
    135a:	e7f5      	b.n	1348 <_printf_i+0x1f8>
    135c:	2b00      	cmp	r3, #0
    135e:	d1ac      	bne.n	12ba <_printf_i+0x16a>
    1360:	7803      	ldrb	r3, [r0, #0]
    1362:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    136a:	e76c      	b.n	1246 <_printf_i+0xf6>
    136c:	00001991 	.word	0x00001991
    1370:	000019a2 	.word	0x000019a2

00001374 <_sbrk_r>:
    1374:	b538      	push	{r3, r4, r5, lr}
    1376:	2300      	movs	r3, #0
    1378:	4c05      	ldr	r4, [pc, #20]	; (1390 <_sbrk_r+0x1c>)
    137a:	4605      	mov	r5, r0
    137c:	4608      	mov	r0, r1
    137e:	6023      	str	r3, [r4, #0]
    1380:	f000 f8ec 	bl	155c <_sbrk>
    1384:	1c43      	adds	r3, r0, #1
    1386:	d102      	bne.n	138e <_sbrk_r+0x1a>
    1388:	6823      	ldr	r3, [r4, #0]
    138a:	b103      	cbz	r3, 138e <_sbrk_r+0x1a>
    138c:	602b      	str	r3, [r5, #0]
    138e:	bd38      	pop	{r3, r4, r5, pc}
    1390:	20000084 	.word	0x20000084

00001394 <__sread>:
    1394:	b510      	push	{r4, lr}
    1396:	460c      	mov	r4, r1
    1398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    139c:	f000 f8a4 	bl	14e8 <_read_r>
    13a0:	2800      	cmp	r0, #0
    13a2:	bfab      	itete	ge
    13a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    13a6:	89a3      	ldrhlt	r3, [r4, #12]
    13a8:	181b      	addge	r3, r3, r0
    13aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    13ae:	bfac      	ite	ge
    13b0:	6563      	strge	r3, [r4, #84]	; 0x54
    13b2:	81a3      	strhlt	r3, [r4, #12]
    13b4:	bd10      	pop	{r4, pc}

000013b6 <__swrite>:
    13b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13ba:	461f      	mov	r7, r3
    13bc:	898b      	ldrh	r3, [r1, #12]
    13be:	4605      	mov	r5, r0
    13c0:	05db      	lsls	r3, r3, #23
    13c2:	460c      	mov	r4, r1
    13c4:	4616      	mov	r6, r2
    13c6:	d505      	bpl.n	13d4 <__swrite+0x1e>
    13c8:	2302      	movs	r3, #2
    13ca:	2200      	movs	r2, #0
    13cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    13d0:	f000 f868 	bl	14a4 <_lseek_r>
    13d4:	89a3      	ldrh	r3, [r4, #12]
    13d6:	4632      	mov	r2, r6
    13d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    13dc:	81a3      	strh	r3, [r4, #12]
    13de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    13e2:	463b      	mov	r3, r7
    13e4:	4628      	mov	r0, r5
    13e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    13ea:	f000 b817 	b.w	141c <_write_r>

000013ee <__sseek>:
    13ee:	b510      	push	{r4, lr}
    13f0:	460c      	mov	r4, r1
    13f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    13f6:	f000 f855 	bl	14a4 <_lseek_r>
    13fa:	1c43      	adds	r3, r0, #1
    13fc:	89a3      	ldrh	r3, [r4, #12]
    13fe:	bf15      	itete	ne
    1400:	6560      	strne	r0, [r4, #84]	; 0x54
    1402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    1406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    140a:	81a3      	strheq	r3, [r4, #12]
    140c:	bf18      	it	ne
    140e:	81a3      	strhne	r3, [r4, #12]
    1410:	bd10      	pop	{r4, pc}

00001412 <__sclose>:
    1412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1416:	f000 b813 	b.w	1440 <_close_r>
	...

0000141c <_write_r>:
    141c:	b538      	push	{r3, r4, r5, lr}
    141e:	4605      	mov	r5, r0
    1420:	4608      	mov	r0, r1
    1422:	4611      	mov	r1, r2
    1424:	2200      	movs	r2, #0
    1426:	4c05      	ldr	r4, [pc, #20]	; (143c <_write_r+0x20>)
    1428:	6022      	str	r2, [r4, #0]
    142a:	461a      	mov	r2, r3
    142c:	f7ff f8c4 	bl	5b8 <_write>
    1430:	1c43      	adds	r3, r0, #1
    1432:	d102      	bne.n	143a <_write_r+0x1e>
    1434:	6823      	ldr	r3, [r4, #0]
    1436:	b103      	cbz	r3, 143a <_write_r+0x1e>
    1438:	602b      	str	r3, [r5, #0]
    143a:	bd38      	pop	{r3, r4, r5, pc}
    143c:	20000084 	.word	0x20000084

00001440 <_close_r>:
    1440:	b538      	push	{r3, r4, r5, lr}
    1442:	2300      	movs	r3, #0
    1444:	4c05      	ldr	r4, [pc, #20]	; (145c <_close_r+0x1c>)
    1446:	4605      	mov	r5, r0
    1448:	4608      	mov	r0, r1
    144a:	6023      	str	r3, [r4, #0]
    144c:	f000 f85e 	bl	150c <_close>
    1450:	1c43      	adds	r3, r0, #1
    1452:	d102      	bne.n	145a <_close_r+0x1a>
    1454:	6823      	ldr	r3, [r4, #0]
    1456:	b103      	cbz	r3, 145a <_close_r+0x1a>
    1458:	602b      	str	r3, [r5, #0]
    145a:	bd38      	pop	{r3, r4, r5, pc}
    145c:	20000084 	.word	0x20000084

00001460 <_fstat_r>:
    1460:	b538      	push	{r3, r4, r5, lr}
    1462:	2300      	movs	r3, #0
    1464:	4c06      	ldr	r4, [pc, #24]	; (1480 <_fstat_r+0x20>)
    1466:	4605      	mov	r5, r0
    1468:	4608      	mov	r0, r1
    146a:	4611      	mov	r1, r2
    146c:	6023      	str	r3, [r4, #0]
    146e:	f000 f855 	bl	151c <_fstat>
    1472:	1c43      	adds	r3, r0, #1
    1474:	d102      	bne.n	147c <_fstat_r+0x1c>
    1476:	6823      	ldr	r3, [r4, #0]
    1478:	b103      	cbz	r3, 147c <_fstat_r+0x1c>
    147a:	602b      	str	r3, [r5, #0]
    147c:	bd38      	pop	{r3, r4, r5, pc}
    147e:	bf00      	nop
    1480:	20000084 	.word	0x20000084

00001484 <_isatty_r>:
    1484:	b538      	push	{r3, r4, r5, lr}
    1486:	2300      	movs	r3, #0
    1488:	4c05      	ldr	r4, [pc, #20]	; (14a0 <_isatty_r+0x1c>)
    148a:	4605      	mov	r5, r0
    148c:	4608      	mov	r0, r1
    148e:	6023      	str	r3, [r4, #0]
    1490:	f000 f84c 	bl	152c <_isatty>
    1494:	1c43      	adds	r3, r0, #1
    1496:	d102      	bne.n	149e <_isatty_r+0x1a>
    1498:	6823      	ldr	r3, [r4, #0]
    149a:	b103      	cbz	r3, 149e <_isatty_r+0x1a>
    149c:	602b      	str	r3, [r5, #0]
    149e:	bd38      	pop	{r3, r4, r5, pc}
    14a0:	20000084 	.word	0x20000084

000014a4 <_lseek_r>:
    14a4:	b538      	push	{r3, r4, r5, lr}
    14a6:	4605      	mov	r5, r0
    14a8:	4608      	mov	r0, r1
    14aa:	4611      	mov	r1, r2
    14ac:	2200      	movs	r2, #0
    14ae:	4c05      	ldr	r4, [pc, #20]	; (14c4 <_lseek_r+0x20>)
    14b0:	6022      	str	r2, [r4, #0]
    14b2:	461a      	mov	r2, r3
    14b4:	f000 f842 	bl	153c <_lseek>
    14b8:	1c43      	adds	r3, r0, #1
    14ba:	d102      	bne.n	14c2 <_lseek_r+0x1e>
    14bc:	6823      	ldr	r3, [r4, #0]
    14be:	b103      	cbz	r3, 14c2 <_lseek_r+0x1e>
    14c0:	602b      	str	r3, [r5, #0]
    14c2:	bd38      	pop	{r3, r4, r5, pc}
    14c4:	20000084 	.word	0x20000084

000014c8 <memchr>:
    14c8:	b510      	push	{r4, lr}
    14ca:	b2c9      	uxtb	r1, r1
    14cc:	4402      	add	r2, r0
    14ce:	4290      	cmp	r0, r2
    14d0:	4603      	mov	r3, r0
    14d2:	d101      	bne.n	14d8 <memchr+0x10>
    14d4:	2300      	movs	r3, #0
    14d6:	e003      	b.n	14e0 <memchr+0x18>
    14d8:	781c      	ldrb	r4, [r3, #0]
    14da:	3001      	adds	r0, #1
    14dc:	428c      	cmp	r4, r1
    14de:	d1f6      	bne.n	14ce <memchr+0x6>
    14e0:	4618      	mov	r0, r3
    14e2:	bd10      	pop	{r4, pc}

000014e4 <__malloc_lock>:
    14e4:	4770      	bx	lr

000014e6 <__malloc_unlock>:
    14e6:	4770      	bx	lr

000014e8 <_read_r>:
    14e8:	b538      	push	{r3, r4, r5, lr}
    14ea:	4605      	mov	r5, r0
    14ec:	4608      	mov	r0, r1
    14ee:	4611      	mov	r1, r2
    14f0:	2200      	movs	r2, #0
    14f2:	4c05      	ldr	r4, [pc, #20]	; (1508 <_read_r+0x20>)
    14f4:	6022      	str	r2, [r4, #0]
    14f6:	461a      	mov	r2, r3
    14f8:	f000 f828 	bl	154c <_read>
    14fc:	1c43      	adds	r3, r0, #1
    14fe:	d102      	bne.n	1506 <_read_r+0x1e>
    1500:	6823      	ldr	r3, [r4, #0]
    1502:	b103      	cbz	r3, 1506 <_read_r+0x1e>
    1504:	602b      	str	r3, [r5, #0]
    1506:	bd38      	pop	{r3, r4, r5, pc}
    1508:	20000084 	.word	0x20000084

0000150c <_close>:
    150c:	2258      	movs	r2, #88	; 0x58
    150e:	4b02      	ldr	r3, [pc, #8]	; (1518 <_close+0xc>)
    1510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1514:	601a      	str	r2, [r3, #0]
    1516:	4770      	bx	lr
    1518:	20000084 	.word	0x20000084

0000151c <_fstat>:
    151c:	2258      	movs	r2, #88	; 0x58
    151e:	4b02      	ldr	r3, [pc, #8]	; (1528 <_fstat+0xc>)
    1520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1524:	601a      	str	r2, [r3, #0]
    1526:	4770      	bx	lr
    1528:	20000084 	.word	0x20000084

0000152c <_isatty>:
    152c:	2258      	movs	r2, #88	; 0x58
    152e:	4b02      	ldr	r3, [pc, #8]	; (1538 <_isatty+0xc>)
    1530:	2000      	movs	r0, #0
    1532:	601a      	str	r2, [r3, #0]
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	20000084 	.word	0x20000084

0000153c <_lseek>:
    153c:	2258      	movs	r2, #88	; 0x58
    153e:	4b02      	ldr	r3, [pc, #8]	; (1548 <_lseek+0xc>)
    1540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1544:	601a      	str	r2, [r3, #0]
    1546:	4770      	bx	lr
    1548:	20000084 	.word	0x20000084

0000154c <_read>:
    154c:	2258      	movs	r2, #88	; 0x58
    154e:	4b02      	ldr	r3, [pc, #8]	; (1558 <_read+0xc>)
    1550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1554:	601a      	str	r2, [r3, #0]
    1556:	4770      	bx	lr
    1558:	20000084 	.word	0x20000084

0000155c <_sbrk>:
    155c:	4a04      	ldr	r2, [pc, #16]	; (1570 <_sbrk+0x14>)
    155e:	4905      	ldr	r1, [pc, #20]	; (1574 <_sbrk+0x18>)
    1560:	6813      	ldr	r3, [r2, #0]
    1562:	2b00      	cmp	r3, #0
    1564:	bf08      	it	eq
    1566:	460b      	moveq	r3, r1
    1568:	4418      	add	r0, r3
    156a:	6010      	str	r0, [r2, #0]
    156c:	4618      	mov	r0, r3
    156e:	4770      	bx	lr
    1570:	20000074 	.word	0x20000074
    1574:	20000088 	.word	0x20000088

00001578 <_exit>:
    1578:	e7fe      	b.n	1578 <_exit>
    157a:	bf00      	nop

0000157c <_init>:
    157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    157e:	bf00      	nop

00001580 <_fini>:
    1580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1582:	bf00      	nop

00001584 <apb_timer_id>:
    1584:	0000 0000 0004 0000 b822 000b f00d b105     ........".......

00001594 <apb_dualtimer_id>:
    1594:	0000 0000 0004 0000 b823 000b f00d b105     ........#.......

000015a4 <blank_id>:
	...

000015b4 <apb_uart_id>:
    15b4:	0000 0000 0004 0000 b821 000b f00d b105     ........!.......

000015c4 <apb_rtc_id>:
	...
    15cc:	1031 0004 f00d b105                         1.......

000015d4 <apb_watchdog_id>:
    15d4:	0000 0000 0004 0000 b824 000b f00d b105     ........$.......

000015e4 <pl230_udma_id>:
    15e4:	0000 0000 0004 0000 b230 000b f00d b105     ........0.......

000015f4 <ahb_gpio_id>:
    15f4:	0000 0000 0004 0000 b820 000b f00d b105     ........ .......
    1604:	6944 6666 7265 6e65 6563 6620 756f 646e     Difference found
    1614:	203a 7825 202c 7865 6570 7463 6465 2520     : %x, expected %
    1624:	2c78 6120 7463 6175 206c 7825 000a 0000     x, actual %x....
    1634:	2020 6c41 206c 4449 7620 6c61 6575 2073       All ID values 
    1644:	7261 2065 2030 2020 203a 6564 6976 6563     are 0   : device
    1654:	6e20 746f 7020 6572 6573 746e 000a 0000      not present....
    1664:	2020 4449 7620 6c61 6575 6d20 7369 616d       ID value misma
    1674:	6374 2868 7365 2029 203a 6564 6976 6563     tch(es) : device
    1684:	7520 6b6e 6f6e 6e77 000a 0000 2020 6c41      unknown....  Al
    1694:	206c 4449 7620 6c61 6575 2073 616d 6374     l ID values matc
    16a4:	6568 2064 203a 6564 6976 6563 7020 6572     hed : device pre
    16b4:	6573 746e 000a 0000 430a 726f 6574 2d78     sent.....Cortex-
    16c4:	334d 4420 7365 6769 536e 6174 7472 2d20     M3 DesignStart -
    16d4:	4120 4250 7320 616c 6576 6d20 7875 7420      APB slave mux t
    16e4:	7365 2074 202d 6572 6976 6973 6e6f 2420     est - revision $
    16f4:	6552 6976 6973 6e6f 203a 3432 3133 3339     Revision: 243193
    1704:	2420 000a 2d20 4420 7465 6365 6974 676e      $.. - Detecting
    1714:	6920 2066 6564 6166 6c75 2074 6570 6972      if default peri
    1724:	6870 7265 6c61 2073 7261 2065 7270 7365     pherals are pres
    1734:	6e65 2074 2e2e 0a2e 0000 0000 3a30 7420     ent ........0: t
    1744:	6d69 7265 3020 0000 3a31 7420 6d69 7265     imer 0..1: timer
    1754:	3120 0000 3a32 6420 6175 206c 6974 656d      1..2: dual time
    1764:	0072 0000 3a33 6220 616c 6b6e 0000 0000     r...3: blank....
    1774:	3a34 5520 5241 2054 0030 0000 3a35 5520     4: UART 0...5: U
    1784:	5241 2054 0031 0000 3a36 5220 4354 0000     ART 1...6: RTC..
    1794:	3a37 6220 616c 6b6e 0000 0000 3a38 5720     7: blank....8: W
    17a4:	7461 6863 6f64 0067 3a39 6220 616c 6b6e     atchdog.9: blank
    17b4:	0000 0000 3031 203a 6c62 6e61 006b 0000     ....10: blank...
    17c4:	3131 203a 6c62 6e61 006b 0000 3231 203a     11: blank...12: 
    17d4:	5041 2042 7865 6170 736e 6f69 206e 6f70     APB expansion po
    17e4:	7472 3120 0032 0000 3331 203a 5041 2042     rt 12...13: APB 
    17f4:	7865 6170 736e 6f69 206e 6f70 7472 3120     expansion port 1
    1804:	0033 0000 3431 203a 5041 2042 7865 6170     3...14: APB expa
    1814:	736e 6f69 206e 6f70 7472 3120 0034 0000     nsion port 14...
    1824:	3531 203a 5254 474e 0000 0000 2020 6556     15: TRNG....  Ve
    1834:	7372 6f69 206e 6572 6967 7473 7265 6d20     rsion register m
    1844:	7461 6863 6465 2020 3a20 6420 7665 6369     atched   : devic
    1854:	2065 7270 7365 6e65 0a74 0000 2a0a 202a     e present....** 
    1864:	4554 5453 5020 5341 4553 2044 2a2a 0000     TEST PASSED **..
    1874:	2a0a 202a 4554 5453 4620 4941 454c 2044     .** TEST FAILED 
    1884:	2a2a 202c 7245 6f72 2072 6f63 6564 3d20     **, Error code =
    1894:	2820 7830 7825 0a29 0000 0000 485b 7261      (0x%x).....[Har
    18a4:	2064 6146 6c75 2074 6148 646e 656c 5d72     d Fault Handler]
    18b4:	0000 0000 5245 4f52 2052 203a 6e55 7865     ....ERROR : Unex
    18c4:	6570 7463 6465 4820 7261 4664 7561 746c     pected HardFault
    18d4:	6920 746e 7265 7572 7470 6f20 6363 7275      interrupt occur
    18e4:	6572 2e64 000a 0000 2d20 5320 6174 6b63     red..... - Stack
    18f4:	6465 5220 2030 203a 7830 7825 000a 0000     ed R0 : 0x%x....
    1904:	2d20 5320 6174 6b63 6465 5020 2043 203a      - Stacked PC : 
    1914:	7830 7825 000a 0000                         0x%x....

0000191c <_global_impure_ptr>:
    191c:	0008 2000                                   ... 

00001920 <__sf_fake_stderr>:
	...

00001940 <__sf_fake_stdin>:
	...

00001960 <__sf_fake_stdout>:
	...
    1980:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    1990:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    19a0:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    19b0:	6665                                         ef.
