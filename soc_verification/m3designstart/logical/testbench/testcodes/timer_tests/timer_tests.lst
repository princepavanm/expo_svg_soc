
timer_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	00000d79 	.word	0x00000d79
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	00000d11 	.word	0x00000d11
      64:	00000d45 	.word	0x00000d45
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fe45 	bl	dd8 <main>
    bl    exit
     14e:	f000 ff41 	bl	fd4 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	000025ff 	.word	0x000025ff
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	2000008c 	.word	0x2000008c
    ldr     r0,=SystemInit
     168:	00000fc5 	.word	0x00000fc5

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <PendSV_Handler+0x2>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <PORT1_COMB_Handler+0x2>
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <PORT1_COMB_Handler+0x4>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     1f0:	6001      	str	r1, [r0, #0]
     1f2:	f3bf 8f4f 	dsb	sy
     1f6:	4770      	bx	lr

000001f8 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     1f8:	b406      	push	{r1, r2}
     1fa:	6801      	ldr	r1, [r0, #0]
     1fc:	f3bf 8f4f 	dsb	sy
     200:	0008      	movs	r0, r1
     202:	bc06      	pop	{r1, r2}
     204:	4770      	bx	lr
     206:	bf00      	nop

00000208 <timer_register_rw_test>:
}
/* --------------------------------------------------------------- */
/*  Timer register read/write tests                                */
/* --------------------------------------------------------------- */

int timer_register_rw_test(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER){
     208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     20c:	4604      	mov	r4, r0
     20e:	b085      	sub	sp, #20
  int return_val=0;
  int err_code=0;
  unsigned int timer_base;
  puts("Timer R/W test");
     210:	489f      	ldr	r0, [pc, #636]	; (490 <timer_register_rw_test+0x288>)
     212:	f000 ff6f 	bl	10f4 <puts>
  puts("- initial values");
     216:	489f      	ldr	r0, [pc, #636]	; (494 <timer_register_rw_test+0x28c>)
     218:	f000 ff6c 	bl	10f4 <puts>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     21c:	f44f 7180 	mov.w	r1, #256	; 0x100
     220:	f44f 7200 	mov.w	r2, #512	; 0x200
     224:	4b9c      	ldr	r3, [pc, #624]	; (498 <timer_register_rw_test+0x290>)
     226:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     22a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  NVIC_DisableIRQ(TIMER0_IRQn);
  NVIC_DisableIRQ(TIMER1_IRQn);

  if (CM3DS_MPS2_TIMER->CTRL      != 0) { err_code += (1<<0); }
     22e:	6825      	ldr	r5, [r4, #0]
  if (CM3DS_MPS2_TIMER->VALUE     != 0) { err_code += (1<<1); }
     230:	6863      	ldr	r3, [r4, #4]
  if (CM3DS_MPS2_TIMER->CTRL      != 0) { err_code += (1<<0); }
     232:	3500      	adds	r5, #0
     234:	bf18      	it	ne
     236:	2501      	movne	r5, #1
  if (CM3DS_MPS2_TIMER->VALUE     != 0) { err_code += (1<<1); }
     238:	b103      	cbz	r3, 23c <timer_register_rw_test+0x34>
     23a:	3502      	adds	r5, #2
  if (CM3DS_MPS2_TIMER->RELOAD    != 0) { err_code += (1<<2); }
     23c:	68a3      	ldr	r3, [r4, #8]
     23e:	b103      	cbz	r3, 242 <timer_register_rw_test+0x3a>
     240:	3504      	adds	r5, #4
  if (CM3DS_MPS2_TIMER->INTSTATUS != 0) { err_code += (1<<3); }
     242:	68e3      	ldr	r3, [r4, #12]
     244:	b103      	cbz	r3, 248 <timer_register_rw_test+0x40>
     246:	3508      	adds	r5, #8

  timer_base = CM3DS_MPS2_TIMER0_BASE;
  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1) {timer_base = CM3DS_MPS2_TIMER1_BASE;}
     248:	4b94      	ldr	r3, [pc, #592]	; (49c <timer_register_rw_test+0x294>)
     24a:	f8df b284 	ldr.w	fp, [pc, #644]	; 4d0 <timer_register_rw_test+0x2c8>
     24e:	f8df a284 	ldr.w	sl, [pc, #644]	; 4d4 <timer_register_rw_test+0x2cc>
     252:	429c      	cmp	r4, r3
     254:	bf0c      	ite	eq
     256:	465b      	moveq	r3, fp
     258:	4653      	movne	r3, sl
     25a:	4a91      	ldr	r2, [pc, #580]	; (4a0 <timer_register_rw_test+0x298>)
     25c:	9303      	str	r3, [sp, #12]
     25e:	4b91      	ldr	r3, [pc, #580]	; (4a4 <timer_register_rw_test+0x29c>)
     260:	bf08      	it	eq
     262:	4613      	moveq	r3, r2
     264:	f8df 9270 	ldr.w	r9, [pc, #624]	; 4d8 <timer_register_rw_test+0x2d0>
     268:	f8df 8270 	ldr.w	r8, [pc, #624]	; 4dc <timer_register_rw_test+0x2d4>
     26c:	bf08      	it	eq
     26e:	46c8      	moveq	r8, r9
     270:	488d      	ldr	r0, [pc, #564]	; (4a8 <timer_register_rw_test+0x2a0>)
     272:	f8df e26c 	ldr.w	lr, [pc, #620]	; 4e0 <timer_register_rw_test+0x2d8>
     276:	f8df c26c 	ldr.w	ip, [pc, #620]	; 4e4 <timer_register_rw_test+0x2dc>
     27a:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
     27e:	bf18      	it	ne
     280:	4684      	movne	ip, r0
     282:	f100 0014 	add.w	r0, r0, #20
     286:	4f89      	ldr	r7, [pc, #548]	; (4ac <timer_register_rw_test+0x2a4>)
     288:	4e89      	ldr	r6, [pc, #548]	; (4b0 <timer_register_rw_test+0x2a8>)
     28a:	9302      	str	r3, [sp, #8]
     28c:	bf08      	it	eq
     28e:	4676      	moveq	r6, lr
     290:	4b88      	ldr	r3, [pc, #544]	; (4b4 <timer_register_rw_test+0x2ac>)
     292:	f10e 0e18 	add.w	lr, lr, #24
     296:	bf1c      	itt	ne
     298:	4613      	movne	r3, r2
     29a:	4686      	movne	lr, r0
     29c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
     2a0:	f5a9 697e 	sub.w	r9, r9, #4064	; 0xfe0
     2a4:	f100 000c 	add.w	r0, r0, #12
     2a8:	4983      	ldr	r1, [pc, #524]	; (4b8 <timer_register_rw_test+0x2b0>)
     2aa:	bf08      	it	eq
     2ac:	4639      	moveq	r1, r7
     2ae:	f107 0714 	add.w	r7, r7, #20
     2b2:	bf18      	it	ne
     2b4:	464f      	movne	r7, r9
     2b6:	f109 0908 	add.w	r9, r9, #8
     2ba:	bf08      	it	eq
     2bc:	4681      	moveq	r9, r0

  // Perform a write access to all PIDs
  HW32_REG(timer_base + 0xFD0) = 0xFFFFFFFF;
     2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1) {timer_base = CM3DS_MPS2_TIMER1_BASE;}
     2c2:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
     2c6:	f10a 0a1c 	add.w	sl, sl, #28
     2ca:	f8cd 8000 	str.w	r8, [sp]
     2ce:	f8df 8218 	ldr.w	r8, [pc, #536]	; 4e8 <timer_register_rw_test+0x2e0>
     2d2:	bf08      	it	eq
     2d4:	46d0      	moveq	r8, sl
     2d6:	f6aa 7af4 	subw	sl, sl, #4084	; 0xff4
     2da:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
     2de:	bf18      	it	ne
     2e0:	46d3      	movne	fp, sl
     2e2:	9301      	str	r3, [sp, #4]
  HW32_REG(timer_base + 0xFD0) = 0xFFFFFFFF;
     2e4:	9a03      	ldr	r2, [sp, #12]
  HW32_REG(timer_base + 0xFD4) = 0xFFFFFFFF;
     2e6:	9b00      	ldr	r3, [sp, #0]
  HW32_REG(timer_base + 0xFD0) = 0xFFFFFFFF;
     2e8:	6010      	str	r0, [r2, #0]
  HW32_REG(timer_base + 0xFD4) = 0xFFFFFFFF;
     2ea:	6018      	str	r0, [r3, #0]
  HW32_REG(timer_base + 0xFD8) = 0xFFFFFFFF;
  HW32_REG(timer_base + 0xFDC) = 0xFFFFFFFF;
  HW32_REG(timer_base + 0xFE0) = 0xFFFFFFFF;
  HW32_REG(timer_base + 0xFE4) = 0xFFFFFFFF;
     2ec:	9b02      	ldr	r3, [sp, #8]
  HW32_REG(timer_base + 0xFD8) = 0xFFFFFFFF;
     2ee:	6030      	str	r0, [r6, #0]
  HW32_REG(timer_base + 0xFDC) = 0xFFFFFFFF;
     2f0:	f8cc 0000 	str.w	r0, [ip]
  HW32_REG(timer_base + 0xFE0) = 0xFFFFFFFF;
     2f4:	6008      	str	r0, [r1, #0]
  HW32_REG(timer_base + 0xFE4) = 0xFFFFFFFF;
     2f6:	6018      	str	r0, [r3, #0]
  HW32_REG(timer_base + 0xFE8) = 0xFFFFFFFF;
     2f8:	9b01      	ldr	r3, [sp, #4]
     2fa:	6018      	str	r0, [r3, #0]
  HW32_REG(timer_base + 0xFEC) = 0xFFFFFFFF;
     2fc:	f8c8 0000 	str.w	r0, [r8]
  HW32_REG(timer_base + 0xFF0) = 0xFFFFFFFF;
     300:	f8ce 0000 	str.w	r0, [lr]
  HW32_REG(timer_base + 0xFF4) = 0xFFFFFFFF;
     304:	6038      	str	r0, [r7, #0]
  HW32_REG(timer_base + 0xFF8) = 0xFFFFFFFF;
     306:	f8cb 0000 	str.w	r0, [fp]
  HW32_REG(timer_base + 0xFFC) = 0xFFFFFFFF;
     30a:	f8c9 0000 	str.w	r0, [r9]

  if (HW32_REG(timer_base + 0xFD0) != APB_TIMER_PID4) {err_code += (1<<4); }
     30e:	6810      	ldr	r0, [r2, #0]
  if (HW32_REG(timer_base + 0xFD4) != APB_TIMER_PID5) {err_code += (1<<5); }
     310:	9b00      	ldr	r3, [sp, #0]
  if (HW32_REG(timer_base + 0xFD0) != APB_TIMER_PID4) {err_code += (1<<4); }
     312:	2804      	cmp	r0, #4
  if (HW32_REG(timer_base + 0xFD4) != APB_TIMER_PID5) {err_code += (1<<5); }
     314:	6818      	ldr	r0, [r3, #0]
  if (HW32_REG(timer_base + 0xFD0) != APB_TIMER_PID4) {err_code += (1<<4); }
     316:	bf18      	it	ne
     318:	3510      	addne	r5, #16
  if (HW32_REG(timer_base + 0xFD4) != APB_TIMER_PID5) {err_code += (1<<5); }
     31a:	b100      	cbz	r0, 31e <timer_register_rw_test+0x116>
     31c:	3520      	adds	r5, #32
  if (HW32_REG(timer_base + 0xFD8) != APB_TIMER_PID6) {err_code += (1<<6); }
     31e:	6830      	ldr	r0, [r6, #0]
     320:	b100      	cbz	r0, 324 <timer_register_rw_test+0x11c>
     322:	3540      	adds	r5, #64	; 0x40
  if (HW32_REG(timer_base + 0xFDC) != APB_TIMER_PID7) {err_code += (1<<7); }
     324:	f8dc 0000 	ldr.w	r0, [ip]
     328:	b100      	cbz	r0, 32c <timer_register_rw_test+0x124>
     32a:	3580      	adds	r5, #128	; 0x80
  if (HW32_REG(timer_base + 0xFE0) != APB_TIMER_PID0) {err_code += (1<<8); }
  if (HW32_REG(timer_base + 0xFE4) != APB_TIMER_PID1) {err_code += (1<<9); }
     32c:	9b02      	ldr	r3, [sp, #8]
  if (HW32_REG(timer_base + 0xFE0) != APB_TIMER_PID0) {err_code += (1<<8); }
     32e:	6809      	ldr	r1, [r1, #0]
  if (HW32_REG(timer_base + 0xFE4) != APB_TIMER_PID1) {err_code += (1<<9); }
     330:	681a      	ldr	r2, [r3, #0]
  if (HW32_REG(timer_base + 0xFE8) != APB_TIMER_PID2) {err_code += (1<<10); }
     332:	9b01      	ldr	r3, [sp, #4]
  if (HW32_REG(timer_base + 0xFE0) != APB_TIMER_PID0) {err_code += (1<<8); }
     334:	2922      	cmp	r1, #34	; 0x22
  if (HW32_REG(timer_base + 0xFE8) != APB_TIMER_PID2) {err_code += (1<<10); }
     336:	681b      	ldr	r3, [r3, #0]
  if (HW32_REG(timer_base + 0xFE0) != APB_TIMER_PID0) {err_code += (1<<8); }
     338:	bf18      	it	ne
     33a:	f505 7580 	addne.w	r5, r5, #256	; 0x100
  if (HW32_REG(timer_base + 0xFE4) != APB_TIMER_PID1) {err_code += (1<<9); }
     33e:	2ab8      	cmp	r2, #184	; 0xb8
     340:	bf18      	it	ne
     342:	f505 7500 	addne.w	r5, r5, #512	; 0x200
  if (HW32_REG(timer_base + 0xFE8) != APB_TIMER_PID2) {err_code += (1<<10); }
     346:	2b1b      	cmp	r3, #27
  if (HW32_REG(timer_base + 0xFEC) != APB_TIMER_PID3) {err_code += (1<<11); }
     348:	f8d8 3000 	ldr.w	r3, [r8]
  if (HW32_REG(timer_base + 0xFE8) != APB_TIMER_PID2) {err_code += (1<<10); }
     34c:	bf18      	it	ne
     34e:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
  if (HW32_REG(timer_base + 0xFEC) != APB_TIMER_PID3) {err_code += (1<<11); }
     352:	b10b      	cbz	r3, 358 <timer_register_rw_test+0x150>
     354:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  if (HW32_REG(timer_base + 0xFF0) != APB_TIMER_CID0) {err_code += (1<<12); }
     358:	f8de 3000 	ldr.w	r3, [lr]
     35c:	2b0d      	cmp	r3, #13
  if (HW32_REG(timer_base + 0xFF4) != APB_TIMER_CID1) {err_code += (1<<13); }
     35e:	683b      	ldr	r3, [r7, #0]
  if (HW32_REG(timer_base + 0xFF0) != APB_TIMER_CID0) {err_code += (1<<12); }
     360:	bf18      	it	ne
     362:	f505 5580 	addne.w	r5, r5, #4096	; 0x1000
  if (HW32_REG(timer_base + 0xFF4) != APB_TIMER_CID1) {err_code += (1<<13); }
     366:	2bf0      	cmp	r3, #240	; 0xf0
  if (HW32_REG(timer_base + 0xFF8) != APB_TIMER_CID2) {err_code += (1<<14); }
     368:	f8db 3000 	ldr.w	r3, [fp]
  if (HW32_REG(timer_base + 0xFF4) != APB_TIMER_CID1) {err_code += (1<<13); }
     36c:	bf18      	it	ne
     36e:	f505 5500 	addne.w	r5, r5, #8192	; 0x2000
  if (HW32_REG(timer_base + 0xFF8) != APB_TIMER_CID2) {err_code += (1<<14); }
     372:	2b05      	cmp	r3, #5
  if (HW32_REG(timer_base + 0xFFC) != APB_TIMER_CID3) {err_code += (1<<15); }
     374:	f8d9 3000 	ldr.w	r3, [r9]
  if (HW32_REG(timer_base + 0xFF8) != APB_TIMER_CID2) {err_code += (1<<14); }
     378:	f000 8083 	beq.w	482 <timer_register_rw_test+0x27a>
  if (HW32_REG(timer_base + 0xFFC) != APB_TIMER_CID3) {err_code += (1<<15); }
     37c:	2bb1      	cmp	r3, #177	; 0xb1
  if (HW32_REG(timer_base + 0xFF8) != APB_TIMER_CID2) {err_code += (1<<14); }
     37e:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
  if (HW32_REG(timer_base + 0xFFC) != APB_TIMER_CID3) {err_code += (1<<15); }
     382:	d001      	beq.n	388 <timer_register_rw_test+0x180>
     384:	f505 4500 	add.w	r5, r5, #32768	; 0x8000


  if (err_code != 0) {
    printf ("ERROR : initial value failed (0x%x)\n", err_code);
     388:	4629      	mov	r1, r5
     38a:	484c      	ldr	r0, [pc, #304]	; (4bc <timer_register_rw_test+0x2b4>)
     38c:	f000 fe3e 	bl	100c <iprintf>
    return_val=1;
     390:	2501      	movs	r5, #1
    err_code = 0;
    }
  puts("- read/write");
     392:	484b      	ldr	r0, [pc, #300]	; (4c0 <timer_register_rw_test+0x2b8>)
     394:	f000 feae 	bl	10f4 <puts>

  CM3DS_MPS2_TIMER->VALUE = 0x3355AAFF;
     398:	494a      	ldr	r1, [pc, #296]	; (4c4 <timer_register_rw_test+0x2bc>)
  if (CM3DS_MPS2_TIMER->VALUE     != 0x3355AAFF) { err_code += (1<<0); }
  CM3DS_MPS2_TIMER->VALUE = 0xCCAA5500;
     39a:	4b4b      	ldr	r3, [pc, #300]	; (4c8 <timer_register_rw_test+0x2c0>)
  CM3DS_MPS2_TIMER->VALUE = 0x3355AAFF;
     39c:	6061      	str	r1, [r4, #4]
  if (CM3DS_MPS2_TIMER->VALUE     != 0x3355AAFF) { err_code += (1<<0); }
     39e:	6860      	ldr	r0, [r4, #4]
  CM3DS_MPS2_TIMER->VALUE = 0xCCAA5500;
     3a0:	6063      	str	r3, [r4, #4]
  if (CM3DS_MPS2_TIMER->VALUE     != 0xCCAA5500) { err_code += (1<<1); }
     3a2:	6862      	ldr	r2, [r4, #4]
  if (CM3DS_MPS2_TIMER->VALUE     != 0x3355AAFF) { err_code += (1<<0); }
     3a4:	1a41      	subs	r1, r0, r1
     3a6:	bf18      	it	ne
     3a8:	2101      	movne	r1, #1
  if (CM3DS_MPS2_TIMER->VALUE     != 0xCCAA5500) { err_code += (1<<1); }
     3aa:	429a      	cmp	r2, r3
  CM3DS_MPS2_TIMER->VALUE = 0x00000000;
     3ac:	f04f 0300 	mov.w	r3, #0
     3b0:	6063      	str	r3, [r4, #4]
  if (CM3DS_MPS2_TIMER->VALUE     != 0x00000000) { err_code += (1<<2); }
     3b2:	6863      	ldr	r3, [r4, #4]
  if (CM3DS_MPS2_TIMER->VALUE     != 0xCCAA5500) { err_code += (1<<1); }
     3b4:	bf18      	it	ne
     3b6:	3102      	addne	r1, #2
  if (CM3DS_MPS2_TIMER->VALUE     != 0x00000000) { err_code += (1<<2); }
     3b8:	b103      	cbz	r3, 3bc <timer_register_rw_test+0x1b4>
     3ba:	3104      	adds	r1, #4

  CM3DS_MPS2_TIMER->RELOAD = 0x3355AAFF;
     3bc:	4b41      	ldr	r3, [pc, #260]	; (4c4 <timer_register_rw_test+0x2bc>)
     3be:	60a3      	str	r3, [r4, #8]
  if (CM3DS_MPS2_TIMER->RELOAD    != 0x3355AAFF) { err_code += (1<<3); }
     3c0:	68a2      	ldr	r2, [r4, #8]
     3c2:	429a      	cmp	r2, r3
  CM3DS_MPS2_TIMER->RELOAD = 0xCCAA5500;
     3c4:	4b40      	ldr	r3, [pc, #256]	; (4c8 <timer_register_rw_test+0x2c0>)
  if (CM3DS_MPS2_TIMER->RELOAD    != 0x3355AAFF) { err_code += (1<<3); }
     3c6:	bf18      	it	ne
     3c8:	3108      	addne	r1, #8
  CM3DS_MPS2_TIMER->RELOAD = 0xCCAA5500;
     3ca:	60a3      	str	r3, [r4, #8]
  if (CM3DS_MPS2_TIMER->RELOAD    != 0xCCAA5500) { err_code += (1<<4); }
     3cc:	68a2      	ldr	r2, [r4, #8]
     3ce:	429a      	cmp	r2, r3
  CM3DS_MPS2_TIMER->RELOAD = 0x00000000;
     3d0:	f04f 0300 	mov.w	r3, #0
     3d4:	60a3      	str	r3, [r4, #8]
  if (CM3DS_MPS2_TIMER->RELOAD    != 0x00000000) { err_code += (1<<5); }
     3d6:	68a3      	ldr	r3, [r4, #8]
  if (CM3DS_MPS2_TIMER->RELOAD    != 0xCCAA5500) { err_code += (1<<4); }
     3d8:	bf18      	it	ne
     3da:	3110      	addne	r1, #16
  if (CM3DS_MPS2_TIMER->RELOAD    != 0x00000000) { err_code += (1<<5); }
     3dc:	b103      	cbz	r3, 3e0 <timer_register_rw_test+0x1d8>
     3de:	3120      	adds	r1, #32

  CM3DS_MPS2_TIMER->CTRL = 0x01; /* Set enable */
     3e0:	2301      	movs	r3, #1
     3e2:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x01) { err_code += (1<<6); }
     3e4:	6823      	ldr	r3, [r4, #0]
     3e6:	2b01      	cmp	r3, #1
  CM3DS_MPS2_TIMER->CTRL = 0x02; /* external select */
     3e8:	f04f 0302 	mov.w	r3, #2
     3ec:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x02) { err_code += (1<<7); }
     3ee:	6823      	ldr	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x01) { err_code += (1<<6); }
     3f0:	bf18      	it	ne
     3f2:	3140      	addne	r1, #64	; 0x40
  if (CM3DS_MPS2_TIMER->CTRL      != 0x02) { err_code += (1<<7); }
     3f4:	2b02      	cmp	r3, #2
  CM3DS_MPS2_TIMER->CTRL = 0x04; /* external clock select */
     3f6:	f04f 0304 	mov.w	r3, #4
     3fa:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x04) { err_code += (1<<8); }
     3fc:	6823      	ldr	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x02) { err_code += (1<<7); }
     3fe:	bf18      	it	ne
     400:	3180      	addne	r1, #128	; 0x80
  if (CM3DS_MPS2_TIMER->CTRL      != 0x04) { err_code += (1<<8); }
     402:	2b04      	cmp	r3, #4
  CM3DS_MPS2_TIMER->CTRL = 0x08; /* external clock select */
     404:	f04f 0308 	mov.w	r3, #8
     408:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x08) { err_code += (1<<9); }
     40a:	6823      	ldr	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x04) { err_code += (1<<8); }
     40c:	bf18      	it	ne
     40e:	f501 7180 	addne.w	r1, r1, #256	; 0x100
  if (CM3DS_MPS2_TIMER->CTRL      != 0x08) { err_code += (1<<9); }
     412:	2b08      	cmp	r3, #8
  CM3DS_MPS2_TIMER->CTRL = 0x00; /* all clear */
     414:	f04f 0300 	mov.w	r3, #0
     418:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x00) { err_code += (1<<10); }
     41a:	6823      	ldr	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->CTRL      != 0x08) { err_code += (1<<9); }
     41c:	bf18      	it	ne
     41e:	f501 7100 	addne.w	r1, r1, #512	; 0x200
  if (CM3DS_MPS2_TIMER->CTRL      != 0x00) { err_code += (1<<10); }
     422:	b10b      	cbz	r3, 428 <timer_register_rw_test+0x220>
     424:	f501 6180 	add.w	r1, r1, #1024	; 0x400

  /* Trigger timer interrupt status */
  CM3DS_MPS2_TIMER->RELOAD = 0x3;
     428:	2303      	movs	r3, #3
  CM3DS_MPS2_TIMER->VALUE  = 0x3;
  CM3DS_MPS2_TIMER->CTRL   = 0x9; /* enable with internal clock as source */
     42a:	2209      	movs	r2, #9
  CM3DS_MPS2_TIMER->RELOAD = 0x3;
     42c:	60a3      	str	r3, [r4, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x3;
     42e:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x9; /* enable with internal clock as source */
     430:	6022      	str	r2, [r4, #0]
  while ( CM3DS_MPS2_TIMER->INTSTATUS == 0);
     432:	68e3      	ldr	r3, [r4, #12]
     434:	2b00      	cmp	r3, #0
     436:	d0fc      	beq.n	432 <timer_register_rw_test+0x22a>
  CM3DS_MPS2_TIMER->CTRL   = 0x0; /* disable timer */
     438:	2300      	movs	r3, #0
     43a:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->INTSTATUS  != 0x01) { err_code += (1<<11); }
     43c:	68e3      	ldr	r3, [r4, #12]
     43e:	2b01      	cmp	r3, #1
     440:	d018      	beq.n	474 <timer_register_rw_test+0x26c>
  CM3DS_MPS2_TIMER->INTCLEAR = 0x1; /* clear timer interrupt */
     442:	2301      	movs	r3, #1
     444:	60e3      	str	r3, [r4, #12]
  if (CM3DS_MPS2_TIMER->INTSTATUS  != 0x00) { err_code += (1<<12); }
     446:	68e3      	ldr	r3, [r4, #12]
  if (CM3DS_MPS2_TIMER->INTSTATUS  != 0x01) { err_code += (1<<11); }
     448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
  if (CM3DS_MPS2_TIMER->INTSTATUS  != 0x00) { err_code += (1<<12); }
     44c:	b10b      	cbz	r3, 452 <timer_register_rw_test+0x24a>
     44e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000

  /* Generate return value */
  if (err_code != 0) {
    printf ("ERROR : Read/write failed (0x%x)\n", err_code);
     452:	481e      	ldr	r0, [pc, #120]	; (4cc <timer_register_rw_test+0x2c4>)
     454:	f000 fdda 	bl	100c <iprintf>
    return_val=1;
     458:	2501      	movs	r5, #1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     45a:	f44f 7180 	mov.w	r1, #256	; 0x100
     45e:	f44f 7200 	mov.w	r2, #512	; 0x200

  NVIC_ClearPendingIRQ(TIMER0_IRQn);
  NVIC_ClearPendingIRQ(TIMER1_IRQn);

  return(return_val);
}
     462:	4628      	mov	r0, r5
     464:	4b0c      	ldr	r3, [pc, #48]	; (498 <timer_register_rw_test+0x290>)
     466:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     46a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     46e:	b005      	add	sp, #20
     470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CM3DS_MPS2_TIMER->INTCLEAR = 0x1; /* clear timer interrupt */
     474:	60e3      	str	r3, [r4, #12]
  if (CM3DS_MPS2_TIMER->INTSTATUS  != 0x00) { err_code += (1<<12); }
     476:	68e3      	ldr	r3, [r4, #12]
     478:	2b00      	cmp	r3, #0
     47a:	d1e8      	bne.n	44e <timer_register_rw_test+0x246>
  if (err_code != 0) {
     47c:	2900      	cmp	r1, #0
     47e:	d0ec      	beq.n	45a <timer_register_rw_test+0x252>
     480:	e7e7      	b.n	452 <timer_register_rw_test+0x24a>
  if (HW32_REG(timer_base + 0xFFC) != APB_TIMER_CID3) {err_code += (1<<15); }
     482:	2bb1      	cmp	r3, #177	; 0xb1
     484:	f47f af7e 	bne.w	384 <timer_register_rw_test+0x17c>
  if (err_code != 0) {
     488:	2d00      	cmp	r5, #0
     48a:	d082      	beq.n	392 <timer_register_rw_test+0x18a>
     48c:	e77c      	b.n	388 <timer_register_rw_test+0x180>
     48e:	bf00      	nop
     490:	00001f24 	.word	0x00001f24
     494:	00001f34 	.word	0x00001f34
     498:	e000e100 	.word	0xe000e100
     49c:	40001000 	.word	0x40001000
     4a0:	40001fe4 	.word	0x40001fe4
     4a4:	40000fe4 	.word	0x40000fe4
     4a8:	40000fdc 	.word	0x40000fdc
     4ac:	40001fe0 	.word	0x40001fe0
     4b0:	40000fd8 	.word	0x40000fd8
     4b4:	40001fe8 	.word	0x40001fe8
     4b8:	40000fe0 	.word	0x40000fe0
     4bc:	00001f48 	.word	0x00001f48
     4c0:	00001f70 	.word	0x00001f70
     4c4:	3355aaff 	.word	0x3355aaff
     4c8:	ccaa5500 	.word	0xccaa5500
     4cc:	00001f80 	.word	0x00001f80
     4d0:	40001fd0 	.word	0x40001fd0
     4d4:	40000fd0 	.word	0x40000fd0
     4d8:	40001fd4 	.word	0x40001fd4
     4dc:	40000fd4 	.word	0x40000fd4
     4e0:	40001fd8 	.word	0x40001fd8
     4e4:	40001fdc 	.word	0x40001fdc
     4e8:	40000fec 	.word	0x40000fec

000004ec <timer_start_stop_test>:
  A polling loop is then use to wait until timer reach zero and reloaded
  (by checking interrupt status register).  The current value of the timer
  is then checked to make sure it is in the expected value range.

*/
int timer_start_stop_test(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER){
     4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ee:	4604      	mov	r4, r0
  int return_val=0;
  int err_code=0;
  unsigned long tvalue;
  puts("Timer start/stop test");
     4f0:	4847      	ldr	r0, [pc, #284]	; (610 <timer_start_stop_test+0x124>)
     4f2:	f000 fdff 	bl	10f4 <puts>
  puts("- timer enable");
     4f6:	4847      	ldr	r0, [pc, #284]	; (614 <timer_start_stop_test+0x128>)
     4f8:	f000 fdfc 	bl	10f4 <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     4fc:	f44f 7600 	mov.w	r6, #512	; 0x200
     500:	f44f 7380 	mov.w	r3, #256	; 0x100

  NVIC_DisableIRQ(TIMER0_IRQn);
  NVIC_DisableIRQ(TIMER1_IRQn);

  CM3DS_MPS2_TIMER->RELOAD = 0x1000;
     504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  CM3DS_MPS2_TIMER->VALUE  = 0x1000;
  CM3DS_MPS2_TIMER->CTRL = 0x01; /* Set enable */
     508:	2501      	movs	r5, #1
     50a:	4843      	ldr	r0, [pc, #268]	; (618 <timer_start_stop_test+0x12c>)
  counter = 0x100; /* Time out counter */
     50c:	4a43      	ldr	r2, [pc, #268]	; (61c <timer_start_stop_test+0x130>)
     50e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
     512:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  CM3DS_MPS2_TIMER->RELOAD = 0x1000;
     516:	60a1      	str	r1, [r4, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x1000;
     518:	6061      	str	r1, [r4, #4]
  CM3DS_MPS2_TIMER->CTRL = 0x01; /* Set enable */
     51a:	6025      	str	r5, [r4, #0]
  counter = 0x100; /* Time out counter */
     51c:	6013      	str	r3, [r2, #0]
  while ((CM3DS_MPS2_TIMER->VALUE > 0x900) && (counter>= 0)){
     51e:	6863      	ldr	r3, [r4, #4]
     520:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     524:	d807      	bhi.n	536 <timer_start_stop_test+0x4a>
     526:	e009      	b.n	53c <timer_start_stop_test+0x50>
    counter --;
     528:	6813      	ldr	r3, [r2, #0]
     52a:	3b01      	subs	r3, #1
     52c:	6013      	str	r3, [r2, #0]
  while ((CM3DS_MPS2_TIMER->VALUE > 0x900) && (counter>= 0)){
     52e:	6863      	ldr	r3, [r4, #4]
     530:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     534:	d902      	bls.n	53c <timer_start_stop_test+0x50>
     536:	6813      	ldr	r3, [r2, #0]
     538:	2b00      	cmp	r3, #0
     53a:	daf5      	bge.n	528 <timer_start_stop_test+0x3c>
    }
  CM3DS_MPS2_TIMER->CTRL = 0x00; /* stop timer for now */
     53c:	2500      	movs	r5, #0
     53e:	6025      	str	r5, [r4, #0]
  if (CM3DS_MPS2_TIMER->VALUE > 0x900) {
     540:	6863      	ldr	r3, [r4, #4]
     542:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     546:	d85d      	bhi.n	604 <timer_start_stop_test+0x118>
     548:	2702      	movs	r7, #2
     puts("ERROR : Timer not decrementing.");
     err_code += (1<<0);
     }

  tvalue = CM3DS_MPS2_TIMER->VALUE;
  puts("- timer disable");
     54a:	4835      	ldr	r0, [pc, #212]	; (620 <timer_start_stop_test+0x134>)
  tvalue = CM3DS_MPS2_TIMER->VALUE;
     54c:	6866      	ldr	r6, [r4, #4]
  puts("- timer disable");
     54e:	f000 fdd1 	bl	10f4 <puts>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     552:	bf00      	nop
     554:	bf00      	nop
  __NOP();
  __NOP();
  if (CM3DS_MPS2_TIMER->VALUE != tvalue) {
     556:	6863      	ldr	r3, [r4, #4]
     558:	42b3      	cmp	r3, r6
     55a:	d003      	beq.n	564 <timer_start_stop_test+0x78>
     puts("ERROR : Timer not stopping.");
     55c:	4831      	ldr	r0, [pc, #196]	; (624 <timer_start_stop_test+0x138>)
     err_code += (1<<1);
     55e:	463d      	mov	r5, r7
     puts("ERROR : Timer not stopping.");
     560:	f000 fdc8 	bl	10f4 <puts>
     }

  /* Check reload operation */
  puts("- timer reload");
     564:	4830      	ldr	r0, [pc, #192]	; (628 <timer_start_stop_test+0x13c>)
     566:	f000 fdc5 	bl	10f4 <puts>
  CM3DS_MPS2_TIMER->VALUE  = 0x10;
     56a:	2210      	movs	r2, #16
  CM3DS_MPS2_TIMER->CTRL = 0x09; /* Set enable, and interrupt generation */
     56c:	2309      	movs	r3, #9
  CM3DS_MPS2_TIMER->VALUE  = 0x10;
     56e:	6062      	str	r2, [r4, #4]
  CM3DS_MPS2_TIMER->CTRL = 0x09; /* Set enable, and interrupt generation */
     570:	6023      	str	r3, [r4, #0]
  while ( CM3DS_MPS2_TIMER->INTSTATUS == 0);
     572:	68e3      	ldr	r3, [r4, #12]
     574:	2b00      	cmp	r3, #0
     576:	d0fc      	beq.n	572 <timer_start_stop_test+0x86>
  CM3DS_MPS2_TIMER->CTRL = 0x00; /* Stop timer */
     578:	2300      	movs	r3, #0
     57a:	6023      	str	r3, [r4, #0]
  if (CM3DS_MPS2_TIMER->VALUE > CM3DS_MPS2_TIMER->RELOAD) {
     57c:	6862      	ldr	r2, [r4, #4]
     57e:	68a3      	ldr	r3, [r4, #8]
     580:	429a      	cmp	r2, r3
     582:	d829      	bhi.n	5d8 <timer_start_stop_test+0xec>
     puts("ERROR : Timer reload fail 1.");
     err_code += (1<<2);
     }
  if ( (CM3DS_MPS2_TIMER->RELOAD - CM3DS_MPS2_TIMER->VALUE) > 0x100 ) {
     584:	68a3      	ldr	r3, [r4, #8]
     586:	6862      	ldr	r2, [r4, #4]
     588:	1a9b      	subs	r3, r3, r2
     58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     58e:	d80d      	bhi.n	5ac <timer_start_stop_test+0xc0>
     puts("ERROR : Timer reload fail 2.");
     err_code += (1<<3);
     }

  // Need to lower the interrupt in the timer before clearing in the NVIC
  CM3DS_MPS2_TIMER->INTCLEAR = 1;
     590:	2001      	movs	r0, #1
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     592:	f44f 7180 	mov.w	r1, #256	; 0x100
     596:	f44f 7200 	mov.w	r2, #512	; 0x200
     59a:	4b1f      	ldr	r3, [pc, #124]	; (618 <timer_start_stop_test+0x12c>)
     59c:	60e0      	str	r0, [r4, #12]
     59e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     5a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  // timer is currently being tested
  NVIC_ClearPendingIRQ(TIMER0_IRQn);
  NVIC_ClearPendingIRQ(TIMER1_IRQn);

  /* Generate return value */
  if (err_code != 0) {
     5a6:	b985      	cbnz	r5, 5ca <timer_start_stop_test+0xde>
    return_val=1;
    err_code = 0;
    }

  return(return_val);
}
     5a8:	4628      	mov	r0, r5
     5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     puts("ERROR : Timer reload fail 2.");
     5ac:	481f      	ldr	r0, [pc, #124]	; (62c <timer_start_stop_test+0x140>)
     5ae:	f000 fda1 	bl	10f4 <puts>
  CM3DS_MPS2_TIMER->INTCLEAR = 1;
     5b2:	2001      	movs	r0, #1
     5b4:	f44f 7180 	mov.w	r1, #256	; 0x100
     5b8:	f44f 7200 	mov.w	r2, #512	; 0x200
     5bc:	4b16      	ldr	r3, [pc, #88]	; (618 <timer_start_stop_test+0x12c>)
     5be:	60e0      	str	r0, [r4, #12]
     err_code += (1<<3);
     5c0:	3508      	adds	r5, #8
     5c2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     5c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    printf ("ERROR : start/stop failed (0x%x)\n", err_code);
     5ca:	4629      	mov	r1, r5
    return_val=1;
     5cc:	2501      	movs	r5, #1
    printf ("ERROR : start/stop failed (0x%x)\n", err_code);
     5ce:	4818      	ldr	r0, [pc, #96]	; (630 <timer_start_stop_test+0x144>)
     5d0:	f000 fd1c 	bl	100c <iprintf>
}
     5d4:	4628      	mov	r0, r5
     5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     puts("ERROR : Timer reload fail 1.");
     5d8:	4816      	ldr	r0, [pc, #88]	; (634 <timer_start_stop_test+0x148>)
     5da:	f000 fd8b 	bl	10f4 <puts>
  if ( (CM3DS_MPS2_TIMER->RELOAD - CM3DS_MPS2_TIMER->VALUE) > 0x100 ) {
     5de:	68a3      	ldr	r3, [r4, #8]
     5e0:	6862      	ldr	r2, [r4, #4]
     err_code += (1<<2);
     5e2:	3504      	adds	r5, #4
  if ( (CM3DS_MPS2_TIMER->RELOAD - CM3DS_MPS2_TIMER->VALUE) > 0x100 ) {
     5e4:	1a9b      	subs	r3, r3, r2
     5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     5ea:	d8df      	bhi.n	5ac <timer_start_stop_test+0xc0>
  CM3DS_MPS2_TIMER->INTCLEAR = 1;
     5ec:	2001      	movs	r0, #1
     5ee:	f44f 7180 	mov.w	r1, #256	; 0x100
     5f2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5f6:	4b08      	ldr	r3, [pc, #32]	; (618 <timer_start_stop_test+0x12c>)
     5f8:	60e0      	str	r0, [r4, #12]
     5fa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     5fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     602:	e7e2      	b.n	5ca <timer_start_stop_test+0xde>
     puts("ERROR : Timer not decrementing.");
     604:	480c      	ldr	r0, [pc, #48]	; (638 <timer_start_stop_test+0x14c>)
     606:	f000 fd75 	bl	10f4 <puts>
     60a:	2703      	movs	r7, #3
     err_code += (1<<0);
     60c:	2501      	movs	r5, #1
     60e:	e79c      	b.n	54a <timer_start_stop_test+0x5e>
     610:	00001fa4 	.word	0x00001fa4
     614:	00001fbc 	.word	0x00001fbc
     618:	e000e100 	.word	0xe000e100
     61c:	2000007c 	.word	0x2000007c
     620:	00001fec 	.word	0x00001fec
     624:	00001ffc 	.word	0x00001ffc
     628:	00002018 	.word	0x00002018
     62c:	00002048 	.word	0x00002048
     630:	00002068 	.word	0x00002068
     634:	00002028 	.word	0x00002028
     638:	00001fcc 	.word	0x00001fcc

0000063c <timer_interrupt_test_1>:
   The counter (software variable) is increased from 0 to 0x100.
   Check that timer interrupt did not take place.
   (timer0_irq_occurred and timer1_irq_occurred are 0).

*/
int timer_interrupt_test_1(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER){
     63c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     640:	4607      	mov	r7, r0
  int return_val=0;
  int err_code=0;

  puts ("Timer interrupt test");
     642:	4872      	ldr	r0, [pc, #456]	; (80c <timer_interrupt_test_1+0x1d0>)
     644:	f000 fd56 	bl	10f4 <puts>
  puts ("- Test interrupt generation enabled.");
     648:	4871      	ldr	r0, [pc, #452]	; (810 <timer_interrupt_test_1+0x1d4>)
     64a:	f000 fd53 	bl	10f4 <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     64e:	f44f 7080 	mov.w	r0, #256	; 0x100
     652:	f44f 7100 	mov.w	r1, #512	; 0x200
  CM3DS_MPS2_TIMER->VALUE = 0; /* Disable timer */
     656:	2200      	movs	r2, #0
     658:	4b6e      	ldr	r3, [pc, #440]	; (814 <timer_interrupt_test_1+0x1d8>)
  NVIC_DisableIRQ(TIMER1_IRQn);
  NVIC_ClearPendingIRQ(TIMER0_IRQn);
  NVIC_ClearPendingIRQ(TIMER1_IRQn);

  /* Check which timer is being tested and setup software flags */
  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0) {
     65a:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  CM3DS_MPS2_TIMER->VALUE = 0; /* Disable timer */
     65e:	607a      	str	r2, [r7, #4]
     660:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
     664:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     668:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
     66c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0) {
     670:	f000 80a0 	beq.w	7b4 <timer_interrupt_test_1+0x178>

    NVIC_EnableIRQ(TIMER0_IRQn);  /* Enable Timer Interrupt */

    }

  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1) {
     674:	4868      	ldr	r0, [pc, #416]	; (818 <timer_interrupt_test_1+0x1dc>)
     676:	4287      	cmp	r7, r0
     678:	d050      	beq.n	71c <timer_interrupt_test_1+0xe0>
    NVIC_EnableIRQ(TIMER1_IRQn);  /* Enable Timer Interrupt */

    }


  CM3DS_MPS2_TIMER->RELOAD = 0x01FF;
     67a:	f240 13ff 	movw	r3, #511	; 0x1ff
  CM3DS_MPS2_TIMER->VALUE  = 0x01FF;
  CM3DS_MPS2_TIMER->CTRL   = 0x0009;  /* Timer enabled */
     67e:	2109      	movs	r1, #9
  counter = 0;
     680:	4c66      	ldr	r4, [pc, #408]	; (81c <timer_interrupt_test_1+0x1e0>)
     682:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 838 <timer_interrupt_test_1+0x1fc>
     686:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 83c <timer_interrupt_test_1+0x200>
     68a:	4d65      	ldr	r5, [pc, #404]	; (820 <timer_interrupt_test_1+0x1e4>)
     68c:	4e65      	ldr	r6, [pc, #404]	; (824 <timer_interrupt_test_1+0x1e8>)
  CM3DS_MPS2_TIMER->RELOAD = 0x01FF;
     68e:	60bb      	str	r3, [r7, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x01FF;
     690:	607b      	str	r3, [r7, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x0009;  /* Timer enabled */
     692:	6039      	str	r1, [r7, #0]
  counter = 0;
     694:	6022      	str	r2, [r4, #0]
      counter ++;
      };
    CM3DS_MPS2_TIMER->CTRL   = 0x0000;  /* Stop Timer */
    }
  /* Check timeout has not occurred */
  if (counter >= 0x300) {
     696:	6823      	ldr	r3, [r4, #0]
     698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     69c:	da6b      	bge.n	776 <timer_interrupt_test_1+0x13a>
  int err_code=0;
     69e:	f04f 0800 	mov.w	r8, #0
     puts("ERROR : Timer interrupt enable fail.");
     err_code += (1<<0);
    }
  counter = 0;
     6a2:	f04f 0b00 	mov.w	fp, #0

  puts ("- Test interrupt generation disabled.");
     6a6:	4860      	ldr	r0, [pc, #384]	; (828 <timer_interrupt_test_1+0x1ec>)
  counter = 0;
     6a8:	f8c4 b000 	str.w	fp, [r4]
  puts ("- Test interrupt generation disabled.");
     6ac:	f000 fd22 	bl	10f4 <puts>
  timer0_irq_expected = 0;
  timer1_irq_expected = 0;
  timer0_irq_occurred = 0;
  timer1_irq_occurred = 0;

  CM3DS_MPS2_TIMER->RELOAD = 0x001F;
     6b0:	231f      	movs	r3, #31
  CM3DS_MPS2_TIMER->VALUE  = 0x001F;
  CM3DS_MPS2_TIMER->CTRL   = 0x0001;  /* Timer enabled, with interrupt generation disabled */
     6b2:	2201      	movs	r2, #1
  timer0_irq_expected = 0;
     6b4:	f8ca b000 	str.w	fp, [sl]
  timer1_irq_expected = 0;
     6b8:	f8c9 b000 	str.w	fp, [r9]
  timer0_irq_occurred = 0;
     6bc:	f8c5 b000 	str.w	fp, [r5]
  timer1_irq_occurred = 0;
     6c0:	f8c6 b000 	str.w	fp, [r6]
  CM3DS_MPS2_TIMER->RELOAD = 0x001F;
     6c4:	60bb      	str	r3, [r7, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x001F;
     6c6:	607b      	str	r3, [r7, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x0001;  /* Timer enabled, with interrupt generation disabled */
     6c8:	603a      	str	r2, [r7, #0]
  counter = 0;
     6ca:	f8c4 b000 	str.w	fp, [r4]
  while ((counter<0x100) && (timer0_irq_occurred==0) && (timer1_irq_occurred==0)) {
     6ce:	6823      	ldr	r3, [r4, #0]
     6d0:	2bff      	cmp	r3, #255	; 0xff
     6d2:	dd08      	ble.n	6e6 <timer_interrupt_test_1+0xaa>
     6d4:	e00a      	b.n	6ec <timer_interrupt_test_1+0xb0>
     6d6:	6833      	ldr	r3, [r6, #0]
     6d8:	b943      	cbnz	r3, 6ec <timer_interrupt_test_1+0xb0>
    counter++;
     6da:	6823      	ldr	r3, [r4, #0]
     6dc:	3301      	adds	r3, #1
     6de:	6023      	str	r3, [r4, #0]
  while ((counter<0x100) && (timer0_irq_occurred==0) && (timer1_irq_occurred==0)) {
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	2bff      	cmp	r3, #255	; 0xff
     6e4:	dc02      	bgt.n	6ec <timer_interrupt_test_1+0xb0>
     6e6:	682b      	ldr	r3, [r5, #0]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d0f4      	beq.n	6d6 <timer_interrupt_test_1+0x9a>
  }
  CM3DS_MPS2_TIMER->CTRL   = 0x0000;  /* Stop Timer */
     6ec:	2300      	movs	r3, #0
     6ee:	603b      	str	r3, [r7, #0]
  if ((timer0_irq_occurred!=0) || (timer1_irq_occurred!=0)) {
     6f0:	682b      	ldr	r3, [r5, #0]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d145      	bne.n	782 <timer_interrupt_test_1+0x146>
     6f6:	6833      	ldr	r3, [r6, #0]
     6f8:	2b00      	cmp	r3, #0
     6fa:	d142      	bne.n	782 <timer_interrupt_test_1+0x146>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     6fc:	f44f 7080 	mov.w	r0, #256	; 0x100
     700:	f44f 7100 	mov.w	r1, #512	; 0x200
     704:	4a43      	ldr	r2, [pc, #268]	; (814 <timer_interrupt_test_1+0x1d8>)
     puts("ERROR : Timer interrupt disable fail.");
     err_code += (1<<1);
    }
  counter = 0;
     706:	6023      	str	r3, [r4, #0]
     708:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
     70c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80

  NVIC_DisableIRQ(TIMER0_IRQn);
  NVIC_DisableIRQ(TIMER1_IRQn);

  /* Generate return value */
  if (err_code != 0) {
     710:	f1b8 0f00 	cmp.w	r8, #0
     714:	d145      	bne.n	7a2 <timer_interrupt_test_1+0x166>
    return_val=1;
    err_code = 0;
    }

  return(return_val);
}
     716:	4640      	mov	r0, r8
     718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    timer1_irq_expected = 1;
     71c:	2401      	movs	r4, #1
  CM3DS_MPS2_TIMER->RELOAD = 0x01FF;
     71e:	f240 10ff 	movw	r0, #511	; 0x1ff
  CM3DS_MPS2_TIMER->CTRL   = 0x0009;  /* Timer enabled */
     722:	f04f 0c09 	mov.w	ip, #9
    timer0_irq_expected = 0;
     726:	f8df a110 	ldr.w	sl, [pc, #272]	; 838 <timer_interrupt_test_1+0x1fc>
    timer1_irq_expected = 1;
     72a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 83c <timer_interrupt_test_1+0x200>
    timer0_irq_expected = 0;
     72e:	f8ca 2000 	str.w	r2, [sl]
    timer1_irq_occurred = 0;
     732:	4e3c      	ldr	r6, [pc, #240]	; (824 <timer_interrupt_test_1+0x1e8>)
    timer1_irq_expected = 1;
     734:	f8c9 4000 	str.w	r4, [r9]
    timer0_irq_occurred = 0;
     738:	4d39      	ldr	r5, [pc, #228]	; (820 <timer_interrupt_test_1+0x1e4>)
  counter = 0;
     73a:	4c38      	ldr	r4, [pc, #224]	; (81c <timer_interrupt_test_1+0x1e0>)
    timer0_irq_occurred = 0;
     73c:	602a      	str	r2, [r5, #0]
    timer1_irq_occurred = 0;
     73e:	6032      	str	r2, [r6, #0]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     740:	6019      	str	r1, [r3, #0]
  CM3DS_MPS2_TIMER->RELOAD = 0x01FF;
     742:	60b8      	str	r0, [r7, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x01FF;
     744:	6078      	str	r0, [r7, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x0009;  /* Timer enabled */
     746:	f8c7 c000 	str.w	ip, [r7]
  counter = 0;
     74a:	6022      	str	r2, [r4, #0]
    while (( timer1_irq_occurred < 2) && (counter < 0x300)){
     74c:	6833      	ldr	r3, [r6, #0]
     74e:	2b01      	cmp	r3, #1
     750:	dd06      	ble.n	760 <timer_interrupt_test_1+0x124>
     752:	e009      	b.n	768 <timer_interrupt_test_1+0x12c>
      counter ++;
     754:	6823      	ldr	r3, [r4, #0]
     756:	3301      	adds	r3, #1
     758:	6023      	str	r3, [r4, #0]
    while (( timer1_irq_occurred < 2) && (counter < 0x300)){
     75a:	6833      	ldr	r3, [r6, #0]
     75c:	2b01      	cmp	r3, #1
     75e:	dc03      	bgt.n	768 <timer_interrupt_test_1+0x12c>
     760:	6823      	ldr	r3, [r4, #0]
     762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     766:	dbf5      	blt.n	754 <timer_interrupt_test_1+0x118>
    CM3DS_MPS2_TIMER->CTRL   = 0x0000;  /* Stop Timer */
     768:	2200      	movs	r2, #0
     76a:	4b2b      	ldr	r3, [pc, #172]	; (818 <timer_interrupt_test_1+0x1dc>)
     76c:	601a      	str	r2, [r3, #0]
  if (counter >= 0x300) {
     76e:	6823      	ldr	r3, [r4, #0]
     770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     774:	db93      	blt.n	69e <timer_interrupt_test_1+0x62>
     puts("ERROR : Timer interrupt enable fail.");
     776:	482d      	ldr	r0, [pc, #180]	; (82c <timer_interrupt_test_1+0x1f0>)
     778:	f000 fcbc 	bl	10f4 <puts>
     err_code += (1<<0);
     77c:	f04f 0801 	mov.w	r8, #1
     780:	e78f      	b.n	6a2 <timer_interrupt_test_1+0x66>
     puts("ERROR : Timer interrupt disable fail.");
     782:	482b      	ldr	r0, [pc, #172]	; (830 <timer_interrupt_test_1+0x1f4>)
     784:	f000 fcb6 	bl	10f4 <puts>
  counter = 0;
     788:	2000      	movs	r0, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     78a:	f44f 7180 	mov.w	r1, #256	; 0x100
     78e:	f44f 7200 	mov.w	r2, #512	; 0x200
     792:	4b20      	ldr	r3, [pc, #128]	; (814 <timer_interrupt_test_1+0x1d8>)
     794:	6020      	str	r0, [r4, #0]
     err_code += (1<<1);
     796:	f108 0802 	add.w	r8, r8, #2
     79a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
     79e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    printf ("ERROR : Interrupt test failed (0x%x)\n", err_code);
     7a2:	4641      	mov	r1, r8
    return_val=1;
     7a4:	f04f 0801 	mov.w	r8, #1
    printf ("ERROR : Interrupt test failed (0x%x)\n", err_code);
     7a8:	4822      	ldr	r0, [pc, #136]	; (834 <timer_interrupt_test_1+0x1f8>)
     7aa:	f000 fc2f 	bl	100c <iprintf>
}
     7ae:	4640      	mov	r0, r8
     7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    timer0_irq_expected = 1;
     7b4:	2401      	movs	r4, #1
  CM3DS_MPS2_TIMER->RELOAD = 0x01FF;
     7b6:	f240 11ff 	movw	r1, #511	; 0x1ff
  CM3DS_MPS2_TIMER->CTRL   = 0x0009;  /* Timer enabled */
     7ba:	f04f 0c09 	mov.w	ip, #9
    timer0_irq_expected = 1;
     7be:	f8df a078 	ldr.w	sl, [pc, #120]	; 838 <timer_interrupt_test_1+0x1fc>
    timer0_irq_occurred = 0;
     7c2:	4d17      	ldr	r5, [pc, #92]	; (820 <timer_interrupt_test_1+0x1e4>)
    timer0_irq_expected = 1;
     7c4:	f8ca 4000 	str.w	r4, [sl]
    timer1_irq_expected = 0;
     7c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 83c <timer_interrupt_test_1+0x200>
    timer1_irq_occurred = 0;
     7cc:	4e15      	ldr	r6, [pc, #84]	; (824 <timer_interrupt_test_1+0x1e8>)
  counter = 0;
     7ce:	4c13      	ldr	r4, [pc, #76]	; (81c <timer_interrupt_test_1+0x1e0>)
    timer1_irq_expected = 0;
     7d0:	f8c9 2000 	str.w	r2, [r9]
    timer0_irq_occurred = 0;
     7d4:	602a      	str	r2, [r5, #0]
    timer1_irq_occurred = 0;
     7d6:	6032      	str	r2, [r6, #0]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     7d8:	6018      	str	r0, [r3, #0]
  CM3DS_MPS2_TIMER->RELOAD = 0x01FF;
     7da:	60b9      	str	r1, [r7, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x01FF;
     7dc:	6079      	str	r1, [r7, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x0009;  /* Timer enabled */
     7de:	f8c7 c000 	str.w	ip, [r7]
  counter = 0;
     7e2:	6022      	str	r2, [r4, #0]
    while (( timer0_irq_occurred < 2) && (counter < 0x300)){
     7e4:	682b      	ldr	r3, [r5, #0]
     7e6:	2b01      	cmp	r3, #1
     7e8:	dd06      	ble.n	7f8 <timer_interrupt_test_1+0x1bc>
     7ea:	e009      	b.n	800 <timer_interrupt_test_1+0x1c4>
      counter ++;
     7ec:	6823      	ldr	r3, [r4, #0]
     7ee:	3301      	adds	r3, #1
     7f0:	6023      	str	r3, [r4, #0]
    while (( timer0_irq_occurred < 2) && (counter < 0x300)){
     7f2:	682b      	ldr	r3, [r5, #0]
     7f4:	2b01      	cmp	r3, #1
     7f6:	dc03      	bgt.n	800 <timer_interrupt_test_1+0x1c4>
     7f8:	6823      	ldr	r3, [r4, #0]
     7fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     7fe:	dbf5      	blt.n	7ec <timer_interrupt_test_1+0x1b0>
    CM3DS_MPS2_TIMER->CTRL   = 0x0000;  /* Stop Timer */
     800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     804:	2200      	movs	r2, #0
     806:	601a      	str	r2, [r3, #0]
     808:	e745      	b.n	696 <timer_interrupt_test_1+0x5a>
     80a:	bf00      	nop
     80c:	0000208c 	.word	0x0000208c
     810:	000020a4 	.word	0x000020a4
     814:	e000e100 	.word	0xe000e100
     818:	40001000 	.word	0x40001000
     81c:	2000007c 	.word	0x2000007c
     820:	20000084 	.word	0x20000084
     824:	20000080 	.word	0x20000080
     828:	000020f4 	.word	0x000020f4
     82c:	000020cc 	.word	0x000020cc
     830:	0000211c 	.word	0x0000211c
     834:	00002144 	.word	0x00002144
     838:	20000074 	.word	0x20000074
     83c:	20000078 	.word	0x20000078

00000840 <timer_external_input>:
   This time the timer interrupt should be triggered.

   it then clear up the interrupt settings and report test status.

*/
int timer_external_input(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER){
     840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     844:	4605      	mov	r5, r0
  int return_val=0;
  int err_code=0;
  unsigned long tvalue;
  uint32_t timer_value;

  puts ("Timer external input test");
     846:	48bc      	ldr	r0, [pc, #752]	; (b38 <timer_external_input+0x2f8>)
     848:	f000 fc54 	bl	10f4 <puts>
  /* Set external inputs low */
  CM3DS_MPS2_GPIO0->OUTENABLESET    = (1<<1) | (1<<6);
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     84c:	2600      	movs	r6, #0

  CM3DS_MPS2_TIMER->RELOAD = 0x00FF;
     84e:	23ff      	movs	r3, #255	; 0xff
  CM3DS_MPS2_TIMER->VALUE  = 0x00FF;
  CM3DS_MPS2_TIMER->CTRL   = 0x000B;  /* Timer enabled, use external input, interrupt enabled */
     850:	210b      	movs	r1, #11
  CM3DS_MPS2_GPIO0->OUTENABLESET    = (1<<1) | (1<<6);
     852:	2042      	movs	r0, #66	; 0x42
     854:	4ab9      	ldr	r2, [pc, #740]	; (b3c <timer_external_input+0x2fc>)
     856:	6110      	str	r0, [r2, #16]
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     858:	f8c2 6508 	str.w	r6, [r2, #1288]	; 0x508

  tvalue = CM3DS_MPS2_TIMER->VALUE;
  puts("- timer use ext. input");
     85c:	48b8      	ldr	r0, [pc, #736]	; (b40 <timer_external_input+0x300>)
  CM3DS_MPS2_TIMER->RELOAD = 0x00FF;
     85e:	60ab      	str	r3, [r5, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x00FF;
     860:	606b      	str	r3, [r5, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x000B;  /* Timer enabled, use external input, interrupt enabled */
     862:	6029      	str	r1, [r5, #0]
  tvalue = CM3DS_MPS2_TIMER->VALUE;
     864:	686c      	ldr	r4, [r5, #4]
  puts("- timer use ext. input");
     866:	f000 fc45 	bl	10f4 <puts>
     86a:	bf00      	nop
     86c:	bf00      	nop
  __NOP();  /* Some delay is needed due to double flip-flop synchronization logic */
  __NOP();
  if (CM3DS_MPS2_TIMER->VALUE != tvalue) {
     86e:	686b      	ldr	r3, [r5, #4]
     870:	42a3      	cmp	r3, r4
     872:	f040 81cd 	bne.w	c10 <timer_external_input+0x3d0>
     876:	2702      	movs	r7, #2
     puts("ERROR : Timer not stopping when external input is low.");
     err_code += (1<<0);
     }

  puts("- use SysTick to generate ext. input pulse");
     878:	48b2      	ldr	r0, [pc, #712]	; (b44 <timer_external_input+0x304>)
     87a:	f000 fc3b 	bl	10f4 <puts>
  CM3DS_MPS2_TIMER->VALUE  = 0xFE; /* Use 0xFE so that it count to 0 */
     87e:	23fe      	movs	r3, #254	; 0xfe
  counter = 0;
     880:	2200      	movs	r2, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     882:	f44f 7080 	mov.w	r0, #256	; 0x100
     886:	f44f 7100 	mov.w	r1, #512	; 0x200
   * the fact that the SysTick reload value is set to a larger value than the
   * system timer start value.  This therefore should allow the system timer to
   * count round multiple times, and should have the expected outcome
   * regardless of whether APB is running at full speed or half speed
   */
  SysTick->LOAD = (0x100<<2)-1;
     88a:	f240 3eff 	movw	lr, #1023	; 0x3ff
  SysTick->VAL  = 0;
  SysTick->CTRL = 0x7; /* Enable, use internal clock, interrupt enable */
     88e:	f04f 0c07 	mov.w	ip, #7
  CM3DS_MPS2_TIMER->VALUE  = 0xFE; /* Use 0xFE so that it count to 0 */
     892:	606b      	str	r3, [r5, #4]
  counter = 0;
     894:	4cac      	ldr	r4, [pc, #688]	; (b48 <timer_external_input+0x308>)
     896:	4bad      	ldr	r3, [pc, #692]	; (b4c <timer_external_input+0x30c>)
     898:	6022      	str	r2, [r4, #0]
     89a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
     89e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     8a2:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
     8a6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  SysTick->LOAD = (0x100<<2)-1;
     8aa:	f843 ecec 	str.w	lr, [r3, #-236]
  SysTick->VAL  = 0;
     8ae:	f843 2ce8 	str.w	r2, [r3, #-232]
  SysTick->CTRL = 0x7; /* Enable, use internal clock, interrupt enable */
     8b2:	f843 ccf0 	str.w	ip, [r3, #-240]

  while (counter < 2); /* SysTick handler trigger twice */
     8b6:	6823      	ldr	r3, [r4, #0]
     8b8:	2b01      	cmp	r3, #1
     8ba:	ddfc      	ble.n	8b6 <timer_external_input+0x76>

  /* Timer should be reloaded, expected value between 0xA0 to 0xFF (reload value) */
  timer_value = CM3DS_MPS2_TIMER->VALUE;
     8bc:	6869      	ldr	r1, [r5, #4]
  if ((timer_value > 0xFF) || (timer_value < 0xA0)) {
     8be:	f1a1 03a0 	sub.w	r3, r1, #160	; 0xa0
     8c2:	2b5f      	cmp	r3, #95	; 0x5f
     8c4:	f200 81aa 	bhi.w	c1c <timer_external_input+0x3dc>
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
     8c8:	4ba0      	ldr	r3, [pc, #640]	; (b4c <timer_external_input+0x30c>)
     8ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     8ce:	05d8      	lsls	r0, r3, #23
     8d0:	d403      	bmi.n	8da <timer_external_input+0x9a>
    printf("ERROR : Timer not running when external input is high (0x%x).\n", timer_value);
    err_code += (1<<1);
  }

  /* Timer interrupt should be pending */
  if (((NVIC_GetPendingIRQ(TIMER0_IRQn)==0)&&(CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0))||
     8d2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
     8d6:	f000 8174 	beq.w	bc2 <timer_external_input+0x382>
     8da:	4b9c      	ldr	r3, [pc, #624]	; (b4c <timer_external_input+0x30c>)
     8dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     8e0:	0599      	lsls	r1, r3, #22
     8e2:	f140 816a 	bpl.w	bba <timer_external_input+0x37a>
    {
     puts("ERROR : Timer not trigger #1.");
     err_code += (1<<2);
    }

  if (CM3DS_MPS2_TIMER->INTSTATUS==0) {
     8e6:	68eb      	ldr	r3, [r5, #12]
     8e8:	2b00      	cmp	r3, #0
     8ea:	f000 8172 	beq.w	bd2 <timer_external_input+0x392>
    puts("ERROR : Timer not trigger #2.");
    err_code += (1<<3);
    }
  else {
    CM3DS_MPS2_TIMER->INTCLEAR=1; /* Clear interrupt status */
     8ee:	2301      	movs	r3, #1
     8f0:	60eb      	str	r3, [r5, #12]
    if (CM3DS_MPS2_TIMER->INTSTATUS!=0) {
     8f2:	68eb      	ldr	r3, [r5, #12]
     8f4:	2b00      	cmp	r3, #0
     8f6:	f040 8186 	bne.w	c06 <timer_external_input+0x3c6>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     8fa:	f44f 7180 	mov.w	r1, #256	; 0x100
     8fe:	f44f 7200 	mov.w	r2, #512	; 0x200
     902:	4b92      	ldr	r3, [pc, #584]	; (b4c <timer_external_input+0x30c>)

  NVIC_ClearPendingIRQ(TIMER0_IRQn);
  NVIC_ClearPendingIRQ(TIMER1_IRQn);


  puts("- use EXTIN as clock");
     904:	4892      	ldr	r0, [pc, #584]	; (b50 <timer_external_input+0x310>)
     906:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     90a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     90e:	f000 fbf1 	bl	10f4 <puts>
  CM3DS_MPS2_TIMER->VALUE = 0xC0;
  CM3DS_MPS2_TIMER->CTRL   = 0x0007;  /* Timer enabled, use external input as clock, interrupt disabled */
     912:	2207      	movs	r2, #7
  CM3DS_MPS2_TIMER->VALUE = 0xC0;
     914:	20c0      	movs	r0, #192	; 0xc0
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     916:	2100      	movs	r1, #0
  counter = 10;                        /* delay */
     918:	230a      	movs	r3, #10
  CM3DS_MPS2_TIMER->VALUE = 0xC0;
     91a:	6068      	str	r0, [r5, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x0007;  /* Timer enabled, use external input as clock, interrupt disabled */
     91c:	602a      	str	r2, [r5, #0]
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     91e:	4a87      	ldr	r2, [pc, #540]	; (b3c <timer_external_input+0x2fc>)
     920:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
  counter = 10;                        /* delay */
     924:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     926:	6823      	ldr	r3, [r4, #0]
     928:	428b      	cmp	r3, r1
     92a:	dd05      	ble.n	938 <timer_external_input+0xf8>
    counter --;
     92c:	6823      	ldr	r3, [r4, #0]
     92e:	3b01      	subs	r3, #1
     930:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     932:	6823      	ldr	r3, [r4, #0]
     934:	2b00      	cmp	r3, #0
     936:	dcf9      	bgt.n	92c <timer_external_input+0xec>
    }
  if (CM3DS_MPS2_TIMER->VALUE != 0xC0) {
     938:	686b      	ldr	r3, [r5, #4]
     93a:	2bc0      	cmp	r3, #192	; 0xc0
     93c:	d003      	beq.n	946 <timer_external_input+0x106>
     puts("ERROR : Timer change unexpectedly 1.");
     93e:	4885      	ldr	r0, [pc, #532]	; (b54 <timer_external_input+0x314>)
     940:	f000 fbd8 	bl	10f4 <puts>
     err_code += (1<<5);
     944:	3620      	adds	r6, #32
    }
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     946:	2242      	movs	r2, #66	; 0x42
     948:	4b7c      	ldr	r3, [pc, #496]	; (b3c <timer_external_input+0x2fc>)
     94a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     94e:	f3bf 8f6f 	isb	sy
     952:	f3bf 8f6f 	isb	sy
  __ISB();
  __ISB();

  if (CM3DS_MPS2_TIMER->VALUE != 0xBF) {
     956:	686b      	ldr	r3, [r5, #4]
     958:	2bbf      	cmp	r3, #191	; 0xbf
     95a:	d003      	beq.n	964 <timer_external_input+0x124>
     puts("ERROR : Timer decrement failed.");
     95c:	487e      	ldr	r0, [pc, #504]	; (b58 <timer_external_input+0x318>)
     95e:	f000 fbc9 	bl	10f4 <puts>
     err_code += (1<<6);
     962:	3640      	adds	r6, #64	; 0x40
    }
  counter = 10;                        /* delay */
     964:	230a      	movs	r3, #10
     966:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     968:	6823      	ldr	r3, [r4, #0]
     96a:	2b00      	cmp	r3, #0
     96c:	dd05      	ble.n	97a <timer_external_input+0x13a>
    counter --;
     96e:	6823      	ldr	r3, [r4, #0]
     970:	3b01      	subs	r3, #1
     972:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     974:	6823      	ldr	r3, [r4, #0]
     976:	2b00      	cmp	r3, #0
     978:	dcf9      	bgt.n	96e <timer_external_input+0x12e>
    }
  if (CM3DS_MPS2_TIMER->VALUE != 0xBF) {
     97a:	686b      	ldr	r3, [r5, #4]
     97c:	2bbf      	cmp	r3, #191	; 0xbf
     97e:	d003      	beq.n	988 <timer_external_input+0x148>
     puts("ERROR : Timer change unexpectedly 2.");
     980:	4876      	ldr	r0, [pc, #472]	; (b5c <timer_external_input+0x31c>)
     982:	f000 fbb7 	bl	10f4 <puts>
     err_code += (1<<7);
     986:	3680      	adds	r6, #128	; 0x80
    }
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should NOT decrement */
     988:	2100      	movs	r1, #0
  counter = 10;                        /* delay */
     98a:	230a      	movs	r3, #10
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should NOT decrement */
     98c:	4a6b      	ldr	r2, [pc, #428]	; (b3c <timer_external_input+0x2fc>)
     98e:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
  counter = 10;                        /* delay */
     992:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     994:	6823      	ldr	r3, [r4, #0]
     996:	428b      	cmp	r3, r1
     998:	dd05      	ble.n	9a6 <timer_external_input+0x166>
    counter --;
     99a:	6823      	ldr	r3, [r4, #0]
     99c:	3b01      	subs	r3, #1
     99e:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     9a0:	6823      	ldr	r3, [r4, #0]
     9a2:	2b00      	cmp	r3, #0
     9a4:	dcf9      	bgt.n	99a <timer_external_input+0x15a>
    }
  if (CM3DS_MPS2_TIMER->VALUE != 0xBF) {
     9a6:	686b      	ldr	r3, [r5, #4]
     9a8:	2bbf      	cmp	r3, #191	; 0xbf
     9aa:	d004      	beq.n	9b6 <timer_external_input+0x176>
     puts("ERROR : Timer change unexpectedly 3.");
     9ac:	486c      	ldr	r0, [pc, #432]	; (b60 <timer_external_input+0x320>)
     9ae:	f000 fba1 	bl	10f4 <puts>
     err_code += (1<<8);
     9b2:	f506 7680 	add.w	r6, r6, #256	; 0x100
    }
  counter = 15;
     9b6:	230f      	movs	r3, #15
     9b8:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     9ba:	6823      	ldr	r3, [r4, #0]
     9bc:	2b00      	cmp	r3, #0
     9be:	dd0e      	ble.n	9de <timer_external_input+0x19e>
    CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     9c0:	2042      	movs	r0, #66	; 0x42
    __ISB();
    CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     9c2:	2100      	movs	r1, #0
    CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     9c4:	4a5d      	ldr	r2, [pc, #372]	; (b3c <timer_external_input+0x2fc>)
     9c6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
     9ca:	f3bf 8f6f 	isb	sy
    CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     9ce:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    counter --;
     9d2:	6823      	ldr	r3, [r4, #0]
     9d4:	3b01      	subs	r3, #1
     9d6:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     9d8:	6823      	ldr	r3, [r4, #0]
     9da:	2b00      	cmp	r3, #0
     9dc:	dcf3      	bgt.n	9c6 <timer_external_input+0x186>
    }
  if (CM3DS_MPS2_TIMER->VALUE != 0xB0) {
     9de:	686b      	ldr	r3, [r5, #4]
     9e0:	2bb0      	cmp	r3, #176	; 0xb0
     9e2:	d004      	beq.n	9ee <timer_external_input+0x1ae>
     puts("ERROR : Timer counting failed");
     9e4:	485f      	ldr	r0, [pc, #380]	; (b64 <timer_external_input+0x324>)
     9e6:	f000 fb85 	bl	10f4 <puts>
     err_code += (1<<9);
     9ea:	f506 7600 	add.w	r6, r6, #512	; 0x200
  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
     9ee:	4b57      	ldr	r3, [pc, #348]	; (b4c <timer_external_input+0x30c>)
     9f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
     9f4:	05d2      	lsls	r2, r2, #23
     9f6:	d404      	bmi.n	a02 <timer_external_input+0x1c2>
     9f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     9fc:	059b      	lsls	r3, r3, #22
     9fe:	f140 80ed 	bpl.w	bdc <timer_external_input+0x39c>

  /* Check interrupt should not be trigger */
  if ((NVIC_GetPendingIRQ(TIMER0_IRQn)!=0)||(NVIC_GetPendingIRQ(TIMER1_IRQn)!=0)||
      (CM3DS_MPS2_TIMER->INTSTATUS!=0))
    {
     puts("ERROR : Timer IRQ set unexpectedly.");
     a02:	4859      	ldr	r0, [pc, #356]	; (b68 <timer_external_input+0x328>)
     a04:	f000 fb76 	bl	10f4 <puts>
     err_code += (1<<10);
     a08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    }

  puts("- IRQ at 1->0 transition");
     a0c:	4857      	ldr	r0, [pc, #348]	; (b6c <timer_external_input+0x32c>)
     a0e:	f000 fb71 	bl	10f4 <puts>
  CM3DS_MPS2_TIMER->VALUE  = 0x02;
  CM3DS_MPS2_TIMER->CTRL   = 0x000F;  /* Timer enabled, use external input as clock, interrupt enabled */
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     a12:	2300      	movs	r3, #0
  CM3DS_MPS2_TIMER->VALUE  = 0x02;
     a14:	2002      	movs	r0, #2
  CM3DS_MPS2_TIMER->CTRL   = 0x000F;  /* Timer enabled, use external input as clock, interrupt enabled */
     a16:	210f      	movs	r1, #15
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     a18:	4a48      	ldr	r2, [pc, #288]	; (b3c <timer_external_input+0x2fc>)

  timer0_irq_expected = 0;
     a1a:	f8df a15c 	ldr.w	sl, [pc, #348]	; b78 <timer_external_input+0x338>
  timer1_irq_expected = 0;
     a1e:	f8df 915c 	ldr.w	r9, [pc, #348]	; b7c <timer_external_input+0x33c>
  timer0_irq_occurred = 0;
     a22:	4f53      	ldr	r7, [pc, #332]	; (b70 <timer_external_input+0x330>)
  timer1_irq_occurred = 0;
     a24:	f8df 8158 	ldr.w	r8, [pc, #344]	; b80 <timer_external_input+0x340>

  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0) {
     a28:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
  CM3DS_MPS2_TIMER->VALUE  = 0x02;
     a2c:	6068      	str	r0, [r5, #4]
  CM3DS_MPS2_TIMER->CTRL   = 0x000F;  /* Timer enabled, use external input as clock, interrupt enabled */
     a2e:	6029      	str	r1, [r5, #0]
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     a30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  timer0_irq_expected = 0;
     a34:	f8ca 3000 	str.w	r3, [sl]
  timer1_irq_expected = 0;
     a38:	f8c9 3000 	str.w	r3, [r9]
  timer0_irq_occurred = 0;
     a3c:	603b      	str	r3, [r7, #0]
  timer1_irq_occurred = 0;
     a3e:	f8c8 3000 	str.w	r3, [r8]
  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0) {
     a42:	f000 80f0 	beq.w	c26 <timer_external_input+0x3e6>
    NVIC_EnableIRQ(TIMER0_IRQn);
    }

  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1) {
     a46:	4b4b      	ldr	r3, [pc, #300]	; (b74 <timer_external_input+0x334>)
     a48:	429d      	cmp	r5, r3
     a4a:	f000 80cc 	beq.w	be6 <timer_external_input+0x3a6>
    NVIC_EnableIRQ(TIMER1_IRQn);
    }

  /* Test no IRQ generation for 2 to 1 transition */
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     a4e:	2242      	movs	r2, #66	; 0x42
     a50:	4b3a      	ldr	r3, [pc, #232]	; (b3c <timer_external_input+0x2fc>)
     a52:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
     a56:	f3bf 8f6f 	isb	sy
    __ISB();
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     a5a:	2100      	movs	r1, #0

  counter = 10;                        /* delay */
     a5c:	220a      	movs	r2, #10
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     a5e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
  counter = 10;                        /* delay */
     a62:	6022      	str	r2, [r4, #0]
  while (counter > 0) {
     a64:	6823      	ldr	r3, [r4, #0]
     a66:	428b      	cmp	r3, r1
     a68:	dd05      	ble.n	a76 <timer_external_input+0x236>
    counter --;
     a6a:	6823      	ldr	r3, [r4, #0]
     a6c:	3b01      	subs	r3, #1
     a6e:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     a70:	6823      	ldr	r3, [r4, #0]
     a72:	2b00      	cmp	r3, #0
     a74:	dcf9      	bgt.n	a6a <timer_external_input+0x22a>
    }

  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0) {
     a76:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
     a7a:	f000 80d9 	beq.w	c30 <timer_external_input+0x3f0>
    timer0_irq_expected=1;
    }

  if (CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1) {
     a7e:	4b3d      	ldr	r3, [pc, #244]	; (b74 <timer_external_input+0x334>)
     a80:	429d      	cmp	r5, r3
    timer1_irq_expected=1;
     a82:	bf04      	itt	eq
     a84:	2301      	moveq	r3, #1
     a86:	f8c9 3000 	streq.w	r3, [r9]
    }

  /* Test IRQ generation for 1 to 0 transition */
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     a8a:	2242      	movs	r2, #66	; 0x42
     a8c:	4b2b      	ldr	r3, [pc, #172]	; (b3c <timer_external_input+0x2fc>)
     a8e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
     a92:	f3bf 8f6f 	isb	sy
    __ISB();
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     a96:	2100      	movs	r1, #0

  counter = 10;                        /* delay */
     a98:	220a      	movs	r2, #10
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     a9a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
  counter = 10;                        /* delay */
     a9e:	6022      	str	r2, [r4, #0]
  while (counter > 0) {
     aa0:	6823      	ldr	r3, [r4, #0]
     aa2:	428b      	cmp	r3, r1
     aa4:	dd05      	ble.n	ab2 <timer_external_input+0x272>
    counter --;
     aa6:	6823      	ldr	r3, [r4, #0]
     aa8:	3b01      	subs	r3, #1
     aaa:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     aac:	6823      	ldr	r3, [r4, #0]
     aae:	2b00      	cmp	r3, #0
     ab0:	dcf9      	bgt.n	aa6 <timer_external_input+0x266>
    }
  if (((CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0)&&(timer0_irq_occurred==0))||
     ab2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
     ab6:	f000 80bf 	beq.w	c38 <timer_external_input+0x3f8>
     aba:	4b2e      	ldr	r3, [pc, #184]	; (b74 <timer_external_input+0x334>)
     abc:	429d      	cmp	r5, r3
     abe:	f000 8097 	beq.w	bf0 <timer_external_input+0x3b0>
      ((CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1)&&(timer1_irq_occurred==0))) {
    puts("ERROR : Timer not trigger.");
    err_code += (1<<11);
    }

  timer0_irq_expected = 0;
     ac2:	2300      	movs	r3, #0
  timer1_irq_expected = 0;
  timer0_irq_occurred = 0;
  timer1_irq_occurred = 0;

  /* Test IRQ generation for 0 to RELOAD transition */
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     ac4:	2142      	movs	r1, #66	; 0x42
     ac6:	4a1d      	ldr	r2, [pc, #116]	; (b3c <timer_external_input+0x2fc>)
  timer0_irq_expected = 0;
     ac8:	f8ca 3000 	str.w	r3, [sl]
  timer1_irq_expected = 0;
     acc:	f8c9 3000 	str.w	r3, [r9]
  timer0_irq_occurred = 0;
     ad0:	603b      	str	r3, [r7, #0]
  timer1_irq_occurred = 0;
     ad2:	f8c8 3000 	str.w	r3, [r8]
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042; /* Timer should decrement */
     ad6:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
     ada:	f3bf 8f6f 	isb	sy
    __ISB();
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */

  counter = 10;                        /* delay */
     ade:	210a      	movs	r1, #10
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000; /* Timer should not decrement */
     ae0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  counter = 10;                        /* delay */
     ae4:	6021      	str	r1, [r4, #0]
  while (counter > 0) {
     ae6:	6823      	ldr	r3, [r4, #0]
     ae8:	2b00      	cmp	r3, #0
     aea:	dd05      	ble.n	af8 <timer_external_input+0x2b8>
    counter --;
     aec:	6823      	ldr	r3, [r4, #0]
     aee:	3b01      	subs	r3, #1
     af0:	6023      	str	r3, [r4, #0]
  while (counter > 0) {
     af2:	6823      	ldr	r3, [r4, #0]
     af4:	2b00      	cmp	r3, #0
     af6:	dcf9      	bgt.n	aec <timer_external_input+0x2ac>
    }
  if ((timer0_irq_occurred!=0)||(timer1_irq_occurred!=0)) {
     af8:	683b      	ldr	r3, [r7, #0]
     afa:	2b00      	cmp	r3, #0
     afc:	d157      	bne.n	bae <timer_external_input+0x36e>
     afe:	f8d8 3000 	ldr.w	r3, [r8]
     b02:	2b00      	cmp	r3, #0
     b04:	d153      	bne.n	bae <timer_external_input+0x36e>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     b06:	f44f 7080 	mov.w	r0, #256	; 0x100
     b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
  NVIC_DisableIRQ(TIMER1_IRQn);
  NVIC_ClearPendingIRQ(TIMER0_IRQn);
  NVIC_ClearPendingIRQ(TIMER1_IRQn);

  /* Clearing up */
  SysTick->CTRL = 0x0;
     b0e:	2300      	movs	r3, #0
  CM3DS_MPS2_TIMER->CTRL   = 0x00;/* Disable, use internal clock, interrupt enable */
  CM3DS_MPS2_TIMER->RELOAD = 0x0000;
  CM3DS_MPS2_TIMER->VALUE  = 0x0000;
  CM3DS_MPS2_GPIO0->OUTENABLECLR    = 0xFFFF;
     b10:	f64f 74ff 	movw	r4, #65535	; 0xffff
     b14:	4a0d      	ldr	r2, [pc, #52]	; (b4c <timer_external_input+0x30c>)
  SysTick->CTRL = 0x0;
     b16:	f8df c06c 	ldr.w	ip, [pc, #108]	; b84 <timer_external_input+0x344>
     b1a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
     b1e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     b22:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
     b26:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  CM3DS_MPS2_GPIO0->OUTENABLECLR    = 0xFFFF;
     b2a:	4a04      	ldr	r2, [pc, #16]	; (b3c <timer_external_input+0x2fc>)
  SysTick->CTRL = 0x0;
     b2c:	f8cc 3000 	str.w	r3, [ip]
  CM3DS_MPS2_TIMER->CTRL   = 0x00;/* Disable, use internal clock, interrupt enable */
     b30:	602b      	str	r3, [r5, #0]
  CM3DS_MPS2_TIMER->RELOAD = 0x0000;
     b32:	60ab      	str	r3, [r5, #8]
  CM3DS_MPS2_TIMER->VALUE  = 0x0000;
     b34:	606b      	str	r3, [r5, #4]
     b36:	e027      	b.n	b88 <timer_external_input+0x348>
     b38:	0000216c 	.word	0x0000216c
     b3c:	40010000 	.word	0x40010000
     b40:	00002188 	.word	0x00002188
     b44:	000021d8 	.word	0x000021d8
     b48:	2000007c 	.word	0x2000007c
     b4c:	e000e100 	.word	0xe000e100
     b50:	000022a0 	.word	0x000022a0
     b54:	000022b8 	.word	0x000022b8
     b58:	000022e0 	.word	0x000022e0
     b5c:	00002300 	.word	0x00002300
     b60:	00002328 	.word	0x00002328
     b64:	00002350 	.word	0x00002350
     b68:	00002370 	.word	0x00002370
     b6c:	00002394 	.word	0x00002394
     b70:	20000084 	.word	0x20000084
     b74:	40001000 	.word	0x40001000
     b78:	20000074 	.word	0x20000074
     b7c:	20000078 	.word	0x20000078
     b80:	20000080 	.word	0x20000080
     b84:	e000e010 	.word	0xe000e010
  CM3DS_MPS2_GPIO0->OUTENABLECLR    = 0xFFFF;
     b88:	6154      	str	r4, [r2, #20]
  CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     b8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

  timer0_irq_expected = 0;
     b8e:	f8ca 3000 	str.w	r3, [sl]
  timer1_irq_expected = 0;
     b92:	f8c9 3000 	str.w	r3, [r9]
  timer0_irq_occurred = 0;
     b96:	603b      	str	r3, [r7, #0]
  timer1_irq_occurred = 0;
     b98:	f8c8 3000 	str.w	r3, [r8]

  /* Generate return value */
  if (err_code != 0) {
     b9c:	b126      	cbz	r6, ba8 <timer_external_input+0x368>
    printf ("ERROR : Interrupt test failed (0x%x)\n", err_code);
     b9e:	4631      	mov	r1, r6
     ba0:	482a      	ldr	r0, [pc, #168]	; (c4c <timer_external_input+0x40c>)
     ba2:	f000 fa33 	bl	100c <iprintf>
    return_val=1;
     ba6:	2601      	movs	r6, #1
    err_code = 0;
    }

  return(return_val);
}
     ba8:	4630      	mov	r0, r6
     baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    puts("ERROR : Timer triggered unexpectedly.");
     bae:	4828      	ldr	r0, [pc, #160]	; (c50 <timer_external_input+0x410>)
     bb0:	f000 faa0 	bl	10f4 <puts>
    err_code += (1<<12);
     bb4:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
     bb8:	e7a5      	b.n	b06 <timer_external_input+0x2c6>
      ((NVIC_GetPendingIRQ(TIMER1_IRQn)==0)&&(CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1)))
     bba:	4b26      	ldr	r3, [pc, #152]	; (c54 <timer_external_input+0x414>)
     bbc:	429d      	cmp	r5, r3
     bbe:	f47f ae92 	bne.w	8e6 <timer_external_input+0xa6>
     puts("ERROR : Timer not trigger #1.");
     bc2:	4825      	ldr	r0, [pc, #148]	; (c58 <timer_external_input+0x418>)
     bc4:	f000 fa96 	bl	10f4 <puts>
  if (CM3DS_MPS2_TIMER->INTSTATUS==0) {
     bc8:	68eb      	ldr	r3, [r5, #12]
     err_code += (1<<2);
     bca:	3604      	adds	r6, #4
  if (CM3DS_MPS2_TIMER->INTSTATUS==0) {
     bcc:	2b00      	cmp	r3, #0
     bce:	f47f ae8e 	bne.w	8ee <timer_external_input+0xae>
    puts("ERROR : Timer not trigger #2.");
     bd2:	4822      	ldr	r0, [pc, #136]	; (c5c <timer_external_input+0x41c>)
    err_code += (1<<3);
     bd4:	3608      	adds	r6, #8
    puts("ERROR : Timer not trigger #2.");
     bd6:	f000 fa8d 	bl	10f4 <puts>
     bda:	e68e      	b.n	8fa <timer_external_input+0xba>
      (CM3DS_MPS2_TIMER->INTSTATUS!=0))
     bdc:	68eb      	ldr	r3, [r5, #12]
  if ((NVIC_GetPendingIRQ(TIMER0_IRQn)!=0)||(NVIC_GetPendingIRQ(TIMER1_IRQn)!=0)||
     bde:	2b00      	cmp	r3, #0
     be0:	f43f af14 	beq.w	a0c <timer_external_input+0x1cc>
     be4:	e70d      	b.n	a02 <timer_external_input+0x1c2>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     be6:	f44f 7200 	mov.w	r2, #512	; 0x200
     bea:	4b1d      	ldr	r3, [pc, #116]	; (c60 <timer_external_input+0x420>)
     bec:	601a      	str	r2, [r3, #0]
     bee:	e72e      	b.n	a4e <timer_external_input+0x20e>
      ((CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER1)&&(timer1_irq_occurred==0))) {
     bf0:	f8d8 3000 	ldr.w	r3, [r8]
     bf4:	2b00      	cmp	r3, #0
     bf6:	f47f af64 	bne.w	ac2 <timer_external_input+0x282>
    puts("ERROR : Timer not trigger.");
     bfa:	481a      	ldr	r0, [pc, #104]	; (c64 <timer_external_input+0x424>)
     bfc:	f000 fa7a 	bl	10f4 <puts>
    err_code += (1<<11);
     c00:	f506 6600 	add.w	r6, r6, #2048	; 0x800
     c04:	e75d      	b.n	ac2 <timer_external_input+0x282>
      puts("ERROR : Timer not clear.");
     c06:	4818      	ldr	r0, [pc, #96]	; (c68 <timer_external_input+0x428>)
     c08:	f000 fa74 	bl	10f4 <puts>
      err_code += (1<<4);
     c0c:	3610      	adds	r6, #16
     c0e:	e674      	b.n	8fa <timer_external_input+0xba>
     puts("ERROR : Timer not stopping when external input is low.");
     c10:	4816      	ldr	r0, [pc, #88]	; (c6c <timer_external_input+0x42c>)
     c12:	f000 fa6f 	bl	10f4 <puts>
     c16:	2703      	movs	r7, #3
     err_code += (1<<0);
     c18:	2601      	movs	r6, #1
     c1a:	e62d      	b.n	878 <timer_external_input+0x38>
    printf("ERROR : Timer not running when external input is high (0x%x).\n", timer_value);
     c1c:	4814      	ldr	r0, [pc, #80]	; (c70 <timer_external_input+0x430>)
    err_code += (1<<1);
     c1e:	463e      	mov	r6, r7
    printf("ERROR : Timer not running when external input is high (0x%x).\n", timer_value);
     c20:	f000 f9f4 	bl	100c <iprintf>
     c24:	e650      	b.n	8c8 <timer_external_input+0x88>
     c26:	f44f 7280 	mov.w	r2, #256	; 0x100
     c2a:	4b0d      	ldr	r3, [pc, #52]	; (c60 <timer_external_input+0x420>)
     c2c:	601a      	str	r2, [r3, #0]
     c2e:	e70e      	b.n	a4e <timer_external_input+0x20e>
    timer0_irq_expected=1;
     c30:	2301      	movs	r3, #1
     c32:	f8ca 3000 	str.w	r3, [sl]
     c36:	e728      	b.n	a8a <timer_external_input+0x24a>
  if (((CM3DS_MPS2_TIMER==CM3DS_MPS2_TIMER0)&&(timer0_irq_occurred==0))||
     c38:	683b      	ldr	r3, [r7, #0]
     c3a:	2b00      	cmp	r3, #0
     c3c:	f47f af41 	bne.w	ac2 <timer_external_input+0x282>
    puts("ERROR : Timer not trigger.");
     c40:	4808      	ldr	r0, [pc, #32]	; (c64 <timer_external_input+0x424>)
     c42:	f000 fa57 	bl	10f4 <puts>
    err_code += (1<<11);
     c46:	f506 6600 	add.w	r6, r6, #2048	; 0x800
     c4a:	e73a      	b.n	ac2 <timer_external_input+0x282>
     c4c:	00002144 	.word	0x00002144
     c50:	000023cc 	.word	0x000023cc
     c54:	40001000 	.word	0x40001000
     c58:	00002244 	.word	0x00002244
     c5c:	00002264 	.word	0x00002264
     c60:	e000e100 	.word	0xe000e100
     c64:	000023b0 	.word	0x000023b0
     c68:	00002284 	.word	0x00002284
     c6c:	000021a0 	.word	0x000021a0
     c70:	00002204 	.word	0x00002204

00000c74 <timer0_id_check>:
/* --------------------------------------------------------------- */
/* Detect the part number to see if device is present              */
int timer0_id_check(void)
{
unsigned char timer_id;
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     c74:	4a09      	ldr	r2, [pc, #36]	; (c9c <timer0_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     c76:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <timer0_id_check+0x2c>)
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     c78:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     c7a:	681b      	ldr	r3, [r3, #0]
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     c7c:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     c7e:	2b22      	cmp	r3, #34	; 0x22
     c80:	d001      	beq.n	c86 <timer0_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
      (timer_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     c82:	2001      	movs	r0, #1
  else
    return 0;
}
     c84:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     c86:	4b07      	ldr	r3, [pc, #28]	; (ca4 <timer0_id_check+0x30>)
     c88:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     c8a:	2bb8      	cmp	r3, #184	; 0xb8
     c8c:	d1f9      	bne.n	c82 <timer0_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     c8e:	f000 0007 	and.w	r0, r0, #7
     c92:	3803      	subs	r0, #3
     c94:	bf18      	it	ne
     c96:	2001      	movne	r0, #1
     c98:	4770      	bx	lr
     c9a:	bf00      	nop
     c9c:	40000fe8 	.word	0x40000fe8
     ca0:	40000fe0 	.word	0x40000fe0
     ca4:	40000fe4 	.word	0x40000fe4

00000ca8 <timer1_id_check>:

int timer1_id_check(void)
{
unsigned char timer_id;
  timer_id = HW8_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE8) & 0x07;
     ca8:	4a09      	ldr	r2, [pc, #36]	; (cd0 <timer1_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     caa:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <timer1_id_check+0x2c>)
  timer_id = HW8_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE8) & 0x07;
     cac:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     cae:	681b      	ldr	r3, [r3, #0]
  timer_id = HW8_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE8) & 0x07;
     cb0:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     cb2:	2b22      	cmp	r3, #34	; 0x22
     cb4:	d001      	beq.n	cba <timer1_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE4) != 0xB8) ||
      (timer_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     cb6:	2001      	movs	r0, #1
  else
    return 0;
}
     cb8:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE4) != 0xB8) ||
     cba:	4b07      	ldr	r3, [pc, #28]	; (cd8 <timer1_id_check+0x30>)
     cbc:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     cbe:	2bb8      	cmp	r3, #184	; 0xb8
     cc0:	d1f9      	bne.n	cb6 <timer1_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE4) != 0xB8) ||
     cc2:	f000 0007 	and.w	r0, r0, #7
     cc6:	3803      	subs	r0, #3
     cc8:	bf18      	it	ne
     cca:	2001      	movne	r0, #1
     ccc:	4770      	bx	lr
     cce:	bf00      	nop
     cd0:	40001fe8 	.word	0x40001fe8
     cd4:	40001fe0 	.word	0x40001fe0
     cd8:	40001fe4 	.word	0x40001fe4

00000cdc <gpio0_id_check>:

int gpio0_id_check(void)
{
unsigned char gpio_id;
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     cdc:	4a09      	ldr	r2, [pc, #36]	; (d04 <gpio0_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     cde:	4b0a      	ldr	r3, [pc, #40]	; (d08 <gpio0_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     ce0:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     ce2:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     ce4:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     ce6:	2b20      	cmp	r3, #32
     ce8:	d001      	beq.n	cee <gpio0_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     cea:	2001      	movs	r0, #1
  else
    return 0;
}
     cec:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     cee:	4b07      	ldr	r3, [pc, #28]	; (d0c <gpio0_id_check+0x30>)
     cf0:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     cf2:	2bb8      	cmp	r3, #184	; 0xb8
     cf4:	d1f9      	bne.n	cea <gpio0_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     cf6:	f000 0007 	and.w	r0, r0, #7
     cfa:	3803      	subs	r0, #3
     cfc:	bf18      	it	ne
     cfe:	2001      	movne	r0, #1
     d00:	4770      	bx	lr
     d02:	bf00      	nop
     d04:	40010fe8 	.word	0x40010fe8
     d08:	40010fe0 	.word	0x40010fe0
     d0c:	40010fe4 	.word	0x40010fe4

00000d10 <TIMER0_Handler>:
/* --------------------------------------------------------------- */
/*  Timer exception handlers                                       */
/* --------------------------------------------------------------- */

void TIMER0_Handler(void)
{
     d10:	b510      	push	{r4, lr}
  timer0_irq_occurred ++;
  CM3DS_MPS2_TIMER0->INTCLEAR = 1;
     d12:	2401      	movs	r4, #1
     d14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  timer0_irq_occurred ++;
     d18:	4a07      	ldr	r2, [pc, #28]	; (d38 <TIMER0_Handler+0x28>)
  if (timer0_irq_expected ==0) {
     d1a:	4908      	ldr	r1, [pc, #32]	; (d3c <TIMER0_Handler+0x2c>)
  timer0_irq_occurred ++;
     d1c:	6813      	ldr	r3, [r2, #0]
     d1e:	4423      	add	r3, r4
     d20:	6013      	str	r3, [r2, #0]
  CM3DS_MPS2_TIMER0->INTCLEAR = 1;
     d22:	60c4      	str	r4, [r0, #12]
  if (timer0_irq_expected ==0) {
     d24:	680b      	ldr	r3, [r1, #0]
     d26:	b103      	cbz	r3, d2a <TIMER0_Handler+0x1a>
    puts ("ERROR : Unexpected Timer 0 interrupt occurred.\n");
    UartEndSimulation();
    while (1);
    }
  return;
}
     d28:	bd10      	pop	{r4, pc}
    puts ("ERROR : Unexpected Timer 0 interrupt occurred.\n");
     d2a:	4805      	ldr	r0, [pc, #20]	; (d40 <TIMER0_Handler+0x30>)
     d2c:	f000 f9e2 	bl	10f4 <puts>
    UartEndSimulation();
     d30:	f000 f938 	bl	fa4 <UartEndSimulation>
     d34:	e7fe      	b.n	d34 <TIMER0_Handler+0x24>
     d36:	bf00      	nop
     d38:	20000084 	.word	0x20000084
     d3c:	20000074 	.word	0x20000074
     d40:	00002508 	.word	0x00002508

00000d44 <TIMER1_Handler>:

void TIMER1_Handler(void)
{
     d44:	b510      	push	{r4, lr}
  timer1_irq_occurred ++;
  CM3DS_MPS2_TIMER1->INTCLEAR = 1;
     d46:	2401      	movs	r4, #1
  timer1_irq_occurred ++;
     d48:	4a07      	ldr	r2, [pc, #28]	; (d68 <TIMER1_Handler+0x24>)
  CM3DS_MPS2_TIMER1->INTCLEAR = 1;
     d4a:	4808      	ldr	r0, [pc, #32]	; (d6c <TIMER1_Handler+0x28>)
  timer1_irq_occurred ++;
     d4c:	6813      	ldr	r3, [r2, #0]
  if (timer1_irq_expected ==0) {
     d4e:	4908      	ldr	r1, [pc, #32]	; (d70 <TIMER1_Handler+0x2c>)
  timer1_irq_occurred ++;
     d50:	4423      	add	r3, r4
     d52:	6013      	str	r3, [r2, #0]
  CM3DS_MPS2_TIMER1->INTCLEAR = 1;
     d54:	60c4      	str	r4, [r0, #12]
  if (timer1_irq_expected ==0) {
     d56:	680b      	ldr	r3, [r1, #0]
     d58:	b103      	cbz	r3, d5c <TIMER1_Handler+0x18>
    puts ("ERROR : Unexpected Timer 1 interrupt occurred.\n");
    UartEndSimulation();
    while (1);
    }
  return;
}
     d5a:	bd10      	pop	{r4, pc}
    puts ("ERROR : Unexpected Timer 1 interrupt occurred.\n");
     d5c:	4805      	ldr	r0, [pc, #20]	; (d74 <TIMER1_Handler+0x30>)
     d5e:	f000 f9c9 	bl	10f4 <puts>
    UartEndSimulation();
     d62:	f000 f91f 	bl	fa4 <UartEndSimulation>
     d66:	e7fe      	b.n	d66 <TIMER1_Handler+0x22>
     d68:	20000080 	.word	0x20000080
     d6c:	40001000 	.word	0x40001000
     d70:	20000078 	.word	0x20000078
     d74:	00002538 	.word	0x00002538

00000d78 <SysTick_Handler>:
/* --------------------------------------------------------------- */
/*  SysTick exception handlers                                       */
/* --------------------------------------------------------------- */
void SysTick_Handler(void)
{
  switch (counter) {
     d78:	4b13      	ldr	r3, [pc, #76]	; (dc8 <SysTick_Handler+0x50>)
     d7a:	681a      	ldr	r2, [r3, #0]
     d7c:	b1da      	cbz	r2, db6 <SysTick_Handler+0x3e>
     d7e:	2a01      	cmp	r2, #1
     d80:	d110      	bne.n	da4 <SysTick_Handler+0x2c>
      /* Assert the EXTIN to the system timer */
      CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042;
      counter ++;
      break;
    case 1 :
      CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     d82:	2200      	movs	r2, #0
{
     d84:	b410      	push	{r4}
      SysTick->CTRL = 0;
     d86:	4811      	ldr	r0, [pc, #68]	; (dcc <SysTick_Handler+0x54>)
      CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     d88:	4c11      	ldr	r4, [pc, #68]	; (dd0 <SysTick_Handler+0x58>)
      SCB->ICSR = SCB->ICSR & 0xFDFFFFFF; /* Clear SysTick pending bit */
     d8a:	4912      	ldr	r1, [pc, #72]	; (dd4 <SysTick_Handler+0x5c>)
      CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0000;
     d8c:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
      SysTick->CTRL = 0;
     d90:	6002      	str	r2, [r0, #0]
      SCB->ICSR = SCB->ICSR & 0xFDFFFFFF; /* Clear SysTick pending bit */
     d92:	684a      	ldr	r2, [r1, #4]
      SysTick->CTRL = 0;
      SCB->ICSR = SCB->ICSR & 0xFDFFFFFF; /* Clear SysTick pending bit */
      break;
    }
  return;
}
     d94:	bc10      	pop	{r4}
      SCB->ICSR = SCB->ICSR & 0xFDFFFFFF; /* Clear SysTick pending bit */
     d96:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
     d9a:	604a      	str	r2, [r1, #4]
      counter ++;
     d9c:	681a      	ldr	r2, [r3, #0]
     d9e:	3201      	adds	r2, #1
     da0:	601a      	str	r2, [r3, #0]
}
     da2:	4770      	bx	lr
      SysTick->CTRL = 0;
     da4:	2100      	movs	r1, #0
     da6:	4b09      	ldr	r3, [pc, #36]	; (dcc <SysTick_Handler+0x54>)
      SCB->ICSR = SCB->ICSR & 0xFDFFFFFF; /* Clear SysTick pending bit */
     da8:	4a0a      	ldr	r2, [pc, #40]	; (dd4 <SysTick_Handler+0x5c>)
      SysTick->CTRL = 0;
     daa:	6019      	str	r1, [r3, #0]
      SCB->ICSR = SCB->ICSR & 0xFDFFFFFF; /* Clear SysTick pending bit */
     dac:	6853      	ldr	r3, [r2, #4]
     dae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
     db2:	6053      	str	r3, [r2, #4]
     db4:	4770      	bx	lr
      CM3DS_MPS2_GPIO0->LB_MASKED[0x42] = 0x0042;
     db6:	2142      	movs	r1, #66	; 0x42
     db8:	4a05      	ldr	r2, [pc, #20]	; (dd0 <SysTick_Handler+0x58>)
     dba:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
      counter ++;
     dbe:	681a      	ldr	r2, [r3, #0]
     dc0:	3201      	adds	r2, #1
     dc2:	601a      	str	r2, [r3, #0]
      break;
     dc4:	4770      	bx	lr
     dc6:	bf00      	nop
     dc8:	2000007c 	.word	0x2000007c
     dcc:	e000e010 	.word	0xe000e010
     dd0:	40010000 	.word	0x40010000
     dd4:	e000ed00 	.word	0xe000ed00

00000dd8 <main>:
{
     dd8:	b538      	push	{r3, r4, r5, lr}
  UartStdOutInit();
     dda:	f000 f8cb 	bl	f74 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - Timer Test - revision $Revision: 243249 $\n");
     dde:	4848      	ldr	r0, [pc, #288]	; (f00 <main+0x128>)
     de0:	f000 f988 	bl	10f4 <puts>
  timer0_irq_occurred = 0;
     de4:	2300      	movs	r3, #0
  timer1_irq_expected = 0;
     de6:	4a47      	ldr	r2, [pc, #284]	; (f04 <main+0x12c>)
  timer0_irq_expected = 0;
     de8:	4947      	ldr	r1, [pc, #284]	; (f08 <main+0x130>)
  timer0_irq_occurred = 0;
     dea:	4d48      	ldr	r5, [pc, #288]	; (f0c <main+0x134>)
  timer1_irq_occurred = 0;
     dec:	4c48      	ldr	r4, [pc, #288]	; (f10 <main+0x138>)
  puts("1) Timer 0");
     dee:	4849      	ldr	r0, [pc, #292]	; (f14 <main+0x13c>)
  timer0_irq_occurred = 0;
     df0:	602b      	str	r3, [r5, #0]
  timer1_irq_occurred = 0;
     df2:	6023      	str	r3, [r4, #0]
  timer0_irq_expected = 0;
     df4:	600b      	str	r3, [r1, #0]
  timer1_irq_expected = 0;
     df6:	6013      	str	r3, [r2, #0]
  puts("1) Timer 0");
     df8:	f000 f97c 	bl	10f4 <puts>
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     dfc:	4b46      	ldr	r3, [pc, #280]	; (f18 <main+0x140>)
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     dfe:	4a47      	ldr	r2, [pc, #284]	; (f1c <main+0x144>)
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     e00:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     e02:	6812      	ldr	r2, [r2, #0]
     e04:	2a22      	cmp	r2, #34	; 0x22
     e06:	d103      	bne.n	e10 <main+0x38>
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     e08:	4a45      	ldr	r2, [pc, #276]	; (f20 <main+0x148>)
     e0a:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     e0c:	2ab8      	cmp	r2, #184	; 0xb8
     e0e:	d040      	beq.n	e92 <main+0xba>
    puts ("- Timer #0 not present. Tests skipped.");
     e10:	4844      	ldr	r0, [pc, #272]	; (f24 <main+0x14c>)
     e12:	f000 f96f 	bl	10f4 <puts>
  int result=0;
     e16:	2400      	movs	r4, #0
  puts("\n2) Timer 1");
     e18:	4843      	ldr	r0, [pc, #268]	; (f28 <main+0x150>)
     e1a:	f000 f96b 	bl	10f4 <puts>
  timer_id = HW8_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE8) & 0x07;
     e1e:	4b43      	ldr	r3, [pc, #268]	; (f2c <main+0x154>)
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     e20:	4a43      	ldr	r2, [pc, #268]	; (f30 <main+0x158>)
  timer_id = HW8_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE8) & 0x07;
     e22:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     e24:	6812      	ldr	r2, [r2, #0]
  timer_id = HW8_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE8) & 0x07;
     e26:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     e28:	2a22      	cmp	r2, #34	; 0x22
     e2a:	d103      	bne.n	e34 <main+0x5c>
      (HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE4) != 0xB8) ||
     e2c:	4a41      	ldr	r2, [pc, #260]	; (f34 <main+0x15c>)
     e2e:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE0) != 0x22) ||
     e30:	2ab8      	cmp	r2, #184	; 0xb8
     e32:	d00f      	beq.n	e54 <main+0x7c>
    puts ("- Timer #1 not present. Tests skipped.");
     e34:	4840      	ldr	r0, [pc, #256]	; (f38 <main+0x160>)
     e36:	f000 f95d 	bl	10f4 <puts>
  if (result==0) {
     e3a:	b13c      	cbz	r4, e4c <main+0x74>
    printf ("\n** TEST FAILED **\n, Error code = (0x%x)", result);
     e3c:	4621      	mov	r1, r4
     e3e:	483f      	ldr	r0, [pc, #252]	; (f3c <main+0x164>)
     e40:	f000 f8e4 	bl	100c <iprintf>
  UartEndSimulation();
     e44:	f000 f8ae 	bl	fa4 <UartEndSimulation>
}
     e48:	2000      	movs	r0, #0
     e4a:	bd38      	pop	{r3, r4, r5, pc}
    printf ("\n** TEST PASSED **\n");
     e4c:	483c      	ldr	r0, [pc, #240]	; (f40 <main+0x168>)
     e4e:	f000 f951 	bl	10f4 <puts>
     e52:	e7f7      	b.n	e44 <main+0x6c>
      (HW32_REG(CM3DS_MPS2_TIMER1_BASE + 0xFE4) != 0xB8) ||
     e54:	f003 0307 	and.w	r3, r3, #7
     e58:	2b03      	cmp	r3, #3
     e5a:	d1eb      	bne.n	e34 <main+0x5c>
    result += timer_register_rw_test(CM3DS_MPS2_TIMER1);
     e5c:	4839      	ldr	r0, [pc, #228]	; (f44 <main+0x16c>)
     e5e:	f7ff f9d3 	bl	208 <timer_register_rw_test>
     e62:	4404      	add	r4, r0
    result += timer_start_stop_test(CM3DS_MPS2_TIMER1);
     e64:	4837      	ldr	r0, [pc, #220]	; (f44 <main+0x16c>)
     e66:	f7ff fb41 	bl	4ec <timer_start_stop_test>
     e6a:	4404      	add	r4, r0
    result += timer_interrupt_test_1(CM3DS_MPS2_TIMER1);
     e6c:	4835      	ldr	r0, [pc, #212]	; (f44 <main+0x16c>)
     e6e:	f7ff fbe5 	bl	63c <timer_interrupt_test_1>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     e72:	4b35      	ldr	r3, [pc, #212]	; (f48 <main+0x170>)
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     e74:	4a35      	ldr	r2, [pc, #212]	; (f4c <main+0x174>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     e76:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     e78:	6812      	ldr	r2, [r2, #0]
    result += timer_interrupt_test_1(CM3DS_MPS2_TIMER1);
     e7a:	4404      	add	r4, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     e7c:	2a20      	cmp	r2, #32
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     e7e:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     e80:	d103      	bne.n	e8a <main+0xb2>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     e82:	4a33      	ldr	r2, [pc, #204]	; (f50 <main+0x178>)
     e84:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     e86:	2ab8      	cmp	r2, #184	; 0xb8
     e88:	d030      	beq.n	eec <main+0x114>
      puts ("- GPIO #0 not present. Test skipped.");
     e8a:	4832      	ldr	r0, [pc, #200]	; (f54 <main+0x17c>)
     e8c:	f000 f932 	bl	10f4 <puts>
     e90:	e7d3      	b.n	e3a <main+0x62>
     e92:	b2db      	uxtb	r3, r3
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     e94:	f003 0307 	and.w	r3, r3, #7
     e98:	2b03      	cmp	r3, #3
     e9a:	d1b9      	bne.n	e10 <main+0x38>
    result += timer_register_rw_test(CM3DS_MPS2_TIMER0);
     e9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     ea0:	f7ff f9b2 	bl	208 <timer_register_rw_test>
     ea4:	4604      	mov	r4, r0
    result += timer_start_stop_test(CM3DS_MPS2_TIMER0);
     ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     eaa:	f7ff fb1f 	bl	4ec <timer_start_stop_test>
     eae:	4404      	add	r4, r0
    result += timer_interrupt_test_1(CM3DS_MPS2_TIMER0);
     eb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     eb4:	f7ff fbc2 	bl	63c <timer_interrupt_test_1>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     eb8:	4b23      	ldr	r3, [pc, #140]	; (f48 <main+0x170>)
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     eba:	4a24      	ldr	r2, [pc, #144]	; (f4c <main+0x174>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     ebc:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     ebe:	6812      	ldr	r2, [r2, #0]
    result += timer_interrupt_test_1(CM3DS_MPS2_TIMER0);
     ec0:	4404      	add	r4, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     ec2:	2a20      	cmp	r2, #32
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     ec4:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     ec6:	d103      	bne.n	ed0 <main+0xf8>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     ec8:	4a21      	ldr	r2, [pc, #132]	; (f50 <main+0x178>)
     eca:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     ecc:	2ab8      	cmp	r2, #184	; 0xb8
     ece:	d003      	beq.n	ed8 <main+0x100>
      puts ("- GPIO #0 not present. Test skipped.");
     ed0:	4820      	ldr	r0, [pc, #128]	; (f54 <main+0x17c>)
     ed2:	f000 f90f 	bl	10f4 <puts>
     ed6:	e79f      	b.n	e18 <main+0x40>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     ed8:	f003 0307 	and.w	r3, r3, #7
     edc:	2b03      	cmp	r3, #3
     ede:	d1f7      	bne.n	ed0 <main+0xf8>
      result += timer_external_input(CM3DS_MPS2_TIMER0);
     ee0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     ee4:	f7ff fcac 	bl	840 <timer_external_input>
     ee8:	4404      	add	r4, r0
     eea:	e795      	b.n	e18 <main+0x40>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     eec:	f003 0307 	and.w	r3, r3, #7
     ef0:	2b03      	cmp	r3, #3
     ef2:	d1ca      	bne.n	e8a <main+0xb2>
      result += timer_external_input(CM3DS_MPS2_TIMER1);
     ef4:	4813      	ldr	r0, [pc, #76]	; (f44 <main+0x16c>)
     ef6:	f7ff fca3 	bl	840 <timer_external_input>
     efa:	4404      	add	r4, r0
     efc:	e79d      	b.n	e3a <main+0x62>
     efe:	bf00      	nop
     f00:	000023f4 	.word	0x000023f4
     f04:	20000078 	.word	0x20000078
     f08:	20000074 	.word	0x20000074
     f0c:	20000084 	.word	0x20000084
     f10:	20000080 	.word	0x20000080
     f14:	00002438 	.word	0x00002438
     f18:	40000fe8 	.word	0x40000fe8
     f1c:	40000fe0 	.word	0x40000fe0
     f20:	40000fe4 	.word	0x40000fe4
     f24:	0000246c 	.word	0x0000246c
     f28:	00002494 	.word	0x00002494
     f2c:	40001fe8 	.word	0x40001fe8
     f30:	40001fe0 	.word	0x40001fe0
     f34:	40001fe4 	.word	0x40001fe4
     f38:	000024a0 	.word	0x000024a0
     f3c:	000024dc 	.word	0x000024dc
     f40:	000024c8 	.word	0x000024c8
     f44:	40001000 	.word	0x40001000
     f48:	40010fe8 	.word	0x40010fe8
     f4c:	40010fe0 	.word	0x40010fe0
     f50:	40010fe4 	.word	0x40010fe4
     f54:	00002444 	.word	0x00002444

00000f58 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     f58:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     f5a:	4616      	mov	r6, r2
     f5c:	b13a      	cbz	r2, f6e <_write+0x16>
     f5e:	1e4c      	subs	r4, r1, #1
     f60:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     f62:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     f66:	f000 f80d 	bl	f84 <UartPutc>
  for (i=0; i<len;i++) {
     f6a:	42ac      	cmp	r4, r5
     f6c:	d1f9      	bne.n	f62 <_write+0xa>
    }
  return len;
}
     f6e:	4630      	mov	r0, r6
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	bf00      	nop

00000f74 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     f78:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     f7a:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     f7c:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     f7e:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     f80:	4770      	bx	lr
     f82:	bf00      	nop

00000f84 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     f84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     f88:	6853      	ldr	r3, [r2, #4]
     f8a:	07db      	lsls	r3, r3, #31
     f8c:	d4fc      	bmi.n	f88 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     f8e:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     f90:	4770      	bx	lr
     f92:	bf00      	nop

00000f94 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     f94:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     f98:	6853      	ldr	r3, [r2, #4]
     f9a:	079b      	lsls	r3, r3, #30
     f9c:	d5fc      	bpl.n	f98 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     f9e:	6810      	ldr	r0, [r2, #0]
}
     fa0:	b2c0      	uxtb	r0, r0
     fa2:	4770      	bx	lr

00000fa4 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     fa8:	685a      	ldr	r2, [r3, #4]
     faa:	07d2      	lsls	r2, r2, #31
     fac:	d4fc      	bmi.n	fa8 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     fae:	2204      	movs	r2, #4
     fb0:	601a      	str	r2, [r3, #0]
     fb2:	e7fe      	b.n	fb2 <UartEndSimulation+0xe>

00000fb4 <SystemCoreClockUpdate>:
     fb4:	4b01      	ldr	r3, [pc, #4]	; (fbc <SystemCoreClockUpdate+0x8>)
     fb6:	4a02      	ldr	r2, [pc, #8]	; (fc0 <SystemCoreClockUpdate+0xc>)
     fb8:	601a      	str	r2, [r3, #0]
     fba:	4770      	bx	lr
     fbc:	20000000 	.word	0x20000000
     fc0:	017d7840 	.word	0x017d7840

00000fc4 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
     fc4:	4b01      	ldr	r3, [pc, #4]	; (fcc <SystemInit+0x8>)
     fc6:	4a02      	ldr	r2, [pc, #8]	; (fd0 <SystemInit+0xc>)
     fc8:	601a      	str	r2, [r3, #0]

}
     fca:	4770      	bx	lr
     fcc:	20000000 	.word	0x20000000
     fd0:	017d7840 	.word	0x017d7840

00000fd4 <exit>:
     fd4:	b508      	push	{r3, lr}
     fd6:	4b07      	ldr	r3, [pc, #28]	; (ff4 <exit+0x20>)
     fd8:	4604      	mov	r4, r0
     fda:	b113      	cbz	r3, fe2 <exit+0xe>
     fdc:	2100      	movs	r1, #0
     fde:	f3af 8000 	nop.w
     fe2:	4b05      	ldr	r3, [pc, #20]	; (ff8 <exit+0x24>)
     fe4:	6818      	ldr	r0, [r3, #0]
     fe6:	6a83      	ldr	r3, [r0, #40]	; 0x28
     fe8:	b103      	cbz	r3, fec <exit+0x18>
     fea:	4798      	blx	r3
     fec:	4620      	mov	r0, r4
     fee:	f000 ff93 	bl	1f18 <_exit>
     ff2:	bf00      	nop
     ff4:	00000000 	.word	0x00000000
     ff8:	00002568 	.word	0x00002568

00000ffc <memset>:
     ffc:	4603      	mov	r3, r0
     ffe:	4402      	add	r2, r0
    1000:	4293      	cmp	r3, r2
    1002:	d100      	bne.n	1006 <memset+0xa>
    1004:	4770      	bx	lr
    1006:	f803 1b01 	strb.w	r1, [r3], #1
    100a:	e7f9      	b.n	1000 <memset+0x4>

0000100c <iprintf>:
    100c:	b40f      	push	{r0, r1, r2, r3}
    100e:	4b0a      	ldr	r3, [pc, #40]	; (1038 <iprintf+0x2c>)
    1010:	b513      	push	{r0, r1, r4, lr}
    1012:	681c      	ldr	r4, [r3, #0]
    1014:	b124      	cbz	r4, 1020 <iprintf+0x14>
    1016:	69a3      	ldr	r3, [r4, #24]
    1018:	b913      	cbnz	r3, 1020 <iprintf+0x14>
    101a:	4620      	mov	r0, r4
    101c:	f000 fa22 	bl	1464 <__sinit>
    1020:	ab05      	add	r3, sp, #20
    1022:	9a04      	ldr	r2, [sp, #16]
    1024:	68a1      	ldr	r1, [r4, #8]
    1026:	4620      	mov	r0, r4
    1028:	9301      	str	r3, [sp, #4]
    102a:	f000 fbd7 	bl	17dc <_vfiprintf_r>
    102e:	b002      	add	sp, #8
    1030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1034:	b004      	add	sp, #16
    1036:	4770      	bx	lr
    1038:	20000004 	.word	0x20000004

0000103c <_puts_r>:
    103c:	b570      	push	{r4, r5, r6, lr}
    103e:	460e      	mov	r6, r1
    1040:	4605      	mov	r5, r0
    1042:	b118      	cbz	r0, 104c <_puts_r+0x10>
    1044:	6983      	ldr	r3, [r0, #24]
    1046:	b90b      	cbnz	r3, 104c <_puts_r+0x10>
    1048:	f000 fa0c 	bl	1464 <__sinit>
    104c:	69ab      	ldr	r3, [r5, #24]
    104e:	68ac      	ldr	r4, [r5, #8]
    1050:	b913      	cbnz	r3, 1058 <_puts_r+0x1c>
    1052:	4628      	mov	r0, r5
    1054:	f000 fa06 	bl	1464 <__sinit>
    1058:	4b23      	ldr	r3, [pc, #140]	; (10e8 <_puts_r+0xac>)
    105a:	429c      	cmp	r4, r3
    105c:	d117      	bne.n	108e <_puts_r+0x52>
    105e:	686c      	ldr	r4, [r5, #4]
    1060:	89a3      	ldrh	r3, [r4, #12]
    1062:	071b      	lsls	r3, r3, #28
    1064:	d51d      	bpl.n	10a2 <_puts_r+0x66>
    1066:	6923      	ldr	r3, [r4, #16]
    1068:	b1db      	cbz	r3, 10a2 <_puts_r+0x66>
    106a:	3e01      	subs	r6, #1
    106c:	68a3      	ldr	r3, [r4, #8]
    106e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1072:	3b01      	subs	r3, #1
    1074:	60a3      	str	r3, [r4, #8]
    1076:	b9e9      	cbnz	r1, 10b4 <_puts_r+0x78>
    1078:	2b00      	cmp	r3, #0
    107a:	da2e      	bge.n	10da <_puts_r+0x9e>
    107c:	4622      	mov	r2, r4
    107e:	210a      	movs	r1, #10
    1080:	4628      	mov	r0, r5
    1082:	f000 f83f 	bl	1104 <__swbuf_r>
    1086:	3001      	adds	r0, #1
    1088:	d011      	beq.n	10ae <_puts_r+0x72>
    108a:	200a      	movs	r0, #10
    108c:	e011      	b.n	10b2 <_puts_r+0x76>
    108e:	4b17      	ldr	r3, [pc, #92]	; (10ec <_puts_r+0xb0>)
    1090:	429c      	cmp	r4, r3
    1092:	d101      	bne.n	1098 <_puts_r+0x5c>
    1094:	68ac      	ldr	r4, [r5, #8]
    1096:	e7e3      	b.n	1060 <_puts_r+0x24>
    1098:	4b15      	ldr	r3, [pc, #84]	; (10f0 <_puts_r+0xb4>)
    109a:	429c      	cmp	r4, r3
    109c:	bf08      	it	eq
    109e:	68ec      	ldreq	r4, [r5, #12]
    10a0:	e7de      	b.n	1060 <_puts_r+0x24>
    10a2:	4621      	mov	r1, r4
    10a4:	4628      	mov	r0, r5
    10a6:	f000 f87f 	bl	11a8 <__swsetup_r>
    10aa:	2800      	cmp	r0, #0
    10ac:	d0dd      	beq.n	106a <_puts_r+0x2e>
    10ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10b2:	bd70      	pop	{r4, r5, r6, pc}
    10b4:	2b00      	cmp	r3, #0
    10b6:	da04      	bge.n	10c2 <_puts_r+0x86>
    10b8:	69a2      	ldr	r2, [r4, #24]
    10ba:	429a      	cmp	r2, r3
    10bc:	dc06      	bgt.n	10cc <_puts_r+0x90>
    10be:	290a      	cmp	r1, #10
    10c0:	d004      	beq.n	10cc <_puts_r+0x90>
    10c2:	6823      	ldr	r3, [r4, #0]
    10c4:	1c5a      	adds	r2, r3, #1
    10c6:	6022      	str	r2, [r4, #0]
    10c8:	7019      	strb	r1, [r3, #0]
    10ca:	e7cf      	b.n	106c <_puts_r+0x30>
    10cc:	4622      	mov	r2, r4
    10ce:	4628      	mov	r0, r5
    10d0:	f000 f818 	bl	1104 <__swbuf_r>
    10d4:	3001      	adds	r0, #1
    10d6:	d1c9      	bne.n	106c <_puts_r+0x30>
    10d8:	e7e9      	b.n	10ae <_puts_r+0x72>
    10da:	200a      	movs	r0, #10
    10dc:	6823      	ldr	r3, [r4, #0]
    10de:	1c5a      	adds	r2, r3, #1
    10e0:	6022      	str	r2, [r4, #0]
    10e2:	7018      	strb	r0, [r3, #0]
    10e4:	e7e5      	b.n	10b2 <_puts_r+0x76>
    10e6:	bf00      	nop
    10e8:	0000258c 	.word	0x0000258c
    10ec:	000025ac 	.word	0x000025ac
    10f0:	0000256c 	.word	0x0000256c

000010f4 <puts>:
    10f4:	4b02      	ldr	r3, [pc, #8]	; (1100 <puts+0xc>)
    10f6:	4601      	mov	r1, r0
    10f8:	6818      	ldr	r0, [r3, #0]
    10fa:	f7ff bf9f 	b.w	103c <_puts_r>
    10fe:	bf00      	nop
    1100:	20000004 	.word	0x20000004

00001104 <__swbuf_r>:
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1106:	460e      	mov	r6, r1
    1108:	4614      	mov	r4, r2
    110a:	4605      	mov	r5, r0
    110c:	b118      	cbz	r0, 1116 <__swbuf_r+0x12>
    110e:	6983      	ldr	r3, [r0, #24]
    1110:	b90b      	cbnz	r3, 1116 <__swbuf_r+0x12>
    1112:	f000 f9a7 	bl	1464 <__sinit>
    1116:	4b21      	ldr	r3, [pc, #132]	; (119c <__swbuf_r+0x98>)
    1118:	429c      	cmp	r4, r3
    111a:	d12a      	bne.n	1172 <__swbuf_r+0x6e>
    111c:	686c      	ldr	r4, [r5, #4]
    111e:	69a3      	ldr	r3, [r4, #24]
    1120:	60a3      	str	r3, [r4, #8]
    1122:	89a3      	ldrh	r3, [r4, #12]
    1124:	071a      	lsls	r2, r3, #28
    1126:	d52e      	bpl.n	1186 <__swbuf_r+0x82>
    1128:	6923      	ldr	r3, [r4, #16]
    112a:	b363      	cbz	r3, 1186 <__swbuf_r+0x82>
    112c:	6923      	ldr	r3, [r4, #16]
    112e:	6820      	ldr	r0, [r4, #0]
    1130:	b2f6      	uxtb	r6, r6
    1132:	1ac0      	subs	r0, r0, r3
    1134:	6963      	ldr	r3, [r4, #20]
    1136:	4637      	mov	r7, r6
    1138:	4283      	cmp	r3, r0
    113a:	dc04      	bgt.n	1146 <__swbuf_r+0x42>
    113c:	4621      	mov	r1, r4
    113e:	4628      	mov	r0, r5
    1140:	f000 f926 	bl	1390 <_fflush_r>
    1144:	bb28      	cbnz	r0, 1192 <__swbuf_r+0x8e>
    1146:	68a3      	ldr	r3, [r4, #8]
    1148:	3001      	adds	r0, #1
    114a:	3b01      	subs	r3, #1
    114c:	60a3      	str	r3, [r4, #8]
    114e:	6823      	ldr	r3, [r4, #0]
    1150:	1c5a      	adds	r2, r3, #1
    1152:	6022      	str	r2, [r4, #0]
    1154:	701e      	strb	r6, [r3, #0]
    1156:	6963      	ldr	r3, [r4, #20]
    1158:	4283      	cmp	r3, r0
    115a:	d004      	beq.n	1166 <__swbuf_r+0x62>
    115c:	89a3      	ldrh	r3, [r4, #12]
    115e:	07db      	lsls	r3, r3, #31
    1160:	d519      	bpl.n	1196 <__swbuf_r+0x92>
    1162:	2e0a      	cmp	r6, #10
    1164:	d117      	bne.n	1196 <__swbuf_r+0x92>
    1166:	4621      	mov	r1, r4
    1168:	4628      	mov	r0, r5
    116a:	f000 f911 	bl	1390 <_fflush_r>
    116e:	b190      	cbz	r0, 1196 <__swbuf_r+0x92>
    1170:	e00f      	b.n	1192 <__swbuf_r+0x8e>
    1172:	4b0b      	ldr	r3, [pc, #44]	; (11a0 <__swbuf_r+0x9c>)
    1174:	429c      	cmp	r4, r3
    1176:	d101      	bne.n	117c <__swbuf_r+0x78>
    1178:	68ac      	ldr	r4, [r5, #8]
    117a:	e7d0      	b.n	111e <__swbuf_r+0x1a>
    117c:	4b09      	ldr	r3, [pc, #36]	; (11a4 <__swbuf_r+0xa0>)
    117e:	429c      	cmp	r4, r3
    1180:	bf08      	it	eq
    1182:	68ec      	ldreq	r4, [r5, #12]
    1184:	e7cb      	b.n	111e <__swbuf_r+0x1a>
    1186:	4621      	mov	r1, r4
    1188:	4628      	mov	r0, r5
    118a:	f000 f80d 	bl	11a8 <__swsetup_r>
    118e:	2800      	cmp	r0, #0
    1190:	d0cc      	beq.n	112c <__swbuf_r+0x28>
    1192:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1196:	4638      	mov	r0, r7
    1198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    119a:	bf00      	nop
    119c:	0000258c 	.word	0x0000258c
    11a0:	000025ac 	.word	0x000025ac
    11a4:	0000256c 	.word	0x0000256c

000011a8 <__swsetup_r>:
    11a8:	4b32      	ldr	r3, [pc, #200]	; (1274 <__swsetup_r+0xcc>)
    11aa:	b570      	push	{r4, r5, r6, lr}
    11ac:	681d      	ldr	r5, [r3, #0]
    11ae:	4606      	mov	r6, r0
    11b0:	460c      	mov	r4, r1
    11b2:	b125      	cbz	r5, 11be <__swsetup_r+0x16>
    11b4:	69ab      	ldr	r3, [r5, #24]
    11b6:	b913      	cbnz	r3, 11be <__swsetup_r+0x16>
    11b8:	4628      	mov	r0, r5
    11ba:	f000 f953 	bl	1464 <__sinit>
    11be:	4b2e      	ldr	r3, [pc, #184]	; (1278 <__swsetup_r+0xd0>)
    11c0:	429c      	cmp	r4, r3
    11c2:	d10f      	bne.n	11e4 <__swsetup_r+0x3c>
    11c4:	686c      	ldr	r4, [r5, #4]
    11c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    11ca:	b29a      	uxth	r2, r3
    11cc:	0715      	lsls	r5, r2, #28
    11ce:	d42c      	bmi.n	122a <__swsetup_r+0x82>
    11d0:	06d0      	lsls	r0, r2, #27
    11d2:	d411      	bmi.n	11f8 <__swsetup_r+0x50>
    11d4:	2209      	movs	r2, #9
    11d6:	6032      	str	r2, [r6, #0]
    11d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    11dc:	81a3      	strh	r3, [r4, #12]
    11de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    11e2:	e03e      	b.n	1262 <__swsetup_r+0xba>
    11e4:	4b25      	ldr	r3, [pc, #148]	; (127c <__swsetup_r+0xd4>)
    11e6:	429c      	cmp	r4, r3
    11e8:	d101      	bne.n	11ee <__swsetup_r+0x46>
    11ea:	68ac      	ldr	r4, [r5, #8]
    11ec:	e7eb      	b.n	11c6 <__swsetup_r+0x1e>
    11ee:	4b24      	ldr	r3, [pc, #144]	; (1280 <__swsetup_r+0xd8>)
    11f0:	429c      	cmp	r4, r3
    11f2:	bf08      	it	eq
    11f4:	68ec      	ldreq	r4, [r5, #12]
    11f6:	e7e6      	b.n	11c6 <__swsetup_r+0x1e>
    11f8:	0751      	lsls	r1, r2, #29
    11fa:	d512      	bpl.n	1222 <__swsetup_r+0x7a>
    11fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    11fe:	b141      	cbz	r1, 1212 <__swsetup_r+0x6a>
    1200:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1204:	4299      	cmp	r1, r3
    1206:	d002      	beq.n	120e <__swsetup_r+0x66>
    1208:	4630      	mov	r0, r6
    120a:	f000 fa19 	bl	1640 <_free_r>
    120e:	2300      	movs	r3, #0
    1210:	6363      	str	r3, [r4, #52]	; 0x34
    1212:	89a3      	ldrh	r3, [r4, #12]
    1214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1218:	81a3      	strh	r3, [r4, #12]
    121a:	2300      	movs	r3, #0
    121c:	6063      	str	r3, [r4, #4]
    121e:	6923      	ldr	r3, [r4, #16]
    1220:	6023      	str	r3, [r4, #0]
    1222:	89a3      	ldrh	r3, [r4, #12]
    1224:	f043 0308 	orr.w	r3, r3, #8
    1228:	81a3      	strh	r3, [r4, #12]
    122a:	6923      	ldr	r3, [r4, #16]
    122c:	b94b      	cbnz	r3, 1242 <__swsetup_r+0x9a>
    122e:	89a3      	ldrh	r3, [r4, #12]
    1230:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1238:	d003      	beq.n	1242 <__swsetup_r+0x9a>
    123a:	4621      	mov	r1, r4
    123c:	4630      	mov	r0, r6
    123e:	f000 f9bf 	bl	15c0 <__smakebuf_r>
    1242:	89a2      	ldrh	r2, [r4, #12]
    1244:	f012 0301 	ands.w	r3, r2, #1
    1248:	d00c      	beq.n	1264 <__swsetup_r+0xbc>
    124a:	2300      	movs	r3, #0
    124c:	60a3      	str	r3, [r4, #8]
    124e:	6963      	ldr	r3, [r4, #20]
    1250:	425b      	negs	r3, r3
    1252:	61a3      	str	r3, [r4, #24]
    1254:	6923      	ldr	r3, [r4, #16]
    1256:	b953      	cbnz	r3, 126e <__swsetup_r+0xc6>
    1258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    125c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1260:	d1ba      	bne.n	11d8 <__swsetup_r+0x30>
    1262:	bd70      	pop	{r4, r5, r6, pc}
    1264:	0792      	lsls	r2, r2, #30
    1266:	bf58      	it	pl
    1268:	6963      	ldrpl	r3, [r4, #20]
    126a:	60a3      	str	r3, [r4, #8]
    126c:	e7f2      	b.n	1254 <__swsetup_r+0xac>
    126e:	2000      	movs	r0, #0
    1270:	e7f7      	b.n	1262 <__swsetup_r+0xba>
    1272:	bf00      	nop
    1274:	20000004 	.word	0x20000004
    1278:	0000258c 	.word	0x0000258c
    127c:	000025ac 	.word	0x000025ac
    1280:	0000256c 	.word	0x0000256c

00001284 <__sflush_r>:
    1284:	898a      	ldrh	r2, [r1, #12]
    1286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    128a:	4605      	mov	r5, r0
    128c:	0710      	lsls	r0, r2, #28
    128e:	460c      	mov	r4, r1
    1290:	d458      	bmi.n	1344 <__sflush_r+0xc0>
    1292:	684b      	ldr	r3, [r1, #4]
    1294:	2b00      	cmp	r3, #0
    1296:	dc05      	bgt.n	12a4 <__sflush_r+0x20>
    1298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    129a:	2b00      	cmp	r3, #0
    129c:	dc02      	bgt.n	12a4 <__sflush_r+0x20>
    129e:	2000      	movs	r0, #0
    12a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    12a6:	2e00      	cmp	r6, #0
    12a8:	d0f9      	beq.n	129e <__sflush_r+0x1a>
    12aa:	2300      	movs	r3, #0
    12ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    12b0:	682f      	ldr	r7, [r5, #0]
    12b2:	6a21      	ldr	r1, [r4, #32]
    12b4:	602b      	str	r3, [r5, #0]
    12b6:	d032      	beq.n	131e <__sflush_r+0x9a>
    12b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    12ba:	89a3      	ldrh	r3, [r4, #12]
    12bc:	075a      	lsls	r2, r3, #29
    12be:	d505      	bpl.n	12cc <__sflush_r+0x48>
    12c0:	6863      	ldr	r3, [r4, #4]
    12c2:	1ac0      	subs	r0, r0, r3
    12c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    12c6:	b10b      	cbz	r3, 12cc <__sflush_r+0x48>
    12c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12ca:	1ac0      	subs	r0, r0, r3
    12cc:	2300      	movs	r3, #0
    12ce:	4602      	mov	r2, r0
    12d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    12d2:	6a21      	ldr	r1, [r4, #32]
    12d4:	4628      	mov	r0, r5
    12d6:	47b0      	blx	r6
    12d8:	1c43      	adds	r3, r0, #1
    12da:	89a3      	ldrh	r3, [r4, #12]
    12dc:	d106      	bne.n	12ec <__sflush_r+0x68>
    12de:	6829      	ldr	r1, [r5, #0]
    12e0:	291d      	cmp	r1, #29
    12e2:	d848      	bhi.n	1376 <__sflush_r+0xf2>
    12e4:	4a29      	ldr	r2, [pc, #164]	; (138c <__sflush_r+0x108>)
    12e6:	40ca      	lsrs	r2, r1
    12e8:	07d6      	lsls	r6, r2, #31
    12ea:	d544      	bpl.n	1376 <__sflush_r+0xf2>
    12ec:	2200      	movs	r2, #0
    12ee:	6062      	str	r2, [r4, #4]
    12f0:	6922      	ldr	r2, [r4, #16]
    12f2:	04d9      	lsls	r1, r3, #19
    12f4:	6022      	str	r2, [r4, #0]
    12f6:	d504      	bpl.n	1302 <__sflush_r+0x7e>
    12f8:	1c42      	adds	r2, r0, #1
    12fa:	d101      	bne.n	1300 <__sflush_r+0x7c>
    12fc:	682b      	ldr	r3, [r5, #0]
    12fe:	b903      	cbnz	r3, 1302 <__sflush_r+0x7e>
    1300:	6560      	str	r0, [r4, #84]	; 0x54
    1302:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1304:	602f      	str	r7, [r5, #0]
    1306:	2900      	cmp	r1, #0
    1308:	d0c9      	beq.n	129e <__sflush_r+0x1a>
    130a:	f104 0344 	add.w	r3, r4, #68	; 0x44
    130e:	4299      	cmp	r1, r3
    1310:	d002      	beq.n	1318 <__sflush_r+0x94>
    1312:	4628      	mov	r0, r5
    1314:	f000 f994 	bl	1640 <_free_r>
    1318:	2000      	movs	r0, #0
    131a:	6360      	str	r0, [r4, #52]	; 0x34
    131c:	e7c0      	b.n	12a0 <__sflush_r+0x1c>
    131e:	2301      	movs	r3, #1
    1320:	4628      	mov	r0, r5
    1322:	47b0      	blx	r6
    1324:	1c41      	adds	r1, r0, #1
    1326:	d1c8      	bne.n	12ba <__sflush_r+0x36>
    1328:	682b      	ldr	r3, [r5, #0]
    132a:	2b00      	cmp	r3, #0
    132c:	d0c5      	beq.n	12ba <__sflush_r+0x36>
    132e:	2b1d      	cmp	r3, #29
    1330:	d001      	beq.n	1336 <__sflush_r+0xb2>
    1332:	2b16      	cmp	r3, #22
    1334:	d101      	bne.n	133a <__sflush_r+0xb6>
    1336:	602f      	str	r7, [r5, #0]
    1338:	e7b1      	b.n	129e <__sflush_r+0x1a>
    133a:	89a3      	ldrh	r3, [r4, #12]
    133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1340:	81a3      	strh	r3, [r4, #12]
    1342:	e7ad      	b.n	12a0 <__sflush_r+0x1c>
    1344:	690f      	ldr	r7, [r1, #16]
    1346:	2f00      	cmp	r7, #0
    1348:	d0a9      	beq.n	129e <__sflush_r+0x1a>
    134a:	0793      	lsls	r3, r2, #30
    134c:	bf18      	it	ne
    134e:	2300      	movne	r3, #0
    1350:	680e      	ldr	r6, [r1, #0]
    1352:	bf08      	it	eq
    1354:	694b      	ldreq	r3, [r1, #20]
    1356:	eba6 0807 	sub.w	r8, r6, r7
    135a:	600f      	str	r7, [r1, #0]
    135c:	608b      	str	r3, [r1, #8]
    135e:	f1b8 0f00 	cmp.w	r8, #0
    1362:	dd9c      	ble.n	129e <__sflush_r+0x1a>
    1364:	4643      	mov	r3, r8
    1366:	463a      	mov	r2, r7
    1368:	6a21      	ldr	r1, [r4, #32]
    136a:	4628      	mov	r0, r5
    136c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    136e:	47b0      	blx	r6
    1370:	2800      	cmp	r0, #0
    1372:	dc06      	bgt.n	1382 <__sflush_r+0xfe>
    1374:	89a3      	ldrh	r3, [r4, #12]
    1376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    137a:	81a3      	strh	r3, [r4, #12]
    137c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1380:	e78e      	b.n	12a0 <__sflush_r+0x1c>
    1382:	4407      	add	r7, r0
    1384:	eba8 0800 	sub.w	r8, r8, r0
    1388:	e7e9      	b.n	135e <__sflush_r+0xda>
    138a:	bf00      	nop
    138c:	20400001 	.word	0x20400001

00001390 <_fflush_r>:
    1390:	b538      	push	{r3, r4, r5, lr}
    1392:	690b      	ldr	r3, [r1, #16]
    1394:	4605      	mov	r5, r0
    1396:	460c      	mov	r4, r1
    1398:	b1db      	cbz	r3, 13d2 <_fflush_r+0x42>
    139a:	b118      	cbz	r0, 13a4 <_fflush_r+0x14>
    139c:	6983      	ldr	r3, [r0, #24]
    139e:	b90b      	cbnz	r3, 13a4 <_fflush_r+0x14>
    13a0:	f000 f860 	bl	1464 <__sinit>
    13a4:	4b0c      	ldr	r3, [pc, #48]	; (13d8 <_fflush_r+0x48>)
    13a6:	429c      	cmp	r4, r3
    13a8:	d109      	bne.n	13be <_fflush_r+0x2e>
    13aa:	686c      	ldr	r4, [r5, #4]
    13ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    13b0:	b17b      	cbz	r3, 13d2 <_fflush_r+0x42>
    13b2:	4621      	mov	r1, r4
    13b4:	4628      	mov	r0, r5
    13b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    13ba:	f7ff bf63 	b.w	1284 <__sflush_r>
    13be:	4b07      	ldr	r3, [pc, #28]	; (13dc <_fflush_r+0x4c>)
    13c0:	429c      	cmp	r4, r3
    13c2:	d101      	bne.n	13c8 <_fflush_r+0x38>
    13c4:	68ac      	ldr	r4, [r5, #8]
    13c6:	e7f1      	b.n	13ac <_fflush_r+0x1c>
    13c8:	4b05      	ldr	r3, [pc, #20]	; (13e0 <_fflush_r+0x50>)
    13ca:	429c      	cmp	r4, r3
    13cc:	bf08      	it	eq
    13ce:	68ec      	ldreq	r4, [r5, #12]
    13d0:	e7ec      	b.n	13ac <_fflush_r+0x1c>
    13d2:	2000      	movs	r0, #0
    13d4:	bd38      	pop	{r3, r4, r5, pc}
    13d6:	bf00      	nop
    13d8:	0000258c 	.word	0x0000258c
    13dc:	000025ac 	.word	0x000025ac
    13e0:	0000256c 	.word	0x0000256c

000013e4 <std>:
    13e4:	2300      	movs	r3, #0
    13e6:	b510      	push	{r4, lr}
    13e8:	4604      	mov	r4, r0
    13ea:	e9c0 3300 	strd	r3, r3, [r0]
    13ee:	6083      	str	r3, [r0, #8]
    13f0:	8181      	strh	r1, [r0, #12]
    13f2:	6643      	str	r3, [r0, #100]	; 0x64
    13f4:	81c2      	strh	r2, [r0, #14]
    13f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
    13fa:	6183      	str	r3, [r0, #24]
    13fc:	4619      	mov	r1, r3
    13fe:	2208      	movs	r2, #8
    1400:	305c      	adds	r0, #92	; 0x5c
    1402:	f7ff fdfb 	bl	ffc <memset>
    1406:	4b05      	ldr	r3, [pc, #20]	; (141c <std+0x38>)
    1408:	6224      	str	r4, [r4, #32]
    140a:	6263      	str	r3, [r4, #36]	; 0x24
    140c:	4b04      	ldr	r3, [pc, #16]	; (1420 <std+0x3c>)
    140e:	62a3      	str	r3, [r4, #40]	; 0x28
    1410:	4b04      	ldr	r3, [pc, #16]	; (1424 <std+0x40>)
    1412:	62e3      	str	r3, [r4, #44]	; 0x2c
    1414:	4b04      	ldr	r3, [pc, #16]	; (1428 <std+0x44>)
    1416:	6323      	str	r3, [r4, #48]	; 0x30
    1418:	bd10      	pop	{r4, pc}
    141a:	bf00      	nop
    141c:	00001d35 	.word	0x00001d35
    1420:	00001d57 	.word	0x00001d57
    1424:	00001d8f 	.word	0x00001d8f
    1428:	00001db3 	.word	0x00001db3

0000142c <_cleanup_r>:
    142c:	4901      	ldr	r1, [pc, #4]	; (1434 <_cleanup_r+0x8>)
    142e:	f000 b885 	b.w	153c <_fwalk_reent>
    1432:	bf00      	nop
    1434:	00001391 	.word	0x00001391

00001438 <__sfmoreglue>:
    1438:	b570      	push	{r4, r5, r6, lr}
    143a:	2568      	movs	r5, #104	; 0x68
    143c:	1e4a      	subs	r2, r1, #1
    143e:	4355      	muls	r5, r2
    1440:	460e      	mov	r6, r1
    1442:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1446:	f000 f947 	bl	16d8 <_malloc_r>
    144a:	4604      	mov	r4, r0
    144c:	b140      	cbz	r0, 1460 <__sfmoreglue+0x28>
    144e:	2100      	movs	r1, #0
    1450:	e9c0 1600 	strd	r1, r6, [r0]
    1454:	300c      	adds	r0, #12
    1456:	60a0      	str	r0, [r4, #8]
    1458:	f105 0268 	add.w	r2, r5, #104	; 0x68
    145c:	f7ff fdce 	bl	ffc <memset>
    1460:	4620      	mov	r0, r4
    1462:	bd70      	pop	{r4, r5, r6, pc}

00001464 <__sinit>:
    1464:	6983      	ldr	r3, [r0, #24]
    1466:	b510      	push	{r4, lr}
    1468:	4604      	mov	r4, r0
    146a:	bb33      	cbnz	r3, 14ba <__sinit+0x56>
    146c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    1470:	6503      	str	r3, [r0, #80]	; 0x50
    1472:	4b12      	ldr	r3, [pc, #72]	; (14bc <__sinit+0x58>)
    1474:	4a12      	ldr	r2, [pc, #72]	; (14c0 <__sinit+0x5c>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	6282      	str	r2, [r0, #40]	; 0x28
    147a:	4298      	cmp	r0, r3
    147c:	bf04      	itt	eq
    147e:	2301      	moveq	r3, #1
    1480:	6183      	streq	r3, [r0, #24]
    1482:	f000 f81f 	bl	14c4 <__sfp>
    1486:	6060      	str	r0, [r4, #4]
    1488:	4620      	mov	r0, r4
    148a:	f000 f81b 	bl	14c4 <__sfp>
    148e:	60a0      	str	r0, [r4, #8]
    1490:	4620      	mov	r0, r4
    1492:	f000 f817 	bl	14c4 <__sfp>
    1496:	2200      	movs	r2, #0
    1498:	60e0      	str	r0, [r4, #12]
    149a:	2104      	movs	r1, #4
    149c:	6860      	ldr	r0, [r4, #4]
    149e:	f7ff ffa1 	bl	13e4 <std>
    14a2:	2201      	movs	r2, #1
    14a4:	2109      	movs	r1, #9
    14a6:	68a0      	ldr	r0, [r4, #8]
    14a8:	f7ff ff9c 	bl	13e4 <std>
    14ac:	2202      	movs	r2, #2
    14ae:	2112      	movs	r1, #18
    14b0:	68e0      	ldr	r0, [r4, #12]
    14b2:	f7ff ff97 	bl	13e4 <std>
    14b6:	2301      	movs	r3, #1
    14b8:	61a3      	str	r3, [r4, #24]
    14ba:	bd10      	pop	{r4, pc}
    14bc:	00002568 	.word	0x00002568
    14c0:	0000142d 	.word	0x0000142d

000014c4 <__sfp>:
    14c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14c6:	4b1b      	ldr	r3, [pc, #108]	; (1534 <__sfp+0x70>)
    14c8:	4607      	mov	r7, r0
    14ca:	681e      	ldr	r6, [r3, #0]
    14cc:	69b3      	ldr	r3, [r6, #24]
    14ce:	b913      	cbnz	r3, 14d6 <__sfp+0x12>
    14d0:	4630      	mov	r0, r6
    14d2:	f7ff ffc7 	bl	1464 <__sinit>
    14d6:	3648      	adds	r6, #72	; 0x48
    14d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    14dc:	3b01      	subs	r3, #1
    14de:	d503      	bpl.n	14e8 <__sfp+0x24>
    14e0:	6833      	ldr	r3, [r6, #0]
    14e2:	b133      	cbz	r3, 14f2 <__sfp+0x2e>
    14e4:	6836      	ldr	r6, [r6, #0]
    14e6:	e7f7      	b.n	14d8 <__sfp+0x14>
    14e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    14ec:	b16d      	cbz	r5, 150a <__sfp+0x46>
    14ee:	3468      	adds	r4, #104	; 0x68
    14f0:	e7f4      	b.n	14dc <__sfp+0x18>
    14f2:	2104      	movs	r1, #4
    14f4:	4638      	mov	r0, r7
    14f6:	f7ff ff9f 	bl	1438 <__sfmoreglue>
    14fa:	6030      	str	r0, [r6, #0]
    14fc:	2800      	cmp	r0, #0
    14fe:	d1f1      	bne.n	14e4 <__sfp+0x20>
    1500:	230c      	movs	r3, #12
    1502:	4604      	mov	r4, r0
    1504:	603b      	str	r3, [r7, #0]
    1506:	4620      	mov	r0, r4
    1508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    150a:	4b0b      	ldr	r3, [pc, #44]	; (1538 <__sfp+0x74>)
    150c:	6665      	str	r5, [r4, #100]	; 0x64
    150e:	e9c4 5500 	strd	r5, r5, [r4]
    1512:	60a5      	str	r5, [r4, #8]
    1514:	e9c4 3503 	strd	r3, r5, [r4, #12]
    1518:	e9c4 5505 	strd	r5, r5, [r4, #20]
    151c:	2208      	movs	r2, #8
    151e:	4629      	mov	r1, r5
    1520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1524:	f7ff fd6a 	bl	ffc <memset>
    1528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    152c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    1530:	e7e9      	b.n	1506 <__sfp+0x42>
    1532:	bf00      	nop
    1534:	00002568 	.word	0x00002568
    1538:	ffff0001 	.word	0xffff0001

0000153c <_fwalk_reent>:
    153c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1540:	4680      	mov	r8, r0
    1542:	4689      	mov	r9, r1
    1544:	2600      	movs	r6, #0
    1546:	f100 0448 	add.w	r4, r0, #72	; 0x48
    154a:	b914      	cbnz	r4, 1552 <_fwalk_reent+0x16>
    154c:	4630      	mov	r0, r6
    154e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1552:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    1556:	3f01      	subs	r7, #1
    1558:	d501      	bpl.n	155e <_fwalk_reent+0x22>
    155a:	6824      	ldr	r4, [r4, #0]
    155c:	e7f5      	b.n	154a <_fwalk_reent+0xe>
    155e:	89ab      	ldrh	r3, [r5, #12]
    1560:	2b01      	cmp	r3, #1
    1562:	d907      	bls.n	1574 <_fwalk_reent+0x38>
    1564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1568:	3301      	adds	r3, #1
    156a:	d003      	beq.n	1574 <_fwalk_reent+0x38>
    156c:	4629      	mov	r1, r5
    156e:	4640      	mov	r0, r8
    1570:	47c8      	blx	r9
    1572:	4306      	orrs	r6, r0
    1574:	3568      	adds	r5, #104	; 0x68
    1576:	e7ee      	b.n	1556 <_fwalk_reent+0x1a>

00001578 <__swhatbuf_r>:
    1578:	b570      	push	{r4, r5, r6, lr}
    157a:	460e      	mov	r6, r1
    157c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1580:	b096      	sub	sp, #88	; 0x58
    1582:	2900      	cmp	r1, #0
    1584:	4614      	mov	r4, r2
    1586:	461d      	mov	r5, r3
    1588:	da07      	bge.n	159a <__swhatbuf_r+0x22>
    158a:	2300      	movs	r3, #0
    158c:	602b      	str	r3, [r5, #0]
    158e:	89b3      	ldrh	r3, [r6, #12]
    1590:	061a      	lsls	r2, r3, #24
    1592:	d410      	bmi.n	15b6 <__swhatbuf_r+0x3e>
    1594:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1598:	e00e      	b.n	15b8 <__swhatbuf_r+0x40>
    159a:	466a      	mov	r2, sp
    159c:	f000 fc30 	bl	1e00 <_fstat_r>
    15a0:	2800      	cmp	r0, #0
    15a2:	dbf2      	blt.n	158a <__swhatbuf_r+0x12>
    15a4:	9a01      	ldr	r2, [sp, #4]
    15a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    15aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    15ae:	425a      	negs	r2, r3
    15b0:	415a      	adcs	r2, r3
    15b2:	602a      	str	r2, [r5, #0]
    15b4:	e7ee      	b.n	1594 <__swhatbuf_r+0x1c>
    15b6:	2340      	movs	r3, #64	; 0x40
    15b8:	2000      	movs	r0, #0
    15ba:	6023      	str	r3, [r4, #0]
    15bc:	b016      	add	sp, #88	; 0x58
    15be:	bd70      	pop	{r4, r5, r6, pc}

000015c0 <__smakebuf_r>:
    15c0:	898b      	ldrh	r3, [r1, #12]
    15c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    15c4:	079d      	lsls	r5, r3, #30
    15c6:	4606      	mov	r6, r0
    15c8:	460c      	mov	r4, r1
    15ca:	d507      	bpl.n	15dc <__smakebuf_r+0x1c>
    15cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
    15d0:	6023      	str	r3, [r4, #0]
    15d2:	6123      	str	r3, [r4, #16]
    15d4:	2301      	movs	r3, #1
    15d6:	6163      	str	r3, [r4, #20]
    15d8:	b002      	add	sp, #8
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	ab01      	add	r3, sp, #4
    15de:	466a      	mov	r2, sp
    15e0:	f7ff ffca 	bl	1578 <__swhatbuf_r>
    15e4:	9900      	ldr	r1, [sp, #0]
    15e6:	4605      	mov	r5, r0
    15e8:	4630      	mov	r0, r6
    15ea:	f000 f875 	bl	16d8 <_malloc_r>
    15ee:	b948      	cbnz	r0, 1604 <__smakebuf_r+0x44>
    15f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    15f4:	059a      	lsls	r2, r3, #22
    15f6:	d4ef      	bmi.n	15d8 <__smakebuf_r+0x18>
    15f8:	f023 0303 	bic.w	r3, r3, #3
    15fc:	f043 0302 	orr.w	r3, r3, #2
    1600:	81a3      	strh	r3, [r4, #12]
    1602:	e7e3      	b.n	15cc <__smakebuf_r+0xc>
    1604:	4b0d      	ldr	r3, [pc, #52]	; (163c <__smakebuf_r+0x7c>)
    1606:	62b3      	str	r3, [r6, #40]	; 0x28
    1608:	89a3      	ldrh	r3, [r4, #12]
    160a:	6020      	str	r0, [r4, #0]
    160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1610:	81a3      	strh	r3, [r4, #12]
    1612:	9b00      	ldr	r3, [sp, #0]
    1614:	6120      	str	r0, [r4, #16]
    1616:	6163      	str	r3, [r4, #20]
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	b15b      	cbz	r3, 1634 <__smakebuf_r+0x74>
    161c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1620:	4630      	mov	r0, r6
    1622:	f000 fbff 	bl	1e24 <_isatty_r>
    1626:	b128      	cbz	r0, 1634 <__smakebuf_r+0x74>
    1628:	89a3      	ldrh	r3, [r4, #12]
    162a:	f023 0303 	bic.w	r3, r3, #3
    162e:	f043 0301 	orr.w	r3, r3, #1
    1632:	81a3      	strh	r3, [r4, #12]
    1634:	89a3      	ldrh	r3, [r4, #12]
    1636:	431d      	orrs	r5, r3
    1638:	81a5      	strh	r5, [r4, #12]
    163a:	e7cd      	b.n	15d8 <__smakebuf_r+0x18>
    163c:	0000142d 	.word	0x0000142d

00001640 <_free_r>:
    1640:	b538      	push	{r3, r4, r5, lr}
    1642:	4605      	mov	r5, r0
    1644:	2900      	cmp	r1, #0
    1646:	d043      	beq.n	16d0 <_free_r+0x90>
    1648:	f851 3c04 	ldr.w	r3, [r1, #-4]
    164c:	1f0c      	subs	r4, r1, #4
    164e:	2b00      	cmp	r3, #0
    1650:	bfb8      	it	lt
    1652:	18e4      	addlt	r4, r4, r3
    1654:	f000 fc16 	bl	1e84 <__malloc_lock>
    1658:	4a1e      	ldr	r2, [pc, #120]	; (16d4 <_free_r+0x94>)
    165a:	6813      	ldr	r3, [r2, #0]
    165c:	4610      	mov	r0, r2
    165e:	b933      	cbnz	r3, 166e <_free_r+0x2e>
    1660:	6063      	str	r3, [r4, #4]
    1662:	6014      	str	r4, [r2, #0]
    1664:	4628      	mov	r0, r5
    1666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    166a:	f000 bc0c 	b.w	1e86 <__malloc_unlock>
    166e:	42a3      	cmp	r3, r4
    1670:	d90b      	bls.n	168a <_free_r+0x4a>
    1672:	6821      	ldr	r1, [r4, #0]
    1674:	1862      	adds	r2, r4, r1
    1676:	4293      	cmp	r3, r2
    1678:	bf01      	itttt	eq
    167a:	681a      	ldreq	r2, [r3, #0]
    167c:	685b      	ldreq	r3, [r3, #4]
    167e:	1852      	addeq	r2, r2, r1
    1680:	6022      	streq	r2, [r4, #0]
    1682:	6063      	str	r3, [r4, #4]
    1684:	6004      	str	r4, [r0, #0]
    1686:	e7ed      	b.n	1664 <_free_r+0x24>
    1688:	4613      	mov	r3, r2
    168a:	685a      	ldr	r2, [r3, #4]
    168c:	b10a      	cbz	r2, 1692 <_free_r+0x52>
    168e:	42a2      	cmp	r2, r4
    1690:	d9fa      	bls.n	1688 <_free_r+0x48>
    1692:	6819      	ldr	r1, [r3, #0]
    1694:	1858      	adds	r0, r3, r1
    1696:	42a0      	cmp	r0, r4
    1698:	d10b      	bne.n	16b2 <_free_r+0x72>
    169a:	6820      	ldr	r0, [r4, #0]
    169c:	4401      	add	r1, r0
    169e:	1858      	adds	r0, r3, r1
    16a0:	4282      	cmp	r2, r0
    16a2:	6019      	str	r1, [r3, #0]
    16a4:	d1de      	bne.n	1664 <_free_r+0x24>
    16a6:	6810      	ldr	r0, [r2, #0]
    16a8:	6852      	ldr	r2, [r2, #4]
    16aa:	4401      	add	r1, r0
    16ac:	6019      	str	r1, [r3, #0]
    16ae:	605a      	str	r2, [r3, #4]
    16b0:	e7d8      	b.n	1664 <_free_r+0x24>
    16b2:	d902      	bls.n	16ba <_free_r+0x7a>
    16b4:	230c      	movs	r3, #12
    16b6:	602b      	str	r3, [r5, #0]
    16b8:	e7d4      	b.n	1664 <_free_r+0x24>
    16ba:	6820      	ldr	r0, [r4, #0]
    16bc:	1821      	adds	r1, r4, r0
    16be:	428a      	cmp	r2, r1
    16c0:	bf01      	itttt	eq
    16c2:	6811      	ldreq	r1, [r2, #0]
    16c4:	6852      	ldreq	r2, [r2, #4]
    16c6:	1809      	addeq	r1, r1, r0
    16c8:	6021      	streq	r1, [r4, #0]
    16ca:	6062      	str	r2, [r4, #4]
    16cc:	605c      	str	r4, [r3, #4]
    16ce:	e7c9      	b.n	1664 <_free_r+0x24>
    16d0:	bd38      	pop	{r3, r4, r5, pc}
    16d2:	bf00      	nop
    16d4:	20000068 	.word	0x20000068

000016d8 <_malloc_r>:
    16d8:	b570      	push	{r4, r5, r6, lr}
    16da:	1ccd      	adds	r5, r1, #3
    16dc:	f025 0503 	bic.w	r5, r5, #3
    16e0:	3508      	adds	r5, #8
    16e2:	2d0c      	cmp	r5, #12
    16e4:	bf38      	it	cc
    16e6:	250c      	movcc	r5, #12
    16e8:	2d00      	cmp	r5, #0
    16ea:	4606      	mov	r6, r0
    16ec:	db01      	blt.n	16f2 <_malloc_r+0x1a>
    16ee:	42a9      	cmp	r1, r5
    16f0:	d903      	bls.n	16fa <_malloc_r+0x22>
    16f2:	230c      	movs	r3, #12
    16f4:	6033      	str	r3, [r6, #0]
    16f6:	2000      	movs	r0, #0
    16f8:	bd70      	pop	{r4, r5, r6, pc}
    16fa:	f000 fbc3 	bl	1e84 <__malloc_lock>
    16fe:	4a21      	ldr	r2, [pc, #132]	; (1784 <_malloc_r+0xac>)
    1700:	6814      	ldr	r4, [r2, #0]
    1702:	4621      	mov	r1, r4
    1704:	b991      	cbnz	r1, 172c <_malloc_r+0x54>
    1706:	4c20      	ldr	r4, [pc, #128]	; (1788 <_malloc_r+0xb0>)
    1708:	6823      	ldr	r3, [r4, #0]
    170a:	b91b      	cbnz	r3, 1714 <_malloc_r+0x3c>
    170c:	4630      	mov	r0, r6
    170e:	f000 fb01 	bl	1d14 <_sbrk_r>
    1712:	6020      	str	r0, [r4, #0]
    1714:	4629      	mov	r1, r5
    1716:	4630      	mov	r0, r6
    1718:	f000 fafc 	bl	1d14 <_sbrk_r>
    171c:	1c43      	adds	r3, r0, #1
    171e:	d124      	bne.n	176a <_malloc_r+0x92>
    1720:	230c      	movs	r3, #12
    1722:	4630      	mov	r0, r6
    1724:	6033      	str	r3, [r6, #0]
    1726:	f000 fbae 	bl	1e86 <__malloc_unlock>
    172a:	e7e4      	b.n	16f6 <_malloc_r+0x1e>
    172c:	680b      	ldr	r3, [r1, #0]
    172e:	1b5b      	subs	r3, r3, r5
    1730:	d418      	bmi.n	1764 <_malloc_r+0x8c>
    1732:	2b0b      	cmp	r3, #11
    1734:	d90f      	bls.n	1756 <_malloc_r+0x7e>
    1736:	600b      	str	r3, [r1, #0]
    1738:	18cc      	adds	r4, r1, r3
    173a:	50cd      	str	r5, [r1, r3]
    173c:	4630      	mov	r0, r6
    173e:	f000 fba2 	bl	1e86 <__malloc_unlock>
    1742:	f104 000b 	add.w	r0, r4, #11
    1746:	1d23      	adds	r3, r4, #4
    1748:	f020 0007 	bic.w	r0, r0, #7
    174c:	1ac3      	subs	r3, r0, r3
    174e:	d0d3      	beq.n	16f8 <_malloc_r+0x20>
    1750:	425a      	negs	r2, r3
    1752:	50e2      	str	r2, [r4, r3]
    1754:	e7d0      	b.n	16f8 <_malloc_r+0x20>
    1756:	684b      	ldr	r3, [r1, #4]
    1758:	428c      	cmp	r4, r1
    175a:	bf16      	itet	ne
    175c:	6063      	strne	r3, [r4, #4]
    175e:	6013      	streq	r3, [r2, #0]
    1760:	460c      	movne	r4, r1
    1762:	e7eb      	b.n	173c <_malloc_r+0x64>
    1764:	460c      	mov	r4, r1
    1766:	6849      	ldr	r1, [r1, #4]
    1768:	e7cc      	b.n	1704 <_malloc_r+0x2c>
    176a:	1cc4      	adds	r4, r0, #3
    176c:	f024 0403 	bic.w	r4, r4, #3
    1770:	42a0      	cmp	r0, r4
    1772:	d005      	beq.n	1780 <_malloc_r+0xa8>
    1774:	1a21      	subs	r1, r4, r0
    1776:	4630      	mov	r0, r6
    1778:	f000 facc 	bl	1d14 <_sbrk_r>
    177c:	3001      	adds	r0, #1
    177e:	d0cf      	beq.n	1720 <_malloc_r+0x48>
    1780:	6025      	str	r5, [r4, #0]
    1782:	e7db      	b.n	173c <_malloc_r+0x64>
    1784:	20000068 	.word	0x20000068
    1788:	2000006c 	.word	0x2000006c

0000178c <__sfputc_r>:
    178c:	6893      	ldr	r3, [r2, #8]
    178e:	b410      	push	{r4}
    1790:	3b01      	subs	r3, #1
    1792:	2b00      	cmp	r3, #0
    1794:	6093      	str	r3, [r2, #8]
    1796:	da07      	bge.n	17a8 <__sfputc_r+0x1c>
    1798:	6994      	ldr	r4, [r2, #24]
    179a:	42a3      	cmp	r3, r4
    179c:	db01      	blt.n	17a2 <__sfputc_r+0x16>
    179e:	290a      	cmp	r1, #10
    17a0:	d102      	bne.n	17a8 <__sfputc_r+0x1c>
    17a2:	bc10      	pop	{r4}
    17a4:	f7ff bcae 	b.w	1104 <__swbuf_r>
    17a8:	6813      	ldr	r3, [r2, #0]
    17aa:	1c58      	adds	r0, r3, #1
    17ac:	6010      	str	r0, [r2, #0]
    17ae:	7019      	strb	r1, [r3, #0]
    17b0:	4608      	mov	r0, r1
    17b2:	bc10      	pop	{r4}
    17b4:	4770      	bx	lr

000017b6 <__sfputs_r>:
    17b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17b8:	4606      	mov	r6, r0
    17ba:	460f      	mov	r7, r1
    17bc:	4614      	mov	r4, r2
    17be:	18d5      	adds	r5, r2, r3
    17c0:	42ac      	cmp	r4, r5
    17c2:	d101      	bne.n	17c8 <__sfputs_r+0x12>
    17c4:	2000      	movs	r0, #0
    17c6:	e007      	b.n	17d8 <__sfputs_r+0x22>
    17c8:	463a      	mov	r2, r7
    17ca:	f814 1b01 	ldrb.w	r1, [r4], #1
    17ce:	4630      	mov	r0, r6
    17d0:	f7ff ffdc 	bl	178c <__sfputc_r>
    17d4:	1c43      	adds	r3, r0, #1
    17d6:	d1f3      	bne.n	17c0 <__sfputs_r+0xa>
    17d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000017dc <_vfiprintf_r>:
    17dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17e0:	b09d      	sub	sp, #116	; 0x74
    17e2:	460c      	mov	r4, r1
    17e4:	4617      	mov	r7, r2
    17e6:	9303      	str	r3, [sp, #12]
    17e8:	4606      	mov	r6, r0
    17ea:	b118      	cbz	r0, 17f4 <_vfiprintf_r+0x18>
    17ec:	6983      	ldr	r3, [r0, #24]
    17ee:	b90b      	cbnz	r3, 17f4 <_vfiprintf_r+0x18>
    17f0:	f7ff fe38 	bl	1464 <__sinit>
    17f4:	4b7b      	ldr	r3, [pc, #492]	; (19e4 <_vfiprintf_r+0x208>)
    17f6:	429c      	cmp	r4, r3
    17f8:	d157      	bne.n	18aa <_vfiprintf_r+0xce>
    17fa:	6874      	ldr	r4, [r6, #4]
    17fc:	89a3      	ldrh	r3, [r4, #12]
    17fe:	0718      	lsls	r0, r3, #28
    1800:	d55d      	bpl.n	18be <_vfiprintf_r+0xe2>
    1802:	6923      	ldr	r3, [r4, #16]
    1804:	2b00      	cmp	r3, #0
    1806:	d05a      	beq.n	18be <_vfiprintf_r+0xe2>
    1808:	2300      	movs	r3, #0
    180a:	9309      	str	r3, [sp, #36]	; 0x24
    180c:	2320      	movs	r3, #32
    180e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1812:	2330      	movs	r3, #48	; 0x30
    1814:	f04f 0b01 	mov.w	fp, #1
    1818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    181c:	46b8      	mov	r8, r7
    181e:	4645      	mov	r5, r8
    1820:	f815 3b01 	ldrb.w	r3, [r5], #1
    1824:	b10b      	cbz	r3, 182a <_vfiprintf_r+0x4e>
    1826:	2b25      	cmp	r3, #37	; 0x25
    1828:	d154      	bne.n	18d4 <_vfiprintf_r+0xf8>
    182a:	ebb8 0a07 	subs.w	sl, r8, r7
    182e:	d00b      	beq.n	1848 <_vfiprintf_r+0x6c>
    1830:	4653      	mov	r3, sl
    1832:	463a      	mov	r2, r7
    1834:	4621      	mov	r1, r4
    1836:	4630      	mov	r0, r6
    1838:	f7ff ffbd 	bl	17b6 <__sfputs_r>
    183c:	3001      	adds	r0, #1
    183e:	f000 80c2 	beq.w	19c6 <_vfiprintf_r+0x1ea>
    1842:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1844:	4453      	add	r3, sl
    1846:	9309      	str	r3, [sp, #36]	; 0x24
    1848:	f898 3000 	ldrb.w	r3, [r8]
    184c:	2b00      	cmp	r3, #0
    184e:	f000 80ba 	beq.w	19c6 <_vfiprintf_r+0x1ea>
    1852:	2300      	movs	r3, #0
    1854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1858:	e9cd 2305 	strd	r2, r3, [sp, #20]
    185c:	9304      	str	r3, [sp, #16]
    185e:	9307      	str	r3, [sp, #28]
    1860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1864:	931a      	str	r3, [sp, #104]	; 0x68
    1866:	46a8      	mov	r8, r5
    1868:	2205      	movs	r2, #5
    186a:	f818 1b01 	ldrb.w	r1, [r8], #1
    186e:	485e      	ldr	r0, [pc, #376]	; (19e8 <_vfiprintf_r+0x20c>)
    1870:	f000 fafa 	bl	1e68 <memchr>
    1874:	9b04      	ldr	r3, [sp, #16]
    1876:	bb78      	cbnz	r0, 18d8 <_vfiprintf_r+0xfc>
    1878:	06d9      	lsls	r1, r3, #27
    187a:	bf44      	itt	mi
    187c:	2220      	movmi	r2, #32
    187e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1882:	071a      	lsls	r2, r3, #28
    1884:	bf44      	itt	mi
    1886:	222b      	movmi	r2, #43	; 0x2b
    1888:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    188c:	782a      	ldrb	r2, [r5, #0]
    188e:	2a2a      	cmp	r2, #42	; 0x2a
    1890:	d02a      	beq.n	18e8 <_vfiprintf_r+0x10c>
    1892:	46a8      	mov	r8, r5
    1894:	2000      	movs	r0, #0
    1896:	250a      	movs	r5, #10
    1898:	9a07      	ldr	r2, [sp, #28]
    189a:	4641      	mov	r1, r8
    189c:	f811 3b01 	ldrb.w	r3, [r1], #1
    18a0:	3b30      	subs	r3, #48	; 0x30
    18a2:	2b09      	cmp	r3, #9
    18a4:	d969      	bls.n	197a <_vfiprintf_r+0x19e>
    18a6:	b360      	cbz	r0, 1902 <_vfiprintf_r+0x126>
    18a8:	e024      	b.n	18f4 <_vfiprintf_r+0x118>
    18aa:	4b50      	ldr	r3, [pc, #320]	; (19ec <_vfiprintf_r+0x210>)
    18ac:	429c      	cmp	r4, r3
    18ae:	d101      	bne.n	18b4 <_vfiprintf_r+0xd8>
    18b0:	68b4      	ldr	r4, [r6, #8]
    18b2:	e7a3      	b.n	17fc <_vfiprintf_r+0x20>
    18b4:	4b4e      	ldr	r3, [pc, #312]	; (19f0 <_vfiprintf_r+0x214>)
    18b6:	429c      	cmp	r4, r3
    18b8:	bf08      	it	eq
    18ba:	68f4      	ldreq	r4, [r6, #12]
    18bc:	e79e      	b.n	17fc <_vfiprintf_r+0x20>
    18be:	4621      	mov	r1, r4
    18c0:	4630      	mov	r0, r6
    18c2:	f7ff fc71 	bl	11a8 <__swsetup_r>
    18c6:	2800      	cmp	r0, #0
    18c8:	d09e      	beq.n	1808 <_vfiprintf_r+0x2c>
    18ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18ce:	b01d      	add	sp, #116	; 0x74
    18d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18d4:	46a8      	mov	r8, r5
    18d6:	e7a2      	b.n	181e <_vfiprintf_r+0x42>
    18d8:	4a43      	ldr	r2, [pc, #268]	; (19e8 <_vfiprintf_r+0x20c>)
    18da:	4645      	mov	r5, r8
    18dc:	1a80      	subs	r0, r0, r2
    18de:	fa0b f000 	lsl.w	r0, fp, r0
    18e2:	4318      	orrs	r0, r3
    18e4:	9004      	str	r0, [sp, #16]
    18e6:	e7be      	b.n	1866 <_vfiprintf_r+0x8a>
    18e8:	9a03      	ldr	r2, [sp, #12]
    18ea:	1d11      	adds	r1, r2, #4
    18ec:	6812      	ldr	r2, [r2, #0]
    18ee:	9103      	str	r1, [sp, #12]
    18f0:	2a00      	cmp	r2, #0
    18f2:	db01      	blt.n	18f8 <_vfiprintf_r+0x11c>
    18f4:	9207      	str	r2, [sp, #28]
    18f6:	e004      	b.n	1902 <_vfiprintf_r+0x126>
    18f8:	4252      	negs	r2, r2
    18fa:	f043 0302 	orr.w	r3, r3, #2
    18fe:	9207      	str	r2, [sp, #28]
    1900:	9304      	str	r3, [sp, #16]
    1902:	f898 3000 	ldrb.w	r3, [r8]
    1906:	2b2e      	cmp	r3, #46	; 0x2e
    1908:	d10e      	bne.n	1928 <_vfiprintf_r+0x14c>
    190a:	f898 3001 	ldrb.w	r3, [r8, #1]
    190e:	2b2a      	cmp	r3, #42	; 0x2a
    1910:	d138      	bne.n	1984 <_vfiprintf_r+0x1a8>
    1912:	9b03      	ldr	r3, [sp, #12]
    1914:	f108 0802 	add.w	r8, r8, #2
    1918:	1d1a      	adds	r2, r3, #4
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	9203      	str	r2, [sp, #12]
    191e:	2b00      	cmp	r3, #0
    1920:	bfb8      	it	lt
    1922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1926:	9305      	str	r3, [sp, #20]
    1928:	4d32      	ldr	r5, [pc, #200]	; (19f4 <_vfiprintf_r+0x218>)
    192a:	2203      	movs	r2, #3
    192c:	f898 1000 	ldrb.w	r1, [r8]
    1930:	4628      	mov	r0, r5
    1932:	f000 fa99 	bl	1e68 <memchr>
    1936:	b140      	cbz	r0, 194a <_vfiprintf_r+0x16e>
    1938:	2340      	movs	r3, #64	; 0x40
    193a:	1b40      	subs	r0, r0, r5
    193c:	fa03 f000 	lsl.w	r0, r3, r0
    1940:	9b04      	ldr	r3, [sp, #16]
    1942:	f108 0801 	add.w	r8, r8, #1
    1946:	4303      	orrs	r3, r0
    1948:	9304      	str	r3, [sp, #16]
    194a:	f898 1000 	ldrb.w	r1, [r8]
    194e:	2206      	movs	r2, #6
    1950:	4829      	ldr	r0, [pc, #164]	; (19f8 <_vfiprintf_r+0x21c>)
    1952:	f108 0701 	add.w	r7, r8, #1
    1956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    195a:	f000 fa85 	bl	1e68 <memchr>
    195e:	2800      	cmp	r0, #0
    1960:	d037      	beq.n	19d2 <_vfiprintf_r+0x1f6>
    1962:	4b26      	ldr	r3, [pc, #152]	; (19fc <_vfiprintf_r+0x220>)
    1964:	bb1b      	cbnz	r3, 19ae <_vfiprintf_r+0x1d2>
    1966:	9b03      	ldr	r3, [sp, #12]
    1968:	3307      	adds	r3, #7
    196a:	f023 0307 	bic.w	r3, r3, #7
    196e:	3308      	adds	r3, #8
    1970:	9303      	str	r3, [sp, #12]
    1972:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1974:	444b      	add	r3, r9
    1976:	9309      	str	r3, [sp, #36]	; 0x24
    1978:	e750      	b.n	181c <_vfiprintf_r+0x40>
    197a:	fb05 3202 	mla	r2, r5, r2, r3
    197e:	2001      	movs	r0, #1
    1980:	4688      	mov	r8, r1
    1982:	e78a      	b.n	189a <_vfiprintf_r+0xbe>
    1984:	2300      	movs	r3, #0
    1986:	250a      	movs	r5, #10
    1988:	4619      	mov	r1, r3
    198a:	f108 0801 	add.w	r8, r8, #1
    198e:	9305      	str	r3, [sp, #20]
    1990:	4640      	mov	r0, r8
    1992:	f810 2b01 	ldrb.w	r2, [r0], #1
    1996:	3a30      	subs	r2, #48	; 0x30
    1998:	2a09      	cmp	r2, #9
    199a:	d903      	bls.n	19a4 <_vfiprintf_r+0x1c8>
    199c:	2b00      	cmp	r3, #0
    199e:	d0c3      	beq.n	1928 <_vfiprintf_r+0x14c>
    19a0:	9105      	str	r1, [sp, #20]
    19a2:	e7c1      	b.n	1928 <_vfiprintf_r+0x14c>
    19a4:	fb05 2101 	mla	r1, r5, r1, r2
    19a8:	2301      	movs	r3, #1
    19aa:	4680      	mov	r8, r0
    19ac:	e7f0      	b.n	1990 <_vfiprintf_r+0x1b4>
    19ae:	ab03      	add	r3, sp, #12
    19b0:	9300      	str	r3, [sp, #0]
    19b2:	4622      	mov	r2, r4
    19b4:	4b12      	ldr	r3, [pc, #72]	; (1a00 <_vfiprintf_r+0x224>)
    19b6:	a904      	add	r1, sp, #16
    19b8:	4630      	mov	r0, r6
    19ba:	f3af 8000 	nop.w
    19be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    19c2:	4681      	mov	r9, r0
    19c4:	d1d5      	bne.n	1972 <_vfiprintf_r+0x196>
    19c6:	89a3      	ldrh	r3, [r4, #12]
    19c8:	065b      	lsls	r3, r3, #25
    19ca:	f53f af7e 	bmi.w	18ca <_vfiprintf_r+0xee>
    19ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    19d0:	e77d      	b.n	18ce <_vfiprintf_r+0xf2>
    19d2:	ab03      	add	r3, sp, #12
    19d4:	9300      	str	r3, [sp, #0]
    19d6:	4622      	mov	r2, r4
    19d8:	4b09      	ldr	r3, [pc, #36]	; (1a00 <_vfiprintf_r+0x224>)
    19da:	a904      	add	r1, sp, #16
    19dc:	4630      	mov	r0, r6
    19de:	f000 f887 	bl	1af0 <_printf_i>
    19e2:	e7ec      	b.n	19be <_vfiprintf_r+0x1e2>
    19e4:	0000258c 	.word	0x0000258c
    19e8:	000025cc 	.word	0x000025cc
    19ec:	000025ac 	.word	0x000025ac
    19f0:	0000256c 	.word	0x0000256c
    19f4:	000025d2 	.word	0x000025d2
    19f8:	000025d6 	.word	0x000025d6
    19fc:	00000000 	.word	0x00000000
    1a00:	000017b7 	.word	0x000017b7

00001a04 <_printf_common>:
    1a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a08:	4691      	mov	r9, r2
    1a0a:	461f      	mov	r7, r3
    1a0c:	688a      	ldr	r2, [r1, #8]
    1a0e:	690b      	ldr	r3, [r1, #16]
    1a10:	4606      	mov	r6, r0
    1a12:	4293      	cmp	r3, r2
    1a14:	bfb8      	it	lt
    1a16:	4613      	movlt	r3, r2
    1a18:	f8c9 3000 	str.w	r3, [r9]
    1a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    1a20:	460c      	mov	r4, r1
    1a22:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1a26:	b112      	cbz	r2, 1a2e <_printf_common+0x2a>
    1a28:	3301      	adds	r3, #1
    1a2a:	f8c9 3000 	str.w	r3, [r9]
    1a2e:	6823      	ldr	r3, [r4, #0]
    1a30:	0699      	lsls	r1, r3, #26
    1a32:	bf42      	ittt	mi
    1a34:	f8d9 3000 	ldrmi.w	r3, [r9]
    1a38:	3302      	addmi	r3, #2
    1a3a:	f8c9 3000 	strmi.w	r3, [r9]
    1a3e:	6825      	ldr	r5, [r4, #0]
    1a40:	f015 0506 	ands.w	r5, r5, #6
    1a44:	d107      	bne.n	1a56 <_printf_common+0x52>
    1a46:	f104 0a19 	add.w	sl, r4, #25
    1a4a:	68e3      	ldr	r3, [r4, #12]
    1a4c:	f8d9 2000 	ldr.w	r2, [r9]
    1a50:	1a9b      	subs	r3, r3, r2
    1a52:	42ab      	cmp	r3, r5
    1a54:	dc29      	bgt.n	1aaa <_printf_common+0xa6>
    1a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    1a5a:	6822      	ldr	r2, [r4, #0]
    1a5c:	3300      	adds	r3, #0
    1a5e:	bf18      	it	ne
    1a60:	2301      	movne	r3, #1
    1a62:	0692      	lsls	r2, r2, #26
    1a64:	d42e      	bmi.n	1ac4 <_printf_common+0xc0>
    1a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1a6a:	4639      	mov	r1, r7
    1a6c:	4630      	mov	r0, r6
    1a6e:	47c0      	blx	r8
    1a70:	3001      	adds	r0, #1
    1a72:	d021      	beq.n	1ab8 <_printf_common+0xb4>
    1a74:	6823      	ldr	r3, [r4, #0]
    1a76:	68e5      	ldr	r5, [r4, #12]
    1a78:	f003 0306 	and.w	r3, r3, #6
    1a7c:	2b04      	cmp	r3, #4
    1a7e:	bf18      	it	ne
    1a80:	2500      	movne	r5, #0
    1a82:	f8d9 2000 	ldr.w	r2, [r9]
    1a86:	f04f 0900 	mov.w	r9, #0
    1a8a:	bf08      	it	eq
    1a8c:	1aad      	subeq	r5, r5, r2
    1a8e:	68a3      	ldr	r3, [r4, #8]
    1a90:	6922      	ldr	r2, [r4, #16]
    1a92:	bf08      	it	eq
    1a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    1a98:	4293      	cmp	r3, r2
    1a9a:	bfc4      	itt	gt
    1a9c:	1a9b      	subgt	r3, r3, r2
    1a9e:	18ed      	addgt	r5, r5, r3
    1aa0:	341a      	adds	r4, #26
    1aa2:	454d      	cmp	r5, r9
    1aa4:	d11a      	bne.n	1adc <_printf_common+0xd8>
    1aa6:	2000      	movs	r0, #0
    1aa8:	e008      	b.n	1abc <_printf_common+0xb8>
    1aaa:	2301      	movs	r3, #1
    1aac:	4652      	mov	r2, sl
    1aae:	4639      	mov	r1, r7
    1ab0:	4630      	mov	r0, r6
    1ab2:	47c0      	blx	r8
    1ab4:	3001      	adds	r0, #1
    1ab6:	d103      	bne.n	1ac0 <_printf_common+0xbc>
    1ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ac0:	3501      	adds	r5, #1
    1ac2:	e7c2      	b.n	1a4a <_printf_common+0x46>
    1ac4:	2030      	movs	r0, #48	; 0x30
    1ac6:	18e1      	adds	r1, r4, r3
    1ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    1acc:	1c5a      	adds	r2, r3, #1
    1ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    1ad2:	4422      	add	r2, r4
    1ad4:	3302      	adds	r3, #2
    1ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1ada:	e7c4      	b.n	1a66 <_printf_common+0x62>
    1adc:	2301      	movs	r3, #1
    1ade:	4622      	mov	r2, r4
    1ae0:	4639      	mov	r1, r7
    1ae2:	4630      	mov	r0, r6
    1ae4:	47c0      	blx	r8
    1ae6:	3001      	adds	r0, #1
    1ae8:	d0e6      	beq.n	1ab8 <_printf_common+0xb4>
    1aea:	f109 0901 	add.w	r9, r9, #1
    1aee:	e7d8      	b.n	1aa2 <_printf_common+0x9e>

00001af0 <_printf_i>:
    1af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1af4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    1af8:	460c      	mov	r4, r1
    1afa:	7e09      	ldrb	r1, [r1, #24]
    1afc:	b085      	sub	sp, #20
    1afe:	296e      	cmp	r1, #110	; 0x6e
    1b00:	4617      	mov	r7, r2
    1b02:	4606      	mov	r6, r0
    1b04:	4698      	mov	r8, r3
    1b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b08:	f000 80b3 	beq.w	1c72 <_printf_i+0x182>
    1b0c:	d822      	bhi.n	1b54 <_printf_i+0x64>
    1b0e:	2963      	cmp	r1, #99	; 0x63
    1b10:	d036      	beq.n	1b80 <_printf_i+0x90>
    1b12:	d80a      	bhi.n	1b2a <_printf_i+0x3a>
    1b14:	2900      	cmp	r1, #0
    1b16:	f000 80b9 	beq.w	1c8c <_printf_i+0x19c>
    1b1a:	2958      	cmp	r1, #88	; 0x58
    1b1c:	f000 8083 	beq.w	1c26 <_printf_i+0x136>
    1b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1b24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    1b28:	e032      	b.n	1b90 <_printf_i+0xa0>
    1b2a:	2964      	cmp	r1, #100	; 0x64
    1b2c:	d001      	beq.n	1b32 <_printf_i+0x42>
    1b2e:	2969      	cmp	r1, #105	; 0x69
    1b30:	d1f6      	bne.n	1b20 <_printf_i+0x30>
    1b32:	6820      	ldr	r0, [r4, #0]
    1b34:	6813      	ldr	r3, [r2, #0]
    1b36:	0605      	lsls	r5, r0, #24
    1b38:	f103 0104 	add.w	r1, r3, #4
    1b3c:	d52a      	bpl.n	1b94 <_printf_i+0xa4>
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	6011      	str	r1, [r2, #0]
    1b42:	2b00      	cmp	r3, #0
    1b44:	da03      	bge.n	1b4e <_printf_i+0x5e>
    1b46:	222d      	movs	r2, #45	; 0x2d
    1b48:	425b      	negs	r3, r3
    1b4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    1b4e:	486f      	ldr	r0, [pc, #444]	; (1d0c <_printf_i+0x21c>)
    1b50:	220a      	movs	r2, #10
    1b52:	e039      	b.n	1bc8 <_printf_i+0xd8>
    1b54:	2973      	cmp	r1, #115	; 0x73
    1b56:	f000 809d 	beq.w	1c94 <_printf_i+0x1a4>
    1b5a:	d808      	bhi.n	1b6e <_printf_i+0x7e>
    1b5c:	296f      	cmp	r1, #111	; 0x6f
    1b5e:	d020      	beq.n	1ba2 <_printf_i+0xb2>
    1b60:	2970      	cmp	r1, #112	; 0x70
    1b62:	d1dd      	bne.n	1b20 <_printf_i+0x30>
    1b64:	6823      	ldr	r3, [r4, #0]
    1b66:	f043 0320 	orr.w	r3, r3, #32
    1b6a:	6023      	str	r3, [r4, #0]
    1b6c:	e003      	b.n	1b76 <_printf_i+0x86>
    1b6e:	2975      	cmp	r1, #117	; 0x75
    1b70:	d017      	beq.n	1ba2 <_printf_i+0xb2>
    1b72:	2978      	cmp	r1, #120	; 0x78
    1b74:	d1d4      	bne.n	1b20 <_printf_i+0x30>
    1b76:	2378      	movs	r3, #120	; 0x78
    1b78:	4865      	ldr	r0, [pc, #404]	; (1d10 <_printf_i+0x220>)
    1b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1b7e:	e055      	b.n	1c2c <_printf_i+0x13c>
    1b80:	6813      	ldr	r3, [r2, #0]
    1b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1b86:	1d19      	adds	r1, r3, #4
    1b88:	681b      	ldr	r3, [r3, #0]
    1b8a:	6011      	str	r1, [r2, #0]
    1b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1b90:	2301      	movs	r3, #1
    1b92:	e08c      	b.n	1cae <_printf_i+0x1be>
    1b94:	681b      	ldr	r3, [r3, #0]
    1b96:	f010 0f40 	tst.w	r0, #64	; 0x40
    1b9a:	6011      	str	r1, [r2, #0]
    1b9c:	bf18      	it	ne
    1b9e:	b21b      	sxthne	r3, r3
    1ba0:	e7cf      	b.n	1b42 <_printf_i+0x52>
    1ba2:	6813      	ldr	r3, [r2, #0]
    1ba4:	6825      	ldr	r5, [r4, #0]
    1ba6:	1d18      	adds	r0, r3, #4
    1ba8:	6010      	str	r0, [r2, #0]
    1baa:	0628      	lsls	r0, r5, #24
    1bac:	d501      	bpl.n	1bb2 <_printf_i+0xc2>
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	e002      	b.n	1bb8 <_printf_i+0xc8>
    1bb2:	0668      	lsls	r0, r5, #25
    1bb4:	d5fb      	bpl.n	1bae <_printf_i+0xbe>
    1bb6:	881b      	ldrh	r3, [r3, #0]
    1bb8:	296f      	cmp	r1, #111	; 0x6f
    1bba:	bf14      	ite	ne
    1bbc:	220a      	movne	r2, #10
    1bbe:	2208      	moveq	r2, #8
    1bc0:	4852      	ldr	r0, [pc, #328]	; (1d0c <_printf_i+0x21c>)
    1bc2:	2100      	movs	r1, #0
    1bc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    1bc8:	6865      	ldr	r5, [r4, #4]
    1bca:	2d00      	cmp	r5, #0
    1bcc:	60a5      	str	r5, [r4, #8]
    1bce:	f2c0 8095 	blt.w	1cfc <_printf_i+0x20c>
    1bd2:	6821      	ldr	r1, [r4, #0]
    1bd4:	f021 0104 	bic.w	r1, r1, #4
    1bd8:	6021      	str	r1, [r4, #0]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d13d      	bne.n	1c5a <_printf_i+0x16a>
    1bde:	2d00      	cmp	r5, #0
    1be0:	f040 808e 	bne.w	1d00 <_printf_i+0x210>
    1be4:	4665      	mov	r5, ip
    1be6:	2a08      	cmp	r2, #8
    1be8:	d10b      	bne.n	1c02 <_printf_i+0x112>
    1bea:	6823      	ldr	r3, [r4, #0]
    1bec:	07db      	lsls	r3, r3, #31
    1bee:	d508      	bpl.n	1c02 <_printf_i+0x112>
    1bf0:	6923      	ldr	r3, [r4, #16]
    1bf2:	6862      	ldr	r2, [r4, #4]
    1bf4:	429a      	cmp	r2, r3
    1bf6:	bfde      	ittt	le
    1bf8:	2330      	movle	r3, #48	; 0x30
    1bfa:	f805 3c01 	strble.w	r3, [r5, #-1]
    1bfe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    1c02:	ebac 0305 	sub.w	r3, ip, r5
    1c06:	6123      	str	r3, [r4, #16]
    1c08:	f8cd 8000 	str.w	r8, [sp]
    1c0c:	463b      	mov	r3, r7
    1c0e:	aa03      	add	r2, sp, #12
    1c10:	4621      	mov	r1, r4
    1c12:	4630      	mov	r0, r6
    1c14:	f7ff fef6 	bl	1a04 <_printf_common>
    1c18:	3001      	adds	r0, #1
    1c1a:	d14d      	bne.n	1cb8 <_printf_i+0x1c8>
    1c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c20:	b005      	add	sp, #20
    1c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c26:	4839      	ldr	r0, [pc, #228]	; (1d0c <_printf_i+0x21c>)
    1c28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    1c2c:	6813      	ldr	r3, [r2, #0]
    1c2e:	6821      	ldr	r1, [r4, #0]
    1c30:	1d1d      	adds	r5, r3, #4
    1c32:	681b      	ldr	r3, [r3, #0]
    1c34:	6015      	str	r5, [r2, #0]
    1c36:	060a      	lsls	r2, r1, #24
    1c38:	d50b      	bpl.n	1c52 <_printf_i+0x162>
    1c3a:	07ca      	lsls	r2, r1, #31
    1c3c:	bf44      	itt	mi
    1c3e:	f041 0120 	orrmi.w	r1, r1, #32
    1c42:	6021      	strmi	r1, [r4, #0]
    1c44:	b91b      	cbnz	r3, 1c4e <_printf_i+0x15e>
    1c46:	6822      	ldr	r2, [r4, #0]
    1c48:	f022 0220 	bic.w	r2, r2, #32
    1c4c:	6022      	str	r2, [r4, #0]
    1c4e:	2210      	movs	r2, #16
    1c50:	e7b7      	b.n	1bc2 <_printf_i+0xd2>
    1c52:	064d      	lsls	r5, r1, #25
    1c54:	bf48      	it	mi
    1c56:	b29b      	uxthmi	r3, r3
    1c58:	e7ef      	b.n	1c3a <_printf_i+0x14a>
    1c5a:	4665      	mov	r5, ip
    1c5c:	fbb3 f1f2 	udiv	r1, r3, r2
    1c60:	fb02 3311 	mls	r3, r2, r1, r3
    1c64:	5cc3      	ldrb	r3, [r0, r3]
    1c66:	f805 3d01 	strb.w	r3, [r5, #-1]!
    1c6a:	460b      	mov	r3, r1
    1c6c:	2900      	cmp	r1, #0
    1c6e:	d1f5      	bne.n	1c5c <_printf_i+0x16c>
    1c70:	e7b9      	b.n	1be6 <_printf_i+0xf6>
    1c72:	6813      	ldr	r3, [r2, #0]
    1c74:	6825      	ldr	r5, [r4, #0]
    1c76:	1d18      	adds	r0, r3, #4
    1c78:	6961      	ldr	r1, [r4, #20]
    1c7a:	6010      	str	r0, [r2, #0]
    1c7c:	0628      	lsls	r0, r5, #24
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	d501      	bpl.n	1c86 <_printf_i+0x196>
    1c82:	6019      	str	r1, [r3, #0]
    1c84:	e002      	b.n	1c8c <_printf_i+0x19c>
    1c86:	066a      	lsls	r2, r5, #25
    1c88:	d5fb      	bpl.n	1c82 <_printf_i+0x192>
    1c8a:	8019      	strh	r1, [r3, #0]
    1c8c:	2300      	movs	r3, #0
    1c8e:	4665      	mov	r5, ip
    1c90:	6123      	str	r3, [r4, #16]
    1c92:	e7b9      	b.n	1c08 <_printf_i+0x118>
    1c94:	6813      	ldr	r3, [r2, #0]
    1c96:	1d19      	adds	r1, r3, #4
    1c98:	6011      	str	r1, [r2, #0]
    1c9a:	681d      	ldr	r5, [r3, #0]
    1c9c:	6862      	ldr	r2, [r4, #4]
    1c9e:	2100      	movs	r1, #0
    1ca0:	4628      	mov	r0, r5
    1ca2:	f000 f8e1 	bl	1e68 <memchr>
    1ca6:	b108      	cbz	r0, 1cac <_printf_i+0x1bc>
    1ca8:	1b40      	subs	r0, r0, r5
    1caa:	6060      	str	r0, [r4, #4]
    1cac:	6863      	ldr	r3, [r4, #4]
    1cae:	6123      	str	r3, [r4, #16]
    1cb0:	2300      	movs	r3, #0
    1cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    1cb6:	e7a7      	b.n	1c08 <_printf_i+0x118>
    1cb8:	6923      	ldr	r3, [r4, #16]
    1cba:	462a      	mov	r2, r5
    1cbc:	4639      	mov	r1, r7
    1cbe:	4630      	mov	r0, r6
    1cc0:	47c0      	blx	r8
    1cc2:	3001      	adds	r0, #1
    1cc4:	d0aa      	beq.n	1c1c <_printf_i+0x12c>
    1cc6:	6823      	ldr	r3, [r4, #0]
    1cc8:	079b      	lsls	r3, r3, #30
    1cca:	d413      	bmi.n	1cf4 <_printf_i+0x204>
    1ccc:	68e0      	ldr	r0, [r4, #12]
    1cce:	9b03      	ldr	r3, [sp, #12]
    1cd0:	4298      	cmp	r0, r3
    1cd2:	bfb8      	it	lt
    1cd4:	4618      	movlt	r0, r3
    1cd6:	e7a3      	b.n	1c20 <_printf_i+0x130>
    1cd8:	2301      	movs	r3, #1
    1cda:	464a      	mov	r2, r9
    1cdc:	4639      	mov	r1, r7
    1cde:	4630      	mov	r0, r6
    1ce0:	47c0      	blx	r8
    1ce2:	3001      	adds	r0, #1
    1ce4:	d09a      	beq.n	1c1c <_printf_i+0x12c>
    1ce6:	3501      	adds	r5, #1
    1ce8:	68e3      	ldr	r3, [r4, #12]
    1cea:	9a03      	ldr	r2, [sp, #12]
    1cec:	1a9b      	subs	r3, r3, r2
    1cee:	42ab      	cmp	r3, r5
    1cf0:	dcf2      	bgt.n	1cd8 <_printf_i+0x1e8>
    1cf2:	e7eb      	b.n	1ccc <_printf_i+0x1dc>
    1cf4:	2500      	movs	r5, #0
    1cf6:	f104 0919 	add.w	r9, r4, #25
    1cfa:	e7f5      	b.n	1ce8 <_printf_i+0x1f8>
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d1ac      	bne.n	1c5a <_printf_i+0x16a>
    1d00:	7803      	ldrb	r3, [r0, #0]
    1d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1d0a:	e76c      	b.n	1be6 <_printf_i+0xf6>
    1d0c:	000025dd 	.word	0x000025dd
    1d10:	000025ee 	.word	0x000025ee

00001d14 <_sbrk_r>:
    1d14:	b538      	push	{r3, r4, r5, lr}
    1d16:	2300      	movs	r3, #0
    1d18:	4c05      	ldr	r4, [pc, #20]	; (1d30 <_sbrk_r+0x1c>)
    1d1a:	4605      	mov	r5, r0
    1d1c:	4608      	mov	r0, r1
    1d1e:	6023      	str	r3, [r4, #0]
    1d20:	f000 f8ec 	bl	1efc <_sbrk>
    1d24:	1c43      	adds	r3, r0, #1
    1d26:	d102      	bne.n	1d2e <_sbrk_r+0x1a>
    1d28:	6823      	ldr	r3, [r4, #0]
    1d2a:	b103      	cbz	r3, 1d2e <_sbrk_r+0x1a>
    1d2c:	602b      	str	r3, [r5, #0]
    1d2e:	bd38      	pop	{r3, r4, r5, pc}
    1d30:	20000088 	.word	0x20000088

00001d34 <__sread>:
    1d34:	b510      	push	{r4, lr}
    1d36:	460c      	mov	r4, r1
    1d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d3c:	f000 f8a4 	bl	1e88 <_read_r>
    1d40:	2800      	cmp	r0, #0
    1d42:	bfab      	itete	ge
    1d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    1d46:	89a3      	ldrhlt	r3, [r4, #12]
    1d48:	181b      	addge	r3, r3, r0
    1d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    1d4e:	bfac      	ite	ge
    1d50:	6563      	strge	r3, [r4, #84]	; 0x54
    1d52:	81a3      	strhlt	r3, [r4, #12]
    1d54:	bd10      	pop	{r4, pc}

00001d56 <__swrite>:
    1d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d5a:	461f      	mov	r7, r3
    1d5c:	898b      	ldrh	r3, [r1, #12]
    1d5e:	4605      	mov	r5, r0
    1d60:	05db      	lsls	r3, r3, #23
    1d62:	460c      	mov	r4, r1
    1d64:	4616      	mov	r6, r2
    1d66:	d505      	bpl.n	1d74 <__swrite+0x1e>
    1d68:	2302      	movs	r3, #2
    1d6a:	2200      	movs	r2, #0
    1d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d70:	f000 f868 	bl	1e44 <_lseek_r>
    1d74:	89a3      	ldrh	r3, [r4, #12]
    1d76:	4632      	mov	r2, r6
    1d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1d7c:	81a3      	strh	r3, [r4, #12]
    1d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1d82:	463b      	mov	r3, r7
    1d84:	4628      	mov	r0, r5
    1d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1d8a:	f000 b817 	b.w	1dbc <_write_r>

00001d8e <__sseek>:
    1d8e:	b510      	push	{r4, lr}
    1d90:	460c      	mov	r4, r1
    1d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d96:	f000 f855 	bl	1e44 <_lseek_r>
    1d9a:	1c43      	adds	r3, r0, #1
    1d9c:	89a3      	ldrh	r3, [r4, #12]
    1d9e:	bf15      	itete	ne
    1da0:	6560      	strne	r0, [r4, #84]	; 0x54
    1da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    1da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    1daa:	81a3      	strheq	r3, [r4, #12]
    1dac:	bf18      	it	ne
    1dae:	81a3      	strhne	r3, [r4, #12]
    1db0:	bd10      	pop	{r4, pc}

00001db2 <__sclose>:
    1db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1db6:	f000 b813 	b.w	1de0 <_close_r>
	...

00001dbc <_write_r>:
    1dbc:	b538      	push	{r3, r4, r5, lr}
    1dbe:	4605      	mov	r5, r0
    1dc0:	4608      	mov	r0, r1
    1dc2:	4611      	mov	r1, r2
    1dc4:	2200      	movs	r2, #0
    1dc6:	4c05      	ldr	r4, [pc, #20]	; (1ddc <_write_r+0x20>)
    1dc8:	6022      	str	r2, [r4, #0]
    1dca:	461a      	mov	r2, r3
    1dcc:	f7ff f8c4 	bl	f58 <_write>
    1dd0:	1c43      	adds	r3, r0, #1
    1dd2:	d102      	bne.n	1dda <_write_r+0x1e>
    1dd4:	6823      	ldr	r3, [r4, #0]
    1dd6:	b103      	cbz	r3, 1dda <_write_r+0x1e>
    1dd8:	602b      	str	r3, [r5, #0]
    1dda:	bd38      	pop	{r3, r4, r5, pc}
    1ddc:	20000088 	.word	0x20000088

00001de0 <_close_r>:
    1de0:	b538      	push	{r3, r4, r5, lr}
    1de2:	2300      	movs	r3, #0
    1de4:	4c05      	ldr	r4, [pc, #20]	; (1dfc <_close_r+0x1c>)
    1de6:	4605      	mov	r5, r0
    1de8:	4608      	mov	r0, r1
    1dea:	6023      	str	r3, [r4, #0]
    1dec:	f000 f85e 	bl	1eac <_close>
    1df0:	1c43      	adds	r3, r0, #1
    1df2:	d102      	bne.n	1dfa <_close_r+0x1a>
    1df4:	6823      	ldr	r3, [r4, #0]
    1df6:	b103      	cbz	r3, 1dfa <_close_r+0x1a>
    1df8:	602b      	str	r3, [r5, #0]
    1dfa:	bd38      	pop	{r3, r4, r5, pc}
    1dfc:	20000088 	.word	0x20000088

00001e00 <_fstat_r>:
    1e00:	b538      	push	{r3, r4, r5, lr}
    1e02:	2300      	movs	r3, #0
    1e04:	4c06      	ldr	r4, [pc, #24]	; (1e20 <_fstat_r+0x20>)
    1e06:	4605      	mov	r5, r0
    1e08:	4608      	mov	r0, r1
    1e0a:	4611      	mov	r1, r2
    1e0c:	6023      	str	r3, [r4, #0]
    1e0e:	f000 f855 	bl	1ebc <_fstat>
    1e12:	1c43      	adds	r3, r0, #1
    1e14:	d102      	bne.n	1e1c <_fstat_r+0x1c>
    1e16:	6823      	ldr	r3, [r4, #0]
    1e18:	b103      	cbz	r3, 1e1c <_fstat_r+0x1c>
    1e1a:	602b      	str	r3, [r5, #0]
    1e1c:	bd38      	pop	{r3, r4, r5, pc}
    1e1e:	bf00      	nop
    1e20:	20000088 	.word	0x20000088

00001e24 <_isatty_r>:
    1e24:	b538      	push	{r3, r4, r5, lr}
    1e26:	2300      	movs	r3, #0
    1e28:	4c05      	ldr	r4, [pc, #20]	; (1e40 <_isatty_r+0x1c>)
    1e2a:	4605      	mov	r5, r0
    1e2c:	4608      	mov	r0, r1
    1e2e:	6023      	str	r3, [r4, #0]
    1e30:	f000 f84c 	bl	1ecc <_isatty>
    1e34:	1c43      	adds	r3, r0, #1
    1e36:	d102      	bne.n	1e3e <_isatty_r+0x1a>
    1e38:	6823      	ldr	r3, [r4, #0]
    1e3a:	b103      	cbz	r3, 1e3e <_isatty_r+0x1a>
    1e3c:	602b      	str	r3, [r5, #0]
    1e3e:	bd38      	pop	{r3, r4, r5, pc}
    1e40:	20000088 	.word	0x20000088

00001e44 <_lseek_r>:
    1e44:	b538      	push	{r3, r4, r5, lr}
    1e46:	4605      	mov	r5, r0
    1e48:	4608      	mov	r0, r1
    1e4a:	4611      	mov	r1, r2
    1e4c:	2200      	movs	r2, #0
    1e4e:	4c05      	ldr	r4, [pc, #20]	; (1e64 <_lseek_r+0x20>)
    1e50:	6022      	str	r2, [r4, #0]
    1e52:	461a      	mov	r2, r3
    1e54:	f000 f842 	bl	1edc <_lseek>
    1e58:	1c43      	adds	r3, r0, #1
    1e5a:	d102      	bne.n	1e62 <_lseek_r+0x1e>
    1e5c:	6823      	ldr	r3, [r4, #0]
    1e5e:	b103      	cbz	r3, 1e62 <_lseek_r+0x1e>
    1e60:	602b      	str	r3, [r5, #0]
    1e62:	bd38      	pop	{r3, r4, r5, pc}
    1e64:	20000088 	.word	0x20000088

00001e68 <memchr>:
    1e68:	b510      	push	{r4, lr}
    1e6a:	b2c9      	uxtb	r1, r1
    1e6c:	4402      	add	r2, r0
    1e6e:	4290      	cmp	r0, r2
    1e70:	4603      	mov	r3, r0
    1e72:	d101      	bne.n	1e78 <memchr+0x10>
    1e74:	2300      	movs	r3, #0
    1e76:	e003      	b.n	1e80 <memchr+0x18>
    1e78:	781c      	ldrb	r4, [r3, #0]
    1e7a:	3001      	adds	r0, #1
    1e7c:	428c      	cmp	r4, r1
    1e7e:	d1f6      	bne.n	1e6e <memchr+0x6>
    1e80:	4618      	mov	r0, r3
    1e82:	bd10      	pop	{r4, pc}

00001e84 <__malloc_lock>:
    1e84:	4770      	bx	lr

00001e86 <__malloc_unlock>:
    1e86:	4770      	bx	lr

00001e88 <_read_r>:
    1e88:	b538      	push	{r3, r4, r5, lr}
    1e8a:	4605      	mov	r5, r0
    1e8c:	4608      	mov	r0, r1
    1e8e:	4611      	mov	r1, r2
    1e90:	2200      	movs	r2, #0
    1e92:	4c05      	ldr	r4, [pc, #20]	; (1ea8 <_read_r+0x20>)
    1e94:	6022      	str	r2, [r4, #0]
    1e96:	461a      	mov	r2, r3
    1e98:	f000 f828 	bl	1eec <_read>
    1e9c:	1c43      	adds	r3, r0, #1
    1e9e:	d102      	bne.n	1ea6 <_read_r+0x1e>
    1ea0:	6823      	ldr	r3, [r4, #0]
    1ea2:	b103      	cbz	r3, 1ea6 <_read_r+0x1e>
    1ea4:	602b      	str	r3, [r5, #0]
    1ea6:	bd38      	pop	{r3, r4, r5, pc}
    1ea8:	20000088 	.word	0x20000088

00001eac <_close>:
    1eac:	2258      	movs	r2, #88	; 0x58
    1eae:	4b02      	ldr	r3, [pc, #8]	; (1eb8 <_close+0xc>)
    1eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1eb4:	601a      	str	r2, [r3, #0]
    1eb6:	4770      	bx	lr
    1eb8:	20000088 	.word	0x20000088

00001ebc <_fstat>:
    1ebc:	2258      	movs	r2, #88	; 0x58
    1ebe:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <_fstat+0xc>)
    1ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ec4:	601a      	str	r2, [r3, #0]
    1ec6:	4770      	bx	lr
    1ec8:	20000088 	.word	0x20000088

00001ecc <_isatty>:
    1ecc:	2258      	movs	r2, #88	; 0x58
    1ece:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <_isatty+0xc>)
    1ed0:	2000      	movs	r0, #0
    1ed2:	601a      	str	r2, [r3, #0]
    1ed4:	4770      	bx	lr
    1ed6:	bf00      	nop
    1ed8:	20000088 	.word	0x20000088

00001edc <_lseek>:
    1edc:	2258      	movs	r2, #88	; 0x58
    1ede:	4b02      	ldr	r3, [pc, #8]	; (1ee8 <_lseek+0xc>)
    1ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ee4:	601a      	str	r2, [r3, #0]
    1ee6:	4770      	bx	lr
    1ee8:	20000088 	.word	0x20000088

00001eec <_read>:
    1eec:	2258      	movs	r2, #88	; 0x58
    1eee:	4b02      	ldr	r3, [pc, #8]	; (1ef8 <_read+0xc>)
    1ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ef4:	601a      	str	r2, [r3, #0]
    1ef6:	4770      	bx	lr
    1ef8:	20000088 	.word	0x20000088

00001efc <_sbrk>:
    1efc:	4a04      	ldr	r2, [pc, #16]	; (1f10 <_sbrk+0x14>)
    1efe:	4905      	ldr	r1, [pc, #20]	; (1f14 <_sbrk+0x18>)
    1f00:	6813      	ldr	r3, [r2, #0]
    1f02:	2b00      	cmp	r3, #0
    1f04:	bf08      	it	eq
    1f06:	460b      	moveq	r3, r1
    1f08:	4418      	add	r0, r3
    1f0a:	6010      	str	r0, [r2, #0]
    1f0c:	4618      	mov	r0, r3
    1f0e:	4770      	bx	lr
    1f10:	20000070 	.word	0x20000070
    1f14:	20000090 	.word	0x20000090

00001f18 <_exit>:
    1f18:	e7fe      	b.n	1f18 <_exit>
    1f1a:	bf00      	nop

00001f1c <_init>:
    1f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f1e:	bf00      	nop

00001f20 <_fini>:
    1f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f22:	bf00      	nop
    1f24:	656d6954 	.word	0x656d6954
    1f28:	2f522072 	.word	0x2f522072
    1f2c:	65742057 	.word	0x65742057
    1f30:	00007473 	.word	0x00007473
    1f34:	6e69202d 	.word	0x6e69202d
    1f38:	61697469 	.word	0x61697469
    1f3c:	6176206c 	.word	0x6176206c
    1f40:	7365756c 	.word	0x7365756c
    1f44:	00000000 	.word	0x00000000
    1f48:	4f525245 	.word	0x4f525245
    1f4c:	203a2052 	.word	0x203a2052
    1f50:	74696e69 	.word	0x74696e69
    1f54:	206c6169 	.word	0x206c6169
    1f58:	756c6176 	.word	0x756c6176
    1f5c:	61662065 	.word	0x61662065
    1f60:	64656c69 	.word	0x64656c69
    1f64:	78302820 	.word	0x78302820
    1f68:	0a297825 	.word	0x0a297825
    1f6c:	00000000 	.word	0x00000000
    1f70:	6572202d 	.word	0x6572202d
    1f74:	772f6461 	.word	0x772f6461
    1f78:	65746972 	.word	0x65746972
    1f7c:	00000000 	.word	0x00000000
    1f80:	4f525245 	.word	0x4f525245
    1f84:	203a2052 	.word	0x203a2052
    1f88:	64616552 	.word	0x64616552
    1f8c:	6972772f 	.word	0x6972772f
    1f90:	66206574 	.word	0x66206574
    1f94:	656c6961 	.word	0x656c6961
    1f98:	30282064 	.word	0x30282064
    1f9c:	29782578 	.word	0x29782578
    1fa0:	0000000a 	.word	0x0000000a
    1fa4:	656d6954 	.word	0x656d6954
    1fa8:	74732072 	.word	0x74732072
    1fac:	2f747261 	.word	0x2f747261
    1fb0:	706f7473 	.word	0x706f7473
    1fb4:	73657420 	.word	0x73657420
    1fb8:	00000074 	.word	0x00000074
    1fbc:	6974202d 	.word	0x6974202d
    1fc0:	2072656d 	.word	0x2072656d
    1fc4:	62616e65 	.word	0x62616e65
    1fc8:	0000656c 	.word	0x0000656c
    1fcc:	4f525245 	.word	0x4f525245
    1fd0:	203a2052 	.word	0x203a2052
    1fd4:	656d6954 	.word	0x656d6954
    1fd8:	6f6e2072 	.word	0x6f6e2072
    1fdc:	65642074 	.word	0x65642074
    1fe0:	6d657263 	.word	0x6d657263
    1fe4:	69746e65 	.word	0x69746e65
    1fe8:	002e676e 	.word	0x002e676e
    1fec:	6974202d 	.word	0x6974202d
    1ff0:	2072656d 	.word	0x2072656d
    1ff4:	61736964 	.word	0x61736964
    1ff8:	00656c62 	.word	0x00656c62
    1ffc:	4f525245 	.word	0x4f525245
    2000:	203a2052 	.word	0x203a2052
    2004:	656d6954 	.word	0x656d6954
    2008:	6f6e2072 	.word	0x6f6e2072
    200c:	74732074 	.word	0x74732074
    2010:	6970706f 	.word	0x6970706f
    2014:	002e676e 	.word	0x002e676e
    2018:	6974202d 	.word	0x6974202d
    201c:	2072656d 	.word	0x2072656d
    2020:	6f6c6572 	.word	0x6f6c6572
    2024:	00006461 	.word	0x00006461
    2028:	4f525245 	.word	0x4f525245
    202c:	203a2052 	.word	0x203a2052
    2030:	656d6954 	.word	0x656d6954
    2034:	65722072 	.word	0x65722072
    2038:	64616f6c 	.word	0x64616f6c
    203c:	69616620 	.word	0x69616620
    2040:	2e31206c 	.word	0x2e31206c
    2044:	00000000 	.word	0x00000000
    2048:	4f525245 	.word	0x4f525245
    204c:	203a2052 	.word	0x203a2052
    2050:	656d6954 	.word	0x656d6954
    2054:	65722072 	.word	0x65722072
    2058:	64616f6c 	.word	0x64616f6c
    205c:	69616620 	.word	0x69616620
    2060:	2e32206c 	.word	0x2e32206c
    2064:	00000000 	.word	0x00000000
    2068:	4f525245 	.word	0x4f525245
    206c:	203a2052 	.word	0x203a2052
    2070:	72617473 	.word	0x72617473
    2074:	74732f74 	.word	0x74732f74
    2078:	6620706f 	.word	0x6620706f
    207c:	656c6961 	.word	0x656c6961
    2080:	30282064 	.word	0x30282064
    2084:	29782578 	.word	0x29782578
    2088:	0000000a 	.word	0x0000000a
    208c:	656d6954 	.word	0x656d6954
    2090:	6e692072 	.word	0x6e692072
    2094:	72726574 	.word	0x72726574
    2098:	20747075 	.word	0x20747075
    209c:	74736574 	.word	0x74736574
    20a0:	00000000 	.word	0x00000000
    20a4:	6554202d 	.word	0x6554202d
    20a8:	69207473 	.word	0x69207473
    20ac:	7265746e 	.word	0x7265746e
    20b0:	74707572 	.word	0x74707572
    20b4:	6e656720 	.word	0x6e656720
    20b8:	74617265 	.word	0x74617265
    20bc:	206e6f69 	.word	0x206e6f69
    20c0:	62616e65 	.word	0x62616e65
    20c4:	2e64656c 	.word	0x2e64656c
    20c8:	00000000 	.word	0x00000000
    20cc:	4f525245 	.word	0x4f525245
    20d0:	203a2052 	.word	0x203a2052
    20d4:	656d6954 	.word	0x656d6954
    20d8:	6e692072 	.word	0x6e692072
    20dc:	72726574 	.word	0x72726574
    20e0:	20747075 	.word	0x20747075
    20e4:	62616e65 	.word	0x62616e65
    20e8:	6620656c 	.word	0x6620656c
    20ec:	2e6c6961 	.word	0x2e6c6961
    20f0:	00000000 	.word	0x00000000
    20f4:	6554202d 	.word	0x6554202d
    20f8:	69207473 	.word	0x69207473
    20fc:	7265746e 	.word	0x7265746e
    2100:	74707572 	.word	0x74707572
    2104:	6e656720 	.word	0x6e656720
    2108:	74617265 	.word	0x74617265
    210c:	206e6f69 	.word	0x206e6f69
    2110:	61736964 	.word	0x61736964
    2114:	64656c62 	.word	0x64656c62
    2118:	0000002e 	.word	0x0000002e
    211c:	4f525245 	.word	0x4f525245
    2120:	203a2052 	.word	0x203a2052
    2124:	656d6954 	.word	0x656d6954
    2128:	6e692072 	.word	0x6e692072
    212c:	72726574 	.word	0x72726574
    2130:	20747075 	.word	0x20747075
    2134:	61736964 	.word	0x61736964
    2138:	20656c62 	.word	0x20656c62
    213c:	6c696166 	.word	0x6c696166
    2140:	0000002e 	.word	0x0000002e
    2144:	4f525245 	.word	0x4f525245
    2148:	203a2052 	.word	0x203a2052
    214c:	65746e49 	.word	0x65746e49
    2150:	70757272 	.word	0x70757272
    2154:	65742074 	.word	0x65742074
    2158:	66207473 	.word	0x66207473
    215c:	656c6961 	.word	0x656c6961
    2160:	30282064 	.word	0x30282064
    2164:	29782578 	.word	0x29782578
    2168:	0000000a 	.word	0x0000000a
    216c:	656d6954 	.word	0x656d6954
    2170:	78652072 	.word	0x78652072
    2174:	6e726574 	.word	0x6e726574
    2178:	69206c61 	.word	0x69206c61
    217c:	7475706e 	.word	0x7475706e
    2180:	73657420 	.word	0x73657420
    2184:	00000074 	.word	0x00000074
    2188:	6974202d 	.word	0x6974202d
    218c:	2072656d 	.word	0x2072656d
    2190:	20657375 	.word	0x20657375
    2194:	2e747865 	.word	0x2e747865
    2198:	706e6920 	.word	0x706e6920
    219c:	00007475 	.word	0x00007475
    21a0:	4f525245 	.word	0x4f525245
    21a4:	203a2052 	.word	0x203a2052
    21a8:	656d6954 	.word	0x656d6954
    21ac:	6f6e2072 	.word	0x6f6e2072
    21b0:	74732074 	.word	0x74732074
    21b4:	6970706f 	.word	0x6970706f
    21b8:	7720676e 	.word	0x7720676e
    21bc:	206e6568 	.word	0x206e6568
    21c0:	65747865 	.word	0x65747865
    21c4:	6c616e72 	.word	0x6c616e72
    21c8:	706e6920 	.word	0x706e6920
    21cc:	69207475 	.word	0x69207475
    21d0:	6f6c2073 	.word	0x6f6c2073
    21d4:	00002e77 	.word	0x00002e77
    21d8:	7375202d 	.word	0x7375202d
    21dc:	79532065 	.word	0x79532065
    21e0:	63695473 	.word	0x63695473
    21e4:	6f74206b 	.word	0x6f74206b
    21e8:	6e656720 	.word	0x6e656720
    21ec:	74617265 	.word	0x74617265
    21f0:	78652065 	.word	0x78652065
    21f4:	69202e74 	.word	0x69202e74
    21f8:	7475706e 	.word	0x7475706e
    21fc:	6c757020 	.word	0x6c757020
    2200:	00006573 	.word	0x00006573
    2204:	4f525245 	.word	0x4f525245
    2208:	203a2052 	.word	0x203a2052
    220c:	656d6954 	.word	0x656d6954
    2210:	6f6e2072 	.word	0x6f6e2072
    2214:	75722074 	.word	0x75722074
    2218:	6e696e6e 	.word	0x6e696e6e
    221c:	68772067 	.word	0x68772067
    2220:	65206e65 	.word	0x65206e65
    2224:	72657478 	.word	0x72657478
    2228:	206c616e 	.word	0x206c616e
    222c:	75706e69 	.word	0x75706e69
    2230:	73692074 	.word	0x73692074
    2234:	67696820 	.word	0x67696820
    2238:	30282068 	.word	0x30282068
    223c:	29782578 	.word	0x29782578
    2240:	00000a2e 	.word	0x00000a2e
    2244:	4f525245 	.word	0x4f525245
    2248:	203a2052 	.word	0x203a2052
    224c:	656d6954 	.word	0x656d6954
    2250:	6f6e2072 	.word	0x6f6e2072
    2254:	72742074 	.word	0x72742074
    2258:	65676769 	.word	0x65676769
    225c:	31232072 	.word	0x31232072
    2260:	0000002e 	.word	0x0000002e
    2264:	4f525245 	.word	0x4f525245
    2268:	203a2052 	.word	0x203a2052
    226c:	656d6954 	.word	0x656d6954
    2270:	6f6e2072 	.word	0x6f6e2072
    2274:	72742074 	.word	0x72742074
    2278:	65676769 	.word	0x65676769
    227c:	32232072 	.word	0x32232072
    2280:	0000002e 	.word	0x0000002e
    2284:	4f525245 	.word	0x4f525245
    2288:	203a2052 	.word	0x203a2052
    228c:	656d6954 	.word	0x656d6954
    2290:	6f6e2072 	.word	0x6f6e2072
    2294:	6c632074 	.word	0x6c632074
    2298:	2e726165 	.word	0x2e726165
    229c:	00000000 	.word	0x00000000
    22a0:	7375202d 	.word	0x7375202d
    22a4:	58452065 	.word	0x58452065
    22a8:	204e4954 	.word	0x204e4954
    22ac:	63207361 	.word	0x63207361
    22b0:	6b636f6c 	.word	0x6b636f6c
    22b4:	00000000 	.word	0x00000000
    22b8:	4f525245 	.word	0x4f525245
    22bc:	203a2052 	.word	0x203a2052
    22c0:	656d6954 	.word	0x656d6954
    22c4:	68632072 	.word	0x68632072
    22c8:	65676e61 	.word	0x65676e61
    22cc:	656e7520 	.word	0x656e7520
    22d0:	63657078 	.word	0x63657078
    22d4:	6c646574 	.word	0x6c646574
    22d8:	2e312079 	.word	0x2e312079
    22dc:	00000000 	.word	0x00000000
    22e0:	4f525245 	.word	0x4f525245
    22e4:	203a2052 	.word	0x203a2052
    22e8:	656d6954 	.word	0x656d6954
    22ec:	65642072 	.word	0x65642072
    22f0:	6d657263 	.word	0x6d657263
    22f4:	20746e65 	.word	0x20746e65
    22f8:	6c696166 	.word	0x6c696166
    22fc:	002e6465 	.word	0x002e6465
    2300:	4f525245 	.word	0x4f525245
    2304:	203a2052 	.word	0x203a2052
    2308:	656d6954 	.word	0x656d6954
    230c:	68632072 	.word	0x68632072
    2310:	65676e61 	.word	0x65676e61
    2314:	656e7520 	.word	0x656e7520
    2318:	63657078 	.word	0x63657078
    231c:	6c646574 	.word	0x6c646574
    2320:	2e322079 	.word	0x2e322079
    2324:	00000000 	.word	0x00000000
    2328:	4f525245 	.word	0x4f525245
    232c:	203a2052 	.word	0x203a2052
    2330:	656d6954 	.word	0x656d6954
    2334:	68632072 	.word	0x68632072
    2338:	65676e61 	.word	0x65676e61
    233c:	656e7520 	.word	0x656e7520
    2340:	63657078 	.word	0x63657078
    2344:	6c646574 	.word	0x6c646574
    2348:	2e332079 	.word	0x2e332079
    234c:	00000000 	.word	0x00000000
    2350:	4f525245 	.word	0x4f525245
    2354:	203a2052 	.word	0x203a2052
    2358:	656d6954 	.word	0x656d6954
    235c:	6f632072 	.word	0x6f632072
    2360:	69746e75 	.word	0x69746e75
    2364:	6620676e 	.word	0x6620676e
    2368:	656c6961 	.word	0x656c6961
    236c:	00000064 	.word	0x00000064
    2370:	4f525245 	.word	0x4f525245
    2374:	203a2052 	.word	0x203a2052
    2378:	656d6954 	.word	0x656d6954
    237c:	52492072 	.word	0x52492072
    2380:	65732051 	.word	0x65732051
    2384:	6e752074 	.word	0x6e752074
    2388:	65707865 	.word	0x65707865
    238c:	64657463 	.word	0x64657463
    2390:	002e796c 	.word	0x002e796c
    2394:	5249202d 	.word	0x5249202d
    2398:	74612051 	.word	0x74612051
    239c:	3e2d3120 	.word	0x3e2d3120
    23a0:	72742030 	.word	0x72742030
    23a4:	69736e61 	.word	0x69736e61
    23a8:	6e6f6974 	.word	0x6e6f6974
    23ac:	00000000 	.word	0x00000000
    23b0:	4f525245 	.word	0x4f525245
    23b4:	203a2052 	.word	0x203a2052
    23b8:	656d6954 	.word	0x656d6954
    23bc:	6f6e2072 	.word	0x6f6e2072
    23c0:	72742074 	.word	0x72742074
    23c4:	65676769 	.word	0x65676769
    23c8:	00002e72 	.word	0x00002e72
    23cc:	4f525245 	.word	0x4f525245
    23d0:	203a2052 	.word	0x203a2052
    23d4:	656d6954 	.word	0x656d6954
    23d8:	72742072 	.word	0x72742072
    23dc:	65676769 	.word	0x65676769
    23e0:	20646572 	.word	0x20646572
    23e4:	78656e75 	.word	0x78656e75
    23e8:	74636570 	.word	0x74636570
    23ec:	796c6465 	.word	0x796c6465
    23f0:	0000002e 	.word	0x0000002e
    23f4:	726f430a 	.word	0x726f430a
    23f8:	2d786574 	.word	0x2d786574
    23fc:	4420334d 	.word	0x4420334d
    2400:	67697365 	.word	0x67697365
    2404:	6174536e 	.word	0x6174536e
    2408:	2d207472 	.word	0x2d207472
    240c:	6d695420 	.word	0x6d695420
    2410:	54207265 	.word	0x54207265
    2414:	20747365 	.word	0x20747365
    2418:	6572202d 	.word	0x6572202d
    241c:	69736976 	.word	0x69736976
    2420:	24206e6f 	.word	0x24206e6f
    2424:	69766552 	.word	0x69766552
    2428:	6e6f6973 	.word	0x6e6f6973
    242c:	3432203a 	.word	0x3432203a
    2430:	39343233 	.word	0x39343233
    2434:	000a2420 	.word	0x000a2420
    2438:	54202931 	.word	0x54202931
    243c:	72656d69 	.word	0x72656d69
    2440:	00003020 	.word	0x00003020
    2444:	5047202d 	.word	0x5047202d
    2448:	23204f49 	.word	0x23204f49
    244c:	6f6e2030 	.word	0x6f6e2030
    2450:	72702074 	.word	0x72702074
    2454:	6e657365 	.word	0x6e657365
    2458:	54202e74 	.word	0x54202e74
    245c:	20747365 	.word	0x20747365
    2460:	70696b73 	.word	0x70696b73
    2464:	2e646570 	.word	0x2e646570
    2468:	00000000 	.word	0x00000000
    246c:	6954202d 	.word	0x6954202d
    2470:	2072656d 	.word	0x2072656d
    2474:	6e203023 	.word	0x6e203023
    2478:	7020746f 	.word	0x7020746f
    247c:	65736572 	.word	0x65736572
    2480:	202e746e 	.word	0x202e746e
    2484:	74736554 	.word	0x74736554
    2488:	6b732073 	.word	0x6b732073
    248c:	65707069 	.word	0x65707069
    2490:	00002e64 	.word	0x00002e64
    2494:	2029320a 	.word	0x2029320a
    2498:	656d6954 	.word	0x656d6954
    249c:	00312072 	.word	0x00312072
    24a0:	6954202d 	.word	0x6954202d
    24a4:	2072656d 	.word	0x2072656d
    24a8:	6e203123 	.word	0x6e203123
    24ac:	7020746f 	.word	0x7020746f
    24b0:	65736572 	.word	0x65736572
    24b4:	202e746e 	.word	0x202e746e
    24b8:	74736554 	.word	0x74736554
    24bc:	6b732073 	.word	0x6b732073
    24c0:	65707069 	.word	0x65707069
    24c4:	00002e64 	.word	0x00002e64
    24c8:	202a2a0a 	.word	0x202a2a0a
    24cc:	54534554 	.word	0x54534554
    24d0:	53415020 	.word	0x53415020
    24d4:	20444553 	.word	0x20444553
    24d8:	00002a2a 	.word	0x00002a2a
    24dc:	202a2a0a 	.word	0x202a2a0a
    24e0:	54534554 	.word	0x54534554
    24e4:	49414620 	.word	0x49414620
    24e8:	2044454c 	.word	0x2044454c
    24ec:	2c0a2a2a 	.word	0x2c0a2a2a
    24f0:	72724520 	.word	0x72724520
    24f4:	6320726f 	.word	0x6320726f
    24f8:	2065646f 	.word	0x2065646f
    24fc:	3028203d 	.word	0x3028203d
    2500:	29782578 	.word	0x29782578
    2504:	00000000 	.word	0x00000000
    2508:	4f525245 	.word	0x4f525245
    250c:	203a2052 	.word	0x203a2052
    2510:	78656e55 	.word	0x78656e55
    2514:	74636570 	.word	0x74636570
    2518:	54206465 	.word	0x54206465
    251c:	72656d69 	.word	0x72656d69
    2520:	69203020 	.word	0x69203020
    2524:	7265746e 	.word	0x7265746e
    2528:	74707572 	.word	0x74707572
    252c:	63636f20 	.word	0x63636f20
    2530:	65727275 	.word	0x65727275
    2534:	000a2e64 	.word	0x000a2e64
    2538:	4f525245 	.word	0x4f525245
    253c:	203a2052 	.word	0x203a2052
    2540:	78656e55 	.word	0x78656e55
    2544:	74636570 	.word	0x74636570
    2548:	54206465 	.word	0x54206465
    254c:	72656d69 	.word	0x72656d69
    2550:	69203120 	.word	0x69203120
    2554:	7265746e 	.word	0x7265746e
    2558:	74707572 	.word	0x74707572
    255c:	63636f20 	.word	0x63636f20
    2560:	65727275 	.word	0x65727275
    2564:	000a2e64 	.word	0x000a2e64

00002568 <_global_impure_ptr>:
    2568:	20000008                                ... 

0000256c <__sf_fake_stderr>:
	...

0000258c <__sf_fake_stdin>:
	...

000025ac <__sf_fake_stdout>:
	...
    25cc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    25dc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    25ec:	31300046 35343332 39383736 64636261     F.0123456789abcd
    25fc:	                                         ef.
