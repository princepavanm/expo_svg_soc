
timer_driver_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	000007c5 	.word	0x000007c5
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000001d9 	.word	0x000001d9
      f8:	000001db 	.word	0x000001db
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fb89 	bl	860 <main>
    bl    exit
     14e:	f001 f921 	bl	1394 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	0000284f 	.word	0x0000284f
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000084 	.word	0x20000084
    ldr     r0,=SystemInit
     168:	00001385 	.word	0x00001385

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <PORT1_COMB_Handler+0x2>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     1f0:	6001      	str	r1, [r0, #0]
     1f2:	f3bf 8f4f 	dsb	sy
     1f6:	4770      	bx	lr

000001f8 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     1f8:	b406      	push	{r1, r2}
     1fa:	6801      	ldr	r1, [r0, #0]
     1fc:	f3bf 8f4f 	dsb	sy
     200:	0008      	movs	r0, r1
     202:	bc06      	pop	{r1, r2}
     204:	4770      	bx	lr
     206:	bf00      	nop

00000208 <Timer_Init>:


/* Initialisation test - set timer reload to 0xF00 with interrupt enabled */
/* The test also check read back values of the control register and reload register */
int Timer_Init(void)
{
     208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int err_code = 0;
  uint32_t CTRL = 0;

  puts("\nStage 1 - Timer Initialisation\n");
     20a:	4838      	ldr	r0, [pc, #224]	; (2ec <Timer_Init+0xe4>)
     20c:	f001 f952 	bl	14b4 <puts>
  - check timer control register is set with correct value
  - check timer reload register is set with correct value
  - write back the previous control register value to resume timer operations
  */

  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0xF00, 1);    /*test timer interrupt using internal clock*/
     210:	2201      	movs	r2, #1
     212:	f44f 6170 	mov.w	r1, #3840	; 0xf00
     216:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     21a:	f000 fbe1 	bl	9e0 <CM3DS_MPS2_timer_Init_IntClock>
  CTRL = CM3DS_MPS2_TIMER0->CTRL;
     21e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     222:	6805      	ldr	r5, [r0, #0]
  CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     224:	f000 fbbc 	bl	9a0 <CM3DS_MPS2_timer_DisableIRQ>

  if((CTRL & CM3DS_MPS2_TIMER_CTRL_EN_Msk) != 0) {
     228:	07ec      	lsls	r4, r5, #31
     22a:	d52a      	bpl.n	282 <Timer_Init+0x7a>
    puts("Timer Enabled");
     22c:	4830      	ldr	r0, [pc, #192]	; (2f0 <Timer_Init+0xe8>)
     22e:	f001 f941 	bl	14b4 <puts>
  }
  else{
    err_code |= (1 << 0);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
  }
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk) == 0){
     232:	07a8      	lsls	r0, r5, #30
     234:	f04f 0102 	mov.w	r1, #2
  int err_code = 0;
     238:	f04f 0400 	mov.w	r4, #0
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk) == 0){
     23c:	d42b      	bmi.n	296 <Timer_Init+0x8e>
    puts("Ext Enable Not Selected");
     23e:	482d      	ldr	r0, [pc, #180]	; (2f4 <Timer_Init+0xec>)
     240:	f001 f938 	bl	14b4 <puts>
  }
  else{
    err_code |= (1 << 1);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
  }
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk) == 0){
     244:	076a      	lsls	r2, r5, #29
     246:	d42c      	bmi.n	2a2 <Timer_Init+0x9a>
    puts("Ext Clock Not Selected");
     248:	482b      	ldr	r0, [pc, #172]	; (2f8 <Timer_Init+0xf0>)
     24a:	f001 f933 	bl	14b4 <puts>
  }
  else{
    err_code |= (1 << 2);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
  }
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk) != 0) {
     24e:	072b      	lsls	r3, r5, #28
     250:	d52f      	bpl.n	2b2 <Timer_Init+0xaa>
    puts("Timer IRQ Enabled");
     252:	482a      	ldr	r0, [pc, #168]	; (2fc <Timer_Init+0xf4>)
     254:	f001 f92e 	bl	14b4 <puts>
  }
  else{
    err_code |= (1 << 3);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
  }
  if((CM3DS_MPS2_TIMER0->RELOAD == 0xF00) != 0){
     258:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
     25c:	68b3      	ldr	r3, [r6, #8]
     25e:	f005 0709 	and.w	r7, r5, #9
     262:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
     266:	d032      	beq.n	2ce <Timer_Init+0xc6>
    puts("Reload Value of 0xF00");
  }
  else{
    err_code |= (1 << 4);
     268:	f044 0410 	orr.w	r4, r4, #16
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     26c:	4621      	mov	r1, r4
     26e:	4824      	ldr	r0, [pc, #144]	; (300 <Timer_Init+0xf8>)
     270:	f001 f8ac 	bl	13cc <iprintf>
  }
  if((CTRL & 0x9)){
     274:	bb27      	cbnz	r7, 2c0 <Timer_Init+0xb8>
    CM3DS_MPS2_TIMER0->CTRL = CTRL;
    puts("\nTimer Initialisation Successful\n");
  }
  else{
    printf("\n** TEST FAILED ** Timer Initialisation Failed Program Will Now Quit, Error code: (0x%x)\n", err_code);
     276:	4621      	mov	r1, r4
     278:	4822      	ldr	r0, [pc, #136]	; (304 <Timer_Init+0xfc>)
     27a:	f001 f8a7 	bl	13cc <iprintf>
    return err_code;
  }

  if(!err_code) return 0;
  else return 1;
}
     27e:	4620      	mov	r0, r4
     280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     282:	2101      	movs	r1, #1
     284:	481e      	ldr	r0, [pc, #120]	; (300 <Timer_Init+0xf8>)
     286:	f001 f8a1 	bl	13cc <iprintf>
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk) == 0){
     28a:	07a8      	lsls	r0, r5, #30
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     28c:	f04f 0103 	mov.w	r1, #3
    err_code |= (1 << 0);
     290:	f04f 0401 	mov.w	r4, #1
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk) == 0){
     294:	d5d3      	bpl.n	23e <Timer_Init+0x36>
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     296:	481a      	ldr	r0, [pc, #104]	; (300 <Timer_Init+0xf8>)
    err_code |= (1 << 1);
     298:	460c      	mov	r4, r1
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     29a:	f001 f897 	bl	13cc <iprintf>
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk) == 0){
     29e:	076a      	lsls	r2, r5, #29
     2a0:	d5d2      	bpl.n	248 <Timer_Init+0x40>
    err_code |= (1 << 2);
     2a2:	f044 0404 	orr.w	r4, r4, #4
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     2a6:	4621      	mov	r1, r4
     2a8:	4815      	ldr	r0, [pc, #84]	; (300 <Timer_Init+0xf8>)
     2aa:	f001 f88f 	bl	13cc <iprintf>
  if((CTRL & CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk) != 0) {
     2ae:	072b      	lsls	r3, r5, #28
     2b0:	d4cf      	bmi.n	252 <Timer_Init+0x4a>
    err_code |= (1 << 3);
     2b2:	f044 0408 	orr.w	r4, r4, #8
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     2b6:	4621      	mov	r1, r4
     2b8:	4811      	ldr	r0, [pc, #68]	; (300 <Timer_Init+0xf8>)
     2ba:	f001 f887 	bl	13cc <iprintf>
     2be:	e7cb      	b.n	258 <Timer_Init+0x50>
  else return 1;
     2c0:	2401      	movs	r4, #1
    CM3DS_MPS2_TIMER0->CTRL = CTRL;
     2c2:	6035      	str	r5, [r6, #0]
    puts("\nTimer Initialisation Successful\n");
     2c4:	4810      	ldr	r0, [pc, #64]	; (308 <Timer_Init+0x100>)
     2c6:	f001 f8f5 	bl	14b4 <puts>
}
     2ca:	4620      	mov	r0, r4
     2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    puts("Reload Value of 0xF00");
     2ce:	480f      	ldr	r0, [pc, #60]	; (30c <Timer_Init+0x104>)
     2d0:	f001 f8f0 	bl	14b4 <puts>
  if((CTRL & 0x9)){
     2d4:	2f00      	cmp	r7, #0
     2d6:	d0ce      	beq.n	276 <Timer_Init+0x6e>
  if(!err_code) return 0;
     2d8:	3400      	adds	r4, #0
     2da:	bf18      	it	ne
     2dc:	2401      	movne	r4, #1
    CM3DS_MPS2_TIMER0->CTRL = CTRL;
     2de:	6035      	str	r5, [r6, #0]
    puts("\nTimer Initialisation Successful\n");
     2e0:	4809      	ldr	r0, [pc, #36]	; (308 <Timer_Init+0x100>)
     2e2:	f001 f8e7 	bl	14b4 <puts>
}
     2e6:	4620      	mov	r0, r4
     2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2ea:	bf00      	nop
     2ec:	000022e4 	.word	0x000022e4
     2f0:	00002308 	.word	0x00002308
     2f4:	00002340 	.word	0x00002340
     2f8:	00002358 	.word	0x00002358
     2fc:	00002370 	.word	0x00002370
     300:	00002318 	.word	0x00002318
     304:	000023c0 	.word	0x000023c0
     308:	0000239c 	.word	0x0000239c
     30c:	00002384 	.word	0x00002384

00000310 <Timer_IRQ>:
/* Interrupt test */
int Timer_IRQ(void)
{
     310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int counter = 0;               /* Loop counter */
  int err_code = 0;              /* Variable to record errors */
  uint32_t CTRL = 0;             /* Variable to hold read back CTRL value */
  uint32_t RELOAD = 0;           /* Variable to hold updated RELOAD value */

  timer_irq_counter = 0;        /* Set timer interrupt variables to 0 */
     314:	2400      	movs	r4, #0
     316:	4f7b      	ldr	r7, [pc, #492]	; (504 <Timer_IRQ+0x1f4>)
  timer_irq_executed = 0;
     318:	4d7b      	ldr	r5, [pc, #492]	; (508 <Timer_IRQ+0x1f8>)

  puts("Stage 2 - interrupt\n");
     31a:	487c      	ldr	r0, [pc, #496]	; (50c <Timer_IRQ+0x1fc>)
  timer_irq_counter = 0;        /* Set timer interrupt variables to 0 */
     31c:	603c      	str	r4, [r7, #0]
  timer_irq_executed = 0;
     31e:	602c      	str	r4, [r5, #0]
  puts("Stage 2 - interrupt\n");
     320:	f001 f8c8 	bl	14b4 <puts>
  //
  // Also set the reload value to 0x1f00 to allow the test more time to execute
  // the test loop, and increment the loop counter sufficiently quickly in
  // relation to the timer to allow all aspects of this test part to be
  // executed
  CM3DS_MPS2_timer_StopTimer (CM3DS_MPS2_TIMER0);
     324:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     328:	f000 fb46 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_ClearIRQ  (CM3DS_MPS2_TIMER0);
     32c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     330:	f000 fb50 	bl	9d4 <CM3DS_MPS2_timer_ClearIRQ>
  CM3DS_MPS2_timer_SetValue  (CM3DS_MPS2_TIMER0, 0x0);
     334:	4621      	mov	r1, r4
     336:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     33a:	f000 fb45 	bl	9c8 <CM3DS_MPS2_timer_SetValue>
  CM3DS_MPS2_timer_SetReload (CM3DS_MPS2_TIMER0, 0x1f00);
     33e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
     342:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     346:	f000 fb43 	bl	9d0 <CM3DS_MPS2_timer_SetReload>
  // Now start the timer before the test sequence
  CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER0);
     34a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     34e:	f000 fb2d 	bl	9ac <CM3DS_MPS2_timer_StartTimer>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     352:	f44f 7280 	mov.w	r2, #256	; 0x100
     356:	4b6e      	ldr	r3, [pc, #440]	; (510 <Timer_IRQ+0x200>)
  NVIC_EnableIRQ(TIMER0_IRQn);
  while (timer_irq_counter < 3)       /* Wait until IRQ take place 3 times*/
  {
    if (timer_irq_executed!=0)        /* This part is executed each time a timer interrupt is detected */
    {
      puts ("Timer IRQ\n");
     358:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 540 <Timer_IRQ+0x230>
      printf("Timer Status: %u\n", timer_irq_executed);
     35c:	4e6d      	ldr	r6, [pc, #436]	; (514 <Timer_IRQ+0x204>)
      CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
      puts("Timer IRQ Disabled");
     35e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 544 <Timer_IRQ+0x234>
     362:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     366:	601a      	str	r2, [r3, #0]
  while (timer_irq_counter < 3)       /* Wait until IRQ take place 3 times*/
     368:	683b      	ldr	r3, [r7, #0]
      timer_irq_executed=0;           /* clear variable so that this part is not executed until next timer interrupt */
    }

    printf("Timer Status: %u\n", CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER0));

    counter++; /* loop counter increment */
     36a:	3401      	adds	r4, #1
  while (timer_irq_counter < 3)       /* Wait until IRQ take place 3 times*/
     36c:	2b02      	cmp	r3, #2
     36e:	dc2c      	bgt.n	3ca <Timer_IRQ+0xba>
    if (timer_irq_executed!=0)        /* This part is executed each time a timer interrupt is detected */
     370:	682b      	ldr	r3, [r5, #0]
     372:	2b00      	cmp	r3, #0
     374:	d13e      	bne.n	3f4 <Timer_IRQ+0xe4>
    printf("Timer Status: %u\n", CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER0));
     376:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     37a:	f000 fb2f 	bl	9dc <CM3DS_MPS2_timer_StatusIRQ>
     37e:	4601      	mov	r1, r0
     380:	4630      	mov	r0, r6
     382:	f001 f823 	bl	13cc <iprintf>

    if (counter == 5) /* after loop executed 5 times, reload value is reprogrammed to double the value */
     386:	2c05      	cmp	r4, #5
        break;
      }
      CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER0);
      CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER0);
    }
    if ((counter % 10) == 0) /* the loop is executed to 10th time (or multiple of 10), timer interrupt is re-enabled */
     388:	4b63      	ldr	r3, [pc, #396]	; (518 <Timer_IRQ+0x208>)
    if (counter == 5) /* after loop executed 5 times, reload value is reprogrammed to double the value */
     38a:	d044      	beq.n	416 <Timer_IRQ+0x106>
    if ((counter % 10) == 0) /* the loop is executed to 10th time (or multiple of 10), timer interrupt is re-enabled */
     38c:	fba3 2304 	umull	r2, r3, r3, r4
     390:	08db      	lsrs	r3, r3, #3
     392:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     396:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
     39a:	d1e5      	bne.n	368 <Timer_IRQ+0x58>
    {
      CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
      CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER0);
      CTRL = CM3DS_MPS2_TIMER0->CTRL;  /* Check timer interrupt is enabled */
     39c:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
      CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     3a0:	4650      	mov	r0, sl
     3a2:	f000 fb09 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>
      CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER0);
     3a6:	4650      	mov	r0, sl
     3a8:	f000 faf4 	bl	994 <CM3DS_MPS2_timer_EnableIRQ>
      CTRL = CM3DS_MPS2_TIMER0->CTRL;  /* Check timer interrupt is enabled */
     3ac:	f8da 3000 	ldr.w	r3, [sl]
      if((CTRL & CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk) != 0) {
        puts("Timer IRQ enabled");
     3b0:	485a      	ldr	r0, [pc, #360]	; (51c <Timer_IRQ+0x20c>)
      if((CTRL & CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk) != 0) {
     3b2:	071a      	lsls	r2, r3, #28
     3b4:	f140 8081 	bpl.w	4ba <Timer_IRQ+0x1aa>
        puts("Timer IRQ enabled");
     3b8:	f001 f87c 	bl	14b4 <puts>
      else{
        err_code |= (1 << 2);
        printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
        break;
      }
      CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER0);
     3bc:	4650      	mov	r0, sl
     3be:	f000 faf5 	bl	9ac <CM3DS_MPS2_timer_StartTimer>
  while (timer_irq_counter < 3)       /* Wait until IRQ take place 3 times*/
     3c2:	683b      	ldr	r3, [r7, #0]
    counter++; /* loop counter increment */
     3c4:	3401      	adds	r4, #1
  while (timer_irq_counter < 3)       /* Wait until IRQ take place 3 times*/
     3c6:	2b02      	cmp	r3, #2
     3c8:	ddd2      	ble.n	370 <Timer_IRQ+0x60>
    }
  }

  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     3ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     3ce:	f000 faf3 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>
  /*read back of control register to make sure value is expected */

  if((CM3DS_MPS2_TIMER0->CTRL & CM3DS_MPS2_TIMER_CTRL_EN_Msk) == 0) {
     3d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     3d6:	681c      	ldr	r4, [r3, #0]
     3d8:	f014 0401 	ands.w	r4, r4, #1
     3dc:	d064      	beq.n	4a8 <Timer_IRQ+0x198>
    puts("\nTimer Stopped");
  }
  else{
    err_code = (1 << 3);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     3de:	2108      	movs	r1, #8
     3e0:	484f      	ldr	r0, [pc, #316]	; (520 <Timer_IRQ+0x210>)
     3e2:	f000 fff3 	bl	13cc <iprintf>
  }

  if(!err_code) {
     puts("** Timer IRQ Test Passed **\n");
  }
  else printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     3e6:	2108      	movs	r1, #8
     3e8:	484d      	ldr	r0, [pc, #308]	; (520 <Timer_IRQ+0x210>)
     3ea:	f000 ffef 	bl	13cc <iprintf>

  if(!err_code) return 0;
  else return 2;
     3ee:	2002      	movs	r0, #2
}
     3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      puts ("Timer IRQ\n");
     3f4:	4648      	mov	r0, r9
     3f6:	f001 f85d 	bl	14b4 <puts>
      printf("Timer Status: %u\n", timer_irq_executed);
     3fa:	6829      	ldr	r1, [r5, #0]
     3fc:	4630      	mov	r0, r6
     3fe:	f000 ffe5 	bl	13cc <iprintf>
      CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER0);
     402:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     406:	f000 facb 	bl	9a0 <CM3DS_MPS2_timer_DisableIRQ>
      puts("Timer IRQ Disabled");
     40a:	4640      	mov	r0, r8
     40c:	f001 f852 	bl	14b4 <puts>
      timer_irq_executed=0;           /* clear variable so that this part is not executed until next timer interrupt */
     410:	2300      	movs	r3, #0
     412:	602b      	str	r3, [r5, #0]
     414:	e7af      	b.n	376 <Timer_IRQ+0x66>
      printf("Timer Value: %u\n", CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0));
     416:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     41a:	f000 fad3 	bl	9c4 <CM3DS_MPS2_timer_GetValue>
     41e:	4601      	mov	r1, r0
     420:	4840      	ldr	r0, [pc, #256]	; (524 <Timer_IRQ+0x214>)
     422:	f000 ffd3 	bl	13cc <iprintf>
      printf("Timer Reload Value: %u\n",CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER0));
     426:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     42a:	f000 facf 	bl	9cc <CM3DS_MPS2_timer_GetReload>
     42e:	4601      	mov	r1, r0
     430:	483d      	ldr	r0, [pc, #244]	; (528 <Timer_IRQ+0x218>)
     432:	f000 ffcb 	bl	13cc <iprintf>
      CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER0, (RELOAD = 2*CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER0)));
     436:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     43a:	f000 fac7 	bl	9cc <CM3DS_MPS2_timer_GetReload>
     43e:	ea4f 0a40 	mov.w	sl, r0, lsl #1
     442:	4651      	mov	r1, sl
     444:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     448:	f000 fac2 	bl	9d0 <CM3DS_MPS2_timer_SetReload>
      printf("Timer Reload Value now set to: %u\n",CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER0));
     44c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     450:	f000 fabc 	bl	9cc <CM3DS_MPS2_timer_GetReload>
     454:	4601      	mov	r1, r0
     456:	4835      	ldr	r0, [pc, #212]	; (52c <Timer_IRQ+0x21c>)
     458:	f000 ffb8 	bl	13cc <iprintf>
      if(RELOAD  == CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER0)) {
     45c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     460:	f000 fab4 	bl	9cc <CM3DS_MPS2_timer_GetReload>
     464:	4550      	cmp	r0, sl
        puts("Timer Reload Value Is Correct");   /*check for reload value */
     466:	4832      	ldr	r0, [pc, #200]	; (530 <Timer_IRQ+0x220>)
      if(RELOAD  == CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER0)) {
     468:	d13f      	bne.n	4ea <Timer_IRQ+0x1da>
        puts("Timer Reload Value Is Correct");   /*check for reload value */
     46a:	f001 f823 	bl	14b4 <puts>
      CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     46e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     472:	f000 faa1 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>
      CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER0, 0x12C);    /*set to 300 to test instant underflow*/
     476:	f44f 7196 	mov.w	r1, #300	; 0x12c
     47a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     47e:	f000 faa3 	bl	9c8 <CM3DS_MPS2_timer_SetValue>
      if(0x12C  == CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0)) {
     482:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     486:	f000 fa9d 	bl	9c4 <CM3DS_MPS2_timer_GetValue>
     48a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
        puts("Timer Value Set to 300");    /*check for reload value */
     48e:	4829      	ldr	r0, [pc, #164]	; (534 <Timer_IRQ+0x224>)
      if(0x12C  == CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0)) {
     490:	d131      	bne.n	4f6 <Timer_IRQ+0x1e6>
        puts("Timer Value Set to 300");    /*check for reload value */
     492:	f001 f80f 	bl	14b4 <puts>
      CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER0);
     496:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     49a:	f000 fa87 	bl	9ac <CM3DS_MPS2_timer_StartTimer>
      CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER0);
     49e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     4a2:	f000 fa77 	bl	994 <CM3DS_MPS2_timer_EnableIRQ>
     4a6:	e75f      	b.n	368 <Timer_IRQ+0x58>
    puts("\nTimer Stopped");
     4a8:	4823      	ldr	r0, [pc, #140]	; (538 <Timer_IRQ+0x228>)
     4aa:	f001 f803 	bl	14b4 <puts>
     puts("** Timer IRQ Test Passed **\n");
     4ae:	4823      	ldr	r0, [pc, #140]	; (53c <Timer_IRQ+0x22c>)
     4b0:	f001 f800 	bl	14b4 <puts>
  if(!err_code) return 0;
     4b4:	4620      	mov	r0, r4
}
     4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     4ba:	2104      	movs	r1, #4
     4bc:	4818      	ldr	r0, [pc, #96]	; (520 <Timer_IRQ+0x210>)
     4be:	f000 ff85 	bl	13cc <iprintf>
        err_code |= (1 << 2);
     4c2:	2404      	movs	r4, #4
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     4c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     4c8:	f000 fa76 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>
  if((CM3DS_MPS2_TIMER0->CTRL & CM3DS_MPS2_TIMER_CTRL_EN_Msk) == 0) {
     4cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     4d0:	681b      	ldr	r3, [r3, #0]
     4d2:	07db      	lsls	r3, r3, #31
     4d4:	d483      	bmi.n	3de <Timer_IRQ+0xce>
    puts("\nTimer Stopped");
     4d6:	4818      	ldr	r0, [pc, #96]	; (538 <Timer_IRQ+0x228>)
     4d8:	f000 ffec 	bl	14b4 <puts>
  else printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     4dc:	4621      	mov	r1, r4
     4de:	4810      	ldr	r0, [pc, #64]	; (520 <Timer_IRQ+0x210>)
     4e0:	f000 ff74 	bl	13cc <iprintf>
  else return 2;
     4e4:	2002      	movs	r0, #2
}
     4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     4ea:	2101      	movs	r1, #1
     4ec:	480c      	ldr	r0, [pc, #48]	; (520 <Timer_IRQ+0x210>)
     4ee:	f000 ff6d 	bl	13cc <iprintf>
        err_code = (1 << 0);
     4f2:	2401      	movs	r4, #1
        break;
     4f4:	e7e6      	b.n	4c4 <Timer_IRQ+0x1b4>
        printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     4f6:	2102      	movs	r1, #2
     4f8:	4809      	ldr	r0, [pc, #36]	; (520 <Timer_IRQ+0x210>)
     4fa:	f000 ff67 	bl	13cc <iprintf>
        err_code = (1 << 1);
     4fe:	2402      	movs	r4, #2
        break;
     500:	e7e0      	b.n	4c4 <Timer_IRQ+0x1b4>
     502:	bf00      	nop
     504:	2000007c 	.word	0x2000007c
     508:	20000074 	.word	0x20000074
     50c:	0000241c 	.word	0x0000241c
     510:	e000e100 	.word	0xe000e100
     514:	00002440 	.word	0x00002440
     518:	cccccccd 	.word	0xcccccccd
     51c:	000024f0 	.word	0x000024f0
     520:	00002318 	.word	0x00002318
     524:	00002468 	.word	0x00002468
     528:	0000247c 	.word	0x0000247c
     52c:	00002494 	.word	0x00002494
     530:	000024b8 	.word	0x000024b8
     534:	000024d8 	.word	0x000024d8
     538:	00002504 	.word	0x00002504
     53c:	00002514 	.word	0x00002514
     540:	00002434 	.word	0x00002434
     544:	00002454 	.word	0x00002454

00000548 <Timer_Poll>:
/* Timer polling test */
int Timer_Poll(void)
{
     548:	b570      	push	{r4, r5, r6, lr}
  - timer is started
  - each time the timer interrupt status register is set (timer overflow),
    the counter variable (timer_irq_counter) increments and the interrupt status is cleared.
  - the loop is executed three times
  */
  printf ("\nStage 3 - Polling\n\n");
     54a:	4837      	ldr	r0, [pc, #220]	; (628 <Timer_Poll+0xe0>)
     54c:	f000 ffb2 	bl	14b4 <puts>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     550:	f44f 7280 	mov.w	r2, #256	; 0x100
     554:	4b35      	ldr	r3, [pc, #212]	; (62c <Timer_Poll+0xe4>)
  NVIC_DisableIRQ(TIMER0_IRQn);                 /*disable IRQ ready to test polling*/
  // Also enable the Timer IRQ since the test relies on reading the IRQ status
  // as non-zero to progress - should be enabled by the previous part, but the
  // behaviour of that part could be different if there are wait-states in the
  // memory system, and hence it could leave the Timer IRQ disabled
  CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER0);
     556:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     55a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     55e:	f000 fa19 	bl	994 <CM3DS_MPS2_timer_EnableIRQ>
  CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER0,0xF00);    /*reload timer and start it*/
     562:	f44f 6170 	mov.w	r1, #3840	; 0xf00
     566:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     56a:	f000 fa31 	bl	9d0 <CM3DS_MPS2_timer_SetReload>

  Reload = CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER0);
     56e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     572:	f000 fa2b 	bl	9cc <CM3DS_MPS2_timer_GetReload>

  if(Reload  == 0xF00)  {
     576:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
     57a:	d04b      	beq.n	614 <Timer_Poll+0xcc>
    puts("Timer Reload Initialised as 0xF00");   /*check for reload value */
  }
  else{
    err_code = (1 << 0);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     57c:	2101      	movs	r1, #1
     57e:	482c      	ldr	r0, [pc, #176]	; (630 <Timer_Poll+0xe8>)
     580:	f000 ff24 	bl	13cc <iprintf>
    err_code = (1 << 0);
     584:	2601      	movs	r6, #1
  }

  CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER0);
     586:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     58a:	f000 fa0f 	bl	9ac <CM3DS_MPS2_timer_StartTimer>

  timer_irq_counter = 0;             /* irq counter is re-used for this test although polling is used */
     58e:	2300      	movs	r3, #0
     590:	4c28      	ldr	r4, [pc, #160]	; (634 <Timer_Poll+0xec>)

  do {
    printf("Timer Status: %u\n", CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER0));
     592:	4d29      	ldr	r5, [pc, #164]	; (638 <Timer_Poll+0xf0>)
  timer_irq_counter = 0;             /* irq counter is re-used for this test although polling is used */
     594:	6023      	str	r3, [r4, #0]
    printf("Timer Status: %u\n", CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER0));
     596:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     59a:	f000 fa1f 	bl	9dc <CM3DS_MPS2_timer_StatusIRQ>
     59e:	4601      	mov	r1, r0
     5a0:	4628      	mov	r0, r5
     5a2:	f000 ff13 	bl	13cc <iprintf>

    while (CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER0) == 0);  /*wait until timer underflow*/
     5a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     5aa:	f000 fa17 	bl	9dc <CM3DS_MPS2_timer_StatusIRQ>
     5ae:	2800      	cmp	r0, #0
     5b0:	d0f9      	beq.n	5a6 <Timer_Poll+0x5e>
    printf("Timer Status: %u\n", CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER0));
     5b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     5b6:	f000 fa11 	bl	9dc <CM3DS_MPS2_timer_StatusIRQ>
     5ba:	4601      	mov	r1, r0
     5bc:	4628      	mov	r0, r5
     5be:	f000 ff05 	bl	13cc <iprintf>

    CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER0);        /*Test Timer status function 3 times by polling for interrupt*/
     5c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     5c6:	f000 fa05 	bl	9d4 <CM3DS_MPS2_timer_ClearIRQ>
    timer_irq_counter ++;                      /*status then clearing the IRQ and repeating until 3
     5ca:	6823      	ldr	r3, [r4, #0]
     5cc:	3301      	adds	r3, #1
     5ce:	6023      	str	r3, [r4, #0]
                                                 interrupt requests have occurred*/

  } while (timer_irq_counter<3);
     5d0:	6823      	ldr	r3, [r4, #0]
     5d2:	2b02      	cmp	r3, #2
     5d4:	dddf      	ble.n	596 <Timer_Poll+0x4e>

  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);         /*read back of control register to make sure value is expected */
     5d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     5da:	f000 f9ed 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>

  if((CM3DS_MPS2_TIMER0->CTRL & CM3DS_MPS2_TIMER_CTRL_EN_Msk) == 0) {
     5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     5e2:	681b      	ldr	r3, [r3, #0]
     5e4:	07db      	lsls	r3, r3, #31
     5e6:	d40a      	bmi.n	5fe <Timer_Poll+0xb6>
    puts("\nTimer Stopped");
     5e8:	4814      	ldr	r0, [pc, #80]	; (63c <Timer_Poll+0xf4>)
     5ea:	f000 ff63 	bl	14b4 <puts>
  else{
    err_code = (1 << 1);
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
  }

  if(!err_code) puts("** Timer Polling Test Passed\n");
     5ee:	b1b6      	cbz	r6, 61e <Timer_Poll+0xd6>
  else printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);

  if(!err_code) return 0;
  else return 4;
     5f0:	2604      	movs	r6, #4
  else printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     5f2:	2101      	movs	r1, #1
     5f4:	480e      	ldr	r0, [pc, #56]	; (630 <Timer_Poll+0xe8>)
     5f6:	f000 fee9 	bl	13cc <iprintf>
}
     5fa:	4630      	mov	r0, r6
     5fc:	bd70      	pop	{r4, r5, r6, pc}
  else return 4;
     5fe:	2604      	movs	r6, #4
    printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     600:	2102      	movs	r1, #2
     602:	480b      	ldr	r0, [pc, #44]	; (630 <Timer_Poll+0xe8>)
     604:	f000 fee2 	bl	13cc <iprintf>
  else printf("** TEST FAILED **, Error code: (0x%x)\n", err_code);
     608:	2102      	movs	r1, #2
     60a:	4809      	ldr	r0, [pc, #36]	; (630 <Timer_Poll+0xe8>)
     60c:	f000 fede 	bl	13cc <iprintf>
}
     610:	4630      	mov	r0, r6
     612:	bd70      	pop	{r4, r5, r6, pc}
    puts("Timer Reload Initialised as 0xF00");   /*check for reload value */
     614:	480a      	ldr	r0, [pc, #40]	; (640 <Timer_Poll+0xf8>)
     616:	f000 ff4d 	bl	14b4 <puts>
  int err_code = 0;           /* Variable to record errors */
     61a:	2600      	movs	r6, #0
     61c:	e7b3      	b.n	586 <Timer_Poll+0x3e>
  if(!err_code) puts("** Timer Polling Test Passed\n");
     61e:	4809      	ldr	r0, [pc, #36]	; (644 <Timer_Poll+0xfc>)
     620:	f000 ff48 	bl	14b4 <puts>
}
     624:	4630      	mov	r0, r6
     626:	bd70      	pop	{r4, r5, r6, pc}
     628:	00002534 	.word	0x00002534
     62c:	e000e100 	.word	0xe000e100
     630:	00002318 	.word	0x00002318
     634:	2000007c 	.word	0x2000007c
     638:	00002440 	.word	0x00002440
     63c:	00002504 	.word	0x00002504
     640:	00002548 	.word	0x00002548
     644:	0000256c 	.word	0x0000256c

00000648 <Timer_Ext>:

int Timer_Ext(void){
     648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int test_enabled = 0;   /* variable for stage 4b:to count tests carried out when timer is enabled by external input*/
  int test_error   = 0;  /* variable for stage 4b:to check the test error result */
  int enabled = 0;        /* variable for stage 4b:to handle test_disabled and test_enabled variable */
  int counter = 0;        /* loop counter */

  puts ("\nStage 4 - Ext Stimuli\n");
     64c:	484c      	ldr	r0, [pc, #304]	; (780 <Timer_Ext+0x138>)
     64e:	f000 ff31 	bl	14b4 <puts>
  - each time the timer interrupt status register is set (timer overflow),
    the counter variable (timer_irq_counter) increments and the interrupt status is cleared.
  - the loop is executed to toggle the external clock input until timer interrupt triggers three times
  */

  puts ("\n -Stage 4a - Ext Clock\n");
     652:	484c      	ldr	r0, [pc, #304]	; (784 <Timer_Ext+0x13c>)
     654:	f000 ff2e 	bl	14b4 <puts>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     658:	f44f 7680 	mov.w	r6, #256	; 0x100

  timer_irq_counter = 0;
     65c:	2300      	movs	r3, #0
     65e:	4a4a      	ldr	r2, [pc, #296]	; (788 <Timer_Ext+0x140>)

  NVIC_ClearPendingIRQ(TIMER0_IRQn);                /*Clear pending IRQs before test started*/
  NVIC_EnableIRQ(TIMER0_IRQn);                      /*enable IRQs*/
  CM3DS_MPS2_GPIO0->DATAOUT     = 0x000;                 /*Set external clock input to 0 at start of test*/
     660:	4c4a      	ldr	r4, [pc, #296]	; (78c <Timer_Ext+0x144>)
  timer_irq_counter = 0;
     662:	4d4b      	ldr	r5, [pc, #300]	; (790 <Timer_Ext+0x148>)
  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0x2);        /*set pin 1 as output so that it can be used as an external clock*/
     664:	4620      	mov	r0, r4
  timer_irq_counter = 0;
     666:	602b      	str	r3, [r5, #0]
  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0x2);        /*set pin 1 as output so that it can be used as an external clock*/
     668:	2102      	movs	r1, #2
     66a:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     66e:	6016      	str	r6, [r2, #0]
  CM3DS_MPS2_GPIO0->DATAOUT     = 0x000;                 /*Set external clock input to 0 at start of test*/
     670:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0x2);        /*set pin 1 as output so that it can be used as an external clock*/
     672:	f000 fa2d 	bl	ad0 <CM3DS_MPS2_gpio_SetOutEnable>
  CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER0, 0x100, 1);/*setup timer to use external clock*/
     676:	4631      	mov	r1, r6
     678:	2201      	movs	r2, #1
     67a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     67e:	f000 f9bb 	bl	9f8 <CM3DS_MPS2_timer_Init_ExtClock>
     682:	4e44      	ldr	r6, [pc, #272]	; (794 <Timer_Ext+0x14c>)
    CM3DS_MPS2_GPIO0->DATAOUT = 0x2;    /*creates square wave on pin 1 to be used as the external clock*/
    __ISB();
    CM3DS_MPS2_GPIO0->DATAOUT = 0x000;
    if (timer_irq_executed != 0)
    {
      puts ("Timer IRQ");
     684:	f8df 8130 	ldr.w	r8, [pc, #304]	; 7b8 <Timer_Ext+0x170>
    CM3DS_MPS2_GPIO0->DATAOUT = 0x2;    /*creates square wave on pin 1 to be used as the external clock*/
     688:	2202      	movs	r2, #2
    CM3DS_MPS2_GPIO0->DATAOUT = 0x000;
     68a:	2700      	movs	r7, #0
     68c:	e006      	b.n	69c <Timer_Ext+0x54>
    CM3DS_MPS2_GPIO0->DATAOUT = 0x2;    /*creates square wave on pin 1 to be used as the external clock*/
     68e:	6062      	str	r2, [r4, #4]
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     690:	f3bf 8f6f 	isb	sy
    CM3DS_MPS2_GPIO0->DATAOUT = 0x000;
     694:	6067      	str	r7, [r4, #4]
    if (timer_irq_executed != 0)
     696:	6833      	ldr	r3, [r6, #0]
     698:	2b00      	cmp	r3, #0
     69a:	d160      	bne.n	75e <Timer_Ext+0x116>
  while(timer_irq_counter < 3)
     69c:	682b      	ldr	r3, [r5, #0]
     69e:	2b02      	cmp	r3, #2
     6a0:	ddf5      	ble.n	68e <Timer_Ext+0x46>
    then the disable timer test is classed as passed.
  - this process is repeated within one timer overflow and if neither any of the enable timer or disable timer
    tests ever fail then the test as a whole (Stage 4b) passes.
  */

  timer_irq_executed = 0;
     6a2:	2400      	movs	r4, #0
  puts ("\n -Stage 4b - Ext Enable\n");
     6a4:	483c      	ldr	r0, [pc, #240]	; (798 <Timer_Ext+0x150>)
     6a6:	f000 ff05 	bl	14b4 <puts>
  counter = 0;            /*counter used to count the external enable input toggle times*/

  enabled = 1;            /* used to indicate whether the timer is enabled or disabled (if enabled is even,
                          timer disabled, if enabled is odd, timer enabled) */

  CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER0, 0xF00, 1);    /*setup timer so that it uses an external enable*/
     6aa:	2201      	movs	r2, #1
     6ac:	f44f 6170 	mov.w	r1, #3840	; 0xf00
     6b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  timer_irq_executed = 0;
     6b4:	6034      	str	r4, [r6, #0]
  timer_irq_counter = 0;
     6b6:	602c      	str	r4, [r5, #0]
  CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER0, 0xF00, 1);    /*setup timer so that it uses an external enable*/
     6b8:	f000 f9aa 	bl	a10 <CM3DS_MPS2_timer_Init_ExtEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = 0x2;                            /*set pin 1 (external enable) high so as to enable the timer*/
     6bc:	2302      	movs	r3, #2
     6be:	4e33      	ldr	r6, [pc, #204]	; (78c <Timer_Ext+0x144>)

  puts ("Timer 0 Enabled\n");
     6c0:	4836      	ldr	r0, [pc, #216]	; (79c <Timer_Ext+0x154>)
  CM3DS_MPS2_GPIO0->DATAOUT = 0x2;                            /*set pin 1 (external enable) high so as to enable the timer*/
     6c2:	6073      	str	r3, [r6, #4]
  puts ("Timer 0 Enabled\n");
     6c4:	f000 fef6 	bl	14b4 <puts>

  while(timer_irq_counter < 1) /* this test only execute within one timer overflow so that when timer is enabled
     6c8:	682b      	ldr	r3, [r5, #0]
     6ca:	42a3      	cmp	r3, r4
     6cc:	dc52      	bgt.n	774 <Timer_Ext+0x12c>
  int test_error   = 0;  /* variable for stage 4b:to check the test error result */
     6ce:	46a0      	mov	r8, r4
  enabled = 1;            /* used to indicate whether the timer is enabled or disabled (if enabled is even,
     6d0:	2401      	movs	r4, #1
     6d2:	4f33      	ldr	r7, [pc, #204]	; (7a0 <Timer_Ext+0x158>)
      {
        puts("Enable Test Passed");
      }
      else
      {
        puts("** TEST FAILED ** Enable Test");
     6d4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 7bc <Timer_Ext+0x174>
        puts("Enable Test Passed");
     6d8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 7c0 <Timer_Ext+0x178>
      CM3DS_MPS2_GPIO0->DATAOUT ^= 0x2;
     6dc:	6873      	ldr	r3, [r6, #4]
      temp_test = CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0);
     6de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
      CM3DS_MPS2_GPIO0->DATAOUT ^= 0x2;
     6e2:	f083 0302 	eor.w	r3, r3, #2
     6e6:	6073      	str	r3, [r6, #4]
      temp_test = CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0);
     6e8:	f000 f96c 	bl	9c4 <CM3DS_MPS2_timer_GetValue>
      enabled++;
     6ec:	3401      	adds	r4, #1
      if((enabled % 2) == 0) //if timer is disabled i.e. enabled is even, increment the test_disabled counter
     6ee:	07e3      	lsls	r3, r4, #31
      temp_test = CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0);
     6f0:	6038      	str	r0, [r7, #0]
      if(temp_test == CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0))
     6f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
      if((enabled % 2) == 0) //if timer is disabled i.e. enabled is even, increment the test_disabled counter
     6f6:	d517      	bpl.n	728 <Timer_Ext+0xe0>
      if (temp_test != CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0))
     6f8:	f000 f964 	bl	9c4 <CM3DS_MPS2_timer_GetValue>
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	4298      	cmp	r0, r3
     700:	d036      	beq.n	770 <Timer_Ext+0x128>
        puts("Enable Test Passed");
     702:	4648      	mov	r0, r9
     704:	f000 fed6 	bl	14b4 <puts>
  while(timer_irq_counter < 1) /* this test only execute within one timer overflow so that when timer is enabled
     708:	682b      	ldr	r3, [r5, #0]
     70a:	1e61      	subs	r1, r4, #1
     70c:	2b00      	cmp	r3, #0
     70e:	dde5      	ble.n	6dc <Timer_Ext+0x94>

   counter++; //Enable Toggle counter

  }

  printf("\nTimer enable/disable toggled %d times\n", counter);
     710:	4824      	ldr	r0, [pc, #144]	; (7a4 <Timer_Ext+0x15c>)
     712:	f000 fe5b 	bl	13cc <iprintf>
  if(test_error == 0)
     716:	f1b8 0f00 	cmp.w	r8, #0
     71a:	d119      	bne.n	750 <Timer_Ext+0x108>
  {
    puts("\nExt Stimuli Tests Completed Successfully\n");
     71c:	4822      	ldr	r0, [pc, #136]	; (7a8 <Timer_Ext+0x160>)
     71e:	f000 fec9 	bl	14b4 <puts>
    return 0;
     722:	2000      	movs	r0, #0
  else
  {
    printf("\n** TEST FAILED **, Error code: (0x%x)", test_error);
    return 8;
  }
}
     724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(temp_test == CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0))
     728:	f000 f94c 	bl	9c4 <CM3DS_MPS2_timer_GetValue>
     72c:	683b      	ldr	r3, [r7, #0]
     72e:	4298      	cmp	r0, r3
        puts("** TEST FAILED ** Disable Test");
     730:	481e      	ldr	r0, [pc, #120]	; (7ac <Timer_Ext+0x164>)
      if(temp_test == CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER0))
     732:	d019      	beq.n	768 <Timer_Ext+0x120>
        puts("** TEST FAILED ** Enable Test");
     734:	f000 febe 	bl	14b4 <puts>
        test_error++;
     738:	f108 0801 	add.w	r8, r8, #1
  while(timer_irq_counter < 1) /* this test only execute within one timer overflow so that when timer is enabled
     73c:	682b      	ldr	r3, [r5, #0]
     73e:	1e61      	subs	r1, r4, #1
     740:	2b00      	cmp	r3, #0
     742:	ddcb      	ble.n	6dc <Timer_Ext+0x94>
  printf("\nTimer enable/disable toggled %d times\n", counter);
     744:	4817      	ldr	r0, [pc, #92]	; (7a4 <Timer_Ext+0x15c>)
     746:	f000 fe41 	bl	13cc <iprintf>
  if(test_error == 0)
     74a:	f1b8 0f00 	cmp.w	r8, #0
     74e:	d0e5      	beq.n	71c <Timer_Ext+0xd4>
    printf("\n** TEST FAILED **, Error code: (0x%x)", test_error);
     750:	4641      	mov	r1, r8
     752:	4817      	ldr	r0, [pc, #92]	; (7b0 <Timer_Ext+0x168>)
     754:	f000 fe3a 	bl	13cc <iprintf>
    return 8;
     758:	2008      	movs	r0, #8
}
     75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      puts ("Timer IRQ");
     75e:	4640      	mov	r0, r8
     760:	f000 fea8 	bl	14b4 <puts>
      timer_irq_executed = 0;
     764:	6037      	str	r7, [r6, #0]
     766:	e78f      	b.n	688 <Timer_Ext+0x40>
        puts("Disable Test Passed");
     768:	4812      	ldr	r0, [pc, #72]	; (7b4 <Timer_Ext+0x16c>)
     76a:	f000 fea3 	bl	14b4 <puts>
     76e:	e7e5      	b.n	73c <Timer_Ext+0xf4>
        puts("** TEST FAILED ** Enable Test");
     770:	4650      	mov	r0, sl
     772:	e7df      	b.n	734 <Timer_Ext+0xec>
  printf("\nTimer enable/disable toggled %d times\n", counter);
     774:	4621      	mov	r1, r4
     776:	480b      	ldr	r0, [pc, #44]	; (7a4 <Timer_Ext+0x15c>)
     778:	f000 fe28 	bl	13cc <iprintf>
     77c:	e7ce      	b.n	71c <Timer_Ext+0xd4>
     77e:	bf00      	nop
     780:	0000258c 	.word	0x0000258c
     784:	000025a4 	.word	0x000025a4
     788:	e000e100 	.word	0xe000e100
     78c:	40010000 	.word	0x40010000
     790:	2000007c 	.word	0x2000007c
     794:	20000074 	.word	0x20000074
     798:	000025cc 	.word	0x000025cc
     79c:	000025e8 	.word	0x000025e8
     7a0:	20000078 	.word	0x20000078
     7a4:	00002664 	.word	0x00002664
     7a8:	0000268c 	.word	0x0000268c
     7ac:	00002610 	.word	0x00002610
     7b0:	000026b8 	.word	0x000026b8
     7b4:	000025fc 	.word	0x000025fc
     7b8:	000025c0 	.word	0x000025c0
     7bc:	00002644 	.word	0x00002644
     7c0:	00002630 	.word	0x00002630

000007c4 <TIMER0_Handler>:

void TIMER0_Handler(void)    /*Timer ISR*/
{
  timer_irq_counter++;
  timer_irq_executed=1;
     7c4:	2001      	movs	r0, #1
{
     7c6:	b508      	push	{r3, lr}
  timer_irq_counter++;
     7c8:	4b09      	ldr	r3, [pc, #36]	; (7f0 <TIMER0_Handler+0x2c>)
  timer_irq_executed=1;
     7ca:	490a      	ldr	r1, [pc, #40]	; (7f4 <TIMER0_Handler+0x30>)
  timer_irq_counter++;
     7cc:	681a      	ldr	r2, [r3, #0]
     7ce:	4402      	add	r2, r0
     7d0:	601a      	str	r2, [r3, #0]
  timer_irq_executed=1;
     7d2:	6008      	str	r0, [r1, #0]
  if (timer_irq_counter>=3) {
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	2b02      	cmp	r3, #2
     7d8:	dd03      	ble.n	7e2 <TIMER0_Handler+0x1e>
    CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);
     7da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     7de:	f000 f8eb 	bl	9b8 <CM3DS_MPS2_timer_StopTimer>
  }
  CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER0);
  return;
}
     7e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER0);
     7e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     7ea:	f000 b8f3 	b.w	9d4 <CM3DS_MPS2_timer_ClearIRQ>
     7ee:	bf00      	nop
     7f0:	2000007c 	.word	0x2000007c
     7f4:	20000074 	.word	0x20000074

000007f8 <timer0_id_check>:
// ----------------------------------------------------------
/* Detect the ARM ID and the part number to see if device is present */
int timer0_id_check(void)
{
unsigned char timer_id;
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     7f8:	4a09      	ldr	r2, [pc, #36]	; (820 <timer0_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     7fa:	4b0a      	ldr	r3, [pc, #40]	; (824 <timer0_id_check+0x2c>)
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     7fc:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     7fe:	681b      	ldr	r3, [r3, #0]
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     800:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     802:	2b22      	cmp	r3, #34	; 0x22
     804:	d001      	beq.n	80a <timer0_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
      (timer_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     806:	2001      	movs	r0, #1
  else
    return 0;
}
     808:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     80a:	4b07      	ldr	r3, [pc, #28]	; (828 <timer0_id_check+0x30>)
     80c:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     80e:	2bb8      	cmp	r3, #184	; 0xb8
     810:	d1f9      	bne.n	806 <timer0_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     812:	f000 0007 	and.w	r0, r0, #7
     816:	3803      	subs	r0, #3
     818:	bf18      	it	ne
     81a:	2001      	movne	r0, #1
     81c:	4770      	bx	lr
     81e:	bf00      	nop
     820:	40000fe8 	.word	0x40000fe8
     824:	40000fe0 	.word	0x40000fe0
     828:	40000fe4 	.word	0x40000fe4

0000082c <gpio0_id_check>:

int gpio0_id_check(void)
{
unsigned char gpio_id;
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     82c:	4a09      	ldr	r2, [pc, #36]	; (854 <gpio0_id_check+0x28>)

  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     82e:	4b0a      	ldr	r3, [pc, #40]	; (858 <gpio0_id_check+0x2c>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     830:	7810      	ldrb	r0, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     832:	681b      	ldr	r3, [r3, #0]
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     834:	b2c0      	uxtb	r0, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     836:	2b20      	cmp	r3, #32
     838:	d001      	beq.n	83e <gpio0_id_check+0x12>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
      (gpio_id != 0x03))
    return 1; /* part ID & ARM ID does not match */
     83a:	2001      	movs	r0, #1
  else
    return 0;
}
     83c:	4770      	bx	lr
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     83e:	4b07      	ldr	r3, [pc, #28]	; (85c <gpio0_id_check+0x30>)
     840:	681b      	ldr	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     842:	2bb8      	cmp	r3, #184	; 0xb8
     844:	d1f9      	bne.n	83a <gpio0_id_check+0xe>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     846:	f000 0007 	and.w	r0, r0, #7
     84a:	3803      	subs	r0, #3
     84c:	bf18      	it	ne
     84e:	2001      	movne	r0, #1
     850:	4770      	bx	lr
     852:	bf00      	nop
     854:	40010fe8 	.word	0x40010fe8
     858:	40010fe0 	.word	0x40010fe0
     85c:	40010fe4 	.word	0x40010fe4

00000860 <main>:
{
     860:	b510      	push	{r4, lr}
     862:	b082      	sub	sp, #8
  UartStdOutInit();
     864:	f000 f876 	bl	954 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - Timer Driver Test - revision $Revision: 243344 $\n");
     868:	4828      	ldr	r0, [pc, #160]	; (90c <main+0xac>)
     86a:	f000 fe23 	bl	14b4 <puts>
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     86e:	4b28      	ldr	r3, [pc, #160]	; (910 <main+0xb0>)
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     870:	4a28      	ldr	r2, [pc, #160]	; (914 <main+0xb4>)
  timer_id = HW8_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE8) & 0x07;
     872:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     874:	6812      	ldr	r2, [r2, #0]
     876:	2a22      	cmp	r2, #34	; 0x22
     878:	d103      	bne.n	882 <main+0x22>
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     87a:	4a27      	ldr	r2, [pc, #156]	; (918 <main+0xb8>)
     87c:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     87e:	2ab8      	cmp	r2, #184	; 0xb8
     880:	d008      	beq.n	894 <main+0x34>
    puts ("** TEST SKIPPED ** Timer 0 not present.");
     882:	4826      	ldr	r0, [pc, #152]	; (91c <main+0xbc>)
     884:	f000 fe16 	bl	14b4 <puts>
    return 0;}
     888:	2400      	movs	r4, #0
    UartEndSimulation();
     88a:	f000 f87b 	bl	984 <UartEndSimulation>
}
     88e:	4620      	mov	r0, r4
     890:	b002      	add	sp, #8
     892:	bd10      	pop	{r4, pc}
     894:	b2db      	uxtb	r3, r3
      (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8) ||
     896:	f003 0307 	and.w	r3, r3, #7
     89a:	2b03      	cmp	r3, #3
     89c:	d1f1      	bne.n	882 <main+0x22>
  result |= Timer_Init();
     89e:	f7ff fcb3 	bl	208 <Timer_Init>
     8a2:	4604      	mov	r4, r0
  result |= Timer_IRQ();
     8a4:	f7ff fd34 	bl	310 <Timer_IRQ>
     8a8:	4304      	orrs	r4, r0
  result |= Timer_Poll();
     8aa:	f7ff fe4d 	bl	548 <Timer_Poll>
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     8ae:	4b1c      	ldr	r3, [pc, #112]	; (920 <main+0xc0>)
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8b0:	4a1c      	ldr	r2, [pc, #112]	; (924 <main+0xc4>)
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     8b2:	781b      	ldrb	r3, [r3, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8b4:	6812      	ldr	r2, [r2, #0]
  result |= Timer_Poll();
     8b6:	ea44 0100 	orr.w	r1, r4, r0
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8ba:	2a20      	cmp	r2, #32
  gpio_id = HW8_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE8) & 0x07;
     8bc:	b2db      	uxtb	r3, r3
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8be:	d00a      	beq.n	8d6 <main+0x76>
    if(result != 0) {
     8c0:	b111      	cbz	r1, 8c8 <main+0x68>
       printf("** TEST FAILED **, Error code: (0x%x)\n\n", result);
     8c2:	4819      	ldr	r0, [pc, #100]	; (928 <main+0xc8>)
     8c4:	f000 fd82 	bl	13cc <iprintf>
    puts ("** TEST SKIPPED ** GPIO 0 not present.");
     8c8:	4818      	ldr	r0, [pc, #96]	; (92c <main+0xcc>)
     8ca:	f000 fdf3 	bl	14b4 <puts>
    return 0;
     8ce:	2400      	movs	r4, #0
    UartEndSimulation();
     8d0:	f000 f858 	bl	984 <UartEndSimulation>
    return 0;
     8d4:	e7db      	b.n	88e <main+0x2e>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     8d6:	4a16      	ldr	r2, [pc, #88]	; (930 <main+0xd0>)
     8d8:	6812      	ldr	r2, [r2, #0]
  if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8da:	2ab8      	cmp	r2, #184	; 0xb8
     8dc:	d1f0      	bne.n	8c0 <main+0x60>
      (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8) ||
     8de:	f003 0307 	and.w	r3, r3, #7
     8e2:	2b03      	cmp	r3, #3
     8e4:	d1ec      	bne.n	8c0 <main+0x60>
     8e6:	9101      	str	r1, [sp, #4]
    result |= Timer_Ext(); /* Run external input test */
     8e8:	f7ff feae 	bl	648 <Timer_Ext>
  if(result == 0) {
     8ec:	9901      	ldr	r1, [sp, #4]
     8ee:	ea51 0400 	orrs.w	r4, r1, r0
     8f2:	d105      	bne.n	900 <main+0xa0>
    puts("** TEST PASSED **\n");
     8f4:	480f      	ldr	r0, [pc, #60]	; (934 <main+0xd4>)
     8f6:	f000 fddd 	bl	14b4 <puts>
  UartEndSimulation();
     8fa:	f000 f843 	bl	984 <UartEndSimulation>
  return result;
     8fe:	e7c6      	b.n	88e <main+0x2e>
    printf("** TEST FAILED **, Error code: (0x%x)\n\n", result);
     900:	4621      	mov	r1, r4
     902:	4809      	ldr	r0, [pc, #36]	; (928 <main+0xc8>)
     904:	f000 fd62 	bl	13cc <iprintf>
     908:	e7f7      	b.n	8fa <main+0x9a>
     90a:	bf00      	nop
     90c:	000026e0 	.word	0x000026e0
     910:	40000fe8 	.word	0x40000fe8
     914:	40000fe0 	.word	0x40000fe0
     918:	40000fe4 	.word	0x40000fe4
     91c:	0000272c 	.word	0x0000272c
     920:	40010fe8 	.word	0x40010fe8
     924:	40010fe0 	.word	0x40010fe0
     928:	00002754 	.word	0x00002754
     92c:	0000277c 	.word	0x0000277c
     930:	40010fe4 	.word	0x40010fe4
     934:	000027a4 	.word	0x000027a4

00000938 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     938:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     93a:	4616      	mov	r6, r2
     93c:	b13a      	cbz	r2, 94e <_write+0x16>
     93e:	1e4c      	subs	r4, r1, #1
     940:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     942:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     946:	f000 f80d 	bl	964 <UartPutc>
  for (i=0; i<len;i++) {
     94a:	42ac      	cmp	r4, r5
     94c:	d1f9      	bne.n	942 <_write+0xa>
    }
  return len;
}
     94e:	4630      	mov	r0, r6
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	bf00      	nop

00000954 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     958:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     95a:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     95c:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     95e:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     960:	4770      	bx	lr
     962:	bf00      	nop

00000964 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     964:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     968:	6853      	ldr	r3, [r2, #4]
     96a:	07db      	lsls	r3, r3, #31
     96c:	d4fc      	bmi.n	968 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     96e:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     970:	4770      	bx	lr
     972:	bf00      	nop

00000974 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     974:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     978:	6853      	ldr	r3, [r2, #4]
     97a:	079b      	lsls	r3, r3, #30
     97c:	d5fc      	bpl.n	978 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     97e:	6810      	ldr	r0, [r2, #0]
}
     980:	b2c0      	uxtb	r0, r0
     982:	4770      	bx	lr

00000984 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     988:	685a      	ldr	r2, [r3, #4]
     98a:	07d2      	lsls	r2, r2, #31
     98c:	d4fc      	bmi.n	988 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     98e:	2204      	movs	r2, #4
     990:	601a      	str	r2, [r3, #0]
     992:	e7fe      	b.n	992 <UartEndSimulation+0xe>

00000994 <CM3DS_MPS2_timer_EnableIRQ>:
 * @brief  Enable the microcontroller timer interrupts.
 */

 void CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     994:	6803      	ldr	r3, [r0, #0]
     996:	f043 0308 	orr.w	r3, r3, #8
     99a:	6003      	str	r3, [r0, #0]
 }
     99c:	4770      	bx	lr
     99e:	bf00      	nop

000009a0 <CM3DS_MPS2_timer_DisableIRQ>:
 * @brief  Disable the microcontroller timer interrutps.
 */

 void CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     9a0:	6803      	ldr	r3, [r0, #0]
     9a2:	f023 0308 	bic.w	r3, r3, #8
     9a6:	6003      	str	r3, [r0, #0]
 }
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop

000009ac <CM3DS_MPS2_timer_StartTimer>:
 * @brief  Start the Timer.
 */

 void CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     9ac:	6803      	ldr	r3, [r0, #0]
     9ae:	f043 0301 	orr.w	r3, r3, #1
     9b2:	6003      	str	r3, [r0, #0]
 }
     9b4:	4770      	bx	lr
     9b6:	bf00      	nop

000009b8 <CM3DS_MPS2_timer_StopTimer>:
 * @brief  Stop the Timer.
 */

 void CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     9b8:	6803      	ldr	r3, [r0, #0]
     9ba:	f023 0301 	bic.w	r3, r3, #1
     9be:	6003      	str	r3, [r0, #0]
 }
     9c0:	4770      	bx	lr
     9c2:	bf00      	nop

000009c4 <CM3DS_MPS2_timer_GetValue>:
 * @brief  Returns the current value of the timer.
 */

 uint32_t CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->VALUE;
     9c4:	6840      	ldr	r0, [r0, #4]
 }
     9c6:	4770      	bx	lr

000009c8 <CM3DS_MPS2_timer_SetValue>:
 * @brief  Sets the timer to the specified value.
 */

 void CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->VALUE = value;
     9c8:	6041      	str	r1, [r0, #4]
 }
     9ca:	4770      	bx	lr

000009cc <CM3DS_MPS2_timer_GetReload>:
 * @brief  Returns the reload value of the timer. The reload value is the value which the timer is set to after an underflow occurs.
 */

 uint32_t CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->RELOAD;
     9cc:	6880      	ldr	r0, [r0, #8]
 }
     9ce:	4770      	bx	lr

000009d0 <CM3DS_MPS2_timer_SetReload>:
 * @brief  Sets the reload value of the timer to the specified value. The reload value is the value which the timer is set to after an underflow occurs.
 */

 void CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->RELOAD = value;
     9d0:	6081      	str	r1, [r0, #8]
 }
     9d2:	4770      	bx	lr

000009d4 <CM3DS_MPS2_timer_ClearIRQ>:
 * @brief  Clears the timer IRQ if set.
 */

 void CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->INTCLEAR = CM3DS_MPS2_TIMER_INTCLEAR_Msk;
     9d4:	2301      	movs	r3, #1
     9d6:	60c3      	str	r3, [r0, #12]
 }
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <CM3DS_MPS2_timer_StatusIRQ>:
 * @brief  Returns the IRQ status of the timer in question.
 */

 uint32_t  CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->INTSTATUS;
     9dc:	68c0      	ldr	r0, [r0, #12]
 }
     9de:	4770      	bx	lr

000009e0 <CM3DS_MPS2_timer_Init_IntClock>:
 */

  void CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     9e0:	2300      	movs	r3, #0
     9e2:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     9e4:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     9e6:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                          /* non zero - enable IRQ */
     9e8:	b912      	cbnz	r2, 9f0 <CM3DS_MPS2_timer_Init_IntClock+0x10>
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else{                                                                                   /* zero - do not enable IRQ */
         CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk);                                       /* enable timer */
     9ea:	2301      	movs	r3, #1
     9ec:	6003      	str	r3, [r0, #0]
        }
 }
     9ee:	4770      	bx	lr
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
     9f0:	2309      	movs	r3, #9
     9f2:	6003      	str	r3, [r0, #0]
     9f4:	4770      	bx	lr
     9f6:	bf00      	nop

000009f8 <CM3DS_MPS2_timer_Init_ExtClock>:
 */

 void CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     9f8:	2300      	movs	r3, #0
     9fa:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     9fc:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     9fe:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     a00:	b912      	cbnz	r2, a08 <CM3DS_MPS2_timer_Init_ExtClock+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk |CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     a02:	2305      	movs	r3, #5
     a04:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk);                                   /* enable timer */
         }
 }
     a06:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     a08:	230d      	movs	r3, #13
     a0a:	6003      	str	r3, [r0, #0]
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop

00000a10 <CM3DS_MPS2_timer_Init_ExtEnable>:
 */

 void CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     a10:	2300      	movs	r3, #0
     a12:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     a14:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     a16:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     a18:	b912      	cbnz	r2, a20 <CM3DS_MPS2_timer_Init_ExtEnable+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     a1a:	2303      	movs	r3, #3
     a1c:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk);                                    /* enable timer */
         }
 }
     a1e:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     a20:	230b      	movs	r3, #11
     a22:	6003      	str	r3, [r0, #0]
     a24:	4770      	bx	lr
     a26:	bf00      	nop

00000a28 <CM3DS_MPS2_uart_init>:
 * @return 1 if initialisation failed, 0 if successful.
 */

 uint32_t CM3DS_MPS2_uart_init(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, uint32_t divider, uint32_t tx_en,
                           uint32_t rx_en, uint32_t tx_irq_en, uint32_t rx_irq_en, uint32_t tx_ovrirq_en, uint32_t rx_ovrirq_en)
 {
     a28:	b4f0      	push	{r4, r5, r6, r7}
       uint32_t new_ctrl=0;

       if (tx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_TXEN_Msk;
     a2a:	3200      	adds	r2, #0
     a2c:	bf18      	it	ne
     a2e:	2201      	movne	r2, #1
 {
     a30:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
     a34:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
       if (rx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_RXEN_Msk;
     a38:	b10b      	cbz	r3, a3e <CM3DS_MPS2_uart_init+0x16>
     a3a:	f042 0202 	orr.w	r2, r2, #2
       if (tx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_TXIRQEN_Msk;
     a3e:	b10f      	cbz	r7, a44 <CM3DS_MPS2_uart_init+0x1c>
     a40:	f042 0204 	orr.w	r2, r2, #4
       if (rx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_RXIRQEN_Msk;
     a44:	b10e      	cbz	r6, a4a <CM3DS_MPS2_uart_init+0x22>
     a46:	f042 0208 	orr.w	r2, r2, #8
       if (tx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_TXORIRQEN_Msk;
     a4a:	b10d      	cbz	r5, a50 <CM3DS_MPS2_uart_init+0x28>
     a4c:	f042 0210 	orr.w	r2, r2, #16
       if (rx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_RXORIRQEN_Msk;
     a50:	b10c      	cbz	r4, a56 <CM3DS_MPS2_uart_init+0x2e>
     a52:	f042 0220 	orr.w	r2, r2, #32

       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     a56:	2300      	movs	r3, #0
       CM3DS_MPS2_UART->BAUDDIV = divider;
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */

       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
       else return 0;
 }
     a58:	bcf0      	pop	{r4, r5, r6, r7}
       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     a5a:	6083      	str	r3, [r0, #8]
       CM3DS_MPS2_UART->BAUDDIV = divider;
     a5c:	6101      	str	r1, [r0, #16]
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */
     a5e:	6082      	str	r2, [r0, #8]
       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
     a60:	6843      	ldr	r3, [r0, #4]
     a62:	f013 0f0c 	tst.w	r3, #12
 }
     a66:	bf14      	ite	ne
     a68:	2001      	movne	r0, #1
     a6a:	2000      	moveq	r0, #0
     a6c:	4770      	bx	lr
     a6e:	bf00      	nop

00000a70 <CM3DS_MPS2_uart_GetRxBufferFull>:
 * @brief  Returns whether the RX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk)>> CM3DS_MPS2_UART_STATE_RXBF_Pos);
     a70:	6840      	ldr	r0, [r0, #4]
 }
     a72:	f3c0 0040 	ubfx	r0, r0, #1, #1
     a76:	4770      	bx	lr

00000a78 <CM3DS_MPS2_uart_GetTxBufferFull>:
 * @brief  Returns whether the TX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk)>> CM3DS_MPS2_UART_STATE_TXBF_Pos);
     a78:	6840      	ldr	r0, [r0, #4]
 }
     a7a:	f000 0001 	and.w	r0, r0, #1
     a7e:	4770      	bx	lr

00000a80 <CM3DS_MPS2_uart_SendChar>:
 * @brief  Sends a character to the TX buffer for transmission.
 */

 void CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, char txchar)
 {
       while(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk);
     a80:	6843      	ldr	r3, [r0, #4]
     a82:	07db      	lsls	r3, r3, #31
     a84:	d4fc      	bmi.n	a80 <CM3DS_MPS2_uart_SendChar>
       CM3DS_MPS2_UART->DATA = (uint32_t)txchar;
     a86:	6001      	str	r1, [r0, #0]
 }
     a88:	4770      	bx	lr
     a8a:	bf00      	nop

00000a8c <CM3DS_MPS2_uart_ReceiveChar>:
 * @brief  returns the character from the RX buffer which has been received.
 */

 char CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       while(!(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk));
     a8c:	6843      	ldr	r3, [r0, #4]
     a8e:	079b      	lsls	r3, r3, #30
     a90:	d5fc      	bpl.n	a8c <CM3DS_MPS2_uart_ReceiveChar>
       return (char)(CM3DS_MPS2_UART->DATA);
     a92:	6800      	ldr	r0, [r0, #0]
 }
     a94:	b2c0      	uxtb	r0, r0
     a96:	4770      	bx	lr

00000a98 <CM3DS_MPS2_uart_GetOverrunStatus>:
 */


 uint32_t CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     a98:	6840      	ldr	r0, [r0, #4]
 }
     a9a:	f3c0 0081 	ubfx	r0, r0, #2, #2
     a9e:	4770      	bx	lr

00000aa0 <CM3DS_MPS2_uart_ClearOverrunStatus>:
 * @brief  Clears the overrun status of both the RX & TX buffers and then returns the current overrun status.
 */

 uint32_t CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->STATE = (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk);
     aa0:	230c      	movs	r3, #12
     aa2:	6043      	str	r3, [r0, #4]
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     aa4:	6840      	ldr	r0, [r0, #4]
 }
     aa6:	f3c0 0081 	ubfx	r0, r0, #2, #2
     aaa:	4770      	bx	lr

00000aac <CM3DS_MPS2_uart_GetBaudDivider>:
 * @brief  Returns the current UART Baud rate divider. Note that the Baud rate divider is the difference between the clock frequency and the Baud frequency.
 */

 uint32_t CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return CM3DS_MPS2_UART->BAUDDIV;
     aac:	6900      	ldr	r0, [r0, #16]
 }
     aae:	4770      	bx	lr

00000ab0 <CM3DS_MPS2_uart_GetTxIRQStatus>:
 * @brief  Returns the TX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_TXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_TXIRQ_Pos);
     ab0:	68c0      	ldr	r0, [r0, #12]
 }
     ab2:	f000 0001 	and.w	r0, r0, #1
     ab6:	4770      	bx	lr

00000ab8 <CM3DS_MPS2_uart_GetRxIRQStatus>:
 * @brief  Returns the RX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_RXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_RXIRQ_Pos);
     ab8:	68c0      	ldr	r0, [r0, #12]
 }
     aba:	f3c0 0040 	ubfx	r0, r0, #1, #1
     abe:	4770      	bx	lr

00000ac0 <CM3DS_MPS2_uart_ClearTxIRQ>:
 * @brief  Clears the TX buffer full interrupt status.
 */

 void CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_TXIRQ_Msk;
     ac0:	2301      	movs	r3, #1
     ac2:	60c3      	str	r3, [r0, #12]
 }
     ac4:	4770      	bx	lr
     ac6:	bf00      	nop

00000ac8 <CM3DS_MPS2_uart_ClearRxIRQ>:
 * @brief  Clears the RX interrupt status.
 */

 void CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_RXIRQ_Msk;
     ac8:	2302      	movs	r3, #2
     aca:	60c3      	str	r3, [r0, #12]
 }
     acc:	4770      	bx	lr
     ace:	bf00      	nop

00000ad0 <CM3DS_MPS2_gpio_SetOutEnable>:
 * @brief  Sets pins on a port as an output. Set the bit corresponding to the pin number to 1 for output i.e. Set bit 1 of outenable to 1 to set pin 1 as an output. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableset)
 {
       CM3DS_MPS2_GPIO->OUTENABLESET = outenableset;
     ad0:	6101      	str	r1, [r0, #16]
 }
     ad2:	4770      	bx	lr

00000ad4 <CM3DS_MPS2_gpio_ClrOutEnable>:
 * @brief  Sets pins on a port as an input. Set the bit corresponding to the pin number to 1 for input i.e. Set bit 1 of outenable to 1 to set pin 1 as an input. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableclr)
 {
       CM3DS_MPS2_GPIO->OUTENABLECLR = outenableclr;
     ad4:	6141      	str	r1, [r0, #20]
 }
     ad6:	4770      	bx	lr

00000ad8 <CM3DS_MPS2_gpio_GetOutEnable>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set as inputs or outputs i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is an output.
 */

 uint32_t CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->OUTENABLESET;
     ad8:	6900      	ldr	r0, [r0, #16]
 }
     ada:	4770      	bx	lr

00000adc <CM3DS_MPS2_gpio_SetAltFunc>:
 * @brief  enables the alternative function for pins. Set the bit corresponding to the pin number to 1 for alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to its alternative function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncset)
 {
       CM3DS_MPS2_GPIO->ALTFUNCSET = AltFuncset;
     adc:	6181      	str	r1, [r0, #24]
 }
     ade:	4770      	bx	lr

00000ae0 <CM3DS_MPS2_gpio_ClrAltFunc>:
 * @brief  disables the alternative function for pins. Set the bit corresponding to the pin number to 1 to disable alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to the orignal output function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncclr)
 {
       CM3DS_MPS2_GPIO->ALTFUNCCLR = AltFuncclr;
     ae0:	61c1      	str	r1, [r0, #28]
 }
     ae2:	4770      	bx	lr

00000ae4 <CM3DS_MPS2_gpio_GetAltFunc>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set to their alternative or their original output functionality i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is set to its alternative function.
 */

 uint32_t CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->ALTFUNCSET;
     ae4:	6980      	ldr	r0, [r0, #24]
 }
     ae6:	4770      	bx	lr

00000ae8 <CM3DS_MPS2_gpio_IntClear>:
 * @brief  Clears the interrupt flag for the specified pin and then returns the new interrupt status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTCLEAR = (1 << Num);
     ae8:	2301      	movs	r3, #1
     aea:	fa03 f101 	lsl.w	r1, r3, r1
     aee:	6381      	str	r1, [r0, #56]	; 0x38

       return CM3DS_MPS2_GPIO->INTSTATUS;
     af0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 }
     af2:	4770      	bx	lr

00000af4 <CM3DS_MPS2_gpio_SetIntEnable>:
 * @brief  Enables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENSET = (1 << Num);
     af4:	2301      	movs	r3, #1
     af6:	fa03 f101 	lsl.w	r1, r3, r1
     afa:	6201      	str	r1, [r0, #32]

       return CM3DS_MPS2_GPIO->INTENSET;
     afc:	6a00      	ldr	r0, [r0, #32]
 }
     afe:	4770      	bx	lr

00000b00 <CM3DS_MPS2_gpio_ClrIntEnable>:
 * @brief  Disables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

  uint32_t CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENCLR = (1 << Num);
     b00:	2301      	movs	r3, #1
     b02:	fa03 f101 	lsl.w	r1, r3, r1
     b06:	6241      	str	r1, [r0, #36]	; 0x24

       return CM3DS_MPS2_GPIO->INTENCLR;
     b08:	6a40      	ldr	r0, [r0, #36]	; 0x24
 }
     b0a:	4770      	bx	lr

00000b0c <CM3DS_MPS2_gpio_SetIntHighLevel>:
 * @brief  Changes the interrupt type for the specified pin to a high level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num); /* Clear INT TYPE bit */
     b0c:	2301      	movs	r3, #1
     b0e:	fa03 f101 	lsl.w	r1, r3, r1
     b12:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     b14:	6301      	str	r1, [r0, #48]	; 0x30
 }
     b16:	4770      	bx	lr

00000b18 <CM3DS_MPS2_gpio_SetIntRisingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a rising edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num); /* Set INT TYPE bit */
     b18:	2301      	movs	r3, #1
     b1a:	fa03 f101 	lsl.w	r1, r3, r1
     b1e:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     b20:	6301      	str	r1, [r0, #48]	; 0x30
 }
     b22:	4770      	bx	lr

00000b24 <CM3DS_MPS2_gpio_SetIntLowLevel>:
 * @brief  Changes the interrupt type for the specified pin to a low level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num);  /* Clear INT TYPE bit */
     b24:	2301      	movs	r3, #1
     b26:	fa03 f101 	lsl.w	r1, r3, r1
     b2a:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     b2c:	6341      	str	r1, [r0, #52]	; 0x34
 }
     b2e:	4770      	bx	lr

00000b30 <CM3DS_MPS2_gpio_SetIntFallingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a falling edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num);  /* Set INT TYPE bit */
     b30:	2301      	movs	r3, #1
     b32:	fa03 f101 	lsl.w	r1, r3, r1
     b36:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     b38:	6341      	str	r1, [r0, #52]	; 0x34
 }
     b3a:	4770      	bx	lr

00000b3c <CM3DS_MPS2_gpio_MaskedWrite>:
 * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
 */

 void CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t value, uint32_t mask)
 {
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b3c:	b2d3      	uxtb	r3, r2
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b42:	f503 7380 	add.w	r3, r3, #256	; 0x100
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b46:	f502 7200 	add.w	r2, r2, #512	; 0x200
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b4a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b4e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 }
     b52:	4770      	bx	lr

00000b54 <CM3DS_MPS2_i2s_config>:
                uint32_t rx_enable, uint32_t rx_int_enable, uint32_t rx_waterlevel)
 {
   uint32_t i2s_control_val;
   // TX water level range from 3 to 0
   // Generate IRQ if TX Fifo space > TX water level
   if (tx_waterlevel > 3) return 1; // Error if out of range
     b54:	2b03      	cmp	r3, #3
     b56:	d820      	bhi.n	b9a <CM3DS_MPS2_i2s_config+0x46>
 {
     b58:	b410      	push	{r4}
   // RX water level range from 4 to 1
   // Generate IRQ if RX Fifo space < RX water level
   if ((rx_waterlevel > 4)||(rx_waterlevel == 0)) return 1; // Error if out of range
     b5a:	9c03      	ldr	r4, [sp, #12]
     b5c:	3c01      	subs	r4, #1
     b5e:	2c03      	cmp	r4, #3
     b60:	d818      	bhi.n	b94 <CM3DS_MPS2_i2s_config+0x40>
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
                      (tx_waterlevel << CM3DS_MPS2_I2S_CONTROL_TXWLVL_Pos) |
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
                  (tx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXEN_Pos;
     b62:	f001 0401 	and.w	r4, r1, #1
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     b66:	9901      	ldr	r1, [sp, #4]
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
     b68:	0052      	lsls	r2, r2, #1
     b6a:	f002 0202 	and.w	r2, r2, #2
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     b6e:	0089      	lsls	r1, r1, #2
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b70:	4322      	orrs	r2, r4
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     b72:	f001 0104 	and.w	r1, r1, #4
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b76:	430a      	orrs	r2, r1
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     b78:	9902      	ldr	r1, [sp, #8]
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b7a:	9c03      	ldr	r4, [sp, #12]
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     b7c:	00c9      	lsls	r1, r1, #3
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b7e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     b82:	f001 0108 	and.w	r1, r1, #8
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b86:	430a      	orrs	r2, r1
     b88:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

   pI2S->CONTROL  = i2s_control_val;
     b8c:	6003      	str	r3, [r0, #0]
   return 0;
 }
     b8e:	bc10      	pop	{r4}
   return 0;
     b90:	2000      	movs	r0, #0
 }
     b92:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     b94:	2001      	movs	r0, #1
 }
     b96:	bc10      	pop	{r4}
     b98:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     b9a:	2001      	movs	r0, #1
 }
     b9c:	4770      	bx	lr
     b9e:	bf00      	nop

00000ba0 <CM3DS_MPS2_i2s_tx_fifo_empty>:

 int CM3DS_MPS2_i2s_tx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_TXEmpty_Pos;
     ba0:	6840      	ldr	r0, [r0, #4]
   }
     ba2:	f3c0 0080 	ubfx	r0, r0, #2, #1
     ba6:	4770      	bx	lr

00000ba8 <CM3DS_MPS2_i2s_tx_fifo_full>:

 int CM3DS_MPS2_i2s_tx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXFull_Pos;
     ba8:	6840      	ldr	r0, [r0, #4]
   }
     baa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     bae:	4770      	bx	lr

00000bb0 <CM3DS_MPS2_i2s_rx_fifo_empty>:

 int CM3DS_MPS2_i2s_rx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_RXEmpty_Pos;
     bb0:	6840      	ldr	r0, [r0, #4]
   }
     bb2:	f3c0 1000 	ubfx	r0, r0, #4, #1
     bb6:	4770      	bx	lr

00000bb8 <CM3DS_MPS2_i2s_rx_fifo_full>:

 int CM3DS_MPS2_i2s_rx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXFull_Pos;
     bb8:	6840      	ldr	r0, [r0, #4]
   }
     bba:	f3c0 1040 	ubfx	r0, r0, #5, #1
     bbe:	4770      	bx	lr

00000bc0 <CM3DS_MPS2_i2s_rx_irq_alert>:

 int CM3DS_MPS2_i2s_rx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXIRQ_Pos;
     bc0:	6840      	ldr	r0, [r0, #4]
   }
     bc2:	f3c0 0040 	ubfx	r0, r0, #1, #1
     bc6:	4770      	bx	lr

00000bc8 <CM3DS_MPS2_i2s_tx_irq_alert>:

 int CM3DS_MPS2_i2s_tx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXIRQ_Pos;
     bc8:	6840      	ldr	r0, [r0, #4]
   }
     bca:	f000 0001 	and.w	r0, r0, #1
     bce:	4770      	bx	lr

00000bd0 <CM3DS_MPS2_i2s_tx_stop>:

 int CM3DS_MPS2_i2s_tx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     bd0:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     bd2:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     bd4:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     bd6:	f023 0301 	bic.w	r3, r3, #1
     bda:	6013      	str	r3, [r2, #0]
   }
     bdc:	4770      	bx	lr
     bde:	bf00      	nop

00000be0 <CM3DS_MPS2_i2s_rx_stop>:

 int CM3DS_MPS2_i2s_rx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     be0:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     be2:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     be4:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     be6:	f023 0304 	bic.w	r3, r3, #4
     bea:	6013      	str	r3, [r2, #0]
   }
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <CM3DS_MPS2_i2s_get_tx_error>:

 int CM3DS_MPS2_i2s_get_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_TXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_TXERR_Pos);
     bf0:	6880      	ldr	r0, [r0, #8]
   }
     bf2:	f000 0001 	and.w	r0, r0, #1
     bf6:	4770      	bx	lr

00000bf8 <CM3DS_MPS2_i2s_get_rx_error>:

 int CM3DS_MPS2_i2s_get_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_RXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_RXERR_Pos);
     bf8:	6880      	ldr	r0, [r0, #8]
   }
     bfa:	f3c0 0040 	ubfx	r0, r0, #1, #1
     bfe:	4770      	bx	lr

00000c00 <CM3DS_MPS2_i2s_clear_tx_error>:

 void CM3DS_MPS2_i2s_clear_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_TXERR_Msk;
     c00:	2301      	movs	r3, #1
     c02:	6083      	str	r3, [r0, #8]
   return;
   }
     c04:	4770      	bx	lr
     c06:	bf00      	nop

00000c08 <CM3DS_MPS2_i2s_clear_rx_error>:

 void CM3DS_MPS2_i2s_clear_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_RXERR_Msk;
     c08:	2302      	movs	r3, #2
     c0a:	6083      	str	r3, [r0, #8]
   return;;
   }
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop

00000c10 <CM3DS_MPS2_i2s_fifo_reset>:

 void CM3DS_MPS2_i2s_fifo_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     c10:	6803      	ldr	r3, [r0, #0]
     c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     c16:	6003      	str	r3, [r0, #0]
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     c18:	6803      	ldr	r3, [r0, #0]
     c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     c1e:	6003      	str	r3, [r0, #0]
   return;
   }
     c20:	4770      	bx	lr
     c22:	bf00      	nop

00000c24 <CM3DS_MPS2_i2s_codec_reset>:

 void CM3DS_MPS2_i2s_codec_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   int i;
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     c24:	6803      	ldr	r3, [r0, #0]
     c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c2a:	6003      	str	r3, [r0, #0]
  __ASM volatile ("nop");
     c2c:	bf00      	nop
     c2e:	bf00      	nop
     c30:	bf00      	nop
     c32:	bf00      	nop
     c34:	bf00      	nop
     c36:	bf00      	nop
   for (i=0;i<6;i++) { // delay loop
     __NOP();
     }
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     c38:	6803      	ldr	r3, [r0, #0]
     c3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
     c3e:	6003      	str	r3, [r0, #0]
   return;
   }
     c40:	4770      	bx	lr
     c42:	bf00      	nop

00000c44 <CM3DS_MPS2_i2s_speed_config>:

 int CM3DS_MPS2_i2s_speed_config(CM3DS_MPS2_I2S_TypeDef *pI2S, uint32_t divide_ratio){
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     c44:	f240 33ed 	movw	r3, #1005	; 0x3ed
     c48:	f1a1 0212 	sub.w	r2, r1, #18
     c4c:	429a      	cmp	r2, r3
   if (divide_ratio > 0x3FF) return 1; // Error: Divide ratio too large (only 10 bits)

   pI2S->DIVIDE = divide_ratio;
     c4e:	bf9a      	itte	ls
     c50:	60c1      	strls	r1, [r0, #12]
   return 0;
     c52:	2000      	movls	r0, #0
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     c54:	2001      	movhi	r0, #1
   }
     c56:	4770      	bx	lr

00000c58 <CM3DS_MPS2_i2c_send_byte>:
 {
     int loop;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c58:	2201      	movs	r2, #1
     c5a:	4b2e      	ldr	r3, [pc, #184]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     c5c:	605a      	str	r2, [r3, #4]
         // apSleepus(1);
         if (c & (1 << (7 - loop)))
     c5e:	09c2      	lsrs	r2, r0, #7
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c60:	f04f 0202 	mov.w	r2, #2
         else
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c64:	bf0c      	ite	eq
     c66:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c68:	601a      	strne	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c6a:	2201      	movs	r2, #1
     c6c:	4b29      	ldr	r3, [pc, #164]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c6e:	0641      	lsls	r1, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c70:	601a      	str	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c72:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c74:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c76:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c7a:	bf54      	ite	pl
     c7c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c7e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c80:	2201      	movs	r2, #1
     c82:	4b24      	ldr	r3, [pc, #144]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c84:	0681      	lsls	r1, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c86:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c88:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c8a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c8c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c90:	bf54      	ite	pl
     c92:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c94:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c96:	2201      	movs	r2, #1
     c98:	4b1e      	ldr	r3, [pc, #120]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c9a:	06c1      	lsls	r1, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c9c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c9e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ca0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ca2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ca6:	bf54      	ite	pl
     ca8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     caa:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cac:	2201      	movs	r2, #1
     cae:	4b19      	ldr	r3, [pc, #100]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cb0:	0701      	lsls	r1, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cb2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cb4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cb6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cb8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cbc:	bf54      	ite	pl
     cbe:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cc0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cc2:	2201      	movs	r2, #1
     cc4:	4b13      	ldr	r3, [pc, #76]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cc6:	0741      	lsls	r1, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cc8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cca:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ccc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cce:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cd2:	bf54      	ite	pl
     cd4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cd6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cd8:	2201      	movs	r2, #1
     cda:	4b0e      	ldr	r3, [pc, #56]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cdc:	0781      	lsls	r1, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cde:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ce0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ce2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ce4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ce8:	bf54      	ite	pl
     cea:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cec:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cee:	2201      	movs	r2, #1
     cf0:	4b08      	ldr	r3, [pc, #32]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cf2:	07c1      	lsls	r1, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cf4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cfa:	f04f 0202 	mov.w	r2, #2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cfe:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d02:	bf4c      	ite	mi
     d04:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d06:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     d08:	2201      	movs	r2, #1
     d0a:	4b02      	ldr	r3, [pc, #8]	; (d14 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     d0c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d0e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d10:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
 }
     d12:	4770      	bx	lr
     d14:	40023000 	.word	0x40023000

00000d18 <CM3DS_MPS2_i2c_receive_byte>:
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     data         = 0;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d18:	2201      	movs	r2, #1
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d1a:	2103      	movs	r1, #3
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     d1c:	2002      	movs	r0, #2
     d1e:	4b2c      	ldr	r3, [pc, #176]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     d20:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d22:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d24:	6019      	str	r1, [r3, #0]
         // apSleepus(1);
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d26:	6818      	ldr	r0, [r3, #0]
             data += (1 << (7 - loop));
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d28:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d2a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d2c:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d2e:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d30:	2103      	movs	r1, #3
     data         = 0;
     d32:	f010 0f02 	tst.w	r0, #2
     d36:	bf14      	ite	ne
     d38:	2080      	movne	r0, #128	; 0x80
     d3a:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d40:	4b23      	ldr	r3, [pc, #140]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d42:	bf48      	it	mi
     d44:	3040      	addmi	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d46:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d48:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d4a:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d4c:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d4e:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d50:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d52:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d56:	4b1e      	ldr	r3, [pc, #120]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d58:	bf48      	it	mi
     d5a:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d5c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d5e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d60:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d62:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d64:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d66:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d68:	f04f 0201 	mov.w	r2, #1
     d6c:	4b18      	ldr	r3, [pc, #96]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d6e:	bf48      	it	mi
     d70:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d72:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d74:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d76:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d78:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d7a:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d80:	4b13      	ldr	r3, [pc, #76]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d82:	bf48      	it	mi
     d84:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d86:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d88:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d8a:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d8c:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d8e:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d90:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d92:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d96:	4b0e      	ldr	r3, [pc, #56]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d98:	bf48      	it	mi
     d9a:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d9c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d9e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     da0:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     da2:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     da4:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     da6:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     da8:	f04f 0201 	mov.w	r2, #1
     dac:	4b08      	ldr	r3, [pc, #32]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     dae:	bf48      	it	mi
     db0:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     db2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     db4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     db6:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     db8:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dba:	2101      	movs	r1, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     dbc:	079b      	lsls	r3, r3, #30
             data += (1 << (7 - loop));
     dbe:	bf48      	it	mi
     dc0:	1880      	addmi	r0, r0, r2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     dc2:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc4:	4b02      	ldr	r3, [pc, #8]	; (dd0 <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     // apSleepus(1);

     return data;
 }
     dc6:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc8:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     dca:	605a      	str	r2, [r3, #4]
 }
     dcc:	4770      	bx	lr
     dce:	bf00      	nop
     dd0:	40023000 	.word	0x40023000

00000dd4 <CM3DS_MPS2_i2c_receive_ack>:
     int nack;

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dd4:	2201      	movs	r2, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dd6:	2102      	movs	r1, #2
     dd8:	4b06      	ldr	r3, [pc, #24]	; (df4 <CM3DS_MPS2_i2c_receive_ack+0x20>)
     dda:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ddc:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     dde:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     de0:	6818      	ldr	r0, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     de2:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     if(nack==0)
     de4:	f010 0f02 	tst.w	r0, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     de8:	6019      	str	r1, [r3, #0]
         return 1;

     return 0;
 }
     dea:	bf0c      	ite	eq
     dec:	4610      	moveq	r0, r2
     dee:	2000      	movne	r0, #0
     df0:	4770      	bx	lr
     df2:	bf00      	nop
     df4:	40023000 	.word	0x40023000

00000df8 <CM3DS_MPS2_i2c_send_ack>:

 // Write the acknowledge bit
 void CM3DS_MPS2_i2c_send_ack(void)
 {
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     df8:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dfa:	2102      	movs	r1, #2
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dfc:	4b03      	ldr	r3, [pc, #12]	; (e0c <CM3DS_MPS2_i2c_send_ack+0x14>)
     dfe:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e00:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e02:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e04:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e06:	6059      	str	r1, [r3, #4]
     // apSleepus(1);
 }
     e08:	4770      	bx	lr
     e0a:	bf00      	nop
     e0c:	40023000 	.word	0x40023000

00000e10 <CM3DS_MPS2_i2c_read>:

 // Write data stream and read one byte
 unsigned char CM3DS_MPS2_i2c_read(unsigned char reg_addr, unsigned char sadr)
 {
     e10:	b430      	push	{r4, r5}

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e12:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e14:	2401      	movs	r4, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     e16:	2503      	movs	r5, #3
     e18:	4b91      	ldr	r3, [pc, #580]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
     e1a:	601d      	str	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e1c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e1e:	605c      	str	r4, [r3, #4]
         if (c & (1 << (7 - loop)))
     e20:	09cc      	lsrs	r4, r1, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e22:	bf0c      	ite	eq
     e24:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e26:	601a      	strne	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e28:	2201      	movs	r2, #1
     e2a:	4b8d      	ldr	r3, [pc, #564]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e2c:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e2e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e30:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e32:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e34:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e38:	bf54      	ite	pl
     e3a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e3c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e3e:	2201      	movs	r2, #1
     e40:	4b87      	ldr	r3, [pc, #540]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e42:	068d      	lsls	r5, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e44:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e46:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e48:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e4a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e4e:	bf54      	ite	pl
     e50:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e52:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e54:	2201      	movs	r2, #1
     e56:	4b82      	ldr	r3, [pc, #520]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e58:	06cc      	lsls	r4, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e5a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e5c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e5e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e60:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e64:	bf54      	ite	pl
     e66:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e68:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e6a:	2201      	movs	r2, #1
     e6c:	4b7c      	ldr	r3, [pc, #496]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e6e:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e70:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e72:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e74:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e76:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e7a:	bf54      	ite	pl
     e7c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e7e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e80:	2201      	movs	r2, #1
     e82:	4b77      	ldr	r3, [pc, #476]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e84:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e86:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e88:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e8a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e8c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e90:	bf54      	ite	pl
     e92:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e94:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e96:	2201      	movs	r2, #1
     e98:	4b71      	ldr	r3, [pc, #452]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e9a:	078d      	lsls	r5, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e9c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e9e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ea0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ea2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ea6:	bf54      	ite	pl
     ea8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eaa:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eac:	2201      	movs	r2, #1
     eae:	4b6c      	ldr	r3, [pc, #432]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     eb0:	07cc      	lsls	r4, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eb2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eb4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eb6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eb8:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ebc:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ec0:	bf4c      	ite	mi
     ec2:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ec4:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ec6:	2201      	movs	r2, #1
     ec8:	4b65      	ldr	r3, [pc, #404]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
     eca:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ecc:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ece:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ed0:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed2:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ed4:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     ed6:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed8:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eda:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     edc:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     ede:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ee0:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ee4:	bf0c      	ite	eq
     ee6:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ee8:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eea:	4b5d      	ldr	r3, [pc, #372]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     eec:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eee:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ef0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ef2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ef8:	bf54      	ite	pl
     efa:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     efc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     efe:	2201      	movs	r2, #1
     f00:	4b57      	ldr	r3, [pc, #348]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f02:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f04:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f06:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f08:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f0a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f0e:	bf54      	ite	pl
     f10:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f12:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f14:	2201      	movs	r2, #1
     f16:	4b52      	ldr	r3, [pc, #328]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f18:	06c5      	lsls	r5, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f1a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f1c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f1e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f20:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f24:	bf54      	ite	pl
     f26:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f28:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f2a:	2201      	movs	r2, #1
     f2c:	4b4c      	ldr	r3, [pc, #304]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f2e:	0704      	lsls	r4, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f30:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f32:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f34:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f36:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f3a:	bf54      	ite	pl
     f3c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f3e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f40:	2201      	movs	r2, #1
     f42:	4b47      	ldr	r3, [pc, #284]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f44:	0745      	lsls	r5, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f46:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f48:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f4a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f4c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f50:	bf54      	ite	pl
     f52:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f54:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f56:	2201      	movs	r2, #1
     f58:	4b41      	ldr	r3, [pc, #260]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f5a:	0784      	lsls	r4, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f5c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f60:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f62:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f66:	bf54      	ite	pl
     f68:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f6a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f6c:	2201      	movs	r2, #1
     f6e:	4b3c      	ldr	r3, [pc, #240]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f70:	07c0      	lsls	r0, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f72:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f74:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f76:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f78:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f7c:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f80:	bf4c      	ite	mi
     f82:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f84:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f86:	2201      	movs	r2, #1
     CM3DS_MPS2_i2c_send_byte(reg_addr);
     CM3DS_MPS2_i2c_receive_ack();

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     f88:	2403      	movs	r4, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f8a:	4b35      	ldr	r3, [pc, #212]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
     f8c:	4311      	orrs	r1, r2
     f8e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f90:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f92:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f94:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f96:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f98:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     f9a:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f9c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f9e:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     fa0:	601c      	str	r4, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fa2:	6058      	str	r0, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fa4:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     fa6:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fa8:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fac:	bf0c      	ite	eq
     fae:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fb0:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fb2:	4b2b      	ldr	r3, [pc, #172]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fb4:	064d      	lsls	r5, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fb6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fba:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fbc:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fc0:	bf54      	ite	pl
     fc2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fc4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fc6:	2201      	movs	r2, #1
     fc8:	4b25      	ldr	r3, [pc, #148]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fca:	068c      	lsls	r4, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fcc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fce:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fd0:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fd2:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fd6:	bf54      	ite	pl
     fd8:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fda:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fdc:	2201      	movs	r2, #1
     fde:	4b20      	ldr	r3, [pc, #128]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fe0:	06c8      	lsls	r0, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fe2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fe6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fe8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fec:	bf54      	ite	pl
     fee:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ff0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ff2:	2201      	movs	r2, #1
     ff4:	4b1a      	ldr	r3, [pc, #104]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     ff6:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ff8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ffa:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ffc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ffe:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1002:	bf54      	ite	pl
    1004:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1006:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1008:	2201      	movs	r2, #1
    100a:	4b15      	ldr	r3, [pc, #84]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    100c:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    100e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1010:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1012:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1014:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1018:	bf54      	ite	pl
    101a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    101c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    101e:	2201      	movs	r2, #1
    1020:	4b0f      	ldr	r3, [pc, #60]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
    1022:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1024:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1026:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1028:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    102a:	f04f 0202 	mov.w	r2, #2
    102e:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1032:	bf54      	ite	pl
    1034:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1036:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1038:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    103a:	2003      	movs	r0, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    103c:	4b08      	ldr	r3, [pc, #32]	; (1060 <CM3DS_MPS2_i2c_read+0x250>)
    103e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1040:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1042:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1044:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1046:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1048:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    104a:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    104c:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    104e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1050:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1052:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1054:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1056:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1058:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    105a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    105c:	6018      	str	r0, [r3, #0]
    105e:	e001      	b.n	1064 <CM3DS_MPS2_i2c_read+0x254>
    1060:	40023000 	.word	0x40023000
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1064:	6819      	ldr	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1066:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1068:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    106a:	6018      	str	r0, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    106c:	681b      	ldr	r3, [r3, #0]
     data         = 0;
    106e:	f011 0f02 	tst.w	r1, #2
    1072:	bf14      	ite	ne
    1074:	2080      	movne	r0, #128	; 0x80
    1076:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1078:	079b      	lsls	r3, r3, #30
    107a:	d500      	bpl.n	107e <CM3DS_MPS2_i2c_read+0x26e>
             data += (1 << (7 - loop));
    107c:	3040      	adds	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    107e:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1080:	2103      	movs	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1082:	4b27      	ldr	r3, [pc, #156]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
    1084:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1086:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1088:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    108a:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    108c:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    108e:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1090:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1094:	4b22      	ldr	r3, [pc, #136]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1096:	bf48      	it	mi
    1098:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    109a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    109c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    109e:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10a0:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10a2:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10a4:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a6:	f04f 0201 	mov.w	r2, #1
    10aa:	4b1d      	ldr	r3, [pc, #116]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10ac:	bf48      	it	mi
    10ae:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10b4:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b6:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10b8:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10be:	4b18      	ldr	r3, [pc, #96]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10c0:	bf48      	it	mi
    10c2:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10c4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10c6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10c8:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ca:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10cc:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10ce:	681b      	ldr	r3, [r3, #0]
    10d0:	079d      	lsls	r5, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d2:	4b13      	ldr	r3, [pc, #76]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10d4:	bf48      	it	mi
    10d6:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10da:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10dc:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10de:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10e0:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	079c      	lsls	r4, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e6:	4b0e      	ldr	r3, [pc, #56]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10e8:	bf48      	it	mi
    10ea:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ec:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10f0:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10f2:	681b      	ldr	r3, [r3, #0]
    10f4:	0799      	lsls	r1, r3, #30
    10f6:	d500      	bpl.n	10fa <CM3DS_MPS2_i2c_read+0x2ea>
             data += (1 << (7 - loop));
    10f8:	4410      	add	r0, r2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10fa:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);

     return rxdata;
 }
    10fc:	bc30      	pop	{r4, r5}
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10fe:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1100:	4b07      	ldr	r3, [pc, #28]	; (1120 <CM3DS_MPS2_i2c_read+0x310>)
     return rxdata;
    1102:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1104:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1106:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1108:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    110a:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    110c:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    110e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1110:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1112:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1114:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1116:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1118:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    111a:	6019      	str	r1, [r3, #0]
 }
    111c:	4770      	bx	lr
    111e:	bf00      	nop
    1120:	40023000 	.word	0x40023000

00001124 <CM3DS_MPS2_i2c_write>:

 // Write data stream and write one byte
 void CM3DS_MPS2_i2c_write(unsigned char reg_addr, unsigned char data_byte, unsigned char sadr)
 {
    1124:	b470      	push	{r4, r5, r6}
     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    1126:	2603      	movs	r6, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1128:	2501      	movs	r5, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    112a:	2402      	movs	r4, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    112c:	4b90      	ldr	r3, [pc, #576]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
    112e:	601e      	str	r6, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1130:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1132:	605d      	str	r5, [r3, #4]
         if (c & (1 << (7 - loop)))
    1134:	09d5      	lsrs	r5, r2, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1136:	bf0c      	ite	eq
    1138:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    113a:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    113c:	2401      	movs	r4, #1
    113e:	4b8c      	ldr	r3, [pc, #560]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1140:	0655      	lsls	r5, r2, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1142:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1144:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1146:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1148:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    114c:	bf54      	ite	pl
    114e:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1150:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1152:	2401      	movs	r4, #1
    1154:	4b86      	ldr	r3, [pc, #536]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1156:	0696      	lsls	r6, r2, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1158:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    115a:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    115c:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    115e:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1162:	bf54      	ite	pl
    1164:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1166:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1168:	2401      	movs	r4, #1
    116a:	4b81      	ldr	r3, [pc, #516]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    116c:	06d5      	lsls	r5, r2, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    116e:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1170:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1172:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1174:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1178:	bf54      	ite	pl
    117a:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    117c:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    117e:	2401      	movs	r4, #1
    1180:	4b7b      	ldr	r3, [pc, #492]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1182:	0716      	lsls	r6, r2, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1184:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1186:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1188:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    118a:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    118e:	bf54      	ite	pl
    1190:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1192:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1194:	2401      	movs	r4, #1
    1196:	4b76      	ldr	r3, [pc, #472]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1198:	0755      	lsls	r5, r2, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    119a:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    119c:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    119e:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11a0:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11a4:	bf54      	ite	pl
    11a6:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11a8:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11aa:	2401      	movs	r4, #1
    11ac:	4b70      	ldr	r3, [pc, #448]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11ae:	0796      	lsls	r6, r2, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11b0:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11b2:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11b4:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11b6:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11ba:	bf54      	ite	pl
    11bc:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11be:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11c0:	2401      	movs	r4, #1
         if (c & (1 << (7 - loop)))
    11c2:	f012 0f01 	tst.w	r2, #1
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11c6:	f04f 0202 	mov.w	r2, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ca:	4b69      	ldr	r3, [pc, #420]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
    11cc:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11ce:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11d0:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11d2:	bf14      	ite	ne
    11d4:	601a      	strne	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11d6:	605a      	streq	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11d8:	2402      	movs	r4, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11da:	2201      	movs	r2, #1
    11dc:	4b64      	ldr	r3, [pc, #400]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
    11de:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11e2:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11e4:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e6:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11e8:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    11ea:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11ec:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ee:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11f0:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    11f2:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11f4:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11f8:	bf0c      	ite	eq
    11fa:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11fc:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11fe:	4b5c      	ldr	r3, [pc, #368]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1200:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1202:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1204:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1206:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1208:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    120c:	bf54      	ite	pl
    120e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1210:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1212:	2201      	movs	r2, #1
    1214:	4b56      	ldr	r3, [pc, #344]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1216:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1218:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    121a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    121c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    121e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1222:	bf54      	ite	pl
    1224:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1226:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1228:	2201      	movs	r2, #1
    122a:	4b51      	ldr	r3, [pc, #324]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    122c:	06c6      	lsls	r6, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    122e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1230:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1232:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1234:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1238:	bf54      	ite	pl
    123a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    123c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    123e:	2201      	movs	r2, #1
    1240:	4b4b      	ldr	r3, [pc, #300]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1242:	0705      	lsls	r5, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1244:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1246:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1248:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    124a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    124e:	bf54      	ite	pl
    1250:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1252:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1254:	2201      	movs	r2, #1
    1256:	4b46      	ldr	r3, [pc, #280]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1258:	0744      	lsls	r4, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    125a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    125c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    125e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1260:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1264:	bf54      	ite	pl
    1266:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1268:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    126a:	2201      	movs	r2, #1
    126c:	4b40      	ldr	r3, [pc, #256]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    126e:	0786      	lsls	r6, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1270:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1272:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1274:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1276:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    127a:	bf54      	ite	pl
    127c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    127e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1280:	2201      	movs	r2, #1
    1282:	4b3b      	ldr	r3, [pc, #236]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1284:	07c5      	lsls	r5, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1286:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1288:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    128a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    128c:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1290:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1294:	bf4c      	ite	mi
    1296:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1298:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    129a:	2201      	movs	r2, #1
    129c:	4b34      	ldr	r3, [pc, #208]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
    129e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12a0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12a2:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12a4:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12a6:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12a8:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    12aa:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ac:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12ae:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12b0:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    12b2:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12b4:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12b8:	bf0c      	ite	eq
    12ba:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12bc:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12be:	4b2c      	ldr	r3, [pc, #176]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12c0:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12c2:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12c4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12c6:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12c8:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12cc:	bf54      	ite	pl
    12ce:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12d0:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12d2:	2201      	movs	r2, #1
    12d4:	4b26      	ldr	r3, [pc, #152]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12d6:	0688      	lsls	r0, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12d8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12da:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12dc:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12de:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12e2:	bf54      	ite	pl
    12e4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12e6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12e8:	2201      	movs	r2, #1
    12ea:	4b21      	ldr	r3, [pc, #132]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12ec:	06ce      	lsls	r6, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ee:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12f0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12f2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12f4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12f8:	bf54      	ite	pl
    12fa:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12fc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12fe:	2201      	movs	r2, #1
    1300:	4b1b      	ldr	r3, [pc, #108]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1302:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1304:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1306:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1308:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    130a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    130e:	bf54      	ite	pl
    1310:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1312:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1314:	2201      	movs	r2, #1
    1316:	4b16      	ldr	r3, [pc, #88]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1318:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    131a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    131c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    131e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1320:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1324:	bf54      	ite	pl
    1326:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1328:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    132a:	2201      	movs	r2, #1
    132c:	4b10      	ldr	r3, [pc, #64]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    132e:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1330:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1332:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1334:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1336:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    133a:	bf54      	ite	pl
    133c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    133e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1340:	2201      	movs	r2, #1
    1342:	4b0b      	ldr	r3, [pc, #44]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1344:	07c9      	lsls	r1, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1346:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1348:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    134a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    134c:	f04f 0202 	mov.w	r2, #2
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
 }
    1350:	bc70      	pop	{r4, r5, r6}
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1352:	bf4c      	ite	mi
    1354:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1356:	605a      	strpl	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1358:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    135a:	2201      	movs	r2, #1
    135c:	4b04      	ldr	r3, [pc, #16]	; (1370 <CM3DS_MPS2_i2c_write+0x24c>)
    135e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1360:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1362:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1364:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1366:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1368:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    136a:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    136c:	6019      	str	r1, [r3, #0]
 }
    136e:	4770      	bx	lr
    1370:	40023000 	.word	0x40023000

00001374 <SystemCoreClockUpdate>:
    1374:	4b01      	ldr	r3, [pc, #4]	; (137c <SystemCoreClockUpdate+0x8>)
    1376:	4a02      	ldr	r2, [pc, #8]	; (1380 <SystemCoreClockUpdate+0xc>)
    1378:	601a      	str	r2, [r3, #0]
    137a:	4770      	bx	lr
    137c:	20000000 	.word	0x20000000
    1380:	017d7840 	.word	0x017d7840

00001384 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    1384:	4b01      	ldr	r3, [pc, #4]	; (138c <SystemInit+0x8>)
    1386:	4a02      	ldr	r2, [pc, #8]	; (1390 <SystemInit+0xc>)
    1388:	601a      	str	r2, [r3, #0]

}
    138a:	4770      	bx	lr
    138c:	20000000 	.word	0x20000000
    1390:	017d7840 	.word	0x017d7840

00001394 <exit>:
    1394:	b508      	push	{r3, lr}
    1396:	4b07      	ldr	r3, [pc, #28]	; (13b4 <exit+0x20>)
    1398:	4604      	mov	r4, r0
    139a:	b113      	cbz	r3, 13a2 <exit+0xe>
    139c:	2100      	movs	r1, #0
    139e:	f3af 8000 	nop.w
    13a2:	4b05      	ldr	r3, [pc, #20]	; (13b8 <exit+0x24>)
    13a4:	6818      	ldr	r0, [r3, #0]
    13a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    13a8:	b103      	cbz	r3, 13ac <exit+0x18>
    13aa:	4798      	blx	r3
    13ac:	4620      	mov	r0, r4
    13ae:	f000 ff93 	bl	22d8 <_exit>
    13b2:	bf00      	nop
    13b4:	00000000 	.word	0x00000000
    13b8:	000027b8 	.word	0x000027b8

000013bc <memset>:
    13bc:	4603      	mov	r3, r0
    13be:	4402      	add	r2, r0
    13c0:	4293      	cmp	r3, r2
    13c2:	d100      	bne.n	13c6 <memset+0xa>
    13c4:	4770      	bx	lr
    13c6:	f803 1b01 	strb.w	r1, [r3], #1
    13ca:	e7f9      	b.n	13c0 <memset+0x4>

000013cc <iprintf>:
    13cc:	b40f      	push	{r0, r1, r2, r3}
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <iprintf+0x2c>)
    13d0:	b513      	push	{r0, r1, r4, lr}
    13d2:	681c      	ldr	r4, [r3, #0]
    13d4:	b124      	cbz	r4, 13e0 <iprintf+0x14>
    13d6:	69a3      	ldr	r3, [r4, #24]
    13d8:	b913      	cbnz	r3, 13e0 <iprintf+0x14>
    13da:	4620      	mov	r0, r4
    13dc:	f000 fa22 	bl	1824 <__sinit>
    13e0:	ab05      	add	r3, sp, #20
    13e2:	9a04      	ldr	r2, [sp, #16]
    13e4:	68a1      	ldr	r1, [r4, #8]
    13e6:	4620      	mov	r0, r4
    13e8:	9301      	str	r3, [sp, #4]
    13ea:	f000 fbd7 	bl	1b9c <_vfiprintf_r>
    13ee:	b002      	add	sp, #8
    13f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    13f4:	b004      	add	sp, #16
    13f6:	4770      	bx	lr
    13f8:	20000004 	.word	0x20000004

000013fc <_puts_r>:
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	460e      	mov	r6, r1
    1400:	4605      	mov	r5, r0
    1402:	b118      	cbz	r0, 140c <_puts_r+0x10>
    1404:	6983      	ldr	r3, [r0, #24]
    1406:	b90b      	cbnz	r3, 140c <_puts_r+0x10>
    1408:	f000 fa0c 	bl	1824 <__sinit>
    140c:	69ab      	ldr	r3, [r5, #24]
    140e:	68ac      	ldr	r4, [r5, #8]
    1410:	b913      	cbnz	r3, 1418 <_puts_r+0x1c>
    1412:	4628      	mov	r0, r5
    1414:	f000 fa06 	bl	1824 <__sinit>
    1418:	4b23      	ldr	r3, [pc, #140]	; (14a8 <_puts_r+0xac>)
    141a:	429c      	cmp	r4, r3
    141c:	d117      	bne.n	144e <_puts_r+0x52>
    141e:	686c      	ldr	r4, [r5, #4]
    1420:	89a3      	ldrh	r3, [r4, #12]
    1422:	071b      	lsls	r3, r3, #28
    1424:	d51d      	bpl.n	1462 <_puts_r+0x66>
    1426:	6923      	ldr	r3, [r4, #16]
    1428:	b1db      	cbz	r3, 1462 <_puts_r+0x66>
    142a:	3e01      	subs	r6, #1
    142c:	68a3      	ldr	r3, [r4, #8]
    142e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1432:	3b01      	subs	r3, #1
    1434:	60a3      	str	r3, [r4, #8]
    1436:	b9e9      	cbnz	r1, 1474 <_puts_r+0x78>
    1438:	2b00      	cmp	r3, #0
    143a:	da2e      	bge.n	149a <_puts_r+0x9e>
    143c:	4622      	mov	r2, r4
    143e:	210a      	movs	r1, #10
    1440:	4628      	mov	r0, r5
    1442:	f000 f83f 	bl	14c4 <__swbuf_r>
    1446:	3001      	adds	r0, #1
    1448:	d011      	beq.n	146e <_puts_r+0x72>
    144a:	200a      	movs	r0, #10
    144c:	e011      	b.n	1472 <_puts_r+0x76>
    144e:	4b17      	ldr	r3, [pc, #92]	; (14ac <_puts_r+0xb0>)
    1450:	429c      	cmp	r4, r3
    1452:	d101      	bne.n	1458 <_puts_r+0x5c>
    1454:	68ac      	ldr	r4, [r5, #8]
    1456:	e7e3      	b.n	1420 <_puts_r+0x24>
    1458:	4b15      	ldr	r3, [pc, #84]	; (14b0 <_puts_r+0xb4>)
    145a:	429c      	cmp	r4, r3
    145c:	bf08      	it	eq
    145e:	68ec      	ldreq	r4, [r5, #12]
    1460:	e7de      	b.n	1420 <_puts_r+0x24>
    1462:	4621      	mov	r1, r4
    1464:	4628      	mov	r0, r5
    1466:	f000 f87f 	bl	1568 <__swsetup_r>
    146a:	2800      	cmp	r0, #0
    146c:	d0dd      	beq.n	142a <_puts_r+0x2e>
    146e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1472:	bd70      	pop	{r4, r5, r6, pc}
    1474:	2b00      	cmp	r3, #0
    1476:	da04      	bge.n	1482 <_puts_r+0x86>
    1478:	69a2      	ldr	r2, [r4, #24]
    147a:	429a      	cmp	r2, r3
    147c:	dc06      	bgt.n	148c <_puts_r+0x90>
    147e:	290a      	cmp	r1, #10
    1480:	d004      	beq.n	148c <_puts_r+0x90>
    1482:	6823      	ldr	r3, [r4, #0]
    1484:	1c5a      	adds	r2, r3, #1
    1486:	6022      	str	r2, [r4, #0]
    1488:	7019      	strb	r1, [r3, #0]
    148a:	e7cf      	b.n	142c <_puts_r+0x30>
    148c:	4622      	mov	r2, r4
    148e:	4628      	mov	r0, r5
    1490:	f000 f818 	bl	14c4 <__swbuf_r>
    1494:	3001      	adds	r0, #1
    1496:	d1c9      	bne.n	142c <_puts_r+0x30>
    1498:	e7e9      	b.n	146e <_puts_r+0x72>
    149a:	200a      	movs	r0, #10
    149c:	6823      	ldr	r3, [r4, #0]
    149e:	1c5a      	adds	r2, r3, #1
    14a0:	6022      	str	r2, [r4, #0]
    14a2:	7018      	strb	r0, [r3, #0]
    14a4:	e7e5      	b.n	1472 <_puts_r+0x76>
    14a6:	bf00      	nop
    14a8:	000027dc 	.word	0x000027dc
    14ac:	000027fc 	.word	0x000027fc
    14b0:	000027bc 	.word	0x000027bc

000014b4 <puts>:
    14b4:	4b02      	ldr	r3, [pc, #8]	; (14c0 <puts+0xc>)
    14b6:	4601      	mov	r1, r0
    14b8:	6818      	ldr	r0, [r3, #0]
    14ba:	f7ff bf9f 	b.w	13fc <_puts_r>
    14be:	bf00      	nop
    14c0:	20000004 	.word	0x20000004

000014c4 <__swbuf_r>:
    14c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14c6:	460e      	mov	r6, r1
    14c8:	4614      	mov	r4, r2
    14ca:	4605      	mov	r5, r0
    14cc:	b118      	cbz	r0, 14d6 <__swbuf_r+0x12>
    14ce:	6983      	ldr	r3, [r0, #24]
    14d0:	b90b      	cbnz	r3, 14d6 <__swbuf_r+0x12>
    14d2:	f000 f9a7 	bl	1824 <__sinit>
    14d6:	4b21      	ldr	r3, [pc, #132]	; (155c <__swbuf_r+0x98>)
    14d8:	429c      	cmp	r4, r3
    14da:	d12a      	bne.n	1532 <__swbuf_r+0x6e>
    14dc:	686c      	ldr	r4, [r5, #4]
    14de:	69a3      	ldr	r3, [r4, #24]
    14e0:	60a3      	str	r3, [r4, #8]
    14e2:	89a3      	ldrh	r3, [r4, #12]
    14e4:	071a      	lsls	r2, r3, #28
    14e6:	d52e      	bpl.n	1546 <__swbuf_r+0x82>
    14e8:	6923      	ldr	r3, [r4, #16]
    14ea:	b363      	cbz	r3, 1546 <__swbuf_r+0x82>
    14ec:	6923      	ldr	r3, [r4, #16]
    14ee:	6820      	ldr	r0, [r4, #0]
    14f0:	b2f6      	uxtb	r6, r6
    14f2:	1ac0      	subs	r0, r0, r3
    14f4:	6963      	ldr	r3, [r4, #20]
    14f6:	4637      	mov	r7, r6
    14f8:	4283      	cmp	r3, r0
    14fa:	dc04      	bgt.n	1506 <__swbuf_r+0x42>
    14fc:	4621      	mov	r1, r4
    14fe:	4628      	mov	r0, r5
    1500:	f000 f926 	bl	1750 <_fflush_r>
    1504:	bb28      	cbnz	r0, 1552 <__swbuf_r+0x8e>
    1506:	68a3      	ldr	r3, [r4, #8]
    1508:	3001      	adds	r0, #1
    150a:	3b01      	subs	r3, #1
    150c:	60a3      	str	r3, [r4, #8]
    150e:	6823      	ldr	r3, [r4, #0]
    1510:	1c5a      	adds	r2, r3, #1
    1512:	6022      	str	r2, [r4, #0]
    1514:	701e      	strb	r6, [r3, #0]
    1516:	6963      	ldr	r3, [r4, #20]
    1518:	4283      	cmp	r3, r0
    151a:	d004      	beq.n	1526 <__swbuf_r+0x62>
    151c:	89a3      	ldrh	r3, [r4, #12]
    151e:	07db      	lsls	r3, r3, #31
    1520:	d519      	bpl.n	1556 <__swbuf_r+0x92>
    1522:	2e0a      	cmp	r6, #10
    1524:	d117      	bne.n	1556 <__swbuf_r+0x92>
    1526:	4621      	mov	r1, r4
    1528:	4628      	mov	r0, r5
    152a:	f000 f911 	bl	1750 <_fflush_r>
    152e:	b190      	cbz	r0, 1556 <__swbuf_r+0x92>
    1530:	e00f      	b.n	1552 <__swbuf_r+0x8e>
    1532:	4b0b      	ldr	r3, [pc, #44]	; (1560 <__swbuf_r+0x9c>)
    1534:	429c      	cmp	r4, r3
    1536:	d101      	bne.n	153c <__swbuf_r+0x78>
    1538:	68ac      	ldr	r4, [r5, #8]
    153a:	e7d0      	b.n	14de <__swbuf_r+0x1a>
    153c:	4b09      	ldr	r3, [pc, #36]	; (1564 <__swbuf_r+0xa0>)
    153e:	429c      	cmp	r4, r3
    1540:	bf08      	it	eq
    1542:	68ec      	ldreq	r4, [r5, #12]
    1544:	e7cb      	b.n	14de <__swbuf_r+0x1a>
    1546:	4621      	mov	r1, r4
    1548:	4628      	mov	r0, r5
    154a:	f000 f80d 	bl	1568 <__swsetup_r>
    154e:	2800      	cmp	r0, #0
    1550:	d0cc      	beq.n	14ec <__swbuf_r+0x28>
    1552:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1556:	4638      	mov	r0, r7
    1558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    155a:	bf00      	nop
    155c:	000027dc 	.word	0x000027dc
    1560:	000027fc 	.word	0x000027fc
    1564:	000027bc 	.word	0x000027bc

00001568 <__swsetup_r>:
    1568:	4b32      	ldr	r3, [pc, #200]	; (1634 <__swsetup_r+0xcc>)
    156a:	b570      	push	{r4, r5, r6, lr}
    156c:	681d      	ldr	r5, [r3, #0]
    156e:	4606      	mov	r6, r0
    1570:	460c      	mov	r4, r1
    1572:	b125      	cbz	r5, 157e <__swsetup_r+0x16>
    1574:	69ab      	ldr	r3, [r5, #24]
    1576:	b913      	cbnz	r3, 157e <__swsetup_r+0x16>
    1578:	4628      	mov	r0, r5
    157a:	f000 f953 	bl	1824 <__sinit>
    157e:	4b2e      	ldr	r3, [pc, #184]	; (1638 <__swsetup_r+0xd0>)
    1580:	429c      	cmp	r4, r3
    1582:	d10f      	bne.n	15a4 <__swsetup_r+0x3c>
    1584:	686c      	ldr	r4, [r5, #4]
    1586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    158a:	b29a      	uxth	r2, r3
    158c:	0715      	lsls	r5, r2, #28
    158e:	d42c      	bmi.n	15ea <__swsetup_r+0x82>
    1590:	06d0      	lsls	r0, r2, #27
    1592:	d411      	bmi.n	15b8 <__swsetup_r+0x50>
    1594:	2209      	movs	r2, #9
    1596:	6032      	str	r2, [r6, #0]
    1598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    159c:	81a3      	strh	r3, [r4, #12]
    159e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15a2:	e03e      	b.n	1622 <__swsetup_r+0xba>
    15a4:	4b25      	ldr	r3, [pc, #148]	; (163c <__swsetup_r+0xd4>)
    15a6:	429c      	cmp	r4, r3
    15a8:	d101      	bne.n	15ae <__swsetup_r+0x46>
    15aa:	68ac      	ldr	r4, [r5, #8]
    15ac:	e7eb      	b.n	1586 <__swsetup_r+0x1e>
    15ae:	4b24      	ldr	r3, [pc, #144]	; (1640 <__swsetup_r+0xd8>)
    15b0:	429c      	cmp	r4, r3
    15b2:	bf08      	it	eq
    15b4:	68ec      	ldreq	r4, [r5, #12]
    15b6:	e7e6      	b.n	1586 <__swsetup_r+0x1e>
    15b8:	0751      	lsls	r1, r2, #29
    15ba:	d512      	bpl.n	15e2 <__swsetup_r+0x7a>
    15bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    15be:	b141      	cbz	r1, 15d2 <__swsetup_r+0x6a>
    15c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    15c4:	4299      	cmp	r1, r3
    15c6:	d002      	beq.n	15ce <__swsetup_r+0x66>
    15c8:	4630      	mov	r0, r6
    15ca:	f000 fa19 	bl	1a00 <_free_r>
    15ce:	2300      	movs	r3, #0
    15d0:	6363      	str	r3, [r4, #52]	; 0x34
    15d2:	89a3      	ldrh	r3, [r4, #12]
    15d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    15d8:	81a3      	strh	r3, [r4, #12]
    15da:	2300      	movs	r3, #0
    15dc:	6063      	str	r3, [r4, #4]
    15de:	6923      	ldr	r3, [r4, #16]
    15e0:	6023      	str	r3, [r4, #0]
    15e2:	89a3      	ldrh	r3, [r4, #12]
    15e4:	f043 0308 	orr.w	r3, r3, #8
    15e8:	81a3      	strh	r3, [r4, #12]
    15ea:	6923      	ldr	r3, [r4, #16]
    15ec:	b94b      	cbnz	r3, 1602 <__swsetup_r+0x9a>
    15ee:	89a3      	ldrh	r3, [r4, #12]
    15f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    15f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    15f8:	d003      	beq.n	1602 <__swsetup_r+0x9a>
    15fa:	4621      	mov	r1, r4
    15fc:	4630      	mov	r0, r6
    15fe:	f000 f9bf 	bl	1980 <__smakebuf_r>
    1602:	89a2      	ldrh	r2, [r4, #12]
    1604:	f012 0301 	ands.w	r3, r2, #1
    1608:	d00c      	beq.n	1624 <__swsetup_r+0xbc>
    160a:	2300      	movs	r3, #0
    160c:	60a3      	str	r3, [r4, #8]
    160e:	6963      	ldr	r3, [r4, #20]
    1610:	425b      	negs	r3, r3
    1612:	61a3      	str	r3, [r4, #24]
    1614:	6923      	ldr	r3, [r4, #16]
    1616:	b953      	cbnz	r3, 162e <__swsetup_r+0xc6>
    1618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    161c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1620:	d1ba      	bne.n	1598 <__swsetup_r+0x30>
    1622:	bd70      	pop	{r4, r5, r6, pc}
    1624:	0792      	lsls	r2, r2, #30
    1626:	bf58      	it	pl
    1628:	6963      	ldrpl	r3, [r4, #20]
    162a:	60a3      	str	r3, [r4, #8]
    162c:	e7f2      	b.n	1614 <__swsetup_r+0xac>
    162e:	2000      	movs	r0, #0
    1630:	e7f7      	b.n	1622 <__swsetup_r+0xba>
    1632:	bf00      	nop
    1634:	20000004 	.word	0x20000004
    1638:	000027dc 	.word	0x000027dc
    163c:	000027fc 	.word	0x000027fc
    1640:	000027bc 	.word	0x000027bc

00001644 <__sflush_r>:
    1644:	898a      	ldrh	r2, [r1, #12]
    1646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    164a:	4605      	mov	r5, r0
    164c:	0710      	lsls	r0, r2, #28
    164e:	460c      	mov	r4, r1
    1650:	d458      	bmi.n	1704 <__sflush_r+0xc0>
    1652:	684b      	ldr	r3, [r1, #4]
    1654:	2b00      	cmp	r3, #0
    1656:	dc05      	bgt.n	1664 <__sflush_r+0x20>
    1658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    165a:	2b00      	cmp	r3, #0
    165c:	dc02      	bgt.n	1664 <__sflush_r+0x20>
    165e:	2000      	movs	r0, #0
    1660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1666:	2e00      	cmp	r6, #0
    1668:	d0f9      	beq.n	165e <__sflush_r+0x1a>
    166a:	2300      	movs	r3, #0
    166c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1670:	682f      	ldr	r7, [r5, #0]
    1672:	6a21      	ldr	r1, [r4, #32]
    1674:	602b      	str	r3, [r5, #0]
    1676:	d032      	beq.n	16de <__sflush_r+0x9a>
    1678:	6d60      	ldr	r0, [r4, #84]	; 0x54
    167a:	89a3      	ldrh	r3, [r4, #12]
    167c:	075a      	lsls	r2, r3, #29
    167e:	d505      	bpl.n	168c <__sflush_r+0x48>
    1680:	6863      	ldr	r3, [r4, #4]
    1682:	1ac0      	subs	r0, r0, r3
    1684:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1686:	b10b      	cbz	r3, 168c <__sflush_r+0x48>
    1688:	6c23      	ldr	r3, [r4, #64]	; 0x40
    168a:	1ac0      	subs	r0, r0, r3
    168c:	2300      	movs	r3, #0
    168e:	4602      	mov	r2, r0
    1690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1692:	6a21      	ldr	r1, [r4, #32]
    1694:	4628      	mov	r0, r5
    1696:	47b0      	blx	r6
    1698:	1c43      	adds	r3, r0, #1
    169a:	89a3      	ldrh	r3, [r4, #12]
    169c:	d106      	bne.n	16ac <__sflush_r+0x68>
    169e:	6829      	ldr	r1, [r5, #0]
    16a0:	291d      	cmp	r1, #29
    16a2:	d848      	bhi.n	1736 <__sflush_r+0xf2>
    16a4:	4a29      	ldr	r2, [pc, #164]	; (174c <__sflush_r+0x108>)
    16a6:	40ca      	lsrs	r2, r1
    16a8:	07d6      	lsls	r6, r2, #31
    16aa:	d544      	bpl.n	1736 <__sflush_r+0xf2>
    16ac:	2200      	movs	r2, #0
    16ae:	6062      	str	r2, [r4, #4]
    16b0:	6922      	ldr	r2, [r4, #16]
    16b2:	04d9      	lsls	r1, r3, #19
    16b4:	6022      	str	r2, [r4, #0]
    16b6:	d504      	bpl.n	16c2 <__sflush_r+0x7e>
    16b8:	1c42      	adds	r2, r0, #1
    16ba:	d101      	bne.n	16c0 <__sflush_r+0x7c>
    16bc:	682b      	ldr	r3, [r5, #0]
    16be:	b903      	cbnz	r3, 16c2 <__sflush_r+0x7e>
    16c0:	6560      	str	r0, [r4, #84]	; 0x54
    16c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    16c4:	602f      	str	r7, [r5, #0]
    16c6:	2900      	cmp	r1, #0
    16c8:	d0c9      	beq.n	165e <__sflush_r+0x1a>
    16ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
    16ce:	4299      	cmp	r1, r3
    16d0:	d002      	beq.n	16d8 <__sflush_r+0x94>
    16d2:	4628      	mov	r0, r5
    16d4:	f000 f994 	bl	1a00 <_free_r>
    16d8:	2000      	movs	r0, #0
    16da:	6360      	str	r0, [r4, #52]	; 0x34
    16dc:	e7c0      	b.n	1660 <__sflush_r+0x1c>
    16de:	2301      	movs	r3, #1
    16e0:	4628      	mov	r0, r5
    16e2:	47b0      	blx	r6
    16e4:	1c41      	adds	r1, r0, #1
    16e6:	d1c8      	bne.n	167a <__sflush_r+0x36>
    16e8:	682b      	ldr	r3, [r5, #0]
    16ea:	2b00      	cmp	r3, #0
    16ec:	d0c5      	beq.n	167a <__sflush_r+0x36>
    16ee:	2b1d      	cmp	r3, #29
    16f0:	d001      	beq.n	16f6 <__sflush_r+0xb2>
    16f2:	2b16      	cmp	r3, #22
    16f4:	d101      	bne.n	16fa <__sflush_r+0xb6>
    16f6:	602f      	str	r7, [r5, #0]
    16f8:	e7b1      	b.n	165e <__sflush_r+0x1a>
    16fa:	89a3      	ldrh	r3, [r4, #12]
    16fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1700:	81a3      	strh	r3, [r4, #12]
    1702:	e7ad      	b.n	1660 <__sflush_r+0x1c>
    1704:	690f      	ldr	r7, [r1, #16]
    1706:	2f00      	cmp	r7, #0
    1708:	d0a9      	beq.n	165e <__sflush_r+0x1a>
    170a:	0793      	lsls	r3, r2, #30
    170c:	bf18      	it	ne
    170e:	2300      	movne	r3, #0
    1710:	680e      	ldr	r6, [r1, #0]
    1712:	bf08      	it	eq
    1714:	694b      	ldreq	r3, [r1, #20]
    1716:	eba6 0807 	sub.w	r8, r6, r7
    171a:	600f      	str	r7, [r1, #0]
    171c:	608b      	str	r3, [r1, #8]
    171e:	f1b8 0f00 	cmp.w	r8, #0
    1722:	dd9c      	ble.n	165e <__sflush_r+0x1a>
    1724:	4643      	mov	r3, r8
    1726:	463a      	mov	r2, r7
    1728:	6a21      	ldr	r1, [r4, #32]
    172a:	4628      	mov	r0, r5
    172c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    172e:	47b0      	blx	r6
    1730:	2800      	cmp	r0, #0
    1732:	dc06      	bgt.n	1742 <__sflush_r+0xfe>
    1734:	89a3      	ldrh	r3, [r4, #12]
    1736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    173a:	81a3      	strh	r3, [r4, #12]
    173c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1740:	e78e      	b.n	1660 <__sflush_r+0x1c>
    1742:	4407      	add	r7, r0
    1744:	eba8 0800 	sub.w	r8, r8, r0
    1748:	e7e9      	b.n	171e <__sflush_r+0xda>
    174a:	bf00      	nop
    174c:	20400001 	.word	0x20400001

00001750 <_fflush_r>:
    1750:	b538      	push	{r3, r4, r5, lr}
    1752:	690b      	ldr	r3, [r1, #16]
    1754:	4605      	mov	r5, r0
    1756:	460c      	mov	r4, r1
    1758:	b1db      	cbz	r3, 1792 <_fflush_r+0x42>
    175a:	b118      	cbz	r0, 1764 <_fflush_r+0x14>
    175c:	6983      	ldr	r3, [r0, #24]
    175e:	b90b      	cbnz	r3, 1764 <_fflush_r+0x14>
    1760:	f000 f860 	bl	1824 <__sinit>
    1764:	4b0c      	ldr	r3, [pc, #48]	; (1798 <_fflush_r+0x48>)
    1766:	429c      	cmp	r4, r3
    1768:	d109      	bne.n	177e <_fflush_r+0x2e>
    176a:	686c      	ldr	r4, [r5, #4]
    176c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1770:	b17b      	cbz	r3, 1792 <_fflush_r+0x42>
    1772:	4621      	mov	r1, r4
    1774:	4628      	mov	r0, r5
    1776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    177a:	f7ff bf63 	b.w	1644 <__sflush_r>
    177e:	4b07      	ldr	r3, [pc, #28]	; (179c <_fflush_r+0x4c>)
    1780:	429c      	cmp	r4, r3
    1782:	d101      	bne.n	1788 <_fflush_r+0x38>
    1784:	68ac      	ldr	r4, [r5, #8]
    1786:	e7f1      	b.n	176c <_fflush_r+0x1c>
    1788:	4b05      	ldr	r3, [pc, #20]	; (17a0 <_fflush_r+0x50>)
    178a:	429c      	cmp	r4, r3
    178c:	bf08      	it	eq
    178e:	68ec      	ldreq	r4, [r5, #12]
    1790:	e7ec      	b.n	176c <_fflush_r+0x1c>
    1792:	2000      	movs	r0, #0
    1794:	bd38      	pop	{r3, r4, r5, pc}
    1796:	bf00      	nop
    1798:	000027dc 	.word	0x000027dc
    179c:	000027fc 	.word	0x000027fc
    17a0:	000027bc 	.word	0x000027bc

000017a4 <std>:
    17a4:	2300      	movs	r3, #0
    17a6:	b510      	push	{r4, lr}
    17a8:	4604      	mov	r4, r0
    17aa:	e9c0 3300 	strd	r3, r3, [r0]
    17ae:	6083      	str	r3, [r0, #8]
    17b0:	8181      	strh	r1, [r0, #12]
    17b2:	6643      	str	r3, [r0, #100]	; 0x64
    17b4:	81c2      	strh	r2, [r0, #14]
    17b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
    17ba:	6183      	str	r3, [r0, #24]
    17bc:	4619      	mov	r1, r3
    17be:	2208      	movs	r2, #8
    17c0:	305c      	adds	r0, #92	; 0x5c
    17c2:	f7ff fdfb 	bl	13bc <memset>
    17c6:	4b05      	ldr	r3, [pc, #20]	; (17dc <std+0x38>)
    17c8:	6224      	str	r4, [r4, #32]
    17ca:	6263      	str	r3, [r4, #36]	; 0x24
    17cc:	4b04      	ldr	r3, [pc, #16]	; (17e0 <std+0x3c>)
    17ce:	62a3      	str	r3, [r4, #40]	; 0x28
    17d0:	4b04      	ldr	r3, [pc, #16]	; (17e4 <std+0x40>)
    17d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    17d4:	4b04      	ldr	r3, [pc, #16]	; (17e8 <std+0x44>)
    17d6:	6323      	str	r3, [r4, #48]	; 0x30
    17d8:	bd10      	pop	{r4, pc}
    17da:	bf00      	nop
    17dc:	000020f5 	.word	0x000020f5
    17e0:	00002117 	.word	0x00002117
    17e4:	0000214f 	.word	0x0000214f
    17e8:	00002173 	.word	0x00002173

000017ec <_cleanup_r>:
    17ec:	4901      	ldr	r1, [pc, #4]	; (17f4 <_cleanup_r+0x8>)
    17ee:	f000 b885 	b.w	18fc <_fwalk_reent>
    17f2:	bf00      	nop
    17f4:	00001751 	.word	0x00001751

000017f8 <__sfmoreglue>:
    17f8:	b570      	push	{r4, r5, r6, lr}
    17fa:	2568      	movs	r5, #104	; 0x68
    17fc:	1e4a      	subs	r2, r1, #1
    17fe:	4355      	muls	r5, r2
    1800:	460e      	mov	r6, r1
    1802:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1806:	f000 f947 	bl	1a98 <_malloc_r>
    180a:	4604      	mov	r4, r0
    180c:	b140      	cbz	r0, 1820 <__sfmoreglue+0x28>
    180e:	2100      	movs	r1, #0
    1810:	e9c0 1600 	strd	r1, r6, [r0]
    1814:	300c      	adds	r0, #12
    1816:	60a0      	str	r0, [r4, #8]
    1818:	f105 0268 	add.w	r2, r5, #104	; 0x68
    181c:	f7ff fdce 	bl	13bc <memset>
    1820:	4620      	mov	r0, r4
    1822:	bd70      	pop	{r4, r5, r6, pc}

00001824 <__sinit>:
    1824:	6983      	ldr	r3, [r0, #24]
    1826:	b510      	push	{r4, lr}
    1828:	4604      	mov	r4, r0
    182a:	bb33      	cbnz	r3, 187a <__sinit+0x56>
    182c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    1830:	6503      	str	r3, [r0, #80]	; 0x50
    1832:	4b12      	ldr	r3, [pc, #72]	; (187c <__sinit+0x58>)
    1834:	4a12      	ldr	r2, [pc, #72]	; (1880 <__sinit+0x5c>)
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	6282      	str	r2, [r0, #40]	; 0x28
    183a:	4298      	cmp	r0, r3
    183c:	bf04      	itt	eq
    183e:	2301      	moveq	r3, #1
    1840:	6183      	streq	r3, [r0, #24]
    1842:	f000 f81f 	bl	1884 <__sfp>
    1846:	6060      	str	r0, [r4, #4]
    1848:	4620      	mov	r0, r4
    184a:	f000 f81b 	bl	1884 <__sfp>
    184e:	60a0      	str	r0, [r4, #8]
    1850:	4620      	mov	r0, r4
    1852:	f000 f817 	bl	1884 <__sfp>
    1856:	2200      	movs	r2, #0
    1858:	60e0      	str	r0, [r4, #12]
    185a:	2104      	movs	r1, #4
    185c:	6860      	ldr	r0, [r4, #4]
    185e:	f7ff ffa1 	bl	17a4 <std>
    1862:	2201      	movs	r2, #1
    1864:	2109      	movs	r1, #9
    1866:	68a0      	ldr	r0, [r4, #8]
    1868:	f7ff ff9c 	bl	17a4 <std>
    186c:	2202      	movs	r2, #2
    186e:	2112      	movs	r1, #18
    1870:	68e0      	ldr	r0, [r4, #12]
    1872:	f7ff ff97 	bl	17a4 <std>
    1876:	2301      	movs	r3, #1
    1878:	61a3      	str	r3, [r4, #24]
    187a:	bd10      	pop	{r4, pc}
    187c:	000027b8 	.word	0x000027b8
    1880:	000017ed 	.word	0x000017ed

00001884 <__sfp>:
    1884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1886:	4b1b      	ldr	r3, [pc, #108]	; (18f4 <__sfp+0x70>)
    1888:	4607      	mov	r7, r0
    188a:	681e      	ldr	r6, [r3, #0]
    188c:	69b3      	ldr	r3, [r6, #24]
    188e:	b913      	cbnz	r3, 1896 <__sfp+0x12>
    1890:	4630      	mov	r0, r6
    1892:	f7ff ffc7 	bl	1824 <__sinit>
    1896:	3648      	adds	r6, #72	; 0x48
    1898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    189c:	3b01      	subs	r3, #1
    189e:	d503      	bpl.n	18a8 <__sfp+0x24>
    18a0:	6833      	ldr	r3, [r6, #0]
    18a2:	b133      	cbz	r3, 18b2 <__sfp+0x2e>
    18a4:	6836      	ldr	r6, [r6, #0]
    18a6:	e7f7      	b.n	1898 <__sfp+0x14>
    18a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    18ac:	b16d      	cbz	r5, 18ca <__sfp+0x46>
    18ae:	3468      	adds	r4, #104	; 0x68
    18b0:	e7f4      	b.n	189c <__sfp+0x18>
    18b2:	2104      	movs	r1, #4
    18b4:	4638      	mov	r0, r7
    18b6:	f7ff ff9f 	bl	17f8 <__sfmoreglue>
    18ba:	6030      	str	r0, [r6, #0]
    18bc:	2800      	cmp	r0, #0
    18be:	d1f1      	bne.n	18a4 <__sfp+0x20>
    18c0:	230c      	movs	r3, #12
    18c2:	4604      	mov	r4, r0
    18c4:	603b      	str	r3, [r7, #0]
    18c6:	4620      	mov	r0, r4
    18c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ca:	4b0b      	ldr	r3, [pc, #44]	; (18f8 <__sfp+0x74>)
    18cc:	6665      	str	r5, [r4, #100]	; 0x64
    18ce:	e9c4 5500 	strd	r5, r5, [r4]
    18d2:	60a5      	str	r5, [r4, #8]
    18d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
    18d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
    18dc:	2208      	movs	r2, #8
    18de:	4629      	mov	r1, r5
    18e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    18e4:	f7ff fd6a 	bl	13bc <memset>
    18e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    18ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    18f0:	e7e9      	b.n	18c6 <__sfp+0x42>
    18f2:	bf00      	nop
    18f4:	000027b8 	.word	0x000027b8
    18f8:	ffff0001 	.word	0xffff0001

000018fc <_fwalk_reent>:
    18fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1900:	4680      	mov	r8, r0
    1902:	4689      	mov	r9, r1
    1904:	2600      	movs	r6, #0
    1906:	f100 0448 	add.w	r4, r0, #72	; 0x48
    190a:	b914      	cbnz	r4, 1912 <_fwalk_reent+0x16>
    190c:	4630      	mov	r0, r6
    190e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1912:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    1916:	3f01      	subs	r7, #1
    1918:	d501      	bpl.n	191e <_fwalk_reent+0x22>
    191a:	6824      	ldr	r4, [r4, #0]
    191c:	e7f5      	b.n	190a <_fwalk_reent+0xe>
    191e:	89ab      	ldrh	r3, [r5, #12]
    1920:	2b01      	cmp	r3, #1
    1922:	d907      	bls.n	1934 <_fwalk_reent+0x38>
    1924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1928:	3301      	adds	r3, #1
    192a:	d003      	beq.n	1934 <_fwalk_reent+0x38>
    192c:	4629      	mov	r1, r5
    192e:	4640      	mov	r0, r8
    1930:	47c8      	blx	r9
    1932:	4306      	orrs	r6, r0
    1934:	3568      	adds	r5, #104	; 0x68
    1936:	e7ee      	b.n	1916 <_fwalk_reent+0x1a>

00001938 <__swhatbuf_r>:
    1938:	b570      	push	{r4, r5, r6, lr}
    193a:	460e      	mov	r6, r1
    193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1940:	b096      	sub	sp, #88	; 0x58
    1942:	2900      	cmp	r1, #0
    1944:	4614      	mov	r4, r2
    1946:	461d      	mov	r5, r3
    1948:	da07      	bge.n	195a <__swhatbuf_r+0x22>
    194a:	2300      	movs	r3, #0
    194c:	602b      	str	r3, [r5, #0]
    194e:	89b3      	ldrh	r3, [r6, #12]
    1950:	061a      	lsls	r2, r3, #24
    1952:	d410      	bmi.n	1976 <__swhatbuf_r+0x3e>
    1954:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1958:	e00e      	b.n	1978 <__swhatbuf_r+0x40>
    195a:	466a      	mov	r2, sp
    195c:	f000 fc30 	bl	21c0 <_fstat_r>
    1960:	2800      	cmp	r0, #0
    1962:	dbf2      	blt.n	194a <__swhatbuf_r+0x12>
    1964:	9a01      	ldr	r2, [sp, #4]
    1966:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    196a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    196e:	425a      	negs	r2, r3
    1970:	415a      	adcs	r2, r3
    1972:	602a      	str	r2, [r5, #0]
    1974:	e7ee      	b.n	1954 <__swhatbuf_r+0x1c>
    1976:	2340      	movs	r3, #64	; 0x40
    1978:	2000      	movs	r0, #0
    197a:	6023      	str	r3, [r4, #0]
    197c:	b016      	add	sp, #88	; 0x58
    197e:	bd70      	pop	{r4, r5, r6, pc}

00001980 <__smakebuf_r>:
    1980:	898b      	ldrh	r3, [r1, #12]
    1982:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1984:	079d      	lsls	r5, r3, #30
    1986:	4606      	mov	r6, r0
    1988:	460c      	mov	r4, r1
    198a:	d507      	bpl.n	199c <__smakebuf_r+0x1c>
    198c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1990:	6023      	str	r3, [r4, #0]
    1992:	6123      	str	r3, [r4, #16]
    1994:	2301      	movs	r3, #1
    1996:	6163      	str	r3, [r4, #20]
    1998:	b002      	add	sp, #8
    199a:	bd70      	pop	{r4, r5, r6, pc}
    199c:	ab01      	add	r3, sp, #4
    199e:	466a      	mov	r2, sp
    19a0:	f7ff ffca 	bl	1938 <__swhatbuf_r>
    19a4:	9900      	ldr	r1, [sp, #0]
    19a6:	4605      	mov	r5, r0
    19a8:	4630      	mov	r0, r6
    19aa:	f000 f875 	bl	1a98 <_malloc_r>
    19ae:	b948      	cbnz	r0, 19c4 <__smakebuf_r+0x44>
    19b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    19b4:	059a      	lsls	r2, r3, #22
    19b6:	d4ef      	bmi.n	1998 <__smakebuf_r+0x18>
    19b8:	f023 0303 	bic.w	r3, r3, #3
    19bc:	f043 0302 	orr.w	r3, r3, #2
    19c0:	81a3      	strh	r3, [r4, #12]
    19c2:	e7e3      	b.n	198c <__smakebuf_r+0xc>
    19c4:	4b0d      	ldr	r3, [pc, #52]	; (19fc <__smakebuf_r+0x7c>)
    19c6:	62b3      	str	r3, [r6, #40]	; 0x28
    19c8:	89a3      	ldrh	r3, [r4, #12]
    19ca:	6020      	str	r0, [r4, #0]
    19cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    19d0:	81a3      	strh	r3, [r4, #12]
    19d2:	9b00      	ldr	r3, [sp, #0]
    19d4:	6120      	str	r0, [r4, #16]
    19d6:	6163      	str	r3, [r4, #20]
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	b15b      	cbz	r3, 19f4 <__smakebuf_r+0x74>
    19dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    19e0:	4630      	mov	r0, r6
    19e2:	f000 fbff 	bl	21e4 <_isatty_r>
    19e6:	b128      	cbz	r0, 19f4 <__smakebuf_r+0x74>
    19e8:	89a3      	ldrh	r3, [r4, #12]
    19ea:	f023 0303 	bic.w	r3, r3, #3
    19ee:	f043 0301 	orr.w	r3, r3, #1
    19f2:	81a3      	strh	r3, [r4, #12]
    19f4:	89a3      	ldrh	r3, [r4, #12]
    19f6:	431d      	orrs	r5, r3
    19f8:	81a5      	strh	r5, [r4, #12]
    19fa:	e7cd      	b.n	1998 <__smakebuf_r+0x18>
    19fc:	000017ed 	.word	0x000017ed

00001a00 <_free_r>:
    1a00:	b538      	push	{r3, r4, r5, lr}
    1a02:	4605      	mov	r5, r0
    1a04:	2900      	cmp	r1, #0
    1a06:	d043      	beq.n	1a90 <_free_r+0x90>
    1a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1a0c:	1f0c      	subs	r4, r1, #4
    1a0e:	2b00      	cmp	r3, #0
    1a10:	bfb8      	it	lt
    1a12:	18e4      	addlt	r4, r4, r3
    1a14:	f000 fc16 	bl	2244 <__malloc_lock>
    1a18:	4a1e      	ldr	r2, [pc, #120]	; (1a94 <_free_r+0x94>)
    1a1a:	6813      	ldr	r3, [r2, #0]
    1a1c:	4610      	mov	r0, r2
    1a1e:	b933      	cbnz	r3, 1a2e <_free_r+0x2e>
    1a20:	6063      	str	r3, [r4, #4]
    1a22:	6014      	str	r4, [r2, #0]
    1a24:	4628      	mov	r0, r5
    1a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a2a:	f000 bc0c 	b.w	2246 <__malloc_unlock>
    1a2e:	42a3      	cmp	r3, r4
    1a30:	d90b      	bls.n	1a4a <_free_r+0x4a>
    1a32:	6821      	ldr	r1, [r4, #0]
    1a34:	1862      	adds	r2, r4, r1
    1a36:	4293      	cmp	r3, r2
    1a38:	bf01      	itttt	eq
    1a3a:	681a      	ldreq	r2, [r3, #0]
    1a3c:	685b      	ldreq	r3, [r3, #4]
    1a3e:	1852      	addeq	r2, r2, r1
    1a40:	6022      	streq	r2, [r4, #0]
    1a42:	6063      	str	r3, [r4, #4]
    1a44:	6004      	str	r4, [r0, #0]
    1a46:	e7ed      	b.n	1a24 <_free_r+0x24>
    1a48:	4613      	mov	r3, r2
    1a4a:	685a      	ldr	r2, [r3, #4]
    1a4c:	b10a      	cbz	r2, 1a52 <_free_r+0x52>
    1a4e:	42a2      	cmp	r2, r4
    1a50:	d9fa      	bls.n	1a48 <_free_r+0x48>
    1a52:	6819      	ldr	r1, [r3, #0]
    1a54:	1858      	adds	r0, r3, r1
    1a56:	42a0      	cmp	r0, r4
    1a58:	d10b      	bne.n	1a72 <_free_r+0x72>
    1a5a:	6820      	ldr	r0, [r4, #0]
    1a5c:	4401      	add	r1, r0
    1a5e:	1858      	adds	r0, r3, r1
    1a60:	4282      	cmp	r2, r0
    1a62:	6019      	str	r1, [r3, #0]
    1a64:	d1de      	bne.n	1a24 <_free_r+0x24>
    1a66:	6810      	ldr	r0, [r2, #0]
    1a68:	6852      	ldr	r2, [r2, #4]
    1a6a:	4401      	add	r1, r0
    1a6c:	6019      	str	r1, [r3, #0]
    1a6e:	605a      	str	r2, [r3, #4]
    1a70:	e7d8      	b.n	1a24 <_free_r+0x24>
    1a72:	d902      	bls.n	1a7a <_free_r+0x7a>
    1a74:	230c      	movs	r3, #12
    1a76:	602b      	str	r3, [r5, #0]
    1a78:	e7d4      	b.n	1a24 <_free_r+0x24>
    1a7a:	6820      	ldr	r0, [r4, #0]
    1a7c:	1821      	adds	r1, r4, r0
    1a7e:	428a      	cmp	r2, r1
    1a80:	bf01      	itttt	eq
    1a82:	6811      	ldreq	r1, [r2, #0]
    1a84:	6852      	ldreq	r2, [r2, #4]
    1a86:	1809      	addeq	r1, r1, r0
    1a88:	6021      	streq	r1, [r4, #0]
    1a8a:	6062      	str	r2, [r4, #4]
    1a8c:	605c      	str	r4, [r3, #4]
    1a8e:	e7c9      	b.n	1a24 <_free_r+0x24>
    1a90:	bd38      	pop	{r3, r4, r5, pc}
    1a92:	bf00      	nop
    1a94:	20000068 	.word	0x20000068

00001a98 <_malloc_r>:
    1a98:	b570      	push	{r4, r5, r6, lr}
    1a9a:	1ccd      	adds	r5, r1, #3
    1a9c:	f025 0503 	bic.w	r5, r5, #3
    1aa0:	3508      	adds	r5, #8
    1aa2:	2d0c      	cmp	r5, #12
    1aa4:	bf38      	it	cc
    1aa6:	250c      	movcc	r5, #12
    1aa8:	2d00      	cmp	r5, #0
    1aaa:	4606      	mov	r6, r0
    1aac:	db01      	blt.n	1ab2 <_malloc_r+0x1a>
    1aae:	42a9      	cmp	r1, r5
    1ab0:	d903      	bls.n	1aba <_malloc_r+0x22>
    1ab2:	230c      	movs	r3, #12
    1ab4:	6033      	str	r3, [r6, #0]
    1ab6:	2000      	movs	r0, #0
    1ab8:	bd70      	pop	{r4, r5, r6, pc}
    1aba:	f000 fbc3 	bl	2244 <__malloc_lock>
    1abe:	4a21      	ldr	r2, [pc, #132]	; (1b44 <_malloc_r+0xac>)
    1ac0:	6814      	ldr	r4, [r2, #0]
    1ac2:	4621      	mov	r1, r4
    1ac4:	b991      	cbnz	r1, 1aec <_malloc_r+0x54>
    1ac6:	4c20      	ldr	r4, [pc, #128]	; (1b48 <_malloc_r+0xb0>)
    1ac8:	6823      	ldr	r3, [r4, #0]
    1aca:	b91b      	cbnz	r3, 1ad4 <_malloc_r+0x3c>
    1acc:	4630      	mov	r0, r6
    1ace:	f000 fb01 	bl	20d4 <_sbrk_r>
    1ad2:	6020      	str	r0, [r4, #0]
    1ad4:	4629      	mov	r1, r5
    1ad6:	4630      	mov	r0, r6
    1ad8:	f000 fafc 	bl	20d4 <_sbrk_r>
    1adc:	1c43      	adds	r3, r0, #1
    1ade:	d124      	bne.n	1b2a <_malloc_r+0x92>
    1ae0:	230c      	movs	r3, #12
    1ae2:	4630      	mov	r0, r6
    1ae4:	6033      	str	r3, [r6, #0]
    1ae6:	f000 fbae 	bl	2246 <__malloc_unlock>
    1aea:	e7e4      	b.n	1ab6 <_malloc_r+0x1e>
    1aec:	680b      	ldr	r3, [r1, #0]
    1aee:	1b5b      	subs	r3, r3, r5
    1af0:	d418      	bmi.n	1b24 <_malloc_r+0x8c>
    1af2:	2b0b      	cmp	r3, #11
    1af4:	d90f      	bls.n	1b16 <_malloc_r+0x7e>
    1af6:	600b      	str	r3, [r1, #0]
    1af8:	18cc      	adds	r4, r1, r3
    1afa:	50cd      	str	r5, [r1, r3]
    1afc:	4630      	mov	r0, r6
    1afe:	f000 fba2 	bl	2246 <__malloc_unlock>
    1b02:	f104 000b 	add.w	r0, r4, #11
    1b06:	1d23      	adds	r3, r4, #4
    1b08:	f020 0007 	bic.w	r0, r0, #7
    1b0c:	1ac3      	subs	r3, r0, r3
    1b0e:	d0d3      	beq.n	1ab8 <_malloc_r+0x20>
    1b10:	425a      	negs	r2, r3
    1b12:	50e2      	str	r2, [r4, r3]
    1b14:	e7d0      	b.n	1ab8 <_malloc_r+0x20>
    1b16:	684b      	ldr	r3, [r1, #4]
    1b18:	428c      	cmp	r4, r1
    1b1a:	bf16      	itet	ne
    1b1c:	6063      	strne	r3, [r4, #4]
    1b1e:	6013      	streq	r3, [r2, #0]
    1b20:	460c      	movne	r4, r1
    1b22:	e7eb      	b.n	1afc <_malloc_r+0x64>
    1b24:	460c      	mov	r4, r1
    1b26:	6849      	ldr	r1, [r1, #4]
    1b28:	e7cc      	b.n	1ac4 <_malloc_r+0x2c>
    1b2a:	1cc4      	adds	r4, r0, #3
    1b2c:	f024 0403 	bic.w	r4, r4, #3
    1b30:	42a0      	cmp	r0, r4
    1b32:	d005      	beq.n	1b40 <_malloc_r+0xa8>
    1b34:	1a21      	subs	r1, r4, r0
    1b36:	4630      	mov	r0, r6
    1b38:	f000 facc 	bl	20d4 <_sbrk_r>
    1b3c:	3001      	adds	r0, #1
    1b3e:	d0cf      	beq.n	1ae0 <_malloc_r+0x48>
    1b40:	6025      	str	r5, [r4, #0]
    1b42:	e7db      	b.n	1afc <_malloc_r+0x64>
    1b44:	20000068 	.word	0x20000068
    1b48:	2000006c 	.word	0x2000006c

00001b4c <__sfputc_r>:
    1b4c:	6893      	ldr	r3, [r2, #8]
    1b4e:	b410      	push	{r4}
    1b50:	3b01      	subs	r3, #1
    1b52:	2b00      	cmp	r3, #0
    1b54:	6093      	str	r3, [r2, #8]
    1b56:	da07      	bge.n	1b68 <__sfputc_r+0x1c>
    1b58:	6994      	ldr	r4, [r2, #24]
    1b5a:	42a3      	cmp	r3, r4
    1b5c:	db01      	blt.n	1b62 <__sfputc_r+0x16>
    1b5e:	290a      	cmp	r1, #10
    1b60:	d102      	bne.n	1b68 <__sfputc_r+0x1c>
    1b62:	bc10      	pop	{r4}
    1b64:	f7ff bcae 	b.w	14c4 <__swbuf_r>
    1b68:	6813      	ldr	r3, [r2, #0]
    1b6a:	1c58      	adds	r0, r3, #1
    1b6c:	6010      	str	r0, [r2, #0]
    1b6e:	7019      	strb	r1, [r3, #0]
    1b70:	4608      	mov	r0, r1
    1b72:	bc10      	pop	{r4}
    1b74:	4770      	bx	lr

00001b76 <__sfputs_r>:
    1b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b78:	4606      	mov	r6, r0
    1b7a:	460f      	mov	r7, r1
    1b7c:	4614      	mov	r4, r2
    1b7e:	18d5      	adds	r5, r2, r3
    1b80:	42ac      	cmp	r4, r5
    1b82:	d101      	bne.n	1b88 <__sfputs_r+0x12>
    1b84:	2000      	movs	r0, #0
    1b86:	e007      	b.n	1b98 <__sfputs_r+0x22>
    1b88:	463a      	mov	r2, r7
    1b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
    1b8e:	4630      	mov	r0, r6
    1b90:	f7ff ffdc 	bl	1b4c <__sfputc_r>
    1b94:	1c43      	adds	r3, r0, #1
    1b96:	d1f3      	bne.n	1b80 <__sfputs_r+0xa>
    1b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001b9c <_vfiprintf_r>:
    1b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ba0:	b09d      	sub	sp, #116	; 0x74
    1ba2:	460c      	mov	r4, r1
    1ba4:	4617      	mov	r7, r2
    1ba6:	9303      	str	r3, [sp, #12]
    1ba8:	4606      	mov	r6, r0
    1baa:	b118      	cbz	r0, 1bb4 <_vfiprintf_r+0x18>
    1bac:	6983      	ldr	r3, [r0, #24]
    1bae:	b90b      	cbnz	r3, 1bb4 <_vfiprintf_r+0x18>
    1bb0:	f7ff fe38 	bl	1824 <__sinit>
    1bb4:	4b7b      	ldr	r3, [pc, #492]	; (1da4 <_vfiprintf_r+0x208>)
    1bb6:	429c      	cmp	r4, r3
    1bb8:	d157      	bne.n	1c6a <_vfiprintf_r+0xce>
    1bba:	6874      	ldr	r4, [r6, #4]
    1bbc:	89a3      	ldrh	r3, [r4, #12]
    1bbe:	0718      	lsls	r0, r3, #28
    1bc0:	d55d      	bpl.n	1c7e <_vfiprintf_r+0xe2>
    1bc2:	6923      	ldr	r3, [r4, #16]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d05a      	beq.n	1c7e <_vfiprintf_r+0xe2>
    1bc8:	2300      	movs	r3, #0
    1bca:	9309      	str	r3, [sp, #36]	; 0x24
    1bcc:	2320      	movs	r3, #32
    1bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1bd2:	2330      	movs	r3, #48	; 0x30
    1bd4:	f04f 0b01 	mov.w	fp, #1
    1bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1bdc:	46b8      	mov	r8, r7
    1bde:	4645      	mov	r5, r8
    1be0:	f815 3b01 	ldrb.w	r3, [r5], #1
    1be4:	b10b      	cbz	r3, 1bea <_vfiprintf_r+0x4e>
    1be6:	2b25      	cmp	r3, #37	; 0x25
    1be8:	d154      	bne.n	1c94 <_vfiprintf_r+0xf8>
    1bea:	ebb8 0a07 	subs.w	sl, r8, r7
    1bee:	d00b      	beq.n	1c08 <_vfiprintf_r+0x6c>
    1bf0:	4653      	mov	r3, sl
    1bf2:	463a      	mov	r2, r7
    1bf4:	4621      	mov	r1, r4
    1bf6:	4630      	mov	r0, r6
    1bf8:	f7ff ffbd 	bl	1b76 <__sfputs_r>
    1bfc:	3001      	adds	r0, #1
    1bfe:	f000 80c2 	beq.w	1d86 <_vfiprintf_r+0x1ea>
    1c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c04:	4453      	add	r3, sl
    1c06:	9309      	str	r3, [sp, #36]	; 0x24
    1c08:	f898 3000 	ldrb.w	r3, [r8]
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	f000 80ba 	beq.w	1d86 <_vfiprintf_r+0x1ea>
    1c12:	2300      	movs	r3, #0
    1c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1c1c:	9304      	str	r3, [sp, #16]
    1c1e:	9307      	str	r3, [sp, #28]
    1c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1c24:	931a      	str	r3, [sp, #104]	; 0x68
    1c26:	46a8      	mov	r8, r5
    1c28:	2205      	movs	r2, #5
    1c2a:	f818 1b01 	ldrb.w	r1, [r8], #1
    1c2e:	485e      	ldr	r0, [pc, #376]	; (1da8 <_vfiprintf_r+0x20c>)
    1c30:	f000 fafa 	bl	2228 <memchr>
    1c34:	9b04      	ldr	r3, [sp, #16]
    1c36:	bb78      	cbnz	r0, 1c98 <_vfiprintf_r+0xfc>
    1c38:	06d9      	lsls	r1, r3, #27
    1c3a:	bf44      	itt	mi
    1c3c:	2220      	movmi	r2, #32
    1c3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1c42:	071a      	lsls	r2, r3, #28
    1c44:	bf44      	itt	mi
    1c46:	222b      	movmi	r2, #43	; 0x2b
    1c48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1c4c:	782a      	ldrb	r2, [r5, #0]
    1c4e:	2a2a      	cmp	r2, #42	; 0x2a
    1c50:	d02a      	beq.n	1ca8 <_vfiprintf_r+0x10c>
    1c52:	46a8      	mov	r8, r5
    1c54:	2000      	movs	r0, #0
    1c56:	250a      	movs	r5, #10
    1c58:	9a07      	ldr	r2, [sp, #28]
    1c5a:	4641      	mov	r1, r8
    1c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1c60:	3b30      	subs	r3, #48	; 0x30
    1c62:	2b09      	cmp	r3, #9
    1c64:	d969      	bls.n	1d3a <_vfiprintf_r+0x19e>
    1c66:	b360      	cbz	r0, 1cc2 <_vfiprintf_r+0x126>
    1c68:	e024      	b.n	1cb4 <_vfiprintf_r+0x118>
    1c6a:	4b50      	ldr	r3, [pc, #320]	; (1dac <_vfiprintf_r+0x210>)
    1c6c:	429c      	cmp	r4, r3
    1c6e:	d101      	bne.n	1c74 <_vfiprintf_r+0xd8>
    1c70:	68b4      	ldr	r4, [r6, #8]
    1c72:	e7a3      	b.n	1bbc <_vfiprintf_r+0x20>
    1c74:	4b4e      	ldr	r3, [pc, #312]	; (1db0 <_vfiprintf_r+0x214>)
    1c76:	429c      	cmp	r4, r3
    1c78:	bf08      	it	eq
    1c7a:	68f4      	ldreq	r4, [r6, #12]
    1c7c:	e79e      	b.n	1bbc <_vfiprintf_r+0x20>
    1c7e:	4621      	mov	r1, r4
    1c80:	4630      	mov	r0, r6
    1c82:	f7ff fc71 	bl	1568 <__swsetup_r>
    1c86:	2800      	cmp	r0, #0
    1c88:	d09e      	beq.n	1bc8 <_vfiprintf_r+0x2c>
    1c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c8e:	b01d      	add	sp, #116	; 0x74
    1c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c94:	46a8      	mov	r8, r5
    1c96:	e7a2      	b.n	1bde <_vfiprintf_r+0x42>
    1c98:	4a43      	ldr	r2, [pc, #268]	; (1da8 <_vfiprintf_r+0x20c>)
    1c9a:	4645      	mov	r5, r8
    1c9c:	1a80      	subs	r0, r0, r2
    1c9e:	fa0b f000 	lsl.w	r0, fp, r0
    1ca2:	4318      	orrs	r0, r3
    1ca4:	9004      	str	r0, [sp, #16]
    1ca6:	e7be      	b.n	1c26 <_vfiprintf_r+0x8a>
    1ca8:	9a03      	ldr	r2, [sp, #12]
    1caa:	1d11      	adds	r1, r2, #4
    1cac:	6812      	ldr	r2, [r2, #0]
    1cae:	9103      	str	r1, [sp, #12]
    1cb0:	2a00      	cmp	r2, #0
    1cb2:	db01      	blt.n	1cb8 <_vfiprintf_r+0x11c>
    1cb4:	9207      	str	r2, [sp, #28]
    1cb6:	e004      	b.n	1cc2 <_vfiprintf_r+0x126>
    1cb8:	4252      	negs	r2, r2
    1cba:	f043 0302 	orr.w	r3, r3, #2
    1cbe:	9207      	str	r2, [sp, #28]
    1cc0:	9304      	str	r3, [sp, #16]
    1cc2:	f898 3000 	ldrb.w	r3, [r8]
    1cc6:	2b2e      	cmp	r3, #46	; 0x2e
    1cc8:	d10e      	bne.n	1ce8 <_vfiprintf_r+0x14c>
    1cca:	f898 3001 	ldrb.w	r3, [r8, #1]
    1cce:	2b2a      	cmp	r3, #42	; 0x2a
    1cd0:	d138      	bne.n	1d44 <_vfiprintf_r+0x1a8>
    1cd2:	9b03      	ldr	r3, [sp, #12]
    1cd4:	f108 0802 	add.w	r8, r8, #2
    1cd8:	1d1a      	adds	r2, r3, #4
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	9203      	str	r2, [sp, #12]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	bfb8      	it	lt
    1ce2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1ce6:	9305      	str	r3, [sp, #20]
    1ce8:	4d32      	ldr	r5, [pc, #200]	; (1db4 <_vfiprintf_r+0x218>)
    1cea:	2203      	movs	r2, #3
    1cec:	f898 1000 	ldrb.w	r1, [r8]
    1cf0:	4628      	mov	r0, r5
    1cf2:	f000 fa99 	bl	2228 <memchr>
    1cf6:	b140      	cbz	r0, 1d0a <_vfiprintf_r+0x16e>
    1cf8:	2340      	movs	r3, #64	; 0x40
    1cfa:	1b40      	subs	r0, r0, r5
    1cfc:	fa03 f000 	lsl.w	r0, r3, r0
    1d00:	9b04      	ldr	r3, [sp, #16]
    1d02:	f108 0801 	add.w	r8, r8, #1
    1d06:	4303      	orrs	r3, r0
    1d08:	9304      	str	r3, [sp, #16]
    1d0a:	f898 1000 	ldrb.w	r1, [r8]
    1d0e:	2206      	movs	r2, #6
    1d10:	4829      	ldr	r0, [pc, #164]	; (1db8 <_vfiprintf_r+0x21c>)
    1d12:	f108 0701 	add.w	r7, r8, #1
    1d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1d1a:	f000 fa85 	bl	2228 <memchr>
    1d1e:	2800      	cmp	r0, #0
    1d20:	d037      	beq.n	1d92 <_vfiprintf_r+0x1f6>
    1d22:	4b26      	ldr	r3, [pc, #152]	; (1dbc <_vfiprintf_r+0x220>)
    1d24:	bb1b      	cbnz	r3, 1d6e <_vfiprintf_r+0x1d2>
    1d26:	9b03      	ldr	r3, [sp, #12]
    1d28:	3307      	adds	r3, #7
    1d2a:	f023 0307 	bic.w	r3, r3, #7
    1d2e:	3308      	adds	r3, #8
    1d30:	9303      	str	r3, [sp, #12]
    1d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d34:	444b      	add	r3, r9
    1d36:	9309      	str	r3, [sp, #36]	; 0x24
    1d38:	e750      	b.n	1bdc <_vfiprintf_r+0x40>
    1d3a:	fb05 3202 	mla	r2, r5, r2, r3
    1d3e:	2001      	movs	r0, #1
    1d40:	4688      	mov	r8, r1
    1d42:	e78a      	b.n	1c5a <_vfiprintf_r+0xbe>
    1d44:	2300      	movs	r3, #0
    1d46:	250a      	movs	r5, #10
    1d48:	4619      	mov	r1, r3
    1d4a:	f108 0801 	add.w	r8, r8, #1
    1d4e:	9305      	str	r3, [sp, #20]
    1d50:	4640      	mov	r0, r8
    1d52:	f810 2b01 	ldrb.w	r2, [r0], #1
    1d56:	3a30      	subs	r2, #48	; 0x30
    1d58:	2a09      	cmp	r2, #9
    1d5a:	d903      	bls.n	1d64 <_vfiprintf_r+0x1c8>
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d0c3      	beq.n	1ce8 <_vfiprintf_r+0x14c>
    1d60:	9105      	str	r1, [sp, #20]
    1d62:	e7c1      	b.n	1ce8 <_vfiprintf_r+0x14c>
    1d64:	fb05 2101 	mla	r1, r5, r1, r2
    1d68:	2301      	movs	r3, #1
    1d6a:	4680      	mov	r8, r0
    1d6c:	e7f0      	b.n	1d50 <_vfiprintf_r+0x1b4>
    1d6e:	ab03      	add	r3, sp, #12
    1d70:	9300      	str	r3, [sp, #0]
    1d72:	4622      	mov	r2, r4
    1d74:	4b12      	ldr	r3, [pc, #72]	; (1dc0 <_vfiprintf_r+0x224>)
    1d76:	a904      	add	r1, sp, #16
    1d78:	4630      	mov	r0, r6
    1d7a:	f3af 8000 	nop.w
    1d7e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1d82:	4681      	mov	r9, r0
    1d84:	d1d5      	bne.n	1d32 <_vfiprintf_r+0x196>
    1d86:	89a3      	ldrh	r3, [r4, #12]
    1d88:	065b      	lsls	r3, r3, #25
    1d8a:	f53f af7e 	bmi.w	1c8a <_vfiprintf_r+0xee>
    1d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1d90:	e77d      	b.n	1c8e <_vfiprintf_r+0xf2>
    1d92:	ab03      	add	r3, sp, #12
    1d94:	9300      	str	r3, [sp, #0]
    1d96:	4622      	mov	r2, r4
    1d98:	4b09      	ldr	r3, [pc, #36]	; (1dc0 <_vfiprintf_r+0x224>)
    1d9a:	a904      	add	r1, sp, #16
    1d9c:	4630      	mov	r0, r6
    1d9e:	f000 f887 	bl	1eb0 <_printf_i>
    1da2:	e7ec      	b.n	1d7e <_vfiprintf_r+0x1e2>
    1da4:	000027dc 	.word	0x000027dc
    1da8:	0000281c 	.word	0x0000281c
    1dac:	000027fc 	.word	0x000027fc
    1db0:	000027bc 	.word	0x000027bc
    1db4:	00002822 	.word	0x00002822
    1db8:	00002826 	.word	0x00002826
    1dbc:	00000000 	.word	0x00000000
    1dc0:	00001b77 	.word	0x00001b77

00001dc4 <_printf_common>:
    1dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dc8:	4691      	mov	r9, r2
    1dca:	461f      	mov	r7, r3
    1dcc:	688a      	ldr	r2, [r1, #8]
    1dce:	690b      	ldr	r3, [r1, #16]
    1dd0:	4606      	mov	r6, r0
    1dd2:	4293      	cmp	r3, r2
    1dd4:	bfb8      	it	lt
    1dd6:	4613      	movlt	r3, r2
    1dd8:	f8c9 3000 	str.w	r3, [r9]
    1ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    1de0:	460c      	mov	r4, r1
    1de2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1de6:	b112      	cbz	r2, 1dee <_printf_common+0x2a>
    1de8:	3301      	adds	r3, #1
    1dea:	f8c9 3000 	str.w	r3, [r9]
    1dee:	6823      	ldr	r3, [r4, #0]
    1df0:	0699      	lsls	r1, r3, #26
    1df2:	bf42      	ittt	mi
    1df4:	f8d9 3000 	ldrmi.w	r3, [r9]
    1df8:	3302      	addmi	r3, #2
    1dfa:	f8c9 3000 	strmi.w	r3, [r9]
    1dfe:	6825      	ldr	r5, [r4, #0]
    1e00:	f015 0506 	ands.w	r5, r5, #6
    1e04:	d107      	bne.n	1e16 <_printf_common+0x52>
    1e06:	f104 0a19 	add.w	sl, r4, #25
    1e0a:	68e3      	ldr	r3, [r4, #12]
    1e0c:	f8d9 2000 	ldr.w	r2, [r9]
    1e10:	1a9b      	subs	r3, r3, r2
    1e12:	42ab      	cmp	r3, r5
    1e14:	dc29      	bgt.n	1e6a <_printf_common+0xa6>
    1e16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    1e1a:	6822      	ldr	r2, [r4, #0]
    1e1c:	3300      	adds	r3, #0
    1e1e:	bf18      	it	ne
    1e20:	2301      	movne	r3, #1
    1e22:	0692      	lsls	r2, r2, #26
    1e24:	d42e      	bmi.n	1e84 <_printf_common+0xc0>
    1e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1e2a:	4639      	mov	r1, r7
    1e2c:	4630      	mov	r0, r6
    1e2e:	47c0      	blx	r8
    1e30:	3001      	adds	r0, #1
    1e32:	d021      	beq.n	1e78 <_printf_common+0xb4>
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	68e5      	ldr	r5, [r4, #12]
    1e38:	f003 0306 	and.w	r3, r3, #6
    1e3c:	2b04      	cmp	r3, #4
    1e3e:	bf18      	it	ne
    1e40:	2500      	movne	r5, #0
    1e42:	f8d9 2000 	ldr.w	r2, [r9]
    1e46:	f04f 0900 	mov.w	r9, #0
    1e4a:	bf08      	it	eq
    1e4c:	1aad      	subeq	r5, r5, r2
    1e4e:	68a3      	ldr	r3, [r4, #8]
    1e50:	6922      	ldr	r2, [r4, #16]
    1e52:	bf08      	it	eq
    1e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    1e58:	4293      	cmp	r3, r2
    1e5a:	bfc4      	itt	gt
    1e5c:	1a9b      	subgt	r3, r3, r2
    1e5e:	18ed      	addgt	r5, r5, r3
    1e60:	341a      	adds	r4, #26
    1e62:	454d      	cmp	r5, r9
    1e64:	d11a      	bne.n	1e9c <_printf_common+0xd8>
    1e66:	2000      	movs	r0, #0
    1e68:	e008      	b.n	1e7c <_printf_common+0xb8>
    1e6a:	2301      	movs	r3, #1
    1e6c:	4652      	mov	r2, sl
    1e6e:	4639      	mov	r1, r7
    1e70:	4630      	mov	r0, r6
    1e72:	47c0      	blx	r8
    1e74:	3001      	adds	r0, #1
    1e76:	d103      	bne.n	1e80 <_printf_common+0xbc>
    1e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e80:	3501      	adds	r5, #1
    1e82:	e7c2      	b.n	1e0a <_printf_common+0x46>
    1e84:	2030      	movs	r0, #48	; 0x30
    1e86:	18e1      	adds	r1, r4, r3
    1e88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    1e8c:	1c5a      	adds	r2, r3, #1
    1e8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    1e92:	4422      	add	r2, r4
    1e94:	3302      	adds	r3, #2
    1e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1e9a:	e7c4      	b.n	1e26 <_printf_common+0x62>
    1e9c:	2301      	movs	r3, #1
    1e9e:	4622      	mov	r2, r4
    1ea0:	4639      	mov	r1, r7
    1ea2:	4630      	mov	r0, r6
    1ea4:	47c0      	blx	r8
    1ea6:	3001      	adds	r0, #1
    1ea8:	d0e6      	beq.n	1e78 <_printf_common+0xb4>
    1eaa:	f109 0901 	add.w	r9, r9, #1
    1eae:	e7d8      	b.n	1e62 <_printf_common+0x9e>

00001eb0 <_printf_i>:
    1eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1eb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    1eb8:	460c      	mov	r4, r1
    1eba:	7e09      	ldrb	r1, [r1, #24]
    1ebc:	b085      	sub	sp, #20
    1ebe:	296e      	cmp	r1, #110	; 0x6e
    1ec0:	4617      	mov	r7, r2
    1ec2:	4606      	mov	r6, r0
    1ec4:	4698      	mov	r8, r3
    1ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ec8:	f000 80b3 	beq.w	2032 <_printf_i+0x182>
    1ecc:	d822      	bhi.n	1f14 <_printf_i+0x64>
    1ece:	2963      	cmp	r1, #99	; 0x63
    1ed0:	d036      	beq.n	1f40 <_printf_i+0x90>
    1ed2:	d80a      	bhi.n	1eea <_printf_i+0x3a>
    1ed4:	2900      	cmp	r1, #0
    1ed6:	f000 80b9 	beq.w	204c <_printf_i+0x19c>
    1eda:	2958      	cmp	r1, #88	; 0x58
    1edc:	f000 8083 	beq.w	1fe6 <_printf_i+0x136>
    1ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1ee4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    1ee8:	e032      	b.n	1f50 <_printf_i+0xa0>
    1eea:	2964      	cmp	r1, #100	; 0x64
    1eec:	d001      	beq.n	1ef2 <_printf_i+0x42>
    1eee:	2969      	cmp	r1, #105	; 0x69
    1ef0:	d1f6      	bne.n	1ee0 <_printf_i+0x30>
    1ef2:	6820      	ldr	r0, [r4, #0]
    1ef4:	6813      	ldr	r3, [r2, #0]
    1ef6:	0605      	lsls	r5, r0, #24
    1ef8:	f103 0104 	add.w	r1, r3, #4
    1efc:	d52a      	bpl.n	1f54 <_printf_i+0xa4>
    1efe:	681b      	ldr	r3, [r3, #0]
    1f00:	6011      	str	r1, [r2, #0]
    1f02:	2b00      	cmp	r3, #0
    1f04:	da03      	bge.n	1f0e <_printf_i+0x5e>
    1f06:	222d      	movs	r2, #45	; 0x2d
    1f08:	425b      	negs	r3, r3
    1f0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    1f0e:	486f      	ldr	r0, [pc, #444]	; (20cc <_printf_i+0x21c>)
    1f10:	220a      	movs	r2, #10
    1f12:	e039      	b.n	1f88 <_printf_i+0xd8>
    1f14:	2973      	cmp	r1, #115	; 0x73
    1f16:	f000 809d 	beq.w	2054 <_printf_i+0x1a4>
    1f1a:	d808      	bhi.n	1f2e <_printf_i+0x7e>
    1f1c:	296f      	cmp	r1, #111	; 0x6f
    1f1e:	d020      	beq.n	1f62 <_printf_i+0xb2>
    1f20:	2970      	cmp	r1, #112	; 0x70
    1f22:	d1dd      	bne.n	1ee0 <_printf_i+0x30>
    1f24:	6823      	ldr	r3, [r4, #0]
    1f26:	f043 0320 	orr.w	r3, r3, #32
    1f2a:	6023      	str	r3, [r4, #0]
    1f2c:	e003      	b.n	1f36 <_printf_i+0x86>
    1f2e:	2975      	cmp	r1, #117	; 0x75
    1f30:	d017      	beq.n	1f62 <_printf_i+0xb2>
    1f32:	2978      	cmp	r1, #120	; 0x78
    1f34:	d1d4      	bne.n	1ee0 <_printf_i+0x30>
    1f36:	2378      	movs	r3, #120	; 0x78
    1f38:	4865      	ldr	r0, [pc, #404]	; (20d0 <_printf_i+0x220>)
    1f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1f3e:	e055      	b.n	1fec <_printf_i+0x13c>
    1f40:	6813      	ldr	r3, [r2, #0]
    1f42:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1f46:	1d19      	adds	r1, r3, #4
    1f48:	681b      	ldr	r3, [r3, #0]
    1f4a:	6011      	str	r1, [r2, #0]
    1f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1f50:	2301      	movs	r3, #1
    1f52:	e08c      	b.n	206e <_printf_i+0x1be>
    1f54:	681b      	ldr	r3, [r3, #0]
    1f56:	f010 0f40 	tst.w	r0, #64	; 0x40
    1f5a:	6011      	str	r1, [r2, #0]
    1f5c:	bf18      	it	ne
    1f5e:	b21b      	sxthne	r3, r3
    1f60:	e7cf      	b.n	1f02 <_printf_i+0x52>
    1f62:	6813      	ldr	r3, [r2, #0]
    1f64:	6825      	ldr	r5, [r4, #0]
    1f66:	1d18      	adds	r0, r3, #4
    1f68:	6010      	str	r0, [r2, #0]
    1f6a:	0628      	lsls	r0, r5, #24
    1f6c:	d501      	bpl.n	1f72 <_printf_i+0xc2>
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	e002      	b.n	1f78 <_printf_i+0xc8>
    1f72:	0668      	lsls	r0, r5, #25
    1f74:	d5fb      	bpl.n	1f6e <_printf_i+0xbe>
    1f76:	881b      	ldrh	r3, [r3, #0]
    1f78:	296f      	cmp	r1, #111	; 0x6f
    1f7a:	bf14      	ite	ne
    1f7c:	220a      	movne	r2, #10
    1f7e:	2208      	moveq	r2, #8
    1f80:	4852      	ldr	r0, [pc, #328]	; (20cc <_printf_i+0x21c>)
    1f82:	2100      	movs	r1, #0
    1f84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    1f88:	6865      	ldr	r5, [r4, #4]
    1f8a:	2d00      	cmp	r5, #0
    1f8c:	60a5      	str	r5, [r4, #8]
    1f8e:	f2c0 8095 	blt.w	20bc <_printf_i+0x20c>
    1f92:	6821      	ldr	r1, [r4, #0]
    1f94:	f021 0104 	bic.w	r1, r1, #4
    1f98:	6021      	str	r1, [r4, #0]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d13d      	bne.n	201a <_printf_i+0x16a>
    1f9e:	2d00      	cmp	r5, #0
    1fa0:	f040 808e 	bne.w	20c0 <_printf_i+0x210>
    1fa4:	4665      	mov	r5, ip
    1fa6:	2a08      	cmp	r2, #8
    1fa8:	d10b      	bne.n	1fc2 <_printf_i+0x112>
    1faa:	6823      	ldr	r3, [r4, #0]
    1fac:	07db      	lsls	r3, r3, #31
    1fae:	d508      	bpl.n	1fc2 <_printf_i+0x112>
    1fb0:	6923      	ldr	r3, [r4, #16]
    1fb2:	6862      	ldr	r2, [r4, #4]
    1fb4:	429a      	cmp	r2, r3
    1fb6:	bfde      	ittt	le
    1fb8:	2330      	movle	r3, #48	; 0x30
    1fba:	f805 3c01 	strble.w	r3, [r5, #-1]
    1fbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    1fc2:	ebac 0305 	sub.w	r3, ip, r5
    1fc6:	6123      	str	r3, [r4, #16]
    1fc8:	f8cd 8000 	str.w	r8, [sp]
    1fcc:	463b      	mov	r3, r7
    1fce:	aa03      	add	r2, sp, #12
    1fd0:	4621      	mov	r1, r4
    1fd2:	4630      	mov	r0, r6
    1fd4:	f7ff fef6 	bl	1dc4 <_printf_common>
    1fd8:	3001      	adds	r0, #1
    1fda:	d14d      	bne.n	2078 <_printf_i+0x1c8>
    1fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1fe0:	b005      	add	sp, #20
    1fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fe6:	4839      	ldr	r0, [pc, #228]	; (20cc <_printf_i+0x21c>)
    1fe8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    1fec:	6813      	ldr	r3, [r2, #0]
    1fee:	6821      	ldr	r1, [r4, #0]
    1ff0:	1d1d      	adds	r5, r3, #4
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	6015      	str	r5, [r2, #0]
    1ff6:	060a      	lsls	r2, r1, #24
    1ff8:	d50b      	bpl.n	2012 <_printf_i+0x162>
    1ffa:	07ca      	lsls	r2, r1, #31
    1ffc:	bf44      	itt	mi
    1ffe:	f041 0120 	orrmi.w	r1, r1, #32
    2002:	6021      	strmi	r1, [r4, #0]
    2004:	b91b      	cbnz	r3, 200e <_printf_i+0x15e>
    2006:	6822      	ldr	r2, [r4, #0]
    2008:	f022 0220 	bic.w	r2, r2, #32
    200c:	6022      	str	r2, [r4, #0]
    200e:	2210      	movs	r2, #16
    2010:	e7b7      	b.n	1f82 <_printf_i+0xd2>
    2012:	064d      	lsls	r5, r1, #25
    2014:	bf48      	it	mi
    2016:	b29b      	uxthmi	r3, r3
    2018:	e7ef      	b.n	1ffa <_printf_i+0x14a>
    201a:	4665      	mov	r5, ip
    201c:	fbb3 f1f2 	udiv	r1, r3, r2
    2020:	fb02 3311 	mls	r3, r2, r1, r3
    2024:	5cc3      	ldrb	r3, [r0, r3]
    2026:	f805 3d01 	strb.w	r3, [r5, #-1]!
    202a:	460b      	mov	r3, r1
    202c:	2900      	cmp	r1, #0
    202e:	d1f5      	bne.n	201c <_printf_i+0x16c>
    2030:	e7b9      	b.n	1fa6 <_printf_i+0xf6>
    2032:	6813      	ldr	r3, [r2, #0]
    2034:	6825      	ldr	r5, [r4, #0]
    2036:	1d18      	adds	r0, r3, #4
    2038:	6961      	ldr	r1, [r4, #20]
    203a:	6010      	str	r0, [r2, #0]
    203c:	0628      	lsls	r0, r5, #24
    203e:	681b      	ldr	r3, [r3, #0]
    2040:	d501      	bpl.n	2046 <_printf_i+0x196>
    2042:	6019      	str	r1, [r3, #0]
    2044:	e002      	b.n	204c <_printf_i+0x19c>
    2046:	066a      	lsls	r2, r5, #25
    2048:	d5fb      	bpl.n	2042 <_printf_i+0x192>
    204a:	8019      	strh	r1, [r3, #0]
    204c:	2300      	movs	r3, #0
    204e:	4665      	mov	r5, ip
    2050:	6123      	str	r3, [r4, #16]
    2052:	e7b9      	b.n	1fc8 <_printf_i+0x118>
    2054:	6813      	ldr	r3, [r2, #0]
    2056:	1d19      	adds	r1, r3, #4
    2058:	6011      	str	r1, [r2, #0]
    205a:	681d      	ldr	r5, [r3, #0]
    205c:	6862      	ldr	r2, [r4, #4]
    205e:	2100      	movs	r1, #0
    2060:	4628      	mov	r0, r5
    2062:	f000 f8e1 	bl	2228 <memchr>
    2066:	b108      	cbz	r0, 206c <_printf_i+0x1bc>
    2068:	1b40      	subs	r0, r0, r5
    206a:	6060      	str	r0, [r4, #4]
    206c:	6863      	ldr	r3, [r4, #4]
    206e:	6123      	str	r3, [r4, #16]
    2070:	2300      	movs	r3, #0
    2072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2076:	e7a7      	b.n	1fc8 <_printf_i+0x118>
    2078:	6923      	ldr	r3, [r4, #16]
    207a:	462a      	mov	r2, r5
    207c:	4639      	mov	r1, r7
    207e:	4630      	mov	r0, r6
    2080:	47c0      	blx	r8
    2082:	3001      	adds	r0, #1
    2084:	d0aa      	beq.n	1fdc <_printf_i+0x12c>
    2086:	6823      	ldr	r3, [r4, #0]
    2088:	079b      	lsls	r3, r3, #30
    208a:	d413      	bmi.n	20b4 <_printf_i+0x204>
    208c:	68e0      	ldr	r0, [r4, #12]
    208e:	9b03      	ldr	r3, [sp, #12]
    2090:	4298      	cmp	r0, r3
    2092:	bfb8      	it	lt
    2094:	4618      	movlt	r0, r3
    2096:	e7a3      	b.n	1fe0 <_printf_i+0x130>
    2098:	2301      	movs	r3, #1
    209a:	464a      	mov	r2, r9
    209c:	4639      	mov	r1, r7
    209e:	4630      	mov	r0, r6
    20a0:	47c0      	blx	r8
    20a2:	3001      	adds	r0, #1
    20a4:	d09a      	beq.n	1fdc <_printf_i+0x12c>
    20a6:	3501      	adds	r5, #1
    20a8:	68e3      	ldr	r3, [r4, #12]
    20aa:	9a03      	ldr	r2, [sp, #12]
    20ac:	1a9b      	subs	r3, r3, r2
    20ae:	42ab      	cmp	r3, r5
    20b0:	dcf2      	bgt.n	2098 <_printf_i+0x1e8>
    20b2:	e7eb      	b.n	208c <_printf_i+0x1dc>
    20b4:	2500      	movs	r5, #0
    20b6:	f104 0919 	add.w	r9, r4, #25
    20ba:	e7f5      	b.n	20a8 <_printf_i+0x1f8>
    20bc:	2b00      	cmp	r3, #0
    20be:	d1ac      	bne.n	201a <_printf_i+0x16a>
    20c0:	7803      	ldrb	r3, [r0, #0]
    20c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    20c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    20ca:	e76c      	b.n	1fa6 <_printf_i+0xf6>
    20cc:	0000282d 	.word	0x0000282d
    20d0:	0000283e 	.word	0x0000283e

000020d4 <_sbrk_r>:
    20d4:	b538      	push	{r3, r4, r5, lr}
    20d6:	2300      	movs	r3, #0
    20d8:	4c05      	ldr	r4, [pc, #20]	; (20f0 <_sbrk_r+0x1c>)
    20da:	4605      	mov	r5, r0
    20dc:	4608      	mov	r0, r1
    20de:	6023      	str	r3, [r4, #0]
    20e0:	f000 f8ec 	bl	22bc <_sbrk>
    20e4:	1c43      	adds	r3, r0, #1
    20e6:	d102      	bne.n	20ee <_sbrk_r+0x1a>
    20e8:	6823      	ldr	r3, [r4, #0]
    20ea:	b103      	cbz	r3, 20ee <_sbrk_r+0x1a>
    20ec:	602b      	str	r3, [r5, #0]
    20ee:	bd38      	pop	{r3, r4, r5, pc}
    20f0:	20000080 	.word	0x20000080

000020f4 <__sread>:
    20f4:	b510      	push	{r4, lr}
    20f6:	460c      	mov	r4, r1
    20f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    20fc:	f000 f8a4 	bl	2248 <_read_r>
    2100:	2800      	cmp	r0, #0
    2102:	bfab      	itete	ge
    2104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    2106:	89a3      	ldrhlt	r3, [r4, #12]
    2108:	181b      	addge	r3, r3, r0
    210a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    210e:	bfac      	ite	ge
    2110:	6563      	strge	r3, [r4, #84]	; 0x54
    2112:	81a3      	strhlt	r3, [r4, #12]
    2114:	bd10      	pop	{r4, pc}

00002116 <__swrite>:
    2116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    211a:	461f      	mov	r7, r3
    211c:	898b      	ldrh	r3, [r1, #12]
    211e:	4605      	mov	r5, r0
    2120:	05db      	lsls	r3, r3, #23
    2122:	460c      	mov	r4, r1
    2124:	4616      	mov	r6, r2
    2126:	d505      	bpl.n	2134 <__swrite+0x1e>
    2128:	2302      	movs	r3, #2
    212a:	2200      	movs	r2, #0
    212c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2130:	f000 f868 	bl	2204 <_lseek_r>
    2134:	89a3      	ldrh	r3, [r4, #12]
    2136:	4632      	mov	r2, r6
    2138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    213c:	81a3      	strh	r3, [r4, #12]
    213e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2142:	463b      	mov	r3, r7
    2144:	4628      	mov	r0, r5
    2146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    214a:	f000 b817 	b.w	217c <_write_r>

0000214e <__sseek>:
    214e:	b510      	push	{r4, lr}
    2150:	460c      	mov	r4, r1
    2152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2156:	f000 f855 	bl	2204 <_lseek_r>
    215a:	1c43      	adds	r3, r0, #1
    215c:	89a3      	ldrh	r3, [r4, #12]
    215e:	bf15      	itete	ne
    2160:	6560      	strne	r0, [r4, #84]	; 0x54
    2162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    216a:	81a3      	strheq	r3, [r4, #12]
    216c:	bf18      	it	ne
    216e:	81a3      	strhne	r3, [r4, #12]
    2170:	bd10      	pop	{r4, pc}

00002172 <__sclose>:
    2172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2176:	f000 b813 	b.w	21a0 <_close_r>
	...

0000217c <_write_r>:
    217c:	b538      	push	{r3, r4, r5, lr}
    217e:	4605      	mov	r5, r0
    2180:	4608      	mov	r0, r1
    2182:	4611      	mov	r1, r2
    2184:	2200      	movs	r2, #0
    2186:	4c05      	ldr	r4, [pc, #20]	; (219c <_write_r+0x20>)
    2188:	6022      	str	r2, [r4, #0]
    218a:	461a      	mov	r2, r3
    218c:	f7fe fbd4 	bl	938 <_write>
    2190:	1c43      	adds	r3, r0, #1
    2192:	d102      	bne.n	219a <_write_r+0x1e>
    2194:	6823      	ldr	r3, [r4, #0]
    2196:	b103      	cbz	r3, 219a <_write_r+0x1e>
    2198:	602b      	str	r3, [r5, #0]
    219a:	bd38      	pop	{r3, r4, r5, pc}
    219c:	20000080 	.word	0x20000080

000021a0 <_close_r>:
    21a0:	b538      	push	{r3, r4, r5, lr}
    21a2:	2300      	movs	r3, #0
    21a4:	4c05      	ldr	r4, [pc, #20]	; (21bc <_close_r+0x1c>)
    21a6:	4605      	mov	r5, r0
    21a8:	4608      	mov	r0, r1
    21aa:	6023      	str	r3, [r4, #0]
    21ac:	f000 f85e 	bl	226c <_close>
    21b0:	1c43      	adds	r3, r0, #1
    21b2:	d102      	bne.n	21ba <_close_r+0x1a>
    21b4:	6823      	ldr	r3, [r4, #0]
    21b6:	b103      	cbz	r3, 21ba <_close_r+0x1a>
    21b8:	602b      	str	r3, [r5, #0]
    21ba:	bd38      	pop	{r3, r4, r5, pc}
    21bc:	20000080 	.word	0x20000080

000021c0 <_fstat_r>:
    21c0:	b538      	push	{r3, r4, r5, lr}
    21c2:	2300      	movs	r3, #0
    21c4:	4c06      	ldr	r4, [pc, #24]	; (21e0 <_fstat_r+0x20>)
    21c6:	4605      	mov	r5, r0
    21c8:	4608      	mov	r0, r1
    21ca:	4611      	mov	r1, r2
    21cc:	6023      	str	r3, [r4, #0]
    21ce:	f000 f855 	bl	227c <_fstat>
    21d2:	1c43      	adds	r3, r0, #1
    21d4:	d102      	bne.n	21dc <_fstat_r+0x1c>
    21d6:	6823      	ldr	r3, [r4, #0]
    21d8:	b103      	cbz	r3, 21dc <_fstat_r+0x1c>
    21da:	602b      	str	r3, [r5, #0]
    21dc:	bd38      	pop	{r3, r4, r5, pc}
    21de:	bf00      	nop
    21e0:	20000080 	.word	0x20000080

000021e4 <_isatty_r>:
    21e4:	b538      	push	{r3, r4, r5, lr}
    21e6:	2300      	movs	r3, #0
    21e8:	4c05      	ldr	r4, [pc, #20]	; (2200 <_isatty_r+0x1c>)
    21ea:	4605      	mov	r5, r0
    21ec:	4608      	mov	r0, r1
    21ee:	6023      	str	r3, [r4, #0]
    21f0:	f000 f84c 	bl	228c <_isatty>
    21f4:	1c43      	adds	r3, r0, #1
    21f6:	d102      	bne.n	21fe <_isatty_r+0x1a>
    21f8:	6823      	ldr	r3, [r4, #0]
    21fa:	b103      	cbz	r3, 21fe <_isatty_r+0x1a>
    21fc:	602b      	str	r3, [r5, #0]
    21fe:	bd38      	pop	{r3, r4, r5, pc}
    2200:	20000080 	.word	0x20000080

00002204 <_lseek_r>:
    2204:	b538      	push	{r3, r4, r5, lr}
    2206:	4605      	mov	r5, r0
    2208:	4608      	mov	r0, r1
    220a:	4611      	mov	r1, r2
    220c:	2200      	movs	r2, #0
    220e:	4c05      	ldr	r4, [pc, #20]	; (2224 <_lseek_r+0x20>)
    2210:	6022      	str	r2, [r4, #0]
    2212:	461a      	mov	r2, r3
    2214:	f000 f842 	bl	229c <_lseek>
    2218:	1c43      	adds	r3, r0, #1
    221a:	d102      	bne.n	2222 <_lseek_r+0x1e>
    221c:	6823      	ldr	r3, [r4, #0]
    221e:	b103      	cbz	r3, 2222 <_lseek_r+0x1e>
    2220:	602b      	str	r3, [r5, #0]
    2222:	bd38      	pop	{r3, r4, r5, pc}
    2224:	20000080 	.word	0x20000080

00002228 <memchr>:
    2228:	b510      	push	{r4, lr}
    222a:	b2c9      	uxtb	r1, r1
    222c:	4402      	add	r2, r0
    222e:	4290      	cmp	r0, r2
    2230:	4603      	mov	r3, r0
    2232:	d101      	bne.n	2238 <memchr+0x10>
    2234:	2300      	movs	r3, #0
    2236:	e003      	b.n	2240 <memchr+0x18>
    2238:	781c      	ldrb	r4, [r3, #0]
    223a:	3001      	adds	r0, #1
    223c:	428c      	cmp	r4, r1
    223e:	d1f6      	bne.n	222e <memchr+0x6>
    2240:	4618      	mov	r0, r3
    2242:	bd10      	pop	{r4, pc}

00002244 <__malloc_lock>:
    2244:	4770      	bx	lr

00002246 <__malloc_unlock>:
    2246:	4770      	bx	lr

00002248 <_read_r>:
    2248:	b538      	push	{r3, r4, r5, lr}
    224a:	4605      	mov	r5, r0
    224c:	4608      	mov	r0, r1
    224e:	4611      	mov	r1, r2
    2250:	2200      	movs	r2, #0
    2252:	4c05      	ldr	r4, [pc, #20]	; (2268 <_read_r+0x20>)
    2254:	6022      	str	r2, [r4, #0]
    2256:	461a      	mov	r2, r3
    2258:	f000 f828 	bl	22ac <_read>
    225c:	1c43      	adds	r3, r0, #1
    225e:	d102      	bne.n	2266 <_read_r+0x1e>
    2260:	6823      	ldr	r3, [r4, #0]
    2262:	b103      	cbz	r3, 2266 <_read_r+0x1e>
    2264:	602b      	str	r3, [r5, #0]
    2266:	bd38      	pop	{r3, r4, r5, pc}
    2268:	20000080 	.word	0x20000080

0000226c <_close>:
    226c:	2258      	movs	r2, #88	; 0x58
    226e:	4b02      	ldr	r3, [pc, #8]	; (2278 <_close+0xc>)
    2270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2274:	601a      	str	r2, [r3, #0]
    2276:	4770      	bx	lr
    2278:	20000080 	.word	0x20000080

0000227c <_fstat>:
    227c:	2258      	movs	r2, #88	; 0x58
    227e:	4b02      	ldr	r3, [pc, #8]	; (2288 <_fstat+0xc>)
    2280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2284:	601a      	str	r2, [r3, #0]
    2286:	4770      	bx	lr
    2288:	20000080 	.word	0x20000080

0000228c <_isatty>:
    228c:	2258      	movs	r2, #88	; 0x58
    228e:	4b02      	ldr	r3, [pc, #8]	; (2298 <_isatty+0xc>)
    2290:	2000      	movs	r0, #0
    2292:	601a      	str	r2, [r3, #0]
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	20000080 	.word	0x20000080

0000229c <_lseek>:
    229c:	2258      	movs	r2, #88	; 0x58
    229e:	4b02      	ldr	r3, [pc, #8]	; (22a8 <_lseek+0xc>)
    22a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22a4:	601a      	str	r2, [r3, #0]
    22a6:	4770      	bx	lr
    22a8:	20000080 	.word	0x20000080

000022ac <_read>:
    22ac:	2258      	movs	r2, #88	; 0x58
    22ae:	4b02      	ldr	r3, [pc, #8]	; (22b8 <_read+0xc>)
    22b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22b4:	601a      	str	r2, [r3, #0]
    22b6:	4770      	bx	lr
    22b8:	20000080 	.word	0x20000080

000022bc <_sbrk>:
    22bc:	4a04      	ldr	r2, [pc, #16]	; (22d0 <_sbrk+0x14>)
    22be:	4905      	ldr	r1, [pc, #20]	; (22d4 <_sbrk+0x18>)
    22c0:	6813      	ldr	r3, [r2, #0]
    22c2:	2b00      	cmp	r3, #0
    22c4:	bf08      	it	eq
    22c6:	460b      	moveq	r3, r1
    22c8:	4418      	add	r0, r3
    22ca:	6010      	str	r0, [r2, #0]
    22cc:	4618      	mov	r0, r3
    22ce:	4770      	bx	lr
    22d0:	20000070 	.word	0x20000070
    22d4:	20000088 	.word	0x20000088

000022d8 <_exit>:
    22d8:	e7fe      	b.n	22d8 <_exit>
    22da:	bf00      	nop

000022dc <_init>:
    22dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22de:	bf00      	nop

000022e0 <_fini>:
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e2:	bf00      	nop
    22e4:	6174530a 	.word	0x6174530a
    22e8:	31206567 	.word	0x31206567
    22ec:	54202d20 	.word	0x54202d20
    22f0:	72656d69 	.word	0x72656d69
    22f4:	696e4920 	.word	0x696e4920
    22f8:	6c616974 	.word	0x6c616974
    22fc:	74617369 	.word	0x74617369
    2300:	0a6e6f69 	.word	0x0a6e6f69
    2304:	00000000 	.word	0x00000000
    2308:	656d6954 	.word	0x656d6954
    230c:	6e452072 	.word	0x6e452072
    2310:	656c6261 	.word	0x656c6261
    2314:	00000064 	.word	0x00000064
    2318:	54202a2a 	.word	0x54202a2a
    231c:	20545345 	.word	0x20545345
    2320:	4c494146 	.word	0x4c494146
    2324:	2a204445 	.word	0x2a204445
    2328:	45202c2a 	.word	0x45202c2a
    232c:	726f7272 	.word	0x726f7272
    2330:	646f6320 	.word	0x646f6320
    2334:	28203a65 	.word	0x28203a65
    2338:	78257830 	.word	0x78257830
    233c:	00000a29 	.word	0x00000a29
    2340:	20747845 	.word	0x20747845
    2344:	62616e45 	.word	0x62616e45
    2348:	4e20656c 	.word	0x4e20656c
    234c:	5320746f 	.word	0x5320746f
    2350:	63656c65 	.word	0x63656c65
    2354:	00646574 	.word	0x00646574
    2358:	20747845 	.word	0x20747845
    235c:	636f6c43 	.word	0x636f6c43
    2360:	6f4e206b 	.word	0x6f4e206b
    2364:	65532074 	.word	0x65532074
    2368:	7463656c 	.word	0x7463656c
    236c:	00006465 	.word	0x00006465
    2370:	656d6954 	.word	0x656d6954
    2374:	52492072 	.word	0x52492072
    2378:	6e452051 	.word	0x6e452051
    237c:	656c6261 	.word	0x656c6261
    2380:	00000064 	.word	0x00000064
    2384:	6f6c6552 	.word	0x6f6c6552
    2388:	56206461 	.word	0x56206461
    238c:	65756c61 	.word	0x65756c61
    2390:	20666f20 	.word	0x20666f20
    2394:	30467830 	.word	0x30467830
    2398:	00000030 	.word	0x00000030
    239c:	6d69540a 	.word	0x6d69540a
    23a0:	49207265 	.word	0x49207265
    23a4:	6974696e 	.word	0x6974696e
    23a8:	73696c61 	.word	0x73696c61
    23ac:	6f697461 	.word	0x6f697461
    23b0:	7553206e 	.word	0x7553206e
    23b4:	73656363 	.word	0x73656363
    23b8:	6c756673 	.word	0x6c756673
    23bc:	0000000a 	.word	0x0000000a
    23c0:	202a2a0a 	.word	0x202a2a0a
    23c4:	54534554 	.word	0x54534554
    23c8:	49414620 	.word	0x49414620
    23cc:	2044454c 	.word	0x2044454c
    23d0:	54202a2a 	.word	0x54202a2a
    23d4:	72656d69 	.word	0x72656d69
    23d8:	696e4920 	.word	0x696e4920
    23dc:	6c616974 	.word	0x6c616974
    23e0:	74617369 	.word	0x74617369
    23e4:	206e6f69 	.word	0x206e6f69
    23e8:	6c696146 	.word	0x6c696146
    23ec:	50206465 	.word	0x50206465
    23f0:	72676f72 	.word	0x72676f72
    23f4:	57206d61 	.word	0x57206d61
    23f8:	206c6c69 	.word	0x206c6c69
    23fc:	20776f4e 	.word	0x20776f4e
    2400:	74697551 	.word	0x74697551
    2404:	7245202c 	.word	0x7245202c
    2408:	20726f72 	.word	0x20726f72
    240c:	65646f63 	.word	0x65646f63
    2410:	3028203a 	.word	0x3028203a
    2414:	29782578 	.word	0x29782578
    2418:	0000000a 	.word	0x0000000a
    241c:	67617453 	.word	0x67617453
    2420:	20322065 	.word	0x20322065
    2424:	6e69202d 	.word	0x6e69202d
    2428:	72726574 	.word	0x72726574
    242c:	0a747075 	.word	0x0a747075
    2430:	00000000 	.word	0x00000000
    2434:	656d6954 	.word	0x656d6954
    2438:	52492072 	.word	0x52492072
    243c:	00000a51 	.word	0x00000a51
    2440:	656d6954 	.word	0x656d6954
    2444:	74532072 	.word	0x74532072
    2448:	73757461 	.word	0x73757461
    244c:	7525203a 	.word	0x7525203a
    2450:	0000000a 	.word	0x0000000a
    2454:	656d6954 	.word	0x656d6954
    2458:	52492072 	.word	0x52492072
    245c:	69442051 	.word	0x69442051
    2460:	6c626173 	.word	0x6c626173
    2464:	00006465 	.word	0x00006465
    2468:	656d6954 	.word	0x656d6954
    246c:	61562072 	.word	0x61562072
    2470:	3a65756c 	.word	0x3a65756c
    2474:	0a752520 	.word	0x0a752520
    2478:	00000000 	.word	0x00000000
    247c:	656d6954 	.word	0x656d6954
    2480:	65522072 	.word	0x65522072
    2484:	64616f6c 	.word	0x64616f6c
    2488:	6c615620 	.word	0x6c615620
    248c:	203a6575 	.word	0x203a6575
    2490:	000a7525 	.word	0x000a7525
    2494:	656d6954 	.word	0x656d6954
    2498:	65522072 	.word	0x65522072
    249c:	64616f6c 	.word	0x64616f6c
    24a0:	6c615620 	.word	0x6c615620
    24a4:	6e206575 	.word	0x6e206575
    24a8:	7320776f 	.word	0x7320776f
    24ac:	74207465 	.word	0x74207465
    24b0:	25203a6f 	.word	0x25203a6f
    24b4:	00000a75 	.word	0x00000a75
    24b8:	656d6954 	.word	0x656d6954
    24bc:	65522072 	.word	0x65522072
    24c0:	64616f6c 	.word	0x64616f6c
    24c4:	6c615620 	.word	0x6c615620
    24c8:	49206575 	.word	0x49206575
    24cc:	6f432073 	.word	0x6f432073
    24d0:	63657272 	.word	0x63657272
    24d4:	00000074 	.word	0x00000074
    24d8:	656d6954 	.word	0x656d6954
    24dc:	61562072 	.word	0x61562072
    24e0:	2065756c 	.word	0x2065756c
    24e4:	20746553 	.word	0x20746553
    24e8:	33206f74 	.word	0x33206f74
    24ec:	00003030 	.word	0x00003030
    24f0:	656d6954 	.word	0x656d6954
    24f4:	52492072 	.word	0x52492072
    24f8:	6e652051 	.word	0x6e652051
    24fc:	656c6261 	.word	0x656c6261
    2500:	00000064 	.word	0x00000064
    2504:	6d69540a 	.word	0x6d69540a
    2508:	53207265 	.word	0x53207265
    250c:	70706f74 	.word	0x70706f74
    2510:	00006465 	.word	0x00006465
    2514:	54202a2a 	.word	0x54202a2a
    2518:	72656d69 	.word	0x72656d69
    251c:	51524920 	.word	0x51524920
    2520:	73655420 	.word	0x73655420
    2524:	61502074 	.word	0x61502074
    2528:	64657373 	.word	0x64657373
    252c:	0a2a2a20 	.word	0x0a2a2a20
    2530:	00000000 	.word	0x00000000
    2534:	6174530a 	.word	0x6174530a
    2538:	33206567 	.word	0x33206567
    253c:	50202d20 	.word	0x50202d20
    2540:	696c6c6f 	.word	0x696c6c6f
    2544:	000a676e 	.word	0x000a676e
    2548:	656d6954 	.word	0x656d6954
    254c:	65522072 	.word	0x65522072
    2550:	64616f6c 	.word	0x64616f6c
    2554:	696e4920 	.word	0x696e4920
    2558:	6c616974 	.word	0x6c616974
    255c:	64657369 	.word	0x64657369
    2560:	20736120 	.word	0x20736120
    2564:	30467830 	.word	0x30467830
    2568:	00000030 	.word	0x00000030
    256c:	54202a2a 	.word	0x54202a2a
    2570:	72656d69 	.word	0x72656d69
    2574:	6c6f5020 	.word	0x6c6f5020
    2578:	676e696c 	.word	0x676e696c
    257c:	73655420 	.word	0x73655420
    2580:	61502074 	.word	0x61502074
    2584:	64657373 	.word	0x64657373
    2588:	0000000a 	.word	0x0000000a
    258c:	6174530a 	.word	0x6174530a
    2590:	34206567 	.word	0x34206567
    2594:	45202d20 	.word	0x45202d20
    2598:	53207478 	.word	0x53207478
    259c:	756d6974 	.word	0x756d6974
    25a0:	000a696c 	.word	0x000a696c
    25a4:	532d200a 	.word	0x532d200a
    25a8:	65676174 	.word	0x65676174
    25ac:	20613420 	.word	0x20613420
    25b0:	7845202d 	.word	0x7845202d
    25b4:	6c432074 	.word	0x6c432074
    25b8:	0a6b636f 	.word	0x0a6b636f
    25bc:	00000000 	.word	0x00000000
    25c0:	656d6954 	.word	0x656d6954
    25c4:	52492072 	.word	0x52492072
    25c8:	00000051 	.word	0x00000051
    25cc:	532d200a 	.word	0x532d200a
    25d0:	65676174 	.word	0x65676174
    25d4:	20623420 	.word	0x20623420
    25d8:	7845202d 	.word	0x7845202d
    25dc:	6e452074 	.word	0x6e452074
    25e0:	656c6261 	.word	0x656c6261
    25e4:	0000000a 	.word	0x0000000a
    25e8:	656d6954 	.word	0x656d6954
    25ec:	20302072 	.word	0x20302072
    25f0:	62616e45 	.word	0x62616e45
    25f4:	0a64656c 	.word	0x0a64656c
    25f8:	00000000 	.word	0x00000000
    25fc:	61736944 	.word	0x61736944
    2600:	20656c62 	.word	0x20656c62
    2604:	74736554 	.word	0x74736554
    2608:	73615020 	.word	0x73615020
    260c:	00646573 	.word	0x00646573
    2610:	54202a2a 	.word	0x54202a2a
    2614:	20545345 	.word	0x20545345
    2618:	4c494146 	.word	0x4c494146
    261c:	2a204445 	.word	0x2a204445
    2620:	6944202a 	.word	0x6944202a
    2624:	6c626173 	.word	0x6c626173
    2628:	65542065 	.word	0x65542065
    262c:	00007473 	.word	0x00007473
    2630:	62616e45 	.word	0x62616e45
    2634:	5420656c 	.word	0x5420656c
    2638:	20747365 	.word	0x20747365
    263c:	73736150 	.word	0x73736150
    2640:	00006465 	.word	0x00006465
    2644:	54202a2a 	.word	0x54202a2a
    2648:	20545345 	.word	0x20545345
    264c:	4c494146 	.word	0x4c494146
    2650:	2a204445 	.word	0x2a204445
    2654:	6e45202a 	.word	0x6e45202a
    2658:	656c6261 	.word	0x656c6261
    265c:	73655420 	.word	0x73655420
    2660:	00000074 	.word	0x00000074
    2664:	6d69540a 	.word	0x6d69540a
    2668:	65207265 	.word	0x65207265
    266c:	6c62616e 	.word	0x6c62616e
    2670:	69642f65 	.word	0x69642f65
    2674:	6c626173 	.word	0x6c626173
    2678:	6f742065 	.word	0x6f742065
    267c:	656c6767 	.word	0x656c6767
    2680:	64252064 	.word	0x64252064
    2684:	6d697420 	.word	0x6d697420
    2688:	000a7365 	.word	0x000a7365
    268c:	7478450a 	.word	0x7478450a
    2690:	69745320 	.word	0x69745320
    2694:	696c756d 	.word	0x696c756d
    2698:	73655420 	.word	0x73655420
    269c:	43207374 	.word	0x43207374
    26a0:	6c706d6f 	.word	0x6c706d6f
    26a4:	64657465 	.word	0x64657465
    26a8:	63755320 	.word	0x63755320
    26ac:	73736563 	.word	0x73736563
    26b0:	6c6c7566 	.word	0x6c6c7566
    26b4:	00000a79 	.word	0x00000a79
    26b8:	202a2a0a 	.word	0x202a2a0a
    26bc:	54534554 	.word	0x54534554
    26c0:	49414620 	.word	0x49414620
    26c4:	2044454c 	.word	0x2044454c
    26c8:	202c2a2a 	.word	0x202c2a2a
    26cc:	6f727245 	.word	0x6f727245
    26d0:	6f632072 	.word	0x6f632072
    26d4:	203a6564 	.word	0x203a6564
    26d8:	25783028 	.word	0x25783028
    26dc:	00002978 	.word	0x00002978
    26e0:	726f430a 	.word	0x726f430a
    26e4:	2d786574 	.word	0x2d786574
    26e8:	4420334d 	.word	0x4420334d
    26ec:	67697365 	.word	0x67697365
    26f0:	6174536e 	.word	0x6174536e
    26f4:	2d207472 	.word	0x2d207472
    26f8:	6d695420 	.word	0x6d695420
    26fc:	44207265 	.word	0x44207265
    2700:	65766972 	.word	0x65766972
    2704:	65542072 	.word	0x65542072
    2708:	2d207473 	.word	0x2d207473
    270c:	76657220 	.word	0x76657220
    2710:	6f697369 	.word	0x6f697369
    2714:	5224206e 	.word	0x5224206e
    2718:	73697665 	.word	0x73697665
    271c:	3a6e6f69 	.word	0x3a6e6f69
    2720:	33343220 	.word	0x33343220
    2724:	20343433 	.word	0x20343433
    2728:	00000a24 	.word	0x00000a24
    272c:	54202a2a 	.word	0x54202a2a
    2730:	20545345 	.word	0x20545345
    2734:	50494b53 	.word	0x50494b53
    2738:	20444550 	.word	0x20444550
    273c:	54202a2a 	.word	0x54202a2a
    2740:	72656d69 	.word	0x72656d69
    2744:	6e203020 	.word	0x6e203020
    2748:	7020746f 	.word	0x7020746f
    274c:	65736572 	.word	0x65736572
    2750:	002e746e 	.word	0x002e746e
    2754:	54202a2a 	.word	0x54202a2a
    2758:	20545345 	.word	0x20545345
    275c:	4c494146 	.word	0x4c494146
    2760:	2a204445 	.word	0x2a204445
    2764:	45202c2a 	.word	0x45202c2a
    2768:	726f7272 	.word	0x726f7272
    276c:	646f6320 	.word	0x646f6320
    2770:	28203a65 	.word	0x28203a65
    2774:	78257830 	.word	0x78257830
    2778:	000a0a29 	.word	0x000a0a29
    277c:	54202a2a 	.word	0x54202a2a
    2780:	20545345 	.word	0x20545345
    2784:	50494b53 	.word	0x50494b53
    2788:	20444550 	.word	0x20444550
    278c:	47202a2a 	.word	0x47202a2a
    2790:	204f4950 	.word	0x204f4950
    2794:	6f6e2030 	.word	0x6f6e2030
    2798:	72702074 	.word	0x72702074
    279c:	6e657365 	.word	0x6e657365
    27a0:	00002e74 	.word	0x00002e74
    27a4:	54202a2a 	.word	0x54202a2a
    27a8:	20545345 	.word	0x20545345
    27ac:	53534150 	.word	0x53534150
    27b0:	2a204445 	.word	0x2a204445
    27b4:	00000a2a 	.word	0x00000a2a

000027b8 <_global_impure_ptr>:
    27b8:	20000008                                ... 

000027bc <__sf_fake_stderr>:
	...

000027dc <__sf_fake_stdin>:
	...

000027fc <__sf_fake_stdout>:
	...
    281c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    282c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    283c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    284c:	                                         ef.
