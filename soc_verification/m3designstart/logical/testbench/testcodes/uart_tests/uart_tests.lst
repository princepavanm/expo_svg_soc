
uart_tests.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	00001839 	.word	0x00001839
      44:	00000181 	.word	0x00000181
      48:	00001891 	.word	0x00001891
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	0000018b 	.word	0x0000018b
      5c:	0000018d 	.word	0x0000018d
      60:	0000018f 	.word	0x0000018f
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00001939 	.word	0x00001939
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	000001ad 	.word	0x000001ad
      a0:	000001af 	.word	0x000001af
      a4:	000001b1 	.word	0x000001b1
      a8:	000001b3 	.word	0x000001b3
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	00001791 	.word	0x00001791
      f8:	000017e5 	.word	0x000017e5
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000018e5 	.word	0x000018e5

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f001 fcfd 	bl	1b48 <main>
    bl    exit
     14e:	f001 fe2b 	bl	1da8 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	0000347f 	.word	0x0000347f
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	200000a8 	.word	0x200000a8
    ldr     r0,=SystemInit
     168:	00001d99 	.word	0x00001d99

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <SysTick_Handler+0x2>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <Spare1_Handler+0x2>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <Spare11_Handler+0x2>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <TRNG_Handler+0x2>
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <TRNG_Handler+0x4>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <PORT5_COMB_Handler+0x2>

000001f0 <simple_uart_baud_test_single.constprop.7>:

  return(return_val);

}
/* --------------------- */
int simple_uart_baud_test_single(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART,
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	4604      	mov	r4, r0
  int return_val=0;
  int err_code=0;
  CM3DS_MPS2_UART_TypeDef *TX_UART;
  CM3DS_MPS2_UART_TypeDef *RX_UART;
  char        received_text[20];
  const char  transmit_text[20] = "Hello world\n";
     1f4:	2700      	movs	r7, #0
int simple_uart_baud_test_single(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART,
     1f6:	460e      	mov	r6, r1
     1f8:	b08b      	sub	sp, #44	; 0x2c
  const char  transmit_text[20] = "Hello world\n";
     1fa:	4b3b      	ldr	r3, [pc, #236]	; (2e8 <Stack_Size+0xe8>)
     1fc:	ad05      	add	r5, sp, #20
     1fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     200:	c507      	stmia	r5!, {r0, r1, r2}
    puts ("ERROR: Input parameter invalid in function 'simple_uart_baud_test_single'.");
    return 1;
    }

  /* UART can be programmed with different baud rate */
  TX_UART->BAUDDIV = tx_bauddiv;
     202:	493a      	ldr	r1, [pc, #232]	; (2ec <Stack_Size+0xec>)
  const char  transmit_text[20] = "Hello world\n";
     204:	702b      	strb	r3, [r5, #0]
     206:	f8cd 7021 	str.w	r7, [sp, #33]	; 0x21
     20a:	9709      	str	r7, [sp, #36]	; 0x24
  TX_UART->BAUDDIV = tx_bauddiv;
     20c:	610c      	str	r4, [r1, #16]
  if (TX_UART->BAUDDIV != tx_bauddiv) { err_code += (1<<0);}
     20e:	6909      	ldr	r1, [r1, #16]
  RX_UART->BAUDDIV = rx_bauddiv;
     210:	4a37      	ldr	r2, [pc, #220]	; (2f0 <Stack_Size+0xf0>)
  if (TX_UART->BAUDDIV != tx_bauddiv) { err_code += (1<<0);}
     212:	1a64      	subs	r4, r4, r1
     214:	bf18      	it	ne
     216:	2401      	movne	r4, #1
  RX_UART->BAUDDIV = rx_bauddiv;
     218:	6116      	str	r6, [r2, #16]
  if (RX_UART->BAUDDIV != rx_bauddiv) { err_code += (1<<1);}
     21a:	6913      	ldr	r3, [r2, #16]
     21c:	429e      	cmp	r6, r3

  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     21e:	4b33      	ldr	r3, [pc, #204]	; (2ec <Stack_Size+0xec>)
  if (RX_UART->BAUDDIV != rx_bauddiv) { err_code += (1<<1);}
     220:	bf18      	it	ne
     222:	3402      	addne	r4, #2
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     224:	689a      	ldr	r2, [r3, #8]
     226:	f042 0201 	orr.w	r2, r2, #1
     22a:	609a      	str	r2, [r3, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     22c:	689b      	ldr	r3, [r3, #8]
     22e:	07dd      	lsls	r5, r3, #31
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     230:	4b2f      	ldr	r3, [pc, #188]	; (2f0 <Stack_Size+0xf0>)
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     232:	bf58      	it	pl
     234:	3404      	addpl	r4, #4
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     236:	689a      	ldr	r2, [r3, #8]
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
      TX_UART->DATA = transmit_text[tx_count];
      tx_count++;
      }
    /* rx process */
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     238:	4d2d      	ldr	r5, [pc, #180]	; (2f0 <Stack_Size+0xf0>)
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     23a:	f042 0202 	orr.w	r2, r2, #2
     23e:	609a      	str	r2, [r3, #8]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     240:	689b      	ldr	r3, [r3, #8]
     242:	0798      	lsls	r0, r3, #30
  str_size = strlen(transmit_text);
     244:	a805      	add	r0, sp, #20
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     246:	bf58      	it	pl
     248:	3408      	addpl	r4, #8
  str_size = strlen(transmit_text);
     24a:	f001 fe4f 	bl	1eec <strlen>
  rx_count = 0;
     24e:	2300      	movs	r3, #0
     250:	2201      	movs	r2, #1
  tx_count = 0;
     252:	469e      	mov	lr, r3
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     254:	f8df c094 	ldr.w	ip, [pc, #148]	; 2ec <Stack_Size+0xec>
     258:	f8dc 1004 	ldr.w	r1, [ip, #4]
      received_text[rx_count] = RX_UART->DATA;
     25c:	ae0a      	add	r6, sp, #40	; 0x28
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     25e:	f011 0f01 	tst.w	r1, #1
      received_text[rx_count] = RX_UART->DATA;
     262:	eb06 0703 	add.w	r7, r6, r3
     266:	f103 0602 	add.w	r6, r3, #2
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     26a:	d109      	bne.n	280 <Stack_Size+0x80>
     26c:	4570      	cmp	r0, lr
     26e:	d907      	bls.n	280 <Stack_Size+0x80>
      TX_UART->DATA = transmit_text[tx_count];
     270:	a90a      	add	r1, sp, #40	; 0x28
     272:	4471      	add	r1, lr
     274:	f811 1c14 	ldrb.w	r1, [r1, #-20]
      tx_count++;
     278:	f10e 0e01 	add.w	lr, lr, #1
      TX_UART->DATA = transmit_text[tx_count];
     27c:	f8cc 1000 	str.w	r1, [ip]
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     280:	6869      	ldr	r1, [r5, #4]
     282:	0789      	lsls	r1, r1, #30
     284:	d507      	bpl.n	296 <Stack_Size+0x96>
      received_text[rx_count] = RX_UART->DATA;
     286:	682b      	ldr	r3, [r5, #0]
      if (verbose) UartPutc((char) received_text[rx_count]);
      rx_count++;
      }
  } while ( rx_count <str_size);
     288:	4290      	cmp	r0, r2
      received_text[rx_count] = RX_UART->DATA;
     28a:	f807 3c28 	strb.w	r3, [r7, #-40]
  } while ( rx_count <str_size);
     28e:	4613      	mov	r3, r2
     290:	d904      	bls.n	29c <Stack_Size+0x9c>
     292:	3201      	adds	r2, #1
     294:	e7e0      	b.n	258 <Stack_Size+0x58>
     296:	4298      	cmp	r0, r3
     298:	d8de      	bhi.n	258 <Stack_Size+0x58>
     29a:	4616      	mov	r6, r2
  received_text[rx_count]=0; /* add NULL termination */
     29c:	2500      	movs	r5, #0
     29e:	aa0a      	add	r2, sp, #40	; 0x28
     2a0:	4413      	add	r3, r2

  /* Added 3 additional null chars to overcome X-termination in test
     when reads back X's beyond null char since a load 32-bit word
     happens rather than a byte access. */
  received_text[rx_count+1]=0; /* add NULL termination */
     2a2:	4416      	add	r6, r2
  received_text[rx_count+2]=0; /* add NULL termination */
  received_text[rx_count+3]=0; /* add NULL termination */
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     2a4:	a805      	add	r0, sp, #20
     2a6:	4669      	mov	r1, sp
  received_text[rx_count]=0; /* add NULL termination */
     2a8:	f803 5c28 	strb.w	r5, [r3, #-40]
  received_text[rx_count+1]=0; /* add NULL termination */
     2ac:	f806 5c28 	strb.w	r5, [r6, #-40]
  received_text[rx_count+2]=0; /* add NULL termination */
     2b0:	f803 5c26 	strb.w	r5, [r3, #-38]
  received_text[rx_count+3]=0; /* add NULL termination */
     2b4:	f803 5c25 	strb.w	r5, [r3, #-37]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     2b8:	f001 fe0e 	bl	1ed8 <strcmp>

  TX_UART->CTRL =  0; /* Clear TX enable */
     2bc:	4a0b      	ldr	r2, [pc, #44]	; (2ec <Stack_Size+0xec>)
  RX_UART->CTRL =  0; /* Clear RX enable */
     2be:	4b0c      	ldr	r3, [pc, #48]	; (2f0 <Stack_Size+0xf0>)
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     2c0:	b150      	cbz	r0, 2d8 <Stack_Size+0xd8>
  TX_UART->CTRL =  0; /* Clear TX enable */
     2c2:	6095      	str	r5, [r2, #8]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     2c4:	3410      	adds	r4, #16
  RX_UART->CTRL =  0; /* Clear RX enable */
     2c6:	609d      	str	r5, [r3, #8]

  if (err_code != 0) {
    printf ("ERROR : baud test failed (0x%x)\n", err_code);
     2c8:	4621      	mov	r1, r4
    return_val =1;
     2ca:	2401      	movs	r4, #1
    printf ("ERROR : baud test failed (0x%x)\n", err_code);
     2cc:	4809      	ldr	r0, [pc, #36]	; (2f4 <Stack_Size+0xf4>)
     2ce:	f001 fd87 	bl	1de0 <iprintf>
    err_code = 0;
    }

  return(return_val);
}
     2d2:	4620      	mov	r0, r4
     2d4:	b00b      	add	sp, #44	; 0x2c
     2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TX_UART->CTRL =  0; /* Clear TX enable */
     2d8:	6090      	str	r0, [r2, #8]
  RX_UART->CTRL =  0; /* Clear RX enable */
     2da:	6098      	str	r0, [r3, #8]
  if (err_code != 0) {
     2dc:	2c00      	cmp	r4, #0
     2de:	d1f3      	bne.n	2c8 <Stack_Size+0xc8>
}
     2e0:	4620      	mov	r0, r4
     2e2:	b00b      	add	sp, #44	; 0x2c
     2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2e6:	bf00      	nop
     2e8:	00002d1c 	.word	0x00002d1c
     2ec:	4002c000 	.word	0x4002c000
     2f0:	4002d000 	.word	0x4002d000
     2f4:	00002d44 	.word	0x00002d44

000002f8 <address_test_write>:
#else
/* Test function for write - for gcc */
void address_test_write(unsigned int addr, unsigned int wdata) __attribute__((naked));
void address_test_write(unsigned int addr, unsigned int wdata)
{
  __asm("  str   r1,[r0]\n"
     2f8:	6001      	str	r1, [r0, #0]
     2fa:	f3bf 8f4f 	dsb	sy
     2fe:	4770      	bx	lr

00000300 <address_test_read>:
#else
/* Test function for read - for gcc */
unsigned int  address_test_read(unsigned int addr) __attribute__((naked));
unsigned int  address_test_read(unsigned int addr)
{
  __asm("  push  {r1, r2}   \n"
     300:	b406      	push	{r1, r2}
     302:	6801      	ldr	r1, [r0, #0]
     304:	f3bf 8f4f 	dsb	sy
     308:	0008      	movs	r0, r1
     30a:	bc06      	pop	{r1, r2}
     30c:	4770      	bx	lr
     30e:	bf00      	nop

00000310 <UartIOConfig>:
  CM3DS_MPS2_GPIO0->ALTFUNCSET = (1<<0) | (1<<4);
     310:	2011      	movs	r0, #17
  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<7) | (1<<8) | (1<<10) | (1<<14);
     312:	f44f 428b 	mov.w	r2, #17792	; 0x4580
  CM3DS_MPS2_GPIO0->ALTFUNCSET = (1<<0) | (1<<4);
     316:	4902      	ldr	r1, [pc, #8]	; (320 <UartIOConfig+0x10>)
  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<7) | (1<<8) | (1<<10) | (1<<14);
     318:	4b02      	ldr	r3, [pc, #8]	; (324 <UartIOConfig+0x14>)
  CM3DS_MPS2_GPIO0->ALTFUNCSET = (1<<0) | (1<<4);
     31a:	6188      	str	r0, [r1, #24]
  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<7) | (1<<8) | (1<<10) | (1<<14);
     31c:	619a      	str	r2, [r3, #24]
}
     31e:	4770      	bx	lr
     320:	40010000 	.word	0x40010000
     324:	40011000 	.word	0x40011000

00000328 <uart_initial_value_check>:
int uart_initial_value_check(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART){
     328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     32c:	4604      	mov	r4, r0
     32e:	b083      	sub	sp, #12
  puts("- check initial values");
     330:	4883      	ldr	r0, [pc, #524]	; (540 <uart_initial_value_check+0x218>)
     332:	f001 fdc9 	bl	1ec8 <puts>
  if (CM3DS_MPS2_UART->DATA     !=0) {err_code += (1<<0);}
     336:	6820      	ldr	r0, [r4, #0]
  if (CM3DS_MPS2_UART->STATE    !=0) {err_code += (1<<1);}
     338:	6863      	ldr	r3, [r4, #4]
  if (CM3DS_MPS2_UART->DATA     !=0) {err_code += (1<<0);}
     33a:	3000      	adds	r0, #0
     33c:	bf18      	it	ne
     33e:	2001      	movne	r0, #1
  if (CM3DS_MPS2_UART->STATE    !=0) {err_code += (1<<1);}
     340:	b103      	cbz	r3, 344 <uart_initial_value_check+0x1c>
     342:	3002      	adds	r0, #2
  if (CM3DS_MPS2_UART->CTRL     !=0) {err_code += (1<<2);}
     344:	68a3      	ldr	r3, [r4, #8]
     346:	b103      	cbz	r3, 34a <uart_initial_value_check+0x22>
     348:	3004      	adds	r0, #4
  if (CM3DS_MPS2_UART->INTSTATUS!=0) {err_code += (1<<3);}
     34a:	68e3      	ldr	r3, [r4, #12]
     34c:	b103      	cbz	r3, 350 <uart_initial_value_check+0x28>
     34e:	3008      	adds	r0, #8
  if (CM3DS_MPS2_UART->BAUDDIV  !=0) {err_code += (1<<4);}
     350:	6923      	ldr	r3, [r4, #16]
     352:	b103      	cbz	r3, 356 <uart_initial_value_check+0x2e>
     354:	3010      	adds	r0, #16
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3) {uart_base = CM3DS_MPS2_UART3_BASE;}
     356:	4b7b      	ldr	r3, [pc, #492]	; (544 <uart_initial_value_check+0x21c>)
     358:	429c      	cmp	r4, r3
     35a:	f000 80db 	beq.w	514 <uart_initial_value_check+0x1ec>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART0) {uart_base = CM3DS_MPS2_UART0_BASE;}
     35e:	f1b4 2f40 	cmp.w	r4, #1073758208	; 0x40004000
     362:	f000 80bb 	beq.w	4dc <uart_initial_value_check+0x1b4>
     366:	4a78      	ldr	r2, [pc, #480]	; (548 <uart_initial_value_check+0x220>)
     368:	3b04      	subs	r3, #4
     36a:	9301      	str	r3, [sp, #4]
     36c:	4613      	mov	r3, r2
     36e:	4c77      	ldr	r4, [pc, #476]	; (54c <uart_initial_value_check+0x224>)
     370:	4d77      	ldr	r5, [pc, #476]	; (550 <uart_initial_value_check+0x228>)
     372:	4e78      	ldr	r6, [pc, #480]	; (554 <uart_initial_value_check+0x22c>)
     374:	4f78      	ldr	r7, [pc, #480]	; (558 <uart_initial_value_check+0x230>)
     376:	f8df c218 	ldr.w	ip, [pc, #536]	; 590 <uart_initial_value_check+0x268>
     37a:	f8df e218 	ldr.w	lr, [pc, #536]	; 594 <uart_initial_value_check+0x26c>
     37e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 598 <uart_initial_value_check+0x270>
     382:	f8df 9218 	ldr.w	r9, [pc, #536]	; 59c <uart_initial_value_check+0x274>
     386:	f8df a218 	ldr.w	sl, [pc, #536]	; 5a0 <uart_initial_value_check+0x278>
     38a:	f8df b218 	ldr.w	fp, [pc, #536]	; 5a4 <uart_initial_value_check+0x27c>
  if (HW32_REG(uart_base + 0xFD0) != APB_UART_PID4) {err_code += (1<<5); }
     38e:	6811      	ldr	r1, [r2, #0]
     390:	2904      	cmp	r1, #4
  if (HW32_REG(uart_base + 0xFD4) != APB_UART_PID5) {err_code += (1<<6); }
     392:	f8db 1000 	ldr.w	r1, [fp]
  if (HW32_REG(uart_base + 0xFD0) != APB_UART_PID4) {err_code += (1<<5); }
     396:	bf18      	it	ne
     398:	3020      	addne	r0, #32
  if (HW32_REG(uart_base + 0xFD4) != APB_UART_PID5) {err_code += (1<<6); }
     39a:	b101      	cbz	r1, 39e <uart_initial_value_check+0x76>
     39c:	3040      	adds	r0, #64	; 0x40
  if (HW32_REG(uart_base + 0xFD8) != APB_UART_PID6) {err_code += (1<<7); }
     39e:	f8da 1000 	ldr.w	r1, [sl]
     3a2:	b101      	cbz	r1, 3a6 <uart_initial_value_check+0x7e>
     3a4:	3080      	adds	r0, #128	; 0x80
  if (HW32_REG(uart_base + 0xFDC) != APB_UART_PID7) {err_code += (1<<8); }
     3a6:	f8d9 1000 	ldr.w	r1, [r9]
     3aa:	b109      	cbz	r1, 3b0 <uart_initial_value_check+0x88>
     3ac:	f500 7080 	add.w	r0, r0, #256	; 0x100
  if (HW32_REG(uart_base + 0xFE0) != APB_UART_PID0) {err_code += (1<<9); }
     3b0:	f8d8 1000 	ldr.w	r1, [r8]
     3b4:	2921      	cmp	r1, #33	; 0x21
  if (HW32_REG(uart_base + 0xFE4) != APB_UART_PID1) {err_code += (1<<10); }
     3b6:	f8de 1000 	ldr.w	r1, [lr]
  if (HW32_REG(uart_base + 0xFE0) != APB_UART_PID0) {err_code += (1<<9); }
     3ba:	bf18      	it	ne
     3bc:	f500 7000 	addne.w	r0, r0, #512	; 0x200
  if (HW32_REG(uart_base + 0xFE4) != APB_UART_PID1) {err_code += (1<<10); }
     3c0:	29b8      	cmp	r1, #184	; 0xb8
  if (HW32_REG(uart_base + 0xFE8) != APB_UART_PID2) {err_code += (1<<11); }
     3c2:	f8dc 1000 	ldr.w	r1, [ip]
  if (HW32_REG(uart_base + 0xFE4) != APB_UART_PID1) {err_code += (1<<10); }
     3c6:	bf18      	it	ne
     3c8:	f500 6080 	addne.w	r0, r0, #1024	; 0x400
  if (HW32_REG(uart_base + 0xFE8) != APB_UART_PID2) {err_code += (1<<11); }
     3cc:	291b      	cmp	r1, #27
  if (HW32_REG(uart_base + 0xFEC) != APB_UART_PID3) {err_code += (1<<12); }
     3ce:	6839      	ldr	r1, [r7, #0]
  if (HW32_REG(uart_base + 0xFE8) != APB_UART_PID2) {err_code += (1<<11); }
     3d0:	bf18      	it	ne
     3d2:	f500 6000 	addne.w	r0, r0, #2048	; 0x800
  if (HW32_REG(uart_base + 0xFEC) != APB_UART_PID3) {err_code += (1<<12); }
     3d6:	b109      	cbz	r1, 3dc <uart_initial_value_check+0xb4>
     3d8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  if (HW32_REG(uart_base + 0xFF0) != APB_UART_CID0) {err_code += (1<<13); }
     3dc:	6831      	ldr	r1, [r6, #0]
     3de:	290d      	cmp	r1, #13
  if (HW32_REG(uart_base + 0xFF4) != APB_UART_CID1) {err_code += (1<<14); }
     3e0:	6829      	ldr	r1, [r5, #0]
  if (HW32_REG(uart_base + 0xFF0) != APB_UART_CID0) {err_code += (1<<13); }
     3e2:	bf18      	it	ne
     3e4:	f500 5000 	addne.w	r0, r0, #8192	; 0x2000
  if (HW32_REG(uart_base + 0xFF4) != APB_UART_CID1) {err_code += (1<<14); }
     3e8:	29f0      	cmp	r1, #240	; 0xf0
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code += (1<<15); }
     3ea:	6821      	ldr	r1, [r4, #0]
  if (HW32_REG(uart_base + 0xFF4) != APB_UART_CID1) {err_code += (1<<14); }
     3ec:	bf18      	it	ne
     3ee:	f500 4080 	addne.w	r0, r0, #16384	; 0x4000
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code += (1<<15); }
     3f2:	2905      	cmp	r1, #5
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code += (1<<16); }
     3f4:	9901      	ldr	r1, [sp, #4]
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code += (1<<15); }
     3f6:	bf18      	it	ne
     3f8:	f500 4000 	addne.w	r0, r0, #32768	; 0x8000
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code += (1<<16); }
     3fc:	6809      	ldr	r1, [r1, #0]
     3fe:	29b1      	cmp	r1, #177	; 0xb1
    HW32_REG(uart_base + 0xFD0 + (i<<2)) = ~HW32_REG(uart_base + 0xFD0 + (i<<2));
     400:	6819      	ldr	r1, [r3, #0]
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code += (1<<16); }
     402:	bf18      	it	ne
     404:	f500 3080 	addne.w	r0, r0, #65536	; 0x10000
    HW32_REG(uart_base + 0xFD0 + (i<<2)) = ~HW32_REG(uart_base + 0xFD0 + (i<<2));
     408:	43c9      	mvns	r1, r1
     40a:	6019      	str	r1, [r3, #0]
     40c:	6859      	ldr	r1, [r3, #4]
     40e:	43c9      	mvns	r1, r1
     410:	6059      	str	r1, [r3, #4]
     412:	6899      	ldr	r1, [r3, #8]
     414:	43c9      	mvns	r1, r1
     416:	6099      	str	r1, [r3, #8]
     418:	68d9      	ldr	r1, [r3, #12]
     41a:	43c9      	mvns	r1, r1
     41c:	60d9      	str	r1, [r3, #12]
     41e:	6919      	ldr	r1, [r3, #16]
     420:	43c9      	mvns	r1, r1
     422:	6119      	str	r1, [r3, #16]
     424:	6959      	ldr	r1, [r3, #20]
     426:	43c9      	mvns	r1, r1
     428:	6159      	str	r1, [r3, #20]
     42a:	6999      	ldr	r1, [r3, #24]
     42c:	43c9      	mvns	r1, r1
     42e:	6199      	str	r1, [r3, #24]
     430:	69d9      	ldr	r1, [r3, #28]
     432:	43c9      	mvns	r1, r1
     434:	61d9      	str	r1, [r3, #28]
     436:	6a19      	ldr	r1, [r3, #32]
     438:	43c9      	mvns	r1, r1
     43a:	6219      	str	r1, [r3, #32]
     43c:	6a59      	ldr	r1, [r3, #36]	; 0x24
     43e:	43c9      	mvns	r1, r1
     440:	6259      	str	r1, [r3, #36]	; 0x24
     442:	6a99      	ldr	r1, [r3, #40]	; 0x28
     444:	43c9      	mvns	r1, r1
     446:	6299      	str	r1, [r3, #40]	; 0x28
     448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     44a:	43c9      	mvns	r1, r1
     44c:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (HW32_REG(uart_base + 0xFD0) != APB_UART_PID4) {err_code |= (1<<5); }
     44e:	6813      	ldr	r3, [r2, #0]
     450:	2b04      	cmp	r3, #4
  if (HW32_REG(uart_base + 0xFD4) != APB_UART_PID5) {err_code |= (1<<6); }
     452:	f8db 3000 	ldr.w	r3, [fp]
  if (HW32_REG(uart_base + 0xFD0) != APB_UART_PID4) {err_code |= (1<<5); }
     456:	bf18      	it	ne
     458:	f040 0020 	orrne.w	r0, r0, #32
  if (HW32_REG(uart_base + 0xFD4) != APB_UART_PID5) {err_code |= (1<<6); }
     45c:	b10b      	cbz	r3, 462 <uart_initial_value_check+0x13a>
     45e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (HW32_REG(uart_base + 0xFD8) != APB_UART_PID6) {err_code |= (1<<7); }
     462:	f8da 3000 	ldr.w	r3, [sl]
     466:	b10b      	cbz	r3, 46c <uart_initial_value_check+0x144>
     468:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  if (HW32_REG(uart_base + 0xFDC) != APB_UART_PID7) {err_code |= (1<<8); }
     46c:	f8d9 3000 	ldr.w	r3, [r9]
     470:	b10b      	cbz	r3, 476 <uart_initial_value_check+0x14e>
     472:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  if (HW32_REG(uart_base + 0xFE0) != APB_UART_PID0) {err_code |= (1<<9); }
     476:	f8d8 3000 	ldr.w	r3, [r8]
     47a:	2b21      	cmp	r3, #33	; 0x21
  if (HW32_REG(uart_base + 0xFE4) != APB_UART_PID1) {err_code |= (1<<10); }
     47c:	f8de 3000 	ldr.w	r3, [lr]
  if (HW32_REG(uart_base + 0xFE0) != APB_UART_PID0) {err_code |= (1<<9); }
     480:	bf18      	it	ne
     482:	f440 7000 	orrne.w	r0, r0, #512	; 0x200
  if (HW32_REG(uart_base + 0xFE4) != APB_UART_PID1) {err_code |= (1<<10); }
     486:	2bb8      	cmp	r3, #184	; 0xb8
  if (HW32_REG(uart_base + 0xFE8) != APB_UART_PID2) {err_code |= (1<<11); }
     488:	f8dc 3000 	ldr.w	r3, [ip]
  if (HW32_REG(uart_base + 0xFE4) != APB_UART_PID1) {err_code |= (1<<10); }
     48c:	bf18      	it	ne
     48e:	f440 6080 	orrne.w	r0, r0, #1024	; 0x400
  if (HW32_REG(uart_base + 0xFE8) != APB_UART_PID2) {err_code |= (1<<11); }
     492:	2b1b      	cmp	r3, #27
  if (HW32_REG(uart_base + 0xFEC) != APB_UART_PID3) {err_code |= (1<<12); }
     494:	683b      	ldr	r3, [r7, #0]
  if (HW32_REG(uart_base + 0xFE8) != APB_UART_PID2) {err_code |= (1<<11); }
     496:	bf18      	it	ne
     498:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  if (HW32_REG(uart_base + 0xFEC) != APB_UART_PID3) {err_code |= (1<<12); }
     49c:	b10b      	cbz	r3, 4a2 <uart_initial_value_check+0x17a>
     49e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
  if (HW32_REG(uart_base + 0xFF0) != APB_UART_CID0) {err_code |= (1<<13); }
     4a2:	6833      	ldr	r3, [r6, #0]
     4a4:	2b0d      	cmp	r3, #13
  if (HW32_REG(uart_base + 0xFF4) != APB_UART_CID1) {err_code |= (1<<14); }
     4a6:	682b      	ldr	r3, [r5, #0]
  if (HW32_REG(uart_base + 0xFF0) != APB_UART_CID0) {err_code |= (1<<13); }
     4a8:	bf18      	it	ne
     4aa:	f440 5000 	orrne.w	r0, r0, #8192	; 0x2000
  if (HW32_REG(uart_base + 0xFF4) != APB_UART_CID1) {err_code |= (1<<14); }
     4ae:	2bf0      	cmp	r3, #240	; 0xf0
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code |= (1<<15); }
     4b0:	6823      	ldr	r3, [r4, #0]
  if (HW32_REG(uart_base + 0xFF4) != APB_UART_CID1) {err_code |= (1<<14); }
     4b2:	bf18      	it	ne
     4b4:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code |= (1<<15); }
     4b8:	2b05      	cmp	r3, #5
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code |= (1<<16); }
     4ba:	9b01      	ldr	r3, [sp, #4]
     4bc:	681b      	ldr	r3, [r3, #0]
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code |= (1<<15); }
     4be:	d022      	beq.n	506 <uart_initial_value_check+0x1de>
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code |= (1<<16); }
     4c0:	2bb1      	cmp	r3, #177	; 0xb1
  if (HW32_REG(uart_base + 0xFF8) != APB_UART_CID2) {err_code |= (1<<15); }
     4c2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code |= (1<<16); }
     4c6:	d001      	beq.n	4cc <uart_initial_value_check+0x1a4>
     4c8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    printf ("ERROR : initial value failed (0x%x)\n", err_code);
     4cc:	4601      	mov	r1, r0
     4ce:	4823      	ldr	r0, [pc, #140]	; (55c <uart_initial_value_check+0x234>)
     4d0:	f001 fc86 	bl	1de0 <iprintf>
    return_val =1;
     4d4:	2001      	movs	r0, #1
}
     4d6:	b003      	add	sp, #12
     4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4dc:	4b20      	ldr	r3, [pc, #128]	; (560 <uart_initial_value_check+0x238>)
     4de:	4a21      	ldr	r2, [pc, #132]	; (564 <uart_initial_value_check+0x23c>)
     4e0:	9301      	str	r3, [sp, #4]
     4e2:	4c21      	ldr	r4, [pc, #132]	; (568 <uart_initial_value_check+0x240>)
     4e4:	4613      	mov	r3, r2
     4e6:	4d21      	ldr	r5, [pc, #132]	; (56c <uart_initial_value_check+0x244>)
     4e8:	4e21      	ldr	r6, [pc, #132]	; (570 <uart_initial_value_check+0x248>)
     4ea:	4f22      	ldr	r7, [pc, #136]	; (574 <uart_initial_value_check+0x24c>)
     4ec:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 5a8 <uart_initial_value_check+0x280>
     4f0:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 5ac <uart_initial_value_check+0x284>
     4f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5b0 <uart_initial_value_check+0x288>
     4f8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 5b4 <uart_initial_value_check+0x28c>
     4fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5b8 <uart_initial_value_check+0x290>
     500:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 5bc <uart_initial_value_check+0x294>
     504:	e743      	b.n	38e <uart_initial_value_check+0x66>
  if (HW32_REG(uart_base + 0xFFC) != APB_UART_CID3) {err_code |= (1<<16); }
     506:	2bb1      	cmp	r3, #177	; 0xb1
     508:	d1de      	bne.n	4c8 <uart_initial_value_check+0x1a0>
  if (err_code != 0) {
     50a:	2800      	cmp	r0, #0
     50c:	d1de      	bne.n	4cc <uart_initial_value_check+0x1a4>
}
     50e:	b003      	add	sp, #12
     510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     514:	4b18      	ldr	r3, [pc, #96]	; (578 <uart_initial_value_check+0x250>)
     516:	4a19      	ldr	r2, [pc, #100]	; (57c <uart_initial_value_check+0x254>)
     518:	9301      	str	r3, [sp, #4]
     51a:	4c19      	ldr	r4, [pc, #100]	; (580 <uart_initial_value_check+0x258>)
     51c:	4613      	mov	r3, r2
     51e:	4d19      	ldr	r5, [pc, #100]	; (584 <uart_initial_value_check+0x25c>)
     520:	4e19      	ldr	r6, [pc, #100]	; (588 <uart_initial_value_check+0x260>)
     522:	4f1a      	ldr	r7, [pc, #104]	; (58c <uart_initial_value_check+0x264>)
     524:	f8df c098 	ldr.w	ip, [pc, #152]	; 5c0 <uart_initial_value_check+0x298>
     528:	f8df e098 	ldr.w	lr, [pc, #152]	; 5c4 <uart_initial_value_check+0x29c>
     52c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 5c8 <uart_initial_value_check+0x2a0>
     530:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5cc <uart_initial_value_check+0x2a4>
     534:	f8df a098 	ldr.w	sl, [pc, #152]	; 5d0 <uart_initial_value_check+0x2a8>
     538:	f8df b098 	ldr.w	fp, [pc, #152]	; 5d4 <uart_initial_value_check+0x2ac>
     53c:	e727      	b.n	38e <uart_initial_value_check+0x66>
     53e:	bf00      	nop
     540:	00002d68 	.word	0x00002d68
     544:	4002d000 	.word	0x4002d000
     548:	4002cfd0 	.word	0x4002cfd0
     54c:	4002cff8 	.word	0x4002cff8
     550:	4002cff4 	.word	0x4002cff4
     554:	4002cff0 	.word	0x4002cff0
     558:	4002cfec 	.word	0x4002cfec
     55c:	00002d80 	.word	0x00002d80
     560:	40004ffc 	.word	0x40004ffc
     564:	40004fd0 	.word	0x40004fd0
     568:	40004ff8 	.word	0x40004ff8
     56c:	40004ff4 	.word	0x40004ff4
     570:	40004ff0 	.word	0x40004ff0
     574:	40004fec 	.word	0x40004fec
     578:	4002dffc 	.word	0x4002dffc
     57c:	4002dfd0 	.word	0x4002dfd0
     580:	4002dff8 	.word	0x4002dff8
     584:	4002dff4 	.word	0x4002dff4
     588:	4002dff0 	.word	0x4002dff0
     58c:	4002dfec 	.word	0x4002dfec
     590:	4002cfe8 	.word	0x4002cfe8
     594:	4002cfe4 	.word	0x4002cfe4
     598:	4002cfe0 	.word	0x4002cfe0
     59c:	4002cfdc 	.word	0x4002cfdc
     5a0:	4002cfd8 	.word	0x4002cfd8
     5a4:	4002cfd4 	.word	0x4002cfd4
     5a8:	40004fe8 	.word	0x40004fe8
     5ac:	40004fe4 	.word	0x40004fe4
     5b0:	40004fe0 	.word	0x40004fe0
     5b4:	40004fdc 	.word	0x40004fdc
     5b8:	40004fd8 	.word	0x40004fd8
     5bc:	40004fd4 	.word	0x40004fd4
     5c0:	4002dfe8 	.word	0x4002dfe8
     5c4:	4002dfe4 	.word	0x4002dfe4
     5c8:	4002dfe0 	.word	0x4002dfe0
     5cc:	4002dfdc 	.word	0x4002dfdc
     5d0:	4002dfd8 	.word	0x4002dfd8
     5d4:	4002dfd4 	.word	0x4002dfd4

000005d8 <simple_uart_test>:
{
     5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const char  transmit_text[20] = "Hello world\n";
     5dc:	2700      	movs	r7, #0
{
     5de:	4606      	mov	r6, r0
     5e0:	b08a      	sub	sp, #40	; 0x28
  const char  transmit_text[20] = "Hello world\n";
     5e2:	4b4f      	ldr	r3, [pc, #316]	; (720 <simple_uart_test+0x148>)
     5e4:	ad05      	add	r5, sp, #20
{
     5e6:	460c      	mov	r4, r1
     5e8:	4690      	mov	r8, r2
  const char  transmit_text[20] = "Hello world\n";
     5ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     5ec:	c507      	stmia	r5!, {r0, r1, r2}
  puts("Simple test");
     5ee:	484d      	ldr	r0, [pc, #308]	; (724 <simple_uart_test+0x14c>)
  const char  transmit_text[20] = "Hello world\n";
     5f0:	702b      	strb	r3, [r5, #0]
     5f2:	f8cd 7021 	str.w	r7, [sp, #33]	; 0x21
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     5f6:	4d4c      	ldr	r5, [pc, #304]	; (728 <simple_uart_test+0x150>)
  const char  transmit_text[20] = "Hello world\n";
     5f8:	9709      	str	r7, [sp, #36]	; 0x24
  puts("Simple test");
     5fa:	f001 fc65 	bl	1ec8 <puts>
  UartPutc('-');
     5fe:	202d      	movs	r0, #45	; 0x2d
     600:	f001 fbaa 	bl	1d58 <UartPutc>
  UartPutc(' ');
     604:	2020      	movs	r0, #32
     606:	f001 fba7 	bl	1d58 <UartPutc>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     60a:	42ae      	cmp	r6, r5
     60c:	f000 8085 	beq.w	71a <simple_uart_test+0x142>
  else if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     610:	4b46      	ldr	r3, [pc, #280]	; (72c <simple_uart_test+0x154>)
     612:	429e      	cmp	r6, r3
     614:	d14c      	bne.n	6b0 <simple_uart_test+0xd8>
  TX_UART->BAUDDIV = bauddiv;
     616:	6134      	str	r4, [r6, #16]
  if (TX_UART->BAUDDIV != bauddiv) { err_code += (1<<0);}
     618:	6937      	ldr	r7, [r6, #16]
  RX_UART->BAUDDIV = bauddiv;
     61a:	612c      	str	r4, [r5, #16]
  if (TX_UART->BAUDDIV != bauddiv) { err_code += (1<<0);}
     61c:	1b3f      	subs	r7, r7, r4
     61e:	bf18      	it	ne
     620:	2701      	movne	r7, #1
  if (RX_UART->BAUDDIV != bauddiv) { err_code += (1<<1);}
     622:	692b      	ldr	r3, [r5, #16]
     624:	42a3      	cmp	r3, r4
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     626:	68b3      	ldr	r3, [r6, #8]
  if (RX_UART->BAUDDIV != bauddiv) { err_code += (1<<1);}
     628:	bf18      	it	ne
     62a:	3702      	addne	r7, #2
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     62c:	f043 0301 	orr.w	r3, r3, #1
     630:	60b3      	str	r3, [r6, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     632:	68b3      	ldr	r3, [r6, #8]
     634:	07d9      	lsls	r1, r3, #31
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     636:	68ab      	ldr	r3, [r5, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     638:	bf58      	it	pl
     63a:	3704      	addpl	r7, #4
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     63c:	f043 0302 	orr.w	r3, r3, #2
     640:	60ab      	str	r3, [r5, #8]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     642:	68ab      	ldr	r3, [r5, #8]
     644:	079a      	lsls	r2, r3, #30
     646:	bf58      	it	pl
     648:	3708      	addpl	r7, #8
     64a:	f1b8 0f00 	cmp.w	r8, #0
     64e:	d137      	bne.n	6c0 <simple_uart_test+0xe8>
  rx_count = 0;
     650:	4644      	mov	r4, r8
  tx_count = 0;
     652:	4641      	mov	r1, r8
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     654:	6873      	ldr	r3, [r6, #4]
      received_text[rx_count] = RX_UART->DATA;
     656:	aa0a      	add	r2, sp, #40	; 0x28
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     658:	07db      	lsls	r3, r3, #31
      received_text[rx_count] = RX_UART->DATA;
     65a:	4422      	add	r2, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     65c:	d407      	bmi.n	66e <simple_uart_test+0x96>
     65e:	290b      	cmp	r1, #11
     660:	d805      	bhi.n	66e <simple_uart_test+0x96>
      TX_UART->DATA = transmit_text[tx_count];
     662:	ab0a      	add	r3, sp, #40	; 0x28
     664:	440b      	add	r3, r1
     666:	f813 3c14 	ldrb.w	r3, [r3, #-20]
      tx_count++;
     66a:	3101      	adds	r1, #1
      TX_UART->DATA = transmit_text[tx_count];
     66c:	6033      	str	r3, [r6, #0]
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     66e:	686b      	ldr	r3, [r5, #4]
     670:	0798      	lsls	r0, r3, #30
     672:	d544      	bpl.n	6fe <simple_uart_test+0x126>
      received_text[rx_count] = RX_UART->DATA;
     674:	682b      	ldr	r3, [r5, #0]
      rx_count++;
     676:	3401      	adds	r4, #1
  } while ( rx_count <str_size);
     678:	2c0b      	cmp	r4, #11
      received_text[rx_count] = RX_UART->DATA;
     67a:	f802 3c28 	strb.w	r3, [r2, #-40]
  } while ( rx_count <str_size);
     67e:	d9e9      	bls.n	654 <simple_uart_test+0x7c>
  received_text[rx_count]=0; /* add NULL termination */
     680:	f04f 0800 	mov.w	r8, #0
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     684:	a805      	add	r0, sp, #20
     686:	4669      	mov	r1, sp
  received_text[rx_count]=0; /* add NULL termination */
     688:	f84d 8004 	str.w	r8, [sp, r4]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     68c:	f001 fc24 	bl	1ed8 <strcmp>
     690:	2800      	cmp	r0, #0
     692:	d03a      	beq.n	70a <simple_uart_test+0x132>
  TX_UART->CTRL =  0; /* Clear TX enable */
     694:	f8c6 8008 	str.w	r8, [r6, #8]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     698:	3710      	adds	r7, #16
  RX_UART->CTRL =  0; /* Clear RX enable */
     69a:	f8c5 8008 	str.w	r8, [r5, #8]
    printf ("ERROR : simple test failed (0x%x)\n", err_code);
     69e:	4639      	mov	r1, r7
    return_val =1;
     6a0:	2701      	movs	r7, #1
    printf ("ERROR : simple test failed (0x%x)\n", err_code);
     6a2:	4823      	ldr	r0, [pc, #140]	; (730 <simple_uart_test+0x158>)
     6a4:	f001 fb9c 	bl	1de0 <iprintf>
}
     6a8:	4638      	mov	r0, r7
     6aa:	b00a      	add	sp, #40	; 0x28
     6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 1;
     6b0:	2701      	movs	r7, #1
    puts ("ERROR: Input parameter invalid in function 'simple_uart_test'.");
     6b2:	4820      	ldr	r0, [pc, #128]	; (734 <simple_uart_test+0x15c>)
     6b4:	f001 fc08 	bl	1ec8 <puts>
}
     6b8:	4638      	mov	r0, r7
     6ba:	b00a      	add	sp, #40	; 0x28
     6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  rx_count = 0;
     6c0:	2400      	movs	r4, #0
  tx_count = 0;
     6c2:	46a0      	mov	r8, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     6c4:	6873      	ldr	r3, [r6, #4]
      received_text[rx_count] = RX_UART->DATA;
     6c6:	aa0a      	add	r2, sp, #40	; 0x28
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     6c8:	07d9      	lsls	r1, r3, #31
      received_text[rx_count] = RX_UART->DATA;
     6ca:	4422      	add	r2, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     6cc:	d409      	bmi.n	6e2 <simple_uart_test+0x10a>
     6ce:	f1b8 0f0b 	cmp.w	r8, #11
     6d2:	d806      	bhi.n	6e2 <simple_uart_test+0x10a>
      TX_UART->DATA = transmit_text[tx_count];
     6d4:	ab0a      	add	r3, sp, #40	; 0x28
     6d6:	4443      	add	r3, r8
     6d8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
      tx_count++;
     6dc:	f108 0801 	add.w	r8, r8, #1
      TX_UART->DATA = transmit_text[tx_count];
     6e0:	6033      	str	r3, [r6, #0]
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     6e2:	686b      	ldr	r3, [r5, #4]
     6e4:	079b      	lsls	r3, r3, #30
     6e6:	d50d      	bpl.n	704 <simple_uart_test+0x12c>
      received_text[rx_count] = RX_UART->DATA;
     6e8:	682b      	ldr	r3, [r5, #0]
      rx_count++;
     6ea:	3401      	adds	r4, #1
      received_text[rx_count] = RX_UART->DATA;
     6ec:	b2db      	uxtb	r3, r3
      if (verbose) UartPutc((char) received_text[rx_count]);
     6ee:	4618      	mov	r0, r3
      received_text[rx_count] = RX_UART->DATA;
     6f0:	f802 3c28 	strb.w	r3, [r2, #-40]
      if (verbose) UartPutc((char) received_text[rx_count]);
     6f4:	f001 fb30 	bl	1d58 <UartPutc>
  } while ( rx_count <str_size);
     6f8:	2c0b      	cmp	r4, #11
     6fa:	d9e3      	bls.n	6c4 <simple_uart_test+0xec>
     6fc:	e7c0      	b.n	680 <simple_uart_test+0xa8>
     6fe:	2c0b      	cmp	r4, #11
     700:	d9a8      	bls.n	654 <simple_uart_test+0x7c>
     702:	e7bd      	b.n	680 <simple_uart_test+0xa8>
     704:	2c0b      	cmp	r4, #11
     706:	d9dd      	bls.n	6c4 <simple_uart_test+0xec>
     708:	e7ba      	b.n	680 <simple_uart_test+0xa8>
  TX_UART->CTRL =  0; /* Clear TX enable */
     70a:	60b0      	str	r0, [r6, #8]
  RX_UART->CTRL =  0; /* Clear RX enable */
     70c:	60a8      	str	r0, [r5, #8]
  if (err_code != 0) {
     70e:	2f00      	cmp	r7, #0
     710:	d1c5      	bne.n	69e <simple_uart_test+0xc6>
}
     712:	4638      	mov	r0, r7
     714:	b00a      	add	sp, #40	; 0x28
     716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RX_UART = CM3DS_MPS2_UART3;
     71a:	4d04      	ldr	r5, [pc, #16]	; (72c <simple_uart_test+0x154>)
     71c:	e77b      	b.n	616 <simple_uart_test+0x3e>
     71e:	bf00      	nop
     720:	00002d1c 	.word	0x00002d1c
     724:	00002da8 	.word	0x00002da8
     728:	4002c000 	.word	0x4002c000
     72c:	4002d000 	.word	0x4002d000
     730:	00002df4 	.word	0x00002df4
     734:	00002db4 	.word	0x00002db4

00000738 <simple_uart_baud_test>:
{
     738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (i=0; i<10; i++) {
     73c:	f04f 0b00 	mov.w	fp, #0
  short int tx_bauddiv[10] = {
     740:	4e88      	ldr	r6, [pc, #544]	; (964 <simple_uart_baud_test+0x22c>)
  const char  transmit_text[20] = "Hello world\n";
     742:	46da      	mov	sl, fp
  short int tx_bauddiv[10] = {
     744:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     746:	4634      	mov	r4, r6
{
     748:	b09b      	sub	sp, #108	; 0x6c
  short int tx_bauddiv[10] = {
     74a:	f854 c910 	ldr.w	ip, [r4], #-16
     74e:	af06      	add	r7, sp, #24
  short int rx_bauddiv[10] = {
     750:	ad0b      	add	r5, sp, #44	; 0x2c
  short int tx_bauddiv[10] = {
     752:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  short int rx_bauddiv[10] = {
     754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  puts("Data transfer test\n");
     758:	4883      	ldr	r0, [pc, #524]	; (968 <simple_uart_baud_test+0x230>)
  short int rx_bauddiv[10] = {
     75a:	f8c5 c000 	str.w	ip, [r5]
  short int tx_bauddiv[10] = {
     75e:	f8c7 c000 	str.w	ip, [r7]
  int return_val=0;
     762:	f8cd b014 	str.w	fp, [sp, #20]
  puts("Data transfer test\n");
     766:	f001 fbaf 	bl	1ec8 <puts>
     76a:	f1a6 0324 	sub.w	r3, r6, #36	; 0x24
     76e:	9304      	str	r3, [sp, #16]
     770:	ab06      	add	r3, sp, #24
     772:	9301      	str	r3, [sp, #4]
  TX_UART->BAUDDIV = tx_bauddiv;
     774:	4d7d      	ldr	r5, [pc, #500]	; (96c <simple_uart_baud_test+0x234>)
     776:	ab0b      	add	r3, sp, #44	; 0x2c
  RX_UART->BAUDDIV = rx_bauddiv;
     778:	4c7d      	ldr	r4, [pc, #500]	; (970 <simple_uart_baud_test+0x238>)
     77a:	9300      	str	r3, [sp, #0]
  const char  transmit_text[20] = "Hello world\n";
     77c:	9b04      	ldr	r3, [sp, #16]
     77e:	ae15      	add	r6, sp, #84	; 0x54
     780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     782:	c607      	stmia	r6!, {r0, r1, r2}
      tx_bauddiv[i],  rx_bauddiv[i]   , NO_DISPLAY)!=0) {err_code |= 0x1;};
     784:	9a01      	ldr	r2, [sp, #4]
  const char  transmit_text[20] = "Hello world\n";
     786:	f8cd a061 	str.w	sl, [sp, #97]	; 0x61
      tx_bauddiv[i],  rx_bauddiv[i]   , NO_DISPLAY)!=0) {err_code |= 0x1;};
     78a:	f932 7b02 	ldrsh.w	r7, [r2], #2
  const char  transmit_text[20] = "Hello world\n";
     78e:	7033      	strb	r3, [r6, #0]
      tx_bauddiv[i],  rx_bauddiv[i]   , NO_DISPLAY)!=0) {err_code |= 0x1;};
     790:	9201      	str	r2, [sp, #4]
     792:	9a00      	ldr	r2, [sp, #0]
  const char  transmit_text[20] = "Hello world\n";
     794:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
      tx_bauddiv[i],  rx_bauddiv[i]   , NO_DISPLAY)!=0) {err_code |= 0x1;};
     798:	f932 9b02 	ldrsh.w	r9, [r2], #2
     79c:	9200      	str	r2, [sp, #0]
  TX_UART->BAUDDIV = tx_bauddiv;
     79e:	612f      	str	r7, [r5, #16]
  if (TX_UART->BAUDDIV != tx_bauddiv) { err_code += (1<<0);}
     7a0:	692e      	ldr	r6, [r5, #16]
  RX_UART->BAUDDIV = rx_bauddiv;
     7a2:	f8c4 9010 	str.w	r9, [r4, #16]
  if (TX_UART->BAUDDIV != tx_bauddiv) { err_code += (1<<0);}
     7a6:	1bbe      	subs	r6, r7, r6
     7a8:	bf18      	it	ne
     7aa:	2601      	movne	r6, #1
  if (RX_UART->BAUDDIV != rx_bauddiv) { err_code += (1<<1);}
     7ac:	6923      	ldr	r3, [r4, #16]
     7ae:	4599      	cmp	r9, r3
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     7b0:	68ab      	ldr	r3, [r5, #8]
  if (RX_UART->BAUDDIV != rx_bauddiv) { err_code += (1<<1);}
     7b2:	bf18      	it	ne
     7b4:	3602      	addne	r6, #2
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     7b6:	f043 0301 	orr.w	r3, r3, #1
     7ba:	60ab      	str	r3, [r5, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     7bc:	68ab      	ldr	r3, [r5, #8]
     7be:	07db      	lsls	r3, r3, #31
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     7c0:	68a3      	ldr	r3, [r4, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     7c2:	bf58      	it	pl
     7c4:	3604      	addpl	r6, #4
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     7c6:	f043 0302 	orr.w	r3, r3, #2
     7ca:	60a3      	str	r3, [r4, #8]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     7cc:	68a3      	ldr	r3, [r4, #8]
     7ce:	0798      	lsls	r0, r3, #30
  str_size = strlen(transmit_text);
     7d0:	a815      	add	r0, sp, #84	; 0x54
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     7d2:	bf58      	it	pl
     7d4:	3608      	addpl	r6, #8
  str_size = strlen(transmit_text);
     7d6:	f001 fb89 	bl	1eec <strlen>
  rx_count = 0;
     7da:	2300      	movs	r3, #0
     7dc:	2201      	movs	r2, #1
  tx_count = 0;
     7de:	4698      	mov	r8, r3
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     7e0:	6869      	ldr	r1, [r5, #4]
      received_text[rx_count] = RX_UART->DATA;
     7e2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     7e6:	f011 0f01 	tst.w	r1, #1
      received_text[rx_count] = RX_UART->DATA;
     7ea:	eb0c 0e03 	add.w	lr, ip, r3
     7ee:	f103 0c02 	add.w	ip, r3, #2
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     7f2:	d108      	bne.n	806 <simple_uart_baud_test+0xce>
     7f4:	4540      	cmp	r0, r8
     7f6:	d906      	bls.n	806 <simple_uart_baud_test+0xce>
      TX_UART->DATA = transmit_text[tx_count];
     7f8:	a91a      	add	r1, sp, #104	; 0x68
     7fa:	4441      	add	r1, r8
     7fc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
      tx_count++;
     800:	f108 0801 	add.w	r8, r8, #1
      TX_UART->DATA = transmit_text[tx_count];
     804:	6029      	str	r1, [r5, #0]
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     806:	6861      	ldr	r1, [r4, #4]
     808:	0789      	lsls	r1, r1, #30
     80a:	d507      	bpl.n	81c <simple_uart_baud_test+0xe4>
      received_text[rx_count] = RX_UART->DATA;
     80c:	6823      	ldr	r3, [r4, #0]
  } while ( rx_count <str_size);
     80e:	4290      	cmp	r0, r2
      received_text[rx_count] = RX_UART->DATA;
     810:	f80e 3c28 	strb.w	r3, [lr, #-40]
  } while ( rx_count <str_size);
     814:	4613      	mov	r3, r2
     816:	d904      	bls.n	822 <simple_uart_baud_test+0xea>
     818:	3201      	adds	r2, #1
     81a:	e7e1      	b.n	7e0 <simple_uart_baud_test+0xa8>
     81c:	4298      	cmp	r0, r3
     81e:	d8df      	bhi.n	7e0 <simple_uart_baud_test+0xa8>
     820:	4694      	mov	ip, r2
  received_text[rx_count]=0; /* add NULL termination */
     822:	aa1a      	add	r2, sp, #104	; 0x68
     824:	4413      	add	r3, r2
  received_text[rx_count+1]=0; /* add NULL termination */
     826:	4494      	add	ip, r2
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     828:	a910      	add	r1, sp, #64	; 0x40
     82a:	a815      	add	r0, sp, #84	; 0x54
  received_text[rx_count]=0; /* add NULL termination */
     82c:	f803 ac28 	strb.w	sl, [r3, #-40]
  received_text[rx_count+1]=0; /* add NULL termination */
     830:	f80c ac28 	strb.w	sl, [ip, #-40]
  received_text[rx_count+2]=0; /* add NULL termination */
     834:	f803 ac26 	strb.w	sl, [r3, #-38]
  received_text[rx_count+3]=0; /* add NULL termination */
     838:	f803 ac25 	strb.w	sl, [r3, #-37]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     83c:	f001 fb4c 	bl	1ed8 <strcmp>
     840:	2800      	cmp	r0, #0
     842:	d079      	beq.n	938 <simple_uart_baud_test+0x200>
  TX_UART->CTRL =  0; /* Clear TX enable */
     844:	f8c5 a008 	str.w	sl, [r5, #8]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     848:	3610      	adds	r6, #16
  RX_UART->CTRL =  0; /* Clear RX enable */
     84a:	f8c4 a008 	str.w	sl, [r4, #8]
    printf ("ERROR : baud test failed (0x%x)\n", err_code);
     84e:	4631      	mov	r1, r6
     850:	4848      	ldr	r0, [pc, #288]	; (974 <simple_uart_baud_test+0x23c>)
     852:	f001 fac5 	bl	1de0 <iprintf>
     856:	2303      	movs	r3, #3
     858:	2107      	movs	r1, #7
     85a:	f04f 0805 	mov.w	r8, #5
      tx_bauddiv[i],  rx_bauddiv[i]   , NO_DISPLAY)!=0) {err_code |= 0x1;};
     85e:	2601      	movs	r6, #1
     860:	e9cd 3102 	strd	r3, r1, [sp, #8]
    if (simple_uart_baud_test_single(CM3DS_MPS2_UART2,
     864:	f109 0101 	add.w	r1, r9, #1
     868:	4638      	mov	r0, r7
     86a:	f7ff fcc1 	bl	1f0 <simple_uart_baud_test_single.constprop.7>
     86e:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
     872:	2800      	cmp	r0, #0
     874:	d055      	beq.n	922 <simple_uart_baud_test+0x1ea>
    if (simple_uart_baud_test_single(CM3DS_MPS2_UART2,
     876:	4638      	mov	r0, r7
     878:	f7ff fcba 	bl	1f0 <simple_uart_baud_test_single.constprop.7>
      tx_bauddiv[i], (rx_bauddiv[i]+1), NO_DISPLAY)!=0) {err_code |= 0x2;};
     87c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     880:	2800      	cmp	r0, #0
     882:	bf08      	it	eq
     884:	4613      	moveq	r3, r2
     886:	4698      	mov	r8, r3
      printf ("ERROR : Baud rate test failed (0x%x) at loop %d\n", err_code, i);
     888:	4641      	mov	r1, r8
     88a:	465a      	mov	r2, fp
     88c:	483a      	ldr	r0, [pc, #232]	; (978 <simple_uart_baud_test+0x240>)
     88e:	f001 faa7 	bl	1de0 <iprintf>
      return_val = 1;
     892:	2301      	movs	r3, #1
     894:	9305      	str	r3, [sp, #20]
  for (i=0; i<10; i++) {
     896:	f10b 0b01 	add.w	fp, fp, #1
     89a:	f1bb 0f0a 	cmp.w	fp, #10
     89e:	f47f af6d 	bne.w	77c <simple_uart_baud_test+0x44>
  CM3DS_MPS2_UART2->CTRL = 0;
     8a2:	2200      	movs	r2, #0
  CM3DS_MPS2_UART2->BAUDDIV = 0xFFFFFFFF;
     8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  CM3DS_MPS2_UART2->CTRL = 0;
     8a8:	4b30      	ldr	r3, [pc, #192]	; (96c <simple_uart_baud_test+0x234>)
  CM3DS_MPS2_UART3->CTRL = 0;
     8aa:	4c31      	ldr	r4, [pc, #196]	; (970 <simple_uart_baud_test+0x238>)
  CM3DS_MPS2_UART2->BAUDDIV = 0xFF55AAC3;
     8ac:	4933      	ldr	r1, [pc, #204]	; (97c <simple_uart_baud_test+0x244>)
  CM3DS_MPS2_UART2->CTRL = 0;
     8ae:	609a      	str	r2, [r3, #8]
  CM3DS_MPS2_UART3->CTRL = 0;
     8b0:	60a2      	str	r2, [r4, #8]
  CM3DS_MPS2_UART2->BAUDDIV = 0xFFFFFFFF;
     8b2:	6118      	str	r0, [r3, #16]
  if (CM3DS_MPS2_UART2->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<0);};
     8b4:	6918      	ldr	r0, [r3, #16]
  CM3DS_MPS2_UART2->BAUDDIV = 0xFF55AAC3;
     8b6:	6119      	str	r1, [r3, #16]
  if (CM3DS_MPS2_UART2->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<0);};
     8b8:	4931      	ldr	r1, [pc, #196]	; (980 <simple_uart_baud_test+0x248>)
  if (CM3DS_MPS2_UART2->BAUDDIV != (0xFF55AAC3 & BAUDDIV_MASK)) {err_code |= (1<<1);};
     8ba:	691a      	ldr	r2, [r3, #16]
     8bc:	4b31      	ldr	r3, [pc, #196]	; (984 <simple_uart_baud_test+0x24c>)
  if (CM3DS_MPS2_UART2->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<0);};
     8be:	1a41      	subs	r1, r0, r1
     8c0:	bf18      	it	ne
     8c2:	2101      	movne	r1, #1
  if (CM3DS_MPS2_UART2->BAUDDIV != (0xFF55AAC3 & BAUDDIV_MASK)) {err_code |= (1<<1);};
     8c4:	429a      	cmp	r2, r3
  CM3DS_MPS2_UART2->BAUDDIV = 0x00000000;
     8c6:	f04f 0200 	mov.w	r2, #0
     8ca:	4b28      	ldr	r3, [pc, #160]	; (96c <simple_uart_baud_test+0x234>)
  if (CM3DS_MPS2_UART2->BAUDDIV != (0xFF55AAC3 & BAUDDIV_MASK)) {err_code |= (1<<1);};
     8cc:	bf18      	it	ne
     8ce:	f041 0102 	orrne.w	r1, r1, #2
  CM3DS_MPS2_UART2->BAUDDIV = 0x00000000;
     8d2:	611a      	str	r2, [r3, #16]
  if (CM3DS_MPS2_UART2->BAUDDIV != (0x00000000 & BAUDDIV_MASK)) {err_code |= (1<<2);};
     8d4:	691b      	ldr	r3, [r3, #16]
     8d6:	b10b      	cbz	r3, 8dc <simple_uart_baud_test+0x1a4>
     8d8:	f041 0104 	orr.w	r1, r1, #4
  CM3DS_MPS2_UART3->BAUDDIV = 0xFFFFFFFF;
     8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8e0:	4b23      	ldr	r3, [pc, #140]	; (970 <simple_uart_baud_test+0x238>)
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<3);};
     8e2:	4a27      	ldr	r2, [pc, #156]	; (980 <simple_uart_baud_test+0x248>)
  CM3DS_MPS2_UART3->BAUDDIV = 0xFFFFFFFF;
     8e4:	6118      	str	r0, [r3, #16]
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<3);};
     8e6:	691b      	ldr	r3, [r3, #16]
  CM3DS_MPS2_UART3->BAUDDIV = 0xAAFF6699;
     8e8:	4827      	ldr	r0, [pc, #156]	; (988 <simple_uart_baud_test+0x250>)
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<3);};
     8ea:	4293      	cmp	r3, r2
  CM3DS_MPS2_UART3->BAUDDIV = 0xAAFF6699;
     8ec:	4b20      	ldr	r3, [pc, #128]	; (970 <simple_uart_baud_test+0x238>)
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xAAFF6699 & BAUDDIV_MASK)) {err_code |= (1<<4);};
     8ee:	4a27      	ldr	r2, [pc, #156]	; (98c <simple_uart_baud_test+0x254>)
  CM3DS_MPS2_UART3->BAUDDIV = 0xAAFF6699;
     8f0:	6118      	str	r0, [r3, #16]
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xAAFF6699 & BAUDDIV_MASK)) {err_code |= (1<<4);};
     8f2:	6918      	ldr	r0, [r3, #16]
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xFFFFFFFF & BAUDDIV_MASK)) {err_code |= (1<<3);};
     8f4:	bf18      	it	ne
     8f6:	f041 0108 	orrne.w	r1, r1, #8
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xAAFF6699 & BAUDDIV_MASK)) {err_code |= (1<<4);};
     8fa:	4290      	cmp	r0, r2
  CM3DS_MPS2_UART3->BAUDDIV = 0x00000000;
     8fc:	f04f 0200 	mov.w	r2, #0
     900:	611a      	str	r2, [r3, #16]
  if (CM3DS_MPS2_UART3->BAUDDIV != (0x00000000 & BAUDDIV_MASK)) {err_code |= (1<<5);};
     902:	691b      	ldr	r3, [r3, #16]
  if (CM3DS_MPS2_UART3->BAUDDIV != (0xAAFF6699 & BAUDDIV_MASK)) {err_code |= (1<<4);};
     904:	d023      	beq.n	94e <simple_uart_baud_test+0x216>
     906:	f041 0110 	orr.w	r1, r1, #16
  if (CM3DS_MPS2_UART3->BAUDDIV != (0x00000000 & BAUDDIV_MASK)) {err_code |= (1<<5);};
     90a:	b10b      	cbz	r3, 910 <simple_uart_baud_test+0x1d8>
     90c:	f041 0120 	orr.w	r1, r1, #32
      printf ("ERROR : Baud rate r/w failed (0x%x)\n", err_code);
     910:	481f      	ldr	r0, [pc, #124]	; (990 <simple_uart_baud_test+0x258>)
     912:	f001 fa65 	bl	1de0 <iprintf>
      return_val = 1;
     916:	2301      	movs	r3, #1
     918:	9305      	str	r3, [sp, #20]
}
     91a:	9805      	ldr	r0, [sp, #20]
     91c:	b01b      	add	sp, #108	; 0x6c
     91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (simple_uart_baud_test_single(CM3DS_MPS2_UART2,
     922:	4638      	mov	r0, r7
     924:	f7ff fc64 	bl	1f0 <simple_uart_baud_test_single.constprop.7>
     928:	2800      	cmp	r0, #0
     92a:	d1ad      	bne.n	888 <simple_uart_baud_test+0x150>
    if (err_code != 0) {
     92c:	b9be      	cbnz	r6, 95e <simple_uart_baud_test+0x226>
      printf ("- bauddiv = %d done\n", tx_bauddiv[i]);
     92e:	4639      	mov	r1, r7
     930:	4818      	ldr	r0, [pc, #96]	; (994 <simple_uart_baud_test+0x25c>)
     932:	f001 fa55 	bl	1de0 <iprintf>
     936:	e7ae      	b.n	896 <simple_uart_baud_test+0x15e>
  TX_UART->CTRL =  0; /* Clear TX enable */
     938:	60a8      	str	r0, [r5, #8]
  RX_UART->CTRL =  0; /* Clear RX enable */
     93a:	60a0      	str	r0, [r4, #8]
  if (err_code != 0) {
     93c:	2e00      	cmp	r6, #0
     93e:	d186      	bne.n	84e <simple_uart_baud_test+0x116>
     940:	2302      	movs	r3, #2
     942:	2206      	movs	r2, #6
     944:	f04f 0804 	mov.w	r8, #4
     948:	e9cd 3202 	strd	r3, r2, [sp, #8]
     94c:	e78a      	b.n	864 <simple_uart_baud_test+0x12c>
  if (CM3DS_MPS2_UART3->BAUDDIV != (0x00000000 & BAUDDIV_MASK)) {err_code |= (1<<5);};
     94e:	2b00      	cmp	r3, #0
     950:	d1dc      	bne.n	90c <simple_uart_baud_test+0x1d4>
    if (err_code != 0) {
     952:	2900      	cmp	r1, #0
     954:	d1dc      	bne.n	910 <simple_uart_baud_test+0x1d8>
}
     956:	9805      	ldr	r0, [sp, #20]
     958:	b01b      	add	sp, #108	; 0x6c
     95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     95e:	46b0      	mov	r8, r6
     960:	e792      	b.n	888 <simple_uart_baud_test+0x150>
     962:	bf00      	nop
     964:	00002d30 	.word	0x00002d30
     968:	00002e18 	.word	0x00002e18
     96c:	4002c000 	.word	0x4002c000
     970:	4002d000 	.word	0x4002d000
     974:	00002d44 	.word	0x00002d44
     978:	00002e2c 	.word	0x00002e2c
     97c:	ff55aac3 	.word	0xff55aac3
     980:	000fffff 	.word	0x000fffff
     984:	0005aac3 	.word	0x0005aac3
     988:	aaff6699 	.word	0xaaff6699
     98c:	000f6699 	.word	0x000f6699
     990:	00002e78 	.word	0x00002e78
     994:	00002e60 	.word	0x00002e60

00000998 <simple_uart_baud_test_single>:
{
     998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     99c:	4606      	mov	r6, r0
  const char  transmit_text[20] = "Hello world\n";
     99e:	f04f 0c00 	mov.w	ip, #0
{
     9a2:	b08a      	sub	sp, #40	; 0x28
  const char  transmit_text[20] = "Hello world\n";
     9a4:	484b      	ldr	r0, [pc, #300]	; (ad4 <simple_uart_baud_test_single+0x13c>)
     9a6:	af05      	add	r7, sp, #20
{
     9a8:	4688      	mov	r8, r1
     9aa:	4696      	mov	lr, r2
     9ac:	461c      	mov	r4, r3
  const char  transmit_text[20] = "Hello world\n";
     9ae:	c80f      	ldmia	r0, {r0, r1, r2, r3}
     9b0:	c707      	stmia	r7!, {r0, r1, r2}
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     9b2:	4d49      	ldr	r5, [pc, #292]	; (ad8 <simple_uart_baud_test_single+0x140>)
  const char  transmit_text[20] = "Hello world\n";
     9b4:	f8cd c021 	str.w	ip, [sp, #33]	; 0x21
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     9b8:	42ae      	cmp	r6, r5
  const char  transmit_text[20] = "Hello world\n";
     9ba:	703b      	strb	r3, [r7, #0]
     9bc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     9c0:	f000 8086 	beq.w	ad0 <simple_uart_baud_test_single+0x138>
  else if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     9c4:	4b45      	ldr	r3, [pc, #276]	; (adc <simple_uart_baud_test_single+0x144>)
     9c6:	429e      	cmp	r6, r3
     9c8:	d14d      	bne.n	a66 <simple_uart_baud_test_single+0xce>
  TX_UART->BAUDDIV = tx_bauddiv;
     9ca:	f8c6 8010 	str.w	r8, [r6, #16]
  if (TX_UART->BAUDDIV != tx_bauddiv) { err_code += (1<<0);}
     9ce:	6937      	ldr	r7, [r6, #16]
  RX_UART->BAUDDIV = rx_bauddiv;
     9d0:	f8c5 e010 	str.w	lr, [r5, #16]
  if (TX_UART->BAUDDIV != tx_bauddiv) { err_code += (1<<0);}
     9d4:	ebb7 0708 	subs.w	r7, r7, r8
     9d8:	bf18      	it	ne
     9da:	2701      	movne	r7, #1
  if (RX_UART->BAUDDIV != rx_bauddiv) { err_code += (1<<1);}
     9dc:	692b      	ldr	r3, [r5, #16]
     9de:	4573      	cmp	r3, lr
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     9e0:	68b3      	ldr	r3, [r6, #8]
  if (RX_UART->BAUDDIV != rx_bauddiv) { err_code += (1<<1);}
     9e2:	bf18      	it	ne
     9e4:	3702      	addne	r7, #2
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     9e6:	f043 0301 	orr.w	r3, r3, #1
     9ea:	60b3      	str	r3, [r6, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     9ec:	68b3      	ldr	r3, [r6, #8]
     9ee:	07d9      	lsls	r1, r3, #31
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     9f0:	68ab      	ldr	r3, [r5, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     9f2:	bf58      	it	pl
     9f4:	3704      	addpl	r7, #4
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     9f6:	f043 0302 	orr.w	r3, r3, #2
     9fa:	60ab      	str	r3, [r5, #8]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     9fc:	68ab      	ldr	r3, [r5, #8]
     9fe:	079a      	lsls	r2, r3, #30
     a00:	bf58      	it	pl
     a02:	3708      	addpl	r7, #8
     a04:	2c00      	cmp	r4, #0
     a06:	d136      	bne.n	a76 <simple_uart_baud_test_single+0xde>
  tx_count = 0;
     a08:	4621      	mov	r1, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     a0a:	6873      	ldr	r3, [r6, #4]
      received_text[rx_count] = RX_UART->DATA;
     a0c:	aa0a      	add	r2, sp, #40	; 0x28
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     a0e:	07db      	lsls	r3, r3, #31
      received_text[rx_count] = RX_UART->DATA;
     a10:	4422      	add	r2, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     a12:	d407      	bmi.n	a24 <simple_uart_baud_test_single+0x8c>
     a14:	290b      	cmp	r1, #11
     a16:	d805      	bhi.n	a24 <simple_uart_baud_test_single+0x8c>
      TX_UART->DATA = transmit_text[tx_count];
     a18:	ab0a      	add	r3, sp, #40	; 0x28
     a1a:	440b      	add	r3, r1
     a1c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
      tx_count++;
     a20:	3101      	adds	r1, #1
      TX_UART->DATA = transmit_text[tx_count];
     a22:	6033      	str	r3, [r6, #0]
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     a24:	686b      	ldr	r3, [r5, #4]
     a26:	0798      	lsls	r0, r3, #30
     a28:	d544      	bpl.n	ab4 <simple_uart_baud_test_single+0x11c>
      received_text[rx_count] = RX_UART->DATA;
     a2a:	682b      	ldr	r3, [r5, #0]
      rx_count++;
     a2c:	3401      	adds	r4, #1
  } while ( rx_count <str_size);
     a2e:	2c0b      	cmp	r4, #11
      received_text[rx_count] = RX_UART->DATA;
     a30:	f802 3c28 	strb.w	r3, [r2, #-40]
  } while ( rx_count <str_size);
     a34:	d9e9      	bls.n	a0a <simple_uart_baud_test_single+0x72>
  received_text[rx_count]=0; /* add NULL termination */
     a36:	f04f 0800 	mov.w	r8, #0
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     a3a:	a805      	add	r0, sp, #20
     a3c:	4669      	mov	r1, sp
  received_text[rx_count]=0; /* add NULL termination */
     a3e:	f84d 8004 	str.w	r8, [sp, r4]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     a42:	f001 fa49 	bl	1ed8 <strcmp>
     a46:	2800      	cmp	r0, #0
     a48:	d03a      	beq.n	ac0 <simple_uart_baud_test_single+0x128>
  TX_UART->CTRL =  0; /* Clear TX enable */
     a4a:	f8c6 8008 	str.w	r8, [r6, #8]
  if (strcmp(transmit_text, received_text)!=0){ err_code += (1<<4);}
     a4e:	3710      	adds	r7, #16
  RX_UART->CTRL =  0; /* Clear RX enable */
     a50:	f8c5 8008 	str.w	r8, [r5, #8]
    printf ("ERROR : baud test failed (0x%x)\n", err_code);
     a54:	4639      	mov	r1, r7
    return_val =1;
     a56:	2701      	movs	r7, #1
    printf ("ERROR : baud test failed (0x%x)\n", err_code);
     a58:	4821      	ldr	r0, [pc, #132]	; (ae0 <simple_uart_baud_test_single+0x148>)
     a5a:	f001 f9c1 	bl	1de0 <iprintf>
}
     a5e:	4638      	mov	r0, r7
     a60:	b00a      	add	sp, #40	; 0x28
     a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return 1;
     a66:	2701      	movs	r7, #1
    puts ("ERROR: Input parameter invalid in function 'simple_uart_baud_test_single'.");
     a68:	481e      	ldr	r0, [pc, #120]	; (ae4 <simple_uart_baud_test_single+0x14c>)
     a6a:	f001 fa2d 	bl	1ec8 <puts>
}
     a6e:	4638      	mov	r0, r7
     a70:	b00a      	add	sp, #40	; 0x28
     a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  rx_count = 0;
     a76:	2400      	movs	r4, #0
  tx_count = 0;
     a78:	46a0      	mov	r8, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     a7a:	6873      	ldr	r3, [r6, #4]
      received_text[rx_count] = RX_UART->DATA;
     a7c:	aa0a      	add	r2, sp, #40	; 0x28
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     a7e:	07d9      	lsls	r1, r3, #31
      received_text[rx_count] = RX_UART->DATA;
     a80:	4422      	add	r2, r4
    if (((TX_UART->STATE & UART_STATE_TXFULL)==0)&&(tx_count<str_size)) {
     a82:	d409      	bmi.n	a98 <simple_uart_baud_test_single+0x100>
     a84:	f1b8 0f0b 	cmp.w	r8, #11
     a88:	d806      	bhi.n	a98 <simple_uart_baud_test_single+0x100>
      TX_UART->DATA = transmit_text[tx_count];
     a8a:	ab0a      	add	r3, sp, #40	; 0x28
     a8c:	4443      	add	r3, r8
     a8e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
      tx_count++;
     a92:	f108 0801 	add.w	r8, r8, #1
      TX_UART->DATA = transmit_text[tx_count];
     a96:	6033      	str	r3, [r6, #0]
    if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     a98:	686b      	ldr	r3, [r5, #4]
     a9a:	079b      	lsls	r3, r3, #30
     a9c:	d50d      	bpl.n	aba <simple_uart_baud_test_single+0x122>
      received_text[rx_count] = RX_UART->DATA;
     a9e:	682b      	ldr	r3, [r5, #0]
      rx_count++;
     aa0:	3401      	adds	r4, #1
      received_text[rx_count] = RX_UART->DATA;
     aa2:	b2db      	uxtb	r3, r3
      if (verbose) UartPutc((char) received_text[rx_count]);
     aa4:	4618      	mov	r0, r3
      received_text[rx_count] = RX_UART->DATA;
     aa6:	f802 3c28 	strb.w	r3, [r2, #-40]
      if (verbose) UartPutc((char) received_text[rx_count]);
     aaa:	f001 f955 	bl	1d58 <UartPutc>
  } while ( rx_count <str_size);
     aae:	2c0b      	cmp	r4, #11
     ab0:	d9e3      	bls.n	a7a <simple_uart_baud_test_single+0xe2>
     ab2:	e7c0      	b.n	a36 <simple_uart_baud_test_single+0x9e>
     ab4:	2c0b      	cmp	r4, #11
     ab6:	d9a8      	bls.n	a0a <simple_uart_baud_test_single+0x72>
     ab8:	e7bd      	b.n	a36 <simple_uart_baud_test_single+0x9e>
     aba:	2c0b      	cmp	r4, #11
     abc:	d9dd      	bls.n	a7a <simple_uart_baud_test_single+0xe2>
     abe:	e7ba      	b.n	a36 <simple_uart_baud_test_single+0x9e>
  TX_UART->CTRL =  0; /* Clear TX enable */
     ac0:	60b0      	str	r0, [r6, #8]
  RX_UART->CTRL =  0; /* Clear RX enable */
     ac2:	60a8      	str	r0, [r5, #8]
  if (err_code != 0) {
     ac4:	2f00      	cmp	r7, #0
     ac6:	d1c5      	bne.n	a54 <simple_uart_baud_test_single+0xbc>
}
     ac8:	4638      	mov	r0, r7
     aca:	b00a      	add	sp, #40	; 0x28
     acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RX_UART = CM3DS_MPS2_UART3;
     ad0:	4d02      	ldr	r5, [pc, #8]	; (adc <simple_uart_baud_test_single+0x144>)
     ad2:	e77a      	b.n	9ca <simple_uart_baud_test_single+0x32>
     ad4:	00002d1c 	.word	0x00002d1c
     ad8:	4002c000 	.word	0x4002c000
     adc:	4002d000 	.word	0x4002d000
     ae0:	00002d44 	.word	0x00002d44
     ae4:	00002ea0 	.word	0x00002ea0

00000ae8 <uart_enable_ctrl_test>:
/* --------------------------------------------------------------- */
/*  UART enable control test                                       */
/* --------------------------------------------------------------- */
int uart_enable_ctrl_test(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
{
     ae8:	b570      	push	{r4, r5, r6, lr}
  CM3DS_MPS2_UART_TypeDef *TX_UART;
  CM3DS_MPS2_UART_TypeDef *RX_UART;
  char ctmp;

  /* Determine which UART is the sender, and which UART is receiver */
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     aea:	4c69      	ldr	r4, [pc, #420]	; (c90 <uart_enable_ctrl_test+0x1a8>)
{
     aec:	4605      	mov	r5, r0
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     aee:	42a0      	cmp	r0, r4
     af0:	f000 80cb 	beq.w	c8a <uart_enable_ctrl_test+0x1a2>
    TX_UART = CM3DS_MPS2_UART2;
    RX_UART = CM3DS_MPS2_UART3;
    }
  else if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     af4:	4b67      	ldr	r3, [pc, #412]	; (c94 <uart_enable_ctrl_test+0x1ac>)
     af6:	4298      	cmp	r0, r3
     af8:	f040 80a9 	bne.w	c4e <uart_enable_ctrl_test+0x166>
  else {
    puts ("ERROR: Input parameter invalid in function 'uart_enable_ctrl_test'.");
    return 1;
    }

  puts ("UART enable test");
     afc:	4866      	ldr	r0, [pc, #408]	; (c98 <uart_enable_ctrl_test+0x1b0>)
     afe:	f001 f9e3 	bl	1ec8 <puts>
  /* UART programmed with same baud rate */
  TX_UART->BAUDDIV = 32;
     b02:	2320      	movs	r3, #32
     b04:	612b      	str	r3, [r5, #16]
  if (TX_UART->BAUDDIV != 32) { err_code += (1<<0);}
     b06:	692e      	ldr	r6, [r5, #16]
  RX_UART->BAUDDIV = 32;
     b08:	6123      	str	r3, [r4, #16]
  if (TX_UART->BAUDDIV != 32) { err_code += (1<<0);}
     b0a:	3e20      	subs	r6, #32
     b0c:	bf18      	it	ne
     b0e:	2601      	movne	r6, #1
  if (RX_UART->BAUDDIV != 32) { err_code += (1<<1);}
     b10:	6923      	ldr	r3, [r4, #16]

  puts ("- both TX and RX are enabled");
     b12:	4862      	ldr	r0, [pc, #392]	; (c9c <uart_enable_ctrl_test+0x1b4>)
  if (RX_UART->BAUDDIV != 32) { err_code += (1<<1);}
     b14:	2b20      	cmp	r3, #32
     b16:	bf18      	it	ne
     b18:	3602      	addne	r6, #2
  puts ("- both TX and RX are enabled");
     b1a:	f001 f9d5 	bl	1ec8 <puts>
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     b1e:	68ab      	ldr	r3, [r5, #8]
     b20:	f043 0301 	orr.w	r3, r3, #1
     b24:	60ab      	str	r3, [r5, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     b26:	68ab      	ldr	r3, [r5, #8]
     b28:	07da      	lsls	r2, r3, #31
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     b2a:	68a3      	ldr	r3, [r4, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)==0) { err_code += (1<<2);}
     b2c:	bf58      	it	pl
     b2e:	3604      	addpl	r6, #4
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     b30:	f043 0302 	orr.w	r3, r3, #2
     b34:	60a3      	str	r3, [r4, #8]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     b36:	68a3      	ldr	r3, [r4, #8]
     b38:	079b      	lsls	r3, r3, #30

  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b3a:	686b      	ldr	r3, [r5, #4]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)==0) { err_code += (1<<3);}
     b3c:	bf58      	it	pl
     b3e:	3608      	addpl	r6, #8
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b40:	07d8      	lsls	r0, r3, #31
     b42:	f140 808a 	bpl.w	c5a <uart_enable_ctrl_test+0x172>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
      /* Starting state incorrect */
      err_code += (1<<4);}
     b46:	3610      	adds	r6, #16
  TX_UART->DATA = 'A'; /* transmit a character */
     b48:	2241      	movs	r2, #65	; 0x41
     b4a:	2378      	movs	r3, #120	; 0x78
     b4c:	602a      	str	r2, [r5, #0]
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
     b4e:	f3bf 8f6f 	isb	sy
/* --------------------------------------------------------------- */

void delay_for_character(void)
{
  int i;
  for (i=0; i<120;i++){
     b52:	3b01      	subs	r3, #1
     b54:	d1fb      	bne.n	b4e <uart_enable_ctrl_test+0x66>
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b56:	686b      	ldr	r3, [r5, #4]
     b58:	07da      	lsls	r2, r3, #31
     b5a:	f100 808c 	bmi.w	c76 <uart_enable_ctrl_test+0x18e>
      ((RX_UART->STATE & UART_STATE_RXFULL)==0)) {
     b5e:	6863      	ldr	r3, [r4, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b60:	079b      	lsls	r3, r3, #30
     b62:	f140 8088 	bpl.w	c76 <uart_enable_ctrl_test+0x18e>
  ctmp = RX_UART->DATA; /* Read received data */
     b66:	6823      	ldr	r3, [r4, #0]
  if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     b68:	6862      	ldr	r2, [r4, #4]
  ctmp = RX_UART->DATA; /* Read received data */
     b6a:	b2db      	uxtb	r3, r3
  if ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     b6c:	0790      	lsls	r0, r2, #30
      err_code += (1<<6);}
     b6e:	bf48      	it	mi
     b70:	3640      	addmi	r6, #64	; 0x40
  puts ("- TX disabled");
     b72:	484b      	ldr	r0, [pc, #300]	; (ca0 <uart_enable_ctrl_test+0x1b8>)
  if (  ctmp != 'A') { /* received data incorrect */
     b74:	2b41      	cmp	r3, #65	; 0x41
      err_code += (1<<7);}
     b76:	bf18      	it	ne
     b78:	3680      	addne	r6, #128	; 0x80
  puts ("- TX disabled");
     b7a:	f001 f9a5 	bl	1ec8 <puts>
  TX_UART->CTRL =   TX_UART->CTRL & ~UART_CTRL_TXEN; /* Clear TX enable */
     b7e:	68ab      	ldr	r3, [r5, #8]
     b80:	f023 0301 	bic.w	r3, r3, #1
     b84:	60ab      	str	r3, [r5, #8]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)!=0) { err_code += (1<<8);}
     b86:	68ab      	ldr	r3, [r5, #8]
     b88:	07d9      	lsls	r1, r3, #31
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b8a:	686b      	ldr	r3, [r5, #4]
  if ((TX_UART->CTRL & UART_CTRL_TXEN)!=0) { err_code += (1<<8);}
     b8c:	bf48      	it	mi
     b8e:	f506 7680 	addmi.w	r6, r6, #256	; 0x100
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b92:	07da      	lsls	r2, r3, #31
     b94:	d46c      	bmi.n	c70 <uart_enable_ctrl_test+0x188>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     b96:	6863      	ldr	r3, [r4, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     b98:	079b      	lsls	r3, r3, #30
     b9a:	d469      	bmi.n	c70 <uart_enable_ctrl_test+0x188>
  TX_UART->DATA = 'B'; /* transmit a character */
     b9c:	2242      	movs	r2, #66	; 0x42
     b9e:	2378      	movs	r3, #120	; 0x78
     ba0:	602a      	str	r2, [r5, #0]
     ba2:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     ba6:	3b01      	subs	r3, #1
     ba8:	d1fb      	bne.n	ba2 <uart_enable_ctrl_test+0xba>
  if ((RX_UART->STATE & UART_STATE_RXFULL)!=0)  {
     baa:	6863      	ldr	r3, [r4, #4]
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     bac:	68aa      	ldr	r2, [r5, #8]
  if ((RX_UART->STATE & UART_STATE_RXFULL)!=0)  {
     bae:	0798      	lsls	r0, r3, #30
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     bb0:	f04f 0378 	mov.w	r3, #120	; 0x78
     bb4:	f042 0201 	orr.w	r2, r2, #1
      err_code += (1<<10);}
     bb8:	bf48      	it	mi
     bba:	f506 6680 	addmi.w	r6, r6, #1024	; 0x400
  TX_UART->CTRL =   TX_UART->CTRL | UART_CTRL_TXEN; /* Set TX enable */
     bbe:	60aa      	str	r2, [r5, #8]
     bc0:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     bc4:	3b01      	subs	r3, #1
     bc6:	d1fb      	bne.n	bc0 <uart_enable_ctrl_test+0xd8>
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     bc8:	686b      	ldr	r3, [r5, #4]
     bca:	07d9      	lsls	r1, r3, #31
     bcc:	d44d      	bmi.n	c6a <uart_enable_ctrl_test+0x182>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     bce:	6863      	ldr	r3, [r4, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     bd0:	079a      	lsls	r2, r3, #30
     bd2:	d44a      	bmi.n	c6a <uart_enable_ctrl_test+0x182>
  puts ("- RX disabled");
     bd4:	4833      	ldr	r0, [pc, #204]	; (ca4 <uart_enable_ctrl_test+0x1bc>)
     bd6:	f001 f977 	bl	1ec8 <puts>
  RX_UART->CTRL =   RX_UART->CTRL & ~UART_CTRL_RXEN; /* Clear RX enable */
     bda:	68a3      	ldr	r3, [r4, #8]
  TX_UART->DATA = 'C'; /* transmit a character */
     bdc:	2243      	movs	r2, #67	; 0x43
  RX_UART->CTRL =   RX_UART->CTRL & ~UART_CTRL_RXEN; /* Clear RX enable */
     bde:	f023 0302 	bic.w	r3, r3, #2
     be2:	60a3      	str	r3, [r4, #8]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)!=0) { err_code += (1<<12);}
     be4:	68a3      	ldr	r3, [r4, #8]
  TX_UART->DATA = 'C'; /* transmit a character */
     be6:	602a      	str	r2, [r5, #0]
  if ((RX_UART->CTRL & UART_CTRL_RXEN)!=0) { err_code += (1<<12);}
     be8:	079b      	lsls	r3, r3, #30
  TX_UART->DATA = 'C'; /* transmit a character */
     bea:	f04f 0378 	mov.w	r3, #120	; 0x78
  if ((RX_UART->CTRL & UART_CTRL_RXEN)!=0) { err_code += (1<<12);}
     bee:	bf48      	it	mi
     bf0:	f506 5680 	addmi.w	r6, r6, #4096	; 0x1000
     bf4:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     bf8:	3b01      	subs	r3, #1
     bfa:	d1fb      	bne.n	bf4 <uart_enable_ctrl_test+0x10c>
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     bfc:	686b      	ldr	r3, [r5, #4]
     bfe:	07d8      	lsls	r0, r3, #31
     c00:	d430      	bmi.n	c64 <uart_enable_ctrl_test+0x17c>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     c02:	6863      	ldr	r3, [r4, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     c04:	0799      	lsls	r1, r3, #30
     c06:	d42d      	bmi.n	c64 <uart_enable_ctrl_test+0x17c>
  RX_UART->CTRL =   RX_UART->CTRL | UART_CTRL_RXEN; /* Set RX enable */
     c08:	2378      	movs	r3, #120	; 0x78
     c0a:	68a2      	ldr	r2, [r4, #8]
     c0c:	f042 0202 	orr.w	r2, r2, #2
     c10:	60a2      	str	r2, [r4, #8]
     c12:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     c16:	3b01      	subs	r3, #1
     c18:	d1fb      	bne.n	c12 <uart_enable_ctrl_test+0x12a>
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     c1a:	686a      	ldr	r2, [r5, #4]
     c1c:	07d2      	lsls	r2, r2, #31
     c1e:	d402      	bmi.n	c26 <uart_enable_ctrl_test+0x13e>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     c20:	6862      	ldr	r2, [r4, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     c22:	0790      	lsls	r0, r2, #30
     c24:	d529      	bpl.n	c7a <uart_enable_ctrl_test+0x192>
  TX_UART->CTRL = 0;
     c26:	2300      	movs	r3, #0
     c28:	60ab      	str	r3, [r5, #8]
  RX_UART->CTRL = 0;
     c2a:	60a3      	str	r3, [r4, #8]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     c2c:	6863      	ldr	r3, [r4, #4]
      err_code += (1<<14);}
     c2e:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     c32:	0799      	lsls	r1, r3, #30
     c34:	d504      	bpl.n	c40 <uart_enable_ctrl_test+0x158>
    ctmp=RX_UART->DATA;
     c36:	6823      	ldr	r3, [r4, #0]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     c38:	6863      	ldr	r3, [r4, #4]
     c3a:	079b      	lsls	r3, r3, #30
     c3c:	d4fb      	bmi.n	c36 <uart_enable_ctrl_test+0x14e>
  if (err_code != 0) {
     c3e:	b156      	cbz	r6, c56 <uart_enable_ctrl_test+0x16e>
    printf ("ERROR : uart enable failed (0x%x)\n", err_code);
     c40:	4631      	mov	r1, r6
    return_val =1;
     c42:	2601      	movs	r6, #1
    printf ("ERROR : uart enable failed (0x%x)\n", err_code);
     c44:	4818      	ldr	r0, [pc, #96]	; (ca8 <uart_enable_ctrl_test+0x1c0>)
     c46:	f001 f8cb 	bl	1de0 <iprintf>
}
     c4a:	4630      	mov	r0, r6
     c4c:	bd70      	pop	{r4, r5, r6, pc}
    puts ("ERROR: Input parameter invalid in function 'uart_enable_ctrl_test'.");
     c4e:	4817      	ldr	r0, [pc, #92]	; (cac <uart_enable_ctrl_test+0x1c4>)
     c50:	f001 f93a 	bl	1ec8 <puts>
    return 1;
     c54:	2601      	movs	r6, #1
}
     c56:	4630      	mov	r0, r6
     c58:	bd70      	pop	{r4, r5, r6, pc}
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     c5a:	6863      	ldr	r3, [r4, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     c5c:	0799      	lsls	r1, r3, #30
     c5e:	f57f af73 	bpl.w	b48 <uart_enable_ctrl_test+0x60>
     c62:	e770      	b.n	b46 <uart_enable_ctrl_test+0x5e>
      err_code += (1<<13);}
     c64:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
     c68:	e7ce      	b.n	c08 <uart_enable_ctrl_test+0x120>
      err_code += (1<<11);}
     c6a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
     c6e:	e7b1      	b.n	bd4 <uart_enable_ctrl_test+0xec>
      err_code += (1<<9);}
     c70:	f506 7600 	add.w	r6, r6, #512	; 0x200
     c74:	e792      	b.n	b9c <uart_enable_ctrl_test+0xb4>
      err_code += (1<<5);}
     c76:	3620      	adds	r6, #32
     c78:	e775      	b.n	b66 <uart_enable_ctrl_test+0x7e>
  TX_UART->CTRL = 0;
     c7a:	60ab      	str	r3, [r5, #8]
  RX_UART->CTRL = 0;
     c7c:	60a3      	str	r3, [r4, #8]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     c7e:	6863      	ldr	r3, [r4, #4]
     c80:	079a      	lsls	r2, r3, #30
     c82:	d4d8      	bmi.n	c36 <uart_enable_ctrl_test+0x14e>
  if (err_code != 0) {
     c84:	2e00      	cmp	r6, #0
     c86:	d0e6      	beq.n	c56 <uart_enable_ctrl_test+0x16e>
     c88:	e7da      	b.n	c40 <uart_enable_ctrl_test+0x158>
    RX_UART = CM3DS_MPS2_UART3;
     c8a:	4c02      	ldr	r4, [pc, #8]	; (c94 <uart_enable_ctrl_test+0x1ac>)
     c8c:	e736      	b.n	afc <uart_enable_ctrl_test+0x14>
     c8e:	bf00      	nop
     c90:	4002c000 	.word	0x4002c000
     c94:	4002d000 	.word	0x4002d000
     c98:	00002f30 	.word	0x00002f30
     c9c:	00002f44 	.word	0x00002f44
     ca0:	00002f64 	.word	0x00002f64
     ca4:	00002f74 	.word	0x00002f74
     ca8:	00002f84 	.word	0x00002f84
     cac:	00002eec 	.word	0x00002eec

00000cb0 <uart_tx_rx_irq_test>:
{
     cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     cb4:	4db2      	ldr	r5, [pc, #712]	; (f80 <uart_tx_rx_irq_test+0x2d0>)
{
     cb6:	4606      	mov	r6, r0
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     cb8:	42a8      	cmp	r0, r5
     cba:	f000 81e2 	beq.w	1082 <uart_tx_rx_irq_test+0x3d2>
  else if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     cbe:	4bb1      	ldr	r3, [pc, #708]	; (f84 <uart_tx_rx_irq_test+0x2d4>)
     cc0:	4298      	cmp	r0, r3
     cc2:	f040 8141 	bne.w	f48 <uart_tx_rx_irq_test+0x298>
  puts ("UART TX & RX IRQ test");
     cc6:	48b0      	ldr	r0, [pc, #704]	; (f88 <uart_tx_rx_irq_test+0x2d8>)
     cc8:	f001 f8fe 	bl	1ec8 <puts>
  TX_UART->BAUDDIV = 33;
     ccc:	2321      	movs	r3, #33	; 0x21
     cce:	6133      	str	r3, [r6, #16]
  if (TX_UART->BAUDDIV != 33) { err_code += (1<<0);}
     cd0:	6934      	ldr	r4, [r6, #16]
  RX_UART->BAUDDIV = 33;
     cd2:	612b      	str	r3, [r5, #16]
  if (RX_UART->BAUDDIV != 33) { err_code += (1<<1);}
     cd4:	692b      	ldr	r3, [r5, #16]
  if (TX_UART->BAUDDIV != 33) { err_code += (1<<0);}
     cd6:	3c21      	subs	r4, #33	; 0x21
     cd8:	bf18      	it	ne
     cda:	2401      	movne	r4, #1
  if (RX_UART->BAUDDIV != 33) { err_code += (1<<1);}
     cdc:	2b21      	cmp	r3, #33	; 0x21
     cde:	f000 81ba 	beq.w	1056 <uart_tx_rx_irq_test+0x3a6>
  puts ("- TX irq enable");
     ce2:	48aa      	ldr	r0, [pc, #680]	; (f8c <uart_tx_rx_irq_test+0x2dc>)
  if (RX_UART->BAUDDIV != 33) { err_code += (1<<1);}
     ce4:	3402      	adds	r4, #2
  puts ("- TX irq enable");
     ce6:	f001 f8ef 	bl	1ec8 <puts>
    uart2_irq_expected=0;
     cea:	2300      	movs	r3, #0
    uart3_irq_expected=1;
     cec:	2001      	movs	r0, #1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    uart2_irq_expected=0;
     cf2:	f8df 82b8 	ldr.w	r8, [pc, #696]	; fac <uart_tx_rx_irq_test+0x2fc>
    uart3_irq_expected=1;
     cf6:	4fa6      	ldr	r7, [pc, #664]	; (f90 <uart_tx_rx_irq_test+0x2e0>)
    uart2_irq_occurred=0;
     cf8:	f8df a2b4 	ldr.w	sl, [pc, #692]	; fb0 <uart_tx_rx_irq_test+0x300>
    uart3_irq_occurred=0;
     cfc:	f8df 92b4 	ldr.w	r9, [pc, #692]	; fb4 <uart_tx_rx_irq_test+0x304>
     d00:	4aa4      	ldr	r2, [pc, #656]	; (f94 <uart_tx_rx_irq_test+0x2e4>)
     d02:	4d9f      	ldr	r5, [pc, #636]	; (f80 <uart_tx_rx_irq_test+0x2d0>)
    uart2_irq_expected=0;
     d04:	f8c8 3000 	str.w	r3, [r8]
    uart3_irq_expected=1;
     d08:	6038      	str	r0, [r7, #0]
    uart2_irq_occurred=0;
     d0a:	f8ca 3000 	str.w	r3, [sl]
    uart3_irq_occurred=0;
     d0e:	f8c9 3000 	str.w	r3, [r9]
     d12:	6051      	str	r1, [r2, #4]
  TX_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXIRQEN;
     d14:	2205      	movs	r2, #5
  RX_UART->CTRL = UART_CTRL_RXEN;
     d16:	2302      	movs	r3, #2
  TX_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXIRQEN;
     d18:	60b2      	str	r2, [r6, #8]
  RX_UART->CTRL = UART_CTRL_RXEN;
     d1a:	60ab      	str	r3, [r5, #8]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) |
     d1c:	6872      	ldr	r2, [r6, #4]
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     d1e:	686b      	ldr	r3, [r5, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) |
     d20:	f002 0201 	and.w	r2, r2, #1
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     d24:	f003 0302 	and.w	r3, r3, #2
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) |
     d28:	4313      	orrs	r3, r2
  TX_UART->DATA = 'A'; /* transmit a character */
     d2a:	f04f 0241 	mov.w	r2, #65	; 0x41
     d2e:	f04f 0378 	mov.w	r3, #120	; 0x78
      err_code += (1<<2);}
     d32:	bf18      	it	ne
     d34:	3404      	addne	r4, #4
  TX_UART->DATA = 'A'; /* transmit a character */
     d36:	6032      	str	r2, [r6, #0]
     d38:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     d3c:	3b01      	subs	r3, #1
     d3e:	d1fb      	bne.n	d38 <uart_tx_rx_irq_test+0x88>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     d40:	4b8f      	ldr	r3, [pc, #572]	; (f80 <uart_tx_rx_irq_test+0x2d0>)
     d42:	429e      	cmp	r6, r3
     d44:	f000 8179 	beq.w	103a <uart_tx_rx_irq_test+0x38a>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     d48:	4b8e      	ldr	r3, [pc, #568]	; (f84 <uart_tx_rx_irq_test+0x2d4>)
     d4a:	429e      	cmp	r6, r3
     d4c:	f000 8167 	beq.w	101e <uart_tx_rx_irq_test+0x36e>
  if (TX_UART->INTSTATUS != 0) { err_code += (1<<5);}
     d50:	68f3      	ldr	r3, [r6, #12]
     d52:	b103      	cbz	r3, d56 <uart_tx_rx_irq_test+0xa6>
     d54:	3420      	adds	r4, #32
  if (RX_UART->INTSTATUS != 0) { err_code += (1<<6);}
     d56:	68eb      	ldr	r3, [r5, #12]
     d58:	b103      	cbz	r3, d5c <uart_tx_rx_irq_test+0xac>
     d5a:	3440      	adds	r4, #64	; 0x40
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<7);}
     d5c:	686b      	ldr	r3, [r5, #4]
  puts ("- TX irq disable");
     d5e:	488e      	ldr	r0, [pc, #568]	; (f98 <uart_tx_rx_irq_test+0x2e8>)
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<7);}
     d60:	079a      	lsls	r2, r3, #30
  ctmp = RX_UART->DATA;
     d62:	682b      	ldr	r3, [r5, #0]
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<7);}
     d64:	bf58      	it	pl
     d66:	3480      	addpl	r4, #128	; 0x80
  if (ctmp!='A')                                 { err_code += (1<<8);}
     d68:	b2db      	uxtb	r3, r3
     d6a:	2b41      	cmp	r3, #65	; 0x41
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<9);}
     d6c:	686b      	ldr	r3, [r5, #4]
  if (ctmp!='A')                                 { err_code += (1<<8);}
     d6e:	bf18      	it	ne
     d70:	f504 7480 	addne.w	r4, r4, #256	; 0x100
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<9);}
     d74:	079b      	lsls	r3, r3, #30
     d76:	bf48      	it	mi
     d78:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
  puts ("- TX irq disable");
     d7c:	f001 f8a4 	bl	1ec8 <puts>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     d80:	4b7f      	ldr	r3, [pc, #508]	; (f80 <uart_tx_rx_irq_test+0x2d0>)
     d82:	429e      	cmp	r6, r3
     d84:	f000 813e 	beq.w	1004 <uart_tx_rx_irq_test+0x354>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     d88:	4b7e      	ldr	r3, [pc, #504]	; (f84 <uart_tx_rx_irq_test+0x2d4>)
     d8a:	429e      	cmp	r6, r3
     d8c:	f000 8175 	beq.w	107a <uart_tx_rx_irq_test+0x3ca>
  RX_UART->CTRL = UART_CTRL_RXEN;  /* No interrupt generation */
     d90:	2302      	movs	r3, #2
  TX_UART->CTRL = UART_CTRL_TXEN;  /* No interrupt generation */
     d92:	2201      	movs	r2, #1
     d94:	60b2      	str	r2, [r6, #8]
  RX_UART->CTRL = UART_CTRL_RXEN;  /* No interrupt generation */
     d96:	60ab      	str	r3, [r5, #8]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     d98:	6873      	ldr	r3, [r6, #4]
     d9a:	07d8      	lsls	r0, r3, #31
     d9c:	f100 80dd 	bmi.w	f5a <uart_tx_rx_irq_test+0x2aa>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     da0:	686b      	ldr	r3, [r5, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     da2:	0799      	lsls	r1, r3, #30
     da4:	f100 80d9 	bmi.w	f5a <uart_tx_rx_irq_test+0x2aa>
  TX_UART->DATA = 'B'; /* transmit a character */
     da8:	2242      	movs	r2, #66	; 0x42
     daa:	2378      	movs	r3, #120	; 0x78
     dac:	6032      	str	r2, [r6, #0]
     dae:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     db2:	3b01      	subs	r3, #1
     db4:	d1fb      	bne.n	dae <uart_tx_rx_irq_test+0xfe>
  if (uart2_irq_occurred!=0){ err_code += (1<<11);}
     db6:	f8da 3000 	ldr.w	r3, [sl]
     dba:	b10b      	cbz	r3, dc0 <uart_tx_rx_irq_test+0x110>
     dbc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  if (uart3_irq_occurred!=0){ err_code += (1<<12);}
     dc0:	f8d9 3000 	ldr.w	r3, [r9]
     dc4:	b10b      	cbz	r3, dca <uart_tx_rx_irq_test+0x11a>
     dc6:	f504 5480 	add.w	r4, r4, #4096	; 0x1000

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     dd2:	4b70      	ldr	r3, [pc, #448]	; (f94 <uart_tx_rx_irq_test+0x2e4>)
     dd4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<13);}
     ddc:	686b      	ldr	r3, [r5, #4]
     dde:	079a      	lsls	r2, r3, #30
  ctmp = RX_UART->DATA;
     de0:	682b      	ldr	r3, [r5, #0]
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<13);}
     de2:	bf58      	it	pl
     de4:	1864      	addpl	r4, r4, r1
  if (ctmp!='B')                                 { err_code += (1<<14);}
     de6:	b2db      	uxtb	r3, r3
     de8:	2b42      	cmp	r3, #66	; 0x42
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<15);}
     dea:	686b      	ldr	r3, [r5, #4]
  if (ctmp!='B')                                 { err_code += (1<<14);}
     dec:	bf18      	it	ne
     dee:	f504 4480 	addne.w	r4, r4, #16384	; 0x4000
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<15);}
     df2:	079b      	lsls	r3, r3, #30
  if (TX_UART->INTSTATUS != 0) { err_code += (1<<16);}
     df4:	68f3      	ldr	r3, [r6, #12]
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<15);}
     df6:	bf48      	it	mi
     df8:	f504 4400 	addmi.w	r4, r4, #32768	; 0x8000
  if (TX_UART->INTSTATUS != 0) { err_code += (1<<16);}
     dfc:	b10b      	cbz	r3, e02 <uart_tx_rx_irq_test+0x152>
     dfe:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
  if (RX_UART->INTSTATUS != 0) { err_code += (1<<17);}
     e02:	68eb      	ldr	r3, [r5, #12]
     e04:	b10b      	cbz	r3, e0a <uart_tx_rx_irq_test+0x15a>
     e06:	f504 3400 	add.w	r4, r4, #131072	; 0x20000
  puts ("- RX irq enable");
     e0a:	4864      	ldr	r0, [pc, #400]	; (f9c <uart_tx_rx_irq_test+0x2ec>)
     e0c:	f001 f85c 	bl	1ec8 <puts>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     e10:	4b5b      	ldr	r3, [pc, #364]	; (f80 <uart_tx_rx_irq_test+0x2d0>)
     e12:	429e      	cmp	r6, r3
     e14:	f000 8123 	beq.w	105e <uart_tx_rx_irq_test+0x3ae>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     e18:	4b5a      	ldr	r3, [pc, #360]	; (f84 <uart_tx_rx_irq_test+0x2d4>)
     e1a:	429e      	cmp	r6, r3
     e1c:	d10c      	bne.n	e38 <uart_tx_rx_irq_test+0x188>
    uart2_irq_expected=1;
     e1e:	2201      	movs	r2, #1
    uart3_irq_expected=0;
     e20:	2300      	movs	r3, #0
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    uart2_irq_expected=1;
     e26:	f8c8 2000 	str.w	r2, [r8]
     e2a:	4a5a      	ldr	r2, [pc, #360]	; (f94 <uart_tx_rx_irq_test+0x2e4>)
    uart3_irq_expected=0;
     e2c:	603b      	str	r3, [r7, #0]
    uart2_irq_occurred=0;
     e2e:	f8ca 3000 	str.w	r3, [sl]
    uart3_irq_occurred=0;
     e32:	f8c9 3000 	str.w	r3, [r9]
     e36:	6051      	str	r1, [r2, #4]
  TX_UART->CTRL = UART_CTRL_TXEN ;  /* No interrupt generation */
     e38:	2001      	movs	r0, #1
  RX_UART->CTRL = UART_CTRL_RXEN | UART_CTRL_RXIRQEN;
     e3a:	210a      	movs	r1, #10
  TX_UART->DATA = 'C'; /* transmit a character */
     e3c:	2243      	movs	r2, #67	; 0x43
     e3e:	2378      	movs	r3, #120	; 0x78
  TX_UART->CTRL = UART_CTRL_TXEN ;  /* No interrupt generation */
     e40:	60b0      	str	r0, [r6, #8]
  RX_UART->CTRL = UART_CTRL_RXEN | UART_CTRL_RXIRQEN;
     e42:	60a9      	str	r1, [r5, #8]
  TX_UART->DATA = 'C'; /* transmit a character */
     e44:	6032      	str	r2, [r6, #0]
     e46:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     e4a:	3b01      	subs	r3, #1
     e4c:	d1fb      	bne.n	e46 <uart_tx_rx_irq_test+0x196>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
     e4e:	4b4c      	ldr	r3, [pc, #304]	; (f80 <uart_tx_rx_irq_test+0x2d0>)
     e50:	429e      	cmp	r6, r3
     e52:	f000 80c7 	beq.w	fe4 <uart_tx_rx_irq_test+0x334>
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
     e56:	4b4b      	ldr	r3, [pc, #300]	; (f84 <uart_tx_rx_irq_test+0x2d4>)
     e58:	429e      	cmp	r6, r3
     e5a:	f000 80b3 	beq.w	fc4 <uart_tx_rx_irq_test+0x314>
  if (TX_UART->INTSTATUS != 0) { err_code += (1<<20);}
     e5e:	68f3      	ldr	r3, [r6, #12]
     e60:	b10b      	cbz	r3, e66 <uart_tx_rx_irq_test+0x1b6>
     e62:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  if (RX_UART->INTSTATUS != 0) { err_code += (1<<21);}
     e66:	68eb      	ldr	r3, [r5, #12]
     e68:	b10b      	cbz	r3, e6e <uart_tx_rx_irq_test+0x1be>
     e6a:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<22);}
     e6e:	686b      	ldr	r3, [r5, #4]
     e70:	0798      	lsls	r0, r3, #30
  ctmp = RX_UART->DATA;
     e72:	682b      	ldr	r3, [r5, #0]
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<22);}
     e74:	bf58      	it	pl
     e76:	f504 0480 	addpl.w	r4, r4, #4194304	; 0x400000
  if (ctmp!='C')                                 { err_code += (1<<23);}
     e7a:	b2db      	uxtb	r3, r3
     e7c:	2b43      	cmp	r3, #67	; 0x43
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<24);}
     e7e:	686b      	ldr	r3, [r5, #4]
  if (ctmp!='C')                                 { err_code += (1<<23);}
     e80:	bf18      	it	ne
     e82:	f504 0400 	addne.w	r4, r4, #8388608	; 0x800000
  puts ("- RX irq disable");
     e86:	4846      	ldr	r0, [pc, #280]	; (fa0 <uart_tx_rx_irq_test+0x2f0>)
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<24);}
     e88:	0799      	lsls	r1, r3, #30
     e8a:	bf48      	it	mi
     e8c:	f104 7480 	addmi.w	r4, r4, #16777216	; 0x1000000
  puts ("- RX irq disable");
     e90:	f001 f81a 	bl	1ec8 <puts>
  uart2_irq_expected=0;
     e94:	2300      	movs	r3, #0
     e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  TX_UART->CTRL = UART_CTRL_TXEN;  /* No interrupt generation */
     e9a:	f04f 0c01 	mov.w	ip, #1
  RX_UART->CTRL = UART_CTRL_RXEN;  /* No interrupt generation */
     e9e:	2002      	movs	r0, #2
     ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  uart2_irq_expected=0;
     ea4:	f8c8 3000 	str.w	r3, [r8]
  uart3_irq_expected=0;
     ea8:	603b      	str	r3, [r7, #0]
  uart2_irq_occurred=0;
     eaa:	f8ca 3000 	str.w	r3, [sl]
  uart3_irq_occurred=0;
     eae:	f8c9 3000 	str.w	r3, [r9]
     eb2:	4b38      	ldr	r3, [pc, #224]	; (f94 <uart_tx_rx_irq_test+0x2e4>)
  TX_UART->CTRL = UART_CTRL_TXEN;  /* No interrupt generation */
     eb4:	f8c6 c008 	str.w	ip, [r6, #8]
  RX_UART->CTRL = UART_CTRL_RXEN;  /* No interrupt generation */
     eb8:	60a8      	str	r0, [r5, #8]
     eba:	6059      	str	r1, [r3, #4]
     ebc:	605a      	str	r2, [r3, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     ebe:	6873      	ldr	r3, [r6, #4]
     ec0:	07da      	lsls	r2, r3, #31
     ec2:	d447      	bmi.n	f54 <uart_tx_rx_irq_test+0x2a4>
      ((RX_UART->STATE & UART_STATE_RXFULL)!=0)) {
     ec4:	686b      	ldr	r3, [r5, #4]
  if (((TX_UART->STATE & UART_STATE_TXFULL)!=0) ||
     ec6:	079b      	lsls	r3, r3, #30
     ec8:	d444      	bmi.n	f54 <uart_tx_rx_irq_test+0x2a4>
  TX_UART->DATA = 'D'; /* transmit a character */
     eca:	2244      	movs	r2, #68	; 0x44
     ecc:	2378      	movs	r3, #120	; 0x78
     ece:	6032      	str	r2, [r6, #0]
     ed0:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
     ed4:	3b01      	subs	r3, #1
     ed6:	d1fb      	bne.n	ed0 <uart_tx_rx_irq_test+0x220>
  if (uart2_irq_occurred!=0){ err_code += (1<<26);}
     ed8:	f8da 3000 	ldr.w	r3, [sl]
     edc:	b10b      	cbz	r3, ee2 <uart_tx_rx_irq_test+0x232>
     ede:	f104 6480 	add.w	r4, r4, #67108864	; 0x4000000
  if (uart3_irq_occurred!=0){ err_code += (1<<27);}
     ee2:	f8d9 3000 	ldr.w	r3, [r9]
     ee6:	b10b      	cbz	r3, eec <uart_tx_rx_irq_test+0x23c>
     ee8:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<28);}
     eec:	686b      	ldr	r3, [r5, #4]
     eee:	079f      	lsls	r7, r3, #30
  ctmp = RX_UART->DATA;
     ef0:	682b      	ldr	r3, [r5, #0]
  if ((RX_UART->STATE & UART_STATE_RXFULL) == 0) { err_code += (1<<28);}
     ef2:	bf58      	it	pl
     ef4:	f104 5480 	addpl.w	r4, r4, #268435456	; 0x10000000
  if (ctmp!='D')                                 { err_code += (1<<29);}
     ef8:	b2db      	uxtb	r3, r3
     efa:	2b44      	cmp	r3, #68	; 0x44
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<30);}
     efc:	686b      	ldr	r3, [r5, #4]
  if (ctmp!='D')                                 { err_code += (1<<29);}
     efe:	bf18      	it	ne
     f00:	f104 5400 	addne.w	r4, r4, #536870912	; 0x20000000
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<30);}
     f04:	0798      	lsls	r0, r3, #30
  if ((TX_UART->INTSTATUS != 0)||(RX_UART->INTSTATUS != 0)) { err_code |= 0x80000000UL;}
     f06:	68f3      	ldr	r3, [r6, #12]
  if ((RX_UART->STATE & UART_STATE_RXFULL) != 0) { err_code += (1<<30);}
     f08:	bf48      	it	mi
     f0a:	f104 4480 	addmi.w	r4, r4, #1073741824	; 0x40000000
  if ((TX_UART->INTSTATUS != 0)||(RX_UART->INTSTATUS != 0)) { err_code |= 0x80000000UL;}
     f0e:	b913      	cbnz	r3, f16 <uart_tx_rx_irq_test+0x266>
     f10:	68eb      	ldr	r3, [r5, #12]
     f12:	2b00      	cmp	r3, #0
     f14:	d050      	beq.n	fb8 <uart_tx_rx_irq_test+0x308>
  TX_UART->CTRL = 0;
     f16:	2300      	movs	r3, #0
     f18:	60b3      	str	r3, [r6, #8]
  RX_UART->CTRL = 0;
     f1a:	60ab      	str	r3, [r5, #8]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     f1c:	686b      	ldr	r3, [r5, #4]
  if ((TX_UART->INTSTATUS != 0)||(RX_UART->INTSTATUS != 0)) { err_code |= 0x80000000UL;}
     f1e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     f22:	0799      	lsls	r1, r3, #30
     f24:	d51c      	bpl.n	f60 <uart_tx_rx_irq_test+0x2b0>
    ctmp=RX_UART->DATA;
     f26:	682b      	ldr	r3, [r5, #0]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     f28:	686b      	ldr	r3, [r5, #4]
     f2a:	079b      	lsls	r3, r3, #30
     f2c:	d4fb      	bmi.n	f26 <uart_tx_rx_irq_test+0x276>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     f36:	4b17      	ldr	r3, [pc, #92]	; (f94 <uart_tx_rx_irq_test+0x2e4>)
     f38:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (err_code != 0) {
     f40:	b9bc      	cbnz	r4, f72 <uart_tx_rx_irq_test+0x2c2>
  int return_val=0;
     f42:	4620      	mov	r0, r4
}
     f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_irq_test'.");
     f48:	4816      	ldr	r0, [pc, #88]	; (fa4 <uart_tx_rx_irq_test+0x2f4>)
     f4a:	f000 ffbd 	bl	1ec8 <puts>
    return 1;
     f4e:	2001      	movs	r0, #1
}
     f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      err_code += (1<<25);}
     f54:	f104 7400 	add.w	r4, r4, #33554432	; 0x2000000
     f58:	e7b7      	b.n	eca <uart_tx_rx_irq_test+0x21a>
      err_code += (1<<10);}
     f5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
     f5e:	e723      	b.n	da8 <uart_tx_rx_irq_test+0xf8>
     f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     f68:	4b0a      	ldr	r3, [pc, #40]	; (f94 <uart_tx_rx_irq_test+0x2e4>)
     f6a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    printf ("ERROR : uart interrupt enable failed (0x%x)\n", err_code);
     f72:	4621      	mov	r1, r4
     f74:	480c      	ldr	r0, [pc, #48]	; (fa8 <uart_tx_rx_irq_test+0x2f8>)
     f76:	f000 ff33 	bl	1de0 <iprintf>
    return_val =1;
     f7a:	2001      	movs	r0, #1
}
     f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f80:	4002c000 	.word	0x4002c000
     f84:	4002d000 	.word	0x4002d000
     f88:	00003064 	.word	0x00003064
     f8c:	00003054 	.word	0x00003054
     f90:	2000007c 	.word	0x2000007c
     f94:	e000e100 	.word	0xe000e100
     f98:	00002fec 	.word	0x00002fec
     f9c:	00003000 	.word	0x00003000
     fa0:	00003010 	.word	0x00003010
     fa4:	00002fa8 	.word	0x00002fa8
     fa8:	00003024 	.word	0x00003024
     fac:	20000094 	.word	0x20000094
     fb0:	20000074 	.word	0x20000074
     fb4:	20000098 	.word	0x20000098
  TX_UART->CTRL = 0;
     fb8:	60b3      	str	r3, [r6, #8]
  RX_UART->CTRL = 0;
     fba:	60ab      	str	r3, [r5, #8]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
     fbc:	686b      	ldr	r3, [r5, #4]
     fbe:	079a      	lsls	r2, r3, #30
     fc0:	d5b5      	bpl.n	f2e <uart_tx_rx_irq_test+0x27e>
     fc2:	e7b0      	b.n	f26 <uart_tx_rx_irq_test+0x276>
    if (uart3_irq_occurred!=0){ err_code += (1<<18);}
     fc4:	f8d9 3000 	ldr.w	r3, [r9]
     fc8:	b10b      	cbz	r3, fce <uart_tx_rx_irq_test+0x31e>
     fca:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    if (uart2_irq_occurred==0){ err_code += (1<<19);}
     fce:	f8da 3000 	ldr.w	r3, [sl]
     fd2:	b90b      	cbnz	r3, fd8 <uart_tx_rx_irq_test+0x328>
     fd4:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
     fd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     fdc:	4b3f      	ldr	r3, [pc, #252]	; (10dc <uart_tx_rx_irq_test+0x42c>)
     fde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     fe2:	e73c      	b.n	e5e <uart_tx_rx_irq_test+0x1ae>
    if (uart2_irq_occurred!=0){ err_code += (1<<18);}
     fe4:	f8da 3000 	ldr.w	r3, [sl]
     fe8:	b10b      	cbz	r3, fee <uart_tx_rx_irq_test+0x33e>
     fea:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    if (uart3_irq_occurred==0){ err_code += (1<<19);}
     fee:	f8d9 3000 	ldr.w	r3, [r9]
     ff2:	b90b      	cbnz	r3, ff8 <uart_tx_rx_irq_test+0x348>
     ff4:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
     ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     ffc:	4b37      	ldr	r3, [pc, #220]	; (10dc <uart_tx_rx_irq_test+0x42c>)
     ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1002:	e72c      	b.n	e5e <uart_tx_rx_irq_test+0x1ae>
    uart2_irq_expected=0;
    1004:	2300      	movs	r3, #0
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    100a:	4a34      	ldr	r2, [pc, #208]	; (10dc <uart_tx_rx_irq_test+0x42c>)
    uart2_irq_expected=0;
    100c:	f8c8 3000 	str.w	r3, [r8]
    uart3_irq_expected=0;
    1010:	603b      	str	r3, [r7, #0]
    uart2_irq_occurred=0;
    1012:	f8ca 3000 	str.w	r3, [sl]
    uart3_irq_occurred=0;
    1016:	f8c9 3000 	str.w	r3, [r9]
    101a:	6051      	str	r1, [r2, #4]
    101c:	e6b8      	b.n	d90 <uart_tx_rx_irq_test+0xe0>
    if (uart3_irq_occurred==0){ err_code += (1<<3);}
    101e:	f8d9 3000 	ldr.w	r3, [r9]
    1022:	b903      	cbnz	r3, 1026 <uart_tx_rx_irq_test+0x376>
    1024:	3408      	adds	r4, #8
    if (uart2_irq_occurred!=0){ err_code += (1<<4);}
    1026:	f8da 3000 	ldr.w	r3, [sl]
    102a:	b103      	cbz	r3, 102e <uart_tx_rx_irq_test+0x37e>
    102c:	3410      	adds	r4, #16
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1032:	4b2a      	ldr	r3, [pc, #168]	; (10dc <uart_tx_rx_irq_test+0x42c>)
    1034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1038:	e68a      	b.n	d50 <uart_tx_rx_irq_test+0xa0>
    if (uart2_irq_occurred==0){ err_code += (1<<3);}
    103a:	f8da 3000 	ldr.w	r3, [sl]
    103e:	b903      	cbnz	r3, 1042 <uart_tx_rx_irq_test+0x392>
    1040:	3408      	adds	r4, #8
    if (uart3_irq_occurred!=0){ err_code += (1<<4);}
    1042:	f8d9 3000 	ldr.w	r3, [r9]
    1046:	b103      	cbz	r3, 104a <uart_tx_rx_irq_test+0x39a>
    1048:	3410      	adds	r4, #16
    104a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    104e:	4b23      	ldr	r3, [pc, #140]	; (10dc <uart_tx_rx_irq_test+0x42c>)
    1050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1054:	e67c      	b.n	d50 <uart_tx_rx_irq_test+0xa0>
  puts ("- TX irq enable");
    1056:	4822      	ldr	r0, [pc, #136]	; (10e0 <uart_tx_rx_irq_test+0x430>)
    1058:	f000 ff36 	bl	1ec8 <puts>
    105c:	e645      	b.n	cea <uart_tx_rx_irq_test+0x3a>
    uart2_irq_expected=0;
    105e:	2300      	movs	r3, #0
    uart3_irq_expected=1;
    1060:	2001      	movs	r0, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1066:	4a1d      	ldr	r2, [pc, #116]	; (10dc <uart_tx_rx_irq_test+0x42c>)
    uart2_irq_expected=0;
    1068:	f8c8 3000 	str.w	r3, [r8]
    uart3_irq_expected=1;
    106c:	6038      	str	r0, [r7, #0]
    uart2_irq_occurred=0;
    106e:	f8ca 3000 	str.w	r3, [sl]
    uart3_irq_occurred=0;
    1072:	f8c9 3000 	str.w	r3, [r9]
    1076:	6051      	str	r1, [r2, #4]
    1078:	e6de      	b.n	e38 <uart_tx_rx_irq_test+0x188>
    uart2_irq_expected=0;
    107a:	2300      	movs	r3, #0
    107c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1080:	e7c3      	b.n	100a <uart_tx_rx_irq_test+0x35a>
  puts ("UART TX & RX IRQ test");
    1082:	4818      	ldr	r0, [pc, #96]	; (10e4 <uart_tx_rx_irq_test+0x434>)
    1084:	f000 ff20 	bl	1ec8 <puts>
  TX_UART->BAUDDIV = 33;
    1088:	2221      	movs	r2, #33	; 0x21
  RX_UART->BAUDDIV = 33;
    108a:	4b17      	ldr	r3, [pc, #92]	; (10e8 <uart_tx_rx_irq_test+0x438>)
  TX_UART->BAUDDIV = 33;
    108c:	6132      	str	r2, [r6, #16]
  if (TX_UART->BAUDDIV != 33) { err_code += (1<<0);}
    108e:	6934      	ldr	r4, [r6, #16]
  RX_UART->BAUDDIV = 33;
    1090:	611a      	str	r2, [r3, #16]
  if (RX_UART->BAUDDIV != 33) { err_code += (1<<1);}
    1092:	691b      	ldr	r3, [r3, #16]
  if (TX_UART->BAUDDIV != 33) { err_code += (1<<0);}
    1094:	1aa4      	subs	r4, r4, r2
    1096:	bf18      	it	ne
    1098:	2401      	movne	r4, #1
  if (RX_UART->BAUDDIV != 33) { err_code += (1<<1);}
    109a:	4293      	cmp	r3, r2
    109c:	d019      	beq.n	10d2 <uart_tx_rx_irq_test+0x422>
  puts ("- TX irq enable");
    109e:	4810      	ldr	r0, [pc, #64]	; (10e0 <uart_tx_rx_irq_test+0x430>)
  if (RX_UART->BAUDDIV != 33) { err_code += (1<<1);}
    10a0:	3402      	adds	r4, #2
  puts ("- TX irq enable");
    10a2:	f000 ff11 	bl	1ec8 <puts>
    uart2_irq_expected=1;
    10a6:	2201      	movs	r2, #1
    uart3_irq_expected=0;
    10a8:	2300      	movs	r3, #0
    10aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    uart2_irq_expected=1;
    10ae:	f8df 8040 	ldr.w	r8, [pc, #64]	; 10f0 <uart_tx_rx_irq_test+0x440>
    uart3_irq_expected=0;
    10b2:	4f0e      	ldr	r7, [pc, #56]	; (10ec <uart_tx_rx_irq_test+0x43c>)
    uart2_irq_expected=1;
    10b4:	f8c8 2000 	str.w	r2, [r8]
    uart2_irq_occurred=0;
    10b8:	f8df a038 	ldr.w	sl, [pc, #56]	; 10f4 <uart_tx_rx_irq_test+0x444>
    uart3_irq_occurred=0;
    10bc:	f8df 9038 	ldr.w	r9, [pc, #56]	; 10f8 <uart_tx_rx_irq_test+0x448>
    10c0:	4a06      	ldr	r2, [pc, #24]	; (10dc <uart_tx_rx_irq_test+0x42c>)
    uart3_irq_expected=0;
    10c2:	603b      	str	r3, [r7, #0]
    10c4:	4d08      	ldr	r5, [pc, #32]	; (10e8 <uart_tx_rx_irq_test+0x438>)
    uart2_irq_occurred=0;
    10c6:	f8ca 3000 	str.w	r3, [sl]
    uart3_irq_occurred=0;
    10ca:	f8c9 3000 	str.w	r3, [r9]
    10ce:	6051      	str	r1, [r2, #4]
    10d0:	e620      	b.n	d14 <uart_tx_rx_irq_test+0x64>
  puts ("- TX irq enable");
    10d2:	4803      	ldr	r0, [pc, #12]	; (10e0 <uart_tx_rx_irq_test+0x430>)
    10d4:	f000 fef8 	bl	1ec8 <puts>
    10d8:	e7e5      	b.n	10a6 <uart_tx_rx_irq_test+0x3f6>
    10da:	bf00      	nop
    10dc:	e000e100 	.word	0xe000e100
    10e0:	00003054 	.word	0x00003054
    10e4:	00003064 	.word	0x00003064
    10e8:	4002d000 	.word	0x4002d000
    10ec:	2000007c 	.word	0x2000007c
    10f0:	20000094 	.word	0x20000094
    10f4:	20000074 	.word	0x20000074
    10f8:	20000098 	.word	0x20000098

000010fc <uart_tx_rx_overflow_test>:
{
    10fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
    1100:	4c90      	ldr	r4, [pc, #576]	; (1344 <uart_tx_rx_overflow_test+0x248>)
{
    1102:	4605      	mov	r5, r0
  if (CM3DS_MPS2_UART==CM3DS_MPS2_UART2){
    1104:	42a0      	cmp	r0, r4
    1106:	f000 811b 	beq.w	1340 <uart_tx_rx_overflow_test+0x244>
  else if (CM3DS_MPS2_UART==CM3DS_MPS2_UART3){
    110a:	4b8f      	ldr	r3, [pc, #572]	; (1348 <uart_tx_rx_overflow_test+0x24c>)
    110c:	4298      	cmp	r0, r3
    110e:	f040 80f0 	bne.w	12f2 <uart_tx_rx_overflow_test+0x1f6>
  puts ("UART TX & RX overflow test");
    1112:	488e      	ldr	r0, [pc, #568]	; (134c <uart_tx_rx_overflow_test+0x250>)
    1114:	f000 fed8 	bl	1ec8 <puts>
  TX_UART->BAUDDIV = 34;
    1118:	2322      	movs	r3, #34	; 0x22
    111a:	612b      	str	r3, [r5, #16]
  if (TX_UART->BAUDDIV != 34) { err_code += (1<<0);}
    111c:	692e      	ldr	r6, [r5, #16]
  RX_UART->BAUDDIV = 34;
    111e:	6123      	str	r3, [r4, #16]
  if (TX_UART->BAUDDIV != 34) { err_code += (1<<0);}
    1120:	3e22      	subs	r6, #34	; 0x22
    1122:	bf18      	it	ne
    1124:	2601      	movne	r6, #1
  if (RX_UART->BAUDDIV != 34) { err_code += (1<<1);}
    1126:	6923      	ldr	r3, [r4, #16]
  puts ("- TX without overflow");
    1128:	4889      	ldr	r0, [pc, #548]	; (1350 <uart_tx_rx_overflow_test+0x254>)
  if (RX_UART->BAUDDIV != 34) { err_code += (1<<1);}
    112a:	2b22      	cmp	r3, #34	; 0x22
    112c:	bf18      	it	ne
    112e:	3602      	addne	r6, #2
  puts ("- TX without overflow");
    1130:	f000 feca 	bl	1ec8 <puts>
  uart2_irq_expected=0;
    1134:	2300      	movs	r3, #0
  RX_UART->CTRL = UART_CTRL_RXEN ;  /* No interrupt generation */
    1136:	2002      	movs	r0, #2
  TX_UART->CTRL = UART_CTRL_TXEN ;  /* No interrupt generation */
    1138:	f04f 0c01 	mov.w	ip, #1
  TX_UART->DATA = 'A';
    113c:	2141      	movs	r1, #65	; 0x41
  TX_UART->DATA = 'B';
    113e:	2242      	movs	r2, #66	; 0x42
  uart3_irq_expected=0;
    1140:	4f84      	ldr	r7, [pc, #528]	; (1354 <uart_tx_rx_overflow_test+0x258>)
  uart2_irq_expected=0;
    1142:	f8df e234 	ldr.w	lr, [pc, #564]	; 1378 <uart_tx_rx_overflow_test+0x27c>
  uart_ovfirq_expected=0;
    1146:	f8df 8234 	ldr.w	r8, [pc, #564]	; 137c <uart_tx_rx_overflow_test+0x280>
  uart2_irq_expected=0;
    114a:	f8ce 3000 	str.w	r3, [lr]
  uart3_irq_expected=0;
    114e:	603b      	str	r3, [r7, #0]
  uart2_irq_occurred=0;
    1150:	4f81      	ldr	r7, [pc, #516]	; (1358 <uart_tx_rx_overflow_test+0x25c>)
  uart_ovfirq_expected=0;
    1152:	f8c8 3000 	str.w	r3, [r8]
  uart2_irq_occurred=0;
    1156:	603b      	str	r3, [r7, #0]
  uart3_irq_occurred=0;
    1158:	4f80      	ldr	r7, [pc, #512]	; (135c <uart_tx_rx_overflow_test+0x260>)
    115a:	603b      	str	r3, [r7, #0]
  uart_ovfirq_occurred = 0;
    115c:	4f80      	ldr	r7, [pc, #512]	; (1360 <uart_tx_rx_overflow_test+0x264>)
    115e:	603b      	str	r3, [r7, #0]
  TX_UART->CTRL = UART_CTRL_TXEN ;  /* No interrupt generation */
    1160:	f8c5 c008 	str.w	ip, [r5, #8]
  RX_UART->CTRL = UART_CTRL_RXEN ;  /* No interrupt generation */
    1164:	60a0      	str	r0, [r4, #8]
  TX_UART->DATA = 'A';
    1166:	6029      	str	r1, [r5, #0]
  TX_UART->DATA = 'B';
    1168:	602a      	str	r2, [r5, #0]
  if ((TX_UART->STATE & UART_STATE_TXOVR)!=0)  { err_code += (1<<2);}
    116a:	686b      	ldr	r3, [r5, #4]
    116c:	0758      	lsls	r0, r3, #29
    116e:	bf48      	it	mi
    1170:	3604      	addmi	r6, #4
    while ((RX_UART->STATE & UART_STATE_RXFULL)==0); /* wait for data */
    1172:	6863      	ldr	r3, [r4, #4]
    1174:	0799      	lsls	r1, r3, #30
    1176:	d5fc      	bpl.n	1172 <uart_tx_rx_overflow_test+0x76>
    ctmp=  RX_UART->DATA;
    1178:	6823      	ldr	r3, [r4, #0]
      if (ctmp!='A') { err_code += (1<<3);}
    117a:	b2db      	uxtb	r3, r3
    117c:	2b41      	cmp	r3, #65	; 0x41
    117e:	bf18      	it	ne
    1180:	3608      	addne	r6, #8
    while ((RX_UART->STATE & UART_STATE_RXFULL)==0); /* wait for data */
    1182:	6863      	ldr	r3, [r4, #4]
    1184:	079a      	lsls	r2, r3, #30
    1186:	d5fc      	bpl.n	1182 <uart_tx_rx_overflow_test+0x86>
    ctmp=  RX_UART->DATA;
    1188:	6823      	ldr	r3, [r4, #0]
      if (ctmp!='B') { err_code += (1<<4);}
    118a:	b2db      	uxtb	r3, r3
    118c:	2b42      	cmp	r3, #66	; 0x42
  if ((RX_UART->STATE != 0)||(TX_UART->STATE != 0))  { err_code += (1<<5);}
    118e:	6863      	ldr	r3, [r4, #4]
      if (ctmp!='B') { err_code += (1<<4);}
    1190:	bf18      	it	ne
    1192:	3610      	addne	r6, #16
  if ((RX_UART->STATE != 0)||(TX_UART->STATE != 0))  { err_code += (1<<5);}
    1194:	2b00      	cmp	r3, #0
    1196:	f000 80b3 	beq.w	1300 <uart_tx_rx_overflow_test+0x204>
    119a:	3620      	adds	r6, #32
  puts ("- TX with overflow");
    119c:	4871      	ldr	r0, [pc, #452]	; (1364 <uart_tx_rx_overflow_test+0x268>)
    119e:	f000 fe93 	bl	1ec8 <puts>
  TX_UART->DATA = 'C';
    11a2:	2343      	movs	r3, #67	; 0x43
  TX_UART->DATA = 'A';
    11a4:	2141      	movs	r1, #65	; 0x41
  TX_UART->DATA = 'B';
    11a6:	2242      	movs	r2, #66	; 0x42
  TX_UART->DATA = 'A';
    11a8:	6029      	str	r1, [r5, #0]
  TX_UART->DATA = 'B';
    11aa:	602a      	str	r2, [r5, #0]
  TX_UART->DATA = 'C';
    11ac:	602b      	str	r3, [r5, #0]
  if ((TX_UART->STATE & UART_STATE_TXOVR)==0)  { err_code += (1<<6);}
    11ae:	686b      	ldr	r3, [r5, #4]
    11b0:	075b      	lsls	r3, r3, #29
    11b2:	bf58      	it	pl
    11b4:	3640      	addpl	r6, #64	; 0x40
    while ((RX_UART->STATE & UART_STATE_RXFULL)==0); /* wait for data */
    11b6:	6863      	ldr	r3, [r4, #4]
    11b8:	0798      	lsls	r0, r3, #30
    11ba:	d5fc      	bpl.n	11b6 <uart_tx_rx_overflow_test+0xba>
    ctmp=  RX_UART->DATA;
    11bc:	6823      	ldr	r3, [r4, #0]
      if (ctmp!='A') { err_code += (1<<7);}
    11be:	b2db      	uxtb	r3, r3
    11c0:	2b41      	cmp	r3, #65	; 0x41
    11c2:	bf18      	it	ne
    11c4:	3680      	addne	r6, #128	; 0x80
    while ((RX_UART->STATE & UART_STATE_RXFULL)==0); /* wait for data */
    11c6:	6863      	ldr	r3, [r4, #4]
    11c8:	0799      	lsls	r1, r3, #30
    11ca:	d5fc      	bpl.n	11c6 <uart_tx_rx_overflow_test+0xca>
    ctmp=  RX_UART->DATA;
    11cc:	6823      	ldr	r3, [r4, #0]
  if ((TX_UART->STATE & UART_STATE_TXOVR)==0)  { err_code += (1<<8);}
    11ce:	686b      	ldr	r3, [r5, #4]
  uart_ovfirq_occurred=0;
    11d0:	2100      	movs	r1, #0
  if ((TX_UART->STATE & UART_STATE_TXOVR)==0)  { err_code += (1<<8);}
    11d2:	075a      	lsls	r2, r3, #29
  if ((TX_UART->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  { err_code += (1<<9);}
    11d4:	68eb      	ldr	r3, [r5, #12]
  if ((TX_UART->STATE & UART_STATE_TXOVR)==0)  { err_code += (1<<8);}
    11d6:	bf58      	it	pl
    11d8:	f506 7680 	addpl.w	r6, r6, #256	; 0x100
  if ((TX_UART->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  { err_code += (1<<9);}
    11dc:	075b      	lsls	r3, r3, #29
  TX_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXOVRIRQEN;  /* Enable overflow interrupt generation */
    11de:	f04f 0311 	mov.w	r3, #17
    11e2:	60ab      	str	r3, [r5, #8]
  if ((TX_UART->INTSTATUS & UART_INTSTATE_TXOVR)==0)  { err_code += (1<<10);}
    11e4:	68eb      	ldr	r3, [r5, #12]
  if ((TX_UART->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  { err_code += (1<<9);}
    11e6:	bf48      	it	mi
    11e8:	f506 7600 	addmi.w	r6, r6, #512	; 0x200
  if ((TX_UART->INTSTATUS & UART_INTSTATE_TXOVR)==0)  { err_code += (1<<10);}
    11ec:	0758      	lsls	r0, r3, #29
  uart_ovfirq_expected=1;
    11ee:	f04f 0301 	mov.w	r3, #1
    11f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    11f6:	f8c8 3000 	str.w	r3, [r8]
    11fa:	4b5b      	ldr	r3, [pc, #364]	; (1368 <uart_tx_rx_overflow_test+0x26c>)
  uart_ovfirq_occurred=0;
    11fc:	6039      	str	r1, [r7, #0]
  if ((TX_UART->INTSTATUS & UART_INTSTATE_TXOVR)==0)  { err_code += (1<<10);}
    11fe:	bf58      	it	pl
    1200:	f506 6680 	addpl.w	r6, r6, #1024	; 0x400
    1204:	601a      	str	r2, [r3, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
    120a:	f3bf 8f6f 	isb	sy
  if ((TX_UART->STATE & UART_STATE_TXOVR)!=0)  { err_code += (1<<11);}
    120e:	686b      	ldr	r3, [r5, #4]
    1210:	0759      	lsls	r1, r3, #29
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART2)&&(uart_ovfirq_occurred==0)) { err_code += (1<<12);}
    1212:	4b4c      	ldr	r3, [pc, #304]	; (1344 <uart_tx_rx_overflow_test+0x248>)
  if ((TX_UART->STATE & UART_STATE_TXOVR)!=0)  { err_code += (1<<11);}
    1214:	bf48      	it	mi
    1216:	f506 6600 	addmi.w	r6, r6, #2048	; 0x800
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART2)&&(uart_ovfirq_occurred==0)) { err_code += (1<<12);}
    121a:	429d      	cmp	r5, r3
    121c:	f000 8089 	beq.w	1332 <uart_tx_rx_overflow_test+0x236>
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART3)&&(uart_ovfirq_occurred==0)) { err_code += (1<<12);}
    1220:	4b49      	ldr	r3, [pc, #292]	; (1348 <uart_tx_rx_overflow_test+0x24c>)
    1222:	429d      	cmp	r5, r3
    1224:	f000 8085 	beq.w	1332 <uart_tx_rx_overflow_test+0x236>
  TX_UART->CTRL = UART_CTRL_TXEN ;  /* No interrupt generation */
    1228:	2001      	movs	r0, #1
  RX_UART->CTRL = UART_CTRL_RXEN ;  /* No interrupt generation */
    122a:	2202      	movs	r2, #2
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    122c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  uart_ovfirq_expected=0;
    1230:	2300      	movs	r3, #0
  TX_UART->CTRL = UART_CTRL_TXEN ;  /* No interrupt generation */
    1232:	60a8      	str	r0, [r5, #8]
  RX_UART->CTRL = UART_CTRL_RXEN ;  /* No interrupt generation */
    1234:	60a2      	str	r2, [r4, #8]
    1236:	4a4c      	ldr	r2, [pc, #304]	; (1368 <uart_tx_rx_overflow_test+0x26c>)
  puts ("- RX overflow");
    1238:	484c      	ldr	r0, [pc, #304]	; (136c <uart_tx_rx_overflow_test+0x270>)
    123a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  uart_ovfirq_expected=0;
    123e:	f8c8 3000 	str.w	r3, [r8]
  uart_ovfirq_occurred=0;
    1242:	603b      	str	r3, [r7, #0]
  puts ("- RX overflow");
    1244:	f000 fe40 	bl	1ec8 <puts>
  TX_UART->DATA = 'A';
    1248:	2241      	movs	r2, #65	; 0x41
  TX_UART->DATA = 'B';
    124a:	2342      	movs	r3, #66	; 0x42
  TX_UART->DATA = 'A';
    124c:	602a      	str	r2, [r5, #0]
  TX_UART->DATA = 'B';
    124e:	602b      	str	r3, [r5, #0]
  if ((TX_UART->STATE & UART_STATE_TXOVR)!=0)  { err_code += (1<<13);}
    1250:	686b      	ldr	r3, [r5, #4]
    1252:	075a      	lsls	r2, r3, #29
    1254:	bf48      	it	mi
    1256:	f506 5600 	addmi.w	r6, r6, #8192	; 0x2000
  while ((RX_UART->STATE & UART_STATE_RXFULL)==0);
    125a:	6863      	ldr	r3, [r4, #4]
    125c:	079b      	lsls	r3, r3, #30
    125e:	d5fc      	bpl.n	125a <uart_tx_rx_overflow_test+0x15e>
  if ((RX_UART->STATE & UART_STATE_RXOVR)!=0)  { err_code += (1<<14);}
    1260:	6863      	ldr	r3, [r4, #4]
    1262:	0718      	lsls	r0, r3, #28
    1264:	bf48      	it	mi
    1266:	f506 4680 	addmi.w	r6, r6, #16384	; 0x4000
  while ((RX_UART->STATE & UART_STATE_RXOVR)==0);
    126a:	6863      	ldr	r3, [r4, #4]
    126c:	0719      	lsls	r1, r3, #28
    126e:	d5fc      	bpl.n	126a <uart_tx_rx_overflow_test+0x16e>
  if ((RX_UART->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  { err_code += (1<<15);}
    1270:	68e3      	ldr	r3, [r4, #12]
  uart_ovfirq_occurred=0;
    1272:	2100      	movs	r1, #0
  if ((RX_UART->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  { err_code += (1<<15);}
    1274:	071a      	lsls	r2, r3, #28
  RX_UART->CTRL = UART_CTRL_RXEN | UART_CTRL_RXOVRIRQEN;  /* Enable overflow interrupt generation */
    1276:	f04f 0322 	mov.w	r3, #34	; 0x22
    127a:	60a3      	str	r3, [r4, #8]
  if ((RX_UART->INTSTATUS & UART_INTSTATE_RXOVR)==0)  { err_code += (1<<16);}
    127c:	68e3      	ldr	r3, [r4, #12]
  if ((RX_UART->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  { err_code += (1<<15);}
    127e:	bf48      	it	mi
    1280:	f506 4600 	addmi.w	r6, r6, #32768	; 0x8000
  if ((RX_UART->INTSTATUS & UART_INTSTATE_RXOVR)==0)  { err_code += (1<<16);}
    1284:	071b      	lsls	r3, r3, #28
  uart_ovfirq_expected=1;
    1286:	f04f 0301 	mov.w	r3, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    128a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    128e:	f8c8 3000 	str.w	r3, [r8]
    1292:	4b35      	ldr	r3, [pc, #212]	; (1368 <uart_tx_rx_overflow_test+0x26c>)
  uart_ovfirq_occurred=0;
    1294:	6039      	str	r1, [r7, #0]
  if ((RX_UART->INTSTATUS & UART_INTSTATE_RXOVR)==0)  { err_code += (1<<16);}
    1296:	bf58      	it	pl
    1298:	f506 3680 	addpl.w	r6, r6, #65536	; 0x10000
    129c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb");
    129e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
    12a2:	f3bf 8f6f 	isb	sy
  if ((RX_UART->STATE & UART_STATE_RXOVR)!=0)  { err_code += (1<<17);}
    12a6:	6863      	ldr	r3, [r4, #4]
    12a8:	0718      	lsls	r0, r3, #28
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART2)&&(uart_ovfirq_occurred==0)) { err_code += (1<<18);}
    12aa:	4b26      	ldr	r3, [pc, #152]	; (1344 <uart_tx_rx_overflow_test+0x248>)
  if ((RX_UART->STATE & UART_STATE_RXOVR)!=0)  { err_code += (1<<17);}
    12ac:	bf48      	it	mi
    12ae:	f506 3600 	addmi.w	r6, r6, #131072	; 0x20000
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART2)&&(uart_ovfirq_occurred==0)) { err_code += (1<<18);}
    12b2:	429d      	cmp	r5, r3
    12b4:	d029      	beq.n	130a <uart_tx_rx_overflow_test+0x20e>
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART3)&&(uart_ovfirq_occurred==0)) { err_code += (1<<18);}
    12b6:	4b24      	ldr	r3, [pc, #144]	; (1348 <uart_tx_rx_overflow_test+0x24c>)
    12b8:	429d      	cmp	r5, r3
    12ba:	d026      	beq.n	130a <uart_tx_rx_overflow_test+0x20e>
  uart_ovfirq_expected=0;
    12bc:	2300      	movs	r3, #0
    12be:	f8c8 3000 	str.w	r3, [r8]
  uart_ovfirq_occurred=0;
    12c2:	603b      	str	r3, [r7, #0]
  TX_UART->CTRL = 0;
    12c4:	60ab      	str	r3, [r5, #8]
  RX_UART->CTRL = 0;
    12c6:	60a3      	str	r3, [r4, #8]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
    12c8:	6863      	ldr	r3, [r4, #4]
    12ca:	0799      	lsls	r1, r3, #30
    12cc:	d503      	bpl.n	12d6 <uart_tx_rx_overflow_test+0x1da>
    ctmp=RX_UART->DATA;
    12ce:	6823      	ldr	r3, [r4, #0]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
    12d0:	6863      	ldr	r3, [r4, #4]
    12d2:	079a      	lsls	r2, r3, #30
    12d4:	d4fb      	bmi.n	12ce <uart_tx_rx_overflow_test+0x1d2>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    12d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    12da:	4b23      	ldr	r3, [pc, #140]	; (1368 <uart_tx_rx_overflow_test+0x26c>)
    12dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (err_code != 0) {
    12e0:	b15e      	cbz	r6, 12fa <uart_tx_rx_overflow_test+0x1fe>
    printf ("ERROR : uart overflow test failed (0x%x)\n", err_code);
    12e2:	4631      	mov	r1, r6
    return_val =1;
    12e4:	2601      	movs	r6, #1
    printf ("ERROR : uart overflow test failed (0x%x)\n", err_code);
    12e6:	4822      	ldr	r0, [pc, #136]	; (1370 <uart_tx_rx_overflow_test+0x274>)
    12e8:	f000 fd7a 	bl	1de0 <iprintf>
}
    12ec:	4630      	mov	r0, r6
    12ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_overflow_test'.");
    12f2:	4820      	ldr	r0, [pc, #128]	; (1374 <uart_tx_rx_overflow_test+0x278>)
    12f4:	f000 fde8 	bl	1ec8 <puts>
    return 1;
    12f8:	2601      	movs	r6, #1
}
    12fa:	4630      	mov	r0, r6
    12fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((RX_UART->STATE != 0)||(TX_UART->STATE != 0))  { err_code += (1<<5);}
    1300:	686b      	ldr	r3, [r5, #4]
    1302:	2b00      	cmp	r3, #0
    1304:	f43f af4a 	beq.w	119c <uart_tx_rx_overflow_test+0xa0>
    1308:	e747      	b.n	119a <uart_tx_rx_overflow_test+0x9e>
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART3)&&(uart_ovfirq_occurred==0)) { err_code += (1<<18);}
    130a:	683b      	ldr	r3, [r7, #0]
    130c:	2b00      	cmp	r3, #0
    130e:	d1d5      	bne.n	12bc <uart_tx_rx_overflow_test+0x1c0>
  uart_ovfirq_expected=0;
    1310:	2300      	movs	r3, #0
    1312:	f8c8 3000 	str.w	r3, [r8]
  uart_ovfirq_occurred=0;
    1316:	603b      	str	r3, [r7, #0]
  TX_UART->CTRL = 0;
    1318:	60ab      	str	r3, [r5, #8]
  RX_UART->CTRL = 0;
    131a:	60a3      	str	r3, [r4, #8]
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
    131c:	6863      	ldr	r3, [r4, #4]
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART3)&&(uart_ovfirq_occurred==0)) { err_code += (1<<18);}
    131e:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
  while ((RX_UART->STATE & UART_STATE_RXFULL)!=0) {
    1322:	079b      	lsls	r3, r3, #30
    1324:	d4d3      	bmi.n	12ce <uart_tx_rx_overflow_test+0x1d2>
    1326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    132a:	4b0f      	ldr	r3, [pc, #60]	; (1368 <uart_tx_rx_overflow_test+0x26c>)
    132c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1330:	e7d7      	b.n	12e2 <uart_tx_rx_overflow_test+0x1e6>
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART3)&&(uart_ovfirq_occurred==0)) { err_code += (1<<12);}
    1332:	683b      	ldr	r3, [r7, #0]
    1334:	2b00      	cmp	r3, #0
    1336:	f47f af77 	bne.w	1228 <uart_tx_rx_overflow_test+0x12c>
    133a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    133e:	e773      	b.n	1228 <uart_tx_rx_overflow_test+0x12c>
    RX_UART = CM3DS_MPS2_UART3;
    1340:	4c01      	ldr	r4, [pc, #4]	; (1348 <uart_tx_rx_overflow_test+0x24c>)
    1342:	e6e6      	b.n	1112 <uart_tx_rx_overflow_test+0x16>
    1344:	4002c000 	.word	0x4002c000
    1348:	4002d000 	.word	0x4002d000
    134c:	000030c4 	.word	0x000030c4
    1350:	000030e0 	.word	0x000030e0
    1354:	2000007c 	.word	0x2000007c
    1358:	20000074 	.word	0x20000074
    135c:	20000098 	.word	0x20000098
    1360:	2000008c 	.word	0x2000008c
    1364:	000030f8 	.word	0x000030f8
    1368:	e000e100 	.word	0xe000e100
    136c:	0000310c 	.word	0x0000310c
    1370:	0000311c 	.word	0x0000311c
    1374:	0000307c 	.word	0x0000307c
    1378:	20000094 	.word	0x20000094
    137c:	2000009c 	.word	0x2000009c

00001380 <uart_interrupt_test>:
int uart_interrupt_test(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART){
    1380:	4602      	mov	r2, r0
    1382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uart0_irq_expected = 0;
    1386:	2300      	movs	r3, #0
  CM3DS_MPS2_UART->BAUDDIV = 0x10; // set baud rate for high speed tx
    1388:	f04f 0e10 	mov.w	lr, #16
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXIRQEN | UART_CTRL_HIGHSPEEDTX;
    138c:	2045      	movs	r0, #69	; 0x45
  uart0_irq_expected = 0;
    138e:	49c0      	ldr	r1, [pc, #768]	; (1690 <uart_interrupt_test+0x310>)
  uart0_irq_occurred = 0;
    1390:	4ec0      	ldr	r6, [pc, #768]	; (1694 <uart_interrupt_test+0x314>)
  uart1_irq_expected = 0;
    1392:	4cc1      	ldr	r4, [pc, #772]	; (1698 <uart_interrupt_test+0x318>)
  uart1_irq_occurred = 0;
    1394:	4dc1      	ldr	r5, [pc, #772]	; (169c <uart_interrupt_test+0x31c>)
  uart4_irq_expected = 0;
    1396:	4fc2      	ldr	r7, [pc, #776]	; (16a0 <uart_interrupt_test+0x320>)
  uart4_irq_occurred = 0;
    1398:	f8df c31c 	ldr.w	ip, [pc, #796]	; 16b8 <uart_interrupt_test+0x338>
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART0) {
    139c:	f1b2 2f40 	cmp.w	r2, #1073758208	; 0x40004000
  uart0_irq_expected = 0;
    13a0:	600b      	str	r3, [r1, #0]
  uart0_irq_occurred = 0;
    13a2:	6033      	str	r3, [r6, #0]
  uart1_irq_expected = 0;
    13a4:	6023      	str	r3, [r4, #0]
  uart1_irq_occurred = 0;
    13a6:	602b      	str	r3, [r5, #0]
  uart4_irq_expected = 0;
    13a8:	603b      	str	r3, [r7, #0]
  uart4_irq_occurred = 0;
    13aa:	f8cc 3000 	str.w	r3, [ip]
  CM3DS_MPS2_UART->BAUDDIV = 0x10; // set baud rate for high speed tx
    13ae:	f8c2 e010 	str.w	lr, [r2, #16]
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXIRQEN | UART_CTRL_HIGHSPEEDTX;
    13b2:	6090      	str	r0, [r2, #8]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART0) {
    13b4:	f000 80da 	beq.w	156c <uart_interrupt_test+0x1ec>
  } else if (CM3DS_MPS2_UART == CM3DS_MPS2_UART1) {
    13b8:	4bba      	ldr	r3, [pc, #744]	; (16a4 <uart_interrupt_test+0x324>)
    13ba:	429a      	cmp	r2, r3
    13bc:	f000 80ce 	beq.w	155c <uart_interrupt_test+0x1dc>
  } else if (CM3DS_MPS2_UART == CM3DS_MPS2_UART4) {
    13c0:	4bb9      	ldr	r3, [pc, #740]	; (16a8 <uart_interrupt_test+0x328>)
    13c2:	429a      	cmp	r2, r3
    13c4:	f040 80d7 	bne.w	1576 <uart_interrupt_test+0x1f6>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    13c8:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
    uart4_irq_expected = 1;
    13cc:	2301      	movs	r3, #1
    13ce:	48b7      	ldr	r0, [pc, #732]	; (16ac <uart_interrupt_test+0x32c>)
    13d0:	f8c0 e004 	str.w	lr, [r0, #4]
    13d4:	603b      	str	r3, [r7, #0]
  CM3DS_MPS2_UART->DATA = '.';
    13d6:	232e      	movs	r3, #46	; 0x2e
    13d8:	6013      	str	r3, [r2, #0]
    13da:	f3bf 8f6f 	isb	sy
    13de:	f3bf 8f6f 	isb	sy
    13e2:	f3bf 8f6f 	isb	sy
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_HIGHSPEEDTX;
    13e6:	2341      	movs	r3, #65	; 0x41
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART0 && uart0_irq_occurred==0) ||
    13e8:	f1b2 2f40 	cmp.w	r2, #1073758208	; 0x40004000
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_HIGHSPEEDTX;
    13ec:	6093      	str	r3, [r2, #8]
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART0 && uart0_irq_occurred==0) ||
    13ee:	f000 80c8 	beq.w	1582 <uart_interrupt_test+0x202>
    13f2:	4bac      	ldr	r3, [pc, #688]	; (16a4 <uart_interrupt_test+0x324>)
    13f4:	429a      	cmp	r2, r3
    13f6:	f000 8128 	beq.w	164a <uart_interrupt_test+0x2ca>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART1 && uart1_irq_occurred==0) ||
    13fa:	4bab      	ldr	r3, [pc, #684]	; (16a8 <uart_interrupt_test+0x328>)
    13fc:	429a      	cmp	r2, r3
    13fe:	f000 80cd 	beq.w	159c <uart_interrupt_test+0x21c>
  uart0_irq_occurred = 0;
    1402:	2000      	movs	r0, #0
    1404:	6030      	str	r0, [r6, #0]
  uart1_irq_occurred = 0;
    1406:	6028      	str	r0, [r5, #0]
  uart4_irq_occurred = 0;
    1408:	f8cc 0000 	str.w	r0, [ip]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART4) NVIC_DisableIRQ(UART4_IRQn);
    140c:	4ba6      	ldr	r3, [pc, #664]	; (16a8 <uart_interrupt_test+0x328>)
    140e:	429a      	cmp	r2, r3
    1410:	d104      	bne.n	141c <uart_interrupt_test+0x9c>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1412:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
    1416:	4ba5      	ldr	r3, [pc, #660]	; (16ac <uart_interrupt_test+0x32c>)
    1418:	f8c3 e084 	str.w	lr, [r3, #132]	; 0x84
  uart0_irq_expected = 0;
    141c:	f04f 0e00 	mov.w	lr, #0
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1420:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  CM3DS_MPS2_UART->DATA = '.';
    1424:	232e      	movs	r3, #46	; 0x2e
  uart_ovfirq_expected = 1;
    1426:	f04f 0901 	mov.w	r9, #1
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXOVRIRQEN | UART_CTRL_HIGHSPEEDTX;
    142a:	f04f 0851 	mov.w	r8, #81	; 0x51
  uart0_irq_expected = 0;
    142e:	f8c1 e000 	str.w	lr, [r1]
  uart1_irq_expected = 0;
    1432:	f8c4 e000 	str.w	lr, [r4]
  uart4_irq_expected = 0;
    1436:	f8c7 e000 	str.w	lr, [r7]
    143a:	f8df e270 	ldr.w	lr, [pc, #624]	; 16ac <uart_interrupt_test+0x32c>
    143e:	f8ce a000 	str.w	sl, [lr]
  uart_ovfirq_expected = 1;
    1442:	f8df e278 	ldr.w	lr, [pc, #632]	; 16bc <uart_interrupt_test+0x33c>
    1446:	f8ce 9000 	str.w	r9, [lr]
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_TXOVRIRQEN | UART_CTRL_HIGHSPEEDTX;
    144a:	f8c2 8008 	str.w	r8, [r2, #8]
  CM3DS_MPS2_UART->DATA = '.';
    144e:	6013      	str	r3, [r2, #0]
  CM3DS_MPS2_UART->DATA = '.';
    1450:	6013      	str	r3, [r2, #0]
  CM3DS_MPS2_UART->DATA = '.';
    1452:	6013      	str	r3, [r2, #0]
    1454:	f3bf 8f6f 	isb	sy
    1458:	f3bf 8f6f 	isb	sy
    145c:	f3bf 8f6f 	isb	sy
  if (uart_ovfirq_occurred==0)                         { err_code += (1<<1);}
    1460:	f8df 825c 	ldr.w	r8, [pc, #604]	; 16c0 <uart_interrupt_test+0x340>
    1464:	f8d8 3000 	ldr.w	r3, [r8]
    1468:	b903      	cbnz	r3, 146c <uart_interrupt_test+0xec>
    146a:	3002      	adds	r0, #2
  uart_ovfirq_occurred = 0;
    146c:	2300      	movs	r3, #0
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    146e:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    1472:	f8df 9238 	ldr.w	r9, [pc, #568]	; 16ac <uart_interrupt_test+0x32c>
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART0) {
    1476:	f1b2 2f40 	cmp.w	r2, #1073758208	; 0x40004000
  uart_ovfirq_occurred = 0;
    147a:	f8c8 3000 	str.w	r3, [r8]
    147e:	f8c9 a080 	str.w	sl, [r9, #128]	; 0x80
  uart_ovfirq_expected = 0;
    1482:	f8ce 3000 	str.w	r3, [lr]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART0) {
    1486:	f000 80d2 	beq.w	162e <uart_interrupt_test+0x2ae>
  } else if (CM3DS_MPS2_UART == CM3DS_MPS2_UART1) {
    148a:	4b86      	ldr	r3, [pc, #536]	; (16a4 <uart_interrupt_test+0x324>)
    148c:	429a      	cmp	r2, r3
    148e:	f000 80eb 	beq.w	1668 <uart_interrupt_test+0x2e8>
  } else if (CM3DS_MPS2_UART == CM3DS_MPS2_UART4) {
    1492:	4b85      	ldr	r3, [pc, #532]	; (16a8 <uart_interrupt_test+0x328>)
    1494:	429a      	cmp	r2, r3
    1496:	f000 80ee 	beq.w	1676 <uart_interrupt_test+0x2f6>
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_RXIRQEN | UART_CTRL_HIGHSPEEDTX;
    149a:	f04f 0a4b 	mov.w	sl, #75	; 0x4b
  CM3DS_MPS2_UART->DATA = '.';
    149e:	f04f 092e 	mov.w	r9, #46	; 0x2e
    14a2:	2332      	movs	r3, #50	; 0x32
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_RXIRQEN | UART_CTRL_HIGHSPEEDTX;
    14a4:	f8c2 a008 	str.w	sl, [r2, #8]
  CM3DS_MPS2_UART->DATA = '.';
    14a8:	f8c2 9000 	str.w	r9, [r2]
    14ac:	f3bf 8f6f 	isb	sy
  for (i=0; i<50;i++){ __ISB(); } /* medium delay */
    14b0:	3b01      	subs	r3, #1
    14b2:	d1fb      	bne.n	14ac <uart_interrupt_test+0x12c>
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_HIGHSPEEDTX;
    14b4:	f04f 0943 	mov.w	r9, #67	; 0x43
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART0 && uart0_irq_occurred==0) ||
    14b8:	f1b2 2f40 	cmp.w	r2, #1073758208	; 0x40004000
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_HIGHSPEEDTX;
    14bc:	f8c2 9008 	str.w	r9, [r2, #8]
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART0 && uart0_irq_occurred==0) ||
    14c0:	f000 80a7 	beq.w	1612 <uart_interrupt_test+0x292>
    14c4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 16a4 <uart_interrupt_test+0x324>
    14c8:	454a      	cmp	r2, r9
    14ca:	f000 80c3 	beq.w	1654 <uart_interrupt_test+0x2d4>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART1 && uart1_irq_occurred==0) ||
    14ce:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 16a8 <uart_interrupt_test+0x328>
    14d2:	454a      	cmp	r2, r9
    14d4:	f040 80b0 	bne.w	1638 <uart_interrupt_test+0x2b8>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART4 && uart4_irq_occurred==0)) { err_code += (1<<2);}
    14d8:	f8dc 9000 	ldr.w	r9, [ip]
    14dc:	f1b9 0f00 	cmp.w	r9, #0
    14e0:	f000 8085 	beq.w	15ee <uart_interrupt_test+0x26e>
  uart0_irq_occurred = 0;
    14e4:	6033      	str	r3, [r6, #0]
  uart1_irq_occurred = 0;
    14e6:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    14e8:	f8cc 3000 	str.w	r3, [ip]
    14ec:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
    14f0:	4b6e      	ldr	r3, [pc, #440]	; (16ac <uart_interrupt_test+0x32c>)
    14f2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  uart0_irq_expected = 0;
    14f6:	2600      	movs	r6, #0
  CM3DS_MPS2_UART->DATA = '.';
    14f8:	252e      	movs	r5, #46	; 0x2e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    14fa:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  uart_ovfirq_expected = 1;
    14fe:	f04f 0901 	mov.w	r9, #1
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_RXOVRIRQEN | UART_CTRL_HIGHSPEEDTX;
    1502:	f04f 0c63 	mov.w	ip, #99	; 0x63
  CM3DS_MPS2_UART->DATA = '.';
    1506:	2332      	movs	r3, #50	; 0x32
  uart0_irq_expected = 0;
    1508:	600e      	str	r6, [r1, #0]
    150a:	4968      	ldr	r1, [pc, #416]	; (16ac <uart_interrupt_test+0x32c>)
  uart1_irq_expected = 0;
    150c:	6026      	str	r6, [r4, #0]
  uart4_irq_expected = 0;
    150e:	603e      	str	r6, [r7, #0]
    1510:	f8c1 a000 	str.w	sl, [r1]
  uart_ovfirq_expected = 1;
    1514:	f8ce 9000 	str.w	r9, [lr]
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_RXOVRIRQEN | UART_CTRL_HIGHSPEEDTX;
    1518:	f8c2 c008 	str.w	ip, [r2, #8]
  CM3DS_MPS2_UART->DATA = '.';
    151c:	6015      	str	r5, [r2, #0]
  CM3DS_MPS2_UART->DATA = '.';
    151e:	6015      	str	r5, [r2, #0]
  CM3DS_MPS2_UART->DATA = '.';
    1520:	6015      	str	r5, [r2, #0]
    1522:	f3bf 8f6f 	isb	sy
  for (i=0; i<50;i++){ __ISB(); } /* medium delay */
    1526:	3b01      	subs	r3, #1
    1528:	d1fb      	bne.n	1522 <uart_interrupt_test+0x1a2>
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_RXEN | UART_CTRL_HIGHSPEEDTX;
    152a:	2143      	movs	r1, #67	; 0x43
    152c:	6091      	str	r1, [r2, #8]
  if (uart_ovfirq_occurred==0)                         { err_code += (1<<4);}
    152e:	f8d8 1000 	ldr.w	r1, [r8]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1532:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    1536:	2900      	cmp	r1, #0
    1538:	d14c      	bne.n	15d4 <uart_interrupt_test+0x254>
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_HIGHSPEEDTX;
    153a:	2141      	movs	r1, #65	; 0x41
    153c:	4c5b      	ldr	r4, [pc, #364]	; (16ac <uart_interrupt_test+0x32c>)
  uart_ovfirq_occurred = 0;
    153e:	f8c8 3000 	str.w	r3, [r8]
  if (uart_ovfirq_occurred==0)                         { err_code += (1<<4);}
    1542:	3010      	adds	r0, #16
    1544:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  uart_ovfirq_expected = 0;
    1548:	f8ce 3000 	str.w	r3, [lr]
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_HIGHSPEEDTX;
    154c:	6091      	str	r1, [r2, #8]
    printf ("ERROR : interrupt connectivity test failed (0x%x)\n", err_code);
    154e:	4601      	mov	r1, r0
    1550:	4857      	ldr	r0, [pc, #348]	; (16b0 <uart_interrupt_test+0x330>)
    1552:	f000 fc45 	bl	1de0 <iprintf>
    return_val =1;
    1556:	2001      	movs	r0, #1
}
    1558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    155c:	f04f 0e04 	mov.w	lr, #4
    uart1_irq_expected = 1;
    1560:	2301      	movs	r3, #1
    1562:	4852      	ldr	r0, [pc, #328]	; (16ac <uart_interrupt_test+0x32c>)
    1564:	f8c0 e000 	str.w	lr, [r0]
    1568:	6023      	str	r3, [r4, #0]
    156a:	e734      	b.n	13d6 <uart_interrupt_test+0x56>
    156c:	2301      	movs	r3, #1
    156e:	484f      	ldr	r0, [pc, #316]	; (16ac <uart_interrupt_test+0x32c>)
    1570:	6003      	str	r3, [r0, #0]
    uart0_irq_expected = 1;
    1572:	600b      	str	r3, [r1, #0]
    1574:	e72f      	b.n	13d6 <uart_interrupt_test+0x56>
    puts ("ERROR: Input parameter invalid in function 'uart_interrupt_test'.");
    1576:	484f      	ldr	r0, [pc, #316]	; (16b4 <uart_interrupt_test+0x334>)
    1578:	f000 fca6 	bl	1ec8 <puts>
    return 1;
    157c:	2001      	movs	r0, #1
}
    157e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART0 && uart0_irq_occurred==0) ||
    1582:	6833      	ldr	r3, [r6, #0]
    1584:	b9fb      	cbnz	r3, 15c6 <uart_interrupt_test+0x246>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART4 && uart4_irq_occurred==0)) { err_code += (1<<0);}
    1586:	2001      	movs	r0, #1
  uart0_irq_occurred = 0;
    1588:	6033      	str	r3, [r6, #0]
  uart1_irq_occurred = 0;
    158a:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    158c:	f8cc 3000 	str.w	r3, [ip]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1590:	f04f 0e01 	mov.w	lr, #1
    1594:	4b45      	ldr	r3, [pc, #276]	; (16ac <uart_interrupt_test+0x32c>)
    1596:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
    159a:	e73f      	b.n	141c <uart_interrupt_test+0x9c>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART4 && uart4_irq_occurred==0)) { err_code += (1<<0);}
    159c:	f8dc 3000 	ldr.w	r3, [ip]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d16f      	bne.n	1684 <uart_interrupt_test+0x304>
    15a4:	2001      	movs	r0, #1
  uart0_irq_occurred = 0;
    15a6:	2300      	movs	r3, #0
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART1) NVIC_DisableIRQ(UART1_IRQn);
    15a8:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 16a4 <uart_interrupt_test+0x324>
  uart0_irq_occurred = 0;
    15ac:	6033      	str	r3, [r6, #0]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART1) NVIC_DisableIRQ(UART1_IRQn);
    15ae:	4572      	cmp	r2, lr
  uart1_irq_occurred = 0;
    15b0:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    15b2:	f8cc 3000 	str.w	r3, [ip]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART1) NVIC_DisableIRQ(UART1_IRQn);
    15b6:	f47f af29 	bne.w	140c <uart_interrupt_test+0x8c>
    15ba:	f04f 0e04 	mov.w	lr, #4
    15be:	4b3b      	ldr	r3, [pc, #236]	; (16ac <uart_interrupt_test+0x32c>)
    15c0:	f8c3 e080 	str.w	lr, [r3, #128]	; 0x80
    15c4:	e72a      	b.n	141c <uart_interrupt_test+0x9c>
  uart0_irq_occurred = 0;
    15c6:	2300      	movs	r3, #0
    15c8:	6033      	str	r3, [r6, #0]
  int err_code=0;
    15ca:	4618      	mov	r0, r3
  uart1_irq_occurred = 0;
    15cc:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    15ce:	f8cc 3000 	str.w	r3, [ip]
    15d2:	e7dd      	b.n	1590 <uart_interrupt_test+0x210>
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_HIGHSPEEDTX;
    15d4:	2141      	movs	r1, #65	; 0x41
    15d6:	4c35      	ldr	r4, [pc, #212]	; (16ac <uart_interrupt_test+0x32c>)
  uart_ovfirq_occurred = 0;
    15d8:	f8c8 3000 	str.w	r3, [r8]
    15dc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  uart_ovfirq_expected = 0;
    15e0:	f8ce 3000 	str.w	r3, [lr]
  CM3DS_MPS2_UART->CTRL = UART_CTRL_TXEN | UART_CTRL_HIGHSPEEDTX;
    15e4:	6091      	str	r1, [r2, #8]
  if (err_code != 0) {
    15e6:	2800      	cmp	r0, #0
    15e8:	d1b1      	bne.n	154e <uart_interrupt_test+0x1ce>
}
    15ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uart0_irq_occurred = 0;
    15ee:	2300      	movs	r3, #0
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART0) NVIC_DisableIRQ(UART0_IRQn);
    15f0:	f1b2 2f40 	cmp.w	r2, #1073758208	; 0x40004000
  uart0_irq_occurred = 0;
    15f4:	6033      	str	r3, [r6, #0]
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART4 && uart4_irq_occurred==0)) { err_code += (1<<2);}
    15f6:	f100 0004 	add.w	r0, r0, #4
  uart1_irq_occurred = 0;
    15fa:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    15fc:	f8cc 3000 	str.w	r3, [ip]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART0) NVIC_DisableIRQ(UART0_IRQn);
    1600:	d010      	beq.n	1624 <uart_interrupt_test+0x2a4>
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART1) NVIC_DisableIRQ(UART1_IRQn);
    1602:	4b28      	ldr	r3, [pc, #160]	; (16a4 <uart_interrupt_test+0x324>)
    1604:	429a      	cmp	r2, r3
    1606:	d11b      	bne.n	1640 <uart_interrupt_test+0x2c0>
    1608:	2504      	movs	r5, #4
    160a:	4b28      	ldr	r3, [pc, #160]	; (16ac <uart_interrupt_test+0x32c>)
    160c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
    1610:	e771      	b.n	14f6 <uart_interrupt_test+0x176>
  if ((CM3DS_MPS2_UART==CM3DS_MPS2_UART0 && uart0_irq_occurred==0) ||
    1612:	f8d6 9000 	ldr.w	r9, [r6]
    1616:	f1b9 0f00 	cmp.w	r9, #0
    161a:	d0e8      	beq.n	15ee <uart_interrupt_test+0x26e>
  uart0_irq_occurred = 0;
    161c:	6033      	str	r3, [r6, #0]
  uart1_irq_occurred = 0;
    161e:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    1620:	f8cc 3000 	str.w	r3, [ip]
    1624:	2501      	movs	r5, #1
    1626:	4b21      	ldr	r3, [pc, #132]	; (16ac <uart_interrupt_test+0x32c>)
    1628:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
    162c:	e763      	b.n	14f6 <uart_interrupt_test+0x176>
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    162e:	2301      	movs	r3, #1
    1630:	f8c9 3000 	str.w	r3, [r9]
    uart0_irq_expected = 1;
    1634:	600b      	str	r3, [r1, #0]
    1636:	e730      	b.n	149a <uart_interrupt_test+0x11a>
  uart0_irq_occurred = 0;
    1638:	6033      	str	r3, [r6, #0]
  uart1_irq_occurred = 0;
    163a:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    163c:	f8cc 3000 	str.w	r3, [ip]
  if (CM3DS_MPS2_UART == CM3DS_MPS2_UART4) NVIC_DisableIRQ(UART4_IRQn);
    1640:	4b19      	ldr	r3, [pc, #100]	; (16a8 <uart_interrupt_test+0x328>)
    1642:	429a      	cmp	r2, r3
    1644:	f43f af52 	beq.w	14ec <uart_interrupt_test+0x16c>
    1648:	e755      	b.n	14f6 <uart_interrupt_test+0x176>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART1 && uart1_irq_occurred==0) ||
    164a:	6828      	ldr	r0, [r5, #0]
    164c:	fab0 f080 	clz	r0, r0
    1650:	0940      	lsrs	r0, r0, #5
    1652:	e7a8      	b.n	15a6 <uart_interrupt_test+0x226>
      (CM3DS_MPS2_UART==CM3DS_MPS2_UART1 && uart1_irq_occurred==0) ||
    1654:	f8d5 9000 	ldr.w	r9, [r5]
    1658:	f1b9 0f00 	cmp.w	r9, #0
    165c:	d0c7      	beq.n	15ee <uart_interrupt_test+0x26e>
  uart0_irq_occurred = 0;
    165e:	6033      	str	r3, [r6, #0]
  uart1_irq_occurred = 0;
    1660:	602b      	str	r3, [r5, #0]
  uart4_irq_occurred = 0;
    1662:	f8cc 3000 	str.w	r3, [ip]
    1666:	e7cf      	b.n	1608 <uart_interrupt_test+0x288>
    1668:	f04f 0a04 	mov.w	sl, #4
    uart1_irq_expected = 1;
    166c:	2301      	movs	r3, #1
    166e:	f8c9 a000 	str.w	sl, [r9]
    1672:	6023      	str	r3, [r4, #0]
    1674:	e711      	b.n	149a <uart_interrupt_test+0x11a>
    1676:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
    uart4_irq_expected = 1;
    167a:	2301      	movs	r3, #1
    167c:	f8c9 a004 	str.w	sl, [r9, #4]
    1680:	603b      	str	r3, [r7, #0]
    1682:	e70a      	b.n	149a <uart_interrupt_test+0x11a>
  uart0_irq_occurred = 0;
    1684:	2000      	movs	r0, #0
    1686:	6030      	str	r0, [r6, #0]
  uart1_irq_occurred = 0;
    1688:	6028      	str	r0, [r5, #0]
  uart4_irq_occurred = 0;
    168a:	f8cc 0000 	str.w	r0, [ip]
    168e:	e6c0      	b.n	1412 <uart_interrupt_test+0x92>
    1690:	200000a0 	.word	0x200000a0
    1694:	20000084 	.word	0x20000084
    1698:	20000078 	.word	0x20000078
    169c:	20000088 	.word	0x20000088
    16a0:	20000090 	.word	0x20000090
    16a4:	40005000 	.word	0x40005000
    16a8:	4002e000 	.word	0x4002e000
    16ac:	e000e100 	.word	0xe000e100
    16b0:	0000318c 	.word	0x0000318c
    16b4:	00003148 	.word	0x00003148
    16b8:	20000080 	.word	0x20000080
    16bc:	2000009c 	.word	0x2000009c
    16c0:	2000008c 	.word	0x2000008c

000016c4 <delay_for_character>:
{
    16c4:	2378      	movs	r3, #120	; 0x78
    16c6:	f3bf 8f6f 	isb	sy
  for (i=0; i<120;i++){
    16ca:	3b01      	subs	r3, #1
    16cc:	d1fb      	bne.n	16c6 <delay_for_character+0x2>
    __ISB();
    }
  return;
}
    16ce:	4770      	bx	lr

000016d0 <uart1_id_check>:
/* --------------------------------------------------------------- */
/*  Peripheral ID detection to check if device is present          */
/* --------------------------------------------------------------- */
int uart1_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE0) != 0x21) ||
    16d0:	4b05      	ldr	r3, [pc, #20]	; (16e8 <uart1_id_check+0x18>)
    16d2:	681b      	ldr	r3, [r3, #0]
    16d4:	2b21      	cmp	r3, #33	; 0x21
    16d6:	d001      	beq.n	16dc <uart1_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
    16d8:	2001      	movs	r0, #1
else
  return 0;
}
    16da:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE4) != 0xB8))
    16dc:	4b03      	ldr	r3, [pc, #12]	; (16ec <uart1_id_check+0x1c>)
    16de:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE0) != 0x21) ||
    16e0:	38b8      	subs	r0, #184	; 0xb8
    16e2:	bf18      	it	ne
    16e4:	2001      	movne	r0, #1
    16e6:	4770      	bx	lr
    16e8:	40005fe0 	.word	0x40005fe0
    16ec:	40005fe4 	.word	0x40005fe4

000016f0 <uart2_id_check>:

int uart2_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
    16f0:	4b05      	ldr	r3, [pc, #20]	; (1708 <uart2_id_check+0x18>)
    16f2:	681b      	ldr	r3, [r3, #0]
    16f4:	2b21      	cmp	r3, #33	; 0x21
    16f6:	d001      	beq.n	16fc <uart2_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
    16f8:	2001      	movs	r0, #1
else
  return 0;
}
    16fa:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
    16fc:	4b03      	ldr	r3, [pc, #12]	; (170c <uart2_id_check+0x1c>)
    16fe:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
    1700:	38b8      	subs	r0, #184	; 0xb8
    1702:	bf18      	it	ne
    1704:	2001      	movne	r0, #1
    1706:	4770      	bx	lr
    1708:	4002cfe0 	.word	0x4002cfe0
    170c:	4002cfe4 	.word	0x4002cfe4

00001710 <uart3_id_check>:

int uart3_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
    1710:	4b05      	ldr	r3, [pc, #20]	; (1728 <uart3_id_check+0x18>)
    1712:	681b      	ldr	r3, [r3, #0]
    1714:	2b21      	cmp	r3, #33	; 0x21
    1716:	d001      	beq.n	171c <uart3_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
    1718:	2001      	movs	r0, #1
else
  return 0;
}
    171a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
    171c:	4b03      	ldr	r3, [pc, #12]	; (172c <uart3_id_check+0x1c>)
    171e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
    1720:	38b8      	subs	r0, #184	; 0xb8
    1722:	bf18      	it	ne
    1724:	2001      	movne	r0, #1
    1726:	4770      	bx	lr
    1728:	4002dfe0 	.word	0x4002dfe0
    172c:	4002dfe4 	.word	0x4002dfe4

00001730 <uart4_id_check>:

int uart4_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE0) != 0x21) ||
    1730:	4b05      	ldr	r3, [pc, #20]	; (1748 <uart4_id_check+0x18>)
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	2b21      	cmp	r3, #33	; 0x21
    1736:	d001      	beq.n	173c <uart4_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
    1738:	2001      	movs	r0, #1
else
  return 0;
}
    173a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE4) != 0xB8))
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <uart4_id_check+0x1c>)
    173e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE0) != 0x21) ||
    1740:	38b8      	subs	r0, #184	; 0xb8
    1742:	bf18      	it	ne
    1744:	2001      	movne	r0, #1
    1746:	4770      	bx	lr
    1748:	4002efe0 	.word	0x4002efe0
    174c:	4002efe4 	.word	0x4002efe4

00001750 <gpio0_id_check>:

int gpio0_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <gpio0_id_check+0x18>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	2b20      	cmp	r3, #32
    1756:	d001      	beq.n	175c <gpio0_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
    1758:	2001      	movs	r0, #1
else
  return 0;
}
    175a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
    175c:	4b03      	ldr	r3, [pc, #12]	; (176c <gpio0_id_check+0x1c>)
    175e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    1760:	38b8      	subs	r0, #184	; 0xb8
    1762:	bf18      	it	ne
    1764:	2001      	movne	r0, #1
    1766:	4770      	bx	lr
    1768:	40010fe0 	.word	0x40010fe0
    176c:	40010fe4 	.word	0x40010fe4

00001770 <gpio1_id_check>:

int gpio1_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <gpio1_id_check+0x18>)
    1772:	681b      	ldr	r3, [r3, #0]
    1774:	2b20      	cmp	r3, #32
    1776:	d001      	beq.n	177c <gpio1_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
    1778:	2001      	movs	r0, #1
else
  return 0;
}
    177a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8))
    177c:	4b03      	ldr	r3, [pc, #12]	; (178c <gpio1_id_check+0x1c>)
    177e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    1780:	38b8      	subs	r0, #184	; 0xb8
    1782:	bf18      	it	ne
    1784:	2001      	movne	r0, #1
    1786:	4770      	bx	lr
    1788:	40011fe0 	.word	0x40011fe0
    178c:	40011fe4 	.word	0x40011fe4

00001790 <UART2_Handler>:
/*  UART interrupt handlers                                        */
/* --------------------------------------------------------------- */
void UART2_Handler(void)
{
  int err_code = 0;
  if (uart2_irq_expected==0)                           {err_code += (1<<0);}
    1790:	4a10      	ldr	r2, [pc, #64]	; (17d4 <UART2_Handler+0x44>)
{
    1792:	b508      	push	{r3, lr}
  if (uart2_irq_expected==0)                           {err_code += (1<<0);}
    1794:	6811      	ldr	r1, [r2, #0]
  if (CM3DS_MPS2_UART2->INTSTATUS==0) {err_code += (1<<1);}
    1796:	4b10      	ldr	r3, [pc, #64]	; (17d8 <UART2_Handler+0x48>)
  if (uart2_irq_expected==0)                           {err_code += (1<<0);}
    1798:	fab1 f181 	clz	r1, r1
  if (CM3DS_MPS2_UART2->INTSTATUS==0) {err_code += (1<<1);}
    179c:	68db      	ldr	r3, [r3, #12]
  if (uart2_irq_expected==0)                           {err_code += (1<<0);}
    179e:	0949      	lsrs	r1, r1, #5
  if (CM3DS_MPS2_UART2->INTSTATUS==0) {err_code += (1<<1);}
    17a0:	b903      	cbnz	r3, 17a4 <UART2_Handler+0x14>
    17a2:	3102      	adds	r1, #2
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TX)!=0)
    17a4:	4b0c      	ldr	r3, [pc, #48]	; (17d8 <UART2_Handler+0x48>)
    17a6:	68da      	ldr	r2, [r3, #12]
    17a8:	07d0      	lsls	r0, r2, #31
     CM3DS_MPS2_UART2->INTCLEAR = UART_INTSTATE_TX; // clear TX IRQ
    17aa:	bf44      	itt	mi
    17ac:	2201      	movmi	r2, #1
    17ae:	60da      	strmi	r2, [r3, #12]
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RX)!=0)
    17b0:	4b09      	ldr	r3, [pc, #36]	; (17d8 <UART2_Handler+0x48>)
    17b2:	68da      	ldr	r2, [r3, #12]
    17b4:	0792      	lsls	r2, r2, #30
     CM3DS_MPS2_UART2->INTCLEAR = UART_INTSTATE_RX; // clear RX IRQ
    17b6:	bf44      	itt	mi
    17b8:	2202      	movmi	r2, #2
    17ba:	60da      	strmi	r2, [r3, #12]
  uart2_irq_occurred++;
    17bc:	4a07      	ldr	r2, [pc, #28]	; (17dc <UART2_Handler+0x4c>)
    17be:	6813      	ldr	r3, [r2, #0]
    17c0:	3301      	adds	r3, #1
    17c2:	6013      	str	r3, [r2, #0]
  if (err_code != 0) {
    17c4:	b901      	cbnz	r1, 17c8 <UART2_Handler+0x38>
    printf ("ERROR : UART 0 handler failed (0x%x)\n", err_code);
    UartEndSimulation();
    while(1);
    }
  return;
}
    17c6:	bd08      	pop	{r3, pc}
    printf ("ERROR : UART 0 handler failed (0x%x)\n", err_code);
    17c8:	4805      	ldr	r0, [pc, #20]	; (17e0 <UART2_Handler+0x50>)
    17ca:	f000 fb09 	bl	1de0 <iprintf>
    UartEndSimulation();
    17ce:	f000 fad3 	bl	1d78 <UartEndSimulation>
    17d2:	e7fe      	b.n	17d2 <UART2_Handler+0x42>
    17d4:	20000094 	.word	0x20000094
    17d8:	4002c000 	.word	0x4002c000
    17dc:	20000074 	.word	0x20000074
    17e0:	000032f4 	.word	0x000032f4

000017e4 <UART3_Handler>:

void UART3_Handler(void)
{
  int err_code = 0;
  if (uart3_irq_expected==0)                           {err_code += (1<<0);}
    17e4:	4a10      	ldr	r2, [pc, #64]	; (1828 <UART3_Handler+0x44>)
{
    17e6:	b508      	push	{r3, lr}
  if (uart3_irq_expected==0)                           {err_code += (1<<0);}
    17e8:	6811      	ldr	r1, [r2, #0]
  if (CM3DS_MPS2_UART3->INTSTATUS==0) {err_code += (1<<1);}
    17ea:	4b10      	ldr	r3, [pc, #64]	; (182c <UART3_Handler+0x48>)
  if (uart3_irq_expected==0)                           {err_code += (1<<0);}
    17ec:	fab1 f181 	clz	r1, r1
  if (CM3DS_MPS2_UART3->INTSTATUS==0) {err_code += (1<<1);}
    17f0:	68db      	ldr	r3, [r3, #12]
  if (uart3_irq_expected==0)                           {err_code += (1<<0);}
    17f2:	0949      	lsrs	r1, r1, #5
  if (CM3DS_MPS2_UART3->INTSTATUS==0) {err_code += (1<<1);}
    17f4:	b903      	cbnz	r3, 17f8 <UART3_Handler+0x14>
    17f6:	3102      	adds	r1, #2
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TX)!=0)
    17f8:	4b0c      	ldr	r3, [pc, #48]	; (182c <UART3_Handler+0x48>)
    17fa:	68da      	ldr	r2, [r3, #12]
    17fc:	07d0      	lsls	r0, r2, #31
     CM3DS_MPS2_UART3->INTCLEAR = UART_INTSTATE_TX; // clear TX IRQ
    17fe:	bf44      	itt	mi
    1800:	2201      	movmi	r2, #1
    1802:	60da      	strmi	r2, [r3, #12]
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RX)!=0)
    1804:	4b09      	ldr	r3, [pc, #36]	; (182c <UART3_Handler+0x48>)
    1806:	68da      	ldr	r2, [r3, #12]
    1808:	0792      	lsls	r2, r2, #30
     CM3DS_MPS2_UART3->INTCLEAR = UART_INTSTATE_RX; // clear RX IRQ
    180a:	bf44      	itt	mi
    180c:	2202      	movmi	r2, #2
    180e:	60da      	strmi	r2, [r3, #12]
  uart3_irq_occurred++;
    1810:	4a07      	ldr	r2, [pc, #28]	; (1830 <UART3_Handler+0x4c>)
    1812:	6813      	ldr	r3, [r2, #0]
    1814:	3301      	adds	r3, #1
    1816:	6013      	str	r3, [r2, #0]
  if (err_code != 0) {
    1818:	b901      	cbnz	r1, 181c <UART3_Handler+0x38>
    printf ("ERROR : UART 3 handler failed (0x%x)\n", err_code);
    UartEndSimulation();
    while(1);
    }
  return;
}
    181a:	bd08      	pop	{r3, pc}
    printf ("ERROR : UART 3 handler failed (0x%x)\n", err_code);
    181c:	4805      	ldr	r0, [pc, #20]	; (1834 <UART3_Handler+0x50>)
    181e:	f000 fadf 	bl	1de0 <iprintf>
    UartEndSimulation();
    1822:	f000 faa9 	bl	1d78 <UartEndSimulation>
    1826:	e7fe      	b.n	1826 <UART3_Handler+0x42>
    1828:	2000007c 	.word	0x2000007c
    182c:	4002d000 	.word	0x4002d000
    1830:	20000098 	.word	0x20000098
    1834:	0000331c 	.word	0x0000331c

00001838 <UART0_Handler>:

void UART0_Handler(void)
{
  int err_code = 0;
  if (uart0_irq_expected==0)                           {err_code += (1<<0);}
    1838:	4a12      	ldr	r2, [pc, #72]	; (1884 <UART0_Handler+0x4c>)
{
    183a:	b508      	push	{r3, lr}
  if (uart0_irq_expected==0)                           {err_code += (1<<0);}
    183c:	6811      	ldr	r1, [r2, #0]
  if (CM3DS_MPS2_UART0->INTSTATUS==0) {err_code += (1<<1);}
    183e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
  if (uart0_irq_expected==0)                           {err_code += (1<<0);}
    1842:	fab1 f181 	clz	r1, r1
  if (CM3DS_MPS2_UART0->INTSTATUS==0) {err_code += (1<<1);}
    1846:	68db      	ldr	r3, [r3, #12]
  if (uart0_irq_expected==0)                           {err_code += (1<<0);}
    1848:	0949      	lsrs	r1, r1, #5
  if (CM3DS_MPS2_UART0->INTSTATUS==0) {err_code += (1<<1);}
    184a:	b903      	cbnz	r3, 184e <UART0_Handler+0x16>
    184c:	3102      	adds	r1, #2
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TX)!=0)
    184e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1852:	68da      	ldr	r2, [r3, #12]
    1854:	07d0      	lsls	r0, r2, #31
     CM3DS_MPS2_UART0->INTCLEAR = UART_INTSTATE_TX; // clear TX IRQ
    1856:	bf44      	itt	mi
    1858:	2201      	movmi	r2, #1
    185a:	60da      	strmi	r2, [r3, #12]
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RX)!=0)
    185c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1860:	68da      	ldr	r2, [r3, #12]
    1862:	0792      	lsls	r2, r2, #30
     CM3DS_MPS2_UART0->INTCLEAR = UART_INTSTATE_RX; // clear RX IRQ
    1864:	bf44      	itt	mi
    1866:	2202      	movmi	r2, #2
    1868:	60da      	strmi	r2, [r3, #12]
  uart0_irq_occurred++;
    186a:	4a07      	ldr	r2, [pc, #28]	; (1888 <UART0_Handler+0x50>)
    186c:	6813      	ldr	r3, [r2, #0]
    186e:	3301      	adds	r3, #1
    1870:	6013      	str	r3, [r2, #0]
  if (err_code != 0) {
    1872:	b901      	cbnz	r1, 1876 <UART0_Handler+0x3e>
    printf ("ERROR : UART 2 handler failed (0x%x)\n", err_code);
    UartEndSimulation();
    while(1);
    }
  return;
}
    1874:	bd08      	pop	{r3, pc}
    printf ("ERROR : UART 2 handler failed (0x%x)\n", err_code);
    1876:	4805      	ldr	r0, [pc, #20]	; (188c <UART0_Handler+0x54>)
    1878:	f000 fab2 	bl	1de0 <iprintf>
    UartEndSimulation();
    187c:	f000 fa7c 	bl	1d78 <UartEndSimulation>
    1880:	e7fe      	b.n	1880 <UART0_Handler+0x48>
    1882:	bf00      	nop
    1884:	200000a0 	.word	0x200000a0
    1888:	20000084 	.word	0x20000084
    188c:	00003344 	.word	0x00003344

00001890 <UART1_Handler>:

void UART1_Handler(void)
{
  int err_code = 0;
  if (uart1_irq_expected==0)                           {err_code += (1<<0);}
    1890:	4a10      	ldr	r2, [pc, #64]	; (18d4 <UART1_Handler+0x44>)
{
    1892:	b508      	push	{r3, lr}
  if (uart1_irq_expected==0)                           {err_code += (1<<0);}
    1894:	6811      	ldr	r1, [r2, #0]
  if (CM3DS_MPS2_UART1->INTSTATUS==0) {err_code += (1<<1);}
    1896:	4b10      	ldr	r3, [pc, #64]	; (18d8 <UART1_Handler+0x48>)
  if (uart1_irq_expected==0)                           {err_code += (1<<0);}
    1898:	fab1 f181 	clz	r1, r1
  if (CM3DS_MPS2_UART1->INTSTATUS==0) {err_code += (1<<1);}
    189c:	68db      	ldr	r3, [r3, #12]
  if (uart1_irq_expected==0)                           {err_code += (1<<0);}
    189e:	0949      	lsrs	r1, r1, #5
  if (CM3DS_MPS2_UART1->INTSTATUS==0) {err_code += (1<<1);}
    18a0:	b903      	cbnz	r3, 18a4 <UART1_Handler+0x14>
    18a2:	3102      	adds	r1, #2
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TX)!=0)
    18a4:	4b0c      	ldr	r3, [pc, #48]	; (18d8 <UART1_Handler+0x48>)
    18a6:	68da      	ldr	r2, [r3, #12]
    18a8:	07d0      	lsls	r0, r2, #31
     CM3DS_MPS2_UART1->INTCLEAR = UART_INTSTATE_TX; // clear TX IRQ
    18aa:	bf44      	itt	mi
    18ac:	2201      	movmi	r2, #1
    18ae:	60da      	strmi	r2, [r3, #12]
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RX)!=0)
    18b0:	4b09      	ldr	r3, [pc, #36]	; (18d8 <UART1_Handler+0x48>)
    18b2:	68da      	ldr	r2, [r3, #12]
    18b4:	0792      	lsls	r2, r2, #30
     CM3DS_MPS2_UART1->INTCLEAR = UART_INTSTATE_RX; // clear RX IRQ
    18b6:	bf44      	itt	mi
    18b8:	2202      	movmi	r2, #2
    18ba:	60da      	strmi	r2, [r3, #12]
  uart1_irq_occurred++;
    18bc:	4a07      	ldr	r2, [pc, #28]	; (18dc <UART1_Handler+0x4c>)
    18be:	6813      	ldr	r3, [r2, #0]
    18c0:	3301      	adds	r3, #1
    18c2:	6013      	str	r3, [r2, #0]
  if (err_code != 0) {
    18c4:	b901      	cbnz	r1, 18c8 <UART1_Handler+0x38>
    printf ("ERROR : UART 1 handler failed (0x%x)\n", err_code);
    UartEndSimulation();
    while(1);
    }
  return;
}
    18c6:	bd08      	pop	{r3, pc}
    printf ("ERROR : UART 1 handler failed (0x%x)\n", err_code);
    18c8:	4805      	ldr	r0, [pc, #20]	; (18e0 <UART1_Handler+0x50>)
    18ca:	f000 fa89 	bl	1de0 <iprintf>
    UartEndSimulation();
    18ce:	f000 fa53 	bl	1d78 <UartEndSimulation>
    18d2:	e7fe      	b.n	18d2 <UART1_Handler+0x42>
    18d4:	20000078 	.word	0x20000078
    18d8:	40005000 	.word	0x40005000
    18dc:	20000088 	.word	0x20000088
    18e0:	0000336c 	.word	0x0000336c

000018e4 <UART4_Handler>:

void UART4_Handler(void)
{
  int err_code = 0;
  if (uart4_irq_expected==0)                           {err_code += (1<<0);}
    18e4:	4a10      	ldr	r2, [pc, #64]	; (1928 <UART4_Handler+0x44>)
{
    18e6:	b508      	push	{r3, lr}
  if (uart4_irq_expected==0)                           {err_code += (1<<0);}
    18e8:	6811      	ldr	r1, [r2, #0]
  if (CM3DS_MPS2_UART4->INTSTATUS==0) {err_code += (1<<1);}
    18ea:	4b10      	ldr	r3, [pc, #64]	; (192c <UART4_Handler+0x48>)
  if (uart4_irq_expected==0)                           {err_code += (1<<0);}
    18ec:	fab1 f181 	clz	r1, r1
  if (CM3DS_MPS2_UART4->INTSTATUS==0) {err_code += (1<<1);}
    18f0:	68db      	ldr	r3, [r3, #12]
  if (uart4_irq_expected==0)                           {err_code += (1<<0);}
    18f2:	0949      	lsrs	r1, r1, #5
  if (CM3DS_MPS2_UART4->INTSTATUS==0) {err_code += (1<<1);}
    18f4:	b903      	cbnz	r3, 18f8 <UART4_Handler+0x14>
    18f6:	3102      	adds	r1, #2
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TX)!=0)
    18f8:	4b0c      	ldr	r3, [pc, #48]	; (192c <UART4_Handler+0x48>)
    18fa:	68da      	ldr	r2, [r3, #12]
    18fc:	07d0      	lsls	r0, r2, #31
     CM3DS_MPS2_UART4->INTCLEAR = UART_INTSTATE_TX; // clear TX IRQ
    18fe:	bf44      	itt	mi
    1900:	2201      	movmi	r2, #1
    1902:	60da      	strmi	r2, [r3, #12]
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RX)!=0)
    1904:	4b09      	ldr	r3, [pc, #36]	; (192c <UART4_Handler+0x48>)
    1906:	68da      	ldr	r2, [r3, #12]
    1908:	0792      	lsls	r2, r2, #30
     CM3DS_MPS2_UART4->INTCLEAR = UART_INTSTATE_RX; // clear RX IRQ
    190a:	bf44      	itt	mi
    190c:	2202      	movmi	r2, #2
    190e:	60da      	strmi	r2, [r3, #12]
  uart4_irq_occurred++;
    1910:	4a07      	ldr	r2, [pc, #28]	; (1930 <UART4_Handler+0x4c>)
    1912:	6813      	ldr	r3, [r2, #0]
    1914:	3301      	adds	r3, #1
    1916:	6013      	str	r3, [r2, #0]
  if (err_code != 0) {
    1918:	b901      	cbnz	r1, 191c <UART4_Handler+0x38>
    printf ("ERROR : UART 4 handler failed (0x%x)\n", err_code);
    UartEndSimulation();
    while(1);
    }
  return;
}
    191a:	bd08      	pop	{r3, pc}
    printf ("ERROR : UART 4 handler failed (0x%x)\n", err_code);
    191c:	4805      	ldr	r0, [pc, #20]	; (1934 <UART4_Handler+0x50>)
    191e:	f000 fa5f 	bl	1de0 <iprintf>
    UartEndSimulation();
    1922:	f000 fa29 	bl	1d78 <UartEndSimulation>
    1926:	e7fe      	b.n	1926 <UART4_Handler+0x42>
    1928:	20000090 	.word	0x20000090
    192c:	4002e000 	.word	0x4002e000
    1930:	20000080 	.word	0x20000080
    1934:	00003394 	.word	0x00003394

00001938 <UARTOVF_Handler>:

void UARTOVF_Handler(int uartid)
{
  int err_code = 0;
  if (uart_ovfirq_expected==0)                               {err_code += (1<<0);}
    1938:	4a7c      	ldr	r2, [pc, #496]	; (1b2c <UARTOVF_Handler+0x1f4>)
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    193a:	4b7d      	ldr	r3, [pc, #500]	; (1b30 <UARTOVF_Handler+0x1f8>)
  if (uart_ovfirq_expected==0)                               {err_code += (1<<0);}
    193c:	6811      	ldr	r1, [r2, #0]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    193e:	68da      	ldr	r2, [r3, #12]
  if (uart_ovfirq_expected==0)                               {err_code += (1<<0);}
    1940:	fab1 f181 	clz	r1, r1
      ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    1944:	68db      	ldr	r3, [r3, #12]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    1946:	f002 0204 	and.w	r2, r2, #4
      ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    194a:	f003 0308 	and.w	r3, r3, #8
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    194e:	4313      	orrs	r3, r2
{
    1950:	b570      	push	{r4, r5, r6, lr}
  if (uart_ovfirq_expected==0)                               {err_code += (1<<0);}
    1952:	ea4f 1151 	mov.w	r1, r1, lsr #5
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    1956:	d003      	beq.n	1960 <UARTOVF_Handler+0x28>
    uart_ovfirq_occurred++;
    1958:	4a76      	ldr	r2, [pc, #472]	; (1b34 <UARTOVF_Handler+0x1fc>)
    195a:	6813      	ldr	r3, [r2, #0]
    195c:	3301      	adds	r3, #1
    195e:	6013      	str	r3, [r2, #0]
  if (((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    1960:	4b75      	ldr	r3, [pc, #468]	; (1b38 <UARTOVF_Handler+0x200>)
    1962:	68da      	ldr	r2, [r3, #12]
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    1964:	68db      	ldr	r3, [r3, #12]
  if (((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    1966:	f002 0204 	and.w	r2, r2, #4
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    196a:	f003 0308 	and.w	r3, r3, #8
  if (((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    196e:	4313      	orrs	r3, r2
    1970:	d003      	beq.n	197a <UARTOVF_Handler+0x42>
    uart_ovfirq_occurred++;
    1972:	4a70      	ldr	r2, [pc, #448]	; (1b34 <UARTOVF_Handler+0x1fc>)
    1974:	6813      	ldr	r3, [r2, #0]
    1976:	3301      	adds	r3, #1
    1978:	6013      	str	r3, [r2, #0]
  if (((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    197a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    197e:	68da      	ldr	r2, [r3, #12]
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    1980:	68db      	ldr	r3, [r3, #12]
  if (((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    1982:	f002 0204 	and.w	r2, r2, #4
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    1986:	f003 0308 	and.w	r3, r3, #8
  if (((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    198a:	4313      	orrs	r3, r2
    198c:	d003      	beq.n	1996 <UARTOVF_Handler+0x5e>
    uart_ovfirq_occurred++;
    198e:	4a69      	ldr	r2, [pc, #420]	; (1b34 <UARTOVF_Handler+0x1fc>)
    1990:	6813      	ldr	r3, [r2, #0]
    1992:	3301      	adds	r3, #1
    1994:	6013      	str	r3, [r2, #0]
  if (((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    1996:	4b69      	ldr	r3, [pc, #420]	; (1b3c <UARTOVF_Handler+0x204>)
    1998:	68da      	ldr	r2, [r3, #12]
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    199a:	68db      	ldr	r3, [r3, #12]
  if (((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    199c:	f002 0204 	and.w	r2, r2, #4
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    19a0:	f003 0308 	and.w	r3, r3, #8
  if (((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    19a4:	4313      	orrs	r3, r2
    19a6:	d003      	beq.n	19b0 <UARTOVF_Handler+0x78>
    uart_ovfirq_occurred++;
    19a8:	4a62      	ldr	r2, [pc, #392]	; (1b34 <UARTOVF_Handler+0x1fc>)
    19aa:	6813      	ldr	r3, [r2, #0]
    19ac:	3301      	adds	r3, #1
    19ae:	6013      	str	r3, [r2, #0]
  if (((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    19b0:	4b63      	ldr	r3, [pc, #396]	; (1b40 <UARTOVF_Handler+0x208>)
    19b2:	68da      	ldr	r2, [r3, #12]
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    19b4:	68db      	ldr	r3, [r3, #12]
  if (((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    19b6:	f002 0204 	and.w	r2, r2, #4
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0))
    19ba:	f003 0308 	and.w	r3, r3, #8
  if (((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0) |
    19be:	4313      	orrs	r3, r2
    19c0:	d003      	beq.n	19ca <UARTOVF_Handler+0x92>
    uart_ovfirq_occurred++;
    19c2:	4a5c      	ldr	r2, [pc, #368]	; (1b34 <UARTOVF_Handler+0x1fc>)
    19c4:	6813      	ldr	r3, [r2, #0]
    19c6:	3301      	adds	r3, #1
    19c8:	6013      	str	r3, [r2, #0]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
      ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19ca:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19ce:	4858      	ldr	r0, [pc, #352]	; (1b30 <UARTOVF_Handler+0x1f8>)
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19d0:	4a59      	ldr	r2, [pc, #356]	; (1b38 <UARTOVF_Handler+0x200>)
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19d2:	68c3      	ldr	r3, [r0, #12]
      ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    19d4:	68c4      	ldr	r4, [r0, #12]
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19d6:	68d0      	ldr	r0, [r2, #12]
      ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    19d8:	f004 0408 	and.w	r4, r4, #8
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    19dc:	68d2      	ldr	r2, [r2, #12]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19de:	f003 0304 	and.w	r3, r3, #4
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19e2:	4e56      	ldr	r6, [pc, #344]	; (1b3c <UARTOVF_Handler+0x204>)
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19e4:	4323      	orrs	r3, r4
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19e6:	f000 0004 	and.w	r0, r0, #4
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19ea:	68ec      	ldr	r4, [r5, #12]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19ec:	4303      	orrs	r3, r0
      ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    19ee:	f002 0208 	and.w	r2, r2, #8
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    19f2:	68e8      	ldr	r0, [r5, #12]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19f4:	4313      	orrs	r3, r2
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19f6:	f004 0404 	and.w	r4, r4, #4
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19fa:	68f2      	ldr	r2, [r6, #12]
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    19fc:	f505 3528 	add.w	r5, r5, #172032	; 0x2a000
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a00:	4323      	orrs	r3, r4
      ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    1a02:	f000 0008 	and.w	r0, r0, #8
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    1a06:	68f4      	ldr	r4, [r6, #12]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a08:	4303      	orrs	r3, r0
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a0a:	f002 0204 	and.w	r2, r2, #4
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a0e:	68e8      	ldr	r0, [r5, #12]
      ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)==0) &
    1a10:	f004 0408 	and.w	r4, r4, #8
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a14:	4313      	orrs	r3, r2
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)==0)) {err_code += (1<<1);}
    1a16:	68ea      	ldr	r2, [r5, #12]
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a18:	4323      	orrs	r3, r4
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a1a:	f000 0004 	and.w	r0, r0, #4
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a1e:	4303      	orrs	r3, r0
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)==0)) {err_code += (1<<1);}
    1a20:	f002 0208 	and.w	r2, r2, #8
  if (((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)==0) &
    1a24:	4313      	orrs	r3, r2
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0){
    1a26:	4b42      	ldr	r3, [pc, #264]	; (1b30 <UARTOVF_Handler+0x1f8>)
      ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)==0)) {err_code += (1<<1);}
    1a28:	bf08      	it	eq
    1a2a:	3102      	addeq	r1, #2
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0){
    1a2c:	68da      	ldr	r2, [r3, #12]
    1a2e:	0755      	lsls	r5, r2, #29
    CM3DS_MPS2_UART2->INTCLEAR = UART_STATE_TXOVR; /* Clear TX overrun status */
    1a30:	bf44      	itt	mi
    1a32:	2204      	movmi	r2, #4
    1a34:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)!=0){
    1a36:	4b3e      	ldr	r3, [pc, #248]	; (1b30 <UARTOVF_Handler+0x1f8>)
    1a38:	68da      	ldr	r2, [r3, #12]
    1a3a:	0714      	lsls	r4, r2, #28
    CM3DS_MPS2_UART2->INTCLEAR = UART_STATE_RXOVR; /* Clear RX overrun status */
    1a3c:	bf44      	itt	mi
    1a3e:	2208      	movmi	r2, #8
    1a40:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0){
    1a42:	4b3d      	ldr	r3, [pc, #244]	; (1b38 <UARTOVF_Handler+0x200>)
    1a44:	68da      	ldr	r2, [r3, #12]
    1a46:	0750      	lsls	r0, r2, #29
    CM3DS_MPS2_UART3->INTCLEAR = UART_STATE_TXOVR; /* Clear TX overrun status */
    1a48:	bf44      	itt	mi
    1a4a:	2204      	movmi	r2, #4
    1a4c:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)!=0){
    1a4e:	4b3a      	ldr	r3, [pc, #232]	; (1b38 <UARTOVF_Handler+0x200>)
    1a50:	68da      	ldr	r2, [r3, #12]
    1a52:	0712      	lsls	r2, r2, #28
    CM3DS_MPS2_UART3->INTCLEAR = UART_STATE_RXOVR; /* Clear RX overrun status */
    1a54:	bf44      	itt	mi
    1a56:	2208      	movmi	r2, #8
    1a58:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0){
    1a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1a5e:	68da      	ldr	r2, [r3, #12]
    1a60:	0756      	lsls	r6, r2, #29
    CM3DS_MPS2_UART0->INTCLEAR = UART_STATE_TXOVR; /* Clear TX overrun status */
    1a62:	bf44      	itt	mi
    1a64:	2204      	movmi	r2, #4
    1a66:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)!=0){
    1a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1a6c:	68da      	ldr	r2, [r3, #12]
    1a6e:	0715      	lsls	r5, r2, #28
    CM3DS_MPS2_UART0->INTCLEAR = UART_STATE_RXOVR; /* Clear RX overrun status */
    1a70:	bf44      	itt	mi
    1a72:	2208      	movmi	r2, #8
    1a74:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0){
    1a76:	4b31      	ldr	r3, [pc, #196]	; (1b3c <UARTOVF_Handler+0x204>)
    1a78:	68da      	ldr	r2, [r3, #12]
    1a7a:	0754      	lsls	r4, r2, #29
    CM3DS_MPS2_UART1->INTCLEAR = UART_STATE_TXOVR; /* Clear TX overrun status */
    1a7c:	bf44      	itt	mi
    1a7e:	2204      	movmi	r2, #4
    1a80:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)!=0){
    1a82:	4b2e      	ldr	r3, [pc, #184]	; (1b3c <UARTOVF_Handler+0x204>)
    1a84:	68da      	ldr	r2, [r3, #12]
    1a86:	0710      	lsls	r0, r2, #28
    CM3DS_MPS2_UART1->INTCLEAR = UART_STATE_RXOVR; /* Clear RX overrun status */
    1a88:	bf44      	itt	mi
    1a8a:	2208      	movmi	r2, #8
    1a8c:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0){
    1a8e:	4b2c      	ldr	r3, [pc, #176]	; (1b40 <UARTOVF_Handler+0x208>)
    1a90:	68da      	ldr	r2, [r3, #12]
    1a92:	0752      	lsls	r2, r2, #29
    CM3DS_MPS2_UART4->INTCLEAR = UART_STATE_TXOVR; /* Clear TX overrun status */
    1a94:	bf44      	itt	mi
    1a96:	2204      	movmi	r2, #4
    1a98:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0){
    1a9a:	4b29      	ldr	r3, [pc, #164]	; (1b40 <UARTOVF_Handler+0x208>)
    1a9c:	68da      	ldr	r2, [r3, #12]
    1a9e:	0716      	lsls	r6, r2, #28
    CM3DS_MPS2_UART4->INTCLEAR = UART_STATE_RXOVR; /* Clear RX overrun status */
    1aa0:	bf44      	itt	mi
    1aa2:	2208      	movmi	r2, #8
    1aa4:	60da      	strmi	r2, [r3, #12]
    }
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<2);}
    1aa6:	4b22      	ldr	r3, [pc, #136]	; (1b30 <UARTOVF_Handler+0x1f8>)
    1aa8:	68db      	ldr	r3, [r3, #12]
    1aaa:	075d      	lsls	r5, r3, #29
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<3);}
    1aac:	4b20      	ldr	r3, [pc, #128]	; (1b30 <UARTOVF_Handler+0x1f8>)
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<2);}
    1aae:	bf48      	it	mi
    1ab0:	3104      	addmi	r1, #4
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<3);}
    1ab2:	68db      	ldr	r3, [r3, #12]
    1ab4:	071c      	lsls	r4, r3, #28
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<4);}
    1ab6:	4b20      	ldr	r3, [pc, #128]	; (1b38 <UARTOVF_Handler+0x200>)
  if ((CM3DS_MPS2_UART2->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<3);}
    1ab8:	bf48      	it	mi
    1aba:	3108      	addmi	r1, #8
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<4);}
    1abc:	68db      	ldr	r3, [r3, #12]
    1abe:	0758      	lsls	r0, r3, #29
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<5);}
    1ac0:	4b1d      	ldr	r3, [pc, #116]	; (1b38 <UARTOVF_Handler+0x200>)
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<4);}
    1ac2:	bf48      	it	mi
    1ac4:	3110      	addmi	r1, #16
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<5);}
    1ac6:	68db      	ldr	r3, [r3, #12]
    1ac8:	071a      	lsls	r2, r3, #28
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<6);}
    1aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1ace:	68db      	ldr	r3, [r3, #12]
  if ((CM3DS_MPS2_UART3->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<5);}
    1ad0:	bf48      	it	mi
    1ad2:	3120      	addmi	r1, #32
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<6);}
    1ad4:	075b      	lsls	r3, r3, #29
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<7);}
    1ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1ada:	68db      	ldr	r3, [r3, #12]
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<6);}
    1adc:	bf48      	it	mi
    1ade:	3140      	addmi	r1, #64	; 0x40
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<7);}
    1ae0:	071e      	lsls	r6, r3, #28
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<8);}
    1ae2:	4b16      	ldr	r3, [pc, #88]	; (1b3c <UARTOVF_Handler+0x204>)
  if ((CM3DS_MPS2_UART0->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<7);}
    1ae4:	bf48      	it	mi
    1ae6:	3180      	addmi	r1, #128	; 0x80
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<8);}
    1ae8:	68db      	ldr	r3, [r3, #12]
    1aea:	075d      	lsls	r5, r3, #29
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<9);}
    1aec:	4b13      	ldr	r3, [pc, #76]	; (1b3c <UARTOVF_Handler+0x204>)
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<8);}
    1aee:	bf48      	it	mi
    1af0:	f501 7180 	addmi.w	r1, r1, #256	; 0x100
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<9);}
    1af4:	68db      	ldr	r3, [r3, #12]
    1af6:	071c      	lsls	r4, r3, #28
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<10);}
    1af8:	4b11      	ldr	r3, [pc, #68]	; (1b40 <UARTOVF_Handler+0x208>)
  if ((CM3DS_MPS2_UART1->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<9);}
    1afa:	bf48      	it	mi
    1afc:	f501 7100 	addmi.w	r1, r1, #512	; 0x200
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<10);}
    1b00:	68da      	ldr	r2, [r3, #12]
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<11);}
    1b02:	68db      	ldr	r3, [r3, #12]
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<10);}
    1b04:	0750      	lsls	r0, r2, #29
    1b06:	d50b      	bpl.n	1b20 <UARTOVF_Handler+0x1e8>
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<11);}
    1b08:	071a      	lsls	r2, r3, #28
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_TXOVR)!=0)  {err_code += (1<<10);}
    1b0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<11);}
    1b0e:	d501      	bpl.n	1b14 <UARTOVF_Handler+0x1dc>
    1b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
  if (err_code != 0) {
    printf ("ERROR : UART overrun handler failed (0x%x)\n", err_code);
    1b14:	480b      	ldr	r0, [pc, #44]	; (1b44 <UARTOVF_Handler+0x20c>)
    1b16:	f000 f963 	bl	1de0 <iprintf>
    UartEndSimulation();
    1b1a:	f000 f92d 	bl	1d78 <UartEndSimulation>
    1b1e:	e7fe      	b.n	1b1e <UARTOVF_Handler+0x1e6>
  if ((CM3DS_MPS2_UART4->INTSTATUS & UART_INTSTATE_RXOVR)!=0)  {err_code += (1<<11);}
    1b20:	071b      	lsls	r3, r3, #28
    1b22:	d4f5      	bmi.n	1b10 <UARTOVF_Handler+0x1d8>
  if (err_code != 0) {
    1b24:	2900      	cmp	r1, #0
    1b26:	d1f5      	bne.n	1b14 <UARTOVF_Handler+0x1dc>
    while(1);
    }  return;
}
    1b28:	bd70      	pop	{r4, r5, r6, pc}
    1b2a:	bf00      	nop
    1b2c:	2000009c 	.word	0x2000009c
    1b30:	4002c000 	.word	0x4002c000
    1b34:	2000008c 	.word	0x2000008c
    1b38:	4002d000 	.word	0x4002d000
    1b3c:	40005000 	.word	0x40005000
    1b40:	4002e000 	.word	0x4002e000
    1b44:	000033bc 	.word	0x000033bc

00001b48 <main>:
{
    1b48:	b538      	push	{r3, r4, r5, lr}
  UartStdOutInit();
    1b4a:	f000 f8fd 	bl	1d48 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - UART Test - revision $Revision: 243483 $\n");
    1b4e:	4855      	ldr	r0, [pc, #340]	; (1ca4 <main+0x15c>)
    1b50:	f000 f9ba 	bl	1ec8 <puts>
if ((HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE0) != 0x21) ||
    1b54:	4b54      	ldr	r3, [pc, #336]	; (1ca8 <main+0x160>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	2b21      	cmp	r3, #33	; 0x21
    1b5a:	d006      	beq.n	1b6a <main+0x22>
    puts("** TEST SKIPPED ** UART 1 / UART 2 / UART 3 / UART 4 / GPIO 0 / GPIO 1 not available");
    1b5c:	4853      	ldr	r0, [pc, #332]	; (1cac <main+0x164>)
    1b5e:	f000 f9b3 	bl	1ec8 <puts>
    UartEndSimulation();
    1b62:	f000 f909 	bl	1d78 <UartEndSimulation>
}
    1b66:	2000      	movs	r0, #0
    1b68:	bd38      	pop	{r3, r4, r5, pc}
    (HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE4) != 0xB8))
    1b6a:	4b51      	ldr	r3, [pc, #324]	; (1cb0 <main+0x168>)
    1b6c:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART1_BASE + 0xFE0) != 0x21) ||
    1b6e:	2bb8      	cmp	r3, #184	; 0xb8
    1b70:	d1f4      	bne.n	1b5c <main+0x14>
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
    1b72:	4b50      	ldr	r3, [pc, #320]	; (1cb4 <main+0x16c>)
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	2b21      	cmp	r3, #33	; 0x21
    1b78:	d1f0      	bne.n	1b5c <main+0x14>
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
    1b7a:	4b4f      	ldr	r3, [pc, #316]	; (1cb8 <main+0x170>)
    1b7c:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
    1b7e:	2bb8      	cmp	r3, #184	; 0xb8
    1b80:	d1ec      	bne.n	1b5c <main+0x14>
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
    1b82:	4b4e      	ldr	r3, [pc, #312]	; (1cbc <main+0x174>)
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	2b21      	cmp	r3, #33	; 0x21
    1b88:	d1e8      	bne.n	1b5c <main+0x14>
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
    1b8a:	4b4d      	ldr	r3, [pc, #308]	; (1cc0 <main+0x178>)
    1b8c:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
    1b8e:	2bb8      	cmp	r3, #184	; 0xb8
    1b90:	d1e4      	bne.n	1b5c <main+0x14>
if ((HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE0) != 0x21) ||
    1b92:	4b4c      	ldr	r3, [pc, #304]	; (1cc4 <main+0x17c>)
    1b94:	681b      	ldr	r3, [r3, #0]
    1b96:	2b21      	cmp	r3, #33	; 0x21
    1b98:	d1e0      	bne.n	1b5c <main+0x14>
    (HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE4) != 0xB8))
    1b9a:	4b4b      	ldr	r3, [pc, #300]	; (1cc8 <main+0x180>)
    1b9c:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART4_BASE + 0xFE0) != 0x21) ||
    1b9e:	2bb8      	cmp	r3, #184	; 0xb8
    1ba0:	d1dc      	bne.n	1b5c <main+0x14>
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    1ba2:	4b4a      	ldr	r3, [pc, #296]	; (1ccc <main+0x184>)
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	2b20      	cmp	r3, #32
    1ba8:	d1d8      	bne.n	1b5c <main+0x14>
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
    1baa:	4b49      	ldr	r3, [pc, #292]	; (1cd0 <main+0x188>)
    1bac:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
    1bae:	2bb8      	cmp	r3, #184	; 0xb8
    1bb0:	d1d4      	bne.n	1b5c <main+0x14>
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    1bb2:	4b48      	ldr	r3, [pc, #288]	; (1cd4 <main+0x18c>)
    1bb4:	681d      	ldr	r5, [r3, #0]
    1bb6:	2d20      	cmp	r5, #32
    1bb8:	d1d0      	bne.n	1b5c <main+0x14>
    (HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE4) != 0xB8))
    1bba:	3304      	adds	r3, #4
    1bbc:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO1_BASE + 0xFE0) != 0x20) ||
    1bbe:	2bb8      	cmp	r3, #184	; 0xb8
    1bc0:	d1cc      	bne.n	1b5c <main+0x14>
  uart0_irq_occurred = 0;
    1bc2:	2300      	movs	r3, #0
  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<7) | (1<<8) | (1<<10) | (1<<14);
    1bc4:	f44f 428b 	mov.w	r2, #17792	; 0x4580
  CM3DS_MPS2_GPIO0->ALTFUNCSET = (1<<0) | (1<<4);
    1bc8:	2011      	movs	r0, #17
  uart0_irq_occurred = 0;
    1bca:	4943      	ldr	r1, [pc, #268]	; (1cd8 <main+0x190>)
  uart1_irq_occurred = 0;
    1bcc:	4c43      	ldr	r4, [pc, #268]	; (1cdc <main+0x194>)
  uart0_irq_occurred = 0;
    1bce:	600b      	str	r3, [r1, #0]
  uart1_irq_occurred = 0;
    1bd0:	6023      	str	r3, [r4, #0]
  uart2_irq_occurred = 0;
    1bd2:	4943      	ldr	r1, [pc, #268]	; (1ce0 <main+0x198>)
  uart3_irq_occurred = 0;
    1bd4:	4c43      	ldr	r4, [pc, #268]	; (1ce4 <main+0x19c>)
  uart2_irq_occurred = 0;
    1bd6:	600b      	str	r3, [r1, #0]
  uart3_irq_occurred = 0;
    1bd8:	6023      	str	r3, [r4, #0]
  uart4_irq_occurred = 0;
    1bda:	4943      	ldr	r1, [pc, #268]	; (1ce8 <main+0x1a0>)
  uart0_irq_expected = 0;
    1bdc:	4c43      	ldr	r4, [pc, #268]	; (1cec <main+0x1a4>)
  uart4_irq_occurred = 0;
    1bde:	600b      	str	r3, [r1, #0]
  uart0_irq_expected = 0;
    1be0:	6023      	str	r3, [r4, #0]
  uart1_irq_expected = 0;
    1be2:	4943      	ldr	r1, [pc, #268]	; (1cf0 <main+0x1a8>)
  uart2_irq_expected = 0;
    1be4:	4c43      	ldr	r4, [pc, #268]	; (1cf4 <main+0x1ac>)
  uart1_irq_expected = 0;
    1be6:	600b      	str	r3, [r1, #0]
  uart2_irq_expected = 0;
    1be8:	6023      	str	r3, [r4, #0]
  uart3_irq_expected = 0;
    1bea:	4943      	ldr	r1, [pc, #268]	; (1cf8 <main+0x1b0>)
  uart4_irq_expected = 0;
    1bec:	4c43      	ldr	r4, [pc, #268]	; (1cfc <main+0x1b4>)
  uart3_irq_expected = 0;
    1bee:	600b      	str	r3, [r1, #0]
  uart4_irq_expected = 0;
    1bf0:	6023      	str	r3, [r4, #0]
  uart_ovfirq_occurred = 0;
    1bf2:	4943      	ldr	r1, [pc, #268]	; (1d00 <main+0x1b8>)
  uart_ovfirq_expected = 0;
    1bf4:	4c43      	ldr	r4, [pc, #268]	; (1d04 <main+0x1bc>)
  uart_ovfirq_occurred = 0;
    1bf6:	600b      	str	r3, [r1, #0]
  CM3DS_MPS2_GPIO0->ALTFUNCSET = (1<<0) | (1<<4);
    1bf8:	4943      	ldr	r1, [pc, #268]	; (1d08 <main+0x1c0>)
  uart_ovfirq_expected = 0;
    1bfa:	6023      	str	r3, [r4, #0]
  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<7) | (1<<8) | (1<<10) | (1<<14);
    1bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1c00:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
  CM3DS_MPS2_GPIO0->ALTFUNCSET = (1<<0) | (1<<4);
    1c04:	6188      	str	r0, [r1, #24]
  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<7) | (1<<8) | (1<<10) | (1<<14);
    1c06:	619a      	str	r2, [r3, #24]
  result += uart_initial_value_check(CM3DS_MPS2_UART2);
    1c08:	4840      	ldr	r0, [pc, #256]	; (1d0c <main+0x1c4>)
    1c0a:	f7fe fb8d 	bl	328 <uart_initial_value_check>
    1c0e:	4604      	mov	r4, r0
  result += uart_initial_value_check(CM3DS_MPS2_UART3);
    1c10:	483f      	ldr	r0, [pc, #252]	; (1d10 <main+0x1c8>)
    1c12:	f7fe fb89 	bl	328 <uart_initial_value_check>
    1c16:	4404      	add	r4, r0
  puts("\nUART 2 for transmit, UART 3 for receive\n");
    1c18:	483e      	ldr	r0, [pc, #248]	; (1d14 <main+0x1cc>)
    1c1a:	f000 f955 	bl	1ec8 <puts>
  result += simple_uart_test(CM3DS_MPS2_UART2, 32, DISPLAY);
    1c1e:	4629      	mov	r1, r5
    1c20:	2201      	movs	r2, #1
    1c22:	483a      	ldr	r0, [pc, #232]	; (1d0c <main+0x1c4>)
    1c24:	f7fe fcd8 	bl	5d8 <simple_uart_test>
    1c28:	4404      	add	r4, r0
  result += simple_uart_baud_test();
    1c2a:	f7fe fd85 	bl	738 <simple_uart_baud_test>
    1c2e:	4404      	add	r4, r0
  result += uart_enable_ctrl_test(CM3DS_MPS2_UART2);
    1c30:	4836      	ldr	r0, [pc, #216]	; (1d0c <main+0x1c4>)
    1c32:	f7fe ff59 	bl	ae8 <uart_enable_ctrl_test>
    1c36:	4404      	add	r4, r0
  result += uart_tx_rx_irq_test(CM3DS_MPS2_UART2);
    1c38:	4834      	ldr	r0, [pc, #208]	; (1d0c <main+0x1c4>)
    1c3a:	f7ff f839 	bl	cb0 <uart_tx_rx_irq_test>
    1c3e:	4404      	add	r4, r0
  result += uart_tx_rx_overflow_test(CM3DS_MPS2_UART2);
    1c40:	4832      	ldr	r0, [pc, #200]	; (1d0c <main+0x1c4>)
    1c42:	f7ff fa5b 	bl	10fc <uart_tx_rx_overflow_test>
    1c46:	4404      	add	r4, r0
  puts("\nUART 3 for transmit, UART 2 for receive\n");
    1c48:	4833      	ldr	r0, [pc, #204]	; (1d18 <main+0x1d0>)
    1c4a:	f000 f93d 	bl	1ec8 <puts>
  result += simple_uart_test(CM3DS_MPS2_UART3, 16, DISPLAY);
    1c4e:	2110      	movs	r1, #16
    1c50:	2201      	movs	r2, #1
    1c52:	482f      	ldr	r0, [pc, #188]	; (1d10 <main+0x1c8>)
    1c54:	f7fe fcc0 	bl	5d8 <simple_uart_test>
    1c58:	4404      	add	r4, r0
  result += uart_enable_ctrl_test(CM3DS_MPS2_UART3);
    1c5a:	482d      	ldr	r0, [pc, #180]	; (1d10 <main+0x1c8>)
    1c5c:	f7fe ff44 	bl	ae8 <uart_enable_ctrl_test>
    1c60:	4404      	add	r4, r0
  result += uart_tx_rx_irq_test(CM3DS_MPS2_UART3);
    1c62:	482b      	ldr	r0, [pc, #172]	; (1d10 <main+0x1c8>)
    1c64:	f7ff f824 	bl	cb0 <uart_tx_rx_irq_test>
    1c68:	4404      	add	r4, r0
  result += uart_tx_rx_overflow_test(CM3DS_MPS2_UART3);
    1c6a:	4829      	ldr	r0, [pc, #164]	; (1d10 <main+0x1c8>)
    1c6c:	f7ff fa46 	bl	10fc <uart_tx_rx_overflow_test>
    1c70:	4404      	add	r4, r0
  result += uart_interrupt_test(CM3DS_MPS2_UART0);
    1c72:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    1c76:	f7ff fb83 	bl	1380 <uart_interrupt_test>
    1c7a:	4404      	add	r4, r0
  result += uart_interrupt_test(CM3DS_MPS2_UART1);
    1c7c:	4827      	ldr	r0, [pc, #156]	; (1d1c <main+0x1d4>)
    1c7e:	f7ff fb7f 	bl	1380 <uart_interrupt_test>
    1c82:	4404      	add	r4, r0
  result += uart_interrupt_test(CM3DS_MPS2_UART4);
    1c84:	4826      	ldr	r0, [pc, #152]	; (1d20 <main+0x1d8>)
    1c86:	f7ff fb7b 	bl	1380 <uart_interrupt_test>
  if (result==0) {
    1c8a:	1821      	adds	r1, r4, r0
    1c8c:	d105      	bne.n	1c9a <main+0x152>
    printf ("\n** TEST PASSED **\n");
    1c8e:	4825      	ldr	r0, [pc, #148]	; (1d24 <main+0x1dc>)
    1c90:	f000 f91a 	bl	1ec8 <puts>
  UartEndSimulation();
    1c94:	f000 f870 	bl	1d78 <UartEndSimulation>
  return 0;
    1c98:	e765      	b.n	1b66 <main+0x1e>
    printf ("\n** TEST FAILED ** , Error code = (0x%x)\n", result);
    1c9a:	4823      	ldr	r0, [pc, #140]	; (1d28 <main+0x1e0>)
    1c9c:	f000 f8a0 	bl	1de0 <iprintf>
    1ca0:	e7f8      	b.n	1c94 <main+0x14c>
    1ca2:	bf00      	nop
    1ca4:	000031c0 	.word	0x000031c0
    1ca8:	40005fe0 	.word	0x40005fe0
    1cac:	0000325c 	.word	0x0000325c
    1cb0:	40005fe4 	.word	0x40005fe4
    1cb4:	4002cfe0 	.word	0x4002cfe0
    1cb8:	4002cfe4 	.word	0x4002cfe4
    1cbc:	4002dfe0 	.word	0x4002dfe0
    1cc0:	4002dfe4 	.word	0x4002dfe4
    1cc4:	4002efe0 	.word	0x4002efe0
    1cc8:	4002efe4 	.word	0x4002efe4
    1ccc:	40010fe0 	.word	0x40010fe0
    1cd0:	40010fe4 	.word	0x40010fe4
    1cd4:	40011fe0 	.word	0x40011fe0
    1cd8:	20000084 	.word	0x20000084
    1cdc:	20000088 	.word	0x20000088
    1ce0:	20000074 	.word	0x20000074
    1ce4:	20000098 	.word	0x20000098
    1ce8:	20000080 	.word	0x20000080
    1cec:	200000a0 	.word	0x200000a0
    1cf0:	20000078 	.word	0x20000078
    1cf4:	20000094 	.word	0x20000094
    1cf8:	2000007c 	.word	0x2000007c
    1cfc:	20000090 	.word	0x20000090
    1d00:	2000008c 	.word	0x2000008c
    1d04:	2000009c 	.word	0x2000009c
    1d08:	40010000 	.word	0x40010000
    1d0c:	4002c000 	.word	0x4002c000
    1d10:	4002d000 	.word	0x4002d000
    1d14:	00003204 	.word	0x00003204
    1d18:	00003230 	.word	0x00003230
    1d1c:	40005000 	.word	0x40005000
    1d20:	4002e000 	.word	0x4002e000
    1d24:	000032b4 	.word	0x000032b4
    1d28:	000032c8 	.word	0x000032c8

00001d2c <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
    1d2c:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
    1d2e:	4616      	mov	r6, r2
    1d30:	b13a      	cbz	r2, 1d42 <_write+0x16>
    1d32:	1e4c      	subs	r4, r1, #1
    1d34:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
    1d36:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    1d3a:	f000 f80d 	bl	1d58 <UartPutc>
  for (i=0; i<len;i++) {
    1d3e:	42ac      	cmp	r4, r5
    1d40:	d1f9      	bne.n	1d36 <_write+0xa>
    }
  return len;
}
    1d42:	4630      	mov	r0, r6
    1d44:	bd70      	pop	{r4, r5, r6, pc}
    1d46:	bf00      	nop

00001d48 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
    1d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1d4c:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
    1d4e:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
    1d50:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
    1d52:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
    1d54:	4770      	bx	lr
    1d56:	bf00      	nop

00001d58 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
    1d58:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    1d5c:	6853      	ldr	r3, [r2, #4]
    1d5e:	07db      	lsls	r3, r3, #31
    1d60:	d4fc      	bmi.n	1d5c <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
    1d62:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
    1d64:	4770      	bx	lr
    1d66:	bf00      	nop

00001d68 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
    1d68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    1d6c:	6853      	ldr	r3, [r2, #4]
    1d6e:	079b      	lsls	r3, r3, #30
    1d70:	d5fc      	bpl.n	1d6c <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
    1d72:	6810      	ldr	r0, [r2, #0]
}
    1d74:	b2c0      	uxtb	r0, r0
    1d76:	4770      	bx	lr

00001d78 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
    1d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1d7c:	685a      	ldr	r2, [r3, #4]
    1d7e:	07d2      	lsls	r2, r2, #31
    1d80:	d4fc      	bmi.n	1d7c <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
    1d82:	2204      	movs	r2, #4
    1d84:	601a      	str	r2, [r3, #0]
    1d86:	e7fe      	b.n	1d86 <UartEndSimulation+0xe>

00001d88 <SystemCoreClockUpdate>:
    1d88:	4b01      	ldr	r3, [pc, #4]	; (1d90 <SystemCoreClockUpdate+0x8>)
    1d8a:	4a02      	ldr	r2, [pc, #8]	; (1d94 <SystemCoreClockUpdate+0xc>)
    1d8c:	601a      	str	r2, [r3, #0]
    1d8e:	4770      	bx	lr
    1d90:	20000000 	.word	0x20000000
    1d94:	017d7840 	.word	0x017d7840

00001d98 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    1d98:	4b01      	ldr	r3, [pc, #4]	; (1da0 <SystemInit+0x8>)
    1d9a:	4a02      	ldr	r2, [pc, #8]	; (1da4 <SystemInit+0xc>)
    1d9c:	601a      	str	r2, [r3, #0]

}
    1d9e:	4770      	bx	lr
    1da0:	20000000 	.word	0x20000000
    1da4:	017d7840 	.word	0x017d7840

00001da8 <exit>:
    1da8:	b508      	push	{r3, lr}
    1daa:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <exit+0x20>)
    1dac:	4604      	mov	r4, r0
    1dae:	b113      	cbz	r3, 1db6 <exit+0xe>
    1db0:	2100      	movs	r1, #0
    1db2:	f3af 8000 	nop.w
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <exit+0x24>)
    1db8:	6818      	ldr	r0, [r3, #0]
    1dba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1dbc:	b103      	cbz	r3, 1dc0 <exit+0x18>
    1dbe:	4798      	blx	r3
    1dc0:	4620      	mov	r0, r4
    1dc2:	f000 ffa5 	bl	2d10 <_exit>
    1dc6:	bf00      	nop
    1dc8:	00000000 	.word	0x00000000
    1dcc:	000033e8 	.word	0x000033e8

00001dd0 <memset>:
    1dd0:	4603      	mov	r3, r0
    1dd2:	4402      	add	r2, r0
    1dd4:	4293      	cmp	r3, r2
    1dd6:	d100      	bne.n	1dda <memset+0xa>
    1dd8:	4770      	bx	lr
    1dda:	f803 1b01 	strb.w	r1, [r3], #1
    1dde:	e7f9      	b.n	1dd4 <memset+0x4>

00001de0 <iprintf>:
    1de0:	b40f      	push	{r0, r1, r2, r3}
    1de2:	4b0a      	ldr	r3, [pc, #40]	; (1e0c <iprintf+0x2c>)
    1de4:	b513      	push	{r0, r1, r4, lr}
    1de6:	681c      	ldr	r4, [r3, #0]
    1de8:	b124      	cbz	r4, 1df4 <iprintf+0x14>
    1dea:	69a3      	ldr	r3, [r4, #24]
    1dec:	b913      	cbnz	r3, 1df4 <iprintf+0x14>
    1dee:	4620      	mov	r0, r4
    1df0:	f000 fa34 	bl	225c <__sinit>
    1df4:	ab05      	add	r3, sp, #20
    1df6:	9a04      	ldr	r2, [sp, #16]
    1df8:	68a1      	ldr	r1, [r4, #8]
    1dfa:	4620      	mov	r0, r4
    1dfc:	9301      	str	r3, [sp, #4]
    1dfe:	f000 fbe9 	bl	25d4 <_vfiprintf_r>
    1e02:	b002      	add	sp, #8
    1e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e08:	b004      	add	sp, #16
    1e0a:	4770      	bx	lr
    1e0c:	20000004 	.word	0x20000004

00001e10 <_puts_r>:
    1e10:	b570      	push	{r4, r5, r6, lr}
    1e12:	460e      	mov	r6, r1
    1e14:	4605      	mov	r5, r0
    1e16:	b118      	cbz	r0, 1e20 <_puts_r+0x10>
    1e18:	6983      	ldr	r3, [r0, #24]
    1e1a:	b90b      	cbnz	r3, 1e20 <_puts_r+0x10>
    1e1c:	f000 fa1e 	bl	225c <__sinit>
    1e20:	69ab      	ldr	r3, [r5, #24]
    1e22:	68ac      	ldr	r4, [r5, #8]
    1e24:	b913      	cbnz	r3, 1e2c <_puts_r+0x1c>
    1e26:	4628      	mov	r0, r5
    1e28:	f000 fa18 	bl	225c <__sinit>
    1e2c:	4b23      	ldr	r3, [pc, #140]	; (1ebc <_puts_r+0xac>)
    1e2e:	429c      	cmp	r4, r3
    1e30:	d117      	bne.n	1e62 <_puts_r+0x52>
    1e32:	686c      	ldr	r4, [r5, #4]
    1e34:	89a3      	ldrh	r3, [r4, #12]
    1e36:	071b      	lsls	r3, r3, #28
    1e38:	d51d      	bpl.n	1e76 <_puts_r+0x66>
    1e3a:	6923      	ldr	r3, [r4, #16]
    1e3c:	b1db      	cbz	r3, 1e76 <_puts_r+0x66>
    1e3e:	3e01      	subs	r6, #1
    1e40:	68a3      	ldr	r3, [r4, #8]
    1e42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1e46:	3b01      	subs	r3, #1
    1e48:	60a3      	str	r3, [r4, #8]
    1e4a:	b9e9      	cbnz	r1, 1e88 <_puts_r+0x78>
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	da2e      	bge.n	1eae <_puts_r+0x9e>
    1e50:	4622      	mov	r2, r4
    1e52:	210a      	movs	r1, #10
    1e54:	4628      	mov	r0, r5
    1e56:	f000 f851 	bl	1efc <__swbuf_r>
    1e5a:	3001      	adds	r0, #1
    1e5c:	d011      	beq.n	1e82 <_puts_r+0x72>
    1e5e:	200a      	movs	r0, #10
    1e60:	e011      	b.n	1e86 <_puts_r+0x76>
    1e62:	4b17      	ldr	r3, [pc, #92]	; (1ec0 <_puts_r+0xb0>)
    1e64:	429c      	cmp	r4, r3
    1e66:	d101      	bne.n	1e6c <_puts_r+0x5c>
    1e68:	68ac      	ldr	r4, [r5, #8]
    1e6a:	e7e3      	b.n	1e34 <_puts_r+0x24>
    1e6c:	4b15      	ldr	r3, [pc, #84]	; (1ec4 <_puts_r+0xb4>)
    1e6e:	429c      	cmp	r4, r3
    1e70:	bf08      	it	eq
    1e72:	68ec      	ldreq	r4, [r5, #12]
    1e74:	e7de      	b.n	1e34 <_puts_r+0x24>
    1e76:	4621      	mov	r1, r4
    1e78:	4628      	mov	r0, r5
    1e7a:	f000 f891 	bl	1fa0 <__swsetup_r>
    1e7e:	2800      	cmp	r0, #0
    1e80:	d0dd      	beq.n	1e3e <_puts_r+0x2e>
    1e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e86:	bd70      	pop	{r4, r5, r6, pc}
    1e88:	2b00      	cmp	r3, #0
    1e8a:	da04      	bge.n	1e96 <_puts_r+0x86>
    1e8c:	69a2      	ldr	r2, [r4, #24]
    1e8e:	429a      	cmp	r2, r3
    1e90:	dc06      	bgt.n	1ea0 <_puts_r+0x90>
    1e92:	290a      	cmp	r1, #10
    1e94:	d004      	beq.n	1ea0 <_puts_r+0x90>
    1e96:	6823      	ldr	r3, [r4, #0]
    1e98:	1c5a      	adds	r2, r3, #1
    1e9a:	6022      	str	r2, [r4, #0]
    1e9c:	7019      	strb	r1, [r3, #0]
    1e9e:	e7cf      	b.n	1e40 <_puts_r+0x30>
    1ea0:	4622      	mov	r2, r4
    1ea2:	4628      	mov	r0, r5
    1ea4:	f000 f82a 	bl	1efc <__swbuf_r>
    1ea8:	3001      	adds	r0, #1
    1eaa:	d1c9      	bne.n	1e40 <_puts_r+0x30>
    1eac:	e7e9      	b.n	1e82 <_puts_r+0x72>
    1eae:	200a      	movs	r0, #10
    1eb0:	6823      	ldr	r3, [r4, #0]
    1eb2:	1c5a      	adds	r2, r3, #1
    1eb4:	6022      	str	r2, [r4, #0]
    1eb6:	7018      	strb	r0, [r3, #0]
    1eb8:	e7e5      	b.n	1e86 <_puts_r+0x76>
    1eba:	bf00      	nop
    1ebc:	0000340c 	.word	0x0000340c
    1ec0:	0000342c 	.word	0x0000342c
    1ec4:	000033ec 	.word	0x000033ec

00001ec8 <puts>:
    1ec8:	4b02      	ldr	r3, [pc, #8]	; (1ed4 <puts+0xc>)
    1eca:	4601      	mov	r1, r0
    1ecc:	6818      	ldr	r0, [r3, #0]
    1ece:	f7ff bf9f 	b.w	1e10 <_puts_r>
    1ed2:	bf00      	nop
    1ed4:	20000004 	.word	0x20000004

00001ed8 <strcmp>:
    1ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
    1edc:	f811 3b01 	ldrb.w	r3, [r1], #1
    1ee0:	2a01      	cmp	r2, #1
    1ee2:	bf28      	it	cs
    1ee4:	429a      	cmpcs	r2, r3
    1ee6:	d0f7      	beq.n	1ed8 <strcmp>
    1ee8:	1ad0      	subs	r0, r2, r3
    1eea:	4770      	bx	lr

00001eec <strlen>:
    1eec:	4603      	mov	r3, r0
    1eee:	f813 2b01 	ldrb.w	r2, [r3], #1
    1ef2:	2a00      	cmp	r2, #0
    1ef4:	d1fb      	bne.n	1eee <strlen+0x2>
    1ef6:	1a18      	subs	r0, r3, r0
    1ef8:	3801      	subs	r0, #1
    1efa:	4770      	bx	lr

00001efc <__swbuf_r>:
    1efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1efe:	460e      	mov	r6, r1
    1f00:	4614      	mov	r4, r2
    1f02:	4605      	mov	r5, r0
    1f04:	b118      	cbz	r0, 1f0e <__swbuf_r+0x12>
    1f06:	6983      	ldr	r3, [r0, #24]
    1f08:	b90b      	cbnz	r3, 1f0e <__swbuf_r+0x12>
    1f0a:	f000 f9a7 	bl	225c <__sinit>
    1f0e:	4b21      	ldr	r3, [pc, #132]	; (1f94 <__swbuf_r+0x98>)
    1f10:	429c      	cmp	r4, r3
    1f12:	d12a      	bne.n	1f6a <__swbuf_r+0x6e>
    1f14:	686c      	ldr	r4, [r5, #4]
    1f16:	69a3      	ldr	r3, [r4, #24]
    1f18:	60a3      	str	r3, [r4, #8]
    1f1a:	89a3      	ldrh	r3, [r4, #12]
    1f1c:	071a      	lsls	r2, r3, #28
    1f1e:	d52e      	bpl.n	1f7e <__swbuf_r+0x82>
    1f20:	6923      	ldr	r3, [r4, #16]
    1f22:	b363      	cbz	r3, 1f7e <__swbuf_r+0x82>
    1f24:	6923      	ldr	r3, [r4, #16]
    1f26:	6820      	ldr	r0, [r4, #0]
    1f28:	b2f6      	uxtb	r6, r6
    1f2a:	1ac0      	subs	r0, r0, r3
    1f2c:	6963      	ldr	r3, [r4, #20]
    1f2e:	4637      	mov	r7, r6
    1f30:	4283      	cmp	r3, r0
    1f32:	dc04      	bgt.n	1f3e <__swbuf_r+0x42>
    1f34:	4621      	mov	r1, r4
    1f36:	4628      	mov	r0, r5
    1f38:	f000 f926 	bl	2188 <_fflush_r>
    1f3c:	bb28      	cbnz	r0, 1f8a <__swbuf_r+0x8e>
    1f3e:	68a3      	ldr	r3, [r4, #8]
    1f40:	3001      	adds	r0, #1
    1f42:	3b01      	subs	r3, #1
    1f44:	60a3      	str	r3, [r4, #8]
    1f46:	6823      	ldr	r3, [r4, #0]
    1f48:	1c5a      	adds	r2, r3, #1
    1f4a:	6022      	str	r2, [r4, #0]
    1f4c:	701e      	strb	r6, [r3, #0]
    1f4e:	6963      	ldr	r3, [r4, #20]
    1f50:	4283      	cmp	r3, r0
    1f52:	d004      	beq.n	1f5e <__swbuf_r+0x62>
    1f54:	89a3      	ldrh	r3, [r4, #12]
    1f56:	07db      	lsls	r3, r3, #31
    1f58:	d519      	bpl.n	1f8e <__swbuf_r+0x92>
    1f5a:	2e0a      	cmp	r6, #10
    1f5c:	d117      	bne.n	1f8e <__swbuf_r+0x92>
    1f5e:	4621      	mov	r1, r4
    1f60:	4628      	mov	r0, r5
    1f62:	f000 f911 	bl	2188 <_fflush_r>
    1f66:	b190      	cbz	r0, 1f8e <__swbuf_r+0x92>
    1f68:	e00f      	b.n	1f8a <__swbuf_r+0x8e>
    1f6a:	4b0b      	ldr	r3, [pc, #44]	; (1f98 <__swbuf_r+0x9c>)
    1f6c:	429c      	cmp	r4, r3
    1f6e:	d101      	bne.n	1f74 <__swbuf_r+0x78>
    1f70:	68ac      	ldr	r4, [r5, #8]
    1f72:	e7d0      	b.n	1f16 <__swbuf_r+0x1a>
    1f74:	4b09      	ldr	r3, [pc, #36]	; (1f9c <__swbuf_r+0xa0>)
    1f76:	429c      	cmp	r4, r3
    1f78:	bf08      	it	eq
    1f7a:	68ec      	ldreq	r4, [r5, #12]
    1f7c:	e7cb      	b.n	1f16 <__swbuf_r+0x1a>
    1f7e:	4621      	mov	r1, r4
    1f80:	4628      	mov	r0, r5
    1f82:	f000 f80d 	bl	1fa0 <__swsetup_r>
    1f86:	2800      	cmp	r0, #0
    1f88:	d0cc      	beq.n	1f24 <__swbuf_r+0x28>
    1f8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1f8e:	4638      	mov	r0, r7
    1f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f92:	bf00      	nop
    1f94:	0000340c 	.word	0x0000340c
    1f98:	0000342c 	.word	0x0000342c
    1f9c:	000033ec 	.word	0x000033ec

00001fa0 <__swsetup_r>:
    1fa0:	4b32      	ldr	r3, [pc, #200]	; (206c <__swsetup_r+0xcc>)
    1fa2:	b570      	push	{r4, r5, r6, lr}
    1fa4:	681d      	ldr	r5, [r3, #0]
    1fa6:	4606      	mov	r6, r0
    1fa8:	460c      	mov	r4, r1
    1faa:	b125      	cbz	r5, 1fb6 <__swsetup_r+0x16>
    1fac:	69ab      	ldr	r3, [r5, #24]
    1fae:	b913      	cbnz	r3, 1fb6 <__swsetup_r+0x16>
    1fb0:	4628      	mov	r0, r5
    1fb2:	f000 f953 	bl	225c <__sinit>
    1fb6:	4b2e      	ldr	r3, [pc, #184]	; (2070 <__swsetup_r+0xd0>)
    1fb8:	429c      	cmp	r4, r3
    1fba:	d10f      	bne.n	1fdc <__swsetup_r+0x3c>
    1fbc:	686c      	ldr	r4, [r5, #4]
    1fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1fc2:	b29a      	uxth	r2, r3
    1fc4:	0715      	lsls	r5, r2, #28
    1fc6:	d42c      	bmi.n	2022 <__swsetup_r+0x82>
    1fc8:	06d0      	lsls	r0, r2, #27
    1fca:	d411      	bmi.n	1ff0 <__swsetup_r+0x50>
    1fcc:	2209      	movs	r2, #9
    1fce:	6032      	str	r2, [r6, #0]
    1fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fd4:	81a3      	strh	r3, [r4, #12]
    1fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1fda:	e03e      	b.n	205a <__swsetup_r+0xba>
    1fdc:	4b25      	ldr	r3, [pc, #148]	; (2074 <__swsetup_r+0xd4>)
    1fde:	429c      	cmp	r4, r3
    1fe0:	d101      	bne.n	1fe6 <__swsetup_r+0x46>
    1fe2:	68ac      	ldr	r4, [r5, #8]
    1fe4:	e7eb      	b.n	1fbe <__swsetup_r+0x1e>
    1fe6:	4b24      	ldr	r3, [pc, #144]	; (2078 <__swsetup_r+0xd8>)
    1fe8:	429c      	cmp	r4, r3
    1fea:	bf08      	it	eq
    1fec:	68ec      	ldreq	r4, [r5, #12]
    1fee:	e7e6      	b.n	1fbe <__swsetup_r+0x1e>
    1ff0:	0751      	lsls	r1, r2, #29
    1ff2:	d512      	bpl.n	201a <__swsetup_r+0x7a>
    1ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ff6:	b141      	cbz	r1, 200a <__swsetup_r+0x6a>
    1ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1ffc:	4299      	cmp	r1, r3
    1ffe:	d002      	beq.n	2006 <__swsetup_r+0x66>
    2000:	4630      	mov	r0, r6
    2002:	f000 fa19 	bl	2438 <_free_r>
    2006:	2300      	movs	r3, #0
    2008:	6363      	str	r3, [r4, #52]	; 0x34
    200a:	89a3      	ldrh	r3, [r4, #12]
    200c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    2010:	81a3      	strh	r3, [r4, #12]
    2012:	2300      	movs	r3, #0
    2014:	6063      	str	r3, [r4, #4]
    2016:	6923      	ldr	r3, [r4, #16]
    2018:	6023      	str	r3, [r4, #0]
    201a:	89a3      	ldrh	r3, [r4, #12]
    201c:	f043 0308 	orr.w	r3, r3, #8
    2020:	81a3      	strh	r3, [r4, #12]
    2022:	6923      	ldr	r3, [r4, #16]
    2024:	b94b      	cbnz	r3, 203a <__swsetup_r+0x9a>
    2026:	89a3      	ldrh	r3, [r4, #12]
    2028:	f403 7320 	and.w	r3, r3, #640	; 0x280
    202c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2030:	d003      	beq.n	203a <__swsetup_r+0x9a>
    2032:	4621      	mov	r1, r4
    2034:	4630      	mov	r0, r6
    2036:	f000 f9bf 	bl	23b8 <__smakebuf_r>
    203a:	89a2      	ldrh	r2, [r4, #12]
    203c:	f012 0301 	ands.w	r3, r2, #1
    2040:	d00c      	beq.n	205c <__swsetup_r+0xbc>
    2042:	2300      	movs	r3, #0
    2044:	60a3      	str	r3, [r4, #8]
    2046:	6963      	ldr	r3, [r4, #20]
    2048:	425b      	negs	r3, r3
    204a:	61a3      	str	r3, [r4, #24]
    204c:	6923      	ldr	r3, [r4, #16]
    204e:	b953      	cbnz	r3, 2066 <__swsetup_r+0xc6>
    2050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2054:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    2058:	d1ba      	bne.n	1fd0 <__swsetup_r+0x30>
    205a:	bd70      	pop	{r4, r5, r6, pc}
    205c:	0792      	lsls	r2, r2, #30
    205e:	bf58      	it	pl
    2060:	6963      	ldrpl	r3, [r4, #20]
    2062:	60a3      	str	r3, [r4, #8]
    2064:	e7f2      	b.n	204c <__swsetup_r+0xac>
    2066:	2000      	movs	r0, #0
    2068:	e7f7      	b.n	205a <__swsetup_r+0xba>
    206a:	bf00      	nop
    206c:	20000004 	.word	0x20000004
    2070:	0000340c 	.word	0x0000340c
    2074:	0000342c 	.word	0x0000342c
    2078:	000033ec 	.word	0x000033ec

0000207c <__sflush_r>:
    207c:	898a      	ldrh	r2, [r1, #12]
    207e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2082:	4605      	mov	r5, r0
    2084:	0710      	lsls	r0, r2, #28
    2086:	460c      	mov	r4, r1
    2088:	d458      	bmi.n	213c <__sflush_r+0xc0>
    208a:	684b      	ldr	r3, [r1, #4]
    208c:	2b00      	cmp	r3, #0
    208e:	dc05      	bgt.n	209c <__sflush_r+0x20>
    2090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2092:	2b00      	cmp	r3, #0
    2094:	dc02      	bgt.n	209c <__sflush_r+0x20>
    2096:	2000      	movs	r0, #0
    2098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    209c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    209e:	2e00      	cmp	r6, #0
    20a0:	d0f9      	beq.n	2096 <__sflush_r+0x1a>
    20a2:	2300      	movs	r3, #0
    20a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    20a8:	682f      	ldr	r7, [r5, #0]
    20aa:	6a21      	ldr	r1, [r4, #32]
    20ac:	602b      	str	r3, [r5, #0]
    20ae:	d032      	beq.n	2116 <__sflush_r+0x9a>
    20b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    20b2:	89a3      	ldrh	r3, [r4, #12]
    20b4:	075a      	lsls	r2, r3, #29
    20b6:	d505      	bpl.n	20c4 <__sflush_r+0x48>
    20b8:	6863      	ldr	r3, [r4, #4]
    20ba:	1ac0      	subs	r0, r0, r3
    20bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    20be:	b10b      	cbz	r3, 20c4 <__sflush_r+0x48>
    20c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    20c2:	1ac0      	subs	r0, r0, r3
    20c4:	2300      	movs	r3, #0
    20c6:	4602      	mov	r2, r0
    20c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    20ca:	6a21      	ldr	r1, [r4, #32]
    20cc:	4628      	mov	r0, r5
    20ce:	47b0      	blx	r6
    20d0:	1c43      	adds	r3, r0, #1
    20d2:	89a3      	ldrh	r3, [r4, #12]
    20d4:	d106      	bne.n	20e4 <__sflush_r+0x68>
    20d6:	6829      	ldr	r1, [r5, #0]
    20d8:	291d      	cmp	r1, #29
    20da:	d848      	bhi.n	216e <__sflush_r+0xf2>
    20dc:	4a29      	ldr	r2, [pc, #164]	; (2184 <__sflush_r+0x108>)
    20de:	40ca      	lsrs	r2, r1
    20e0:	07d6      	lsls	r6, r2, #31
    20e2:	d544      	bpl.n	216e <__sflush_r+0xf2>
    20e4:	2200      	movs	r2, #0
    20e6:	6062      	str	r2, [r4, #4]
    20e8:	6922      	ldr	r2, [r4, #16]
    20ea:	04d9      	lsls	r1, r3, #19
    20ec:	6022      	str	r2, [r4, #0]
    20ee:	d504      	bpl.n	20fa <__sflush_r+0x7e>
    20f0:	1c42      	adds	r2, r0, #1
    20f2:	d101      	bne.n	20f8 <__sflush_r+0x7c>
    20f4:	682b      	ldr	r3, [r5, #0]
    20f6:	b903      	cbnz	r3, 20fa <__sflush_r+0x7e>
    20f8:	6560      	str	r0, [r4, #84]	; 0x54
    20fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    20fc:	602f      	str	r7, [r5, #0]
    20fe:	2900      	cmp	r1, #0
    2100:	d0c9      	beq.n	2096 <__sflush_r+0x1a>
    2102:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2106:	4299      	cmp	r1, r3
    2108:	d002      	beq.n	2110 <__sflush_r+0x94>
    210a:	4628      	mov	r0, r5
    210c:	f000 f994 	bl	2438 <_free_r>
    2110:	2000      	movs	r0, #0
    2112:	6360      	str	r0, [r4, #52]	; 0x34
    2114:	e7c0      	b.n	2098 <__sflush_r+0x1c>
    2116:	2301      	movs	r3, #1
    2118:	4628      	mov	r0, r5
    211a:	47b0      	blx	r6
    211c:	1c41      	adds	r1, r0, #1
    211e:	d1c8      	bne.n	20b2 <__sflush_r+0x36>
    2120:	682b      	ldr	r3, [r5, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d0c5      	beq.n	20b2 <__sflush_r+0x36>
    2126:	2b1d      	cmp	r3, #29
    2128:	d001      	beq.n	212e <__sflush_r+0xb2>
    212a:	2b16      	cmp	r3, #22
    212c:	d101      	bne.n	2132 <__sflush_r+0xb6>
    212e:	602f      	str	r7, [r5, #0]
    2130:	e7b1      	b.n	2096 <__sflush_r+0x1a>
    2132:	89a3      	ldrh	r3, [r4, #12]
    2134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2138:	81a3      	strh	r3, [r4, #12]
    213a:	e7ad      	b.n	2098 <__sflush_r+0x1c>
    213c:	690f      	ldr	r7, [r1, #16]
    213e:	2f00      	cmp	r7, #0
    2140:	d0a9      	beq.n	2096 <__sflush_r+0x1a>
    2142:	0793      	lsls	r3, r2, #30
    2144:	bf18      	it	ne
    2146:	2300      	movne	r3, #0
    2148:	680e      	ldr	r6, [r1, #0]
    214a:	bf08      	it	eq
    214c:	694b      	ldreq	r3, [r1, #20]
    214e:	eba6 0807 	sub.w	r8, r6, r7
    2152:	600f      	str	r7, [r1, #0]
    2154:	608b      	str	r3, [r1, #8]
    2156:	f1b8 0f00 	cmp.w	r8, #0
    215a:	dd9c      	ble.n	2096 <__sflush_r+0x1a>
    215c:	4643      	mov	r3, r8
    215e:	463a      	mov	r2, r7
    2160:	6a21      	ldr	r1, [r4, #32]
    2162:	4628      	mov	r0, r5
    2164:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2166:	47b0      	blx	r6
    2168:	2800      	cmp	r0, #0
    216a:	dc06      	bgt.n	217a <__sflush_r+0xfe>
    216c:	89a3      	ldrh	r3, [r4, #12]
    216e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2172:	81a3      	strh	r3, [r4, #12]
    2174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2178:	e78e      	b.n	2098 <__sflush_r+0x1c>
    217a:	4407      	add	r7, r0
    217c:	eba8 0800 	sub.w	r8, r8, r0
    2180:	e7e9      	b.n	2156 <__sflush_r+0xda>
    2182:	bf00      	nop
    2184:	20400001 	.word	0x20400001

00002188 <_fflush_r>:
    2188:	b538      	push	{r3, r4, r5, lr}
    218a:	690b      	ldr	r3, [r1, #16]
    218c:	4605      	mov	r5, r0
    218e:	460c      	mov	r4, r1
    2190:	b1db      	cbz	r3, 21ca <_fflush_r+0x42>
    2192:	b118      	cbz	r0, 219c <_fflush_r+0x14>
    2194:	6983      	ldr	r3, [r0, #24]
    2196:	b90b      	cbnz	r3, 219c <_fflush_r+0x14>
    2198:	f000 f860 	bl	225c <__sinit>
    219c:	4b0c      	ldr	r3, [pc, #48]	; (21d0 <_fflush_r+0x48>)
    219e:	429c      	cmp	r4, r3
    21a0:	d109      	bne.n	21b6 <_fflush_r+0x2e>
    21a2:	686c      	ldr	r4, [r5, #4]
    21a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    21a8:	b17b      	cbz	r3, 21ca <_fflush_r+0x42>
    21aa:	4621      	mov	r1, r4
    21ac:	4628      	mov	r0, r5
    21ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    21b2:	f7ff bf63 	b.w	207c <__sflush_r>
    21b6:	4b07      	ldr	r3, [pc, #28]	; (21d4 <_fflush_r+0x4c>)
    21b8:	429c      	cmp	r4, r3
    21ba:	d101      	bne.n	21c0 <_fflush_r+0x38>
    21bc:	68ac      	ldr	r4, [r5, #8]
    21be:	e7f1      	b.n	21a4 <_fflush_r+0x1c>
    21c0:	4b05      	ldr	r3, [pc, #20]	; (21d8 <_fflush_r+0x50>)
    21c2:	429c      	cmp	r4, r3
    21c4:	bf08      	it	eq
    21c6:	68ec      	ldreq	r4, [r5, #12]
    21c8:	e7ec      	b.n	21a4 <_fflush_r+0x1c>
    21ca:	2000      	movs	r0, #0
    21cc:	bd38      	pop	{r3, r4, r5, pc}
    21ce:	bf00      	nop
    21d0:	0000340c 	.word	0x0000340c
    21d4:	0000342c 	.word	0x0000342c
    21d8:	000033ec 	.word	0x000033ec

000021dc <std>:
    21dc:	2300      	movs	r3, #0
    21de:	b510      	push	{r4, lr}
    21e0:	4604      	mov	r4, r0
    21e2:	e9c0 3300 	strd	r3, r3, [r0]
    21e6:	6083      	str	r3, [r0, #8]
    21e8:	8181      	strh	r1, [r0, #12]
    21ea:	6643      	str	r3, [r0, #100]	; 0x64
    21ec:	81c2      	strh	r2, [r0, #14]
    21ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
    21f2:	6183      	str	r3, [r0, #24]
    21f4:	4619      	mov	r1, r3
    21f6:	2208      	movs	r2, #8
    21f8:	305c      	adds	r0, #92	; 0x5c
    21fa:	f7ff fde9 	bl	1dd0 <memset>
    21fe:	4b05      	ldr	r3, [pc, #20]	; (2214 <std+0x38>)
    2200:	6224      	str	r4, [r4, #32]
    2202:	6263      	str	r3, [r4, #36]	; 0x24
    2204:	4b04      	ldr	r3, [pc, #16]	; (2218 <std+0x3c>)
    2206:	62a3      	str	r3, [r4, #40]	; 0x28
    2208:	4b04      	ldr	r3, [pc, #16]	; (221c <std+0x40>)
    220a:	62e3      	str	r3, [r4, #44]	; 0x2c
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <std+0x44>)
    220e:	6323      	str	r3, [r4, #48]	; 0x30
    2210:	bd10      	pop	{r4, pc}
    2212:	bf00      	nop
    2214:	00002b2d 	.word	0x00002b2d
    2218:	00002b4f 	.word	0x00002b4f
    221c:	00002b87 	.word	0x00002b87
    2220:	00002bab 	.word	0x00002bab

00002224 <_cleanup_r>:
    2224:	4901      	ldr	r1, [pc, #4]	; (222c <_cleanup_r+0x8>)
    2226:	f000 b885 	b.w	2334 <_fwalk_reent>
    222a:	bf00      	nop
    222c:	00002189 	.word	0x00002189

00002230 <__sfmoreglue>:
    2230:	b570      	push	{r4, r5, r6, lr}
    2232:	2568      	movs	r5, #104	; 0x68
    2234:	1e4a      	subs	r2, r1, #1
    2236:	4355      	muls	r5, r2
    2238:	460e      	mov	r6, r1
    223a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    223e:	f000 f947 	bl	24d0 <_malloc_r>
    2242:	4604      	mov	r4, r0
    2244:	b140      	cbz	r0, 2258 <__sfmoreglue+0x28>
    2246:	2100      	movs	r1, #0
    2248:	e9c0 1600 	strd	r1, r6, [r0]
    224c:	300c      	adds	r0, #12
    224e:	60a0      	str	r0, [r4, #8]
    2250:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2254:	f7ff fdbc 	bl	1dd0 <memset>
    2258:	4620      	mov	r0, r4
    225a:	bd70      	pop	{r4, r5, r6, pc}

0000225c <__sinit>:
    225c:	6983      	ldr	r3, [r0, #24]
    225e:	b510      	push	{r4, lr}
    2260:	4604      	mov	r4, r0
    2262:	bb33      	cbnz	r3, 22b2 <__sinit+0x56>
    2264:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    2268:	6503      	str	r3, [r0, #80]	; 0x50
    226a:	4b12      	ldr	r3, [pc, #72]	; (22b4 <__sinit+0x58>)
    226c:	4a12      	ldr	r2, [pc, #72]	; (22b8 <__sinit+0x5c>)
    226e:	681b      	ldr	r3, [r3, #0]
    2270:	6282      	str	r2, [r0, #40]	; 0x28
    2272:	4298      	cmp	r0, r3
    2274:	bf04      	itt	eq
    2276:	2301      	moveq	r3, #1
    2278:	6183      	streq	r3, [r0, #24]
    227a:	f000 f81f 	bl	22bc <__sfp>
    227e:	6060      	str	r0, [r4, #4]
    2280:	4620      	mov	r0, r4
    2282:	f000 f81b 	bl	22bc <__sfp>
    2286:	60a0      	str	r0, [r4, #8]
    2288:	4620      	mov	r0, r4
    228a:	f000 f817 	bl	22bc <__sfp>
    228e:	2200      	movs	r2, #0
    2290:	60e0      	str	r0, [r4, #12]
    2292:	2104      	movs	r1, #4
    2294:	6860      	ldr	r0, [r4, #4]
    2296:	f7ff ffa1 	bl	21dc <std>
    229a:	2201      	movs	r2, #1
    229c:	2109      	movs	r1, #9
    229e:	68a0      	ldr	r0, [r4, #8]
    22a0:	f7ff ff9c 	bl	21dc <std>
    22a4:	2202      	movs	r2, #2
    22a6:	2112      	movs	r1, #18
    22a8:	68e0      	ldr	r0, [r4, #12]
    22aa:	f7ff ff97 	bl	21dc <std>
    22ae:	2301      	movs	r3, #1
    22b0:	61a3      	str	r3, [r4, #24]
    22b2:	bd10      	pop	{r4, pc}
    22b4:	000033e8 	.word	0x000033e8
    22b8:	00002225 	.word	0x00002225

000022bc <__sfp>:
    22bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22be:	4b1b      	ldr	r3, [pc, #108]	; (232c <__sfp+0x70>)
    22c0:	4607      	mov	r7, r0
    22c2:	681e      	ldr	r6, [r3, #0]
    22c4:	69b3      	ldr	r3, [r6, #24]
    22c6:	b913      	cbnz	r3, 22ce <__sfp+0x12>
    22c8:	4630      	mov	r0, r6
    22ca:	f7ff ffc7 	bl	225c <__sinit>
    22ce:	3648      	adds	r6, #72	; 0x48
    22d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    22d4:	3b01      	subs	r3, #1
    22d6:	d503      	bpl.n	22e0 <__sfp+0x24>
    22d8:	6833      	ldr	r3, [r6, #0]
    22da:	b133      	cbz	r3, 22ea <__sfp+0x2e>
    22dc:	6836      	ldr	r6, [r6, #0]
    22de:	e7f7      	b.n	22d0 <__sfp+0x14>
    22e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    22e4:	b16d      	cbz	r5, 2302 <__sfp+0x46>
    22e6:	3468      	adds	r4, #104	; 0x68
    22e8:	e7f4      	b.n	22d4 <__sfp+0x18>
    22ea:	2104      	movs	r1, #4
    22ec:	4638      	mov	r0, r7
    22ee:	f7ff ff9f 	bl	2230 <__sfmoreglue>
    22f2:	6030      	str	r0, [r6, #0]
    22f4:	2800      	cmp	r0, #0
    22f6:	d1f1      	bne.n	22dc <__sfp+0x20>
    22f8:	230c      	movs	r3, #12
    22fa:	4604      	mov	r4, r0
    22fc:	603b      	str	r3, [r7, #0]
    22fe:	4620      	mov	r0, r4
    2300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2302:	4b0b      	ldr	r3, [pc, #44]	; (2330 <__sfp+0x74>)
    2304:	6665      	str	r5, [r4, #100]	; 0x64
    2306:	e9c4 5500 	strd	r5, r5, [r4]
    230a:	60a5      	str	r5, [r4, #8]
    230c:	e9c4 3503 	strd	r3, r5, [r4, #12]
    2310:	e9c4 5505 	strd	r5, r5, [r4, #20]
    2314:	2208      	movs	r2, #8
    2316:	4629      	mov	r1, r5
    2318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    231c:	f7ff fd58 	bl	1dd0 <memset>
    2320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    2324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    2328:	e7e9      	b.n	22fe <__sfp+0x42>
    232a:	bf00      	nop
    232c:	000033e8 	.word	0x000033e8
    2330:	ffff0001 	.word	0xffff0001

00002334 <_fwalk_reent>:
    2334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2338:	4680      	mov	r8, r0
    233a:	4689      	mov	r9, r1
    233c:	2600      	movs	r6, #0
    233e:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2342:	b914      	cbnz	r4, 234a <_fwalk_reent+0x16>
    2344:	4630      	mov	r0, r6
    2346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    234a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    234e:	3f01      	subs	r7, #1
    2350:	d501      	bpl.n	2356 <_fwalk_reent+0x22>
    2352:	6824      	ldr	r4, [r4, #0]
    2354:	e7f5      	b.n	2342 <_fwalk_reent+0xe>
    2356:	89ab      	ldrh	r3, [r5, #12]
    2358:	2b01      	cmp	r3, #1
    235a:	d907      	bls.n	236c <_fwalk_reent+0x38>
    235c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2360:	3301      	adds	r3, #1
    2362:	d003      	beq.n	236c <_fwalk_reent+0x38>
    2364:	4629      	mov	r1, r5
    2366:	4640      	mov	r0, r8
    2368:	47c8      	blx	r9
    236a:	4306      	orrs	r6, r0
    236c:	3568      	adds	r5, #104	; 0x68
    236e:	e7ee      	b.n	234e <_fwalk_reent+0x1a>

00002370 <__swhatbuf_r>:
    2370:	b570      	push	{r4, r5, r6, lr}
    2372:	460e      	mov	r6, r1
    2374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2378:	b096      	sub	sp, #88	; 0x58
    237a:	2900      	cmp	r1, #0
    237c:	4614      	mov	r4, r2
    237e:	461d      	mov	r5, r3
    2380:	da07      	bge.n	2392 <__swhatbuf_r+0x22>
    2382:	2300      	movs	r3, #0
    2384:	602b      	str	r3, [r5, #0]
    2386:	89b3      	ldrh	r3, [r6, #12]
    2388:	061a      	lsls	r2, r3, #24
    238a:	d410      	bmi.n	23ae <__swhatbuf_r+0x3e>
    238c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2390:	e00e      	b.n	23b0 <__swhatbuf_r+0x40>
    2392:	466a      	mov	r2, sp
    2394:	f000 fc30 	bl	2bf8 <_fstat_r>
    2398:	2800      	cmp	r0, #0
    239a:	dbf2      	blt.n	2382 <__swhatbuf_r+0x12>
    239c:	9a01      	ldr	r2, [sp, #4]
    239e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    23a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    23a6:	425a      	negs	r2, r3
    23a8:	415a      	adcs	r2, r3
    23aa:	602a      	str	r2, [r5, #0]
    23ac:	e7ee      	b.n	238c <__swhatbuf_r+0x1c>
    23ae:	2340      	movs	r3, #64	; 0x40
    23b0:	2000      	movs	r0, #0
    23b2:	6023      	str	r3, [r4, #0]
    23b4:	b016      	add	sp, #88	; 0x58
    23b6:	bd70      	pop	{r4, r5, r6, pc}

000023b8 <__smakebuf_r>:
    23b8:	898b      	ldrh	r3, [r1, #12]
    23ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
    23bc:	079d      	lsls	r5, r3, #30
    23be:	4606      	mov	r6, r0
    23c0:	460c      	mov	r4, r1
    23c2:	d507      	bpl.n	23d4 <__smakebuf_r+0x1c>
    23c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
    23c8:	6023      	str	r3, [r4, #0]
    23ca:	6123      	str	r3, [r4, #16]
    23cc:	2301      	movs	r3, #1
    23ce:	6163      	str	r3, [r4, #20]
    23d0:	b002      	add	sp, #8
    23d2:	bd70      	pop	{r4, r5, r6, pc}
    23d4:	ab01      	add	r3, sp, #4
    23d6:	466a      	mov	r2, sp
    23d8:	f7ff ffca 	bl	2370 <__swhatbuf_r>
    23dc:	9900      	ldr	r1, [sp, #0]
    23de:	4605      	mov	r5, r0
    23e0:	4630      	mov	r0, r6
    23e2:	f000 f875 	bl	24d0 <_malloc_r>
    23e6:	b948      	cbnz	r0, 23fc <__smakebuf_r+0x44>
    23e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    23ec:	059a      	lsls	r2, r3, #22
    23ee:	d4ef      	bmi.n	23d0 <__smakebuf_r+0x18>
    23f0:	f023 0303 	bic.w	r3, r3, #3
    23f4:	f043 0302 	orr.w	r3, r3, #2
    23f8:	81a3      	strh	r3, [r4, #12]
    23fa:	e7e3      	b.n	23c4 <__smakebuf_r+0xc>
    23fc:	4b0d      	ldr	r3, [pc, #52]	; (2434 <__smakebuf_r+0x7c>)
    23fe:	62b3      	str	r3, [r6, #40]	; 0x28
    2400:	89a3      	ldrh	r3, [r4, #12]
    2402:	6020      	str	r0, [r4, #0]
    2404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2408:	81a3      	strh	r3, [r4, #12]
    240a:	9b00      	ldr	r3, [sp, #0]
    240c:	6120      	str	r0, [r4, #16]
    240e:	6163      	str	r3, [r4, #20]
    2410:	9b01      	ldr	r3, [sp, #4]
    2412:	b15b      	cbz	r3, 242c <__smakebuf_r+0x74>
    2414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2418:	4630      	mov	r0, r6
    241a:	f000 fbff 	bl	2c1c <_isatty_r>
    241e:	b128      	cbz	r0, 242c <__smakebuf_r+0x74>
    2420:	89a3      	ldrh	r3, [r4, #12]
    2422:	f023 0303 	bic.w	r3, r3, #3
    2426:	f043 0301 	orr.w	r3, r3, #1
    242a:	81a3      	strh	r3, [r4, #12]
    242c:	89a3      	ldrh	r3, [r4, #12]
    242e:	431d      	orrs	r5, r3
    2430:	81a5      	strh	r5, [r4, #12]
    2432:	e7cd      	b.n	23d0 <__smakebuf_r+0x18>
    2434:	00002225 	.word	0x00002225

00002438 <_free_r>:
    2438:	b538      	push	{r3, r4, r5, lr}
    243a:	4605      	mov	r5, r0
    243c:	2900      	cmp	r1, #0
    243e:	d043      	beq.n	24c8 <_free_r+0x90>
    2440:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2444:	1f0c      	subs	r4, r1, #4
    2446:	2b00      	cmp	r3, #0
    2448:	bfb8      	it	lt
    244a:	18e4      	addlt	r4, r4, r3
    244c:	f000 fc16 	bl	2c7c <__malloc_lock>
    2450:	4a1e      	ldr	r2, [pc, #120]	; (24cc <_free_r+0x94>)
    2452:	6813      	ldr	r3, [r2, #0]
    2454:	4610      	mov	r0, r2
    2456:	b933      	cbnz	r3, 2466 <_free_r+0x2e>
    2458:	6063      	str	r3, [r4, #4]
    245a:	6014      	str	r4, [r2, #0]
    245c:	4628      	mov	r0, r5
    245e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2462:	f000 bc0c 	b.w	2c7e <__malloc_unlock>
    2466:	42a3      	cmp	r3, r4
    2468:	d90b      	bls.n	2482 <_free_r+0x4a>
    246a:	6821      	ldr	r1, [r4, #0]
    246c:	1862      	adds	r2, r4, r1
    246e:	4293      	cmp	r3, r2
    2470:	bf01      	itttt	eq
    2472:	681a      	ldreq	r2, [r3, #0]
    2474:	685b      	ldreq	r3, [r3, #4]
    2476:	1852      	addeq	r2, r2, r1
    2478:	6022      	streq	r2, [r4, #0]
    247a:	6063      	str	r3, [r4, #4]
    247c:	6004      	str	r4, [r0, #0]
    247e:	e7ed      	b.n	245c <_free_r+0x24>
    2480:	4613      	mov	r3, r2
    2482:	685a      	ldr	r2, [r3, #4]
    2484:	b10a      	cbz	r2, 248a <_free_r+0x52>
    2486:	42a2      	cmp	r2, r4
    2488:	d9fa      	bls.n	2480 <_free_r+0x48>
    248a:	6819      	ldr	r1, [r3, #0]
    248c:	1858      	adds	r0, r3, r1
    248e:	42a0      	cmp	r0, r4
    2490:	d10b      	bne.n	24aa <_free_r+0x72>
    2492:	6820      	ldr	r0, [r4, #0]
    2494:	4401      	add	r1, r0
    2496:	1858      	adds	r0, r3, r1
    2498:	4282      	cmp	r2, r0
    249a:	6019      	str	r1, [r3, #0]
    249c:	d1de      	bne.n	245c <_free_r+0x24>
    249e:	6810      	ldr	r0, [r2, #0]
    24a0:	6852      	ldr	r2, [r2, #4]
    24a2:	4401      	add	r1, r0
    24a4:	6019      	str	r1, [r3, #0]
    24a6:	605a      	str	r2, [r3, #4]
    24a8:	e7d8      	b.n	245c <_free_r+0x24>
    24aa:	d902      	bls.n	24b2 <_free_r+0x7a>
    24ac:	230c      	movs	r3, #12
    24ae:	602b      	str	r3, [r5, #0]
    24b0:	e7d4      	b.n	245c <_free_r+0x24>
    24b2:	6820      	ldr	r0, [r4, #0]
    24b4:	1821      	adds	r1, r4, r0
    24b6:	428a      	cmp	r2, r1
    24b8:	bf01      	itttt	eq
    24ba:	6811      	ldreq	r1, [r2, #0]
    24bc:	6852      	ldreq	r2, [r2, #4]
    24be:	1809      	addeq	r1, r1, r0
    24c0:	6021      	streq	r1, [r4, #0]
    24c2:	6062      	str	r2, [r4, #4]
    24c4:	605c      	str	r4, [r3, #4]
    24c6:	e7c9      	b.n	245c <_free_r+0x24>
    24c8:	bd38      	pop	{r3, r4, r5, pc}
    24ca:	bf00      	nop
    24cc:	20000068 	.word	0x20000068

000024d0 <_malloc_r>:
    24d0:	b570      	push	{r4, r5, r6, lr}
    24d2:	1ccd      	adds	r5, r1, #3
    24d4:	f025 0503 	bic.w	r5, r5, #3
    24d8:	3508      	adds	r5, #8
    24da:	2d0c      	cmp	r5, #12
    24dc:	bf38      	it	cc
    24de:	250c      	movcc	r5, #12
    24e0:	2d00      	cmp	r5, #0
    24e2:	4606      	mov	r6, r0
    24e4:	db01      	blt.n	24ea <_malloc_r+0x1a>
    24e6:	42a9      	cmp	r1, r5
    24e8:	d903      	bls.n	24f2 <_malloc_r+0x22>
    24ea:	230c      	movs	r3, #12
    24ec:	6033      	str	r3, [r6, #0]
    24ee:	2000      	movs	r0, #0
    24f0:	bd70      	pop	{r4, r5, r6, pc}
    24f2:	f000 fbc3 	bl	2c7c <__malloc_lock>
    24f6:	4a21      	ldr	r2, [pc, #132]	; (257c <_malloc_r+0xac>)
    24f8:	6814      	ldr	r4, [r2, #0]
    24fa:	4621      	mov	r1, r4
    24fc:	b991      	cbnz	r1, 2524 <_malloc_r+0x54>
    24fe:	4c20      	ldr	r4, [pc, #128]	; (2580 <_malloc_r+0xb0>)
    2500:	6823      	ldr	r3, [r4, #0]
    2502:	b91b      	cbnz	r3, 250c <_malloc_r+0x3c>
    2504:	4630      	mov	r0, r6
    2506:	f000 fb01 	bl	2b0c <_sbrk_r>
    250a:	6020      	str	r0, [r4, #0]
    250c:	4629      	mov	r1, r5
    250e:	4630      	mov	r0, r6
    2510:	f000 fafc 	bl	2b0c <_sbrk_r>
    2514:	1c43      	adds	r3, r0, #1
    2516:	d124      	bne.n	2562 <_malloc_r+0x92>
    2518:	230c      	movs	r3, #12
    251a:	4630      	mov	r0, r6
    251c:	6033      	str	r3, [r6, #0]
    251e:	f000 fbae 	bl	2c7e <__malloc_unlock>
    2522:	e7e4      	b.n	24ee <_malloc_r+0x1e>
    2524:	680b      	ldr	r3, [r1, #0]
    2526:	1b5b      	subs	r3, r3, r5
    2528:	d418      	bmi.n	255c <_malloc_r+0x8c>
    252a:	2b0b      	cmp	r3, #11
    252c:	d90f      	bls.n	254e <_malloc_r+0x7e>
    252e:	600b      	str	r3, [r1, #0]
    2530:	18cc      	adds	r4, r1, r3
    2532:	50cd      	str	r5, [r1, r3]
    2534:	4630      	mov	r0, r6
    2536:	f000 fba2 	bl	2c7e <__malloc_unlock>
    253a:	f104 000b 	add.w	r0, r4, #11
    253e:	1d23      	adds	r3, r4, #4
    2540:	f020 0007 	bic.w	r0, r0, #7
    2544:	1ac3      	subs	r3, r0, r3
    2546:	d0d3      	beq.n	24f0 <_malloc_r+0x20>
    2548:	425a      	negs	r2, r3
    254a:	50e2      	str	r2, [r4, r3]
    254c:	e7d0      	b.n	24f0 <_malloc_r+0x20>
    254e:	684b      	ldr	r3, [r1, #4]
    2550:	428c      	cmp	r4, r1
    2552:	bf16      	itet	ne
    2554:	6063      	strne	r3, [r4, #4]
    2556:	6013      	streq	r3, [r2, #0]
    2558:	460c      	movne	r4, r1
    255a:	e7eb      	b.n	2534 <_malloc_r+0x64>
    255c:	460c      	mov	r4, r1
    255e:	6849      	ldr	r1, [r1, #4]
    2560:	e7cc      	b.n	24fc <_malloc_r+0x2c>
    2562:	1cc4      	adds	r4, r0, #3
    2564:	f024 0403 	bic.w	r4, r4, #3
    2568:	42a0      	cmp	r0, r4
    256a:	d005      	beq.n	2578 <_malloc_r+0xa8>
    256c:	1a21      	subs	r1, r4, r0
    256e:	4630      	mov	r0, r6
    2570:	f000 facc 	bl	2b0c <_sbrk_r>
    2574:	3001      	adds	r0, #1
    2576:	d0cf      	beq.n	2518 <_malloc_r+0x48>
    2578:	6025      	str	r5, [r4, #0]
    257a:	e7db      	b.n	2534 <_malloc_r+0x64>
    257c:	20000068 	.word	0x20000068
    2580:	2000006c 	.word	0x2000006c

00002584 <__sfputc_r>:
    2584:	6893      	ldr	r3, [r2, #8]
    2586:	b410      	push	{r4}
    2588:	3b01      	subs	r3, #1
    258a:	2b00      	cmp	r3, #0
    258c:	6093      	str	r3, [r2, #8]
    258e:	da07      	bge.n	25a0 <__sfputc_r+0x1c>
    2590:	6994      	ldr	r4, [r2, #24]
    2592:	42a3      	cmp	r3, r4
    2594:	db01      	blt.n	259a <__sfputc_r+0x16>
    2596:	290a      	cmp	r1, #10
    2598:	d102      	bne.n	25a0 <__sfputc_r+0x1c>
    259a:	bc10      	pop	{r4}
    259c:	f7ff bcae 	b.w	1efc <__swbuf_r>
    25a0:	6813      	ldr	r3, [r2, #0]
    25a2:	1c58      	adds	r0, r3, #1
    25a4:	6010      	str	r0, [r2, #0]
    25a6:	7019      	strb	r1, [r3, #0]
    25a8:	4608      	mov	r0, r1
    25aa:	bc10      	pop	{r4}
    25ac:	4770      	bx	lr

000025ae <__sfputs_r>:
    25ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b0:	4606      	mov	r6, r0
    25b2:	460f      	mov	r7, r1
    25b4:	4614      	mov	r4, r2
    25b6:	18d5      	adds	r5, r2, r3
    25b8:	42ac      	cmp	r4, r5
    25ba:	d101      	bne.n	25c0 <__sfputs_r+0x12>
    25bc:	2000      	movs	r0, #0
    25be:	e007      	b.n	25d0 <__sfputs_r+0x22>
    25c0:	463a      	mov	r2, r7
    25c2:	f814 1b01 	ldrb.w	r1, [r4], #1
    25c6:	4630      	mov	r0, r6
    25c8:	f7ff ffdc 	bl	2584 <__sfputc_r>
    25cc:	1c43      	adds	r3, r0, #1
    25ce:	d1f3      	bne.n	25b8 <__sfputs_r+0xa>
    25d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000025d4 <_vfiprintf_r>:
    25d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25d8:	b09d      	sub	sp, #116	; 0x74
    25da:	460c      	mov	r4, r1
    25dc:	4617      	mov	r7, r2
    25de:	9303      	str	r3, [sp, #12]
    25e0:	4606      	mov	r6, r0
    25e2:	b118      	cbz	r0, 25ec <_vfiprintf_r+0x18>
    25e4:	6983      	ldr	r3, [r0, #24]
    25e6:	b90b      	cbnz	r3, 25ec <_vfiprintf_r+0x18>
    25e8:	f7ff fe38 	bl	225c <__sinit>
    25ec:	4b7b      	ldr	r3, [pc, #492]	; (27dc <_vfiprintf_r+0x208>)
    25ee:	429c      	cmp	r4, r3
    25f0:	d157      	bne.n	26a2 <_vfiprintf_r+0xce>
    25f2:	6874      	ldr	r4, [r6, #4]
    25f4:	89a3      	ldrh	r3, [r4, #12]
    25f6:	0718      	lsls	r0, r3, #28
    25f8:	d55d      	bpl.n	26b6 <_vfiprintf_r+0xe2>
    25fa:	6923      	ldr	r3, [r4, #16]
    25fc:	2b00      	cmp	r3, #0
    25fe:	d05a      	beq.n	26b6 <_vfiprintf_r+0xe2>
    2600:	2300      	movs	r3, #0
    2602:	9309      	str	r3, [sp, #36]	; 0x24
    2604:	2320      	movs	r3, #32
    2606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    260a:	2330      	movs	r3, #48	; 0x30
    260c:	f04f 0b01 	mov.w	fp, #1
    2610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    2614:	46b8      	mov	r8, r7
    2616:	4645      	mov	r5, r8
    2618:	f815 3b01 	ldrb.w	r3, [r5], #1
    261c:	b10b      	cbz	r3, 2622 <_vfiprintf_r+0x4e>
    261e:	2b25      	cmp	r3, #37	; 0x25
    2620:	d154      	bne.n	26cc <_vfiprintf_r+0xf8>
    2622:	ebb8 0a07 	subs.w	sl, r8, r7
    2626:	d00b      	beq.n	2640 <_vfiprintf_r+0x6c>
    2628:	4653      	mov	r3, sl
    262a:	463a      	mov	r2, r7
    262c:	4621      	mov	r1, r4
    262e:	4630      	mov	r0, r6
    2630:	f7ff ffbd 	bl	25ae <__sfputs_r>
    2634:	3001      	adds	r0, #1
    2636:	f000 80c2 	beq.w	27be <_vfiprintf_r+0x1ea>
    263a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    263c:	4453      	add	r3, sl
    263e:	9309      	str	r3, [sp, #36]	; 0x24
    2640:	f898 3000 	ldrb.w	r3, [r8]
    2644:	2b00      	cmp	r3, #0
    2646:	f000 80ba 	beq.w	27be <_vfiprintf_r+0x1ea>
    264a:	2300      	movs	r3, #0
    264c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2650:	e9cd 2305 	strd	r2, r3, [sp, #20]
    2654:	9304      	str	r3, [sp, #16]
    2656:	9307      	str	r3, [sp, #28]
    2658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    265c:	931a      	str	r3, [sp, #104]	; 0x68
    265e:	46a8      	mov	r8, r5
    2660:	2205      	movs	r2, #5
    2662:	f818 1b01 	ldrb.w	r1, [r8], #1
    2666:	485e      	ldr	r0, [pc, #376]	; (27e0 <_vfiprintf_r+0x20c>)
    2668:	f000 fafa 	bl	2c60 <memchr>
    266c:	9b04      	ldr	r3, [sp, #16]
    266e:	bb78      	cbnz	r0, 26d0 <_vfiprintf_r+0xfc>
    2670:	06d9      	lsls	r1, r3, #27
    2672:	bf44      	itt	mi
    2674:	2220      	movmi	r2, #32
    2676:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    267a:	071a      	lsls	r2, r3, #28
    267c:	bf44      	itt	mi
    267e:	222b      	movmi	r2, #43	; 0x2b
    2680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2684:	782a      	ldrb	r2, [r5, #0]
    2686:	2a2a      	cmp	r2, #42	; 0x2a
    2688:	d02a      	beq.n	26e0 <_vfiprintf_r+0x10c>
    268a:	46a8      	mov	r8, r5
    268c:	2000      	movs	r0, #0
    268e:	250a      	movs	r5, #10
    2690:	9a07      	ldr	r2, [sp, #28]
    2692:	4641      	mov	r1, r8
    2694:	f811 3b01 	ldrb.w	r3, [r1], #1
    2698:	3b30      	subs	r3, #48	; 0x30
    269a:	2b09      	cmp	r3, #9
    269c:	d969      	bls.n	2772 <_vfiprintf_r+0x19e>
    269e:	b360      	cbz	r0, 26fa <_vfiprintf_r+0x126>
    26a0:	e024      	b.n	26ec <_vfiprintf_r+0x118>
    26a2:	4b50      	ldr	r3, [pc, #320]	; (27e4 <_vfiprintf_r+0x210>)
    26a4:	429c      	cmp	r4, r3
    26a6:	d101      	bne.n	26ac <_vfiprintf_r+0xd8>
    26a8:	68b4      	ldr	r4, [r6, #8]
    26aa:	e7a3      	b.n	25f4 <_vfiprintf_r+0x20>
    26ac:	4b4e      	ldr	r3, [pc, #312]	; (27e8 <_vfiprintf_r+0x214>)
    26ae:	429c      	cmp	r4, r3
    26b0:	bf08      	it	eq
    26b2:	68f4      	ldreq	r4, [r6, #12]
    26b4:	e79e      	b.n	25f4 <_vfiprintf_r+0x20>
    26b6:	4621      	mov	r1, r4
    26b8:	4630      	mov	r0, r6
    26ba:	f7ff fc71 	bl	1fa0 <__swsetup_r>
    26be:	2800      	cmp	r0, #0
    26c0:	d09e      	beq.n	2600 <_vfiprintf_r+0x2c>
    26c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26c6:	b01d      	add	sp, #116	; 0x74
    26c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26cc:	46a8      	mov	r8, r5
    26ce:	e7a2      	b.n	2616 <_vfiprintf_r+0x42>
    26d0:	4a43      	ldr	r2, [pc, #268]	; (27e0 <_vfiprintf_r+0x20c>)
    26d2:	4645      	mov	r5, r8
    26d4:	1a80      	subs	r0, r0, r2
    26d6:	fa0b f000 	lsl.w	r0, fp, r0
    26da:	4318      	orrs	r0, r3
    26dc:	9004      	str	r0, [sp, #16]
    26de:	e7be      	b.n	265e <_vfiprintf_r+0x8a>
    26e0:	9a03      	ldr	r2, [sp, #12]
    26e2:	1d11      	adds	r1, r2, #4
    26e4:	6812      	ldr	r2, [r2, #0]
    26e6:	9103      	str	r1, [sp, #12]
    26e8:	2a00      	cmp	r2, #0
    26ea:	db01      	blt.n	26f0 <_vfiprintf_r+0x11c>
    26ec:	9207      	str	r2, [sp, #28]
    26ee:	e004      	b.n	26fa <_vfiprintf_r+0x126>
    26f0:	4252      	negs	r2, r2
    26f2:	f043 0302 	orr.w	r3, r3, #2
    26f6:	9207      	str	r2, [sp, #28]
    26f8:	9304      	str	r3, [sp, #16]
    26fa:	f898 3000 	ldrb.w	r3, [r8]
    26fe:	2b2e      	cmp	r3, #46	; 0x2e
    2700:	d10e      	bne.n	2720 <_vfiprintf_r+0x14c>
    2702:	f898 3001 	ldrb.w	r3, [r8, #1]
    2706:	2b2a      	cmp	r3, #42	; 0x2a
    2708:	d138      	bne.n	277c <_vfiprintf_r+0x1a8>
    270a:	9b03      	ldr	r3, [sp, #12]
    270c:	f108 0802 	add.w	r8, r8, #2
    2710:	1d1a      	adds	r2, r3, #4
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	9203      	str	r2, [sp, #12]
    2716:	2b00      	cmp	r3, #0
    2718:	bfb8      	it	lt
    271a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    271e:	9305      	str	r3, [sp, #20]
    2720:	4d32      	ldr	r5, [pc, #200]	; (27ec <_vfiprintf_r+0x218>)
    2722:	2203      	movs	r2, #3
    2724:	f898 1000 	ldrb.w	r1, [r8]
    2728:	4628      	mov	r0, r5
    272a:	f000 fa99 	bl	2c60 <memchr>
    272e:	b140      	cbz	r0, 2742 <_vfiprintf_r+0x16e>
    2730:	2340      	movs	r3, #64	; 0x40
    2732:	1b40      	subs	r0, r0, r5
    2734:	fa03 f000 	lsl.w	r0, r3, r0
    2738:	9b04      	ldr	r3, [sp, #16]
    273a:	f108 0801 	add.w	r8, r8, #1
    273e:	4303      	orrs	r3, r0
    2740:	9304      	str	r3, [sp, #16]
    2742:	f898 1000 	ldrb.w	r1, [r8]
    2746:	2206      	movs	r2, #6
    2748:	4829      	ldr	r0, [pc, #164]	; (27f0 <_vfiprintf_r+0x21c>)
    274a:	f108 0701 	add.w	r7, r8, #1
    274e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    2752:	f000 fa85 	bl	2c60 <memchr>
    2756:	2800      	cmp	r0, #0
    2758:	d037      	beq.n	27ca <_vfiprintf_r+0x1f6>
    275a:	4b26      	ldr	r3, [pc, #152]	; (27f4 <_vfiprintf_r+0x220>)
    275c:	bb1b      	cbnz	r3, 27a6 <_vfiprintf_r+0x1d2>
    275e:	9b03      	ldr	r3, [sp, #12]
    2760:	3307      	adds	r3, #7
    2762:	f023 0307 	bic.w	r3, r3, #7
    2766:	3308      	adds	r3, #8
    2768:	9303      	str	r3, [sp, #12]
    276a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    276c:	444b      	add	r3, r9
    276e:	9309      	str	r3, [sp, #36]	; 0x24
    2770:	e750      	b.n	2614 <_vfiprintf_r+0x40>
    2772:	fb05 3202 	mla	r2, r5, r2, r3
    2776:	2001      	movs	r0, #1
    2778:	4688      	mov	r8, r1
    277a:	e78a      	b.n	2692 <_vfiprintf_r+0xbe>
    277c:	2300      	movs	r3, #0
    277e:	250a      	movs	r5, #10
    2780:	4619      	mov	r1, r3
    2782:	f108 0801 	add.w	r8, r8, #1
    2786:	9305      	str	r3, [sp, #20]
    2788:	4640      	mov	r0, r8
    278a:	f810 2b01 	ldrb.w	r2, [r0], #1
    278e:	3a30      	subs	r2, #48	; 0x30
    2790:	2a09      	cmp	r2, #9
    2792:	d903      	bls.n	279c <_vfiprintf_r+0x1c8>
    2794:	2b00      	cmp	r3, #0
    2796:	d0c3      	beq.n	2720 <_vfiprintf_r+0x14c>
    2798:	9105      	str	r1, [sp, #20]
    279a:	e7c1      	b.n	2720 <_vfiprintf_r+0x14c>
    279c:	fb05 2101 	mla	r1, r5, r1, r2
    27a0:	2301      	movs	r3, #1
    27a2:	4680      	mov	r8, r0
    27a4:	e7f0      	b.n	2788 <_vfiprintf_r+0x1b4>
    27a6:	ab03      	add	r3, sp, #12
    27a8:	9300      	str	r3, [sp, #0]
    27aa:	4622      	mov	r2, r4
    27ac:	4b12      	ldr	r3, [pc, #72]	; (27f8 <_vfiprintf_r+0x224>)
    27ae:	a904      	add	r1, sp, #16
    27b0:	4630      	mov	r0, r6
    27b2:	f3af 8000 	nop.w
    27b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    27ba:	4681      	mov	r9, r0
    27bc:	d1d5      	bne.n	276a <_vfiprintf_r+0x196>
    27be:	89a3      	ldrh	r3, [r4, #12]
    27c0:	065b      	lsls	r3, r3, #25
    27c2:	f53f af7e 	bmi.w	26c2 <_vfiprintf_r+0xee>
    27c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    27c8:	e77d      	b.n	26c6 <_vfiprintf_r+0xf2>
    27ca:	ab03      	add	r3, sp, #12
    27cc:	9300      	str	r3, [sp, #0]
    27ce:	4622      	mov	r2, r4
    27d0:	4b09      	ldr	r3, [pc, #36]	; (27f8 <_vfiprintf_r+0x224>)
    27d2:	a904      	add	r1, sp, #16
    27d4:	4630      	mov	r0, r6
    27d6:	f000 f887 	bl	28e8 <_printf_i>
    27da:	e7ec      	b.n	27b6 <_vfiprintf_r+0x1e2>
    27dc:	0000340c 	.word	0x0000340c
    27e0:	0000344c 	.word	0x0000344c
    27e4:	0000342c 	.word	0x0000342c
    27e8:	000033ec 	.word	0x000033ec
    27ec:	00003452 	.word	0x00003452
    27f0:	00003456 	.word	0x00003456
    27f4:	00000000 	.word	0x00000000
    27f8:	000025af 	.word	0x000025af

000027fc <_printf_common>:
    27fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2800:	4691      	mov	r9, r2
    2802:	461f      	mov	r7, r3
    2804:	688a      	ldr	r2, [r1, #8]
    2806:	690b      	ldr	r3, [r1, #16]
    2808:	4606      	mov	r6, r0
    280a:	4293      	cmp	r3, r2
    280c:	bfb8      	it	lt
    280e:	4613      	movlt	r3, r2
    2810:	f8c9 3000 	str.w	r3, [r9]
    2814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    2818:	460c      	mov	r4, r1
    281a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    281e:	b112      	cbz	r2, 2826 <_printf_common+0x2a>
    2820:	3301      	adds	r3, #1
    2822:	f8c9 3000 	str.w	r3, [r9]
    2826:	6823      	ldr	r3, [r4, #0]
    2828:	0699      	lsls	r1, r3, #26
    282a:	bf42      	ittt	mi
    282c:	f8d9 3000 	ldrmi.w	r3, [r9]
    2830:	3302      	addmi	r3, #2
    2832:	f8c9 3000 	strmi.w	r3, [r9]
    2836:	6825      	ldr	r5, [r4, #0]
    2838:	f015 0506 	ands.w	r5, r5, #6
    283c:	d107      	bne.n	284e <_printf_common+0x52>
    283e:	f104 0a19 	add.w	sl, r4, #25
    2842:	68e3      	ldr	r3, [r4, #12]
    2844:	f8d9 2000 	ldr.w	r2, [r9]
    2848:	1a9b      	subs	r3, r3, r2
    284a:	42ab      	cmp	r3, r5
    284c:	dc29      	bgt.n	28a2 <_printf_common+0xa6>
    284e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    2852:	6822      	ldr	r2, [r4, #0]
    2854:	3300      	adds	r3, #0
    2856:	bf18      	it	ne
    2858:	2301      	movne	r3, #1
    285a:	0692      	lsls	r2, r2, #26
    285c:	d42e      	bmi.n	28bc <_printf_common+0xc0>
    285e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    2862:	4639      	mov	r1, r7
    2864:	4630      	mov	r0, r6
    2866:	47c0      	blx	r8
    2868:	3001      	adds	r0, #1
    286a:	d021      	beq.n	28b0 <_printf_common+0xb4>
    286c:	6823      	ldr	r3, [r4, #0]
    286e:	68e5      	ldr	r5, [r4, #12]
    2870:	f003 0306 	and.w	r3, r3, #6
    2874:	2b04      	cmp	r3, #4
    2876:	bf18      	it	ne
    2878:	2500      	movne	r5, #0
    287a:	f8d9 2000 	ldr.w	r2, [r9]
    287e:	f04f 0900 	mov.w	r9, #0
    2882:	bf08      	it	eq
    2884:	1aad      	subeq	r5, r5, r2
    2886:	68a3      	ldr	r3, [r4, #8]
    2888:	6922      	ldr	r2, [r4, #16]
    288a:	bf08      	it	eq
    288c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2890:	4293      	cmp	r3, r2
    2892:	bfc4      	itt	gt
    2894:	1a9b      	subgt	r3, r3, r2
    2896:	18ed      	addgt	r5, r5, r3
    2898:	341a      	adds	r4, #26
    289a:	454d      	cmp	r5, r9
    289c:	d11a      	bne.n	28d4 <_printf_common+0xd8>
    289e:	2000      	movs	r0, #0
    28a0:	e008      	b.n	28b4 <_printf_common+0xb8>
    28a2:	2301      	movs	r3, #1
    28a4:	4652      	mov	r2, sl
    28a6:	4639      	mov	r1, r7
    28a8:	4630      	mov	r0, r6
    28aa:	47c0      	blx	r8
    28ac:	3001      	adds	r0, #1
    28ae:	d103      	bne.n	28b8 <_printf_common+0xbc>
    28b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28b8:	3501      	adds	r5, #1
    28ba:	e7c2      	b.n	2842 <_printf_common+0x46>
    28bc:	2030      	movs	r0, #48	; 0x30
    28be:	18e1      	adds	r1, r4, r3
    28c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    28c4:	1c5a      	adds	r2, r3, #1
    28c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    28ca:	4422      	add	r2, r4
    28cc:	3302      	adds	r3, #2
    28ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    28d2:	e7c4      	b.n	285e <_printf_common+0x62>
    28d4:	2301      	movs	r3, #1
    28d6:	4622      	mov	r2, r4
    28d8:	4639      	mov	r1, r7
    28da:	4630      	mov	r0, r6
    28dc:	47c0      	blx	r8
    28de:	3001      	adds	r0, #1
    28e0:	d0e6      	beq.n	28b0 <_printf_common+0xb4>
    28e2:	f109 0901 	add.w	r9, r9, #1
    28e6:	e7d8      	b.n	289a <_printf_common+0x9e>

000028e8 <_printf_i>:
    28e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    28ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    28f0:	460c      	mov	r4, r1
    28f2:	7e09      	ldrb	r1, [r1, #24]
    28f4:	b085      	sub	sp, #20
    28f6:	296e      	cmp	r1, #110	; 0x6e
    28f8:	4617      	mov	r7, r2
    28fa:	4606      	mov	r6, r0
    28fc:	4698      	mov	r8, r3
    28fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2900:	f000 80b3 	beq.w	2a6a <_printf_i+0x182>
    2904:	d822      	bhi.n	294c <_printf_i+0x64>
    2906:	2963      	cmp	r1, #99	; 0x63
    2908:	d036      	beq.n	2978 <_printf_i+0x90>
    290a:	d80a      	bhi.n	2922 <_printf_i+0x3a>
    290c:	2900      	cmp	r1, #0
    290e:	f000 80b9 	beq.w	2a84 <_printf_i+0x19c>
    2912:	2958      	cmp	r1, #88	; 0x58
    2914:	f000 8083 	beq.w	2a1e <_printf_i+0x136>
    2918:	f104 0542 	add.w	r5, r4, #66	; 0x42
    291c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    2920:	e032      	b.n	2988 <_printf_i+0xa0>
    2922:	2964      	cmp	r1, #100	; 0x64
    2924:	d001      	beq.n	292a <_printf_i+0x42>
    2926:	2969      	cmp	r1, #105	; 0x69
    2928:	d1f6      	bne.n	2918 <_printf_i+0x30>
    292a:	6820      	ldr	r0, [r4, #0]
    292c:	6813      	ldr	r3, [r2, #0]
    292e:	0605      	lsls	r5, r0, #24
    2930:	f103 0104 	add.w	r1, r3, #4
    2934:	d52a      	bpl.n	298c <_printf_i+0xa4>
    2936:	681b      	ldr	r3, [r3, #0]
    2938:	6011      	str	r1, [r2, #0]
    293a:	2b00      	cmp	r3, #0
    293c:	da03      	bge.n	2946 <_printf_i+0x5e>
    293e:	222d      	movs	r2, #45	; 0x2d
    2940:	425b      	negs	r3, r3
    2942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2946:	486f      	ldr	r0, [pc, #444]	; (2b04 <_printf_i+0x21c>)
    2948:	220a      	movs	r2, #10
    294a:	e039      	b.n	29c0 <_printf_i+0xd8>
    294c:	2973      	cmp	r1, #115	; 0x73
    294e:	f000 809d 	beq.w	2a8c <_printf_i+0x1a4>
    2952:	d808      	bhi.n	2966 <_printf_i+0x7e>
    2954:	296f      	cmp	r1, #111	; 0x6f
    2956:	d020      	beq.n	299a <_printf_i+0xb2>
    2958:	2970      	cmp	r1, #112	; 0x70
    295a:	d1dd      	bne.n	2918 <_printf_i+0x30>
    295c:	6823      	ldr	r3, [r4, #0]
    295e:	f043 0320 	orr.w	r3, r3, #32
    2962:	6023      	str	r3, [r4, #0]
    2964:	e003      	b.n	296e <_printf_i+0x86>
    2966:	2975      	cmp	r1, #117	; 0x75
    2968:	d017      	beq.n	299a <_printf_i+0xb2>
    296a:	2978      	cmp	r1, #120	; 0x78
    296c:	d1d4      	bne.n	2918 <_printf_i+0x30>
    296e:	2378      	movs	r3, #120	; 0x78
    2970:	4865      	ldr	r0, [pc, #404]	; (2b08 <_printf_i+0x220>)
    2972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    2976:	e055      	b.n	2a24 <_printf_i+0x13c>
    2978:	6813      	ldr	r3, [r2, #0]
    297a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    297e:	1d19      	adds	r1, r3, #4
    2980:	681b      	ldr	r3, [r3, #0]
    2982:	6011      	str	r1, [r2, #0]
    2984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2988:	2301      	movs	r3, #1
    298a:	e08c      	b.n	2aa6 <_printf_i+0x1be>
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	f010 0f40 	tst.w	r0, #64	; 0x40
    2992:	6011      	str	r1, [r2, #0]
    2994:	bf18      	it	ne
    2996:	b21b      	sxthne	r3, r3
    2998:	e7cf      	b.n	293a <_printf_i+0x52>
    299a:	6813      	ldr	r3, [r2, #0]
    299c:	6825      	ldr	r5, [r4, #0]
    299e:	1d18      	adds	r0, r3, #4
    29a0:	6010      	str	r0, [r2, #0]
    29a2:	0628      	lsls	r0, r5, #24
    29a4:	d501      	bpl.n	29aa <_printf_i+0xc2>
    29a6:	681b      	ldr	r3, [r3, #0]
    29a8:	e002      	b.n	29b0 <_printf_i+0xc8>
    29aa:	0668      	lsls	r0, r5, #25
    29ac:	d5fb      	bpl.n	29a6 <_printf_i+0xbe>
    29ae:	881b      	ldrh	r3, [r3, #0]
    29b0:	296f      	cmp	r1, #111	; 0x6f
    29b2:	bf14      	ite	ne
    29b4:	220a      	movne	r2, #10
    29b6:	2208      	moveq	r2, #8
    29b8:	4852      	ldr	r0, [pc, #328]	; (2b04 <_printf_i+0x21c>)
    29ba:	2100      	movs	r1, #0
    29bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    29c0:	6865      	ldr	r5, [r4, #4]
    29c2:	2d00      	cmp	r5, #0
    29c4:	60a5      	str	r5, [r4, #8]
    29c6:	f2c0 8095 	blt.w	2af4 <_printf_i+0x20c>
    29ca:	6821      	ldr	r1, [r4, #0]
    29cc:	f021 0104 	bic.w	r1, r1, #4
    29d0:	6021      	str	r1, [r4, #0]
    29d2:	2b00      	cmp	r3, #0
    29d4:	d13d      	bne.n	2a52 <_printf_i+0x16a>
    29d6:	2d00      	cmp	r5, #0
    29d8:	f040 808e 	bne.w	2af8 <_printf_i+0x210>
    29dc:	4665      	mov	r5, ip
    29de:	2a08      	cmp	r2, #8
    29e0:	d10b      	bne.n	29fa <_printf_i+0x112>
    29e2:	6823      	ldr	r3, [r4, #0]
    29e4:	07db      	lsls	r3, r3, #31
    29e6:	d508      	bpl.n	29fa <_printf_i+0x112>
    29e8:	6923      	ldr	r3, [r4, #16]
    29ea:	6862      	ldr	r2, [r4, #4]
    29ec:	429a      	cmp	r2, r3
    29ee:	bfde      	ittt	le
    29f0:	2330      	movle	r3, #48	; 0x30
    29f2:	f805 3c01 	strble.w	r3, [r5, #-1]
    29f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    29fa:	ebac 0305 	sub.w	r3, ip, r5
    29fe:	6123      	str	r3, [r4, #16]
    2a00:	f8cd 8000 	str.w	r8, [sp]
    2a04:	463b      	mov	r3, r7
    2a06:	aa03      	add	r2, sp, #12
    2a08:	4621      	mov	r1, r4
    2a0a:	4630      	mov	r0, r6
    2a0c:	f7ff fef6 	bl	27fc <_printf_common>
    2a10:	3001      	adds	r0, #1
    2a12:	d14d      	bne.n	2ab0 <_printf_i+0x1c8>
    2a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a18:	b005      	add	sp, #20
    2a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2a1e:	4839      	ldr	r0, [pc, #228]	; (2b04 <_printf_i+0x21c>)
    2a20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    2a24:	6813      	ldr	r3, [r2, #0]
    2a26:	6821      	ldr	r1, [r4, #0]
    2a28:	1d1d      	adds	r5, r3, #4
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	6015      	str	r5, [r2, #0]
    2a2e:	060a      	lsls	r2, r1, #24
    2a30:	d50b      	bpl.n	2a4a <_printf_i+0x162>
    2a32:	07ca      	lsls	r2, r1, #31
    2a34:	bf44      	itt	mi
    2a36:	f041 0120 	orrmi.w	r1, r1, #32
    2a3a:	6021      	strmi	r1, [r4, #0]
    2a3c:	b91b      	cbnz	r3, 2a46 <_printf_i+0x15e>
    2a3e:	6822      	ldr	r2, [r4, #0]
    2a40:	f022 0220 	bic.w	r2, r2, #32
    2a44:	6022      	str	r2, [r4, #0]
    2a46:	2210      	movs	r2, #16
    2a48:	e7b7      	b.n	29ba <_printf_i+0xd2>
    2a4a:	064d      	lsls	r5, r1, #25
    2a4c:	bf48      	it	mi
    2a4e:	b29b      	uxthmi	r3, r3
    2a50:	e7ef      	b.n	2a32 <_printf_i+0x14a>
    2a52:	4665      	mov	r5, ip
    2a54:	fbb3 f1f2 	udiv	r1, r3, r2
    2a58:	fb02 3311 	mls	r3, r2, r1, r3
    2a5c:	5cc3      	ldrb	r3, [r0, r3]
    2a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
    2a62:	460b      	mov	r3, r1
    2a64:	2900      	cmp	r1, #0
    2a66:	d1f5      	bne.n	2a54 <_printf_i+0x16c>
    2a68:	e7b9      	b.n	29de <_printf_i+0xf6>
    2a6a:	6813      	ldr	r3, [r2, #0]
    2a6c:	6825      	ldr	r5, [r4, #0]
    2a6e:	1d18      	adds	r0, r3, #4
    2a70:	6961      	ldr	r1, [r4, #20]
    2a72:	6010      	str	r0, [r2, #0]
    2a74:	0628      	lsls	r0, r5, #24
    2a76:	681b      	ldr	r3, [r3, #0]
    2a78:	d501      	bpl.n	2a7e <_printf_i+0x196>
    2a7a:	6019      	str	r1, [r3, #0]
    2a7c:	e002      	b.n	2a84 <_printf_i+0x19c>
    2a7e:	066a      	lsls	r2, r5, #25
    2a80:	d5fb      	bpl.n	2a7a <_printf_i+0x192>
    2a82:	8019      	strh	r1, [r3, #0]
    2a84:	2300      	movs	r3, #0
    2a86:	4665      	mov	r5, ip
    2a88:	6123      	str	r3, [r4, #16]
    2a8a:	e7b9      	b.n	2a00 <_printf_i+0x118>
    2a8c:	6813      	ldr	r3, [r2, #0]
    2a8e:	1d19      	adds	r1, r3, #4
    2a90:	6011      	str	r1, [r2, #0]
    2a92:	681d      	ldr	r5, [r3, #0]
    2a94:	6862      	ldr	r2, [r4, #4]
    2a96:	2100      	movs	r1, #0
    2a98:	4628      	mov	r0, r5
    2a9a:	f000 f8e1 	bl	2c60 <memchr>
    2a9e:	b108      	cbz	r0, 2aa4 <_printf_i+0x1bc>
    2aa0:	1b40      	subs	r0, r0, r5
    2aa2:	6060      	str	r0, [r4, #4]
    2aa4:	6863      	ldr	r3, [r4, #4]
    2aa6:	6123      	str	r3, [r4, #16]
    2aa8:	2300      	movs	r3, #0
    2aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2aae:	e7a7      	b.n	2a00 <_printf_i+0x118>
    2ab0:	6923      	ldr	r3, [r4, #16]
    2ab2:	462a      	mov	r2, r5
    2ab4:	4639      	mov	r1, r7
    2ab6:	4630      	mov	r0, r6
    2ab8:	47c0      	blx	r8
    2aba:	3001      	adds	r0, #1
    2abc:	d0aa      	beq.n	2a14 <_printf_i+0x12c>
    2abe:	6823      	ldr	r3, [r4, #0]
    2ac0:	079b      	lsls	r3, r3, #30
    2ac2:	d413      	bmi.n	2aec <_printf_i+0x204>
    2ac4:	68e0      	ldr	r0, [r4, #12]
    2ac6:	9b03      	ldr	r3, [sp, #12]
    2ac8:	4298      	cmp	r0, r3
    2aca:	bfb8      	it	lt
    2acc:	4618      	movlt	r0, r3
    2ace:	e7a3      	b.n	2a18 <_printf_i+0x130>
    2ad0:	2301      	movs	r3, #1
    2ad2:	464a      	mov	r2, r9
    2ad4:	4639      	mov	r1, r7
    2ad6:	4630      	mov	r0, r6
    2ad8:	47c0      	blx	r8
    2ada:	3001      	adds	r0, #1
    2adc:	d09a      	beq.n	2a14 <_printf_i+0x12c>
    2ade:	3501      	adds	r5, #1
    2ae0:	68e3      	ldr	r3, [r4, #12]
    2ae2:	9a03      	ldr	r2, [sp, #12]
    2ae4:	1a9b      	subs	r3, r3, r2
    2ae6:	42ab      	cmp	r3, r5
    2ae8:	dcf2      	bgt.n	2ad0 <_printf_i+0x1e8>
    2aea:	e7eb      	b.n	2ac4 <_printf_i+0x1dc>
    2aec:	2500      	movs	r5, #0
    2aee:	f104 0919 	add.w	r9, r4, #25
    2af2:	e7f5      	b.n	2ae0 <_printf_i+0x1f8>
    2af4:	2b00      	cmp	r3, #0
    2af6:	d1ac      	bne.n	2a52 <_printf_i+0x16a>
    2af8:	7803      	ldrb	r3, [r0, #0]
    2afa:	f104 0542 	add.w	r5, r4, #66	; 0x42
    2afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    2b02:	e76c      	b.n	29de <_printf_i+0xf6>
    2b04:	0000345d 	.word	0x0000345d
    2b08:	0000346e 	.word	0x0000346e

00002b0c <_sbrk_r>:
    2b0c:	b538      	push	{r3, r4, r5, lr}
    2b0e:	2300      	movs	r3, #0
    2b10:	4c05      	ldr	r4, [pc, #20]	; (2b28 <_sbrk_r+0x1c>)
    2b12:	4605      	mov	r5, r0
    2b14:	4608      	mov	r0, r1
    2b16:	6023      	str	r3, [r4, #0]
    2b18:	f000 f8ec 	bl	2cf4 <_sbrk>
    2b1c:	1c43      	adds	r3, r0, #1
    2b1e:	d102      	bne.n	2b26 <_sbrk_r+0x1a>
    2b20:	6823      	ldr	r3, [r4, #0]
    2b22:	b103      	cbz	r3, 2b26 <_sbrk_r+0x1a>
    2b24:	602b      	str	r3, [r5, #0]
    2b26:	bd38      	pop	{r3, r4, r5, pc}
    2b28:	200000a4 	.word	0x200000a4

00002b2c <__sread>:
    2b2c:	b510      	push	{r4, lr}
    2b2e:	460c      	mov	r4, r1
    2b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2b34:	f000 f8a4 	bl	2c80 <_read_r>
    2b38:	2800      	cmp	r0, #0
    2b3a:	bfab      	itete	ge
    2b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    2b3e:	89a3      	ldrhlt	r3, [r4, #12]
    2b40:	181b      	addge	r3, r3, r0
    2b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2b46:	bfac      	ite	ge
    2b48:	6563      	strge	r3, [r4, #84]	; 0x54
    2b4a:	81a3      	strhlt	r3, [r4, #12]
    2b4c:	bd10      	pop	{r4, pc}

00002b4e <__swrite>:
    2b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b52:	461f      	mov	r7, r3
    2b54:	898b      	ldrh	r3, [r1, #12]
    2b56:	4605      	mov	r5, r0
    2b58:	05db      	lsls	r3, r3, #23
    2b5a:	460c      	mov	r4, r1
    2b5c:	4616      	mov	r6, r2
    2b5e:	d505      	bpl.n	2b6c <__swrite+0x1e>
    2b60:	2302      	movs	r3, #2
    2b62:	2200      	movs	r2, #0
    2b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2b68:	f000 f868 	bl	2c3c <_lseek_r>
    2b6c:	89a3      	ldrh	r3, [r4, #12]
    2b6e:	4632      	mov	r2, r6
    2b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2b74:	81a3      	strh	r3, [r4, #12]
    2b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2b7a:	463b      	mov	r3, r7
    2b7c:	4628      	mov	r0, r5
    2b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2b82:	f000 b817 	b.w	2bb4 <_write_r>

00002b86 <__sseek>:
    2b86:	b510      	push	{r4, lr}
    2b88:	460c      	mov	r4, r1
    2b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2b8e:	f000 f855 	bl	2c3c <_lseek_r>
    2b92:	1c43      	adds	r3, r0, #1
    2b94:	89a3      	ldrh	r3, [r4, #12]
    2b96:	bf15      	itete	ne
    2b98:	6560      	strne	r0, [r4, #84]	; 0x54
    2b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2ba2:	81a3      	strheq	r3, [r4, #12]
    2ba4:	bf18      	it	ne
    2ba6:	81a3      	strhne	r3, [r4, #12]
    2ba8:	bd10      	pop	{r4, pc}

00002baa <__sclose>:
    2baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2bae:	f000 b813 	b.w	2bd8 <_close_r>
	...

00002bb4 <_write_r>:
    2bb4:	b538      	push	{r3, r4, r5, lr}
    2bb6:	4605      	mov	r5, r0
    2bb8:	4608      	mov	r0, r1
    2bba:	4611      	mov	r1, r2
    2bbc:	2200      	movs	r2, #0
    2bbe:	4c05      	ldr	r4, [pc, #20]	; (2bd4 <_write_r+0x20>)
    2bc0:	6022      	str	r2, [r4, #0]
    2bc2:	461a      	mov	r2, r3
    2bc4:	f7ff f8b2 	bl	1d2c <_write>
    2bc8:	1c43      	adds	r3, r0, #1
    2bca:	d102      	bne.n	2bd2 <_write_r+0x1e>
    2bcc:	6823      	ldr	r3, [r4, #0]
    2bce:	b103      	cbz	r3, 2bd2 <_write_r+0x1e>
    2bd0:	602b      	str	r3, [r5, #0]
    2bd2:	bd38      	pop	{r3, r4, r5, pc}
    2bd4:	200000a4 	.word	0x200000a4

00002bd8 <_close_r>:
    2bd8:	b538      	push	{r3, r4, r5, lr}
    2bda:	2300      	movs	r3, #0
    2bdc:	4c05      	ldr	r4, [pc, #20]	; (2bf4 <_close_r+0x1c>)
    2bde:	4605      	mov	r5, r0
    2be0:	4608      	mov	r0, r1
    2be2:	6023      	str	r3, [r4, #0]
    2be4:	f000 f85e 	bl	2ca4 <_close>
    2be8:	1c43      	adds	r3, r0, #1
    2bea:	d102      	bne.n	2bf2 <_close_r+0x1a>
    2bec:	6823      	ldr	r3, [r4, #0]
    2bee:	b103      	cbz	r3, 2bf2 <_close_r+0x1a>
    2bf0:	602b      	str	r3, [r5, #0]
    2bf2:	bd38      	pop	{r3, r4, r5, pc}
    2bf4:	200000a4 	.word	0x200000a4

00002bf8 <_fstat_r>:
    2bf8:	b538      	push	{r3, r4, r5, lr}
    2bfa:	2300      	movs	r3, #0
    2bfc:	4c06      	ldr	r4, [pc, #24]	; (2c18 <_fstat_r+0x20>)
    2bfe:	4605      	mov	r5, r0
    2c00:	4608      	mov	r0, r1
    2c02:	4611      	mov	r1, r2
    2c04:	6023      	str	r3, [r4, #0]
    2c06:	f000 f855 	bl	2cb4 <_fstat>
    2c0a:	1c43      	adds	r3, r0, #1
    2c0c:	d102      	bne.n	2c14 <_fstat_r+0x1c>
    2c0e:	6823      	ldr	r3, [r4, #0]
    2c10:	b103      	cbz	r3, 2c14 <_fstat_r+0x1c>
    2c12:	602b      	str	r3, [r5, #0]
    2c14:	bd38      	pop	{r3, r4, r5, pc}
    2c16:	bf00      	nop
    2c18:	200000a4 	.word	0x200000a4

00002c1c <_isatty_r>:
    2c1c:	b538      	push	{r3, r4, r5, lr}
    2c1e:	2300      	movs	r3, #0
    2c20:	4c05      	ldr	r4, [pc, #20]	; (2c38 <_isatty_r+0x1c>)
    2c22:	4605      	mov	r5, r0
    2c24:	4608      	mov	r0, r1
    2c26:	6023      	str	r3, [r4, #0]
    2c28:	f000 f84c 	bl	2cc4 <_isatty>
    2c2c:	1c43      	adds	r3, r0, #1
    2c2e:	d102      	bne.n	2c36 <_isatty_r+0x1a>
    2c30:	6823      	ldr	r3, [r4, #0]
    2c32:	b103      	cbz	r3, 2c36 <_isatty_r+0x1a>
    2c34:	602b      	str	r3, [r5, #0]
    2c36:	bd38      	pop	{r3, r4, r5, pc}
    2c38:	200000a4 	.word	0x200000a4

00002c3c <_lseek_r>:
    2c3c:	b538      	push	{r3, r4, r5, lr}
    2c3e:	4605      	mov	r5, r0
    2c40:	4608      	mov	r0, r1
    2c42:	4611      	mov	r1, r2
    2c44:	2200      	movs	r2, #0
    2c46:	4c05      	ldr	r4, [pc, #20]	; (2c5c <_lseek_r+0x20>)
    2c48:	6022      	str	r2, [r4, #0]
    2c4a:	461a      	mov	r2, r3
    2c4c:	f000 f842 	bl	2cd4 <_lseek>
    2c50:	1c43      	adds	r3, r0, #1
    2c52:	d102      	bne.n	2c5a <_lseek_r+0x1e>
    2c54:	6823      	ldr	r3, [r4, #0]
    2c56:	b103      	cbz	r3, 2c5a <_lseek_r+0x1e>
    2c58:	602b      	str	r3, [r5, #0]
    2c5a:	bd38      	pop	{r3, r4, r5, pc}
    2c5c:	200000a4 	.word	0x200000a4

00002c60 <memchr>:
    2c60:	b510      	push	{r4, lr}
    2c62:	b2c9      	uxtb	r1, r1
    2c64:	4402      	add	r2, r0
    2c66:	4290      	cmp	r0, r2
    2c68:	4603      	mov	r3, r0
    2c6a:	d101      	bne.n	2c70 <memchr+0x10>
    2c6c:	2300      	movs	r3, #0
    2c6e:	e003      	b.n	2c78 <memchr+0x18>
    2c70:	781c      	ldrb	r4, [r3, #0]
    2c72:	3001      	adds	r0, #1
    2c74:	428c      	cmp	r4, r1
    2c76:	d1f6      	bne.n	2c66 <memchr+0x6>
    2c78:	4618      	mov	r0, r3
    2c7a:	bd10      	pop	{r4, pc}

00002c7c <__malloc_lock>:
    2c7c:	4770      	bx	lr

00002c7e <__malloc_unlock>:
    2c7e:	4770      	bx	lr

00002c80 <_read_r>:
    2c80:	b538      	push	{r3, r4, r5, lr}
    2c82:	4605      	mov	r5, r0
    2c84:	4608      	mov	r0, r1
    2c86:	4611      	mov	r1, r2
    2c88:	2200      	movs	r2, #0
    2c8a:	4c05      	ldr	r4, [pc, #20]	; (2ca0 <_read_r+0x20>)
    2c8c:	6022      	str	r2, [r4, #0]
    2c8e:	461a      	mov	r2, r3
    2c90:	f000 f828 	bl	2ce4 <_read>
    2c94:	1c43      	adds	r3, r0, #1
    2c96:	d102      	bne.n	2c9e <_read_r+0x1e>
    2c98:	6823      	ldr	r3, [r4, #0]
    2c9a:	b103      	cbz	r3, 2c9e <_read_r+0x1e>
    2c9c:	602b      	str	r3, [r5, #0]
    2c9e:	bd38      	pop	{r3, r4, r5, pc}
    2ca0:	200000a4 	.word	0x200000a4

00002ca4 <_close>:
    2ca4:	2258      	movs	r2, #88	; 0x58
    2ca6:	4b02      	ldr	r3, [pc, #8]	; (2cb0 <_close+0xc>)
    2ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cac:	601a      	str	r2, [r3, #0]
    2cae:	4770      	bx	lr
    2cb0:	200000a4 	.word	0x200000a4

00002cb4 <_fstat>:
    2cb4:	2258      	movs	r2, #88	; 0x58
    2cb6:	4b02      	ldr	r3, [pc, #8]	; (2cc0 <_fstat+0xc>)
    2cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cbc:	601a      	str	r2, [r3, #0]
    2cbe:	4770      	bx	lr
    2cc0:	200000a4 	.word	0x200000a4

00002cc4 <_isatty>:
    2cc4:	2258      	movs	r2, #88	; 0x58
    2cc6:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <_isatty+0xc>)
    2cc8:	2000      	movs	r0, #0
    2cca:	601a      	str	r2, [r3, #0]
    2ccc:	4770      	bx	lr
    2cce:	bf00      	nop
    2cd0:	200000a4 	.word	0x200000a4

00002cd4 <_lseek>:
    2cd4:	2258      	movs	r2, #88	; 0x58
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <_lseek+0xc>)
    2cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cdc:	601a      	str	r2, [r3, #0]
    2cde:	4770      	bx	lr
    2ce0:	200000a4 	.word	0x200000a4

00002ce4 <_read>:
    2ce4:	2258      	movs	r2, #88	; 0x58
    2ce6:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <_read+0xc>)
    2ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cec:	601a      	str	r2, [r3, #0]
    2cee:	4770      	bx	lr
    2cf0:	200000a4 	.word	0x200000a4

00002cf4 <_sbrk>:
    2cf4:	4a04      	ldr	r2, [pc, #16]	; (2d08 <_sbrk+0x14>)
    2cf6:	4905      	ldr	r1, [pc, #20]	; (2d0c <_sbrk+0x18>)
    2cf8:	6813      	ldr	r3, [r2, #0]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	bf08      	it	eq
    2cfe:	460b      	moveq	r3, r1
    2d00:	4418      	add	r0, r3
    2d02:	6010      	str	r0, [r2, #0]
    2d04:	4618      	mov	r0, r3
    2d06:	4770      	bx	lr
    2d08:	20000070 	.word	0x20000070
    2d0c:	200000a8 	.word	0x200000a8

00002d10 <_exit>:
    2d10:	e7fe      	b.n	2d10 <_exit>
    2d12:	bf00      	nop

00002d14 <_init>:
    2d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d16:	bf00      	nop

00002d18 <_fini>:
    2d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d1a:	bf00      	nop
    2d1c:	6c6c6548 	.word	0x6c6c6548
    2d20:	6f77206f 	.word	0x6f77206f
    2d24:	0a646c72 	.word	0x0a646c72
	...
    2d30:	0040003f 	.word	0x0040003f
    2d34:	00260023 	.word	0x00260023
    2d38:	002e0028 	.word	0x002e0028
    2d3c:	00310055 	.word	0x00310055
    2d40:	00250033 	.word	0x00250033
    2d44:	4f525245 	.word	0x4f525245
    2d48:	203a2052 	.word	0x203a2052
    2d4c:	64756162 	.word	0x64756162
    2d50:	73657420 	.word	0x73657420
    2d54:	61662074 	.word	0x61662074
    2d58:	64656c69 	.word	0x64656c69
    2d5c:	78302820 	.word	0x78302820
    2d60:	0a297825 	.word	0x0a297825
    2d64:	00000000 	.word	0x00000000
    2d68:	6863202d 	.word	0x6863202d
    2d6c:	206b6365 	.word	0x206b6365
    2d70:	74696e69 	.word	0x74696e69
    2d74:	206c6169 	.word	0x206c6169
    2d78:	756c6176 	.word	0x756c6176
    2d7c:	00007365 	.word	0x00007365
    2d80:	4f525245 	.word	0x4f525245
    2d84:	203a2052 	.word	0x203a2052
    2d88:	74696e69 	.word	0x74696e69
    2d8c:	206c6169 	.word	0x206c6169
    2d90:	756c6176 	.word	0x756c6176
    2d94:	61662065 	.word	0x61662065
    2d98:	64656c69 	.word	0x64656c69
    2d9c:	78302820 	.word	0x78302820
    2da0:	0a297825 	.word	0x0a297825
    2da4:	00000000 	.word	0x00000000
    2da8:	706d6953 	.word	0x706d6953
    2dac:	7420656c 	.word	0x7420656c
    2db0:	00747365 	.word	0x00747365
    2db4:	4f525245 	.word	0x4f525245
    2db8:	49203a52 	.word	0x49203a52
    2dbc:	7475706e 	.word	0x7475706e
    2dc0:	72617020 	.word	0x72617020
    2dc4:	74656d61 	.word	0x74656d61
    2dc8:	69207265 	.word	0x69207265
    2dcc:	6c61766e 	.word	0x6c61766e
    2dd0:	69206469 	.word	0x69206469
    2dd4:	7566206e 	.word	0x7566206e
    2dd8:	6974636e 	.word	0x6974636e
    2ddc:	27206e6f 	.word	0x27206e6f
    2de0:	706d6973 	.word	0x706d6973
    2de4:	755f656c 	.word	0x755f656c
    2de8:	5f747261 	.word	0x5f747261
    2dec:	74736574 	.word	0x74736574
    2df0:	00002e27 	.word	0x00002e27
    2df4:	4f525245 	.word	0x4f525245
    2df8:	203a2052 	.word	0x203a2052
    2dfc:	706d6973 	.word	0x706d6973
    2e00:	7420656c 	.word	0x7420656c
    2e04:	20747365 	.word	0x20747365
    2e08:	6c696166 	.word	0x6c696166
    2e0c:	28206465 	.word	0x28206465
    2e10:	78257830 	.word	0x78257830
    2e14:	00000a29 	.word	0x00000a29
    2e18:	61746144 	.word	0x61746144
    2e1c:	61727420 	.word	0x61727420
    2e20:	6566736e 	.word	0x6566736e
    2e24:	65742072 	.word	0x65742072
    2e28:	000a7473 	.word	0x000a7473
    2e2c:	4f525245 	.word	0x4f525245
    2e30:	203a2052 	.word	0x203a2052
    2e34:	64756142 	.word	0x64756142
    2e38:	74617220 	.word	0x74617220
    2e3c:	65742065 	.word	0x65742065
    2e40:	66207473 	.word	0x66207473
    2e44:	656c6961 	.word	0x656c6961
    2e48:	30282064 	.word	0x30282064
    2e4c:	29782578 	.word	0x29782578
    2e50:	20746120 	.word	0x20746120
    2e54:	706f6f6c 	.word	0x706f6f6c
    2e58:	0a642520 	.word	0x0a642520
    2e5c:	00000000 	.word	0x00000000
    2e60:	6162202d 	.word	0x6162202d
    2e64:	69646475 	.word	0x69646475
    2e68:	203d2076 	.word	0x203d2076
    2e6c:	64206425 	.word	0x64206425
    2e70:	0a656e6f 	.word	0x0a656e6f
    2e74:	00000000 	.word	0x00000000
    2e78:	4f525245 	.word	0x4f525245
    2e7c:	203a2052 	.word	0x203a2052
    2e80:	64756142 	.word	0x64756142
    2e84:	74617220 	.word	0x74617220
    2e88:	2f722065 	.word	0x2f722065
    2e8c:	61662077 	.word	0x61662077
    2e90:	64656c69 	.word	0x64656c69
    2e94:	78302820 	.word	0x78302820
    2e98:	0a297825 	.word	0x0a297825
    2e9c:	00000000 	.word	0x00000000
    2ea0:	4f525245 	.word	0x4f525245
    2ea4:	49203a52 	.word	0x49203a52
    2ea8:	7475706e 	.word	0x7475706e
    2eac:	72617020 	.word	0x72617020
    2eb0:	74656d61 	.word	0x74656d61
    2eb4:	69207265 	.word	0x69207265
    2eb8:	6c61766e 	.word	0x6c61766e
    2ebc:	69206469 	.word	0x69206469
    2ec0:	7566206e 	.word	0x7566206e
    2ec4:	6974636e 	.word	0x6974636e
    2ec8:	27206e6f 	.word	0x27206e6f
    2ecc:	706d6973 	.word	0x706d6973
    2ed0:	755f656c 	.word	0x755f656c
    2ed4:	5f747261 	.word	0x5f747261
    2ed8:	64756162 	.word	0x64756162
    2edc:	7365745f 	.word	0x7365745f
    2ee0:	69735f74 	.word	0x69735f74
    2ee4:	656c676e 	.word	0x656c676e
    2ee8:	00002e27 	.word	0x00002e27
    2eec:	4f525245 	.word	0x4f525245
    2ef0:	49203a52 	.word	0x49203a52
    2ef4:	7475706e 	.word	0x7475706e
    2ef8:	72617020 	.word	0x72617020
    2efc:	74656d61 	.word	0x74656d61
    2f00:	69207265 	.word	0x69207265
    2f04:	6c61766e 	.word	0x6c61766e
    2f08:	69206469 	.word	0x69206469
    2f0c:	7566206e 	.word	0x7566206e
    2f10:	6974636e 	.word	0x6974636e
    2f14:	27206e6f 	.word	0x27206e6f
    2f18:	74726175 	.word	0x74726175
    2f1c:	616e655f 	.word	0x616e655f
    2f20:	5f656c62 	.word	0x5f656c62
    2f24:	6c727463 	.word	0x6c727463
    2f28:	7365745f 	.word	0x7365745f
    2f2c:	002e2774 	.word	0x002e2774
    2f30:	54524155 	.word	0x54524155
    2f34:	616e6520 	.word	0x616e6520
    2f38:	20656c62 	.word	0x20656c62
    2f3c:	74736574 	.word	0x74736574
    2f40:	00000000 	.word	0x00000000
    2f44:	6f62202d 	.word	0x6f62202d
    2f48:	54206874 	.word	0x54206874
    2f4c:	6e612058 	.word	0x6e612058
    2f50:	58522064 	.word	0x58522064
    2f54:	65726120 	.word	0x65726120
    2f58:	616e6520 	.word	0x616e6520
    2f5c:	64656c62 	.word	0x64656c62
    2f60:	00000000 	.word	0x00000000
    2f64:	5854202d 	.word	0x5854202d
    2f68:	73696420 	.word	0x73696420
    2f6c:	656c6261 	.word	0x656c6261
    2f70:	00000064 	.word	0x00000064
    2f74:	5852202d 	.word	0x5852202d
    2f78:	73696420 	.word	0x73696420
    2f7c:	656c6261 	.word	0x656c6261
    2f80:	00000064 	.word	0x00000064
    2f84:	4f525245 	.word	0x4f525245
    2f88:	203a2052 	.word	0x203a2052
    2f8c:	74726175 	.word	0x74726175
    2f90:	616e6520 	.word	0x616e6520
    2f94:	20656c62 	.word	0x20656c62
    2f98:	6c696166 	.word	0x6c696166
    2f9c:	28206465 	.word	0x28206465
    2fa0:	78257830 	.word	0x78257830
    2fa4:	00000a29 	.word	0x00000a29
    2fa8:	4f525245 	.word	0x4f525245
    2fac:	49203a52 	.word	0x49203a52
    2fb0:	7475706e 	.word	0x7475706e
    2fb4:	72617020 	.word	0x72617020
    2fb8:	74656d61 	.word	0x74656d61
    2fbc:	69207265 	.word	0x69207265
    2fc0:	6c61766e 	.word	0x6c61766e
    2fc4:	69206469 	.word	0x69206469
    2fc8:	7566206e 	.word	0x7566206e
    2fcc:	6974636e 	.word	0x6974636e
    2fd0:	27206e6f 	.word	0x27206e6f
    2fd4:	74726175 	.word	0x74726175
    2fd8:	5f78745f 	.word	0x5f78745f
    2fdc:	695f7872 	.word	0x695f7872
    2fe0:	745f7172 	.word	0x745f7172
    2fe4:	27747365 	.word	0x27747365
    2fe8:	0000002e 	.word	0x0000002e
    2fec:	5854202d 	.word	0x5854202d
    2ff0:	71726920 	.word	0x71726920
    2ff4:	73696420 	.word	0x73696420
    2ff8:	656c6261 	.word	0x656c6261
    2ffc:	00000000 	.word	0x00000000
    3000:	5852202d 	.word	0x5852202d
    3004:	71726920 	.word	0x71726920
    3008:	616e6520 	.word	0x616e6520
    300c:	00656c62 	.word	0x00656c62
    3010:	5852202d 	.word	0x5852202d
    3014:	71726920 	.word	0x71726920
    3018:	73696420 	.word	0x73696420
    301c:	656c6261 	.word	0x656c6261
    3020:	00000000 	.word	0x00000000
    3024:	4f525245 	.word	0x4f525245
    3028:	203a2052 	.word	0x203a2052
    302c:	74726175 	.word	0x74726175
    3030:	746e6920 	.word	0x746e6920
    3034:	75727265 	.word	0x75727265
    3038:	65207470 	.word	0x65207470
    303c:	6c62616e 	.word	0x6c62616e
    3040:	61662065 	.word	0x61662065
    3044:	64656c69 	.word	0x64656c69
    3048:	78302820 	.word	0x78302820
    304c:	0a297825 	.word	0x0a297825
    3050:	00000000 	.word	0x00000000
    3054:	5854202d 	.word	0x5854202d
    3058:	71726920 	.word	0x71726920
    305c:	616e6520 	.word	0x616e6520
    3060:	00656c62 	.word	0x00656c62
    3064:	54524155 	.word	0x54524155
    3068:	20585420 	.word	0x20585420
    306c:	58522026 	.word	0x58522026
    3070:	51524920 	.word	0x51524920
    3074:	73657420 	.word	0x73657420
    3078:	00000074 	.word	0x00000074
    307c:	4f525245 	.word	0x4f525245
    3080:	49203a52 	.word	0x49203a52
    3084:	7475706e 	.word	0x7475706e
    3088:	72617020 	.word	0x72617020
    308c:	74656d61 	.word	0x74656d61
    3090:	69207265 	.word	0x69207265
    3094:	6c61766e 	.word	0x6c61766e
    3098:	69206469 	.word	0x69206469
    309c:	7566206e 	.word	0x7566206e
    30a0:	6974636e 	.word	0x6974636e
    30a4:	27206e6f 	.word	0x27206e6f
    30a8:	74726175 	.word	0x74726175
    30ac:	5f78745f 	.word	0x5f78745f
    30b0:	6f5f7872 	.word	0x6f5f7872
    30b4:	66726576 	.word	0x66726576
    30b8:	5f776f6c 	.word	0x5f776f6c
    30bc:	74736574 	.word	0x74736574
    30c0:	00002e27 	.word	0x00002e27
    30c4:	54524155 	.word	0x54524155
    30c8:	20585420 	.word	0x20585420
    30cc:	58522026 	.word	0x58522026
    30d0:	65766f20 	.word	0x65766f20
    30d4:	6f6c6672 	.word	0x6f6c6672
    30d8:	65742077 	.word	0x65742077
    30dc:	00007473 	.word	0x00007473
    30e0:	5854202d 	.word	0x5854202d
    30e4:	74697720 	.word	0x74697720
    30e8:	74756f68 	.word	0x74756f68
    30ec:	65766f20 	.word	0x65766f20
    30f0:	6f6c6672 	.word	0x6f6c6672
    30f4:	00000077 	.word	0x00000077
    30f8:	5854202d 	.word	0x5854202d
    30fc:	74697720 	.word	0x74697720
    3100:	766f2068 	.word	0x766f2068
    3104:	6c667265 	.word	0x6c667265
    3108:	0000776f 	.word	0x0000776f
    310c:	5852202d 	.word	0x5852202d
    3110:	65766f20 	.word	0x65766f20
    3114:	6f6c6672 	.word	0x6f6c6672
    3118:	00000077 	.word	0x00000077
    311c:	4f525245 	.word	0x4f525245
    3120:	203a2052 	.word	0x203a2052
    3124:	74726175 	.word	0x74726175
    3128:	65766f20 	.word	0x65766f20
    312c:	6f6c6672 	.word	0x6f6c6672
    3130:	65742077 	.word	0x65742077
    3134:	66207473 	.word	0x66207473
    3138:	656c6961 	.word	0x656c6961
    313c:	30282064 	.word	0x30282064
    3140:	29782578 	.word	0x29782578
    3144:	0000000a 	.word	0x0000000a
    3148:	4f525245 	.word	0x4f525245
    314c:	49203a52 	.word	0x49203a52
    3150:	7475706e 	.word	0x7475706e
    3154:	72617020 	.word	0x72617020
    3158:	74656d61 	.word	0x74656d61
    315c:	69207265 	.word	0x69207265
    3160:	6c61766e 	.word	0x6c61766e
    3164:	69206469 	.word	0x69206469
    3168:	7566206e 	.word	0x7566206e
    316c:	6974636e 	.word	0x6974636e
    3170:	27206e6f 	.word	0x27206e6f
    3174:	74726175 	.word	0x74726175
    3178:	746e695f 	.word	0x746e695f
    317c:	75727265 	.word	0x75727265
    3180:	745f7470 	.word	0x745f7470
    3184:	27747365 	.word	0x27747365
    3188:	0000002e 	.word	0x0000002e
    318c:	4f525245 	.word	0x4f525245
    3190:	203a2052 	.word	0x203a2052
    3194:	65746e69 	.word	0x65746e69
    3198:	70757272 	.word	0x70757272
    319c:	6f632074 	.word	0x6f632074
    31a0:	63656e6e 	.word	0x63656e6e
    31a4:	69766974 	.word	0x69766974
    31a8:	74207974 	.word	0x74207974
    31ac:	20747365 	.word	0x20747365
    31b0:	6c696166 	.word	0x6c696166
    31b4:	28206465 	.word	0x28206465
    31b8:	78257830 	.word	0x78257830
    31bc:	00000a29 	.word	0x00000a29
    31c0:	726f430a 	.word	0x726f430a
    31c4:	2d786574 	.word	0x2d786574
    31c8:	4420334d 	.word	0x4420334d
    31cc:	67697365 	.word	0x67697365
    31d0:	6174536e 	.word	0x6174536e
    31d4:	2d207472 	.word	0x2d207472
    31d8:	52415520 	.word	0x52415520
    31dc:	65542054 	.word	0x65542054
    31e0:	2d207473 	.word	0x2d207473
    31e4:	76657220 	.word	0x76657220
    31e8:	6f697369 	.word	0x6f697369
    31ec:	5224206e 	.word	0x5224206e
    31f0:	73697665 	.word	0x73697665
    31f4:	3a6e6f69 	.word	0x3a6e6f69
    31f8:	33343220 	.word	0x33343220
    31fc:	20333834 	.word	0x20333834
    3200:	00000a24 	.word	0x00000a24
    3204:	5241550a 	.word	0x5241550a
    3208:	20322054 	.word	0x20322054
    320c:	20726f66 	.word	0x20726f66
    3210:	6e617274 	.word	0x6e617274
    3214:	74696d73 	.word	0x74696d73
    3218:	4155202c 	.word	0x4155202c
    321c:	33205452 	.word	0x33205452
    3220:	726f6620 	.word	0x726f6620
    3224:	63657220 	.word	0x63657220
    3228:	65766965 	.word	0x65766965
    322c:	0000000a 	.word	0x0000000a
    3230:	5241550a 	.word	0x5241550a
    3234:	20332054 	.word	0x20332054
    3238:	20726f66 	.word	0x20726f66
    323c:	6e617274 	.word	0x6e617274
    3240:	74696d73 	.word	0x74696d73
    3244:	4155202c 	.word	0x4155202c
    3248:	32205452 	.word	0x32205452
    324c:	726f6620 	.word	0x726f6620
    3250:	63657220 	.word	0x63657220
    3254:	65766965 	.word	0x65766965
    3258:	0000000a 	.word	0x0000000a
    325c:	54202a2a 	.word	0x54202a2a
    3260:	20545345 	.word	0x20545345
    3264:	50494b53 	.word	0x50494b53
    3268:	20444550 	.word	0x20444550
    326c:	55202a2a 	.word	0x55202a2a
    3270:	20545241 	.word	0x20545241
    3274:	202f2031 	.word	0x202f2031
    3278:	54524155 	.word	0x54524155
    327c:	2f203220 	.word	0x2f203220
    3280:	52415520 	.word	0x52415520
    3284:	20332054 	.word	0x20332054
    3288:	4155202f 	.word	0x4155202f
    328c:	34205452 	.word	0x34205452
    3290:	47202f20 	.word	0x47202f20
    3294:	204f4950 	.word	0x204f4950
    3298:	202f2030 	.word	0x202f2030
    329c:	4f495047 	.word	0x4f495047
    32a0:	6e203120 	.word	0x6e203120
    32a4:	6120746f 	.word	0x6120746f
    32a8:	6c696176 	.word	0x6c696176
    32ac:	656c6261 	.word	0x656c6261
    32b0:	00000000 	.word	0x00000000
    32b4:	202a2a0a 	.word	0x202a2a0a
    32b8:	54534554 	.word	0x54534554
    32bc:	53415020 	.word	0x53415020
    32c0:	20444553 	.word	0x20444553
    32c4:	00002a2a 	.word	0x00002a2a
    32c8:	202a2a0a 	.word	0x202a2a0a
    32cc:	54534554 	.word	0x54534554
    32d0:	49414620 	.word	0x49414620
    32d4:	2044454c 	.word	0x2044454c
    32d8:	2c202a2a 	.word	0x2c202a2a
    32dc:	72724520 	.word	0x72724520
    32e0:	6320726f 	.word	0x6320726f
    32e4:	2065646f 	.word	0x2065646f
    32e8:	3028203d 	.word	0x3028203d
    32ec:	29782578 	.word	0x29782578
    32f0:	0000000a 	.word	0x0000000a
    32f4:	4f525245 	.word	0x4f525245
    32f8:	203a2052 	.word	0x203a2052
    32fc:	54524155 	.word	0x54524155
    3300:	68203020 	.word	0x68203020
    3304:	6c646e61 	.word	0x6c646e61
    3308:	66207265 	.word	0x66207265
    330c:	656c6961 	.word	0x656c6961
    3310:	30282064 	.word	0x30282064
    3314:	29782578 	.word	0x29782578
    3318:	0000000a 	.word	0x0000000a
    331c:	4f525245 	.word	0x4f525245
    3320:	203a2052 	.word	0x203a2052
    3324:	54524155 	.word	0x54524155
    3328:	68203320 	.word	0x68203320
    332c:	6c646e61 	.word	0x6c646e61
    3330:	66207265 	.word	0x66207265
    3334:	656c6961 	.word	0x656c6961
    3338:	30282064 	.word	0x30282064
    333c:	29782578 	.word	0x29782578
    3340:	0000000a 	.word	0x0000000a
    3344:	4f525245 	.word	0x4f525245
    3348:	203a2052 	.word	0x203a2052
    334c:	54524155 	.word	0x54524155
    3350:	68203220 	.word	0x68203220
    3354:	6c646e61 	.word	0x6c646e61
    3358:	66207265 	.word	0x66207265
    335c:	656c6961 	.word	0x656c6961
    3360:	30282064 	.word	0x30282064
    3364:	29782578 	.word	0x29782578
    3368:	0000000a 	.word	0x0000000a
    336c:	4f525245 	.word	0x4f525245
    3370:	203a2052 	.word	0x203a2052
    3374:	54524155 	.word	0x54524155
    3378:	68203120 	.word	0x68203120
    337c:	6c646e61 	.word	0x6c646e61
    3380:	66207265 	.word	0x66207265
    3384:	656c6961 	.word	0x656c6961
    3388:	30282064 	.word	0x30282064
    338c:	29782578 	.word	0x29782578
    3390:	0000000a 	.word	0x0000000a
    3394:	4f525245 	.word	0x4f525245
    3398:	203a2052 	.word	0x203a2052
    339c:	54524155 	.word	0x54524155
    33a0:	68203420 	.word	0x68203420
    33a4:	6c646e61 	.word	0x6c646e61
    33a8:	66207265 	.word	0x66207265
    33ac:	656c6961 	.word	0x656c6961
    33b0:	30282064 	.word	0x30282064
    33b4:	29782578 	.word	0x29782578
    33b8:	0000000a 	.word	0x0000000a
    33bc:	4f525245 	.word	0x4f525245
    33c0:	203a2052 	.word	0x203a2052
    33c4:	54524155 	.word	0x54524155
    33c8:	65766f20 	.word	0x65766f20
    33cc:	6e757272 	.word	0x6e757272
    33d0:	6e616820 	.word	0x6e616820
    33d4:	72656c64 	.word	0x72656c64
    33d8:	69616620 	.word	0x69616620
    33dc:	2064656c 	.word	0x2064656c
    33e0:	25783028 	.word	0x25783028
    33e4:	000a2978 	.word	0x000a2978

000033e8 <_global_impure_ptr>:
    33e8:	20000008                                ... 

000033ec <__sf_fake_stderr>:
	...

0000340c <__sf_fake_stdin>:
	...

0000342c <__sf_fake_stdout>:
	...
    344c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    345c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    346c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    347c:	                                         ef.
