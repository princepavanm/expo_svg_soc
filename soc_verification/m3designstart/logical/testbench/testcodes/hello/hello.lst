
hello.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	2000fc00 	.word	0x2000fc00
   4:	00000125 	.word	0x00000125
   8:	0000016d 	.word	0x0000016d
   c:	0000016f 	.word	0x0000016f
  10:	00000171 	.word	0x00000171
  14:	00000173 	.word	0x00000173
  18:	00000175 	.word	0x00000175
	...
  2c:	00000177 	.word	0x00000177
  30:	00000179 	.word	0x00000179
  34:	00000000 	.word	0x00000000
  38:	0000017b 	.word	0x0000017b
  3c:	0000017d 	.word	0x0000017d
  40:	0000017f 	.word	0x0000017f
  44:	00000181 	.word	0x00000181
  48:	00000183 	.word	0x00000183
  4c:	00000185 	.word	0x00000185
  50:	00000187 	.word	0x00000187
  54:	00000189 	.word	0x00000189
  58:	0000018b 	.word	0x0000018b
  5c:	0000018d 	.word	0x0000018d
  60:	0000018f 	.word	0x0000018f
  64:	00000191 	.word	0x00000191
  68:	00000193 	.word	0x00000193
  6c:	00000195 	.word	0x00000195
  70:	00000197 	.word	0x00000197
  74:	00000199 	.word	0x00000199
  78:	0000019b 	.word	0x0000019b
  7c:	0000019d 	.word	0x0000019d
  80:	0000019f 	.word	0x0000019f
  84:	000001a1 	.word	0x000001a1
  88:	000001a3 	.word	0x000001a3
  8c:	000001a5 	.word	0x000001a5
  90:	000001a7 	.word	0x000001a7
  94:	000001a9 	.word	0x000001a9
  98:	000001ab 	.word	0x000001ab
  9c:	000001ad 	.word	0x000001ad
  a0:	000001af 	.word	0x000001af
  a4:	000001b1 	.word	0x000001b1
  a8:	000001b3 	.word	0x000001b3
  ac:	000001b5 	.word	0x000001b5
  b0:	000001b7 	.word	0x000001b7
  b4:	000001b9 	.word	0x000001b9
  b8:	000001bb 	.word	0x000001bb
  bc:	000001bd 	.word	0x000001bd
  c0:	000001bf 	.word	0x000001bf
  c4:	000001c1 	.word	0x000001c1
  c8:	000001c3 	.word	0x000001c3
  cc:	000001c5 	.word	0x000001c5
  d0:	000001c7 	.word	0x000001c7
  d4:	000001c9 	.word	0x000001c9
  d8:	000001cb 	.word	0x000001cb
  dc:	000001cd 	.word	0x000001cd
  e0:	000001cf 	.word	0x000001cf
  e4:	000001d1 	.word	0x000001d1
  e8:	000001d3 	.word	0x000001d3
  ec:	000001d5 	.word	0x000001d5
  f0:	000001d7 	.word	0x000001d7
  f4:	000001d9 	.word	0x000001d9
  f8:	000001db 	.word	0x000001db
  fc:	000001dd 	.word	0x000001dd
 100:	000001df 	.word	0x000001df
 104:	000001e1 	.word	0x000001e1
 108:	000001e3 	.word	0x000001e3
 10c:	000001e5 	.word	0x000001e5
 110:	000001e7 	.word	0x000001e7
 114:	000001e9 	.word	0x000001e9
 118:	000001eb 	.word	0x000001eb
 11c:	000001ed 	.word	0x000001ed
 120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
 124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
 126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
 128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
 12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
 12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
 12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
 130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
 132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
 134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
 136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
 138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
 13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
 13c:	4291      	cmp	r1, r2
    itt    lt
 13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
 140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
 144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
 146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
 148:	4780      	blx	r0
#endif

    bl    main
 14a:	f000 f851 	bl	1f0 <main>
    bl    exit
 14e:	f000 f8a3 	bl	298 <exit>
 152:	0000      	.short	0x0000
    ldr    r1, =__etext
 154:	00000cb4 	.word	0x00000cb4
    ldr    r2, =__data_start__
 158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
 15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
 160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
 164:	20000078 	.word	0x20000078
    ldr     r0,=SystemInit
 168:	00000289 	.word	0x00000289

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
 16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
 16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
 170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
 172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
 174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
 176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
 178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
 17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
 17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
 17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
 180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
 182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
 184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
 186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
 188:	e7fe      	b.n	188 <RTC_Handler>

0000018a <PORT0_COMB_Handler>:
    def_default_handler    PORT0_COMB_Handler
 18a:	e7fe      	b.n	18a <PORT0_COMB_Handler>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
 18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>

0000018e <TIMER0_Handler>:
    def_default_handler    TIMER0_Handler
 18e:	e7fe      	b.n	18e <TIMER0_Handler>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
 190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
 192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
 194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
 196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
 198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
 19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
 19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
 19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
 1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
 1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
 1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
 1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
 1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
 1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>

000001ac <PORT0_7_Handler>:
    def_default_handler    PORT0_7_Handler
 1ac:	e7fe      	b.n	1ac <PORT0_7_Handler>

000001ae <PORT0_8_Handler>:
    def_default_handler    PORT0_8_Handler
 1ae:	e7fe      	b.n	1ae <PORT0_8_Handler>

000001b0 <PORT0_9_Handler>:
    def_default_handler    PORT0_9_Handler
 1b0:	e7fe      	b.n	1b0 <PORT0_9_Handler>

000001b2 <PORT0_10_Handler>:
    def_default_handler    PORT0_10_Handler
 1b2:	e7fe      	b.n	1b2 <PORT0_10_Handler>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
 1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
 1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
 1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
 1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
 1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
 1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
 1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
 1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
 1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
 1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
 1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
 1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
 1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
 1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
 1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
 1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
 1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
 1d6:	e7fe      	b.n	1d6 <TRNG_Handler>

000001d8 <UART2_Handler>:
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
 1d8:	e7fe      	b.n	1d8 <UART2_Handler>

000001da <UART3_Handler>:
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
 1da:	e7fe      	b.n	1da <UART3_Handler>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
 1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
 1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
 1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
 1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
 1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
 1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
 1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
 1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
 1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
 1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <main>:
#include "CM3DS_MPS2.h"
#include <stdio.h>
#include "uart_stdout.h"

int main (void)
{
 1f0:	b508      	push	{r3, lr}
  // UART init
  UartStdOutInit();
 1f2:	f000 f821 	bl	238 <UartStdOutInit>

  printf("Hello world\n");
 1f6:	4806      	ldr	r0, [pc, #24]	; (210 <Stack_Size+0x10>)
 1f8:	f000 f8c6 	bl	388 <puts>
  printf("Hello sarvakama_solution\n");
 1fc:	4805      	ldr	r0, [pc, #20]	; (214 <Stack_Size+0x14>)
 1fe:	f000 f8c3 	bl	388 <puts>
      

  printf("** TEST PASSED **\n");
 202:	4805      	ldr	r0, [pc, #20]	; (218 <Stack_Size+0x18>)
 204:	f000 f8c0 	bl	388 <puts>

  // End simulation
  UartEndSimulation();
 208:	f000 f82e 	bl	268 <UartEndSimulation>

  return 0;
}
 20c:	2000      	movs	r0, #0
 20e:	bd08      	pop	{r3, pc}
 210:	00000c14 	.word	0x00000c14
 214:	00000c20 	.word	0x00000c20
 218:	00000c3c 	.word	0x00000c3c

0000021c <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
 21c:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
 21e:	4616      	mov	r6, r2
 220:	b13a      	cbz	r2, 232 <_write+0x16>
 222:	1e4c      	subs	r4, r1, #1
 224:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
 226:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 22a:	f000 f80d 	bl	248 <UartPutc>
  for (i=0; i<len;i++) {
 22e:	42ac      	cmp	r4, r5
 230:	d1f9      	bne.n	226 <_write+0xa>
    }
  return len;
}
 232:	4630      	mov	r0, r6
 234:	bd70      	pop	{r4, r5, r6, pc}
 236:	bf00      	nop

00000238 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
 238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 23c:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
 23e:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
 240:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
 242:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
 244:	4770      	bx	lr
 246:	bf00      	nop

00000248 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
 248:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 24c:	6853      	ldr	r3, [r2, #4]
 24e:	07db      	lsls	r3, r3, #31
 250:	d4fc      	bmi.n	24c <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
 252:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
 254:	4770      	bx	lr
 256:	bf00      	nop

00000258 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
 258:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 25c:	6853      	ldr	r3, [r2, #4]
 25e:	079b      	lsls	r3, r3, #30
 260:	d5fc      	bpl.n	25c <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
 262:	6810      	ldr	r0, [r2, #0]
}
 264:	b2c0      	uxtb	r0, r0
 266:	4770      	bx	lr

00000268 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
 268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 26c:	685a      	ldr	r2, [r3, #4]
 26e:	07d2      	lsls	r2, r2, #31
 270:	d4fc      	bmi.n	26c <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
 272:	2204      	movs	r2, #4
 274:	601a      	str	r2, [r3, #0]
 276:	e7fe      	b.n	276 <UartEndSimulation+0xe>

00000278 <SystemCoreClockUpdate>:
 278:	4b01      	ldr	r3, [pc, #4]	; (280 <SystemCoreClockUpdate+0x8>)
 27a:	4a02      	ldr	r2, [pc, #8]	; (284 <SystemCoreClockUpdate+0xc>)
 27c:	601a      	str	r2, [r3, #0]
 27e:	4770      	bx	lr
 280:	20000000 	.word	0x20000000
 284:	017d7840 	.word	0x017d7840

00000288 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
 288:	4b01      	ldr	r3, [pc, #4]	; (290 <SystemInit+0x8>)
 28a:	4a02      	ldr	r2, [pc, #8]	; (294 <SystemInit+0xc>)
 28c:	601a      	str	r2, [r3, #0]

}
 28e:	4770      	bx	lr
 290:	20000000 	.word	0x20000000
 294:	017d7840 	.word	0x017d7840

00000298 <exit>:
 298:	b508      	push	{r3, lr}
 29a:	4b07      	ldr	r3, [pc, #28]	; (2b8 <exit+0x20>)
 29c:	4604      	mov	r4, r0
 29e:	b113      	cbz	r3, 2a6 <exit+0xe>
 2a0:	2100      	movs	r1, #0
 2a2:	f3af 8000 	nop.w
 2a6:	4b05      	ldr	r3, [pc, #20]	; (2bc <exit+0x24>)
 2a8:	6818      	ldr	r0, [r3, #0]
 2aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 2ac:	b103      	cbz	r3, 2b0 <exit+0x18>
 2ae:	4798      	blx	r3
 2b0:	4620      	mov	r0, r4
 2b2:	f000 fca9 	bl	c08 <_exit>
 2b6:	bf00      	nop
 2b8:	00000000 	.word	0x00000000
 2bc:	00000c50 	.word	0x00000c50

000002c0 <memset>:
 2c0:	4603      	mov	r3, r0
 2c2:	4402      	add	r2, r0
 2c4:	4293      	cmp	r3, r2
 2c6:	d100      	bne.n	2ca <memset+0xa>
 2c8:	4770      	bx	lr
 2ca:	f803 1b01 	strb.w	r1, [r3], #1
 2ce:	e7f9      	b.n	2c4 <memset+0x4>

000002d0 <_puts_r>:
 2d0:	b570      	push	{r4, r5, r6, lr}
 2d2:	460e      	mov	r6, r1
 2d4:	4605      	mov	r5, r0
 2d6:	b118      	cbz	r0, 2e0 <_puts_r+0x10>
 2d8:	6983      	ldr	r3, [r0, #24]
 2da:	b90b      	cbnz	r3, 2e0 <_puts_r+0x10>
 2dc:	f000 fa0c 	bl	6f8 <__sinit>
 2e0:	69ab      	ldr	r3, [r5, #24]
 2e2:	68ac      	ldr	r4, [r5, #8]
 2e4:	b913      	cbnz	r3, 2ec <_puts_r+0x1c>
 2e6:	4628      	mov	r0, r5
 2e8:	f000 fa06 	bl	6f8 <__sinit>
 2ec:	4b23      	ldr	r3, [pc, #140]	; (37c <_puts_r+0xac>)
 2ee:	429c      	cmp	r4, r3
 2f0:	d117      	bne.n	322 <_puts_r+0x52>
 2f2:	686c      	ldr	r4, [r5, #4]
 2f4:	89a3      	ldrh	r3, [r4, #12]
 2f6:	071b      	lsls	r3, r3, #28
 2f8:	d51d      	bpl.n	336 <_puts_r+0x66>
 2fa:	6923      	ldr	r3, [r4, #16]
 2fc:	b1db      	cbz	r3, 336 <_puts_r+0x66>
 2fe:	3e01      	subs	r6, #1
 300:	68a3      	ldr	r3, [r4, #8]
 302:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 306:	3b01      	subs	r3, #1
 308:	60a3      	str	r3, [r4, #8]
 30a:	b9e9      	cbnz	r1, 348 <_puts_r+0x78>
 30c:	2b00      	cmp	r3, #0
 30e:	da2e      	bge.n	36e <_puts_r+0x9e>
 310:	4622      	mov	r2, r4
 312:	210a      	movs	r1, #10
 314:	4628      	mov	r0, r5
 316:	f000 f83f 	bl	398 <__swbuf_r>
 31a:	3001      	adds	r0, #1
 31c:	d011      	beq.n	342 <_puts_r+0x72>
 31e:	200a      	movs	r0, #10
 320:	e011      	b.n	346 <_puts_r+0x76>
 322:	4b17      	ldr	r3, [pc, #92]	; (380 <_puts_r+0xb0>)
 324:	429c      	cmp	r4, r3
 326:	d101      	bne.n	32c <_puts_r+0x5c>
 328:	68ac      	ldr	r4, [r5, #8]
 32a:	e7e3      	b.n	2f4 <_puts_r+0x24>
 32c:	4b15      	ldr	r3, [pc, #84]	; (384 <_puts_r+0xb4>)
 32e:	429c      	cmp	r4, r3
 330:	bf08      	it	eq
 332:	68ec      	ldreq	r4, [r5, #12]
 334:	e7de      	b.n	2f4 <_puts_r+0x24>
 336:	4621      	mov	r1, r4
 338:	4628      	mov	r0, r5
 33a:	f000 f87f 	bl	43c <__swsetup_r>
 33e:	2800      	cmp	r0, #0
 340:	d0dd      	beq.n	2fe <_puts_r+0x2e>
 342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 346:	bd70      	pop	{r4, r5, r6, pc}
 348:	2b00      	cmp	r3, #0
 34a:	da04      	bge.n	356 <_puts_r+0x86>
 34c:	69a2      	ldr	r2, [r4, #24]
 34e:	429a      	cmp	r2, r3
 350:	dc06      	bgt.n	360 <_puts_r+0x90>
 352:	290a      	cmp	r1, #10
 354:	d004      	beq.n	360 <_puts_r+0x90>
 356:	6823      	ldr	r3, [r4, #0]
 358:	1c5a      	adds	r2, r3, #1
 35a:	6022      	str	r2, [r4, #0]
 35c:	7019      	strb	r1, [r3, #0]
 35e:	e7cf      	b.n	300 <_puts_r+0x30>
 360:	4622      	mov	r2, r4
 362:	4628      	mov	r0, r5
 364:	f000 f818 	bl	398 <__swbuf_r>
 368:	3001      	adds	r0, #1
 36a:	d1c9      	bne.n	300 <_puts_r+0x30>
 36c:	e7e9      	b.n	342 <_puts_r+0x72>
 36e:	200a      	movs	r0, #10
 370:	6823      	ldr	r3, [r4, #0]
 372:	1c5a      	adds	r2, r3, #1
 374:	6022      	str	r2, [r4, #0]
 376:	7018      	strb	r0, [r3, #0]
 378:	e7e5      	b.n	346 <_puts_r+0x76>
 37a:	bf00      	nop
 37c:	00000c74 	.word	0x00000c74
 380:	00000c94 	.word	0x00000c94
 384:	00000c54 	.word	0x00000c54

00000388 <puts>:
 388:	4b02      	ldr	r3, [pc, #8]	; (394 <puts+0xc>)
 38a:	4601      	mov	r1, r0
 38c:	6818      	ldr	r0, [r3, #0]
 38e:	f7ff bf9f 	b.w	2d0 <_puts_r>
 392:	bf00      	nop
 394:	20000004 	.word	0x20000004

00000398 <__swbuf_r>:
 398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 39a:	460e      	mov	r6, r1
 39c:	4614      	mov	r4, r2
 39e:	4605      	mov	r5, r0
 3a0:	b118      	cbz	r0, 3aa <__swbuf_r+0x12>
 3a2:	6983      	ldr	r3, [r0, #24]
 3a4:	b90b      	cbnz	r3, 3aa <__swbuf_r+0x12>
 3a6:	f000 f9a7 	bl	6f8 <__sinit>
 3aa:	4b21      	ldr	r3, [pc, #132]	; (430 <__swbuf_r+0x98>)
 3ac:	429c      	cmp	r4, r3
 3ae:	d12a      	bne.n	406 <__swbuf_r+0x6e>
 3b0:	686c      	ldr	r4, [r5, #4]
 3b2:	69a3      	ldr	r3, [r4, #24]
 3b4:	60a3      	str	r3, [r4, #8]
 3b6:	89a3      	ldrh	r3, [r4, #12]
 3b8:	071a      	lsls	r2, r3, #28
 3ba:	d52e      	bpl.n	41a <__swbuf_r+0x82>
 3bc:	6923      	ldr	r3, [r4, #16]
 3be:	b363      	cbz	r3, 41a <__swbuf_r+0x82>
 3c0:	6923      	ldr	r3, [r4, #16]
 3c2:	6820      	ldr	r0, [r4, #0]
 3c4:	b2f6      	uxtb	r6, r6
 3c6:	1ac0      	subs	r0, r0, r3
 3c8:	6963      	ldr	r3, [r4, #20]
 3ca:	4637      	mov	r7, r6
 3cc:	4283      	cmp	r3, r0
 3ce:	dc04      	bgt.n	3da <__swbuf_r+0x42>
 3d0:	4621      	mov	r1, r4
 3d2:	4628      	mov	r0, r5
 3d4:	f000 f926 	bl	624 <_fflush_r>
 3d8:	bb28      	cbnz	r0, 426 <__swbuf_r+0x8e>
 3da:	68a3      	ldr	r3, [r4, #8]
 3dc:	3001      	adds	r0, #1
 3de:	3b01      	subs	r3, #1
 3e0:	60a3      	str	r3, [r4, #8]
 3e2:	6823      	ldr	r3, [r4, #0]
 3e4:	1c5a      	adds	r2, r3, #1
 3e6:	6022      	str	r2, [r4, #0]
 3e8:	701e      	strb	r6, [r3, #0]
 3ea:	6963      	ldr	r3, [r4, #20]
 3ec:	4283      	cmp	r3, r0
 3ee:	d004      	beq.n	3fa <__swbuf_r+0x62>
 3f0:	89a3      	ldrh	r3, [r4, #12]
 3f2:	07db      	lsls	r3, r3, #31
 3f4:	d519      	bpl.n	42a <__swbuf_r+0x92>
 3f6:	2e0a      	cmp	r6, #10
 3f8:	d117      	bne.n	42a <__swbuf_r+0x92>
 3fa:	4621      	mov	r1, r4
 3fc:	4628      	mov	r0, r5
 3fe:	f000 f911 	bl	624 <_fflush_r>
 402:	b190      	cbz	r0, 42a <__swbuf_r+0x92>
 404:	e00f      	b.n	426 <__swbuf_r+0x8e>
 406:	4b0b      	ldr	r3, [pc, #44]	; (434 <__swbuf_r+0x9c>)
 408:	429c      	cmp	r4, r3
 40a:	d101      	bne.n	410 <__swbuf_r+0x78>
 40c:	68ac      	ldr	r4, [r5, #8]
 40e:	e7d0      	b.n	3b2 <__swbuf_r+0x1a>
 410:	4b09      	ldr	r3, [pc, #36]	; (438 <__swbuf_r+0xa0>)
 412:	429c      	cmp	r4, r3
 414:	bf08      	it	eq
 416:	68ec      	ldreq	r4, [r5, #12]
 418:	e7cb      	b.n	3b2 <__swbuf_r+0x1a>
 41a:	4621      	mov	r1, r4
 41c:	4628      	mov	r0, r5
 41e:	f000 f80d 	bl	43c <__swsetup_r>
 422:	2800      	cmp	r0, #0
 424:	d0cc      	beq.n	3c0 <__swbuf_r+0x28>
 426:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 42a:	4638      	mov	r0, r7
 42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 42e:	bf00      	nop
 430:	00000c74 	.word	0x00000c74
 434:	00000c94 	.word	0x00000c94
 438:	00000c54 	.word	0x00000c54

0000043c <__swsetup_r>:
 43c:	4b32      	ldr	r3, [pc, #200]	; (508 <__swsetup_r+0xcc>)
 43e:	b570      	push	{r4, r5, r6, lr}
 440:	681d      	ldr	r5, [r3, #0]
 442:	4606      	mov	r6, r0
 444:	460c      	mov	r4, r1
 446:	b125      	cbz	r5, 452 <__swsetup_r+0x16>
 448:	69ab      	ldr	r3, [r5, #24]
 44a:	b913      	cbnz	r3, 452 <__swsetup_r+0x16>
 44c:	4628      	mov	r0, r5
 44e:	f000 f953 	bl	6f8 <__sinit>
 452:	4b2e      	ldr	r3, [pc, #184]	; (50c <__swsetup_r+0xd0>)
 454:	429c      	cmp	r4, r3
 456:	d10f      	bne.n	478 <__swsetup_r+0x3c>
 458:	686c      	ldr	r4, [r5, #4]
 45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 45e:	b29a      	uxth	r2, r3
 460:	0715      	lsls	r5, r2, #28
 462:	d42c      	bmi.n	4be <__swsetup_r+0x82>
 464:	06d0      	lsls	r0, r2, #27
 466:	d411      	bmi.n	48c <__swsetup_r+0x50>
 468:	2209      	movs	r2, #9
 46a:	6032      	str	r2, [r6, #0]
 46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 470:	81a3      	strh	r3, [r4, #12]
 472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 476:	e03e      	b.n	4f6 <__swsetup_r+0xba>
 478:	4b25      	ldr	r3, [pc, #148]	; (510 <__swsetup_r+0xd4>)
 47a:	429c      	cmp	r4, r3
 47c:	d101      	bne.n	482 <__swsetup_r+0x46>
 47e:	68ac      	ldr	r4, [r5, #8]
 480:	e7eb      	b.n	45a <__swsetup_r+0x1e>
 482:	4b24      	ldr	r3, [pc, #144]	; (514 <__swsetup_r+0xd8>)
 484:	429c      	cmp	r4, r3
 486:	bf08      	it	eq
 488:	68ec      	ldreq	r4, [r5, #12]
 48a:	e7e6      	b.n	45a <__swsetup_r+0x1e>
 48c:	0751      	lsls	r1, r2, #29
 48e:	d512      	bpl.n	4b6 <__swsetup_r+0x7a>
 490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 492:	b141      	cbz	r1, 4a6 <__swsetup_r+0x6a>
 494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 498:	4299      	cmp	r1, r3
 49a:	d002      	beq.n	4a2 <__swsetup_r+0x66>
 49c:	4630      	mov	r0, r6
 49e:	f000 fa19 	bl	8d4 <_free_r>
 4a2:	2300      	movs	r3, #0
 4a4:	6363      	str	r3, [r4, #52]	; 0x34
 4a6:	89a3      	ldrh	r3, [r4, #12]
 4a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 4ac:	81a3      	strh	r3, [r4, #12]
 4ae:	2300      	movs	r3, #0
 4b0:	6063      	str	r3, [r4, #4]
 4b2:	6923      	ldr	r3, [r4, #16]
 4b4:	6023      	str	r3, [r4, #0]
 4b6:	89a3      	ldrh	r3, [r4, #12]
 4b8:	f043 0308 	orr.w	r3, r3, #8
 4bc:	81a3      	strh	r3, [r4, #12]
 4be:	6923      	ldr	r3, [r4, #16]
 4c0:	b94b      	cbnz	r3, 4d6 <__swsetup_r+0x9a>
 4c2:	89a3      	ldrh	r3, [r4, #12]
 4c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 4c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 4cc:	d003      	beq.n	4d6 <__swsetup_r+0x9a>
 4ce:	4621      	mov	r1, r4
 4d0:	4630      	mov	r0, r6
 4d2:	f000 f9bf 	bl	854 <__smakebuf_r>
 4d6:	89a2      	ldrh	r2, [r4, #12]
 4d8:	f012 0301 	ands.w	r3, r2, #1
 4dc:	d00c      	beq.n	4f8 <__swsetup_r+0xbc>
 4de:	2300      	movs	r3, #0
 4e0:	60a3      	str	r3, [r4, #8]
 4e2:	6963      	ldr	r3, [r4, #20]
 4e4:	425b      	negs	r3, r3
 4e6:	61a3      	str	r3, [r4, #24]
 4e8:	6923      	ldr	r3, [r4, #16]
 4ea:	b953      	cbnz	r3, 502 <__swsetup_r+0xc6>
 4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 4f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 4f4:	d1ba      	bne.n	46c <__swsetup_r+0x30>
 4f6:	bd70      	pop	{r4, r5, r6, pc}
 4f8:	0792      	lsls	r2, r2, #30
 4fa:	bf58      	it	pl
 4fc:	6963      	ldrpl	r3, [r4, #20]
 4fe:	60a3      	str	r3, [r4, #8]
 500:	e7f2      	b.n	4e8 <__swsetup_r+0xac>
 502:	2000      	movs	r0, #0
 504:	e7f7      	b.n	4f6 <__swsetup_r+0xba>
 506:	bf00      	nop
 508:	20000004 	.word	0x20000004
 50c:	00000c74 	.word	0x00000c74
 510:	00000c94 	.word	0x00000c94
 514:	00000c54 	.word	0x00000c54

00000518 <__sflush_r>:
 518:	898a      	ldrh	r2, [r1, #12]
 51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 51e:	4605      	mov	r5, r0
 520:	0710      	lsls	r0, r2, #28
 522:	460c      	mov	r4, r1
 524:	d458      	bmi.n	5d8 <__sflush_r+0xc0>
 526:	684b      	ldr	r3, [r1, #4]
 528:	2b00      	cmp	r3, #0
 52a:	dc05      	bgt.n	538 <__sflush_r+0x20>
 52c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 52e:	2b00      	cmp	r3, #0
 530:	dc02      	bgt.n	538 <__sflush_r+0x20>
 532:	2000      	movs	r0, #0
 534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 53a:	2e00      	cmp	r6, #0
 53c:	d0f9      	beq.n	532 <__sflush_r+0x1a>
 53e:	2300      	movs	r3, #0
 540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 544:	682f      	ldr	r7, [r5, #0]
 546:	6a21      	ldr	r1, [r4, #32]
 548:	602b      	str	r3, [r5, #0]
 54a:	d032      	beq.n	5b2 <__sflush_r+0x9a>
 54c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 54e:	89a3      	ldrh	r3, [r4, #12]
 550:	075a      	lsls	r2, r3, #29
 552:	d505      	bpl.n	560 <__sflush_r+0x48>
 554:	6863      	ldr	r3, [r4, #4]
 556:	1ac0      	subs	r0, r0, r3
 558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 55a:	b10b      	cbz	r3, 560 <__sflush_r+0x48>
 55c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 55e:	1ac0      	subs	r0, r0, r3
 560:	2300      	movs	r3, #0
 562:	4602      	mov	r2, r0
 564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 566:	6a21      	ldr	r1, [r4, #32]
 568:	4628      	mov	r0, r5
 56a:	47b0      	blx	r6
 56c:	1c43      	adds	r3, r0, #1
 56e:	89a3      	ldrh	r3, [r4, #12]
 570:	d106      	bne.n	580 <__sflush_r+0x68>
 572:	6829      	ldr	r1, [r5, #0]
 574:	291d      	cmp	r1, #29
 576:	d848      	bhi.n	60a <__sflush_r+0xf2>
 578:	4a29      	ldr	r2, [pc, #164]	; (620 <__sflush_r+0x108>)
 57a:	40ca      	lsrs	r2, r1
 57c:	07d6      	lsls	r6, r2, #31
 57e:	d544      	bpl.n	60a <__sflush_r+0xf2>
 580:	2200      	movs	r2, #0
 582:	6062      	str	r2, [r4, #4]
 584:	6922      	ldr	r2, [r4, #16]
 586:	04d9      	lsls	r1, r3, #19
 588:	6022      	str	r2, [r4, #0]
 58a:	d504      	bpl.n	596 <__sflush_r+0x7e>
 58c:	1c42      	adds	r2, r0, #1
 58e:	d101      	bne.n	594 <__sflush_r+0x7c>
 590:	682b      	ldr	r3, [r5, #0]
 592:	b903      	cbnz	r3, 596 <__sflush_r+0x7e>
 594:	6560      	str	r0, [r4, #84]	; 0x54
 596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 598:	602f      	str	r7, [r5, #0]
 59a:	2900      	cmp	r1, #0
 59c:	d0c9      	beq.n	532 <__sflush_r+0x1a>
 59e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 5a2:	4299      	cmp	r1, r3
 5a4:	d002      	beq.n	5ac <__sflush_r+0x94>
 5a6:	4628      	mov	r0, r5
 5a8:	f000 f994 	bl	8d4 <_free_r>
 5ac:	2000      	movs	r0, #0
 5ae:	6360      	str	r0, [r4, #52]	; 0x34
 5b0:	e7c0      	b.n	534 <__sflush_r+0x1c>
 5b2:	2301      	movs	r3, #1
 5b4:	4628      	mov	r0, r5
 5b6:	47b0      	blx	r6
 5b8:	1c41      	adds	r1, r0, #1
 5ba:	d1c8      	bne.n	54e <__sflush_r+0x36>
 5bc:	682b      	ldr	r3, [r5, #0]
 5be:	2b00      	cmp	r3, #0
 5c0:	d0c5      	beq.n	54e <__sflush_r+0x36>
 5c2:	2b1d      	cmp	r3, #29
 5c4:	d001      	beq.n	5ca <__sflush_r+0xb2>
 5c6:	2b16      	cmp	r3, #22
 5c8:	d101      	bne.n	5ce <__sflush_r+0xb6>
 5ca:	602f      	str	r7, [r5, #0]
 5cc:	e7b1      	b.n	532 <__sflush_r+0x1a>
 5ce:	89a3      	ldrh	r3, [r4, #12]
 5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 5d4:	81a3      	strh	r3, [r4, #12]
 5d6:	e7ad      	b.n	534 <__sflush_r+0x1c>
 5d8:	690f      	ldr	r7, [r1, #16]
 5da:	2f00      	cmp	r7, #0
 5dc:	d0a9      	beq.n	532 <__sflush_r+0x1a>
 5de:	0793      	lsls	r3, r2, #30
 5e0:	bf18      	it	ne
 5e2:	2300      	movne	r3, #0
 5e4:	680e      	ldr	r6, [r1, #0]
 5e6:	bf08      	it	eq
 5e8:	694b      	ldreq	r3, [r1, #20]
 5ea:	eba6 0807 	sub.w	r8, r6, r7
 5ee:	600f      	str	r7, [r1, #0]
 5f0:	608b      	str	r3, [r1, #8]
 5f2:	f1b8 0f00 	cmp.w	r8, #0
 5f6:	dd9c      	ble.n	532 <__sflush_r+0x1a>
 5f8:	4643      	mov	r3, r8
 5fa:	463a      	mov	r2, r7
 5fc:	6a21      	ldr	r1, [r4, #32]
 5fe:	4628      	mov	r0, r5
 600:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 602:	47b0      	blx	r6
 604:	2800      	cmp	r0, #0
 606:	dc06      	bgt.n	616 <__sflush_r+0xfe>
 608:	89a3      	ldrh	r3, [r4, #12]
 60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 60e:	81a3      	strh	r3, [r4, #12]
 610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 614:	e78e      	b.n	534 <__sflush_r+0x1c>
 616:	4407      	add	r7, r0
 618:	eba8 0800 	sub.w	r8, r8, r0
 61c:	e7e9      	b.n	5f2 <__sflush_r+0xda>
 61e:	bf00      	nop
 620:	20400001 	.word	0x20400001

00000624 <_fflush_r>:
 624:	b538      	push	{r3, r4, r5, lr}
 626:	690b      	ldr	r3, [r1, #16]
 628:	4605      	mov	r5, r0
 62a:	460c      	mov	r4, r1
 62c:	b1db      	cbz	r3, 666 <_fflush_r+0x42>
 62e:	b118      	cbz	r0, 638 <_fflush_r+0x14>
 630:	6983      	ldr	r3, [r0, #24]
 632:	b90b      	cbnz	r3, 638 <_fflush_r+0x14>
 634:	f000 f860 	bl	6f8 <__sinit>
 638:	4b0c      	ldr	r3, [pc, #48]	; (66c <_fflush_r+0x48>)
 63a:	429c      	cmp	r4, r3
 63c:	d109      	bne.n	652 <_fflush_r+0x2e>
 63e:	686c      	ldr	r4, [r5, #4]
 640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 644:	b17b      	cbz	r3, 666 <_fflush_r+0x42>
 646:	4621      	mov	r1, r4
 648:	4628      	mov	r0, r5
 64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 64e:	f7ff bf63 	b.w	518 <__sflush_r>
 652:	4b07      	ldr	r3, [pc, #28]	; (670 <_fflush_r+0x4c>)
 654:	429c      	cmp	r4, r3
 656:	d101      	bne.n	65c <_fflush_r+0x38>
 658:	68ac      	ldr	r4, [r5, #8]
 65a:	e7f1      	b.n	640 <_fflush_r+0x1c>
 65c:	4b05      	ldr	r3, [pc, #20]	; (674 <_fflush_r+0x50>)
 65e:	429c      	cmp	r4, r3
 660:	bf08      	it	eq
 662:	68ec      	ldreq	r4, [r5, #12]
 664:	e7ec      	b.n	640 <_fflush_r+0x1c>
 666:	2000      	movs	r0, #0
 668:	bd38      	pop	{r3, r4, r5, pc}
 66a:	bf00      	nop
 66c:	00000c74 	.word	0x00000c74
 670:	00000c94 	.word	0x00000c94
 674:	00000c54 	.word	0x00000c54

00000678 <std>:
 678:	2300      	movs	r3, #0
 67a:	b510      	push	{r4, lr}
 67c:	4604      	mov	r4, r0
 67e:	e9c0 3300 	strd	r3, r3, [r0]
 682:	6083      	str	r3, [r0, #8]
 684:	8181      	strh	r1, [r0, #12]
 686:	6643      	str	r3, [r0, #100]	; 0x64
 688:	81c2      	strh	r2, [r0, #14]
 68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 68e:	6183      	str	r3, [r0, #24]
 690:	4619      	mov	r1, r3
 692:	2208      	movs	r2, #8
 694:	305c      	adds	r0, #92	; 0x5c
 696:	f7ff fe13 	bl	2c0 <memset>
 69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <std+0x38>)
 69c:	6224      	str	r4, [r4, #32]
 69e:	6263      	str	r3, [r4, #36]	; 0x24
 6a0:	4b04      	ldr	r3, [pc, #16]	; (6b4 <std+0x3c>)
 6a2:	62a3      	str	r3, [r4, #40]	; 0x28
 6a4:	4b04      	ldr	r3, [pc, #16]	; (6b8 <std+0x40>)
 6a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 6a8:	4b04      	ldr	r3, [pc, #16]	; (6bc <std+0x44>)
 6aa:	6323      	str	r3, [r4, #48]	; 0x30
 6ac:	bd10      	pop	{r4, pc}
 6ae:	bf00      	nop
 6b0:	00000a41 	.word	0x00000a41
 6b4:	00000a63 	.word	0x00000a63
 6b8:	00000a9b 	.word	0x00000a9b
 6bc:	00000abf 	.word	0x00000abf

000006c0 <_cleanup_r>:
 6c0:	4901      	ldr	r1, [pc, #4]	; (6c8 <_cleanup_r+0x8>)
 6c2:	f000 b885 	b.w	7d0 <_fwalk_reent>
 6c6:	bf00      	nop
 6c8:	00000625 	.word	0x00000625

000006cc <__sfmoreglue>:
 6cc:	b570      	push	{r4, r5, r6, lr}
 6ce:	2568      	movs	r5, #104	; 0x68
 6d0:	1e4a      	subs	r2, r1, #1
 6d2:	4355      	muls	r5, r2
 6d4:	460e      	mov	r6, r1
 6d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 6da:	f000 f947 	bl	96c <_malloc_r>
 6de:	4604      	mov	r4, r0
 6e0:	b140      	cbz	r0, 6f4 <__sfmoreglue+0x28>
 6e2:	2100      	movs	r1, #0
 6e4:	e9c0 1600 	strd	r1, r6, [r0]
 6e8:	300c      	adds	r0, #12
 6ea:	60a0      	str	r0, [r4, #8]
 6ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 6f0:	f7ff fde6 	bl	2c0 <memset>
 6f4:	4620      	mov	r0, r4
 6f6:	bd70      	pop	{r4, r5, r6, pc}

000006f8 <__sinit>:
 6f8:	6983      	ldr	r3, [r0, #24]
 6fa:	b510      	push	{r4, lr}
 6fc:	4604      	mov	r4, r0
 6fe:	bb33      	cbnz	r3, 74e <__sinit+0x56>
 700:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 704:	6503      	str	r3, [r0, #80]	; 0x50
 706:	4b12      	ldr	r3, [pc, #72]	; (750 <__sinit+0x58>)
 708:	4a12      	ldr	r2, [pc, #72]	; (754 <__sinit+0x5c>)
 70a:	681b      	ldr	r3, [r3, #0]
 70c:	6282      	str	r2, [r0, #40]	; 0x28
 70e:	4298      	cmp	r0, r3
 710:	bf04      	itt	eq
 712:	2301      	moveq	r3, #1
 714:	6183      	streq	r3, [r0, #24]
 716:	f000 f81f 	bl	758 <__sfp>
 71a:	6060      	str	r0, [r4, #4]
 71c:	4620      	mov	r0, r4
 71e:	f000 f81b 	bl	758 <__sfp>
 722:	60a0      	str	r0, [r4, #8]
 724:	4620      	mov	r0, r4
 726:	f000 f817 	bl	758 <__sfp>
 72a:	2200      	movs	r2, #0
 72c:	60e0      	str	r0, [r4, #12]
 72e:	2104      	movs	r1, #4
 730:	6860      	ldr	r0, [r4, #4]
 732:	f7ff ffa1 	bl	678 <std>
 736:	2201      	movs	r2, #1
 738:	2109      	movs	r1, #9
 73a:	68a0      	ldr	r0, [r4, #8]
 73c:	f7ff ff9c 	bl	678 <std>
 740:	2202      	movs	r2, #2
 742:	2112      	movs	r1, #18
 744:	68e0      	ldr	r0, [r4, #12]
 746:	f7ff ff97 	bl	678 <std>
 74a:	2301      	movs	r3, #1
 74c:	61a3      	str	r3, [r4, #24]
 74e:	bd10      	pop	{r4, pc}
 750:	00000c50 	.word	0x00000c50
 754:	000006c1 	.word	0x000006c1

00000758 <__sfp>:
 758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 75a:	4b1b      	ldr	r3, [pc, #108]	; (7c8 <__sfp+0x70>)
 75c:	4607      	mov	r7, r0
 75e:	681e      	ldr	r6, [r3, #0]
 760:	69b3      	ldr	r3, [r6, #24]
 762:	b913      	cbnz	r3, 76a <__sfp+0x12>
 764:	4630      	mov	r0, r6
 766:	f7ff ffc7 	bl	6f8 <__sinit>
 76a:	3648      	adds	r6, #72	; 0x48
 76c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 770:	3b01      	subs	r3, #1
 772:	d503      	bpl.n	77c <__sfp+0x24>
 774:	6833      	ldr	r3, [r6, #0]
 776:	b133      	cbz	r3, 786 <__sfp+0x2e>
 778:	6836      	ldr	r6, [r6, #0]
 77a:	e7f7      	b.n	76c <__sfp+0x14>
 77c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 780:	b16d      	cbz	r5, 79e <__sfp+0x46>
 782:	3468      	adds	r4, #104	; 0x68
 784:	e7f4      	b.n	770 <__sfp+0x18>
 786:	2104      	movs	r1, #4
 788:	4638      	mov	r0, r7
 78a:	f7ff ff9f 	bl	6cc <__sfmoreglue>
 78e:	6030      	str	r0, [r6, #0]
 790:	2800      	cmp	r0, #0
 792:	d1f1      	bne.n	778 <__sfp+0x20>
 794:	230c      	movs	r3, #12
 796:	4604      	mov	r4, r0
 798:	603b      	str	r3, [r7, #0]
 79a:	4620      	mov	r0, r4
 79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 79e:	4b0b      	ldr	r3, [pc, #44]	; (7cc <__sfp+0x74>)
 7a0:	6665      	str	r5, [r4, #100]	; 0x64
 7a2:	e9c4 5500 	strd	r5, r5, [r4]
 7a6:	60a5      	str	r5, [r4, #8]
 7a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 7ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 7b0:	2208      	movs	r2, #8
 7b2:	4629      	mov	r1, r5
 7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 7b8:	f7ff fd82 	bl	2c0 <memset>
 7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 7c4:	e7e9      	b.n	79a <__sfp+0x42>
 7c6:	bf00      	nop
 7c8:	00000c50 	.word	0x00000c50
 7cc:	ffff0001 	.word	0xffff0001

000007d0 <_fwalk_reent>:
 7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 7d4:	4680      	mov	r8, r0
 7d6:	4689      	mov	r9, r1
 7d8:	2600      	movs	r6, #0
 7da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 7de:	b914      	cbnz	r4, 7e6 <_fwalk_reent+0x16>
 7e0:	4630      	mov	r0, r6
 7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 7e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 7ea:	3f01      	subs	r7, #1
 7ec:	d501      	bpl.n	7f2 <_fwalk_reent+0x22>
 7ee:	6824      	ldr	r4, [r4, #0]
 7f0:	e7f5      	b.n	7de <_fwalk_reent+0xe>
 7f2:	89ab      	ldrh	r3, [r5, #12]
 7f4:	2b01      	cmp	r3, #1
 7f6:	d907      	bls.n	808 <_fwalk_reent+0x38>
 7f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 7fc:	3301      	adds	r3, #1
 7fe:	d003      	beq.n	808 <_fwalk_reent+0x38>
 800:	4629      	mov	r1, r5
 802:	4640      	mov	r0, r8
 804:	47c8      	blx	r9
 806:	4306      	orrs	r6, r0
 808:	3568      	adds	r5, #104	; 0x68
 80a:	e7ee      	b.n	7ea <_fwalk_reent+0x1a>

0000080c <__swhatbuf_r>:
 80c:	b570      	push	{r4, r5, r6, lr}
 80e:	460e      	mov	r6, r1
 810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 814:	b096      	sub	sp, #88	; 0x58
 816:	2900      	cmp	r1, #0
 818:	4614      	mov	r4, r2
 81a:	461d      	mov	r5, r3
 81c:	da07      	bge.n	82e <__swhatbuf_r+0x22>
 81e:	2300      	movs	r3, #0
 820:	602b      	str	r3, [r5, #0]
 822:	89b3      	ldrh	r3, [r6, #12]
 824:	061a      	lsls	r2, r3, #24
 826:	d410      	bmi.n	84a <__swhatbuf_r+0x3e>
 828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 82c:	e00e      	b.n	84c <__swhatbuf_r+0x40>
 82e:	466a      	mov	r2, sp
 830:	f000 f96c 	bl	b0c <_fstat_r>
 834:	2800      	cmp	r0, #0
 836:	dbf2      	blt.n	81e <__swhatbuf_r+0x12>
 838:	9a01      	ldr	r2, [sp, #4]
 83a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 83e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 842:	425a      	negs	r2, r3
 844:	415a      	adcs	r2, r3
 846:	602a      	str	r2, [r5, #0]
 848:	e7ee      	b.n	828 <__swhatbuf_r+0x1c>
 84a:	2340      	movs	r3, #64	; 0x40
 84c:	2000      	movs	r0, #0
 84e:	6023      	str	r3, [r4, #0]
 850:	b016      	add	sp, #88	; 0x58
 852:	bd70      	pop	{r4, r5, r6, pc}

00000854 <__smakebuf_r>:
 854:	898b      	ldrh	r3, [r1, #12]
 856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 858:	079d      	lsls	r5, r3, #30
 85a:	4606      	mov	r6, r0
 85c:	460c      	mov	r4, r1
 85e:	d507      	bpl.n	870 <__smakebuf_r+0x1c>
 860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 864:	6023      	str	r3, [r4, #0]
 866:	6123      	str	r3, [r4, #16]
 868:	2301      	movs	r3, #1
 86a:	6163      	str	r3, [r4, #20]
 86c:	b002      	add	sp, #8
 86e:	bd70      	pop	{r4, r5, r6, pc}
 870:	ab01      	add	r3, sp, #4
 872:	466a      	mov	r2, sp
 874:	f7ff ffca 	bl	80c <__swhatbuf_r>
 878:	9900      	ldr	r1, [sp, #0]
 87a:	4605      	mov	r5, r0
 87c:	4630      	mov	r0, r6
 87e:	f000 f875 	bl	96c <_malloc_r>
 882:	b948      	cbnz	r0, 898 <__smakebuf_r+0x44>
 884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 888:	059a      	lsls	r2, r3, #22
 88a:	d4ef      	bmi.n	86c <__smakebuf_r+0x18>
 88c:	f023 0303 	bic.w	r3, r3, #3
 890:	f043 0302 	orr.w	r3, r3, #2
 894:	81a3      	strh	r3, [r4, #12]
 896:	e7e3      	b.n	860 <__smakebuf_r+0xc>
 898:	4b0d      	ldr	r3, [pc, #52]	; (8d0 <__smakebuf_r+0x7c>)
 89a:	62b3      	str	r3, [r6, #40]	; 0x28
 89c:	89a3      	ldrh	r3, [r4, #12]
 89e:	6020      	str	r0, [r4, #0]
 8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8a4:	81a3      	strh	r3, [r4, #12]
 8a6:	9b00      	ldr	r3, [sp, #0]
 8a8:	6120      	str	r0, [r4, #16]
 8aa:	6163      	str	r3, [r4, #20]
 8ac:	9b01      	ldr	r3, [sp, #4]
 8ae:	b15b      	cbz	r3, 8c8 <__smakebuf_r+0x74>
 8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8b4:	4630      	mov	r0, r6
 8b6:	f000 f93b 	bl	b30 <_isatty_r>
 8ba:	b128      	cbz	r0, 8c8 <__smakebuf_r+0x74>
 8bc:	89a3      	ldrh	r3, [r4, #12]
 8be:	f023 0303 	bic.w	r3, r3, #3
 8c2:	f043 0301 	orr.w	r3, r3, #1
 8c6:	81a3      	strh	r3, [r4, #12]
 8c8:	89a3      	ldrh	r3, [r4, #12]
 8ca:	431d      	orrs	r5, r3
 8cc:	81a5      	strh	r5, [r4, #12]
 8ce:	e7cd      	b.n	86c <__smakebuf_r+0x18>
 8d0:	000006c1 	.word	0x000006c1

000008d4 <_free_r>:
 8d4:	b538      	push	{r3, r4, r5, lr}
 8d6:	4605      	mov	r5, r0
 8d8:	2900      	cmp	r1, #0
 8da:	d043      	beq.n	964 <_free_r+0x90>
 8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8e0:	1f0c      	subs	r4, r1, #4
 8e2:	2b00      	cmp	r3, #0
 8e4:	bfb8      	it	lt
 8e6:	18e4      	addlt	r4, r4, r3
 8e8:	f000 f944 	bl	b74 <__malloc_lock>
 8ec:	4a1e      	ldr	r2, [pc, #120]	; (968 <_free_r+0x94>)
 8ee:	6813      	ldr	r3, [r2, #0]
 8f0:	4610      	mov	r0, r2
 8f2:	b933      	cbnz	r3, 902 <_free_r+0x2e>
 8f4:	6063      	str	r3, [r4, #4]
 8f6:	6014      	str	r4, [r2, #0]
 8f8:	4628      	mov	r0, r5
 8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8fe:	f000 b93a 	b.w	b76 <__malloc_unlock>
 902:	42a3      	cmp	r3, r4
 904:	d90b      	bls.n	91e <_free_r+0x4a>
 906:	6821      	ldr	r1, [r4, #0]
 908:	1862      	adds	r2, r4, r1
 90a:	4293      	cmp	r3, r2
 90c:	bf01      	itttt	eq
 90e:	681a      	ldreq	r2, [r3, #0]
 910:	685b      	ldreq	r3, [r3, #4]
 912:	1852      	addeq	r2, r2, r1
 914:	6022      	streq	r2, [r4, #0]
 916:	6063      	str	r3, [r4, #4]
 918:	6004      	str	r4, [r0, #0]
 91a:	e7ed      	b.n	8f8 <_free_r+0x24>
 91c:	4613      	mov	r3, r2
 91e:	685a      	ldr	r2, [r3, #4]
 920:	b10a      	cbz	r2, 926 <_free_r+0x52>
 922:	42a2      	cmp	r2, r4
 924:	d9fa      	bls.n	91c <_free_r+0x48>
 926:	6819      	ldr	r1, [r3, #0]
 928:	1858      	adds	r0, r3, r1
 92a:	42a0      	cmp	r0, r4
 92c:	d10b      	bne.n	946 <_free_r+0x72>
 92e:	6820      	ldr	r0, [r4, #0]
 930:	4401      	add	r1, r0
 932:	1858      	adds	r0, r3, r1
 934:	4282      	cmp	r2, r0
 936:	6019      	str	r1, [r3, #0]
 938:	d1de      	bne.n	8f8 <_free_r+0x24>
 93a:	6810      	ldr	r0, [r2, #0]
 93c:	6852      	ldr	r2, [r2, #4]
 93e:	4401      	add	r1, r0
 940:	6019      	str	r1, [r3, #0]
 942:	605a      	str	r2, [r3, #4]
 944:	e7d8      	b.n	8f8 <_free_r+0x24>
 946:	d902      	bls.n	94e <_free_r+0x7a>
 948:	230c      	movs	r3, #12
 94a:	602b      	str	r3, [r5, #0]
 94c:	e7d4      	b.n	8f8 <_free_r+0x24>
 94e:	6820      	ldr	r0, [r4, #0]
 950:	1821      	adds	r1, r4, r0
 952:	428a      	cmp	r2, r1
 954:	bf01      	itttt	eq
 956:	6811      	ldreq	r1, [r2, #0]
 958:	6852      	ldreq	r2, [r2, #4]
 95a:	1809      	addeq	r1, r1, r0
 95c:	6021      	streq	r1, [r4, #0]
 95e:	6062      	str	r2, [r4, #4]
 960:	605c      	str	r4, [r3, #4]
 962:	e7c9      	b.n	8f8 <_free_r+0x24>
 964:	bd38      	pop	{r3, r4, r5, pc}
 966:	bf00      	nop
 968:	20000068 	.word	0x20000068

0000096c <_malloc_r>:
 96c:	b570      	push	{r4, r5, r6, lr}
 96e:	1ccd      	adds	r5, r1, #3
 970:	f025 0503 	bic.w	r5, r5, #3
 974:	3508      	adds	r5, #8
 976:	2d0c      	cmp	r5, #12
 978:	bf38      	it	cc
 97a:	250c      	movcc	r5, #12
 97c:	2d00      	cmp	r5, #0
 97e:	4606      	mov	r6, r0
 980:	db01      	blt.n	986 <_malloc_r+0x1a>
 982:	42a9      	cmp	r1, r5
 984:	d903      	bls.n	98e <_malloc_r+0x22>
 986:	230c      	movs	r3, #12
 988:	6033      	str	r3, [r6, #0]
 98a:	2000      	movs	r0, #0
 98c:	bd70      	pop	{r4, r5, r6, pc}
 98e:	f000 f8f1 	bl	b74 <__malloc_lock>
 992:	4a21      	ldr	r2, [pc, #132]	; (a18 <_malloc_r+0xac>)
 994:	6814      	ldr	r4, [r2, #0]
 996:	4621      	mov	r1, r4
 998:	b991      	cbnz	r1, 9c0 <_malloc_r+0x54>
 99a:	4c20      	ldr	r4, [pc, #128]	; (a1c <_malloc_r+0xb0>)
 99c:	6823      	ldr	r3, [r4, #0]
 99e:	b91b      	cbnz	r3, 9a8 <_malloc_r+0x3c>
 9a0:	4630      	mov	r0, r6
 9a2:	f000 f83d 	bl	a20 <_sbrk_r>
 9a6:	6020      	str	r0, [r4, #0]
 9a8:	4629      	mov	r1, r5
 9aa:	4630      	mov	r0, r6
 9ac:	f000 f838 	bl	a20 <_sbrk_r>
 9b0:	1c43      	adds	r3, r0, #1
 9b2:	d124      	bne.n	9fe <_malloc_r+0x92>
 9b4:	230c      	movs	r3, #12
 9b6:	4630      	mov	r0, r6
 9b8:	6033      	str	r3, [r6, #0]
 9ba:	f000 f8dc 	bl	b76 <__malloc_unlock>
 9be:	e7e4      	b.n	98a <_malloc_r+0x1e>
 9c0:	680b      	ldr	r3, [r1, #0]
 9c2:	1b5b      	subs	r3, r3, r5
 9c4:	d418      	bmi.n	9f8 <_malloc_r+0x8c>
 9c6:	2b0b      	cmp	r3, #11
 9c8:	d90f      	bls.n	9ea <_malloc_r+0x7e>
 9ca:	600b      	str	r3, [r1, #0]
 9cc:	18cc      	adds	r4, r1, r3
 9ce:	50cd      	str	r5, [r1, r3]
 9d0:	4630      	mov	r0, r6
 9d2:	f000 f8d0 	bl	b76 <__malloc_unlock>
 9d6:	f104 000b 	add.w	r0, r4, #11
 9da:	1d23      	adds	r3, r4, #4
 9dc:	f020 0007 	bic.w	r0, r0, #7
 9e0:	1ac3      	subs	r3, r0, r3
 9e2:	d0d3      	beq.n	98c <_malloc_r+0x20>
 9e4:	425a      	negs	r2, r3
 9e6:	50e2      	str	r2, [r4, r3]
 9e8:	e7d0      	b.n	98c <_malloc_r+0x20>
 9ea:	684b      	ldr	r3, [r1, #4]
 9ec:	428c      	cmp	r4, r1
 9ee:	bf16      	itet	ne
 9f0:	6063      	strne	r3, [r4, #4]
 9f2:	6013      	streq	r3, [r2, #0]
 9f4:	460c      	movne	r4, r1
 9f6:	e7eb      	b.n	9d0 <_malloc_r+0x64>
 9f8:	460c      	mov	r4, r1
 9fa:	6849      	ldr	r1, [r1, #4]
 9fc:	e7cc      	b.n	998 <_malloc_r+0x2c>
 9fe:	1cc4      	adds	r4, r0, #3
 a00:	f024 0403 	bic.w	r4, r4, #3
 a04:	42a0      	cmp	r0, r4
 a06:	d005      	beq.n	a14 <_malloc_r+0xa8>
 a08:	1a21      	subs	r1, r4, r0
 a0a:	4630      	mov	r0, r6
 a0c:	f000 f808 	bl	a20 <_sbrk_r>
 a10:	3001      	adds	r0, #1
 a12:	d0cf      	beq.n	9b4 <_malloc_r+0x48>
 a14:	6025      	str	r5, [r4, #0]
 a16:	e7db      	b.n	9d0 <_malloc_r+0x64>
 a18:	20000068 	.word	0x20000068
 a1c:	2000006c 	.word	0x2000006c

00000a20 <_sbrk_r>:
 a20:	b538      	push	{r3, r4, r5, lr}
 a22:	2300      	movs	r3, #0
 a24:	4c05      	ldr	r4, [pc, #20]	; (a3c <_sbrk_r+0x1c>)
 a26:	4605      	mov	r5, r0
 a28:	4608      	mov	r0, r1
 a2a:	6023      	str	r3, [r4, #0]
 a2c:	f000 f8de 	bl	bec <_sbrk>
 a30:	1c43      	adds	r3, r0, #1
 a32:	d102      	bne.n	a3a <_sbrk_r+0x1a>
 a34:	6823      	ldr	r3, [r4, #0]
 a36:	b103      	cbz	r3, a3a <_sbrk_r+0x1a>
 a38:	602b      	str	r3, [r5, #0]
 a3a:	bd38      	pop	{r3, r4, r5, pc}
 a3c:	20000074 	.word	0x20000074

00000a40 <__sread>:
 a40:	b510      	push	{r4, lr}
 a42:	460c      	mov	r4, r1
 a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 a48:	f000 f896 	bl	b78 <_read_r>
 a4c:	2800      	cmp	r0, #0
 a4e:	bfab      	itete	ge
 a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 a52:	89a3      	ldrhlt	r3, [r4, #12]
 a54:	181b      	addge	r3, r3, r0
 a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 a5a:	bfac      	ite	ge
 a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 a5e:	81a3      	strhlt	r3, [r4, #12]
 a60:	bd10      	pop	{r4, pc}

00000a62 <__swrite>:
 a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 a66:	461f      	mov	r7, r3
 a68:	898b      	ldrh	r3, [r1, #12]
 a6a:	4605      	mov	r5, r0
 a6c:	05db      	lsls	r3, r3, #23
 a6e:	460c      	mov	r4, r1
 a70:	4616      	mov	r6, r2
 a72:	d505      	bpl.n	a80 <__swrite+0x1e>
 a74:	2302      	movs	r3, #2
 a76:	2200      	movs	r2, #0
 a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 a7c:	f000 f868 	bl	b50 <_lseek_r>
 a80:	89a3      	ldrh	r3, [r4, #12]
 a82:	4632      	mov	r2, r6
 a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 a88:	81a3      	strh	r3, [r4, #12]
 a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 a8e:	463b      	mov	r3, r7
 a90:	4628      	mov	r0, r5
 a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 a96:	f000 b817 	b.w	ac8 <_write_r>

00000a9a <__sseek>:
 a9a:	b510      	push	{r4, lr}
 a9c:	460c      	mov	r4, r1
 a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 aa2:	f000 f855 	bl	b50 <_lseek_r>
 aa6:	1c43      	adds	r3, r0, #1
 aa8:	89a3      	ldrh	r3, [r4, #12]
 aaa:	bf15      	itete	ne
 aac:	6560      	strne	r0, [r4, #84]	; 0x54
 aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 ab6:	81a3      	strheq	r3, [r4, #12]
 ab8:	bf18      	it	ne
 aba:	81a3      	strhne	r3, [r4, #12]
 abc:	bd10      	pop	{r4, pc}

00000abe <__sclose>:
 abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 ac2:	f000 b813 	b.w	aec <_close_r>
	...

00000ac8 <_write_r>:
 ac8:	b538      	push	{r3, r4, r5, lr}
 aca:	4605      	mov	r5, r0
 acc:	4608      	mov	r0, r1
 ace:	4611      	mov	r1, r2
 ad0:	2200      	movs	r2, #0
 ad2:	4c05      	ldr	r4, [pc, #20]	; (ae8 <_write_r+0x20>)
 ad4:	6022      	str	r2, [r4, #0]
 ad6:	461a      	mov	r2, r3
 ad8:	f7ff fba0 	bl	21c <_write>
 adc:	1c43      	adds	r3, r0, #1
 ade:	d102      	bne.n	ae6 <_write_r+0x1e>
 ae0:	6823      	ldr	r3, [r4, #0]
 ae2:	b103      	cbz	r3, ae6 <_write_r+0x1e>
 ae4:	602b      	str	r3, [r5, #0]
 ae6:	bd38      	pop	{r3, r4, r5, pc}
 ae8:	20000074 	.word	0x20000074

00000aec <_close_r>:
 aec:	b538      	push	{r3, r4, r5, lr}
 aee:	2300      	movs	r3, #0
 af0:	4c05      	ldr	r4, [pc, #20]	; (b08 <_close_r+0x1c>)
 af2:	4605      	mov	r5, r0
 af4:	4608      	mov	r0, r1
 af6:	6023      	str	r3, [r4, #0]
 af8:	f000 f850 	bl	b9c <_close>
 afc:	1c43      	adds	r3, r0, #1
 afe:	d102      	bne.n	b06 <_close_r+0x1a>
 b00:	6823      	ldr	r3, [r4, #0]
 b02:	b103      	cbz	r3, b06 <_close_r+0x1a>
 b04:	602b      	str	r3, [r5, #0]
 b06:	bd38      	pop	{r3, r4, r5, pc}
 b08:	20000074 	.word	0x20000074

00000b0c <_fstat_r>:
 b0c:	b538      	push	{r3, r4, r5, lr}
 b0e:	2300      	movs	r3, #0
 b10:	4c06      	ldr	r4, [pc, #24]	; (b2c <_fstat_r+0x20>)
 b12:	4605      	mov	r5, r0
 b14:	4608      	mov	r0, r1
 b16:	4611      	mov	r1, r2
 b18:	6023      	str	r3, [r4, #0]
 b1a:	f000 f847 	bl	bac <_fstat>
 b1e:	1c43      	adds	r3, r0, #1
 b20:	d102      	bne.n	b28 <_fstat_r+0x1c>
 b22:	6823      	ldr	r3, [r4, #0]
 b24:	b103      	cbz	r3, b28 <_fstat_r+0x1c>
 b26:	602b      	str	r3, [r5, #0]
 b28:	bd38      	pop	{r3, r4, r5, pc}
 b2a:	bf00      	nop
 b2c:	20000074 	.word	0x20000074

00000b30 <_isatty_r>:
 b30:	b538      	push	{r3, r4, r5, lr}
 b32:	2300      	movs	r3, #0
 b34:	4c05      	ldr	r4, [pc, #20]	; (b4c <_isatty_r+0x1c>)
 b36:	4605      	mov	r5, r0
 b38:	4608      	mov	r0, r1
 b3a:	6023      	str	r3, [r4, #0]
 b3c:	f000 f83e 	bl	bbc <_isatty>
 b40:	1c43      	adds	r3, r0, #1
 b42:	d102      	bne.n	b4a <_isatty_r+0x1a>
 b44:	6823      	ldr	r3, [r4, #0]
 b46:	b103      	cbz	r3, b4a <_isatty_r+0x1a>
 b48:	602b      	str	r3, [r5, #0]
 b4a:	bd38      	pop	{r3, r4, r5, pc}
 b4c:	20000074 	.word	0x20000074

00000b50 <_lseek_r>:
 b50:	b538      	push	{r3, r4, r5, lr}
 b52:	4605      	mov	r5, r0
 b54:	4608      	mov	r0, r1
 b56:	4611      	mov	r1, r2
 b58:	2200      	movs	r2, #0
 b5a:	4c05      	ldr	r4, [pc, #20]	; (b70 <_lseek_r+0x20>)
 b5c:	6022      	str	r2, [r4, #0]
 b5e:	461a      	mov	r2, r3
 b60:	f000 f834 	bl	bcc <_lseek>
 b64:	1c43      	adds	r3, r0, #1
 b66:	d102      	bne.n	b6e <_lseek_r+0x1e>
 b68:	6823      	ldr	r3, [r4, #0]
 b6a:	b103      	cbz	r3, b6e <_lseek_r+0x1e>
 b6c:	602b      	str	r3, [r5, #0]
 b6e:	bd38      	pop	{r3, r4, r5, pc}
 b70:	20000074 	.word	0x20000074

00000b74 <__malloc_lock>:
 b74:	4770      	bx	lr

00000b76 <__malloc_unlock>:
 b76:	4770      	bx	lr

00000b78 <_read_r>:
 b78:	b538      	push	{r3, r4, r5, lr}
 b7a:	4605      	mov	r5, r0
 b7c:	4608      	mov	r0, r1
 b7e:	4611      	mov	r1, r2
 b80:	2200      	movs	r2, #0
 b82:	4c05      	ldr	r4, [pc, #20]	; (b98 <_read_r+0x20>)
 b84:	6022      	str	r2, [r4, #0]
 b86:	461a      	mov	r2, r3
 b88:	f000 f828 	bl	bdc <_read>
 b8c:	1c43      	adds	r3, r0, #1
 b8e:	d102      	bne.n	b96 <_read_r+0x1e>
 b90:	6823      	ldr	r3, [r4, #0]
 b92:	b103      	cbz	r3, b96 <_read_r+0x1e>
 b94:	602b      	str	r3, [r5, #0]
 b96:	bd38      	pop	{r3, r4, r5, pc}
 b98:	20000074 	.word	0x20000074

00000b9c <_close>:
 b9c:	2258      	movs	r2, #88	; 0x58
 b9e:	4b02      	ldr	r3, [pc, #8]	; (ba8 <_close+0xc>)
 ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 ba4:	601a      	str	r2, [r3, #0]
 ba6:	4770      	bx	lr
 ba8:	20000074 	.word	0x20000074

00000bac <_fstat>:
 bac:	2258      	movs	r2, #88	; 0x58
 bae:	4b02      	ldr	r3, [pc, #8]	; (bb8 <_fstat+0xc>)
 bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 bb4:	601a      	str	r2, [r3, #0]
 bb6:	4770      	bx	lr
 bb8:	20000074 	.word	0x20000074

00000bbc <_isatty>:
 bbc:	2258      	movs	r2, #88	; 0x58
 bbe:	4b02      	ldr	r3, [pc, #8]	; (bc8 <_isatty+0xc>)
 bc0:	2000      	movs	r0, #0
 bc2:	601a      	str	r2, [r3, #0]
 bc4:	4770      	bx	lr
 bc6:	bf00      	nop
 bc8:	20000074 	.word	0x20000074

00000bcc <_lseek>:
 bcc:	2258      	movs	r2, #88	; 0x58
 bce:	4b02      	ldr	r3, [pc, #8]	; (bd8 <_lseek+0xc>)
 bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 bd4:	601a      	str	r2, [r3, #0]
 bd6:	4770      	bx	lr
 bd8:	20000074 	.word	0x20000074

00000bdc <_read>:
 bdc:	2258      	movs	r2, #88	; 0x58
 bde:	4b02      	ldr	r3, [pc, #8]	; (be8 <_read+0xc>)
 be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 be4:	601a      	str	r2, [r3, #0]
 be6:	4770      	bx	lr
 be8:	20000074 	.word	0x20000074

00000bec <_sbrk>:
 bec:	4a04      	ldr	r2, [pc, #16]	; (c00 <_sbrk+0x14>)
 bee:	4905      	ldr	r1, [pc, #20]	; (c04 <_sbrk+0x18>)
 bf0:	6813      	ldr	r3, [r2, #0]
 bf2:	2b00      	cmp	r3, #0
 bf4:	bf08      	it	eq
 bf6:	460b      	moveq	r3, r1
 bf8:	4418      	add	r0, r3
 bfa:	6010      	str	r0, [r2, #0]
 bfc:	4618      	mov	r0, r3
 bfe:	4770      	bx	lr
 c00:	20000070 	.word	0x20000070
 c04:	20000078 	.word	0x20000078

00000c08 <_exit>:
 c08:	e7fe      	b.n	c08 <_exit>
 c0a:	bf00      	nop

00000c0c <_init>:
 c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0e:	bf00      	nop

00000c10 <_fini>:
 c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c12:	bf00      	nop
 c14:	6c6c6548 	.word	0x6c6c6548
 c18:	6f77206f 	.word	0x6f77206f
 c1c:	00646c72 	.word	0x00646c72
 c20:	6c6c6548 	.word	0x6c6c6548
 c24:	6173206f 	.word	0x6173206f
 c28:	6b617672 	.word	0x6b617672
 c2c:	5f616d61 	.word	0x5f616d61
 c30:	756c6f73 	.word	0x756c6f73
 c34:	6e6f6974 	.word	0x6e6f6974
 c38:	00000000 	.word	0x00000000
 c3c:	54202a2a 	.word	0x54202a2a
 c40:	20545345 	.word	0x20545345
 c44:	53534150 	.word	0x53534150
 c48:	2a204445 	.word	0x2a204445
 c4c:	0000002a 	.word	0x0000002a

00000c50 <_global_impure_ptr>:
 c50:	20000008                                ... 

00000c54 <__sf_fake_stderr>:
	...

00000c74 <__sf_fake_stdin>:
	...

00000c94 <__sf_fake_stdout>:
	...
