
interrupt_demo.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	2000fc00 	.word	0x2000fc00
       4:	00000125 	.word	0x00000125
       8:	0000016d 	.word	0x0000016d
       c:	0000016f 	.word	0x0000016f
      10:	00000171 	.word	0x00000171
      14:	00000173 	.word	0x00000173
      18:	00000175 	.word	0x00000175
	...
      2c:	00000177 	.word	0x00000177
      30:	00000179 	.word	0x00000179
      34:	00000000 	.word	0x00000000
      38:	0000017b 	.word	0x0000017b
      3c:	0000017d 	.word	0x0000017d
      40:	0000017f 	.word	0x0000017f
      44:	00000181 	.word	0x00000181
      48:	00000183 	.word	0x00000183
      4c:	00000185 	.word	0x00000185
      50:	00000187 	.word	0x00000187
      54:	00000189 	.word	0x00000189
      58:	000007dd 	.word	0x000007dd
      5c:	0000018d 	.word	0x0000018d
      60:	00000741 	.word	0x00000741
      64:	00000191 	.word	0x00000191
      68:	00000193 	.word	0x00000193
      6c:	00000195 	.word	0x00000195
      70:	00000197 	.word	0x00000197
      74:	00000199 	.word	0x00000199
      78:	0000019b 	.word	0x0000019b
      7c:	0000019d 	.word	0x0000019d
      80:	0000019f 	.word	0x0000019f
      84:	000001a1 	.word	0x000001a1
      88:	000001a3 	.word	0x000001a3
      8c:	000001a5 	.word	0x000001a5
      90:	000001a7 	.word	0x000001a7
      94:	000001a9 	.word	0x000001a9
      98:	000001ab 	.word	0x000001ab
      9c:	0000076d 	.word	0x0000076d
      a0:	0000078d 	.word	0x0000078d
      a4:	000007ad 	.word	0x000007ad
      a8:	000007c5 	.word	0x000007c5
      ac:	000001b5 	.word	0x000001b5
      b0:	000001b7 	.word	0x000001b7
      b4:	000001b9 	.word	0x000001b9
      b8:	000001bb 	.word	0x000001bb
      bc:	000001bd 	.word	0x000001bd
      c0:	000001bf 	.word	0x000001bf
      c4:	000001c1 	.word	0x000001c1
      c8:	000001c3 	.word	0x000001c3
      cc:	000001c5 	.word	0x000001c5
      d0:	000001c7 	.word	0x000001c7
      d4:	000001c9 	.word	0x000001c9
      d8:	000001cb 	.word	0x000001cb
      dc:	000001cd 	.word	0x000001cd
      e0:	000001cf 	.word	0x000001cf
      e4:	000001d1 	.word	0x000001d1
      e8:	000001d3 	.word	0x000001d3
      ec:	000001d5 	.word	0x000001d5
      f0:	000001d7 	.word	0x000001d7
      f4:	000006e1 	.word	0x000006e1
      f8:	00000715 	.word	0x00000715
      fc:	000001dd 	.word	0x000001dd
     100:	000001df 	.word	0x000001df
     104:	000001e1 	.word	0x000001e1
     108:	000001e3 	.word	0x000001e3
     10c:	000001e5 	.word	0x000001e5
     110:	000001e7 	.word	0x000001e7
     114:	000001e9 	.word	0x000001e9
     118:	000001eb 	.word	0x000001eb
     11c:	000001ed 	.word	0x000001ed
     120:	000001ef 	.word	0x000001ef

00000124 <Reset_Handler>:
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     124:	490b      	ldr	r1, [pc, #44]	; (154 <Reset_Handler+0x30>)
    ldr    r2, =__data_start__
     126:	4a0c      	ldr	r2, [pc, #48]	; (158 <Reset_Handler+0x34>)
    ldr    r3, =__data_end__
     128:	4b0c      	ldr	r3, [pc, #48]	; (15c <Reset_Handler+0x38>)

    subs    r3, r2
     12a:	1a9b      	subs	r3, r3, r2
    ble    .LC1
     12c:	dd03      	ble.n	136 <Reset_Handler+0x12>
.LC0:
    subs    r3, #4
     12e:	3b04      	subs	r3, #4
    ldr    r0, [r1, r3]
     130:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2, r3]
     132:	50d0      	str	r0, [r2, r3]
    bgt    .LC0
     134:	dcfb      	bgt.n	12e <Reset_Handler+0xa>
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
     136:	490a      	ldr	r1, [pc, #40]	; (160 <Reset_Handler+0x3c>)
    ldr r2, =__bss_end__
     138:	4a0a      	ldr	r2, [pc, #40]	; (164 <Reset_Handler+0x40>)

    movs    r0, 0
     13a:	2000      	movs	r0, #0
.LC2:
    cmp     r1, r2
     13c:	4291      	cmp	r1, r2
    itt    lt
     13e:	bfbc      	itt	lt
    strlt   r0, [r1], #4
     140:	f841 0b04 	strlt.w	r0, [r1], #4
    blt    .LC2
     144:	e7fa      	blt.n	13c <Reset_Handler+0x18>
#endif /* __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
    /* bl    SystemInit */
    ldr     r0,=SystemInit
     146:	4808      	ldr	r0, [pc, #32]	; (168 <Reset_Handler+0x44>)
    blx     r0
     148:	4780      	blx	r0
#endif

    bl    main
     14a:	f000 fb79 	bl	840 <main>
    bl    exit
     14e:	f001 f907 	bl	1360 <exit>
     152:	0000      	.short	0x0000
    ldr    r1, =__etext
     154:	00002823 	.word	0x00002823
    ldr    r2, =__data_start__
     158:	20000000 	.word	0x20000000
    ldr    r3, =__data_end__
     15c:	20000068 	.word	0x20000068
    ldr r1, =__bss_start__
     160:	20000068 	.word	0x20000068
    ldr r2, =__bss_end__
     164:	20000094 	.word	0x20000094
    ldr     r0,=SystemInit
     168:	00001351 	.word	0x00001351

0000016c <NMI_Handler>:
    .size    \handler_name, . - \handler_name
    .endm

/* System Exception Handlers */

    def_default_handler    NMI_Handler
     16c:	e7fe      	b.n	16c <NMI_Handler>

0000016e <HardFault_Handler>:
    def_default_handler    HardFault_Handler
     16e:	e7fe      	b.n	16e <HardFault_Handler>

00000170 <MemManage_Handler>:
    def_default_handler    MemManage_Handler
     170:	e7fe      	b.n	170 <MemManage_Handler>

00000172 <BusFault_Handler>:
    def_default_handler    BusFault_Handler
     172:	e7fe      	b.n	172 <BusFault_Handler>

00000174 <UsageFault_Handler>:
    def_default_handler    UsageFault_Handler
     174:	e7fe      	b.n	174 <UsageFault_Handler>

00000176 <SVC_Handler>:
    def_default_handler    SVC_Handler
     176:	e7fe      	b.n	176 <SVC_Handler>

00000178 <DebugMon_Handler>:
    def_default_handler    DebugMon_Handler
     178:	e7fe      	b.n	178 <DebugMon_Handler>

0000017a <PendSV_Handler>:
    def_default_handler    PendSV_Handler
     17a:	e7fe      	b.n	17a <PendSV_Handler>

0000017c <SysTick_Handler>:
    def_default_handler    SysTick_Handler
     17c:	e7fe      	b.n	17c <SysTick_Handler>

0000017e <UART0_Handler>:

/* IRQ Handlers */

    def_default_handler    UART0_Handler
     17e:	e7fe      	b.n	17e <UART0_Handler>

00000180 <Spare1_Handler>:
    def_default_handler    Spare1_Handler
     180:	e7fe      	b.n	180 <Spare1_Handler>

00000182 <UART1_Handler>:
    def_default_handler    UART1_Handler
     182:	e7fe      	b.n	182 <UART1_Handler>

00000184 <Spare3_Handler>:
    def_default_handler    Spare3_Handler
     184:	e7fe      	b.n	184 <Spare3_Handler>

00000186 <Spare4_Handler>:
    def_default_handler    Spare4_Handler
     186:	e7fe      	b.n	186 <Spare4_Handler>

00000188 <RTC_Handler>:
    def_default_handler    RTC_Handler
     188:	e7fe      	b.n	188 <RTC_Handler>
    def_default_handler    PORT0_COMB_Handler
     18a:	e7fe      	b.n	18a <RTC_Handler+0x2>

0000018c <PORT1_COMB_Handler>:
    def_default_handler    PORT1_COMB_Handler
     18c:	e7fe      	b.n	18c <PORT1_COMB_Handler>
    def_default_handler    TIMER0_Handler
     18e:	e7fe      	b.n	18e <PORT1_COMB_Handler+0x2>

00000190 <TIMER1_Handler>:
    def_default_handler    TIMER1_Handler
     190:	e7fe      	b.n	190 <TIMER1_Handler>

00000192 <DUALTIMER_HANDLER>:
    def_default_handler    DUALTIMER_HANDLER
     192:	e7fe      	b.n	192 <DUALTIMER_HANDLER>

00000194 <Spare11_Handler>:
    def_default_handler    Spare11_Handler
     194:	e7fe      	b.n	194 <Spare11_Handler>

00000196 <UARTOVF_Handler>:
    def_default_handler    UARTOVF_Handler
     196:	e7fe      	b.n	196 <UARTOVF_Handler>

00000198 <Spare13_Handler>:
    def_default_handler    Spare13_Handler
     198:	e7fe      	b.n	198 <Spare13_Handler>

0000019a <Spare14_Handler>:
    def_default_handler    Spare14_Handler
     19a:	e7fe      	b.n	19a <Spare14_Handler>

0000019c <TSC_Handler>:
    def_default_handler    TSC_Handler
     19c:	e7fe      	b.n	19c <TSC_Handler>

0000019e <PORT0_0_Handler>:
    def_default_handler    PORT0_0_Handler
     19e:	e7fe      	b.n	19e <PORT0_0_Handler>

000001a0 <PORT0_1_Handler>:
    def_default_handler    PORT0_1_Handler
     1a0:	e7fe      	b.n	1a0 <PORT0_1_Handler>

000001a2 <PORT0_2_Handler>:
    def_default_handler    PORT0_2_Handler
     1a2:	e7fe      	b.n	1a2 <PORT0_2_Handler>

000001a4 <PORT0_3_Handler>:
    def_default_handler    PORT0_3_Handler
     1a4:	e7fe      	b.n	1a4 <PORT0_3_Handler>

000001a6 <PORT0_4_Handler>:
    def_default_handler    PORT0_4_Handler
     1a6:	e7fe      	b.n	1a6 <PORT0_4_Handler>

000001a8 <PORT0_5_Handler>:
    def_default_handler    PORT0_5_Handler
     1a8:	e7fe      	b.n	1a8 <PORT0_5_Handler>

000001aa <PORT0_6_Handler>:
    def_default_handler    PORT0_6_Handler
     1aa:	e7fe      	b.n	1aa <PORT0_6_Handler>
    def_default_handler    PORT0_7_Handler
     1ac:	e7fe      	b.n	1ac <PORT0_6_Handler+0x2>
    def_default_handler    PORT0_8_Handler
     1ae:	e7fe      	b.n	1ae <PORT0_6_Handler+0x4>
    def_default_handler    PORT0_9_Handler
     1b0:	e7fe      	b.n	1b0 <PORT0_6_Handler+0x6>
    def_default_handler    PORT0_10_Handler
     1b2:	e7fe      	b.n	1b2 <PORT0_6_Handler+0x8>

000001b4 <PORT0_11_Handler>:
    def_default_handler    PORT0_11_Handler
     1b4:	e7fe      	b.n	1b4 <PORT0_11_Handler>

000001b6 <PORT0_12_Handler>:
    def_default_handler    PORT0_12_Handler
     1b6:	e7fe      	b.n	1b6 <PORT0_12_Handler>

000001b8 <PORT0_13_Handler>:
    def_default_handler    PORT0_13_Handler
     1b8:	e7fe      	b.n	1b8 <PORT0_13_Handler>

000001ba <PORT0_14_Handler>:
    def_default_handler    PORT0_14_Handler
     1ba:	e7fe      	b.n	1ba <PORT0_14_Handler>

000001bc <PORT0_15_Handler>:
    def_default_handler    PORT0_15_Handler
     1bc:	e7fe      	b.n	1bc <PORT0_15_Handler>

000001be <SYSERROR_Handler>:
    def_default_handler    SYSERROR_Handler          /* System Error Handler */
     1be:	e7fe      	b.n	1be <SYSERROR_Handler>

000001c0 <EFLASH_Handler>:
    def_default_handler    EFLASH_Handler            /* Embedded Flash Handler */
     1c0:	e7fe      	b.n	1c0 <EFLASH_Handler>

000001c2 <CORDIO0_Handler>:
    def_default_handler    CORDIO0_Handler           /* Cordio Handler */
     1c2:	e7fe      	b.n	1c2 <CORDIO0_Handler>

000001c4 <CORDIO1_Handler>:
    def_default_handler    CORDIO1_Handler           /* Cordio Handler */
     1c4:	e7fe      	b.n	1c4 <CORDIO1_Handler>

000001c6 <CORDIO2_Handler>:
    def_default_handler    CORDIO2_Handler           /* Cordio Handler */
     1c6:	e7fe      	b.n	1c6 <CORDIO2_Handler>

000001c8 <CORDIO3_Handler>:
    def_default_handler    CORDIO3_Handler           /* Cordio Handler */
     1c8:	e7fe      	b.n	1c8 <CORDIO3_Handler>

000001ca <CORDIO4_Handler>:
    def_default_handler    CORDIO4_Handler           /* Cordio Handler */
     1ca:	e7fe      	b.n	1ca <CORDIO4_Handler>

000001cc <CORDIO5_Handler>:
    def_default_handler    CORDIO5_Handler           /* Cordio Handler */
     1cc:	e7fe      	b.n	1cc <CORDIO5_Handler>

000001ce <CORDIO6_Handler>:
    def_default_handler    CORDIO6_Handler           /* Cordio Handler */
     1ce:	e7fe      	b.n	1ce <CORDIO6_Handler>

000001d0 <CORDIO7_Handler>:
    def_default_handler    CORDIO7_Handler           /* Cordio Handler */
     1d0:	e7fe      	b.n	1d0 <CORDIO7_Handler>

000001d2 <PORT2_COMB_Handler>:
    def_default_handler    PORT2_COMB_Handler        /* GPIO Port 2 Combined Handler */
     1d2:	e7fe      	b.n	1d2 <PORT2_COMB_Handler>

000001d4 <PORT3_COMB_Handler>:
    def_default_handler    PORT3_COMB_Handler        /* GPIO Port 3 Combined Handler */
     1d4:	e7fe      	b.n	1d4 <PORT3_COMB_Handler>

000001d6 <TRNG_Handler>:
    def_default_handler    TRNG_Handler              /* Random Number Handler */
     1d6:	e7fe      	b.n	1d6 <TRNG_Handler>
    def_default_handler    UART2_Handler             /* UART 2 RX and TX Handler */
     1d8:	e7fe      	b.n	1d8 <TRNG_Handler+0x2>
    def_default_handler    UART3_Handler             /* UART 3 RX and TX Handler */
     1da:	e7fe      	b.n	1da <TRNG_Handler+0x4>

000001dc <ETHERNET_Handler>:
    def_default_handler    ETHERNET_Handler          /* Ethernet Handler */
     1dc:	e7fe      	b.n	1dc <ETHERNET_Handler>

000001de <I2S_Handler>:
    def_default_handler    I2S_Handler               /* I2S Handler */
     1de:	e7fe      	b.n	1de <I2S_Handler>

000001e0 <MPS2_SPI0_Handler>:
    def_default_handler    MPS2_SPI0_Handler         /* SPI Handler (spi header) */
     1e0:	e7fe      	b.n	1e0 <MPS2_SPI0_Handler>

000001e2 <MPS2_SPI1_Handler>:
    def_default_handler    MPS2_SPI1_Handler         /* SPI Handler (clcd) */
     1e2:	e7fe      	b.n	1e2 <MPS2_SPI1_Handler>

000001e4 <MPS2_SPI2_Handler>:
    def_default_handler    MPS2_SPI2_Handler         /* SPI Handler (spi 1 ADC replacement) */
     1e4:	e7fe      	b.n	1e4 <MPS2_SPI2_Handler>

000001e6 <MPS2_SPI3_Handler>:
    def_default_handler    MPS2_SPI3_Handler         /* SPI Handler (spi 0 shield 0 replacement) */
     1e6:	e7fe      	b.n	1e6 <MPS2_SPI3_Handler>

000001e8 <MPS2_SPI4_Handler>:
    def_default_handler    MPS2_SPI4_Handler         /* SPI Handler */
     1e8:	e7fe      	b.n	1e8 <MPS2_SPI4_Handler>

000001ea <PORT4_COMB_Handler>:
    def_default_handler    PORT4_COMB_Handler        /* GPIO Port 4 Combined Handler */
     1ea:	e7fe      	b.n	1ea <PORT4_COMB_Handler>

000001ec <PORT5_COMB_Handler>:
    def_default_handler    PORT5_COMB_Handler        /* GPIO Port 5 Combined Handler */
     1ec:	e7fe      	b.n	1ec <PORT5_COMB_Handler>

000001ee <UART4_Handler>:
    def_default_handler    UART4_Handler             /* UART 4 RX and TX Handler */
     1ee:	e7fe      	b.n	1ee <UART4_Handler>

000001f0 <Check_IRQNUM>:
  int j;
  int EXPECTED_IRQNUM = 32;
  int fail = 1;

  // Ensure interrupts are disabled
  NVIC->ICER[0] = 0xFFFFFFFFUL;
     1f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
     1f4:	b510      	push	{r4, lr}

  // Pend all interrupts
  NVIC->ISPR[0] = 0xFFFFFFFFUL;

  // Count pending interrupts
  numirq = 0;
     1f6:	2100      	movs	r1, #0
  ispr_rd = NVIC->ISPR[0];
     1f8:	2420      	movs	r4, #32
  NVIC->ICER[0] = 0xFFFFFFFFUL;
     1fa:	4b13      	ldr	r3, [pc, #76]	; (248 <Stack_Size+0x48>)
     1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ISPR[0] = 0xFFFFFFFFUL;
     200:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  ispr_rd = NVIC->ISPR[0];
     204:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
  for (j=0; j<32; j++)
    {
      if ((ispr_rd & 0x00000001) == 1) numirq++;
     208:	f013 0f01 	tst.w	r3, #1
     20c:	bf18      	it	ne
     20e:	3101      	addne	r1, #1
  for (j=0; j<32; j++)
     210:	3c01      	subs	r4, #1
      ispr_rd >>= 1;
     212:	ea4f 0363 	mov.w	r3, r3, asr #1
  for (j=0; j<32; j++)
     216:	d1f7      	bne.n	208 <Stack_Size+0x8>
    }

  if (numirq != EXPECTED_IRQNUM)
     218:	2920      	cmp	r1, #32
     21a:	d00a      	beq.n	232 <Stack_Size+0x32>
    {
      printf ("\n\nIRQNUM: %u, expected %d\tFAIL\n\n", numirq, EXPECTED_IRQNUM);
     21c:	2220      	movs	r2, #32
     21e:	480b      	ldr	r0, [pc, #44]	; (24c <Stack_Size+0x4c>)
     220:	f001 f8ba 	bl	1398 <iprintf>
      printf ("\n\nIRQNUM: %u\t\tPASS\n\n", numirq);
      fail = 0;
    }

  // Clear all pending interrupts
  NVIC->ICPR[0] = 0xFFFFFFFFUL;
     224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     228:	4b07      	ldr	r3, [pc, #28]	; (248 <Stack_Size+0x48>)
      fail = 1;
     22a:	2001      	movs	r0, #1
  NVIC->ICPR[0] = 0xFFFFFFFFUL;
     22c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  return fail;
}
     230:	bd10      	pop	{r4, pc}
      printf ("\n\nIRQNUM: %u\t\tPASS\n\n", numirq);
     232:	4807      	ldr	r0, [pc, #28]	; (250 <Stack_Size+0x50>)
     234:	f001 f8b0 	bl	1398 <iprintf>
  NVIC->ICPR[0] = 0xFFFFFFFFUL;
     238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     23c:	4b02      	ldr	r3, [pc, #8]	; (248 <Stack_Size+0x48>)
      fail = 0;
     23e:	4620      	mov	r0, r4
  NVIC->ICPR[0] = 0xFFFFFFFFUL;
     240:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
     244:	bd10      	pop	{r4, pc}
     246:	bf00      	nop
     248:	e000e100 	.word	0xe000e100
     24c:	000022d4 	.word	0x000022d4
     250:	000022f8 	.word	0x000022f8

00000254 <TimerExample>:

// ----------------------------------------------------------
// Timer demo
// ----------------------------------------------------------
int TimerExample(void)
{
     254:	b508      	push	{r3, lr}
  puts("\n\n\n");
     256:	4815      	ldr	r0, [pc, #84]	; (2ac <TimerExample+0x58>)
     258:	f001 f912 	bl	1480 <puts>
  puts("+*************************+");
     25c:	4814      	ldr	r0, [pc, #80]	; (2b0 <TimerExample+0x5c>)
     25e:	f001 f90f 	bl	1480 <puts>
  puts("*                         *");
     262:	4814      	ldr	r0, [pc, #80]	; (2b4 <TimerExample+0x60>)
     264:	f001 f90c 	bl	1480 <puts>
  puts("*  Timer0 Interrupt demo  *");
     268:	4813      	ldr	r0, [pc, #76]	; (2b8 <TimerExample+0x64>)
     26a:	f001 f909 	bl	1480 <puts>
  puts("*                         *");
     26e:	4811      	ldr	r0, [pc, #68]	; (2b4 <TimerExample+0x60>)
     270:	f001 f906 	bl	1480 <puts>
  puts("+*************************+\n\n");
     274:	4811      	ldr	r0, [pc, #68]	; (2bc <TimerExample+0x68>)
     276:	f001 f903 	bl	1480 <puts>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     27a:	f44f 7380 	mov.w	r3, #256	; 0x100
     27e:	4810      	ldr	r0, [pc, #64]	; (2c0 <TimerExample+0x6c>)

  NVIC_ClearPendingIRQ(TIMER0_IRQn);
  NVIC_EnableIRQ(TIMER0_IRQn);

  // initialise Timer0 with internal clock, with interrupt generation
  CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER0, 0x100, 1);
     280:	4619      	mov	r1, r3
     282:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
     286:	2201      	movs	r2, #1
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     288:	6003      	str	r3, [r0, #0]
     28a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     28e:	f000 fb8d 	bl	9ac <CM3DS_MPS2_timer_Init_IntClock>

  while (timer_stopped==0) {
     292:	4a0c      	ldr	r2, [pc, #48]	; (2c4 <TimerExample+0x70>)
     294:	6813      	ldr	r3, [r2, #0]
     296:	b91b      	cbnz	r3, 2a0 <TimerExample+0x4c>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     298:	bf20      	wfe
     29a:	6813      	ldr	r3, [r2, #0]
     29c:	2b00      	cmp	r3, #0
     29e:	d0fb      	beq.n	298 <TimerExample+0x44>
    __WFE(); // enter sleep
    }
  puts("   Timer test done");  // Banner
     2a0:	4809      	ldr	r0, [pc, #36]	; (2c8 <TimerExample+0x74>)
     2a2:	f001 f8ed 	bl	1480 <puts>

  return 0;
}
     2a6:	2000      	movs	r0, #0
     2a8:	bd08      	pop	{r3, pc}
     2aa:	bf00      	nop
     2ac:	00002310 	.word	0x00002310
     2b0:	00002314 	.word	0x00002314
     2b4:	00002330 	.word	0x00002330
     2b8:	0000234c 	.word	0x0000234c
     2bc:	00002368 	.word	0x00002368
     2c0:	e000e100 	.word	0xe000e100
     2c4:	20000068 	.word	0x20000068
     2c8:	00002388 	.word	0x00002388

000002cc <UartExample>:
// ----------------------------------------------------------
// UART interrupt test
// ----------------------------------------------------------

void UartExample(void)
{
     2cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmission_complete = 0;    /*transmission complete bool*/

  puts("+*************************+");
     2ce:	4832      	ldr	r0, [pc, #200]	; (398 <UartExample+0xcc>)
{
     2d0:	b084      	sub	sp, #16
  puts("+*************************+");
     2d2:	f001 f8d5 	bl	1480 <puts>
  puts("*                         *");
     2d6:	4831      	ldr	r0, [pc, #196]	; (39c <UartExample+0xd0>)
     2d8:	f001 f8d2 	bl	1480 <puts>
  puts("*   UART Interrupt demo   *");
     2dc:	4830      	ldr	r0, [pc, #192]	; (3a0 <UartExample+0xd4>)
     2de:	f001 f8cf 	bl	1480 <puts>
  puts("*                         *");
     2e2:	482e      	ldr	r0, [pc, #184]	; (39c <UartExample+0xd0>)
     2e4:	f001 f8cc 	bl	1480 <puts>
  puts("+*************************+\n\n");
     2e8:	482e      	ldr	r0, [pc, #184]	; (3a4 <UartExample+0xd8>)
     2ea:	f001 f8c9 	bl	1480 <puts>

  CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO0, 0x0010);  //enable alt functions for UART transmission
     2ee:	2110      	movs	r1, #16
     2f0:	482d      	ldr	r0, [pc, #180]	; (3a8 <UartExample+0xdc>)
     2f2:	f000 fbd9 	bl	aa8 <CM3DS_MPS2_gpio_SetAltFunc>
  CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO1, 0x0400);  //enable alt functions for UART transmission
     2f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
     2fa:	482c      	ldr	r0, [pc, #176]	; (3ac <UartExample+0xe0>)
     2fc:	f000 fbd4 	bl	aa8 <CM3DS_MPS2_gpio_SetAltFunc>
  */
  /* enable UARTs with selected baud rate
       UART #0 - transmit
       UART #1 - receive
  */
  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART2, 0x200, 1, 0, 1, 0, 0, 0);
     300:	2500      	movs	r5, #0
     302:	2601      	movs	r6, #1
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     308:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     30c:	4928      	ldr	r1, [pc, #160]	; (3b0 <UartExample+0xe4>)
     30e:	462b      	mov	r3, r5
     310:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
     314:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     318:	604a      	str	r2, [r1, #4]
     31a:	6048      	str	r0, [r1, #4]
     31c:	4632      	mov	r2, r6
     31e:	f44f 7100 	mov.w	r1, #512	; 0x200
     322:	e9cd 5502 	strd	r5, r5, [sp, #8]
     326:	e9cd 6500 	strd	r6, r5, [sp]
     32a:	4822      	ldr	r0, [pc, #136]	; (3b4 <UartExample+0xe8>)
     32c:	f000 fb62 	bl	9f4 <CM3DS_MPS2_uart_init>
  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART3, 0x200, 0, 1, 0, 1, 0, 0);

  rx_count = 0;
     330:	4c21      	ldr	r4, [pc, #132]	; (3b8 <UartExample+0xec>)
  CM3DS_MPS2_uart_init(CM3DS_MPS2_UART3, 0x200, 0, 1, 0, 1, 0, 0);
     332:	4633      	mov	r3, r6
     334:	462a      	mov	r2, r5
     336:	f44f 7100 	mov.w	r1, #512	; 0x200
     33a:	e9cd 5502 	strd	r5, r5, [sp, #8]
     33e:	e9cd 5600 	strd	r5, r6, [sp]
     342:	481e      	ldr	r0, [pc, #120]	; (3bc <UartExample+0xf0>)
     344:	f000 fb56 	bl	9f4 <CM3DS_MPS2_uart_init>
  tx_count = 0;

  printf ("Transmit message : %s\n", str_tx);
     348:	491d      	ldr	r1, [pc, #116]	; (3c0 <UartExample+0xf4>)
     34a:	481e      	ldr	r0, [pc, #120]	; (3c4 <UartExample+0xf8>)
  rx_count = 0;
     34c:	6065      	str	r5, [r4, #4]
  tx_count = 0;
     34e:	60a5      	str	r5, [r4, #8]
  printf ("Transmit message : %s\n", str_tx);
     350:	f001 f822 	bl	1398 <iprintf>

  /* Start first character transfer */
  tx_count++;
     354:	68a3      	ldr	r3, [r4, #8]
  CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2, str_tx[0]); // send the character
     356:	2168      	movs	r1, #104	; 0x68
  tx_count++;
     358:	4433      	add	r3, r6
  CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2, str_tx[0]); // send the character
     35a:	4816      	ldr	r0, [pc, #88]	; (3b4 <UartExample+0xe8>)
  tx_count++;
     35c:	60a3      	str	r3, [r4, #8]
  CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2, str_tx[0]); // send the character
     35e:	f000 fb75 	bl	a4c <CM3DS_MPS2_uart_SendChar>
  /* The rest of the transfers are handled by interrupts */

  while(transmission_complete==0)    // loop until transmission completed
  {

    if ((tx_count==uart_str_length) && (rx_count==uart_str_length)) transmission_complete = 1;
     362:	68a3      	ldr	r3, [r4, #8]
     364:	2b0b      	cmp	r3, #11
     366:	d1fc      	bne.n	362 <UartExample+0x96>
     368:	6863      	ldr	r3, [r4, #4]
     36a:	2b0b      	cmp	r3, #11
     36c:	d1f9      	bne.n	362 <UartExample+0x96>
  }

  printf ("Received message : %s\n", str_rx);
     36e:	4916      	ldr	r1, [pc, #88]	; (3c8 <UartExample+0xfc>)
     370:	4816      	ldr	r0, [pc, #88]	; (3cc <UartExample+0x100>)
     372:	f001 f811 	bl	1398 <iprintf>

  while(strcmp((char *)str_rx, str_tx)){ // hang if received message != transmit message
     376:	4912      	ldr	r1, [pc, #72]	; (3c0 <UartExample+0xf4>)
     378:	4813      	ldr	r0, [pc, #76]	; (3c8 <UartExample+0xfc>)
     37a:	f001 f889 	bl	1490 <strcmp>
     37e:	b100      	cbz	r0, 382 <UartExample+0xb6>
     380:	e7fe      	b.n	380 <UartExample+0xb4>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     38a:	4b09      	ldr	r3, [pc, #36]	; (3b0 <UartExample+0xe4>)
     38c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
     390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  NVIC_DisableIRQ(UART2_IRQn);   //disable both UART2 TX and UART3 RX IRQs
  NVIC_DisableIRQ(UART3_IRQn);

  return;
}
     394:	b004      	add	sp, #16
     396:	bd70      	pop	{r4, r5, r6, pc}
     398:	00002314 	.word	0x00002314
     39c:	00002330 	.word	0x00002330
     3a0:	0000239c 	.word	0x0000239c
     3a4:	00002368 	.word	0x00002368
     3a8:	40010000 	.word	0x40010000
     3ac:	40011000 	.word	0x40011000
     3b0:	e000e100 	.word	0xe000e100
     3b4:	4002c000 	.word	0x4002c000
     3b8:	20000068 	.word	0x20000068
     3bc:	4002d000 	.word	0x4002d000
     3c0:	000022c4 	.word	0x000022c4
     3c4:	000023b8 	.word	0x000023b8
     3c8:	20000080 	.word	0x20000080
     3cc:	000023d0 	.word	0x000023d0

000003d0 <GPIOIntExample>:
    - else amend err_code
    - if test on all pins pass the test as a whole passes and return 0 to main
    - else return an error and print error message
*/
int GPIOIntExample(void)
{
     3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  int irq_counter = 0;
  int err_code = 0;

  puts("\n\n\n");
     3d4:	4888      	ldr	r0, [pc, #544]	; (5f8 <GPIOIntExample+0x228>)
     3d6:	f001 f853 	bl	1480 <puts>
  puts("+*************************+");
     3da:	4888      	ldr	r0, [pc, #544]	; (5fc <GPIOIntExample+0x22c>)
     3dc:	f001 f850 	bl	1480 <puts>
  puts("*                         *");
     3e0:	4887      	ldr	r0, [pc, #540]	; (600 <GPIOIntExample+0x230>)
     3e2:	f001 f84d 	bl	1480 <puts>
  puts("*  GPIO PORT0: Interrupt  *");
     3e6:	4887      	ldr	r0, [pc, #540]	; (604 <GPIOIntExample+0x234>)
     3e8:	f001 f84a 	bl	1480 <puts>
  puts("*         Example         *");
     3ec:	4886      	ldr	r0, [pc, #536]	; (608 <GPIOIntExample+0x238>)
  puts("*                         *");
  puts("+*************************+\n\n");

  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0x780); //set output enable to output on ports [10:7] of GPIO 0
     3ee:	4c87      	ldr	r4, [pc, #540]	; (60c <GPIOIntExample+0x23c>)
  puts("*         Example         *");
     3f0:	f001 f846 	bl	1480 <puts>
  puts("*                         *");
     3f4:	4882      	ldr	r0, [pc, #520]	; (600 <GPIOIntExample+0x230>)
     3f6:	f001 f843 	bl	1480 <puts>
  puts("+*************************+\n\n");
     3fa:	4885      	ldr	r0, [pc, #532]	; (610 <GPIOIntExample+0x240>)
     3fc:	f001 f840 	bl	1480 <puts>
  CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO0, 0x780); //set output enable to output on ports [10:7] of GPIO 0
     400:	4620      	mov	r0, r4
     402:	f44f 61f0 	mov.w	r1, #1920	; 0x780
     406:	f000 fb49 	bl	a9c <CM3DS_MPS2_gpio_SetOutEnable>
  // By setting the port to output the pins are controllable by software

  CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);   // set current I/O port value
     40a:	f44f 63a0 	mov.w	r3, #1280	; 0x500

  CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO0, 7);   //set pin 7 to high level interrupts
     40e:	4620      	mov	r0, r4
  CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);   // set current I/O port value
     410:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO0, 7);   //set pin 7 to high level interrupts
     412:	2107      	movs	r1, #7
     414:	f000 fb60 	bl	ad8 <CM3DS_MPS2_gpio_SetIntHighLevel>
  CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO0, 8);    //set pin 8 to low level interrupts
     418:	4620      	mov	r0, r4
     41a:	2108      	movs	r1, #8
     41c:	f000 fb68 	bl	af0 <CM3DS_MPS2_gpio_SetIntLowLevel>
  CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO0, 9);  //set pin 9 to rising edge interrupts
     420:	4620      	mov	r0, r4
     422:	2109      	movs	r1, #9
     424:	f000 fb5e 	bl	ae4 <CM3DS_MPS2_gpio_SetIntRisingEdge>
  CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO0, 10); //set pin 10 to falling edge interrupts
     428:	4620      	mov	r0, r4
     42a:	210a      	movs	r1, #10
     42c:	f000 fb66 	bl	afc <CM3DS_MPS2_gpio_SetIntFallingEdge>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     430:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
     434:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
     438:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
     43c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     440:	4c74      	ldr	r4, [pc, #464]	; (614 <GPIOIntExample+0x244>)
     442:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
     446:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
     44a:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
     44e:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     452:	6020      	str	r0, [r4, #0]
     454:	6021      	str	r1, [r4, #0]
     456:	6022      	str	r2, [r4, #0]
     458:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ(PORT0_7_IRQn);                         //enable NVIC interrupts on PORT0
  NVIC_EnableIRQ(PORT0_8_IRQn);
  NVIC_EnableIRQ(PORT0_9_IRQn);
  NVIC_EnableIRQ(PORT0_10_IRQn);

  if ((NVIC->ISER[0]>>PORT0_7_IRQn)!=0x0F) {            // Cortex-M0 DesignStart only has 16 IRQ
     45a:	6823      	ldr	r3, [r4, #0]
     45c:	0ddb      	lsrs	r3, r3, #23
     45e:	2b0f      	cmp	r3, #15
     460:	d006      	beq.n	470 <GPIOIntExample+0xa0>
    printf("Not all of IRQ[%d to %d] are available.\nUse combined GPIO interrupt for test\n\n",
     462:	221a      	movs	r2, #26
     464:	2117      	movs	r1, #23
     466:	486c      	ldr	r0, [pc, #432]	; (618 <GPIOIntExample+0x248>)
     468:	f000 ff96 	bl	1398 <iprintf>
     46c:	2340      	movs	r3, #64	; 0x40
     46e:	6023      	str	r3, [r4, #0]
           PORT0_7_IRQn,PORT0_10_IRQn);
    NVIC_EnableIRQ(PORT0_ALL_IRQn);                     //enable combined NVIC interrupts on PORT0
    }

  CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, 7);
     470:	4c66      	ldr	r4, [pc, #408]	; (60c <GPIOIntExample+0x23c>)
     472:	2107      	movs	r1, #7
     474:	4620      	mov	r0, r4
     476:	f000 fb23 	bl	ac0 <CM3DS_MPS2_gpio_SetIntEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7); // emulating high level input on pin 0.
     47a:	f44f 63b0 	mov.w	r3, #1408	; 0x580
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 7);
     47e:	2107      	movs	r1, #7
  CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7); // emulating high level input on pin 0.
     480:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 7);
     482:	4620      	mov	r0, r4

  puts("    ...Test GPIO0[7]...\n");

  if(irq_triggered){   //if irq flag set then print message else amend error code
     484:	4d65      	ldr	r5, [pc, #404]	; (61c <GPIOIntExample+0x24c>)
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 7);
     486:	f000 fb21 	bl	acc <CM3DS_MPS2_gpio_ClrIntEnable>
  puts("    ...Test GPIO0[7]...\n");
     48a:	4865      	ldr	r0, [pc, #404]	; (620 <GPIOIntExample+0x250>)
     48c:	f000 fff8 	bl	1480 <puts>
  if(irq_triggered){   //if irq flag set then print message else amend error code
     490:	682b      	ldr	r3, [r5, #0]
     492:	2b00      	cmp	r3, #0
     494:	d15b      	bne.n	54e <GPIOIntExample+0x17e>
     496:	2701      	movs	r7, #1
     498:	f04f 0902 	mov.w	r9, #2
    puts("      High Level IRQ:\n     Detected On Pin 7\n\n");
    irq_triggered = 0;
    irq_counter++;
  }
  else err_code |= (1 << irq_counter);
     49c:	46b8      	mov	r8, r7
     49e:	2603      	movs	r6, #3

  CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, 8);
     4a0:	4c5a      	ldr	r4, [pc, #360]	; (60c <GPIOIntExample+0x23c>)
     4a2:	2108      	movs	r1, #8
     4a4:	4620      	mov	r0, r4
     4a6:	f000 fb0b 	bl	ac0 <CM3DS_MPS2_gpio_SetIntEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = (0x9 << 7); // emulating low level input on pin 8.
     4aa:	f44f 6390 	mov.w	r3, #1152	; 0x480
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 8);
     4ae:	2108      	movs	r1, #8
  CM3DS_MPS2_GPIO0->DATAOUT = (0x9 << 7); // emulating low level input on pin 8.
     4b0:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 8);
     4b2:	4620      	mov	r0, r4
     4b4:	f000 fb0a 	bl	acc <CM3DS_MPS2_gpio_ClrIntEnable>

  puts("    ...Test GPIO0[8]...\n");
     4b8:	485a      	ldr	r0, [pc, #360]	; (624 <GPIOIntExample+0x254>)
     4ba:	f000 ffe1 	bl	1480 <puts>

  if(irq_triggered){  //if irq flag set then print message else amend error code
     4be:	682b      	ldr	r3, [r5, #0]
     4c0:	2b00      	cmp	r3, #0
     4c2:	f040 808a 	bne.w	5da <GPIOIntExample+0x20a>
    irq_triggered = 0;
    irq_counter++;
  }
  else err_code |= (1 << 1);

  CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, 9);
     4c6:	4c51      	ldr	r4, [pc, #324]	; (60c <GPIOIntExample+0x23c>)
     4c8:	2109      	movs	r1, #9
     4ca:	4620      	mov	r0, r4
     4cc:	f000 faf8 	bl	ac0 <CM3DS_MPS2_gpio_SetIntEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = (0xD << 7); // emulating rising edge input on pin 9.
     4d0:	f44f 63d0 	mov.w	r3, #1664	; 0x680
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 9);
     4d4:	2109      	movs	r1, #9
  CM3DS_MPS2_GPIO0->DATAOUT = (0xD << 7); // emulating rising edge input on pin 9.
     4d6:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 9);
     4d8:	4620      	mov	r0, r4
     4da:	f000 faf7 	bl	acc <CM3DS_MPS2_gpio_ClrIntEnable>

  puts("    ...Test GPIO0[9]...\n");
     4de:	4852      	ldr	r0, [pc, #328]	; (628 <GPIOIntExample+0x258>)
     4e0:	f000 ffce 	bl	1480 <puts>

  if(irq_triggered){  //if irq flag set then print message else amend error code
     4e4:	f8d5 8000 	ldr.w	r8, [r5]
     4e8:	f1b8 0f00 	cmp.w	r8, #0
     4ec:	d13a      	bne.n	564 <GPIOIntExample+0x194>
    irq_triggered = 0;
    irq_counter++;
  }
  else err_code |= (1 << 2);

  CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, 10);
     4ee:	210a      	movs	r1, #10
     4f0:	4620      	mov	r0, r4
     4f2:	f000 fae5 	bl	ac0 <CM3DS_MPS2_gpio_SetIntEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = (0x5 << 7); // emulating falling edge input on pin 10.
     4f6:	f44f 7320 	mov.w	r3, #640	; 0x280
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 10);
     4fa:	210a      	movs	r1, #10
  CM3DS_MPS2_GPIO0->DATAOUT = (0x5 << 7); // emulating falling edge input on pin 10.
     4fc:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 10);
     4fe:	4620      	mov	r0, r4
     500:	f000 fae4 	bl	acc <CM3DS_MPS2_gpio_ClrIntEnable>

  puts("    ...Test GPIO0[10]...\n");
     504:	4849      	ldr	r0, [pc, #292]	; (62c <GPIOIntExample+0x25c>)
     506:	f000 ffbb 	bl	1480 <puts>

  if(irq_triggered){  //if irq flag set then print message else amend error code
     50a:	682b      	ldr	r3, [r5, #0]
  else err_code |= (1 << 2);
     50c:	f046 0604 	orr.w	r6, r6, #4
  if(irq_triggered){  //if irq flag set then print message else amend error code
     510:	2b00      	cmp	r3, #0
     512:	d16a      	bne.n	5ea <GPIOIntExample+0x21a>
    puts("     Falling Edge IRQ:\n     Detected On Pin 10\n\n");
    irq_triggered = 0;
    irq_counter++;
  }
   else err_code |= (1 << 3);
     514:	f046 0608 	orr.w	r6, r6, #8
  }
  else{

    /*if the port did not have 1 of each IRQs as expected then display error*/

    printf("\n** TEST FAILED ** IRQ Tests Error Code: (0x%x\n", err_code);
     518:	4631      	mov	r1, r6
     51a:	4845      	ldr	r0, [pc, #276]	; (630 <GPIOIntExample+0x260>)
     51c:	f000 ff3c 	bl	1398 <iprintf>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     520:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
     524:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
     528:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
     52c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
     530:	2240      	movs	r2, #64	; 0x40
     532:	4b38      	ldr	r3, [pc, #224]	; (614 <GPIOIntExample+0x244>)
     534:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
     538:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
     53c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
     540:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC_DisableIRQ(PORT0_8_IRQn);
  NVIC_DisableIRQ(PORT0_9_IRQn);
  NVIC_DisableIRQ(PORT0_10_IRQn);
  NVIC_DisableIRQ(PORT0_ALL_IRQn);
  return err_code;
}
     544:	4630      	mov	r0, r6
     546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    puts("      High Level IRQ:\n     Detected On Pin 7\n\n");
     54e:	4839      	ldr	r0, [pc, #228]	; (634 <GPIOIntExample+0x264>)
     550:	f000 ff96 	bl	1480 <puts>
     554:	2702      	movs	r7, #2
    irq_triggered = 0;
     556:	2300      	movs	r3, #0
     558:	463e      	mov	r6, r7
     55a:	602b      	str	r3, [r5, #0]
  int err_code = 0;
     55c:	4698      	mov	r8, r3
     55e:	f04f 0903 	mov.w	r9, #3
     562:	e79d      	b.n	4a0 <GPIOIntExample+0xd0>
    irq_triggered = 0;
     564:	f04f 0800 	mov.w	r8, #0
    puts("      Rising Edge IRQ\n     Detected On Pin 9\n\n");
     568:	4833      	ldr	r0, [pc, #204]	; (638 <GPIOIntExample+0x268>)
     56a:	f000 ff89 	bl	1480 <puts>
  CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, 10);
     56e:	210a      	movs	r1, #10
     570:	4620      	mov	r0, r4
    irq_triggered = 0;
     572:	f8c5 8000 	str.w	r8, [r5]
  CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO0, 10);
     576:	f000 faa3 	bl	ac0 <CM3DS_MPS2_gpio_SetIntEnable>
  CM3DS_MPS2_GPIO0->DATAOUT = (0x5 << 7); // emulating falling edge input on pin 10.
     57a:	f44f 7320 	mov.w	r3, #640	; 0x280
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 10);
     57e:	210a      	movs	r1, #10
  CM3DS_MPS2_GPIO0->DATAOUT = (0x5 << 7); // emulating falling edge input on pin 10.
     580:	6063      	str	r3, [r4, #4]
  CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO0, 10);
     582:	4620      	mov	r0, r4
     584:	f000 faa2 	bl	acc <CM3DS_MPS2_gpio_ClrIntEnable>
  puts("    ...Test GPIO0[10]...\n");
     588:	4828      	ldr	r0, [pc, #160]	; (62c <GPIOIntExample+0x25c>)
     58a:	f000 ff79 	bl	1480 <puts>
  if(irq_triggered){  //if irq flag set then print message else amend error code
     58e:	682b      	ldr	r3, [r5, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0bf      	beq.n	514 <GPIOIntExample+0x144>
    puts("     Falling Edge IRQ:\n     Detected On Pin 10\n\n");
     594:	4829      	ldr	r0, [pc, #164]	; (63c <GPIOIntExample+0x26c>)
     596:	f000 ff73 	bl	1480 <puts>
  if(irq_counter == 4){
     59a:	2f03      	cmp	r7, #3
    irq_triggered = 0;
     59c:	f8c5 8000 	str.w	r8, [r5]
  if(irq_counter == 4){
     5a0:	d103      	bne.n	5aa <GPIOIntExample+0x1da>
    printf("    All %d IRQs Detected\n\n", irq_counter);
     5a2:	2104      	movs	r1, #4
     5a4:	4826      	ldr	r0, [pc, #152]	; (640 <GPIOIntExample+0x270>)
     5a6:	f000 fef7 	bl	1398 <iprintf>
  if(err_code == 0){
     5aa:	2e00      	cmp	r6, #0
     5ac:	d1b4      	bne.n	518 <GPIOIntExample+0x148>
    puts("\n");
     5ae:	4825      	ldr	r0, [pc, #148]	; (644 <GPIOIntExample+0x274>)
     5b0:	f000 ff66 	bl	1480 <puts>
    puts(" +***********************+");
     5b4:	4824      	ldr	r0, [pc, #144]	; (648 <GPIOIntExample+0x278>)
     5b6:	f000 ff63 	bl	1480 <puts>
    puts(" *                       *");
     5ba:	4824      	ldr	r0, [pc, #144]	; (64c <GPIOIntExample+0x27c>)
     5bc:	f000 ff60 	bl	1480 <puts>
    puts(" *   GPIO 0 IRQ Tests    *");
     5c0:	4823      	ldr	r0, [pc, #140]	; (650 <GPIOIntExample+0x280>)
     5c2:	f000 ff5d 	bl	1480 <puts>
    puts(" *  Passed Successfully  *");
     5c6:	4823      	ldr	r0, [pc, #140]	; (654 <GPIOIntExample+0x284>)
     5c8:	f000 ff5a 	bl	1480 <puts>
    puts(" *                       *");
     5cc:	481f      	ldr	r0, [pc, #124]	; (64c <GPIOIntExample+0x27c>)
     5ce:	f000 ff57 	bl	1480 <puts>
    puts(" +***********************+\n");
     5d2:	4821      	ldr	r0, [pc, #132]	; (658 <GPIOIntExample+0x288>)
     5d4:	f000 ff54 	bl	1480 <puts>
     5d8:	e7a2      	b.n	520 <GPIOIntExample+0x150>
    puts("       Low Level IRQ\n     Detected On Pin 8\n\n");
     5da:	4820      	ldr	r0, [pc, #128]	; (65c <GPIOIntExample+0x28c>)
     5dc:	f000 ff50 	bl	1480 <puts>
    irq_triggered = 0;
     5e0:	2300      	movs	r3, #0
     5e2:	464f      	mov	r7, r9
     5e4:	4646      	mov	r6, r8
     5e6:	602b      	str	r3, [r5, #0]
     5e8:	e76d      	b.n	4c6 <GPIOIntExample+0xf6>
    puts("     Falling Edge IRQ:\n     Detected On Pin 10\n\n");
     5ea:	4814      	ldr	r0, [pc, #80]	; (63c <GPIOIntExample+0x26c>)
     5ec:	f000 ff48 	bl	1480 <puts>
    irq_triggered = 0;
     5f0:	f8c5 8000 	str.w	r8, [r5]
     5f4:	e7d9      	b.n	5aa <GPIOIntExample+0x1da>
     5f6:	bf00      	nop
     5f8:	00002310 	.word	0x00002310
     5fc:	00002314 	.word	0x00002314
     600:	00002330 	.word	0x00002330
     604:	000023e8 	.word	0x000023e8
     608:	00002404 	.word	0x00002404
     60c:	40010000 	.word	0x40010000
     610:	00002368 	.word	0x00002368
     614:	e000e100 	.word	0xe000e100
     618:	00002420 	.word	0x00002420
     61c:	2000008c 	.word	0x2000008c
     620:	00002470 	.word	0x00002470
     624:	000024bc 	.word	0x000024bc
     628:	00002508 	.word	0x00002508
     62c:	00002554 	.word	0x00002554
     630:	0000264c 	.word	0x0000264c
     634:	0000248c 	.word	0x0000248c
     638:	00002524 	.word	0x00002524
     63c:	00002570 	.word	0x00002570
     640:	000025a4 	.word	0x000025a4
     644:	00002384 	.word	0x00002384
     648:	000025c0 	.word	0x000025c0
     64c:	000025dc 	.word	0x000025dc
     650:	000025f8 	.word	0x000025f8
     654:	00002614 	.word	0x00002614
     658:	00002630 	.word	0x00002630
     65c:	000024d8 	.word	0x000024d8

00000660 <gpio0_id_check>:
/* Detect the part number to see if device is present                */

int gpio0_id_check(void)
{
#define HW32_REG(ADDRESS)  (*((volatile unsigned long  *)(ADDRESS)))
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     660:	4b05      	ldr	r3, [pc, #20]	; (678 <gpio0_id_check+0x18>)
     662:	681b      	ldr	r3, [r3, #0]
     664:	2b20      	cmp	r3, #32
     666:	d001      	beq.n	66c <gpio0_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     668:	2001      	movs	r0, #1
else
  return 0;
}
     66a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
     66c:	4b03      	ldr	r3, [pc, #12]	; (67c <gpio0_id_check+0x1c>)
     66e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     670:	38b8      	subs	r0, #184	; 0xb8
     672:	bf18      	it	ne
     674:	2001      	movne	r0, #1
     676:	4770      	bx	lr
     678:	40010fe0 	.word	0x40010fe0
     67c:	40010fe4 	.word	0x40010fe4

00000680 <timer0_id_check>:

int timer0_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     680:	4b05      	ldr	r3, [pc, #20]	; (698 <timer0_id_check+0x18>)
     682:	681b      	ldr	r3, [r3, #0]
     684:	2b22      	cmp	r3, #34	; 0x22
     686:	d001      	beq.n	68c <timer0_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     688:	2001      	movs	r0, #1
else
  return 0;
}
     68a:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8))
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <timer0_id_check+0x1c>)
     68e:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     690:	38b8      	subs	r0, #184	; 0xb8
     692:	bf18      	it	ne
     694:	2001      	movne	r0, #1
     696:	4770      	bx	lr
     698:	40000fe0 	.word	0x40000fe0
     69c:	40000fe4 	.word	0x40000fe4

000006a0 <uart2_id_check>:

int uart2_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     6a0:	4b05      	ldr	r3, [pc, #20]	; (6b8 <uart2_id_check+0x18>)
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	2b21      	cmp	r3, #33	; 0x21
     6a6:	d001      	beq.n	6ac <uart2_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     6a8:	2001      	movs	r0, #1
else
  return 0;
}
     6aa:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
     6ac:	4b03      	ldr	r3, [pc, #12]	; (6bc <uart2_id_check+0x1c>)
     6ae:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     6b0:	38b8      	subs	r0, #184	; 0xb8
     6b2:	bf18      	it	ne
     6b4:	2001      	movne	r0, #1
     6b6:	4770      	bx	lr
     6b8:	4002cfe0 	.word	0x4002cfe0
     6bc:	4002cfe4 	.word	0x4002cfe4

000006c0 <uart3_id_check>:
int uart3_id_check(void)
{
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     6c0:	4b05      	ldr	r3, [pc, #20]	; (6d8 <uart3_id_check+0x18>)
     6c2:	681b      	ldr	r3, [r3, #0]
     6c4:	2b21      	cmp	r3, #33	; 0x21
     6c6:	d001      	beq.n	6cc <uart3_id_check+0xc>
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
  return 1; /* part ID does not match */
     6c8:	2001      	movs	r0, #1
else
  return 0;
}
     6ca:	4770      	bx	lr
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <uart3_id_check+0x1c>)
     6ce:	6818      	ldr	r0, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     6d0:	38b8      	subs	r0, #184	; 0xb8
     6d2:	bf18      	it	ne
     6d4:	2001      	movne	r0, #1
     6d6:	4770      	bx	lr
     6d8:	4002dfe0 	.word	0x4002dfe0
     6dc:	4002dfe4 	.word	0x4002dfe4

000006e0 <UART2_Handler>:
// UART 2 Interrupt service routines
// ---------------------------------
//

void UART2_Handler(void)
{
     6e0:	b510      	push	{r4, lr}
  CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2); // clear TX IRQ
  // If the message output is not finished, output next character
  if (tx_count < uart_str_length) {
     6e2:	4c09      	ldr	r4, [pc, #36]	; (708 <UART2_Handler+0x28>)
  CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART2); // clear TX IRQ
     6e4:	4809      	ldr	r0, [pc, #36]	; (70c <UART2_Handler+0x2c>)
     6e6:	f000 f9d1 	bl	a8c <CM3DS_MPS2_uart_ClearTxIRQ>
  if (tx_count < uart_str_length) {
     6ea:	68a3      	ldr	r3, [r4, #8]
     6ec:	2b0a      	cmp	r3, #10
     6ee:	d900      	bls.n	6f2 <UART2_Handler+0x12>
    CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2,str_tx[tx_count]);
    tx_count++;
    }

}
     6f0:	bd10      	pop	{r4, pc}
    CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART2,str_tx[tx_count]);
     6f2:	68a3      	ldr	r3, [r4, #8]
     6f4:	4a06      	ldr	r2, [pc, #24]	; (710 <UART2_Handler+0x30>)
     6f6:	4805      	ldr	r0, [pc, #20]	; (70c <UART2_Handler+0x2c>)
     6f8:	5cd1      	ldrb	r1, [r2, r3]
     6fa:	f000 f9a7 	bl	a4c <CM3DS_MPS2_uart_SendChar>
    tx_count++;
     6fe:	68a3      	ldr	r3, [r4, #8]
     700:	3301      	adds	r3, #1
     702:	60a3      	str	r3, [r4, #8]
}
     704:	bd10      	pop	{r4, pc}
     706:	bf00      	nop
     708:	20000068 	.word	0x20000068
     70c:	4002c000 	.word	0x4002c000
     710:	000022c4 	.word	0x000022c4

00000714 <UART3_Handler>:
// ---------------------------------
// UART 3 Interrupt service routines
// ---------------------------------

void UART3_Handler(void)
{
     714:	b538      	push	{r3, r4, r5, lr}
  CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3); //clear RX IRQ
     716:	4d07      	ldr	r5, [pc, #28]	; (734 <UART3_Handler+0x20>)
  str_rx[rx_count]=CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3); // Read data
     718:	4c07      	ldr	r4, [pc, #28]	; (738 <UART3_Handler+0x24>)
  CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART3); //clear RX IRQ
     71a:	4628      	mov	r0, r5
     71c:	f000 f9ba 	bl	a94 <CM3DS_MPS2_uart_ClearRxIRQ>
  str_rx[rx_count]=CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART3); // Read data
     720:	4628      	mov	r0, r5
     722:	6865      	ldr	r5, [r4, #4]
     724:	f000 f998 	bl	a58 <CM3DS_MPS2_uart_ReceiveChar>
     728:	4b04      	ldr	r3, [pc, #16]	; (73c <UART3_Handler+0x28>)
     72a:	5558      	strb	r0, [r3, r5]
  rx_count++;
     72c:	6863      	ldr	r3, [r4, #4]
     72e:	3301      	adds	r3, #1
     730:	6063      	str	r3, [r4, #4]
}
     732:	bd38      	pop	{r3, r4, r5, pc}
     734:	4002d000 	.word	0x4002d000
     738:	20000068 	.word	0x20000068
     73c:	20000080 	.word	0x20000080

00000740 <TIMER0_Handler>:
// Timer 0 Interrupt service routines
// ---------------------------------

void TIMER0_Handler(void)
{
  timer_stopped = 1;                      // set timer stopped bool, so that
     740:	2201      	movs	r2, #1
{
     742:	b508      	push	{r3, lr}
  timer_stopped = 1;                      // set timer stopped bool, so that
     744:	4b07      	ldr	r3, [pc, #28]	; (764 <TIMER0_Handler+0x24>)
                                          // system does not wait for another interrupt
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);    // stop timer
     746:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  timer_stopped = 1;                      // set timer stopped bool, so that
     74a:	601a      	str	r2, [r3, #0]
  CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER0);    // stop timer
     74c:	f000 f91a 	bl	984 <CM3DS_MPS2_timer_StopTimer>
  CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER0);     // clear timer 0 IRQ
     750:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     754:	f000 f924 	bl	9a0 <CM3DS_MPS2_timer_ClearIRQ>
  puts("   [Timer 0 IRQ]");
}
     758:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  puts("   [Timer 0 IRQ]");
     75c:	4802      	ldr	r0, [pc, #8]	; (768 <TIMER0_Handler+0x28>)
     75e:	f000 be8f 	b.w	1480 <puts>
     762:	bf00      	nop
     764:	20000068 	.word	0x20000068
     768:	00002778 	.word	0x00002778

0000076c <PORT0_7_Handler>:
// GPIO Port 0 Interrupt service routines
// ---------------------------------
//
void PORT0_7_Handler(void)
{
  irq_triggered = 1;                            /* high level */
     76c:	2001      	movs	r0, #1
  CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);                  /* Deassert Port 0 pin 7 to 0 */
     76e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  irq_triggered = 1;                            /* high level */
     772:	4904      	ldr	r1, [pc, #16]	; (784 <PORT0_7_Handler+0x18>)
  CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);                  /* Deassert Port 0 pin 7 to 0 */
     774:	4b04      	ldr	r3, [pc, #16]	; (788 <PORT0_7_Handler+0x1c>)
  irq_triggered = 1;                            /* high level */
     776:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 7);        //clear GPIO interrupt on pin N
     778:	4618      	mov	r0, r3
  CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);                  /* Deassert Port 0 pin 7 to 0 */
     77a:	605a      	str	r2, [r3, #4]
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 7);        //clear GPIO interrupt on pin N
     77c:	2107      	movs	r1, #7
     77e:	f000 b999 	b.w	ab4 <CM3DS_MPS2_gpio_IntClear>
     782:	bf00      	nop
     784:	2000008c 	.word	0x2000008c
     788:	40010000 	.word	0x40010000

0000078c <PORT0_8_Handler>:
}

void PORT0_8_Handler(void)
{
  irq_triggered = 1;                            /*low level*/
     78c:	2001      	movs	r0, #1
  CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7);                  /* Deassert Port 0 pin 8 to 1 */
     78e:	f44f 62b0 	mov.w	r2, #1408	; 0x580
  irq_triggered = 1;                            /*low level*/
     792:	4904      	ldr	r1, [pc, #16]	; (7a4 <PORT0_8_Handler+0x18>)
  CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7);                  /* Deassert Port 0 pin 8 to 1 */
     794:	4b04      	ldr	r3, [pc, #16]	; (7a8 <PORT0_8_Handler+0x1c>)
  irq_triggered = 1;                            /*low level*/
     796:	6008      	str	r0, [r1, #0]
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 8);        //clear GPIO interrupt on pin N
     798:	4618      	mov	r0, r3
  CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7);                  /* Deassert Port 0 pin 8 to 1 */
     79a:	605a      	str	r2, [r3, #4]
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 8);        //clear GPIO interrupt on pin N
     79c:	2108      	movs	r1, #8
     79e:	f000 b989 	b.w	ab4 <CM3DS_MPS2_gpio_IntClear>
     7a2:	bf00      	nop
     7a4:	2000008c 	.word	0x2000008c
     7a8:	40010000 	.word	0x40010000

000007ac <PORT0_9_Handler>:
}

void PORT0_9_Handler(void)
{
  irq_triggered = 1;                            /*rising edge*/
     7ac:	2201      	movs	r2, #1
     7ae:	4b03      	ldr	r3, [pc, #12]	; (7bc <PORT0_9_Handler+0x10>)
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 9);        //clear GPIO interrupt on pin N
     7b0:	2109      	movs	r1, #9
     7b2:	4803      	ldr	r0, [pc, #12]	; (7c0 <PORT0_9_Handler+0x14>)
  irq_triggered = 1;                            /*rising edge*/
     7b4:	601a      	str	r2, [r3, #0]
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 9);        //clear GPIO interrupt on pin N
     7b6:	f000 b97d 	b.w	ab4 <CM3DS_MPS2_gpio_IntClear>
     7ba:	bf00      	nop
     7bc:	2000008c 	.word	0x2000008c
     7c0:	40010000 	.word	0x40010000

000007c4 <PORT0_10_Handler>:
}

void PORT0_10_Handler(void)
{
  irq_triggered = 1;                            /*falling edge*/
     7c4:	2201      	movs	r2, #1
     7c6:	4b03      	ldr	r3, [pc, #12]	; (7d4 <PORT0_10_Handler+0x10>)
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 10);        //clear GPIO interrupt on pin N
     7c8:	210a      	movs	r1, #10
     7ca:	4803      	ldr	r0, [pc, #12]	; (7d8 <PORT0_10_Handler+0x14>)
  irq_triggered = 1;                            /*falling edge*/
     7cc:	601a      	str	r2, [r3, #0]
  CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 10);        //clear GPIO interrupt on pin N
     7ce:	f000 b971 	b.w	ab4 <CM3DS_MPS2_gpio_IntClear>
     7d2:	bf00      	nop
     7d4:	2000008c 	.word	0x2000008c
     7d8:	40010000 	.word	0x40010000

000007dc <PORT0_COMB_Handler>:
}

void PORT0_COMB_Handler(void)   /* Combined handler */
{
  irq_triggered = 1;
     7dc:	2101      	movs	r1, #1
     7de:	4a16      	ldr	r2, [pc, #88]	; (838 <PORT0_COMB_Handler+0x5c>)
{
     7e0:	b508      	push	{r3, lr}
  if (CM3DS_MPS2_GPIO0->INTSTATUS & 0x80){ /* high level */
     7e2:	4b16      	ldr	r3, [pc, #88]	; (83c <PORT0_COMB_Handler+0x60>)
  irq_triggered = 1;
     7e4:	6011      	str	r1, [r2, #0]
  if (CM3DS_MPS2_GPIO0->INTSTATUS & 0x80){ /* high level */
     7e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     7e8:	0610      	lsls	r0, r2, #24
     7ea:	d41d      	bmi.n	828 <PORT0_COMB_Handler+0x4c>
    CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);                  /* Deassert Port 0 pin 7 to 0 */
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 7);        //clear GPIO interrupt on pin N
    }
  if (CM3DS_MPS2_GPIO0->INTSTATUS & 0x100){ /* low level*/
     7ec:	4b13      	ldr	r3, [pc, #76]	; (83c <PORT0_COMB_Handler+0x60>)
     7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     7f0:	05d1      	lsls	r1, r2, #23
     7f2:	d411      	bmi.n	818 <PORT0_COMB_Handler+0x3c>
    CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7);                  /* Deassert Port 0 pin 8 to 1 */
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 8);        //clear GPIO interrupt on pin N
    }
  if (CM3DS_MPS2_GPIO0->INTSTATUS & 0x200){ /* rising edge*/
     7f4:	4811      	ldr	r0, [pc, #68]	; (83c <PORT0_COMB_Handler+0x60>)
     7f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
     7f8:	059a      	lsls	r2, r3, #22
     7fa:	d409      	bmi.n	810 <PORT0_COMB_Handler+0x34>
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 9);         //clear GPIO interrupt on pin N
    }
  if (CM3DS_MPS2_GPIO0->INTSTATUS & 0x400){ /* falling edge*/
     7fc:	480f      	ldr	r0, [pc, #60]	; (83c <PORT0_COMB_Handler+0x60>)
     7fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
     800:	055b      	lsls	r3, r3, #21
     802:	d400      	bmi.n	806 <PORT0_COMB_Handler+0x2a>
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 10);         //clear GPIO interrupt on pin N
    }
  return;
}
     804:	bd08      	pop	{r3, pc}
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 10);         //clear GPIO interrupt on pin N
     806:	210a      	movs	r1, #10
}
     808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 10);         //clear GPIO interrupt on pin N
     80c:	f000 b952 	b.w	ab4 <CM3DS_MPS2_gpio_IntClear>
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 9);         //clear GPIO interrupt on pin N
     810:	2109      	movs	r1, #9
     812:	f000 f94f 	bl	ab4 <CM3DS_MPS2_gpio_IntClear>
     816:	e7f1      	b.n	7fc <PORT0_COMB_Handler+0x20>
    CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7);                  /* Deassert Port 0 pin 8 to 1 */
     818:	f44f 62b0 	mov.w	r2, #1408	; 0x580
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 8);        //clear GPIO interrupt on pin N
     81c:	4618      	mov	r0, r3
    CM3DS_MPS2_GPIO0->DATAOUT = (0xB << 7);                  /* Deassert Port 0 pin 8 to 1 */
     81e:	605a      	str	r2, [r3, #4]
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 8);        //clear GPIO interrupt on pin N
     820:	2108      	movs	r1, #8
     822:	f000 f947 	bl	ab4 <CM3DS_MPS2_gpio_IntClear>
     826:	e7e5      	b.n	7f4 <PORT0_COMB_Handler+0x18>
    CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);                  /* Deassert Port 0 pin 7 to 0 */
     828:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 7);        //clear GPIO interrupt on pin N
     82c:	4618      	mov	r0, r3
    CM3DS_MPS2_GPIO0->DATAOUT = (0xA << 7);                  /* Deassert Port 0 pin 7 to 0 */
     82e:	605a      	str	r2, [r3, #4]
    CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO0, 7);        //clear GPIO interrupt on pin N
     830:	2107      	movs	r1, #7
     832:	f000 f93f 	bl	ab4 <CM3DS_MPS2_gpio_IntClear>
     836:	e7d9      	b.n	7ec <PORT0_COMB_Handler+0x10>
     838:	2000008c 	.word	0x2000008c
     83c:	40010000 	.word	0x40010000

00000840 <main>:
{
     840:	b508      	push	{r3, lr}
  UartStdOutInit();  // Initialize UART2 for printf (retargeting)
     842:	f000 f86d 	bl	920 <UartStdOutInit>
  puts("\nCortex-M3 DesignStart - Interrupt Demo - revision $Revision: 243249 $\n");
     846:	4821      	ldr	r0, [pc, #132]	; (8cc <main+0x8c>)
     848:	f000 fe1a 	bl	1480 <puts>
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     84c:	4b20      	ldr	r3, [pc, #128]	; (8d0 <main+0x90>)
     84e:	681b      	ldr	r3, [r3, #0]
     850:	2b22      	cmp	r3, #34	; 0x22
     852:	d034      	beq.n	8be <main+0x7e>
  if (timer0_id_check()!=0)  puts ("Timer 0 not present. TimerExample skipped.");
     854:	481f      	ldr	r0, [pc, #124]	; (8d4 <main+0x94>)
     856:	f000 fe13 	bl	1480 <puts>
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     85a:	4b1f      	ldr	r3, [pc, #124]	; (8d8 <main+0x98>)
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	2b20      	cmp	r3, #32
     860:	d026      	beq.n	8b0 <main+0x70>
  if (gpio0_id_check()!=0)   puts ("GPIO 0 not present. GPIOIntExample skipped.");
     862:	481e      	ldr	r0, [pc, #120]	; (8dc <main+0x9c>)
     864:	f000 fe0c 	bl	1480 <puts>
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     868:	4b1d      	ldr	r3, [pc, #116]	; (8e0 <main+0xa0>)
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	2b21      	cmp	r3, #33	; 0x21
     86e:	d010      	beq.n	892 <main+0x52>
     puts ("UART 2 or UART 3 not present. UartExample skipped.");
     870:	481c      	ldr	r0, [pc, #112]	; (8e4 <main+0xa4>)
     872:	f000 fe05 	bl	1480 <puts>
  if (Check_IRQNUM() == 0)
     876:	f7ff fcbb 	bl	1f0 <Check_IRQNUM>
     87a:	b130      	cbz	r0, 88a <main+0x4a>
     puts ("** TEST FAILED ** \n");
     87c:	481a      	ldr	r0, [pc, #104]	; (8e8 <main+0xa8>)
     87e:	f000 fdff 	bl	1480 <puts>
  UartEndSimulation();    // send test end character to finish test
     882:	f000 f865 	bl	950 <UartEndSimulation>
}
     886:	2000      	movs	r0, #0
     888:	bd08      	pop	{r3, pc}
     puts ("** TEST PASSED ** \n");
     88a:	4818      	ldr	r0, [pc, #96]	; (8ec <main+0xac>)
     88c:	f000 fdf8 	bl	1480 <puts>
     890:	e7f7      	b.n	882 <main+0x42>
    (HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE4) != 0xB8))
     892:	4b17      	ldr	r3, [pc, #92]	; (8f0 <main+0xb0>)
     894:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART2_BASE + 0xFE0) != 0x21) ||
     896:	2bb8      	cmp	r3, #184	; 0xb8
     898:	d1ea      	bne.n	870 <main+0x30>
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     89a:	4b16      	ldr	r3, [pc, #88]	; (8f4 <main+0xb4>)
     89c:	681b      	ldr	r3, [r3, #0]
     89e:	2b21      	cmp	r3, #33	; 0x21
     8a0:	d1e6      	bne.n	870 <main+0x30>
    (HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE4) != 0xB8))
     8a2:	4b15      	ldr	r3, [pc, #84]	; (8f8 <main+0xb8>)
     8a4:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_UART3_BASE + 0xFE0) != 0x21) ||
     8a6:	2bb8      	cmp	r3, #184	; 0xb8
     8a8:	d1e2      	bne.n	870 <main+0x30>
  else                       UartExample();     // Uart interrupt example
     8aa:	f7ff fd0f 	bl	2cc <UartExample>
     8ae:	e7e2      	b.n	876 <main+0x36>
    (HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE4) != 0xB8))
     8b0:	4b12      	ldr	r3, [pc, #72]	; (8fc <main+0xbc>)
     8b2:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_GPIO0_BASE + 0xFE0) != 0x20) ||
     8b4:	2bb8      	cmp	r3, #184	; 0xb8
     8b6:	d1d4      	bne.n	862 <main+0x22>
  else                       GPIOIntExample();  // GPIO PORT0 interrupt example
     8b8:	f7ff fd8a 	bl	3d0 <GPIOIntExample>
     8bc:	e7d4      	b.n	868 <main+0x28>
    (HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE4) != 0xB8))
     8be:	4b10      	ldr	r3, [pc, #64]	; (900 <main+0xc0>)
     8c0:	681b      	ldr	r3, [r3, #0]
if ((HW32_REG(CM3DS_MPS2_TIMER0_BASE + 0xFE0) != 0x22) ||
     8c2:	2bb8      	cmp	r3, #184	; 0xb8
     8c4:	d1c6      	bne.n	854 <main+0x14>
  else                       TimerExample();    // Timer 0 interrupt example
     8c6:	f7ff fcc5 	bl	254 <TimerExample>
     8ca:	e7c6      	b.n	85a <main+0x1a>
     8cc:	0000267c 	.word	0x0000267c
     8d0:	40000fe0 	.word	0x40000fe0
     8d4:	000026c4 	.word	0x000026c4
     8d8:	40010fe0 	.word	0x40010fe0
     8dc:	000026f0 	.word	0x000026f0
     8e0:	4002cfe0 	.word	0x4002cfe0
     8e4:	0000271c 	.word	0x0000271c
     8e8:	00002764 	.word	0x00002764
     8ec:	00002750 	.word	0x00002750
     8f0:	4002cfe4 	.word	0x4002cfe4
     8f4:	4002dfe0 	.word	0x4002dfe0
     8f8:	4002dfe4 	.word	0x4002dfe4
     8fc:	40010fe4 	.word	0x40010fe4
     900:	40000fe4 	.word	0x40000fe4

00000904 <_write>:
#include <sys/stat.h>

extern unsigned char UartPutc(unsigned char my_ch);

__attribute__ ((used))  int _write (int fd, char *ptr, int len)
{
     904:	b570      	push	{r4, r5, r6, lr}
  size_t i;
  for (i=0; i<len;i++) {
     906:	4616      	mov	r6, r2
     908:	b13a      	cbz	r2, 91a <_write+0x16>
     90a:	1e4c      	subs	r4, r1, #1
     90c:	18a5      	adds	r5, r4, r2
    UartPutc(ptr[i]); // call character output function
     90e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
     912:	f000 f80d 	bl	930 <UartPutc>
  for (i=0; i<len;i++) {
     916:	42ac      	cmp	r4, r5
     918:	d1f9      	bne.n	90e <_write+0xa>
    }
  return len;
}
     91a:	4630      	mov	r0, r6
     91c:	bd70      	pop	{r4, r5, r6, pc}
     91e:	bf00      	nop

00000920 <UartStdOutInit>:
#else
// Simulation

void UartStdOutInit(void)
{
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     924:	2110      	movs	r1, #16
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     926:	2241      	movs	r2, #65	; 0x41
  CM3DS_MPS2_UART0->BAUDDIV = 16;
     928:	6119      	str	r1, [r3, #16]
  CM3DS_MPS2_UART0->CTRL    = 0x41; // High speed test mode, TX only
     92a:	609a      	str	r2, [r3, #8]
//  CM3DS_MPS2_GPIO1->ALTFUNCSET = (1<<5);
  return;
}
     92c:	4770      	bx	lr
     92e:	bf00      	nop

00000930 <UartPutc>:
// Output a character
unsigned char UartPutc(unsigned char my_ch)
{
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     930:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     934:	6853      	ldr	r3, [r2, #4]
     936:	07db      	lsls	r3, r3, #31
     938:	d4fc      	bmi.n	934 <UartPutc+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     93a:	6010      	str	r0, [r2, #0]
  return (my_ch);
}
     93c:	4770      	bx	lr
     93e:	bf00      	nop

00000940 <UartGetc>:
// Get a character
unsigned char UartGetc(void)
{
  while ((CM3DS_MPS2_UART0->STATE & 2)==0); // Wait if Receive Holding register is empty
     940:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     944:	6853      	ldr	r3, [r2, #4]
     946:	079b      	lsls	r3, r3, #30
     948:	d5fc      	bpl.n	944 <UartGetc+0x4>
  return (CM3DS_MPS2_UART0->DATA);
     94a:	6810      	ldr	r0, [r2, #0]
}
     94c:	b2c0      	uxtb	r0, r0
     94e:	4770      	bx	lr

00000950 <UartEndSimulation>:
  while ((CM3DS_MPS2_UART0->STATE & 1)); // Wait if Transmit Holding register is full
     950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     954:	685a      	ldr	r2, [r3, #4]
     956:	07d2      	lsls	r2, r2, #31
     958:	d4fc      	bmi.n	954 <UartEndSimulation+0x4>
  CM3DS_MPS2_UART0->DATA = my_ch; // write to transmit holding register
     95a:	2204      	movs	r2, #4
     95c:	601a      	str	r2, [r3, #0]
     95e:	e7fe      	b.n	95e <UartEndSimulation+0xe>

00000960 <CM3DS_MPS2_timer_EnableIRQ>:
 * @brief  Enable the microcontroller timer interrupts.
 */

 void CM3DS_MPS2_timer_EnableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     960:	6803      	ldr	r3, [r0, #0]
     962:	f043 0308 	orr.w	r3, r3, #8
     966:	6003      	str	r3, [r0, #0]
 }
     968:	4770      	bx	lr
     96a:	bf00      	nop

0000096c <CM3DS_MPS2_timer_DisableIRQ>:
 * @brief  Disable the microcontroller timer interrutps.
 */

 void CM3DS_MPS2_timer_DisableIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk;
     96c:	6803      	ldr	r3, [r0, #0]
     96e:	f023 0308 	bic.w	r3, r3, #8
     972:	6003      	str	r3, [r0, #0]
 }
     974:	4770      	bx	lr
     976:	bf00      	nop

00000978 <CM3DS_MPS2_timer_StartTimer>:
 * @brief  Start the Timer.
 */

 void CM3DS_MPS2_timer_StartTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL |= CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     978:	6803      	ldr	r3, [r0, #0]
     97a:	f043 0301 	orr.w	r3, r3, #1
     97e:	6003      	str	r3, [r0, #0]
 }
     980:	4770      	bx	lr
     982:	bf00      	nop

00000984 <CM3DS_MPS2_timer_StopTimer>:
 * @brief  Stop the Timer.
 */

 void CM3DS_MPS2_timer_StopTimer(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->CTRL &= ~CM3DS_MPS2_TIMER_CTRL_EN_Msk;
     984:	6803      	ldr	r3, [r0, #0]
     986:	f023 0301 	bic.w	r3, r3, #1
     98a:	6003      	str	r3, [r0, #0]
 }
     98c:	4770      	bx	lr
     98e:	bf00      	nop

00000990 <CM3DS_MPS2_timer_GetValue>:
 * @brief  Returns the current value of the timer.
 */

 uint32_t CM3DS_MPS2_timer_GetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->VALUE;
     990:	6840      	ldr	r0, [r0, #4]
 }
     992:	4770      	bx	lr

00000994 <CM3DS_MPS2_timer_SetValue>:
 * @brief  Sets the timer to the specified value.
 */

 void CM3DS_MPS2_timer_SetValue(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->VALUE = value;
     994:	6041      	str	r1, [r0, #4]
 }
     996:	4770      	bx	lr

00000998 <CM3DS_MPS2_timer_GetReload>:
 * @brief  Returns the reload value of the timer. The reload value is the value which the timer is set to after an underflow occurs.
 */

 uint32_t CM3DS_MPS2_timer_GetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->RELOAD;
     998:	6880      	ldr	r0, [r0, #8]
 }
     99a:	4770      	bx	lr

0000099c <CM3DS_MPS2_timer_SetReload>:
 * @brief  Sets the reload value of the timer to the specified value. The reload value is the value which the timer is set to after an underflow occurs.
 */

 void CM3DS_MPS2_timer_SetReload(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t value)
 {
       CM3DS_MPS2_TIMER->RELOAD = value;
     99c:	6081      	str	r1, [r0, #8]
 }
     99e:	4770      	bx	lr

000009a0 <CM3DS_MPS2_timer_ClearIRQ>:
 * @brief  Clears the timer IRQ if set.
 */

 void CM3DS_MPS2_timer_ClearIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       CM3DS_MPS2_TIMER->INTCLEAR = CM3DS_MPS2_TIMER_INTCLEAR_Msk;
     9a0:	2301      	movs	r3, #1
     9a2:	60c3      	str	r3, [r0, #12]
 }
     9a4:	4770      	bx	lr
     9a6:	bf00      	nop

000009a8 <CM3DS_MPS2_timer_StatusIRQ>:
 * @brief  Returns the IRQ status of the timer in question.
 */

 uint32_t  CM3DS_MPS2_timer_StatusIRQ(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER)
 {
       return CM3DS_MPS2_TIMER->INTSTATUS;
     9a8:	68c0      	ldr	r0, [r0, #12]
 }
     9aa:	4770      	bx	lr

000009ac <CM3DS_MPS2_timer_Init_IntClock>:
 */

  void CM3DS_MPS2_timer_Init_IntClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     9ac:	2300      	movs	r3, #0
     9ae:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     9b0:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     9b2:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                          /* non zero - enable IRQ */
     9b4:	b912      	cbnz	r2, 9bc <CM3DS_MPS2_timer_Init_IntClock+0x10>
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else{                                                                                   /* zero - do not enable IRQ */
         CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk);                                       /* enable timer */
     9b6:	2301      	movs	r3, #1
     9b8:	6003      	str	r3, [r0, #0]
        }
 }
     9ba:	4770      	bx	lr
         CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
     9bc:	2309      	movs	r3, #9
     9be:	6003      	str	r3, [r0, #0]
     9c0:	4770      	bx	lr
     9c2:	bf00      	nop

000009c4 <CM3DS_MPS2_timer_Init_ExtClock>:
 */

 void CM3DS_MPS2_timer_Init_ExtClock(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     9c8:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     9ca:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     9cc:	b912      	cbnz	r2, 9d4 <CM3DS_MPS2_timer_Init_ExtClock+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk |CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     9ce:	2305      	movs	r3, #5
     9d0:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTCLK_Msk);                                   /* enable timer */
         }
 }
     9d2:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     9d4:	230d      	movs	r3, #13
     9d6:	6003      	str	r3, [r0, #0]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <CM3DS_MPS2_timer_Init_ExtEnable>:
 */

 void CM3DS_MPS2_timer_Init_ExtEnable(CM3DS_MPS2_TIMER_TypeDef *CM3DS_MPS2_TIMER, uint32_t reload,
 uint32_t irq_en)
 {
       CM3DS_MPS2_TIMER->CTRL = 0;
     9dc:	2300      	movs	r3, #0
     9de:	6003      	str	r3, [r0, #0]
       CM3DS_MPS2_TIMER->VALUE = reload;
     9e0:	6041      	str	r1, [r0, #4]
       CM3DS_MPS2_TIMER->RELOAD = reload;
     9e2:	6081      	str	r1, [r0, #8]
       if (irq_en!=0)                                                                                  /* non zero - enable IRQ */
     9e4:	b912      	cbnz	r2, 9ec <CM3DS_MPS2_timer_Init_ExtEnable+0x10>
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
                                   CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk | CM3DS_MPS2_TIMER_CTRL_EN_Msk);
       else  {                                                                                         /* zero - do not enable IRQ */
            CM3DS_MPS2_TIMER->CTRL = ( CM3DS_MPS2_TIMER_CTRL_EN_Msk |
     9e6:	2303      	movs	r3, #3
     9e8:	6003      	str	r3, [r0, #0]
                                    CM3DS_MPS2_TIMER_CTRL_SELEXTEN_Msk);                                    /* enable timer */
         }
 }
     9ea:	4770      	bx	lr
            CM3DS_MPS2_TIMER->CTRL = (CM3DS_MPS2_TIMER_CTRL_IRQEN_Msk |
     9ec:	230b      	movs	r3, #11
     9ee:	6003      	str	r3, [r0, #0]
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop

000009f4 <CM3DS_MPS2_uart_init>:
 * @return 1 if initialisation failed, 0 if successful.
 */

 uint32_t CM3DS_MPS2_uart_init(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, uint32_t divider, uint32_t tx_en,
                           uint32_t rx_en, uint32_t tx_irq_en, uint32_t rx_irq_en, uint32_t tx_ovrirq_en, uint32_t rx_ovrirq_en)
 {
     9f4:	b4f0      	push	{r4, r5, r6, r7}
       uint32_t new_ctrl=0;

       if (tx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_TXEN_Msk;
     9f6:	3200      	adds	r2, #0
     9f8:	bf18      	it	ne
     9fa:	2201      	movne	r2, #1
 {
     9fc:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
     a00:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
       if (rx_en!=0)        new_ctrl |= CM3DS_MPS2_UART_CTRL_RXEN_Msk;
     a04:	b10b      	cbz	r3, a0a <CM3DS_MPS2_uart_init+0x16>
     a06:	f042 0202 	orr.w	r2, r2, #2
       if (tx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_TXIRQEN_Msk;
     a0a:	b10f      	cbz	r7, a10 <CM3DS_MPS2_uart_init+0x1c>
     a0c:	f042 0204 	orr.w	r2, r2, #4
       if (rx_irq_en!=0)    new_ctrl |= CM3DS_MPS2_UART_CTRL_RXIRQEN_Msk;
     a10:	b10e      	cbz	r6, a16 <CM3DS_MPS2_uart_init+0x22>
     a12:	f042 0208 	orr.w	r2, r2, #8
       if (tx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_TXORIRQEN_Msk;
     a16:	b10d      	cbz	r5, a1c <CM3DS_MPS2_uart_init+0x28>
     a18:	f042 0210 	orr.w	r2, r2, #16
       if (rx_ovrirq_en!=0) new_ctrl |= CM3DS_MPS2_UART_CTRL_RXORIRQEN_Msk;
     a1c:	b10c      	cbz	r4, a22 <CM3DS_MPS2_uart_init+0x2e>
     a1e:	f042 0220 	orr.w	r2, r2, #32

       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     a22:	2300      	movs	r3, #0
       CM3DS_MPS2_UART->BAUDDIV = divider;
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */

       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
       else return 0;
 }
     a24:	bcf0      	pop	{r4, r5, r6, r7}
       CM3DS_MPS2_UART->CTRL = 0;         /* Disable UART when changing configuration */
     a26:	6083      	str	r3, [r0, #8]
       CM3DS_MPS2_UART->BAUDDIV = divider;
     a28:	6101      	str	r1, [r0, #16]
       CM3DS_MPS2_UART->CTRL = new_ctrl;  /* Update CTRL register to new value */
     a2a:	6082      	str	r2, [r0, #8]
       if((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))) return 1;
     a2c:	6843      	ldr	r3, [r0, #4]
     a2e:	f013 0f0c 	tst.w	r3, #12
 }
     a32:	bf14      	ite	ne
     a34:	2001      	movne	r0, #1
     a36:	2000      	moveq	r0, #0
     a38:	4770      	bx	lr
     a3a:	bf00      	nop

00000a3c <CM3DS_MPS2_uart_GetRxBufferFull>:
 * @brief  Returns whether the RX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetRxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk)>> CM3DS_MPS2_UART_STATE_RXBF_Pos);
     a3c:	6840      	ldr	r0, [r0, #4]
 }
     a3e:	f3c0 0040 	ubfx	r0, r0, #1, #1
     a42:	4770      	bx	lr

00000a44 <CM3DS_MPS2_uart_GetTxBufferFull>:
 * @brief  Returns whether the TX buffer is full.
 */

 uint32_t CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk)>> CM3DS_MPS2_UART_STATE_TXBF_Pos);
     a44:	6840      	ldr	r0, [r0, #4]
 }
     a46:	f000 0001 	and.w	r0, r0, #1
     a4a:	4770      	bx	lr

00000a4c <CM3DS_MPS2_uart_SendChar>:
 * @brief  Sends a character to the TX buffer for transmission.
 */

 void CM3DS_MPS2_uart_SendChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART, char txchar)
 {
       while(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_TXBF_Msk);
     a4c:	6843      	ldr	r3, [r0, #4]
     a4e:	07db      	lsls	r3, r3, #31
     a50:	d4fc      	bmi.n	a4c <CM3DS_MPS2_uart_SendChar>
       CM3DS_MPS2_UART->DATA = (uint32_t)txchar;
     a52:	6001      	str	r1, [r0, #0]
 }
     a54:	4770      	bx	lr
     a56:	bf00      	nop

00000a58 <CM3DS_MPS2_uart_ReceiveChar>:
 * @brief  returns the character from the RX buffer which has been received.
 */

 char CM3DS_MPS2_uart_ReceiveChar(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       while(!(CM3DS_MPS2_UART->STATE & CM3DS_MPS2_UART_STATE_RXBF_Msk));
     a58:	6843      	ldr	r3, [r0, #4]
     a5a:	079b      	lsls	r3, r3, #30
     a5c:	d5fc      	bpl.n	a58 <CM3DS_MPS2_uart_ReceiveChar>
       return (char)(CM3DS_MPS2_UART->DATA);
     a5e:	6800      	ldr	r0, [r0, #0]
 }
     a60:	b2c0      	uxtb	r0, r0
     a62:	4770      	bx	lr

00000a64 <CM3DS_MPS2_uart_GetOverrunStatus>:
 */


 uint32_t CM3DS_MPS2_uart_GetOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     a64:	6840      	ldr	r0, [r0, #4]
 }
     a66:	f3c0 0081 	ubfx	r0, r0, #2, #2
     a6a:	4770      	bx	lr

00000a6c <CM3DS_MPS2_uart_ClearOverrunStatus>:
 * @brief  Clears the overrun status of both the RX & TX buffers and then returns the current overrun status.
 */

 uint32_t CM3DS_MPS2_uart_ClearOverrunStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->STATE = (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk);
     a6c:	230c      	movs	r3, #12
     a6e:	6043      	str	r3, [r0, #4]
        return ((CM3DS_MPS2_UART->STATE & (CM3DS_MPS2_UART_STATE_RXOR_Msk | CM3DS_MPS2_UART_STATE_TXOR_Msk))>>CM3DS_MPS2_UART_STATE_TXOR_Pos);
     a70:	6840      	ldr	r0, [r0, #4]
 }
     a72:	f3c0 0081 	ubfx	r0, r0, #2, #2
     a76:	4770      	bx	lr

00000a78 <CM3DS_MPS2_uart_GetBaudDivider>:
 * @brief  Returns the current UART Baud rate divider. Note that the Baud rate divider is the difference between the clock frequency and the Baud frequency.
 */

 uint32_t CM3DS_MPS2_uart_GetBaudDivider(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return CM3DS_MPS2_UART->BAUDDIV;
     a78:	6900      	ldr	r0, [r0, #16]
 }
     a7a:	4770      	bx	lr

00000a7c <CM3DS_MPS2_uart_GetTxIRQStatus>:
 * @brief  Returns the TX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetTxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_TXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_TXIRQ_Pos);
     a7c:	68c0      	ldr	r0, [r0, #12]
 }
     a7e:	f000 0001 	and.w	r0, r0, #1
     a82:	4770      	bx	lr

00000a84 <CM3DS_MPS2_uart_GetRxIRQStatus>:
 * @brief  Returns the RX interrupt status.
 */

 uint32_t CM3DS_MPS2_uart_GetRxIRQStatus(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       return ((CM3DS_MPS2_UART->INTSTATUS & CM3DS_MPS2_UART_CTRL_RXIRQ_Msk)>>CM3DS_MPS2_UART_CTRL_RXIRQ_Pos);
     a84:	68c0      	ldr	r0, [r0, #12]
 }
     a86:	f3c0 0040 	ubfx	r0, r0, #1, #1
     a8a:	4770      	bx	lr

00000a8c <CM3DS_MPS2_uart_ClearTxIRQ>:
 * @brief  Clears the TX buffer full interrupt status.
 */

 void CM3DS_MPS2_uart_ClearTxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_TXIRQ_Msk;
     a8c:	2301      	movs	r3, #1
     a8e:	60c3      	str	r3, [r0, #12]
 }
     a90:	4770      	bx	lr
     a92:	bf00      	nop

00000a94 <CM3DS_MPS2_uart_ClearRxIRQ>:
 * @brief  Clears the RX interrupt status.
 */

 void CM3DS_MPS2_uart_ClearRxIRQ(CM3DS_MPS2_UART_TypeDef *CM3DS_MPS2_UART)
 {
       CM3DS_MPS2_UART->INTCLEAR = CM3DS_MPS2_UART_CTRL_RXIRQ_Msk;
     a94:	2302      	movs	r3, #2
     a96:	60c3      	str	r3, [r0, #12]
 }
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <CM3DS_MPS2_gpio_SetOutEnable>:
 * @brief  Sets pins on a port as an output. Set the bit corresponding to the pin number to 1 for output i.e. Set bit 1 of outenable to 1 to set pin 1 as an output. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableset)
 {
       CM3DS_MPS2_GPIO->OUTENABLESET = outenableset;
     a9c:	6101      	str	r1, [r0, #16]
 }
     a9e:	4770      	bx	lr

00000aa0 <CM3DS_MPS2_gpio_ClrOutEnable>:
 * @brief  Sets pins on a port as an input. Set the bit corresponding to the pin number to 1 for input i.e. Set bit 1 of outenable to 1 to set pin 1 as an input. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t outenableclr)
 {
       CM3DS_MPS2_GPIO->OUTENABLECLR = outenableclr;
     aa0:	6141      	str	r1, [r0, #20]
 }
     aa2:	4770      	bx	lr

00000aa4 <CM3DS_MPS2_gpio_GetOutEnable>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set as inputs or outputs i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is an output.
 */

 uint32_t CM3DS_MPS2_gpio_GetOutEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->OUTENABLESET;
     aa4:	6900      	ldr	r0, [r0, #16]
 }
     aa6:	4770      	bx	lr

00000aa8 <CM3DS_MPS2_gpio_SetAltFunc>:
 * @brief  enables the alternative function for pins. Set the bit corresponding to the pin number to 1 for alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to its alternative function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncset)
 {
       CM3DS_MPS2_GPIO->ALTFUNCSET = AltFuncset;
     aa8:	6181      	str	r1, [r0, #24]
 }
     aaa:	4770      	bx	lr

00000aac <CM3DS_MPS2_gpio_ClrAltFunc>:
 * @brief  disables the alternative function for pins. Set the bit corresponding to the pin number to 1 to disable alternate function i.e. Set bit 1 of ALtFunc to 1 to set pin 1 to the orignal output function. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_ClrAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t AltFuncclr)
 {
       CM3DS_MPS2_GPIO->ALTFUNCCLR = AltFuncclr;
     aac:	61c1      	str	r1, [r0, #28]
 }
     aae:	4770      	bx	lr

00000ab0 <CM3DS_MPS2_gpio_GetAltFunc>:
 * @brief  returns a uint32_t which defines the whether pins on a port are set to their alternative or their original output functionality i.e. if bit 1 of the returned uint32_t is set to 1 then this means that pin 1 is set to its alternative function.
 */

 uint32_t CM3DS_MPS2_gpio_GetAltFunc(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO)
 {
       return CM3DS_MPS2_GPIO->ALTFUNCSET;
     ab0:	6980      	ldr	r0, [r0, #24]
 }
     ab2:	4770      	bx	lr

00000ab4 <CM3DS_MPS2_gpio_IntClear>:
 * @brief  Clears the interrupt flag for the specified pin and then returns the new interrupt status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_IntClear(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTCLEAR = (1 << Num);
     ab4:	2301      	movs	r3, #1
     ab6:	fa03 f101 	lsl.w	r1, r3, r1
     aba:	6381      	str	r1, [r0, #56]	; 0x38

       return CM3DS_MPS2_GPIO->INTSTATUS;
     abc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 }
     abe:	4770      	bx	lr

00000ac0 <CM3DS_MPS2_gpio_SetIntEnable>:
 * @brief  Enables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

 uint32_t CM3DS_MPS2_gpio_SetIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENSET = (1 << Num);
     ac0:	2301      	movs	r3, #1
     ac2:	fa03 f101 	lsl.w	r1, r3, r1
     ac6:	6201      	str	r1, [r0, #32]

       return CM3DS_MPS2_GPIO->INTENSET;
     ac8:	6a00      	ldr	r0, [r0, #32]
 }
     aca:	4770      	bx	lr

00000acc <CM3DS_MPS2_gpio_ClrIntEnable>:
 * @brief  Disables interrupts for the specified pin and then returns the new interrupt enable status of the pin. This function is thread safe.
 */

  uint32_t CM3DS_MPS2_gpio_ClrIntEnable(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTENCLR = (1 << Num);
     acc:	2301      	movs	r3, #1
     ace:	fa03 f101 	lsl.w	r1, r3, r1
     ad2:	6241      	str	r1, [r0, #36]	; 0x24

       return CM3DS_MPS2_GPIO->INTENCLR;
     ad4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 }
     ad6:	4770      	bx	lr

00000ad8 <CM3DS_MPS2_gpio_SetIntHighLevel>:
 * @brief  Changes the interrupt type for the specified pin to a high level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntHighLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num); /* Clear INT TYPE bit */
     ad8:	2301      	movs	r3, #1
     ada:	fa03 f101 	lsl.w	r1, r3, r1
     ade:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     ae0:	6301      	str	r1, [r0, #48]	; 0x30
 }
     ae2:	4770      	bx	lr

00000ae4 <CM3DS_MPS2_gpio_SetIntRisingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a rising edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntRisingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num); /* Set INT TYPE bit */
     ae4:	2301      	movs	r3, #1
     ae6:	fa03 f101 	lsl.w	r1, r3, r1
     aea:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLSET = (1 << Num);  /* Set INT POLarity bit */
     aec:	6301      	str	r1, [r0, #48]	; 0x30
 }
     aee:	4770      	bx	lr

00000af0 <CM3DS_MPS2_gpio_SetIntLowLevel>:
 * @brief  Changes the interrupt type for the specified pin to a low level interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntLowLevel(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPECLR = (1 << Num);  /* Clear INT TYPE bit */
     af0:	2301      	movs	r3, #1
     af2:	fa03 f101 	lsl.w	r1, r3, r1
     af6:	62c1      	str	r1, [r0, #44]	; 0x2c
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     af8:	6341      	str	r1, [r0, #52]	; 0x34
 }
     afa:	4770      	bx	lr

00000afc <CM3DS_MPS2_gpio_SetIntFallingEdge>:
 * @brief  Changes the interrupt type for the specified pin to a falling edge interrupt. This function is thread safe.
 */

 void CM3DS_MPS2_gpio_SetIntFallingEdge(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t Num)
 {
       CM3DS_MPS2_GPIO->INTTYPESET = (1 << Num);  /* Set INT TYPE bit */
     afc:	2301      	movs	r3, #1
     afe:	fa03 f101 	lsl.w	r1, r3, r1
     b02:	6281      	str	r1, [r0, #40]	; 0x28
       CM3DS_MPS2_GPIO->INTPOLCLR = (1 << Num);   /* Clear INT POLarity bit */
     b04:	6341      	str	r1, [r0, #52]	; 0x34
 }
     b06:	4770      	bx	lr

00000b08 <CM3DS_MPS2_gpio_MaskedWrite>:
 * @brief Outputs the specified value on the desired port using the user defined mask to perform Masked access.
 */

 void CM3DS_MPS2_gpio_MaskedWrite(CM3DS_MPS2_GPIO_TypeDef *CM3DS_MPS2_GPIO, uint32_t value, uint32_t mask)
 {
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b08:	b2d3      	uxtb	r3, r2
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b12:	f502 7200 	add.w	r2, r2, #512	; 0x200
       CM3DS_MPS2_GPIO->LB_MASKED[0x00FF & mask] = value;
     b16:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
       CM3DS_MPS2_GPIO->UB_MASKED[((0xFF00 & mask) >> 8)] = value;
     b1a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 }
     b1e:	4770      	bx	lr

00000b20 <CM3DS_MPS2_i2s_config>:
                uint32_t rx_enable, uint32_t rx_int_enable, uint32_t rx_waterlevel)
 {
   uint32_t i2s_control_val;
   // TX water level range from 3 to 0
   // Generate IRQ if TX Fifo space > TX water level
   if (tx_waterlevel > 3) return 1; // Error if out of range
     b20:	2b03      	cmp	r3, #3
     b22:	d820      	bhi.n	b66 <CM3DS_MPS2_i2s_config+0x46>
 {
     b24:	b410      	push	{r4}
   // RX water level range from 4 to 1
   // Generate IRQ if RX Fifo space < RX water level
   if ((rx_waterlevel > 4)||(rx_waterlevel == 0)) return 1; // Error if out of range
     b26:	9c03      	ldr	r4, [sp, #12]
     b28:	3c01      	subs	r4, #1
     b2a:	2c03      	cmp	r4, #3
     b2c:	d818      	bhi.n	b60 <CM3DS_MPS2_i2s_config+0x40>
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
                      (tx_waterlevel << CM3DS_MPS2_I2S_CONTROL_TXWLVL_Pos) |
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
                  (tx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXEN_Pos;
     b2e:	f001 0401 	and.w	r4, r1, #1
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     b32:	9901      	ldr	r1, [sp, #4]
               (tx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_TXIRQEN_Pos |
     b34:	0052      	lsls	r2, r2, #1
     b36:	f002 0202 	and.w	r2, r2, #2
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     b3a:	0089      	lsls	r1, r1, #2
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b3c:	4322      	orrs	r2, r4
                   (rx_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXEN_Pos    |
     b3e:	f001 0104 	and.w	r1, r1, #4
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b42:	430a      	orrs	r2, r1
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     b44:	9902      	ldr	r1, [sp, #8]
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b46:	9c03      	ldr	r4, [sp, #12]
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     b48:	00c9      	lsls	r1, r1, #3
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b4a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
               (rx_int_enable & 0x1) << CM3DS_MPS2_I2S_CONTROL_RXIRQEN_Pos |
     b4e:	f001 0108 	and.w	r1, r1, #8
     i2s_control_val  = (rx_waterlevel << CM3DS_MPS2_I2S_CONTROL_RXWLVL_Pos) |
     b52:	430a      	orrs	r2, r1
     b54:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

   pI2S->CONTROL  = i2s_control_val;
     b58:	6003      	str	r3, [r0, #0]
   return 0;
 }
     b5a:	bc10      	pop	{r4}
   return 0;
     b5c:	2000      	movs	r0, #0
 }
     b5e:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     b60:	2001      	movs	r0, #1
 }
     b62:	bc10      	pop	{r4}
     b64:	4770      	bx	lr
   if (tx_waterlevel > 3) return 1; // Error if out of range
     b66:	2001      	movs	r0, #1
 }
     b68:	4770      	bx	lr
     b6a:	bf00      	nop

00000b6c <CM3DS_MPS2_i2s_tx_fifo_empty>:

 int CM3DS_MPS2_i2s_tx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_TXEmpty_Pos;
     b6c:	6840      	ldr	r0, [r0, #4]
   }
     b6e:	f3c0 0080 	ubfx	r0, r0, #2, #1
     b72:	4770      	bx	lr

00000b74 <CM3DS_MPS2_i2s_tx_fifo_full>:

 int CM3DS_MPS2_i2s_tx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXFull_Pos;
     b74:	6840      	ldr	r0, [r0, #4]
   }
     b76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     b7a:	4770      	bx	lr

00000b7c <CM3DS_MPS2_i2s_rx_fifo_empty>:

 int CM3DS_MPS2_i2s_rx_fifo_empty(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXEmpty_Msk) >> CM3DS_MPS2_I2S_STATUS_RXEmpty_Pos;
     b7c:	6840      	ldr	r0, [r0, #4]
   }
     b7e:	f3c0 1000 	ubfx	r0, r0, #4, #1
     b82:	4770      	bx	lr

00000b84 <CM3DS_MPS2_i2s_rx_fifo_full>:

 int CM3DS_MPS2_i2s_rx_fifo_full(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXFull_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXFull_Pos;
     b84:	6840      	ldr	r0, [r0, #4]
   }
     b86:	f3c0 1040 	ubfx	r0, r0, #5, #1
     b8a:	4770      	bx	lr

00000b8c <CM3DS_MPS2_i2s_rx_irq_alert>:

 int CM3DS_MPS2_i2s_rx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_RXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_RXIRQ_Pos;
     b8c:	6840      	ldr	r0, [r0, #4]
   }
     b8e:	f3c0 0040 	ubfx	r0, r0, #1, #1
     b92:	4770      	bx	lr

00000b94 <CM3DS_MPS2_i2s_tx_irq_alert>:

 int CM3DS_MPS2_i2s_tx_irq_alert(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return (pI2S->STATUS & CM3DS_MPS2_I2S_STATUS_TXIRQ_Msk)  >> CM3DS_MPS2_I2S_STATUS_TXIRQ_Pos;
     b94:	6840      	ldr	r0, [r0, #4]
   }
     b96:	f000 0001 	and.w	r0, r0, #1
     b9a:	4770      	bx	lr

00000b9c <CM3DS_MPS2_i2s_tx_stop>:

 int CM3DS_MPS2_i2s_tx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     b9c:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     b9e:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     ba0:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_TXEN_Msk;
     ba2:	f023 0301 	bic.w	r3, r3, #1
     ba6:	6013      	str	r3, [r2, #0]
   }
     ba8:	4770      	bx	lr
     baa:	bf00      	nop

00000bac <CM3DS_MPS2_i2s_rx_stop>:

 int CM3DS_MPS2_i2s_rx_stop(CM3DS_MPS2_I2S_TypeDef *pI2S){
     bac:	4602      	mov	r2, r0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     bae:	6803      	ldr	r3, [r0, #0]
   return 0;
   }
     bb0:	2000      	movs	r0, #0
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_RXEN_Msk;
     bb2:	f023 0304 	bic.w	r3, r3, #4
     bb6:	6013      	str	r3, [r2, #0]
   }
     bb8:	4770      	bx	lr
     bba:	bf00      	nop

00000bbc <CM3DS_MPS2_i2s_get_tx_error>:

 int CM3DS_MPS2_i2s_get_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_TXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_TXERR_Pos);
     bbc:	6880      	ldr	r0, [r0, #8]
   }
     bbe:	f000 0001 	and.w	r0, r0, #1
     bc2:	4770      	bx	lr

00000bc4 <CM3DS_MPS2_i2s_get_rx_error>:

 int CM3DS_MPS2_i2s_get_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   return ((pI2S->ERROR & CM3DS_MPS2_I2S_ERROR_RXERR_Msk) >> CM3DS_MPS2_I2S_ERROR_RXERR_Pos);
     bc4:	6880      	ldr	r0, [r0, #8]
   }
     bc6:	f3c0 0040 	ubfx	r0, r0, #1, #1
     bca:	4770      	bx	lr

00000bcc <CM3DS_MPS2_i2s_clear_tx_error>:

 void CM3DS_MPS2_i2s_clear_tx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_TXERR_Msk;
     bcc:	2301      	movs	r3, #1
     bce:	6083      	str	r3, [r0, #8]
   return;
   }
     bd0:	4770      	bx	lr
     bd2:	bf00      	nop

00000bd4 <CM3DS_MPS2_i2s_clear_rx_error>:

 void CM3DS_MPS2_i2s_clear_rx_error(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->ERRORCLR = CM3DS_MPS2_I2S_ERROR_RXERR_Msk;
     bd4:	2302      	movs	r3, #2
     bd6:	6083      	str	r3, [r0, #8]
   return;;
   }
     bd8:	4770      	bx	lr
     bda:	bf00      	nop

00000bdc <CM3DS_MPS2_i2s_fifo_reset>:

 void CM3DS_MPS2_i2s_fifo_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     bdc:	6803      	ldr	r3, [r0, #0]
     bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     be2:	6003      	str	r3, [r0, #0]
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_FIFORST_Msk;
     be4:	6803      	ldr	r3, [r0, #0]
     be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
     bea:	6003      	str	r3, [r0, #0]
   return;
   }
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <CM3DS_MPS2_i2s_codec_reset>:

 void CM3DS_MPS2_i2s_codec_reset(CM3DS_MPS2_I2S_TypeDef *pI2S){
   int i;
   pI2S->CONTROL |= CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     bf0:	6803      	ldr	r3, [r0, #0]
     bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     bf6:	6003      	str	r3, [r0, #0]
  __ASM volatile ("nop");
     bf8:	bf00      	nop
     bfa:	bf00      	nop
     bfc:	bf00      	nop
     bfe:	bf00      	nop
     c00:	bf00      	nop
     c02:	bf00      	nop
   for (i=0;i<6;i++) { // delay loop
     __NOP();
     }
   pI2S->CONTROL &= ~CM3DS_MPS2_I2S_CONTROL_CODECRST_Msk;
     c04:	6803      	ldr	r3, [r0, #0]
     c06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
     c0a:	6003      	str	r3, [r0, #0]
   return;
   }
     c0c:	4770      	bx	lr
     c0e:	bf00      	nop

00000c10 <CM3DS_MPS2_i2s_speed_config>:

 int CM3DS_MPS2_i2s_speed_config(CM3DS_MPS2_I2S_TypeDef *pI2S, uint32_t divide_ratio){
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     c10:	f240 33ed 	movw	r3, #1005	; 0x3ed
     c14:	f1a1 0212 	sub.w	r2, r1, #18
     c18:	429a      	cmp	r2, r3
   if (divide_ratio > 0x3FF) return 1; // Error: Divide ratio too large (only 10 bits)

   pI2S->DIVIDE = divide_ratio;
     c1a:	bf9a      	itte	ls
     c1c:	60c1      	strls	r1, [r0, #12]
   return 0;
     c1e:	2000      	movls	r0, #0
   if (divide_ratio < 18) return 1; // Error: Divide ratio too small to send all bits
     c20:	2001      	movhi	r0, #1
   }
     c22:	4770      	bx	lr

00000c24 <CM3DS_MPS2_i2c_send_byte>:
 {
     int loop;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c24:	2201      	movs	r2, #1
     c26:	4b2e      	ldr	r3, [pc, #184]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     c28:	605a      	str	r2, [r3, #4]
         // apSleepus(1);
         if (c & (1 << (7 - loop)))
     c2a:	09c2      	lsrs	r2, r0, #7
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c2c:	f04f 0202 	mov.w	r2, #2
         else
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c30:	bf0c      	ite	eq
     c32:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c34:	601a      	strne	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c36:	2201      	movs	r2, #1
     c38:	4b29      	ldr	r3, [pc, #164]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c3a:	0641      	lsls	r1, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c3c:	601a      	str	r2, [r3, #0]
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c3e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c40:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c42:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c46:	bf54      	ite	pl
     c48:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c4a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c4c:	2201      	movs	r2, #1
     c4e:	4b24      	ldr	r3, [pc, #144]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c50:	0681      	lsls	r1, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c52:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c54:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c56:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c58:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c5c:	bf54      	ite	pl
     c5e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c60:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c62:	2201      	movs	r2, #1
     c64:	4b1e      	ldr	r3, [pc, #120]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c66:	06c1      	lsls	r1, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c68:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c6a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c6c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c6e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c72:	bf54      	ite	pl
     c74:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c76:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c78:	2201      	movs	r2, #1
     c7a:	4b19      	ldr	r3, [pc, #100]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c7c:	0701      	lsls	r1, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c7e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c80:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c82:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c84:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c88:	bf54      	ite	pl
     c8a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c8c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c8e:	2201      	movs	r2, #1
     c90:	4b13      	ldr	r3, [pc, #76]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     c92:	0741      	lsls	r1, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     c94:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c96:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     c98:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     c9a:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     c9e:	bf54      	ite	pl
     ca0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ca2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ca4:	2201      	movs	r2, #1
     ca6:	4b0e      	ldr	r3, [pc, #56]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     ca8:	0781      	lsls	r1, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     caa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cac:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cae:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cb0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cb4:	bf54      	ite	pl
     cb6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cb8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cba:	2201      	movs	r2, #1
     cbc:	4b08      	ldr	r3, [pc, #32]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
         if (c & (1 << (7 - loop)))
     cbe:	07c1      	lsls	r1, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cc0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cc2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cc4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cc6:	f04f 0202 	mov.w	r2, #2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cca:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cce:	bf4c      	ite	mi
     cd0:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     cd2:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     cd4:	2201      	movs	r2, #1
     cd6:	4b02      	ldr	r3, [pc, #8]	; (ce0 <CM3DS_MPS2_i2c_send_byte+0xbc>)
     cd8:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cda:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     cdc:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
 }
     cde:	4770      	bx	lr
     ce0:	40023000 	.word	0x40023000

00000ce4 <CM3DS_MPS2_i2c_receive_byte>:
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     data         = 0;

     for (loop = 0; loop < 8; loop++) {
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ce4:	2201      	movs	r2, #1
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     ce6:	2103      	movs	r1, #3
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ce8:	2002      	movs	r0, #2
     cea:	4b2c      	ldr	r3, [pc, #176]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     cec:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cee:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     cf0:	6019      	str	r1, [r3, #0]
         // apSleepus(1);
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     cf2:	6818      	ldr	r0, [r3, #0]
             data += (1 << (7 - loop));
         // apSleepus(1);
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cf6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     cf8:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     cfa:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     cfc:	2103      	movs	r1, #3
     data         = 0;
     cfe:	f010 0f02 	tst.w	r0, #2
     d02:	bf14      	ite	ne
     d04:	2080      	movne	r0, #128	; 0x80
     d06:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d0c:	4b23      	ldr	r3, [pc, #140]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d0e:	bf48      	it	mi
     d10:	3040      	addmi	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d12:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d14:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d16:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d18:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d1a:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d1c:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d1e:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d22:	4b1e      	ldr	r3, [pc, #120]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d24:	bf48      	it	mi
     d26:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d28:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d2a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d2c:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d2e:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d30:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d32:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d34:	f04f 0201 	mov.w	r2, #1
     d38:	4b18      	ldr	r3, [pc, #96]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d3a:	bf48      	it	mi
     d3c:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d3e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d40:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d42:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d44:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d46:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d4c:	4b13      	ldr	r3, [pc, #76]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d4e:	bf48      	it	mi
     d50:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d52:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d54:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d56:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d58:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d5a:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d5c:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d5e:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d62:	4b0e      	ldr	r3, [pc, #56]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d64:	bf48      	it	mi
     d66:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d68:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d6a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d6c:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d6e:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d70:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d72:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d74:	f04f 0201 	mov.w	r2, #1
     d78:	4b08      	ldr	r3, [pc, #32]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
             data += (1 << (7 - loop));
     d7a:	bf48      	it	mi
     d7c:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d7e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d80:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
     d82:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d84:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d86:	2101      	movs	r1, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
     d88:	079b      	lsls	r3, r3, #30
             data += (1 << (7 - loop));
     d8a:	bf48      	it	mi
     d8c:	1880      	addmi	r0, r0, r2
     }

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d8e:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d90:	4b02      	ldr	r3, [pc, #8]	; (d9c <CM3DS_MPS2_i2c_receive_byte+0xb8>)
     // apSleepus(1);

     return data;
 }
     d92:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     d94:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     d96:	605a      	str	r2, [r3, #4]
 }
     d98:	4770      	bx	lr
     d9a:	bf00      	nop
     d9c:	40023000 	.word	0x40023000

00000da0 <CM3DS_MPS2_i2c_receive_ack>:
     int nack;

     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     da0:	2201      	movs	r2, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     da2:	2102      	movs	r1, #2
     da4:	4b06      	ldr	r3, [pc, #24]	; (dc0 <CM3DS_MPS2_i2c_receive_ack+0x20>)
     da6:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     da8:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     daa:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     dac:	6818      	ldr	r0, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dae:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
     if(nack==0)
     db0:	f010 0f02 	tst.w	r0, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     db4:	6019      	str	r1, [r3, #0]
         return 1;

     return 0;
 }
     db6:	bf0c      	ite	eq
     db8:	4610      	moveq	r0, r2
     dba:	2000      	movne	r0, #0
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40023000 	.word	0x40023000

00000dc4 <CM3DS_MPS2_i2c_send_ack>:

 // Write the acknowledge bit
 void CM3DS_MPS2_i2c_send_ack(void)
 {
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc4:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dc6:	2102      	movs	r1, #2
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dc8:	4b03      	ldr	r3, [pc, #12]	; (dd8 <CM3DS_MPS2_i2c_send_ack+0x14>)
     dca:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     dcc:	6019      	str	r1, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     dce:	601a      	str	r2, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dd0:	605a      	str	r2, [r3, #4]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     dd2:	6059      	str	r1, [r3, #4]
     // apSleepus(1);
 }
     dd4:	4770      	bx	lr
     dd6:	bf00      	nop
     dd8:	40023000 	.word	0x40023000

00000ddc <CM3DS_MPS2_i2c_read>:

 // Write data stream and read one byte
 unsigned char CM3DS_MPS2_i2c_read(unsigned char reg_addr, unsigned char sadr)
 {
     ddc:	b430      	push	{r4, r5}

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     dde:	2202      	movs	r2, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     de0:	2401      	movs	r4, #1
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     de2:	2503      	movs	r5, #3
     de4:	4b91      	ldr	r3, [pc, #580]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
     de6:	601d      	str	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     de8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dea:	605c      	str	r4, [r3, #4]
         if (c & (1 << (7 - loop)))
     dec:	09cc      	lsrs	r4, r1, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     dee:	bf0c      	ite	eq
     df0:	605a      	streq	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     df2:	601a      	strne	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     df4:	2201      	movs	r2, #1
     df6:	4b8d      	ldr	r3, [pc, #564]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     df8:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     dfa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dfc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     dfe:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e00:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e04:	bf54      	ite	pl
     e06:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e08:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e0a:	2201      	movs	r2, #1
     e0c:	4b87      	ldr	r3, [pc, #540]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e0e:	068d      	lsls	r5, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e10:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e12:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e14:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e16:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e1a:	bf54      	ite	pl
     e1c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e1e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e20:	2201      	movs	r2, #1
     e22:	4b82      	ldr	r3, [pc, #520]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e24:	06cc      	lsls	r4, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e26:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e28:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e2a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e2c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e30:	bf54      	ite	pl
     e32:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e34:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e36:	2201      	movs	r2, #1
     e38:	4b7c      	ldr	r3, [pc, #496]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e3a:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e3c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e3e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e40:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e42:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e46:	bf54      	ite	pl
     e48:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e4a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e4c:	2201      	movs	r2, #1
     e4e:	4b77      	ldr	r3, [pc, #476]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e50:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e52:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e54:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e56:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e58:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e5c:	bf54      	ite	pl
     e5e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e60:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e62:	2201      	movs	r2, #1
     e64:	4b71      	ldr	r3, [pc, #452]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e66:	078d      	lsls	r5, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e68:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e6a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e6c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e6e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e72:	bf54      	ite	pl
     e74:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e76:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e78:	2201      	movs	r2, #1
     e7a:	4b6c      	ldr	r3, [pc, #432]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     e7c:	07cc      	lsls	r4, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e7e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e80:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e82:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e84:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e88:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e8c:	bf4c      	ite	mi
     e8e:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     e90:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     e92:	2201      	movs	r2, #1
     e94:	4b65      	ldr	r3, [pc, #404]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
     e96:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e98:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e9a:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     e9c:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     e9e:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ea0:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     ea2:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ea4:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ea6:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ea8:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     eaa:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eac:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eb0:	bf0c      	ite	eq
     eb2:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eb4:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eb6:	4b5d      	ldr	r3, [pc, #372]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     eb8:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eba:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ebc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ebe:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ec0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ec4:	bf54      	ite	pl
     ec6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ec8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     eca:	2201      	movs	r2, #1
     ecc:	4b57      	ldr	r3, [pc, #348]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     ece:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ed0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ed4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ed6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     eda:	bf54      	ite	pl
     edc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ede:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ee0:	2201      	movs	r2, #1
     ee2:	4b52      	ldr	r3, [pc, #328]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     ee4:	06c5      	lsls	r5, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ee6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ee8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     eea:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     eec:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ef0:	bf54      	ite	pl
     ef2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ef4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ef6:	2201      	movs	r2, #1
     ef8:	4b4c      	ldr	r3, [pc, #304]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     efa:	0704      	lsls	r4, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     efc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     efe:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f00:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f02:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f06:	bf54      	ite	pl
     f08:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f0a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f0c:	2201      	movs	r2, #1
     f0e:	4b47      	ldr	r3, [pc, #284]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f10:	0745      	lsls	r5, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f12:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f14:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f16:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f18:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f1c:	bf54      	ite	pl
     f1e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f20:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f22:	2201      	movs	r2, #1
     f24:	4b41      	ldr	r3, [pc, #260]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f26:	0784      	lsls	r4, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f28:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f2a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f2c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f2e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f32:	bf54      	ite	pl
     f34:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f36:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f38:	2201      	movs	r2, #1
     f3a:	4b3c      	ldr	r3, [pc, #240]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f3c:	07c0      	lsls	r0, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f3e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f40:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f42:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f44:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f48:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f4c:	bf4c      	ite	mi
     f4e:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f50:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f52:	2201      	movs	r2, #1
     CM3DS_MPS2_i2c_send_byte(reg_addr);
     CM3DS_MPS2_i2c_receive_ack();

     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     f54:	2403      	movs	r4, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f56:	4b35      	ldr	r3, [pc, #212]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
     f58:	4311      	orrs	r1, r2
     f5a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f5c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f5e:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f60:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f62:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f64:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
     f66:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f68:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f6a:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
     f6c:	601c      	str	r4, [r3, #0]
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f6e:	6058      	str	r0, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f70:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
     f72:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f74:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f78:	bf0c      	ite	eq
     f7a:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f7c:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f7e:	4b2b      	ldr	r3, [pc, #172]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f80:	064d      	lsls	r5, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f82:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f84:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f86:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f88:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     f8c:	bf54      	ite	pl
     f8e:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f90:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f92:	2201      	movs	r2, #1
     f94:	4b25      	ldr	r3, [pc, #148]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     f96:	068c      	lsls	r4, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     f98:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f9a:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     f9c:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     f9e:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fa2:	bf54      	ite	pl
     fa4:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fa6:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fa8:	2201      	movs	r2, #1
     faa:	4b20      	ldr	r3, [pc, #128]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fac:	06c8      	lsls	r0, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fae:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fb2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fb4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fb8:	bf54      	ite	pl
     fba:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fbc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fbe:	2201      	movs	r2, #1
     fc0:	4b1a      	ldr	r3, [pc, #104]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fc2:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fc4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fc8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fca:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fce:	bf54      	ite	pl
     fd0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fd2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fd4:	2201      	movs	r2, #1
     fd6:	4b15      	ldr	r3, [pc, #84]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fd8:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fda:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fdc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     fde:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fe0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     fe4:	bf54      	ite	pl
     fe6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     fe8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     fea:	2201      	movs	r2, #1
     fec:	4b0f      	ldr	r3, [pc, #60]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
         if (c & (1 << (7 - loop)))
     fee:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     ff0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
     ff4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     ff6:	f04f 0202 	mov.w	r2, #2
     ffa:	f04f 0102 	mov.w	r1, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
     ffe:	bf54      	ite	pl
    1000:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1002:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1004:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1006:	2003      	movs	r0, #3
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1008:	4b08      	ldr	r3, [pc, #32]	; (102c <CM3DS_MPS2_i2c_read+0x250>)
    100a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    100c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    100e:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1010:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1012:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1014:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1016:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1018:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    101a:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    101c:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    101e:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1020:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1022:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1024:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1026:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1028:	6018      	str	r0, [r3, #0]
    102a:	e001      	b.n	1030 <CM3DS_MPS2_i2c_read+0x254>
    102c:	40023000 	.word	0x40023000
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1030:	6819      	ldr	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1032:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1034:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1036:	6018      	str	r0, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1038:	681b      	ldr	r3, [r3, #0]
     data         = 0;
    103a:	f011 0f02 	tst.w	r1, #2
    103e:	bf14      	ite	ne
    1040:	2080      	movne	r0, #128	; 0x80
    1042:	2000      	moveq	r0, #0
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1044:	079b      	lsls	r3, r3, #30
    1046:	d500      	bpl.n	104a <CM3DS_MPS2_i2c_read+0x26e>
             data += (1 << (7 - loop));
    1048:	3040      	adds	r0, #64	; 0x40
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    104a:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    104c:	2103      	movs	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    104e:	4b27      	ldr	r3, [pc, #156]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
    1050:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1052:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1054:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1056:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1058:	2201      	movs	r2, #1
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    105a:	0799      	lsls	r1, r3, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    105c:	f04f 0103 	mov.w	r1, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1060:	4b22      	ldr	r3, [pc, #136]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1062:	bf48      	it	mi
    1064:	3020      	addmi	r0, #32
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1066:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1068:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    106a:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    106c:	681b      	ldr	r3, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    106e:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1070:	079a      	lsls	r2, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1072:	f04f 0201 	mov.w	r2, #1
    1076:	4b1d      	ldr	r3, [pc, #116]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    1078:	bf48      	it	mi
    107a:	3010      	addmi	r0, #16
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    107c:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    107e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1080:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1082:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1084:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	079b      	lsls	r3, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    108a:	4b18      	ldr	r3, [pc, #96]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    108c:	bf48      	it	mi
    108e:	3008      	addmi	r0, #8
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1090:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1092:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1094:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1096:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    1098:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	079d      	lsls	r5, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    109e:	4b13      	ldr	r3, [pc, #76]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10a0:	bf48      	it	mi
    10a2:	3004      	addmi	r0, #4
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a4:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10a6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10a8:	6019      	str	r1, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10aa:	2201      	movs	r2, #1
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10ac:	2103      	movs	r1, #3
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10ae:	681b      	ldr	r3, [r3, #0]
    10b0:	079c      	lsls	r4, r3, #30
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b2:	4b0e      	ldr	r3, [pc, #56]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
             data += (1 << (7 - loop));
    10b4:	bf48      	it	mi
    10b6:	3002      	addmi	r0, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10b8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10ba:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk | CM3DS_MPS2_I2C_SDA_Msk;
    10bc:	6019      	str	r1, [r3, #0]
         if ((CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk))
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	0799      	lsls	r1, r3, #30
    10c2:	d500      	bpl.n	10c6 <CM3DS_MPS2_i2c_read+0x2ea>
             data += (1 << (7 - loop));
    10c4:	4410      	add	r0, r2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10c6:	2201      	movs	r2, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);

     return rxdata;
 }
    10c8:	bc30      	pop	{r4, r5}
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10ca:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10cc:	4b07      	ldr	r3, [pc, #28]	; (10ec <CM3DS_MPS2_i2c_read+0x310>)
     return rxdata;
    10ce:	b2c0      	uxtb	r0, r0
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10d2:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10d4:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10d6:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10d8:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10da:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10dc:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10de:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10e0:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10e2:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    10e4:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    10e6:	6019      	str	r1, [r3, #0]
 }
    10e8:	4770      	bx	lr
    10ea:	bf00      	nop
    10ec:	40023000 	.word	0x40023000

000010f0 <CM3DS_MPS2_i2c_write>:

 // Write data stream and write one byte
 void CM3DS_MPS2_i2c_write(unsigned char reg_addr, unsigned char data_byte, unsigned char sadr)
 {
    10f0:	b470      	push	{r4, r5, r6}
     // Start bit
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    10f2:	2603      	movs	r6, #3
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10f4:	2501      	movs	r5, #1
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10f6:	2402      	movs	r4, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk | CM3DS_MPS2_I2C_SCL_Msk;
    10f8:	4b90      	ldr	r3, [pc, #576]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
    10fa:	601e      	str	r6, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    10fc:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    10fe:	605d      	str	r5, [r3, #4]
         if (c & (1 << (7 - loop)))
    1100:	09d5      	lsrs	r5, r2, #7
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1102:	bf0c      	ite	eq
    1104:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1106:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1108:	2401      	movs	r4, #1
    110a:	4b8c      	ldr	r3, [pc, #560]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    110c:	0655      	lsls	r5, r2, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    110e:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1110:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1112:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1114:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1118:	bf54      	ite	pl
    111a:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    111c:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    111e:	2401      	movs	r4, #1
    1120:	4b86      	ldr	r3, [pc, #536]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1122:	0696      	lsls	r6, r2, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1124:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1126:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1128:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    112a:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    112e:	bf54      	ite	pl
    1130:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1132:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1134:	2401      	movs	r4, #1
    1136:	4b81      	ldr	r3, [pc, #516]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1138:	06d5      	lsls	r5, r2, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    113a:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    113c:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    113e:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1140:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1144:	bf54      	ite	pl
    1146:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1148:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    114a:	2401      	movs	r4, #1
    114c:	4b7b      	ldr	r3, [pc, #492]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    114e:	0716      	lsls	r6, r2, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1150:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1152:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1154:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1156:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    115a:	bf54      	ite	pl
    115c:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    115e:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1160:	2401      	movs	r4, #1
    1162:	4b76      	ldr	r3, [pc, #472]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1164:	0755      	lsls	r5, r2, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1166:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1168:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    116a:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    116c:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1170:	bf54      	ite	pl
    1172:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1174:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1176:	2401      	movs	r4, #1
    1178:	4b70      	ldr	r3, [pc, #448]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    117a:	0796      	lsls	r6, r2, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    117c:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    117e:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1180:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1182:	f04f 0402 	mov.w	r4, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1186:	bf54      	ite	pl
    1188:	605c      	strpl	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    118a:	601c      	strmi	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    118c:	2401      	movs	r4, #1
         if (c & (1 << (7 - loop)))
    118e:	f012 0f01 	tst.w	r2, #1
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1192:	f04f 0202 	mov.w	r2, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1196:	4b69      	ldr	r3, [pc, #420]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
    1198:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    119a:	605c      	str	r4, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    119c:	605c      	str	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    119e:	bf14      	ite	ne
    11a0:	601a      	strne	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11a2:	605a      	streq	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11a4:	2402      	movs	r4, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11a6:	2201      	movs	r2, #1
    11a8:	4b64      	ldr	r3, [pc, #400]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
    11aa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11ac:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ae:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11b0:	601c      	str	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11b2:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11b4:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    11b6:	681d      	ldr	r5, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11b8:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ba:	601c      	str	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11bc:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    11be:	09c2      	lsrs	r2, r0, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11c0:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11c4:	bf0c      	ite	eq
    11c6:	605c      	streq	r4, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11c8:	601c      	strne	r4, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ca:	4b5c      	ldr	r3, [pc, #368]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11cc:	0645      	lsls	r5, r0, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11ce:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11d0:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11d2:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11d4:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11d8:	bf54      	ite	pl
    11da:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11dc:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11de:	2201      	movs	r2, #1
    11e0:	4b56      	ldr	r3, [pc, #344]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11e2:	0684      	lsls	r4, r0, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11e4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11e8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11ea:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    11ee:	bf54      	ite	pl
    11f0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    11f2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11f4:	2201      	movs	r2, #1
    11f6:	4b51      	ldr	r3, [pc, #324]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    11f8:	06c6      	lsls	r6, r0, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    11fa:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11fc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    11fe:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1200:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1204:	bf54      	ite	pl
    1206:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1208:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    120a:	2201      	movs	r2, #1
    120c:	4b4b      	ldr	r3, [pc, #300]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    120e:	0705      	lsls	r5, r0, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1210:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1212:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1214:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1216:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    121a:	bf54      	ite	pl
    121c:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    121e:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1220:	2201      	movs	r2, #1
    1222:	4b46      	ldr	r3, [pc, #280]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1224:	0744      	lsls	r4, r0, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1226:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1228:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    122a:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    122c:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1230:	bf54      	ite	pl
    1232:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1234:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1236:	2201      	movs	r2, #1
    1238:	4b40      	ldr	r3, [pc, #256]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    123a:	0786      	lsls	r6, r0, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    123c:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    123e:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1240:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1242:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1246:	bf54      	ite	pl
    1248:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    124a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    124c:	2201      	movs	r2, #1
    124e:	4b3b      	ldr	r3, [pc, #236]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1250:	07c5      	lsls	r5, r0, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1252:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1254:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1256:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1258:	f04f 0202 	mov.w	r2, #2
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    125c:	f04f 0002 	mov.w	r0, #2
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1260:	bf4c      	ite	mi
    1262:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1264:	605a      	strpl	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1266:	2201      	movs	r2, #1
    1268:	4b34      	ldr	r3, [pc, #208]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
    126a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    126c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    126e:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1270:	6018      	str	r0, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1272:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1274:	601a      	str	r2, [r3, #0]
     nack = CM3DS_MPS2_I2C->CONTROL & CM3DS_MPS2_I2C_SDA_Msk;
    1276:	681c      	ldr	r4, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1278:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    127a:	6018      	str	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    127c:	605a      	str	r2, [r3, #4]
         if (c & (1 << (7 - loop)))
    127e:	09ca      	lsrs	r2, r1, #7
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1280:	f04f 0201 	mov.w	r2, #1
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1284:	bf0c      	ite	eq
    1286:	6058      	streq	r0, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1288:	6018      	strne	r0, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    128a:	4b2c      	ldr	r3, [pc, #176]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    128c:	064c      	lsls	r4, r1, #25
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    128e:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1290:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1292:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1294:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1298:	bf54      	ite	pl
    129a:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    129c:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    129e:	2201      	movs	r2, #1
    12a0:	4b26      	ldr	r3, [pc, #152]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12a2:	0688      	lsls	r0, r1, #26
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12a4:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12a6:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12a8:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12aa:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12ae:	bf54      	ite	pl
    12b0:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12b2:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12b4:	2201      	movs	r2, #1
    12b6:	4b21      	ldr	r3, [pc, #132]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12b8:	06ce      	lsls	r6, r1, #27
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ba:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12bc:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12be:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12c0:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12c4:	bf54      	ite	pl
    12c6:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12c8:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12ca:	2201      	movs	r2, #1
    12cc:	4b1b      	ldr	r3, [pc, #108]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12ce:	070d      	lsls	r5, r1, #28
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12d0:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12d2:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12d4:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12d6:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12da:	bf54      	ite	pl
    12dc:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12de:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12e0:	2201      	movs	r2, #1
    12e2:	4b16      	ldr	r3, [pc, #88]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12e4:	074c      	lsls	r4, r1, #29
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12e6:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12e8:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12ea:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12ec:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    12f0:	bf54      	ite	pl
    12f2:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    12f4:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12f6:	2201      	movs	r2, #1
    12f8:	4b10      	ldr	r3, [pc, #64]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    12fa:	0788      	lsls	r0, r1, #30
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    12fc:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    12fe:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1300:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1302:	f04f 0202 	mov.w	r2, #2
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1306:	bf54      	ite	pl
    1308:	605a      	strpl	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    130a:	601a      	strmi	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    130c:	2201      	movs	r2, #1
    130e:	4b0b      	ldr	r3, [pc, #44]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
         if (c & (1 << (7 - loop)))
    1310:	07c9      	lsls	r1, r1, #31
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1312:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1314:	605a      	str	r2, [r3, #4]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1316:	605a      	str	r2, [r3, #4]
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1318:	f04f 0202 	mov.w	r2, #2
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
     // apSleepus(1);
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
     // apSleepus(1);
 }
    131c:	bc70      	pop	{r4, r5, r6}
             CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    131e:	bf4c      	ite	mi
    1320:	601a      	strmi	r2, [r3, #0]
             CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1322:	605a      	strpl	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1324:	2102      	movs	r1, #2
         CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1326:	2201      	movs	r2, #1
    1328:	4b04      	ldr	r3, [pc, #16]	; (133c <CM3DS_MPS2_i2c_write+0x24c>)
    132a:	601a      	str	r2, [r3, #0]
         CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    132c:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    132e:	6019      	str	r1, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1330:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SCL_Msk;
    1332:	605a      	str	r2, [r3, #4]
     CM3DS_MPS2_I2C->CONTROLC = CM3DS_MPS2_I2C_SDA_Msk;
    1334:	6059      	str	r1, [r3, #4]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SCL_Msk;
    1336:	601a      	str	r2, [r3, #0]
     CM3DS_MPS2_I2C->CONTROL = CM3DS_MPS2_I2C_SDA_Msk;
    1338:	6019      	str	r1, [r3, #0]
 }
    133a:	4770      	bx	lr
    133c:	40023000 	.word	0x40023000

00001340 <SystemCoreClockUpdate>:
    1340:	4b01      	ldr	r3, [pc, #4]	; (1348 <SystemCoreClockUpdate+0x8>)
    1342:	4a02      	ldr	r2, [pc, #8]	; (134c <SystemCoreClockUpdate+0xc>)
    1344:	601a      	str	r2, [r3, #0]
    1346:	4770      	bx	lr
    1348:	20000000 	.word	0x20000000
    134c:	017d7840 	.word	0x017d7840

00001350 <SystemInit>:

#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
    1350:	4b01      	ldr	r3, [pc, #4]	; (1358 <SystemInit+0x8>)
    1352:	4a02      	ldr	r2, [pc, #8]	; (135c <SystemInit+0xc>)
    1354:	601a      	str	r2, [r3, #0]

}
    1356:	4770      	bx	lr
    1358:	20000000 	.word	0x20000000
    135c:	017d7840 	.word	0x017d7840

00001360 <exit>:
    1360:	b508      	push	{r3, lr}
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <exit+0x20>)
    1364:	4604      	mov	r4, r0
    1366:	b113      	cbz	r3, 136e <exit+0xe>
    1368:	2100      	movs	r1, #0
    136a:	f3af 8000 	nop.w
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <exit+0x24>)
    1370:	6818      	ldr	r0, [r3, #0]
    1372:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1374:	b103      	cbz	r3, 1378 <exit+0x18>
    1376:	4798      	blx	r3
    1378:	4620      	mov	r0, r4
    137a:	f000 ff9d 	bl	22b8 <_exit>
    137e:	bf00      	nop
    1380:	00000000 	.word	0x00000000
    1384:	0000278c 	.word	0x0000278c

00001388 <memset>:
    1388:	4603      	mov	r3, r0
    138a:	4402      	add	r2, r0
    138c:	4293      	cmp	r3, r2
    138e:	d100      	bne.n	1392 <memset+0xa>
    1390:	4770      	bx	lr
    1392:	f803 1b01 	strb.w	r1, [r3], #1
    1396:	e7f9      	b.n	138c <memset+0x4>

00001398 <iprintf>:
    1398:	b40f      	push	{r0, r1, r2, r3}
    139a:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <iprintf+0x2c>)
    139c:	b513      	push	{r0, r1, r4, lr}
    139e:	681c      	ldr	r4, [r3, #0]
    13a0:	b124      	cbz	r4, 13ac <iprintf+0x14>
    13a2:	69a3      	ldr	r3, [r4, #24]
    13a4:	b913      	cbnz	r3, 13ac <iprintf+0x14>
    13a6:	4620      	mov	r0, r4
    13a8:	f000 fa2c 	bl	1804 <__sinit>
    13ac:	ab05      	add	r3, sp, #20
    13ae:	9a04      	ldr	r2, [sp, #16]
    13b0:	68a1      	ldr	r1, [r4, #8]
    13b2:	4620      	mov	r0, r4
    13b4:	9301      	str	r3, [sp, #4]
    13b6:	f000 fbe1 	bl	1b7c <_vfiprintf_r>
    13ba:	b002      	add	sp, #8
    13bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    13c0:	b004      	add	sp, #16
    13c2:	4770      	bx	lr
    13c4:	20000004 	.word	0x20000004

000013c8 <_puts_r>:
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	460e      	mov	r6, r1
    13cc:	4605      	mov	r5, r0
    13ce:	b118      	cbz	r0, 13d8 <_puts_r+0x10>
    13d0:	6983      	ldr	r3, [r0, #24]
    13d2:	b90b      	cbnz	r3, 13d8 <_puts_r+0x10>
    13d4:	f000 fa16 	bl	1804 <__sinit>
    13d8:	69ab      	ldr	r3, [r5, #24]
    13da:	68ac      	ldr	r4, [r5, #8]
    13dc:	b913      	cbnz	r3, 13e4 <_puts_r+0x1c>
    13de:	4628      	mov	r0, r5
    13e0:	f000 fa10 	bl	1804 <__sinit>
    13e4:	4b23      	ldr	r3, [pc, #140]	; (1474 <_puts_r+0xac>)
    13e6:	429c      	cmp	r4, r3
    13e8:	d117      	bne.n	141a <_puts_r+0x52>
    13ea:	686c      	ldr	r4, [r5, #4]
    13ec:	89a3      	ldrh	r3, [r4, #12]
    13ee:	071b      	lsls	r3, r3, #28
    13f0:	d51d      	bpl.n	142e <_puts_r+0x66>
    13f2:	6923      	ldr	r3, [r4, #16]
    13f4:	b1db      	cbz	r3, 142e <_puts_r+0x66>
    13f6:	3e01      	subs	r6, #1
    13f8:	68a3      	ldr	r3, [r4, #8]
    13fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    13fe:	3b01      	subs	r3, #1
    1400:	60a3      	str	r3, [r4, #8]
    1402:	b9e9      	cbnz	r1, 1440 <_puts_r+0x78>
    1404:	2b00      	cmp	r3, #0
    1406:	da2e      	bge.n	1466 <_puts_r+0x9e>
    1408:	4622      	mov	r2, r4
    140a:	210a      	movs	r1, #10
    140c:	4628      	mov	r0, r5
    140e:	f000 f849 	bl	14a4 <__swbuf_r>
    1412:	3001      	adds	r0, #1
    1414:	d011      	beq.n	143a <_puts_r+0x72>
    1416:	200a      	movs	r0, #10
    1418:	e011      	b.n	143e <_puts_r+0x76>
    141a:	4b17      	ldr	r3, [pc, #92]	; (1478 <_puts_r+0xb0>)
    141c:	429c      	cmp	r4, r3
    141e:	d101      	bne.n	1424 <_puts_r+0x5c>
    1420:	68ac      	ldr	r4, [r5, #8]
    1422:	e7e3      	b.n	13ec <_puts_r+0x24>
    1424:	4b15      	ldr	r3, [pc, #84]	; (147c <_puts_r+0xb4>)
    1426:	429c      	cmp	r4, r3
    1428:	bf08      	it	eq
    142a:	68ec      	ldreq	r4, [r5, #12]
    142c:	e7de      	b.n	13ec <_puts_r+0x24>
    142e:	4621      	mov	r1, r4
    1430:	4628      	mov	r0, r5
    1432:	f000 f889 	bl	1548 <__swsetup_r>
    1436:	2800      	cmp	r0, #0
    1438:	d0dd      	beq.n	13f6 <_puts_r+0x2e>
    143a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    143e:	bd70      	pop	{r4, r5, r6, pc}
    1440:	2b00      	cmp	r3, #0
    1442:	da04      	bge.n	144e <_puts_r+0x86>
    1444:	69a2      	ldr	r2, [r4, #24]
    1446:	429a      	cmp	r2, r3
    1448:	dc06      	bgt.n	1458 <_puts_r+0x90>
    144a:	290a      	cmp	r1, #10
    144c:	d004      	beq.n	1458 <_puts_r+0x90>
    144e:	6823      	ldr	r3, [r4, #0]
    1450:	1c5a      	adds	r2, r3, #1
    1452:	6022      	str	r2, [r4, #0]
    1454:	7019      	strb	r1, [r3, #0]
    1456:	e7cf      	b.n	13f8 <_puts_r+0x30>
    1458:	4622      	mov	r2, r4
    145a:	4628      	mov	r0, r5
    145c:	f000 f822 	bl	14a4 <__swbuf_r>
    1460:	3001      	adds	r0, #1
    1462:	d1c9      	bne.n	13f8 <_puts_r+0x30>
    1464:	e7e9      	b.n	143a <_puts_r+0x72>
    1466:	200a      	movs	r0, #10
    1468:	6823      	ldr	r3, [r4, #0]
    146a:	1c5a      	adds	r2, r3, #1
    146c:	6022      	str	r2, [r4, #0]
    146e:	7018      	strb	r0, [r3, #0]
    1470:	e7e5      	b.n	143e <_puts_r+0x76>
    1472:	bf00      	nop
    1474:	000027b0 	.word	0x000027b0
    1478:	000027d0 	.word	0x000027d0
    147c:	00002790 	.word	0x00002790

00001480 <puts>:
    1480:	4b02      	ldr	r3, [pc, #8]	; (148c <puts+0xc>)
    1482:	4601      	mov	r1, r0
    1484:	6818      	ldr	r0, [r3, #0]
    1486:	f7ff bf9f 	b.w	13c8 <_puts_r>
    148a:	bf00      	nop
    148c:	20000004 	.word	0x20000004

00001490 <strcmp>:
    1490:	f810 2b01 	ldrb.w	r2, [r0], #1
    1494:	f811 3b01 	ldrb.w	r3, [r1], #1
    1498:	2a01      	cmp	r2, #1
    149a:	bf28      	it	cs
    149c:	429a      	cmpcs	r2, r3
    149e:	d0f7      	beq.n	1490 <strcmp>
    14a0:	1ad0      	subs	r0, r2, r3
    14a2:	4770      	bx	lr

000014a4 <__swbuf_r>:
    14a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14a6:	460e      	mov	r6, r1
    14a8:	4614      	mov	r4, r2
    14aa:	4605      	mov	r5, r0
    14ac:	b118      	cbz	r0, 14b6 <__swbuf_r+0x12>
    14ae:	6983      	ldr	r3, [r0, #24]
    14b0:	b90b      	cbnz	r3, 14b6 <__swbuf_r+0x12>
    14b2:	f000 f9a7 	bl	1804 <__sinit>
    14b6:	4b21      	ldr	r3, [pc, #132]	; (153c <__swbuf_r+0x98>)
    14b8:	429c      	cmp	r4, r3
    14ba:	d12a      	bne.n	1512 <__swbuf_r+0x6e>
    14bc:	686c      	ldr	r4, [r5, #4]
    14be:	69a3      	ldr	r3, [r4, #24]
    14c0:	60a3      	str	r3, [r4, #8]
    14c2:	89a3      	ldrh	r3, [r4, #12]
    14c4:	071a      	lsls	r2, r3, #28
    14c6:	d52e      	bpl.n	1526 <__swbuf_r+0x82>
    14c8:	6923      	ldr	r3, [r4, #16]
    14ca:	b363      	cbz	r3, 1526 <__swbuf_r+0x82>
    14cc:	6923      	ldr	r3, [r4, #16]
    14ce:	6820      	ldr	r0, [r4, #0]
    14d0:	b2f6      	uxtb	r6, r6
    14d2:	1ac0      	subs	r0, r0, r3
    14d4:	6963      	ldr	r3, [r4, #20]
    14d6:	4637      	mov	r7, r6
    14d8:	4283      	cmp	r3, r0
    14da:	dc04      	bgt.n	14e6 <__swbuf_r+0x42>
    14dc:	4621      	mov	r1, r4
    14de:	4628      	mov	r0, r5
    14e0:	f000 f926 	bl	1730 <_fflush_r>
    14e4:	bb28      	cbnz	r0, 1532 <__swbuf_r+0x8e>
    14e6:	68a3      	ldr	r3, [r4, #8]
    14e8:	3001      	adds	r0, #1
    14ea:	3b01      	subs	r3, #1
    14ec:	60a3      	str	r3, [r4, #8]
    14ee:	6823      	ldr	r3, [r4, #0]
    14f0:	1c5a      	adds	r2, r3, #1
    14f2:	6022      	str	r2, [r4, #0]
    14f4:	701e      	strb	r6, [r3, #0]
    14f6:	6963      	ldr	r3, [r4, #20]
    14f8:	4283      	cmp	r3, r0
    14fa:	d004      	beq.n	1506 <__swbuf_r+0x62>
    14fc:	89a3      	ldrh	r3, [r4, #12]
    14fe:	07db      	lsls	r3, r3, #31
    1500:	d519      	bpl.n	1536 <__swbuf_r+0x92>
    1502:	2e0a      	cmp	r6, #10
    1504:	d117      	bne.n	1536 <__swbuf_r+0x92>
    1506:	4621      	mov	r1, r4
    1508:	4628      	mov	r0, r5
    150a:	f000 f911 	bl	1730 <_fflush_r>
    150e:	b190      	cbz	r0, 1536 <__swbuf_r+0x92>
    1510:	e00f      	b.n	1532 <__swbuf_r+0x8e>
    1512:	4b0b      	ldr	r3, [pc, #44]	; (1540 <__swbuf_r+0x9c>)
    1514:	429c      	cmp	r4, r3
    1516:	d101      	bne.n	151c <__swbuf_r+0x78>
    1518:	68ac      	ldr	r4, [r5, #8]
    151a:	e7d0      	b.n	14be <__swbuf_r+0x1a>
    151c:	4b09      	ldr	r3, [pc, #36]	; (1544 <__swbuf_r+0xa0>)
    151e:	429c      	cmp	r4, r3
    1520:	bf08      	it	eq
    1522:	68ec      	ldreq	r4, [r5, #12]
    1524:	e7cb      	b.n	14be <__swbuf_r+0x1a>
    1526:	4621      	mov	r1, r4
    1528:	4628      	mov	r0, r5
    152a:	f000 f80d 	bl	1548 <__swsetup_r>
    152e:	2800      	cmp	r0, #0
    1530:	d0cc      	beq.n	14cc <__swbuf_r+0x28>
    1532:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1536:	4638      	mov	r0, r7
    1538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    153a:	bf00      	nop
    153c:	000027b0 	.word	0x000027b0
    1540:	000027d0 	.word	0x000027d0
    1544:	00002790 	.word	0x00002790

00001548 <__swsetup_r>:
    1548:	4b32      	ldr	r3, [pc, #200]	; (1614 <__swsetup_r+0xcc>)
    154a:	b570      	push	{r4, r5, r6, lr}
    154c:	681d      	ldr	r5, [r3, #0]
    154e:	4606      	mov	r6, r0
    1550:	460c      	mov	r4, r1
    1552:	b125      	cbz	r5, 155e <__swsetup_r+0x16>
    1554:	69ab      	ldr	r3, [r5, #24]
    1556:	b913      	cbnz	r3, 155e <__swsetup_r+0x16>
    1558:	4628      	mov	r0, r5
    155a:	f000 f953 	bl	1804 <__sinit>
    155e:	4b2e      	ldr	r3, [pc, #184]	; (1618 <__swsetup_r+0xd0>)
    1560:	429c      	cmp	r4, r3
    1562:	d10f      	bne.n	1584 <__swsetup_r+0x3c>
    1564:	686c      	ldr	r4, [r5, #4]
    1566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    156a:	b29a      	uxth	r2, r3
    156c:	0715      	lsls	r5, r2, #28
    156e:	d42c      	bmi.n	15ca <__swsetup_r+0x82>
    1570:	06d0      	lsls	r0, r2, #27
    1572:	d411      	bmi.n	1598 <__swsetup_r+0x50>
    1574:	2209      	movs	r2, #9
    1576:	6032      	str	r2, [r6, #0]
    1578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    157c:	81a3      	strh	r3, [r4, #12]
    157e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1582:	e03e      	b.n	1602 <__swsetup_r+0xba>
    1584:	4b25      	ldr	r3, [pc, #148]	; (161c <__swsetup_r+0xd4>)
    1586:	429c      	cmp	r4, r3
    1588:	d101      	bne.n	158e <__swsetup_r+0x46>
    158a:	68ac      	ldr	r4, [r5, #8]
    158c:	e7eb      	b.n	1566 <__swsetup_r+0x1e>
    158e:	4b24      	ldr	r3, [pc, #144]	; (1620 <__swsetup_r+0xd8>)
    1590:	429c      	cmp	r4, r3
    1592:	bf08      	it	eq
    1594:	68ec      	ldreq	r4, [r5, #12]
    1596:	e7e6      	b.n	1566 <__swsetup_r+0x1e>
    1598:	0751      	lsls	r1, r2, #29
    159a:	d512      	bpl.n	15c2 <__swsetup_r+0x7a>
    159c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    159e:	b141      	cbz	r1, 15b2 <__swsetup_r+0x6a>
    15a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    15a4:	4299      	cmp	r1, r3
    15a6:	d002      	beq.n	15ae <__swsetup_r+0x66>
    15a8:	4630      	mov	r0, r6
    15aa:	f000 fa19 	bl	19e0 <_free_r>
    15ae:	2300      	movs	r3, #0
    15b0:	6363      	str	r3, [r4, #52]	; 0x34
    15b2:	89a3      	ldrh	r3, [r4, #12]
    15b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    15b8:	81a3      	strh	r3, [r4, #12]
    15ba:	2300      	movs	r3, #0
    15bc:	6063      	str	r3, [r4, #4]
    15be:	6923      	ldr	r3, [r4, #16]
    15c0:	6023      	str	r3, [r4, #0]
    15c2:	89a3      	ldrh	r3, [r4, #12]
    15c4:	f043 0308 	orr.w	r3, r3, #8
    15c8:	81a3      	strh	r3, [r4, #12]
    15ca:	6923      	ldr	r3, [r4, #16]
    15cc:	b94b      	cbnz	r3, 15e2 <__swsetup_r+0x9a>
    15ce:	89a3      	ldrh	r3, [r4, #12]
    15d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    15d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    15d8:	d003      	beq.n	15e2 <__swsetup_r+0x9a>
    15da:	4621      	mov	r1, r4
    15dc:	4630      	mov	r0, r6
    15de:	f000 f9bf 	bl	1960 <__smakebuf_r>
    15e2:	89a2      	ldrh	r2, [r4, #12]
    15e4:	f012 0301 	ands.w	r3, r2, #1
    15e8:	d00c      	beq.n	1604 <__swsetup_r+0xbc>
    15ea:	2300      	movs	r3, #0
    15ec:	60a3      	str	r3, [r4, #8]
    15ee:	6963      	ldr	r3, [r4, #20]
    15f0:	425b      	negs	r3, r3
    15f2:	61a3      	str	r3, [r4, #24]
    15f4:	6923      	ldr	r3, [r4, #16]
    15f6:	b953      	cbnz	r3, 160e <__swsetup_r+0xc6>
    15f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    15fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1600:	d1ba      	bne.n	1578 <__swsetup_r+0x30>
    1602:	bd70      	pop	{r4, r5, r6, pc}
    1604:	0792      	lsls	r2, r2, #30
    1606:	bf58      	it	pl
    1608:	6963      	ldrpl	r3, [r4, #20]
    160a:	60a3      	str	r3, [r4, #8]
    160c:	e7f2      	b.n	15f4 <__swsetup_r+0xac>
    160e:	2000      	movs	r0, #0
    1610:	e7f7      	b.n	1602 <__swsetup_r+0xba>
    1612:	bf00      	nop
    1614:	20000004 	.word	0x20000004
    1618:	000027b0 	.word	0x000027b0
    161c:	000027d0 	.word	0x000027d0
    1620:	00002790 	.word	0x00002790

00001624 <__sflush_r>:
    1624:	898a      	ldrh	r2, [r1, #12]
    1626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    162a:	4605      	mov	r5, r0
    162c:	0710      	lsls	r0, r2, #28
    162e:	460c      	mov	r4, r1
    1630:	d458      	bmi.n	16e4 <__sflush_r+0xc0>
    1632:	684b      	ldr	r3, [r1, #4]
    1634:	2b00      	cmp	r3, #0
    1636:	dc05      	bgt.n	1644 <__sflush_r+0x20>
    1638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    163a:	2b00      	cmp	r3, #0
    163c:	dc02      	bgt.n	1644 <__sflush_r+0x20>
    163e:	2000      	movs	r0, #0
    1640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1646:	2e00      	cmp	r6, #0
    1648:	d0f9      	beq.n	163e <__sflush_r+0x1a>
    164a:	2300      	movs	r3, #0
    164c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1650:	682f      	ldr	r7, [r5, #0]
    1652:	6a21      	ldr	r1, [r4, #32]
    1654:	602b      	str	r3, [r5, #0]
    1656:	d032      	beq.n	16be <__sflush_r+0x9a>
    1658:	6d60      	ldr	r0, [r4, #84]	; 0x54
    165a:	89a3      	ldrh	r3, [r4, #12]
    165c:	075a      	lsls	r2, r3, #29
    165e:	d505      	bpl.n	166c <__sflush_r+0x48>
    1660:	6863      	ldr	r3, [r4, #4]
    1662:	1ac0      	subs	r0, r0, r3
    1664:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1666:	b10b      	cbz	r3, 166c <__sflush_r+0x48>
    1668:	6c23      	ldr	r3, [r4, #64]	; 0x40
    166a:	1ac0      	subs	r0, r0, r3
    166c:	2300      	movs	r3, #0
    166e:	4602      	mov	r2, r0
    1670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1672:	6a21      	ldr	r1, [r4, #32]
    1674:	4628      	mov	r0, r5
    1676:	47b0      	blx	r6
    1678:	1c43      	adds	r3, r0, #1
    167a:	89a3      	ldrh	r3, [r4, #12]
    167c:	d106      	bne.n	168c <__sflush_r+0x68>
    167e:	6829      	ldr	r1, [r5, #0]
    1680:	291d      	cmp	r1, #29
    1682:	d848      	bhi.n	1716 <__sflush_r+0xf2>
    1684:	4a29      	ldr	r2, [pc, #164]	; (172c <__sflush_r+0x108>)
    1686:	40ca      	lsrs	r2, r1
    1688:	07d6      	lsls	r6, r2, #31
    168a:	d544      	bpl.n	1716 <__sflush_r+0xf2>
    168c:	2200      	movs	r2, #0
    168e:	6062      	str	r2, [r4, #4]
    1690:	6922      	ldr	r2, [r4, #16]
    1692:	04d9      	lsls	r1, r3, #19
    1694:	6022      	str	r2, [r4, #0]
    1696:	d504      	bpl.n	16a2 <__sflush_r+0x7e>
    1698:	1c42      	adds	r2, r0, #1
    169a:	d101      	bne.n	16a0 <__sflush_r+0x7c>
    169c:	682b      	ldr	r3, [r5, #0]
    169e:	b903      	cbnz	r3, 16a2 <__sflush_r+0x7e>
    16a0:	6560      	str	r0, [r4, #84]	; 0x54
    16a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    16a4:	602f      	str	r7, [r5, #0]
    16a6:	2900      	cmp	r1, #0
    16a8:	d0c9      	beq.n	163e <__sflush_r+0x1a>
    16aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
    16ae:	4299      	cmp	r1, r3
    16b0:	d002      	beq.n	16b8 <__sflush_r+0x94>
    16b2:	4628      	mov	r0, r5
    16b4:	f000 f994 	bl	19e0 <_free_r>
    16b8:	2000      	movs	r0, #0
    16ba:	6360      	str	r0, [r4, #52]	; 0x34
    16bc:	e7c0      	b.n	1640 <__sflush_r+0x1c>
    16be:	2301      	movs	r3, #1
    16c0:	4628      	mov	r0, r5
    16c2:	47b0      	blx	r6
    16c4:	1c41      	adds	r1, r0, #1
    16c6:	d1c8      	bne.n	165a <__sflush_r+0x36>
    16c8:	682b      	ldr	r3, [r5, #0]
    16ca:	2b00      	cmp	r3, #0
    16cc:	d0c5      	beq.n	165a <__sflush_r+0x36>
    16ce:	2b1d      	cmp	r3, #29
    16d0:	d001      	beq.n	16d6 <__sflush_r+0xb2>
    16d2:	2b16      	cmp	r3, #22
    16d4:	d101      	bne.n	16da <__sflush_r+0xb6>
    16d6:	602f      	str	r7, [r5, #0]
    16d8:	e7b1      	b.n	163e <__sflush_r+0x1a>
    16da:	89a3      	ldrh	r3, [r4, #12]
    16dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16e0:	81a3      	strh	r3, [r4, #12]
    16e2:	e7ad      	b.n	1640 <__sflush_r+0x1c>
    16e4:	690f      	ldr	r7, [r1, #16]
    16e6:	2f00      	cmp	r7, #0
    16e8:	d0a9      	beq.n	163e <__sflush_r+0x1a>
    16ea:	0793      	lsls	r3, r2, #30
    16ec:	bf18      	it	ne
    16ee:	2300      	movne	r3, #0
    16f0:	680e      	ldr	r6, [r1, #0]
    16f2:	bf08      	it	eq
    16f4:	694b      	ldreq	r3, [r1, #20]
    16f6:	eba6 0807 	sub.w	r8, r6, r7
    16fa:	600f      	str	r7, [r1, #0]
    16fc:	608b      	str	r3, [r1, #8]
    16fe:	f1b8 0f00 	cmp.w	r8, #0
    1702:	dd9c      	ble.n	163e <__sflush_r+0x1a>
    1704:	4643      	mov	r3, r8
    1706:	463a      	mov	r2, r7
    1708:	6a21      	ldr	r1, [r4, #32]
    170a:	4628      	mov	r0, r5
    170c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    170e:	47b0      	blx	r6
    1710:	2800      	cmp	r0, #0
    1712:	dc06      	bgt.n	1722 <__sflush_r+0xfe>
    1714:	89a3      	ldrh	r3, [r4, #12]
    1716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    171a:	81a3      	strh	r3, [r4, #12]
    171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1720:	e78e      	b.n	1640 <__sflush_r+0x1c>
    1722:	4407      	add	r7, r0
    1724:	eba8 0800 	sub.w	r8, r8, r0
    1728:	e7e9      	b.n	16fe <__sflush_r+0xda>
    172a:	bf00      	nop
    172c:	20400001 	.word	0x20400001

00001730 <_fflush_r>:
    1730:	b538      	push	{r3, r4, r5, lr}
    1732:	690b      	ldr	r3, [r1, #16]
    1734:	4605      	mov	r5, r0
    1736:	460c      	mov	r4, r1
    1738:	b1db      	cbz	r3, 1772 <_fflush_r+0x42>
    173a:	b118      	cbz	r0, 1744 <_fflush_r+0x14>
    173c:	6983      	ldr	r3, [r0, #24]
    173e:	b90b      	cbnz	r3, 1744 <_fflush_r+0x14>
    1740:	f000 f860 	bl	1804 <__sinit>
    1744:	4b0c      	ldr	r3, [pc, #48]	; (1778 <_fflush_r+0x48>)
    1746:	429c      	cmp	r4, r3
    1748:	d109      	bne.n	175e <_fflush_r+0x2e>
    174a:	686c      	ldr	r4, [r5, #4]
    174c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1750:	b17b      	cbz	r3, 1772 <_fflush_r+0x42>
    1752:	4621      	mov	r1, r4
    1754:	4628      	mov	r0, r5
    1756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    175a:	f7ff bf63 	b.w	1624 <__sflush_r>
    175e:	4b07      	ldr	r3, [pc, #28]	; (177c <_fflush_r+0x4c>)
    1760:	429c      	cmp	r4, r3
    1762:	d101      	bne.n	1768 <_fflush_r+0x38>
    1764:	68ac      	ldr	r4, [r5, #8]
    1766:	e7f1      	b.n	174c <_fflush_r+0x1c>
    1768:	4b05      	ldr	r3, [pc, #20]	; (1780 <_fflush_r+0x50>)
    176a:	429c      	cmp	r4, r3
    176c:	bf08      	it	eq
    176e:	68ec      	ldreq	r4, [r5, #12]
    1770:	e7ec      	b.n	174c <_fflush_r+0x1c>
    1772:	2000      	movs	r0, #0
    1774:	bd38      	pop	{r3, r4, r5, pc}
    1776:	bf00      	nop
    1778:	000027b0 	.word	0x000027b0
    177c:	000027d0 	.word	0x000027d0
    1780:	00002790 	.word	0x00002790

00001784 <std>:
    1784:	2300      	movs	r3, #0
    1786:	b510      	push	{r4, lr}
    1788:	4604      	mov	r4, r0
    178a:	e9c0 3300 	strd	r3, r3, [r0]
    178e:	6083      	str	r3, [r0, #8]
    1790:	8181      	strh	r1, [r0, #12]
    1792:	6643      	str	r3, [r0, #100]	; 0x64
    1794:	81c2      	strh	r2, [r0, #14]
    1796:	e9c0 3304 	strd	r3, r3, [r0, #16]
    179a:	6183      	str	r3, [r0, #24]
    179c:	4619      	mov	r1, r3
    179e:	2208      	movs	r2, #8
    17a0:	305c      	adds	r0, #92	; 0x5c
    17a2:	f7ff fdf1 	bl	1388 <memset>
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <std+0x38>)
    17a8:	6224      	str	r4, [r4, #32]
    17aa:	6263      	str	r3, [r4, #36]	; 0x24
    17ac:	4b04      	ldr	r3, [pc, #16]	; (17c0 <std+0x3c>)
    17ae:	62a3      	str	r3, [r4, #40]	; 0x28
    17b0:	4b04      	ldr	r3, [pc, #16]	; (17c4 <std+0x40>)
    17b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <std+0x44>)
    17b6:	6323      	str	r3, [r4, #48]	; 0x30
    17b8:	bd10      	pop	{r4, pc}
    17ba:	bf00      	nop
    17bc:	000020d5 	.word	0x000020d5
    17c0:	000020f7 	.word	0x000020f7
    17c4:	0000212f 	.word	0x0000212f
    17c8:	00002153 	.word	0x00002153

000017cc <_cleanup_r>:
    17cc:	4901      	ldr	r1, [pc, #4]	; (17d4 <_cleanup_r+0x8>)
    17ce:	f000 b885 	b.w	18dc <_fwalk_reent>
    17d2:	bf00      	nop
    17d4:	00001731 	.word	0x00001731

000017d8 <__sfmoreglue>:
    17d8:	b570      	push	{r4, r5, r6, lr}
    17da:	2568      	movs	r5, #104	; 0x68
    17dc:	1e4a      	subs	r2, r1, #1
    17de:	4355      	muls	r5, r2
    17e0:	460e      	mov	r6, r1
    17e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
    17e6:	f000 f947 	bl	1a78 <_malloc_r>
    17ea:	4604      	mov	r4, r0
    17ec:	b140      	cbz	r0, 1800 <__sfmoreglue+0x28>
    17ee:	2100      	movs	r1, #0
    17f0:	e9c0 1600 	strd	r1, r6, [r0]
    17f4:	300c      	adds	r0, #12
    17f6:	60a0      	str	r0, [r4, #8]
    17f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
    17fc:	f7ff fdc4 	bl	1388 <memset>
    1800:	4620      	mov	r0, r4
    1802:	bd70      	pop	{r4, r5, r6, pc}

00001804 <__sinit>:
    1804:	6983      	ldr	r3, [r0, #24]
    1806:	b510      	push	{r4, lr}
    1808:	4604      	mov	r4, r0
    180a:	bb33      	cbnz	r3, 185a <__sinit+0x56>
    180c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    1810:	6503      	str	r3, [r0, #80]	; 0x50
    1812:	4b12      	ldr	r3, [pc, #72]	; (185c <__sinit+0x58>)
    1814:	4a12      	ldr	r2, [pc, #72]	; (1860 <__sinit+0x5c>)
    1816:	681b      	ldr	r3, [r3, #0]
    1818:	6282      	str	r2, [r0, #40]	; 0x28
    181a:	4298      	cmp	r0, r3
    181c:	bf04      	itt	eq
    181e:	2301      	moveq	r3, #1
    1820:	6183      	streq	r3, [r0, #24]
    1822:	f000 f81f 	bl	1864 <__sfp>
    1826:	6060      	str	r0, [r4, #4]
    1828:	4620      	mov	r0, r4
    182a:	f000 f81b 	bl	1864 <__sfp>
    182e:	60a0      	str	r0, [r4, #8]
    1830:	4620      	mov	r0, r4
    1832:	f000 f817 	bl	1864 <__sfp>
    1836:	2200      	movs	r2, #0
    1838:	60e0      	str	r0, [r4, #12]
    183a:	2104      	movs	r1, #4
    183c:	6860      	ldr	r0, [r4, #4]
    183e:	f7ff ffa1 	bl	1784 <std>
    1842:	2201      	movs	r2, #1
    1844:	2109      	movs	r1, #9
    1846:	68a0      	ldr	r0, [r4, #8]
    1848:	f7ff ff9c 	bl	1784 <std>
    184c:	2202      	movs	r2, #2
    184e:	2112      	movs	r1, #18
    1850:	68e0      	ldr	r0, [r4, #12]
    1852:	f7ff ff97 	bl	1784 <std>
    1856:	2301      	movs	r3, #1
    1858:	61a3      	str	r3, [r4, #24]
    185a:	bd10      	pop	{r4, pc}
    185c:	0000278c 	.word	0x0000278c
    1860:	000017cd 	.word	0x000017cd

00001864 <__sfp>:
    1864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1866:	4b1b      	ldr	r3, [pc, #108]	; (18d4 <__sfp+0x70>)
    1868:	4607      	mov	r7, r0
    186a:	681e      	ldr	r6, [r3, #0]
    186c:	69b3      	ldr	r3, [r6, #24]
    186e:	b913      	cbnz	r3, 1876 <__sfp+0x12>
    1870:	4630      	mov	r0, r6
    1872:	f7ff ffc7 	bl	1804 <__sinit>
    1876:	3648      	adds	r6, #72	; 0x48
    1878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    187c:	3b01      	subs	r3, #1
    187e:	d503      	bpl.n	1888 <__sfp+0x24>
    1880:	6833      	ldr	r3, [r6, #0]
    1882:	b133      	cbz	r3, 1892 <__sfp+0x2e>
    1884:	6836      	ldr	r6, [r6, #0]
    1886:	e7f7      	b.n	1878 <__sfp+0x14>
    1888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    188c:	b16d      	cbz	r5, 18aa <__sfp+0x46>
    188e:	3468      	adds	r4, #104	; 0x68
    1890:	e7f4      	b.n	187c <__sfp+0x18>
    1892:	2104      	movs	r1, #4
    1894:	4638      	mov	r0, r7
    1896:	f7ff ff9f 	bl	17d8 <__sfmoreglue>
    189a:	6030      	str	r0, [r6, #0]
    189c:	2800      	cmp	r0, #0
    189e:	d1f1      	bne.n	1884 <__sfp+0x20>
    18a0:	230c      	movs	r3, #12
    18a2:	4604      	mov	r4, r0
    18a4:	603b      	str	r3, [r7, #0]
    18a6:	4620      	mov	r0, r4
    18a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18aa:	4b0b      	ldr	r3, [pc, #44]	; (18d8 <__sfp+0x74>)
    18ac:	6665      	str	r5, [r4, #100]	; 0x64
    18ae:	e9c4 5500 	strd	r5, r5, [r4]
    18b2:	60a5      	str	r5, [r4, #8]
    18b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
    18b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
    18bc:	2208      	movs	r2, #8
    18be:	4629      	mov	r1, r5
    18c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    18c4:	f7ff fd60 	bl	1388 <memset>
    18c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    18cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    18d0:	e7e9      	b.n	18a6 <__sfp+0x42>
    18d2:	bf00      	nop
    18d4:	0000278c 	.word	0x0000278c
    18d8:	ffff0001 	.word	0xffff0001

000018dc <_fwalk_reent>:
    18dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    18e0:	4680      	mov	r8, r0
    18e2:	4689      	mov	r9, r1
    18e4:	2600      	movs	r6, #0
    18e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
    18ea:	b914      	cbnz	r4, 18f2 <_fwalk_reent+0x16>
    18ec:	4630      	mov	r0, r6
    18ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    18f6:	3f01      	subs	r7, #1
    18f8:	d501      	bpl.n	18fe <_fwalk_reent+0x22>
    18fa:	6824      	ldr	r4, [r4, #0]
    18fc:	e7f5      	b.n	18ea <_fwalk_reent+0xe>
    18fe:	89ab      	ldrh	r3, [r5, #12]
    1900:	2b01      	cmp	r3, #1
    1902:	d907      	bls.n	1914 <_fwalk_reent+0x38>
    1904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1908:	3301      	adds	r3, #1
    190a:	d003      	beq.n	1914 <_fwalk_reent+0x38>
    190c:	4629      	mov	r1, r5
    190e:	4640      	mov	r0, r8
    1910:	47c8      	blx	r9
    1912:	4306      	orrs	r6, r0
    1914:	3568      	adds	r5, #104	; 0x68
    1916:	e7ee      	b.n	18f6 <_fwalk_reent+0x1a>

00001918 <__swhatbuf_r>:
    1918:	b570      	push	{r4, r5, r6, lr}
    191a:	460e      	mov	r6, r1
    191c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1920:	b096      	sub	sp, #88	; 0x58
    1922:	2900      	cmp	r1, #0
    1924:	4614      	mov	r4, r2
    1926:	461d      	mov	r5, r3
    1928:	da07      	bge.n	193a <__swhatbuf_r+0x22>
    192a:	2300      	movs	r3, #0
    192c:	602b      	str	r3, [r5, #0]
    192e:	89b3      	ldrh	r3, [r6, #12]
    1930:	061a      	lsls	r2, r3, #24
    1932:	d410      	bmi.n	1956 <__swhatbuf_r+0x3e>
    1934:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1938:	e00e      	b.n	1958 <__swhatbuf_r+0x40>
    193a:	466a      	mov	r2, sp
    193c:	f000 fc30 	bl	21a0 <_fstat_r>
    1940:	2800      	cmp	r0, #0
    1942:	dbf2      	blt.n	192a <__swhatbuf_r+0x12>
    1944:	9a01      	ldr	r2, [sp, #4]
    1946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    194a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    194e:	425a      	negs	r2, r3
    1950:	415a      	adcs	r2, r3
    1952:	602a      	str	r2, [r5, #0]
    1954:	e7ee      	b.n	1934 <__swhatbuf_r+0x1c>
    1956:	2340      	movs	r3, #64	; 0x40
    1958:	2000      	movs	r0, #0
    195a:	6023      	str	r3, [r4, #0]
    195c:	b016      	add	sp, #88	; 0x58
    195e:	bd70      	pop	{r4, r5, r6, pc}

00001960 <__smakebuf_r>:
    1960:	898b      	ldrh	r3, [r1, #12]
    1962:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1964:	079d      	lsls	r5, r3, #30
    1966:	4606      	mov	r6, r0
    1968:	460c      	mov	r4, r1
    196a:	d507      	bpl.n	197c <__smakebuf_r+0x1c>
    196c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1970:	6023      	str	r3, [r4, #0]
    1972:	6123      	str	r3, [r4, #16]
    1974:	2301      	movs	r3, #1
    1976:	6163      	str	r3, [r4, #20]
    1978:	b002      	add	sp, #8
    197a:	bd70      	pop	{r4, r5, r6, pc}
    197c:	ab01      	add	r3, sp, #4
    197e:	466a      	mov	r2, sp
    1980:	f7ff ffca 	bl	1918 <__swhatbuf_r>
    1984:	9900      	ldr	r1, [sp, #0]
    1986:	4605      	mov	r5, r0
    1988:	4630      	mov	r0, r6
    198a:	f000 f875 	bl	1a78 <_malloc_r>
    198e:	b948      	cbnz	r0, 19a4 <__smakebuf_r+0x44>
    1990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1994:	059a      	lsls	r2, r3, #22
    1996:	d4ef      	bmi.n	1978 <__smakebuf_r+0x18>
    1998:	f023 0303 	bic.w	r3, r3, #3
    199c:	f043 0302 	orr.w	r3, r3, #2
    19a0:	81a3      	strh	r3, [r4, #12]
    19a2:	e7e3      	b.n	196c <__smakebuf_r+0xc>
    19a4:	4b0d      	ldr	r3, [pc, #52]	; (19dc <__smakebuf_r+0x7c>)
    19a6:	62b3      	str	r3, [r6, #40]	; 0x28
    19a8:	89a3      	ldrh	r3, [r4, #12]
    19aa:	6020      	str	r0, [r4, #0]
    19ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    19b0:	81a3      	strh	r3, [r4, #12]
    19b2:	9b00      	ldr	r3, [sp, #0]
    19b4:	6120      	str	r0, [r4, #16]
    19b6:	6163      	str	r3, [r4, #20]
    19b8:	9b01      	ldr	r3, [sp, #4]
    19ba:	b15b      	cbz	r3, 19d4 <__smakebuf_r+0x74>
    19bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    19c0:	4630      	mov	r0, r6
    19c2:	f000 fbff 	bl	21c4 <_isatty_r>
    19c6:	b128      	cbz	r0, 19d4 <__smakebuf_r+0x74>
    19c8:	89a3      	ldrh	r3, [r4, #12]
    19ca:	f023 0303 	bic.w	r3, r3, #3
    19ce:	f043 0301 	orr.w	r3, r3, #1
    19d2:	81a3      	strh	r3, [r4, #12]
    19d4:	89a3      	ldrh	r3, [r4, #12]
    19d6:	431d      	orrs	r5, r3
    19d8:	81a5      	strh	r5, [r4, #12]
    19da:	e7cd      	b.n	1978 <__smakebuf_r+0x18>
    19dc:	000017cd 	.word	0x000017cd

000019e0 <_free_r>:
    19e0:	b538      	push	{r3, r4, r5, lr}
    19e2:	4605      	mov	r5, r0
    19e4:	2900      	cmp	r1, #0
    19e6:	d043      	beq.n	1a70 <_free_r+0x90>
    19e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    19ec:	1f0c      	subs	r4, r1, #4
    19ee:	2b00      	cmp	r3, #0
    19f0:	bfb8      	it	lt
    19f2:	18e4      	addlt	r4, r4, r3
    19f4:	f000 fc16 	bl	2224 <__malloc_lock>
    19f8:	4a1e      	ldr	r2, [pc, #120]	; (1a74 <_free_r+0x94>)
    19fa:	6813      	ldr	r3, [r2, #0]
    19fc:	4610      	mov	r0, r2
    19fe:	b933      	cbnz	r3, 1a0e <_free_r+0x2e>
    1a00:	6063      	str	r3, [r4, #4]
    1a02:	6014      	str	r4, [r2, #0]
    1a04:	4628      	mov	r0, r5
    1a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1a0a:	f000 bc0c 	b.w	2226 <__malloc_unlock>
    1a0e:	42a3      	cmp	r3, r4
    1a10:	d90b      	bls.n	1a2a <_free_r+0x4a>
    1a12:	6821      	ldr	r1, [r4, #0]
    1a14:	1862      	adds	r2, r4, r1
    1a16:	4293      	cmp	r3, r2
    1a18:	bf01      	itttt	eq
    1a1a:	681a      	ldreq	r2, [r3, #0]
    1a1c:	685b      	ldreq	r3, [r3, #4]
    1a1e:	1852      	addeq	r2, r2, r1
    1a20:	6022      	streq	r2, [r4, #0]
    1a22:	6063      	str	r3, [r4, #4]
    1a24:	6004      	str	r4, [r0, #0]
    1a26:	e7ed      	b.n	1a04 <_free_r+0x24>
    1a28:	4613      	mov	r3, r2
    1a2a:	685a      	ldr	r2, [r3, #4]
    1a2c:	b10a      	cbz	r2, 1a32 <_free_r+0x52>
    1a2e:	42a2      	cmp	r2, r4
    1a30:	d9fa      	bls.n	1a28 <_free_r+0x48>
    1a32:	6819      	ldr	r1, [r3, #0]
    1a34:	1858      	adds	r0, r3, r1
    1a36:	42a0      	cmp	r0, r4
    1a38:	d10b      	bne.n	1a52 <_free_r+0x72>
    1a3a:	6820      	ldr	r0, [r4, #0]
    1a3c:	4401      	add	r1, r0
    1a3e:	1858      	adds	r0, r3, r1
    1a40:	4282      	cmp	r2, r0
    1a42:	6019      	str	r1, [r3, #0]
    1a44:	d1de      	bne.n	1a04 <_free_r+0x24>
    1a46:	6810      	ldr	r0, [r2, #0]
    1a48:	6852      	ldr	r2, [r2, #4]
    1a4a:	4401      	add	r1, r0
    1a4c:	6019      	str	r1, [r3, #0]
    1a4e:	605a      	str	r2, [r3, #4]
    1a50:	e7d8      	b.n	1a04 <_free_r+0x24>
    1a52:	d902      	bls.n	1a5a <_free_r+0x7a>
    1a54:	230c      	movs	r3, #12
    1a56:	602b      	str	r3, [r5, #0]
    1a58:	e7d4      	b.n	1a04 <_free_r+0x24>
    1a5a:	6820      	ldr	r0, [r4, #0]
    1a5c:	1821      	adds	r1, r4, r0
    1a5e:	428a      	cmp	r2, r1
    1a60:	bf01      	itttt	eq
    1a62:	6811      	ldreq	r1, [r2, #0]
    1a64:	6852      	ldreq	r2, [r2, #4]
    1a66:	1809      	addeq	r1, r1, r0
    1a68:	6021      	streq	r1, [r4, #0]
    1a6a:	6062      	str	r2, [r4, #4]
    1a6c:	605c      	str	r4, [r3, #4]
    1a6e:	e7c9      	b.n	1a04 <_free_r+0x24>
    1a70:	bd38      	pop	{r3, r4, r5, pc}
    1a72:	bf00      	nop
    1a74:	20000074 	.word	0x20000074

00001a78 <_malloc_r>:
    1a78:	b570      	push	{r4, r5, r6, lr}
    1a7a:	1ccd      	adds	r5, r1, #3
    1a7c:	f025 0503 	bic.w	r5, r5, #3
    1a80:	3508      	adds	r5, #8
    1a82:	2d0c      	cmp	r5, #12
    1a84:	bf38      	it	cc
    1a86:	250c      	movcc	r5, #12
    1a88:	2d00      	cmp	r5, #0
    1a8a:	4606      	mov	r6, r0
    1a8c:	db01      	blt.n	1a92 <_malloc_r+0x1a>
    1a8e:	42a9      	cmp	r1, r5
    1a90:	d903      	bls.n	1a9a <_malloc_r+0x22>
    1a92:	230c      	movs	r3, #12
    1a94:	6033      	str	r3, [r6, #0]
    1a96:	2000      	movs	r0, #0
    1a98:	bd70      	pop	{r4, r5, r6, pc}
    1a9a:	f000 fbc3 	bl	2224 <__malloc_lock>
    1a9e:	4a21      	ldr	r2, [pc, #132]	; (1b24 <_malloc_r+0xac>)
    1aa0:	6814      	ldr	r4, [r2, #0]
    1aa2:	4621      	mov	r1, r4
    1aa4:	b991      	cbnz	r1, 1acc <_malloc_r+0x54>
    1aa6:	4c20      	ldr	r4, [pc, #128]	; (1b28 <_malloc_r+0xb0>)
    1aa8:	6823      	ldr	r3, [r4, #0]
    1aaa:	b91b      	cbnz	r3, 1ab4 <_malloc_r+0x3c>
    1aac:	4630      	mov	r0, r6
    1aae:	f000 fb01 	bl	20b4 <_sbrk_r>
    1ab2:	6020      	str	r0, [r4, #0]
    1ab4:	4629      	mov	r1, r5
    1ab6:	4630      	mov	r0, r6
    1ab8:	f000 fafc 	bl	20b4 <_sbrk_r>
    1abc:	1c43      	adds	r3, r0, #1
    1abe:	d124      	bne.n	1b0a <_malloc_r+0x92>
    1ac0:	230c      	movs	r3, #12
    1ac2:	4630      	mov	r0, r6
    1ac4:	6033      	str	r3, [r6, #0]
    1ac6:	f000 fbae 	bl	2226 <__malloc_unlock>
    1aca:	e7e4      	b.n	1a96 <_malloc_r+0x1e>
    1acc:	680b      	ldr	r3, [r1, #0]
    1ace:	1b5b      	subs	r3, r3, r5
    1ad0:	d418      	bmi.n	1b04 <_malloc_r+0x8c>
    1ad2:	2b0b      	cmp	r3, #11
    1ad4:	d90f      	bls.n	1af6 <_malloc_r+0x7e>
    1ad6:	600b      	str	r3, [r1, #0]
    1ad8:	18cc      	adds	r4, r1, r3
    1ada:	50cd      	str	r5, [r1, r3]
    1adc:	4630      	mov	r0, r6
    1ade:	f000 fba2 	bl	2226 <__malloc_unlock>
    1ae2:	f104 000b 	add.w	r0, r4, #11
    1ae6:	1d23      	adds	r3, r4, #4
    1ae8:	f020 0007 	bic.w	r0, r0, #7
    1aec:	1ac3      	subs	r3, r0, r3
    1aee:	d0d3      	beq.n	1a98 <_malloc_r+0x20>
    1af0:	425a      	negs	r2, r3
    1af2:	50e2      	str	r2, [r4, r3]
    1af4:	e7d0      	b.n	1a98 <_malloc_r+0x20>
    1af6:	684b      	ldr	r3, [r1, #4]
    1af8:	428c      	cmp	r4, r1
    1afa:	bf16      	itet	ne
    1afc:	6063      	strne	r3, [r4, #4]
    1afe:	6013      	streq	r3, [r2, #0]
    1b00:	460c      	movne	r4, r1
    1b02:	e7eb      	b.n	1adc <_malloc_r+0x64>
    1b04:	460c      	mov	r4, r1
    1b06:	6849      	ldr	r1, [r1, #4]
    1b08:	e7cc      	b.n	1aa4 <_malloc_r+0x2c>
    1b0a:	1cc4      	adds	r4, r0, #3
    1b0c:	f024 0403 	bic.w	r4, r4, #3
    1b10:	42a0      	cmp	r0, r4
    1b12:	d005      	beq.n	1b20 <_malloc_r+0xa8>
    1b14:	1a21      	subs	r1, r4, r0
    1b16:	4630      	mov	r0, r6
    1b18:	f000 facc 	bl	20b4 <_sbrk_r>
    1b1c:	3001      	adds	r0, #1
    1b1e:	d0cf      	beq.n	1ac0 <_malloc_r+0x48>
    1b20:	6025      	str	r5, [r4, #0]
    1b22:	e7db      	b.n	1adc <_malloc_r+0x64>
    1b24:	20000074 	.word	0x20000074
    1b28:	20000078 	.word	0x20000078

00001b2c <__sfputc_r>:
    1b2c:	6893      	ldr	r3, [r2, #8]
    1b2e:	b410      	push	{r4}
    1b30:	3b01      	subs	r3, #1
    1b32:	2b00      	cmp	r3, #0
    1b34:	6093      	str	r3, [r2, #8]
    1b36:	da07      	bge.n	1b48 <__sfputc_r+0x1c>
    1b38:	6994      	ldr	r4, [r2, #24]
    1b3a:	42a3      	cmp	r3, r4
    1b3c:	db01      	blt.n	1b42 <__sfputc_r+0x16>
    1b3e:	290a      	cmp	r1, #10
    1b40:	d102      	bne.n	1b48 <__sfputc_r+0x1c>
    1b42:	bc10      	pop	{r4}
    1b44:	f7ff bcae 	b.w	14a4 <__swbuf_r>
    1b48:	6813      	ldr	r3, [r2, #0]
    1b4a:	1c58      	adds	r0, r3, #1
    1b4c:	6010      	str	r0, [r2, #0]
    1b4e:	7019      	strb	r1, [r3, #0]
    1b50:	4608      	mov	r0, r1
    1b52:	bc10      	pop	{r4}
    1b54:	4770      	bx	lr

00001b56 <__sfputs_r>:
    1b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b58:	4606      	mov	r6, r0
    1b5a:	460f      	mov	r7, r1
    1b5c:	4614      	mov	r4, r2
    1b5e:	18d5      	adds	r5, r2, r3
    1b60:	42ac      	cmp	r4, r5
    1b62:	d101      	bne.n	1b68 <__sfputs_r+0x12>
    1b64:	2000      	movs	r0, #0
    1b66:	e007      	b.n	1b78 <__sfputs_r+0x22>
    1b68:	463a      	mov	r2, r7
    1b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
    1b6e:	4630      	mov	r0, r6
    1b70:	f7ff ffdc 	bl	1b2c <__sfputc_r>
    1b74:	1c43      	adds	r3, r0, #1
    1b76:	d1f3      	bne.n	1b60 <__sfputs_r+0xa>
    1b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001b7c <_vfiprintf_r>:
    1b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b80:	b09d      	sub	sp, #116	; 0x74
    1b82:	460c      	mov	r4, r1
    1b84:	4617      	mov	r7, r2
    1b86:	9303      	str	r3, [sp, #12]
    1b88:	4606      	mov	r6, r0
    1b8a:	b118      	cbz	r0, 1b94 <_vfiprintf_r+0x18>
    1b8c:	6983      	ldr	r3, [r0, #24]
    1b8e:	b90b      	cbnz	r3, 1b94 <_vfiprintf_r+0x18>
    1b90:	f7ff fe38 	bl	1804 <__sinit>
    1b94:	4b7b      	ldr	r3, [pc, #492]	; (1d84 <_vfiprintf_r+0x208>)
    1b96:	429c      	cmp	r4, r3
    1b98:	d157      	bne.n	1c4a <_vfiprintf_r+0xce>
    1b9a:	6874      	ldr	r4, [r6, #4]
    1b9c:	89a3      	ldrh	r3, [r4, #12]
    1b9e:	0718      	lsls	r0, r3, #28
    1ba0:	d55d      	bpl.n	1c5e <_vfiprintf_r+0xe2>
    1ba2:	6923      	ldr	r3, [r4, #16]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d05a      	beq.n	1c5e <_vfiprintf_r+0xe2>
    1ba8:	2300      	movs	r3, #0
    1baa:	9309      	str	r3, [sp, #36]	; 0x24
    1bac:	2320      	movs	r3, #32
    1bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    1bb2:	2330      	movs	r3, #48	; 0x30
    1bb4:	f04f 0b01 	mov.w	fp, #1
    1bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    1bbc:	46b8      	mov	r8, r7
    1bbe:	4645      	mov	r5, r8
    1bc0:	f815 3b01 	ldrb.w	r3, [r5], #1
    1bc4:	b10b      	cbz	r3, 1bca <_vfiprintf_r+0x4e>
    1bc6:	2b25      	cmp	r3, #37	; 0x25
    1bc8:	d154      	bne.n	1c74 <_vfiprintf_r+0xf8>
    1bca:	ebb8 0a07 	subs.w	sl, r8, r7
    1bce:	d00b      	beq.n	1be8 <_vfiprintf_r+0x6c>
    1bd0:	4653      	mov	r3, sl
    1bd2:	463a      	mov	r2, r7
    1bd4:	4621      	mov	r1, r4
    1bd6:	4630      	mov	r0, r6
    1bd8:	f7ff ffbd 	bl	1b56 <__sfputs_r>
    1bdc:	3001      	adds	r0, #1
    1bde:	f000 80c2 	beq.w	1d66 <_vfiprintf_r+0x1ea>
    1be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1be4:	4453      	add	r3, sl
    1be6:	9309      	str	r3, [sp, #36]	; 0x24
    1be8:	f898 3000 	ldrb.w	r3, [r8]
    1bec:	2b00      	cmp	r3, #0
    1bee:	f000 80ba 	beq.w	1d66 <_vfiprintf_r+0x1ea>
    1bf2:	2300      	movs	r3, #0
    1bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    1bfc:	9304      	str	r3, [sp, #16]
    1bfe:	9307      	str	r3, [sp, #28]
    1c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    1c04:	931a      	str	r3, [sp, #104]	; 0x68
    1c06:	46a8      	mov	r8, r5
    1c08:	2205      	movs	r2, #5
    1c0a:	f818 1b01 	ldrb.w	r1, [r8], #1
    1c0e:	485e      	ldr	r0, [pc, #376]	; (1d88 <_vfiprintf_r+0x20c>)
    1c10:	f000 fafa 	bl	2208 <memchr>
    1c14:	9b04      	ldr	r3, [sp, #16]
    1c16:	bb78      	cbnz	r0, 1c78 <_vfiprintf_r+0xfc>
    1c18:	06d9      	lsls	r1, r3, #27
    1c1a:	bf44      	itt	mi
    1c1c:	2220      	movmi	r2, #32
    1c1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1c22:	071a      	lsls	r2, r3, #28
    1c24:	bf44      	itt	mi
    1c26:	222b      	movmi	r2, #43	; 0x2b
    1c28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    1c2c:	782a      	ldrb	r2, [r5, #0]
    1c2e:	2a2a      	cmp	r2, #42	; 0x2a
    1c30:	d02a      	beq.n	1c88 <_vfiprintf_r+0x10c>
    1c32:	46a8      	mov	r8, r5
    1c34:	2000      	movs	r0, #0
    1c36:	250a      	movs	r5, #10
    1c38:	9a07      	ldr	r2, [sp, #28]
    1c3a:	4641      	mov	r1, r8
    1c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1c40:	3b30      	subs	r3, #48	; 0x30
    1c42:	2b09      	cmp	r3, #9
    1c44:	d969      	bls.n	1d1a <_vfiprintf_r+0x19e>
    1c46:	b360      	cbz	r0, 1ca2 <_vfiprintf_r+0x126>
    1c48:	e024      	b.n	1c94 <_vfiprintf_r+0x118>
    1c4a:	4b50      	ldr	r3, [pc, #320]	; (1d8c <_vfiprintf_r+0x210>)
    1c4c:	429c      	cmp	r4, r3
    1c4e:	d101      	bne.n	1c54 <_vfiprintf_r+0xd8>
    1c50:	68b4      	ldr	r4, [r6, #8]
    1c52:	e7a3      	b.n	1b9c <_vfiprintf_r+0x20>
    1c54:	4b4e      	ldr	r3, [pc, #312]	; (1d90 <_vfiprintf_r+0x214>)
    1c56:	429c      	cmp	r4, r3
    1c58:	bf08      	it	eq
    1c5a:	68f4      	ldreq	r4, [r6, #12]
    1c5c:	e79e      	b.n	1b9c <_vfiprintf_r+0x20>
    1c5e:	4621      	mov	r1, r4
    1c60:	4630      	mov	r0, r6
    1c62:	f7ff fc71 	bl	1548 <__swsetup_r>
    1c66:	2800      	cmp	r0, #0
    1c68:	d09e      	beq.n	1ba8 <_vfiprintf_r+0x2c>
    1c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c6e:	b01d      	add	sp, #116	; 0x74
    1c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c74:	46a8      	mov	r8, r5
    1c76:	e7a2      	b.n	1bbe <_vfiprintf_r+0x42>
    1c78:	4a43      	ldr	r2, [pc, #268]	; (1d88 <_vfiprintf_r+0x20c>)
    1c7a:	4645      	mov	r5, r8
    1c7c:	1a80      	subs	r0, r0, r2
    1c7e:	fa0b f000 	lsl.w	r0, fp, r0
    1c82:	4318      	orrs	r0, r3
    1c84:	9004      	str	r0, [sp, #16]
    1c86:	e7be      	b.n	1c06 <_vfiprintf_r+0x8a>
    1c88:	9a03      	ldr	r2, [sp, #12]
    1c8a:	1d11      	adds	r1, r2, #4
    1c8c:	6812      	ldr	r2, [r2, #0]
    1c8e:	9103      	str	r1, [sp, #12]
    1c90:	2a00      	cmp	r2, #0
    1c92:	db01      	blt.n	1c98 <_vfiprintf_r+0x11c>
    1c94:	9207      	str	r2, [sp, #28]
    1c96:	e004      	b.n	1ca2 <_vfiprintf_r+0x126>
    1c98:	4252      	negs	r2, r2
    1c9a:	f043 0302 	orr.w	r3, r3, #2
    1c9e:	9207      	str	r2, [sp, #28]
    1ca0:	9304      	str	r3, [sp, #16]
    1ca2:	f898 3000 	ldrb.w	r3, [r8]
    1ca6:	2b2e      	cmp	r3, #46	; 0x2e
    1ca8:	d10e      	bne.n	1cc8 <_vfiprintf_r+0x14c>
    1caa:	f898 3001 	ldrb.w	r3, [r8, #1]
    1cae:	2b2a      	cmp	r3, #42	; 0x2a
    1cb0:	d138      	bne.n	1d24 <_vfiprintf_r+0x1a8>
    1cb2:	9b03      	ldr	r3, [sp, #12]
    1cb4:	f108 0802 	add.w	r8, r8, #2
    1cb8:	1d1a      	adds	r2, r3, #4
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	9203      	str	r2, [sp, #12]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	bfb8      	it	lt
    1cc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    1cc6:	9305      	str	r3, [sp, #20]
    1cc8:	4d32      	ldr	r5, [pc, #200]	; (1d94 <_vfiprintf_r+0x218>)
    1cca:	2203      	movs	r2, #3
    1ccc:	f898 1000 	ldrb.w	r1, [r8]
    1cd0:	4628      	mov	r0, r5
    1cd2:	f000 fa99 	bl	2208 <memchr>
    1cd6:	b140      	cbz	r0, 1cea <_vfiprintf_r+0x16e>
    1cd8:	2340      	movs	r3, #64	; 0x40
    1cda:	1b40      	subs	r0, r0, r5
    1cdc:	fa03 f000 	lsl.w	r0, r3, r0
    1ce0:	9b04      	ldr	r3, [sp, #16]
    1ce2:	f108 0801 	add.w	r8, r8, #1
    1ce6:	4303      	orrs	r3, r0
    1ce8:	9304      	str	r3, [sp, #16]
    1cea:	f898 1000 	ldrb.w	r1, [r8]
    1cee:	2206      	movs	r2, #6
    1cf0:	4829      	ldr	r0, [pc, #164]	; (1d98 <_vfiprintf_r+0x21c>)
    1cf2:	f108 0701 	add.w	r7, r8, #1
    1cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    1cfa:	f000 fa85 	bl	2208 <memchr>
    1cfe:	2800      	cmp	r0, #0
    1d00:	d037      	beq.n	1d72 <_vfiprintf_r+0x1f6>
    1d02:	4b26      	ldr	r3, [pc, #152]	; (1d9c <_vfiprintf_r+0x220>)
    1d04:	bb1b      	cbnz	r3, 1d4e <_vfiprintf_r+0x1d2>
    1d06:	9b03      	ldr	r3, [sp, #12]
    1d08:	3307      	adds	r3, #7
    1d0a:	f023 0307 	bic.w	r3, r3, #7
    1d0e:	3308      	adds	r3, #8
    1d10:	9303      	str	r3, [sp, #12]
    1d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d14:	444b      	add	r3, r9
    1d16:	9309      	str	r3, [sp, #36]	; 0x24
    1d18:	e750      	b.n	1bbc <_vfiprintf_r+0x40>
    1d1a:	fb05 3202 	mla	r2, r5, r2, r3
    1d1e:	2001      	movs	r0, #1
    1d20:	4688      	mov	r8, r1
    1d22:	e78a      	b.n	1c3a <_vfiprintf_r+0xbe>
    1d24:	2300      	movs	r3, #0
    1d26:	250a      	movs	r5, #10
    1d28:	4619      	mov	r1, r3
    1d2a:	f108 0801 	add.w	r8, r8, #1
    1d2e:	9305      	str	r3, [sp, #20]
    1d30:	4640      	mov	r0, r8
    1d32:	f810 2b01 	ldrb.w	r2, [r0], #1
    1d36:	3a30      	subs	r2, #48	; 0x30
    1d38:	2a09      	cmp	r2, #9
    1d3a:	d903      	bls.n	1d44 <_vfiprintf_r+0x1c8>
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d0c3      	beq.n	1cc8 <_vfiprintf_r+0x14c>
    1d40:	9105      	str	r1, [sp, #20]
    1d42:	e7c1      	b.n	1cc8 <_vfiprintf_r+0x14c>
    1d44:	fb05 2101 	mla	r1, r5, r1, r2
    1d48:	2301      	movs	r3, #1
    1d4a:	4680      	mov	r8, r0
    1d4c:	e7f0      	b.n	1d30 <_vfiprintf_r+0x1b4>
    1d4e:	ab03      	add	r3, sp, #12
    1d50:	9300      	str	r3, [sp, #0]
    1d52:	4622      	mov	r2, r4
    1d54:	4b12      	ldr	r3, [pc, #72]	; (1da0 <_vfiprintf_r+0x224>)
    1d56:	a904      	add	r1, sp, #16
    1d58:	4630      	mov	r0, r6
    1d5a:	f3af 8000 	nop.w
    1d5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1d62:	4681      	mov	r9, r0
    1d64:	d1d5      	bne.n	1d12 <_vfiprintf_r+0x196>
    1d66:	89a3      	ldrh	r3, [r4, #12]
    1d68:	065b      	lsls	r3, r3, #25
    1d6a:	f53f af7e 	bmi.w	1c6a <_vfiprintf_r+0xee>
    1d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1d70:	e77d      	b.n	1c6e <_vfiprintf_r+0xf2>
    1d72:	ab03      	add	r3, sp, #12
    1d74:	9300      	str	r3, [sp, #0]
    1d76:	4622      	mov	r2, r4
    1d78:	4b09      	ldr	r3, [pc, #36]	; (1da0 <_vfiprintf_r+0x224>)
    1d7a:	a904      	add	r1, sp, #16
    1d7c:	4630      	mov	r0, r6
    1d7e:	f000 f887 	bl	1e90 <_printf_i>
    1d82:	e7ec      	b.n	1d5e <_vfiprintf_r+0x1e2>
    1d84:	000027b0 	.word	0x000027b0
    1d88:	000027f0 	.word	0x000027f0
    1d8c:	000027d0 	.word	0x000027d0
    1d90:	00002790 	.word	0x00002790
    1d94:	000027f6 	.word	0x000027f6
    1d98:	000027fa 	.word	0x000027fa
    1d9c:	00000000 	.word	0x00000000
    1da0:	00001b57 	.word	0x00001b57

00001da4 <_printf_common>:
    1da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1da8:	4691      	mov	r9, r2
    1daa:	461f      	mov	r7, r3
    1dac:	688a      	ldr	r2, [r1, #8]
    1dae:	690b      	ldr	r3, [r1, #16]
    1db0:	4606      	mov	r6, r0
    1db2:	4293      	cmp	r3, r2
    1db4:	bfb8      	it	lt
    1db6:	4613      	movlt	r3, r2
    1db8:	f8c9 3000 	str.w	r3, [r9]
    1dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    1dc0:	460c      	mov	r4, r1
    1dc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1dc6:	b112      	cbz	r2, 1dce <_printf_common+0x2a>
    1dc8:	3301      	adds	r3, #1
    1dca:	f8c9 3000 	str.w	r3, [r9]
    1dce:	6823      	ldr	r3, [r4, #0]
    1dd0:	0699      	lsls	r1, r3, #26
    1dd2:	bf42      	ittt	mi
    1dd4:	f8d9 3000 	ldrmi.w	r3, [r9]
    1dd8:	3302      	addmi	r3, #2
    1dda:	f8c9 3000 	strmi.w	r3, [r9]
    1dde:	6825      	ldr	r5, [r4, #0]
    1de0:	f015 0506 	ands.w	r5, r5, #6
    1de4:	d107      	bne.n	1df6 <_printf_common+0x52>
    1de6:	f104 0a19 	add.w	sl, r4, #25
    1dea:	68e3      	ldr	r3, [r4, #12]
    1dec:	f8d9 2000 	ldr.w	r2, [r9]
    1df0:	1a9b      	subs	r3, r3, r2
    1df2:	42ab      	cmp	r3, r5
    1df4:	dc29      	bgt.n	1e4a <_printf_common+0xa6>
    1df6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    1dfa:	6822      	ldr	r2, [r4, #0]
    1dfc:	3300      	adds	r3, #0
    1dfe:	bf18      	it	ne
    1e00:	2301      	movne	r3, #1
    1e02:	0692      	lsls	r2, r2, #26
    1e04:	d42e      	bmi.n	1e64 <_printf_common+0xc0>
    1e06:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1e0a:	4639      	mov	r1, r7
    1e0c:	4630      	mov	r0, r6
    1e0e:	47c0      	blx	r8
    1e10:	3001      	adds	r0, #1
    1e12:	d021      	beq.n	1e58 <_printf_common+0xb4>
    1e14:	6823      	ldr	r3, [r4, #0]
    1e16:	68e5      	ldr	r5, [r4, #12]
    1e18:	f003 0306 	and.w	r3, r3, #6
    1e1c:	2b04      	cmp	r3, #4
    1e1e:	bf18      	it	ne
    1e20:	2500      	movne	r5, #0
    1e22:	f8d9 2000 	ldr.w	r2, [r9]
    1e26:	f04f 0900 	mov.w	r9, #0
    1e2a:	bf08      	it	eq
    1e2c:	1aad      	subeq	r5, r5, r2
    1e2e:	68a3      	ldr	r3, [r4, #8]
    1e30:	6922      	ldr	r2, [r4, #16]
    1e32:	bf08      	it	eq
    1e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    1e38:	4293      	cmp	r3, r2
    1e3a:	bfc4      	itt	gt
    1e3c:	1a9b      	subgt	r3, r3, r2
    1e3e:	18ed      	addgt	r5, r5, r3
    1e40:	341a      	adds	r4, #26
    1e42:	454d      	cmp	r5, r9
    1e44:	d11a      	bne.n	1e7c <_printf_common+0xd8>
    1e46:	2000      	movs	r0, #0
    1e48:	e008      	b.n	1e5c <_printf_common+0xb8>
    1e4a:	2301      	movs	r3, #1
    1e4c:	4652      	mov	r2, sl
    1e4e:	4639      	mov	r1, r7
    1e50:	4630      	mov	r0, r6
    1e52:	47c0      	blx	r8
    1e54:	3001      	adds	r0, #1
    1e56:	d103      	bne.n	1e60 <_printf_common+0xbc>
    1e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e60:	3501      	adds	r5, #1
    1e62:	e7c2      	b.n	1dea <_printf_common+0x46>
    1e64:	2030      	movs	r0, #48	; 0x30
    1e66:	18e1      	adds	r1, r4, r3
    1e68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    1e6c:	1c5a      	adds	r2, r3, #1
    1e6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    1e72:	4422      	add	r2, r4
    1e74:	3302      	adds	r3, #2
    1e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1e7a:	e7c4      	b.n	1e06 <_printf_common+0x62>
    1e7c:	2301      	movs	r3, #1
    1e7e:	4622      	mov	r2, r4
    1e80:	4639      	mov	r1, r7
    1e82:	4630      	mov	r0, r6
    1e84:	47c0      	blx	r8
    1e86:	3001      	adds	r0, #1
    1e88:	d0e6      	beq.n	1e58 <_printf_common+0xb4>
    1e8a:	f109 0901 	add.w	r9, r9, #1
    1e8e:	e7d8      	b.n	1e42 <_printf_common+0x9e>

00001e90 <_printf_i>:
    1e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    1e98:	460c      	mov	r4, r1
    1e9a:	7e09      	ldrb	r1, [r1, #24]
    1e9c:	b085      	sub	sp, #20
    1e9e:	296e      	cmp	r1, #110	; 0x6e
    1ea0:	4617      	mov	r7, r2
    1ea2:	4606      	mov	r6, r0
    1ea4:	4698      	mov	r8, r3
    1ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ea8:	f000 80b3 	beq.w	2012 <_printf_i+0x182>
    1eac:	d822      	bhi.n	1ef4 <_printf_i+0x64>
    1eae:	2963      	cmp	r1, #99	; 0x63
    1eb0:	d036      	beq.n	1f20 <_printf_i+0x90>
    1eb2:	d80a      	bhi.n	1eca <_printf_i+0x3a>
    1eb4:	2900      	cmp	r1, #0
    1eb6:	f000 80b9 	beq.w	202c <_printf_i+0x19c>
    1eba:	2958      	cmp	r1, #88	; 0x58
    1ebc:	f000 8083 	beq.w	1fc6 <_printf_i+0x136>
    1ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1ec4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    1ec8:	e032      	b.n	1f30 <_printf_i+0xa0>
    1eca:	2964      	cmp	r1, #100	; 0x64
    1ecc:	d001      	beq.n	1ed2 <_printf_i+0x42>
    1ece:	2969      	cmp	r1, #105	; 0x69
    1ed0:	d1f6      	bne.n	1ec0 <_printf_i+0x30>
    1ed2:	6820      	ldr	r0, [r4, #0]
    1ed4:	6813      	ldr	r3, [r2, #0]
    1ed6:	0605      	lsls	r5, r0, #24
    1ed8:	f103 0104 	add.w	r1, r3, #4
    1edc:	d52a      	bpl.n	1f34 <_printf_i+0xa4>
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	6011      	str	r1, [r2, #0]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	da03      	bge.n	1eee <_printf_i+0x5e>
    1ee6:	222d      	movs	r2, #45	; 0x2d
    1ee8:	425b      	negs	r3, r3
    1eea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    1eee:	486f      	ldr	r0, [pc, #444]	; (20ac <_printf_i+0x21c>)
    1ef0:	220a      	movs	r2, #10
    1ef2:	e039      	b.n	1f68 <_printf_i+0xd8>
    1ef4:	2973      	cmp	r1, #115	; 0x73
    1ef6:	f000 809d 	beq.w	2034 <_printf_i+0x1a4>
    1efa:	d808      	bhi.n	1f0e <_printf_i+0x7e>
    1efc:	296f      	cmp	r1, #111	; 0x6f
    1efe:	d020      	beq.n	1f42 <_printf_i+0xb2>
    1f00:	2970      	cmp	r1, #112	; 0x70
    1f02:	d1dd      	bne.n	1ec0 <_printf_i+0x30>
    1f04:	6823      	ldr	r3, [r4, #0]
    1f06:	f043 0320 	orr.w	r3, r3, #32
    1f0a:	6023      	str	r3, [r4, #0]
    1f0c:	e003      	b.n	1f16 <_printf_i+0x86>
    1f0e:	2975      	cmp	r1, #117	; 0x75
    1f10:	d017      	beq.n	1f42 <_printf_i+0xb2>
    1f12:	2978      	cmp	r1, #120	; 0x78
    1f14:	d1d4      	bne.n	1ec0 <_printf_i+0x30>
    1f16:	2378      	movs	r3, #120	; 0x78
    1f18:	4865      	ldr	r0, [pc, #404]	; (20b0 <_printf_i+0x220>)
    1f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    1f1e:	e055      	b.n	1fcc <_printf_i+0x13c>
    1f20:	6813      	ldr	r3, [r2, #0]
    1f22:	f104 0542 	add.w	r5, r4, #66	; 0x42
    1f26:	1d19      	adds	r1, r3, #4
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	6011      	str	r1, [r2, #0]
    1f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    1f30:	2301      	movs	r3, #1
    1f32:	e08c      	b.n	204e <_printf_i+0x1be>
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	f010 0f40 	tst.w	r0, #64	; 0x40
    1f3a:	6011      	str	r1, [r2, #0]
    1f3c:	bf18      	it	ne
    1f3e:	b21b      	sxthne	r3, r3
    1f40:	e7cf      	b.n	1ee2 <_printf_i+0x52>
    1f42:	6813      	ldr	r3, [r2, #0]
    1f44:	6825      	ldr	r5, [r4, #0]
    1f46:	1d18      	adds	r0, r3, #4
    1f48:	6010      	str	r0, [r2, #0]
    1f4a:	0628      	lsls	r0, r5, #24
    1f4c:	d501      	bpl.n	1f52 <_printf_i+0xc2>
    1f4e:	681b      	ldr	r3, [r3, #0]
    1f50:	e002      	b.n	1f58 <_printf_i+0xc8>
    1f52:	0668      	lsls	r0, r5, #25
    1f54:	d5fb      	bpl.n	1f4e <_printf_i+0xbe>
    1f56:	881b      	ldrh	r3, [r3, #0]
    1f58:	296f      	cmp	r1, #111	; 0x6f
    1f5a:	bf14      	ite	ne
    1f5c:	220a      	movne	r2, #10
    1f5e:	2208      	moveq	r2, #8
    1f60:	4852      	ldr	r0, [pc, #328]	; (20ac <_printf_i+0x21c>)
    1f62:	2100      	movs	r1, #0
    1f64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    1f68:	6865      	ldr	r5, [r4, #4]
    1f6a:	2d00      	cmp	r5, #0
    1f6c:	60a5      	str	r5, [r4, #8]
    1f6e:	f2c0 8095 	blt.w	209c <_printf_i+0x20c>
    1f72:	6821      	ldr	r1, [r4, #0]
    1f74:	f021 0104 	bic.w	r1, r1, #4
    1f78:	6021      	str	r1, [r4, #0]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d13d      	bne.n	1ffa <_printf_i+0x16a>
    1f7e:	2d00      	cmp	r5, #0
    1f80:	f040 808e 	bne.w	20a0 <_printf_i+0x210>
    1f84:	4665      	mov	r5, ip
    1f86:	2a08      	cmp	r2, #8
    1f88:	d10b      	bne.n	1fa2 <_printf_i+0x112>
    1f8a:	6823      	ldr	r3, [r4, #0]
    1f8c:	07db      	lsls	r3, r3, #31
    1f8e:	d508      	bpl.n	1fa2 <_printf_i+0x112>
    1f90:	6923      	ldr	r3, [r4, #16]
    1f92:	6862      	ldr	r2, [r4, #4]
    1f94:	429a      	cmp	r2, r3
    1f96:	bfde      	ittt	le
    1f98:	2330      	movle	r3, #48	; 0x30
    1f9a:	f805 3c01 	strble.w	r3, [r5, #-1]
    1f9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    1fa2:	ebac 0305 	sub.w	r3, ip, r5
    1fa6:	6123      	str	r3, [r4, #16]
    1fa8:	f8cd 8000 	str.w	r8, [sp]
    1fac:	463b      	mov	r3, r7
    1fae:	aa03      	add	r2, sp, #12
    1fb0:	4621      	mov	r1, r4
    1fb2:	4630      	mov	r0, r6
    1fb4:	f7ff fef6 	bl	1da4 <_printf_common>
    1fb8:	3001      	adds	r0, #1
    1fba:	d14d      	bne.n	2058 <_printf_i+0x1c8>
    1fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1fc0:	b005      	add	sp, #20
    1fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fc6:	4839      	ldr	r0, [pc, #228]	; (20ac <_printf_i+0x21c>)
    1fc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    1fcc:	6813      	ldr	r3, [r2, #0]
    1fce:	6821      	ldr	r1, [r4, #0]
    1fd0:	1d1d      	adds	r5, r3, #4
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	6015      	str	r5, [r2, #0]
    1fd6:	060a      	lsls	r2, r1, #24
    1fd8:	d50b      	bpl.n	1ff2 <_printf_i+0x162>
    1fda:	07ca      	lsls	r2, r1, #31
    1fdc:	bf44      	itt	mi
    1fde:	f041 0120 	orrmi.w	r1, r1, #32
    1fe2:	6021      	strmi	r1, [r4, #0]
    1fe4:	b91b      	cbnz	r3, 1fee <_printf_i+0x15e>
    1fe6:	6822      	ldr	r2, [r4, #0]
    1fe8:	f022 0220 	bic.w	r2, r2, #32
    1fec:	6022      	str	r2, [r4, #0]
    1fee:	2210      	movs	r2, #16
    1ff0:	e7b7      	b.n	1f62 <_printf_i+0xd2>
    1ff2:	064d      	lsls	r5, r1, #25
    1ff4:	bf48      	it	mi
    1ff6:	b29b      	uxthmi	r3, r3
    1ff8:	e7ef      	b.n	1fda <_printf_i+0x14a>
    1ffa:	4665      	mov	r5, ip
    1ffc:	fbb3 f1f2 	udiv	r1, r3, r2
    2000:	fb02 3311 	mls	r3, r2, r1, r3
    2004:	5cc3      	ldrb	r3, [r0, r3]
    2006:	f805 3d01 	strb.w	r3, [r5, #-1]!
    200a:	460b      	mov	r3, r1
    200c:	2900      	cmp	r1, #0
    200e:	d1f5      	bne.n	1ffc <_printf_i+0x16c>
    2010:	e7b9      	b.n	1f86 <_printf_i+0xf6>
    2012:	6813      	ldr	r3, [r2, #0]
    2014:	6825      	ldr	r5, [r4, #0]
    2016:	1d18      	adds	r0, r3, #4
    2018:	6961      	ldr	r1, [r4, #20]
    201a:	6010      	str	r0, [r2, #0]
    201c:	0628      	lsls	r0, r5, #24
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	d501      	bpl.n	2026 <_printf_i+0x196>
    2022:	6019      	str	r1, [r3, #0]
    2024:	e002      	b.n	202c <_printf_i+0x19c>
    2026:	066a      	lsls	r2, r5, #25
    2028:	d5fb      	bpl.n	2022 <_printf_i+0x192>
    202a:	8019      	strh	r1, [r3, #0]
    202c:	2300      	movs	r3, #0
    202e:	4665      	mov	r5, ip
    2030:	6123      	str	r3, [r4, #16]
    2032:	e7b9      	b.n	1fa8 <_printf_i+0x118>
    2034:	6813      	ldr	r3, [r2, #0]
    2036:	1d19      	adds	r1, r3, #4
    2038:	6011      	str	r1, [r2, #0]
    203a:	681d      	ldr	r5, [r3, #0]
    203c:	6862      	ldr	r2, [r4, #4]
    203e:	2100      	movs	r1, #0
    2040:	4628      	mov	r0, r5
    2042:	f000 f8e1 	bl	2208 <memchr>
    2046:	b108      	cbz	r0, 204c <_printf_i+0x1bc>
    2048:	1b40      	subs	r0, r0, r5
    204a:	6060      	str	r0, [r4, #4]
    204c:	6863      	ldr	r3, [r4, #4]
    204e:	6123      	str	r3, [r4, #16]
    2050:	2300      	movs	r3, #0
    2052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    2056:	e7a7      	b.n	1fa8 <_printf_i+0x118>
    2058:	6923      	ldr	r3, [r4, #16]
    205a:	462a      	mov	r2, r5
    205c:	4639      	mov	r1, r7
    205e:	4630      	mov	r0, r6
    2060:	47c0      	blx	r8
    2062:	3001      	adds	r0, #1
    2064:	d0aa      	beq.n	1fbc <_printf_i+0x12c>
    2066:	6823      	ldr	r3, [r4, #0]
    2068:	079b      	lsls	r3, r3, #30
    206a:	d413      	bmi.n	2094 <_printf_i+0x204>
    206c:	68e0      	ldr	r0, [r4, #12]
    206e:	9b03      	ldr	r3, [sp, #12]
    2070:	4298      	cmp	r0, r3
    2072:	bfb8      	it	lt
    2074:	4618      	movlt	r0, r3
    2076:	e7a3      	b.n	1fc0 <_printf_i+0x130>
    2078:	2301      	movs	r3, #1
    207a:	464a      	mov	r2, r9
    207c:	4639      	mov	r1, r7
    207e:	4630      	mov	r0, r6
    2080:	47c0      	blx	r8
    2082:	3001      	adds	r0, #1
    2084:	d09a      	beq.n	1fbc <_printf_i+0x12c>
    2086:	3501      	adds	r5, #1
    2088:	68e3      	ldr	r3, [r4, #12]
    208a:	9a03      	ldr	r2, [sp, #12]
    208c:	1a9b      	subs	r3, r3, r2
    208e:	42ab      	cmp	r3, r5
    2090:	dcf2      	bgt.n	2078 <_printf_i+0x1e8>
    2092:	e7eb      	b.n	206c <_printf_i+0x1dc>
    2094:	2500      	movs	r5, #0
    2096:	f104 0919 	add.w	r9, r4, #25
    209a:	e7f5      	b.n	2088 <_printf_i+0x1f8>
    209c:	2b00      	cmp	r3, #0
    209e:	d1ac      	bne.n	1ffa <_printf_i+0x16a>
    20a0:	7803      	ldrb	r3, [r0, #0]
    20a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    20a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    20aa:	e76c      	b.n	1f86 <_printf_i+0xf6>
    20ac:	00002801 	.word	0x00002801
    20b0:	00002812 	.word	0x00002812

000020b4 <_sbrk_r>:
    20b4:	b538      	push	{r3, r4, r5, lr}
    20b6:	2300      	movs	r3, #0
    20b8:	4c05      	ldr	r4, [pc, #20]	; (20d0 <_sbrk_r+0x1c>)
    20ba:	4605      	mov	r5, r0
    20bc:	4608      	mov	r0, r1
    20be:	6023      	str	r3, [r4, #0]
    20c0:	f000 f8ec 	bl	229c <_sbrk>
    20c4:	1c43      	adds	r3, r0, #1
    20c6:	d102      	bne.n	20ce <_sbrk_r+0x1a>
    20c8:	6823      	ldr	r3, [r4, #0]
    20ca:	b103      	cbz	r3, 20ce <_sbrk_r+0x1a>
    20cc:	602b      	str	r3, [r5, #0]
    20ce:	bd38      	pop	{r3, r4, r5, pc}
    20d0:	20000090 	.word	0x20000090

000020d4 <__sread>:
    20d4:	b510      	push	{r4, lr}
    20d6:	460c      	mov	r4, r1
    20d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    20dc:	f000 f8a4 	bl	2228 <_read_r>
    20e0:	2800      	cmp	r0, #0
    20e2:	bfab      	itete	ge
    20e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    20e6:	89a3      	ldrhlt	r3, [r4, #12]
    20e8:	181b      	addge	r3, r3, r0
    20ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    20ee:	bfac      	ite	ge
    20f0:	6563      	strge	r3, [r4, #84]	; 0x54
    20f2:	81a3      	strhlt	r3, [r4, #12]
    20f4:	bd10      	pop	{r4, pc}

000020f6 <__swrite>:
    20f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20fa:	461f      	mov	r7, r3
    20fc:	898b      	ldrh	r3, [r1, #12]
    20fe:	4605      	mov	r5, r0
    2100:	05db      	lsls	r3, r3, #23
    2102:	460c      	mov	r4, r1
    2104:	4616      	mov	r6, r2
    2106:	d505      	bpl.n	2114 <__swrite+0x1e>
    2108:	2302      	movs	r3, #2
    210a:	2200      	movs	r2, #0
    210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2110:	f000 f868 	bl	21e4 <_lseek_r>
    2114:	89a3      	ldrh	r3, [r4, #12]
    2116:	4632      	mov	r2, r6
    2118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    211c:	81a3      	strh	r3, [r4, #12]
    211e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2122:	463b      	mov	r3, r7
    2124:	4628      	mov	r0, r5
    2126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    212a:	f000 b817 	b.w	215c <_write_r>

0000212e <__sseek>:
    212e:	b510      	push	{r4, lr}
    2130:	460c      	mov	r4, r1
    2132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2136:	f000 f855 	bl	21e4 <_lseek_r>
    213a:	1c43      	adds	r3, r0, #1
    213c:	89a3      	ldrh	r3, [r4, #12]
    213e:	bf15      	itete	ne
    2140:	6560      	strne	r0, [r4, #84]	; 0x54
    2142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    214a:	81a3      	strheq	r3, [r4, #12]
    214c:	bf18      	it	ne
    214e:	81a3      	strhne	r3, [r4, #12]
    2150:	bd10      	pop	{r4, pc}

00002152 <__sclose>:
    2152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2156:	f000 b813 	b.w	2180 <_close_r>
	...

0000215c <_write_r>:
    215c:	b538      	push	{r3, r4, r5, lr}
    215e:	4605      	mov	r5, r0
    2160:	4608      	mov	r0, r1
    2162:	4611      	mov	r1, r2
    2164:	2200      	movs	r2, #0
    2166:	4c05      	ldr	r4, [pc, #20]	; (217c <_write_r+0x20>)
    2168:	6022      	str	r2, [r4, #0]
    216a:	461a      	mov	r2, r3
    216c:	f7fe fbca 	bl	904 <_write>
    2170:	1c43      	adds	r3, r0, #1
    2172:	d102      	bne.n	217a <_write_r+0x1e>
    2174:	6823      	ldr	r3, [r4, #0]
    2176:	b103      	cbz	r3, 217a <_write_r+0x1e>
    2178:	602b      	str	r3, [r5, #0]
    217a:	bd38      	pop	{r3, r4, r5, pc}
    217c:	20000090 	.word	0x20000090

00002180 <_close_r>:
    2180:	b538      	push	{r3, r4, r5, lr}
    2182:	2300      	movs	r3, #0
    2184:	4c05      	ldr	r4, [pc, #20]	; (219c <_close_r+0x1c>)
    2186:	4605      	mov	r5, r0
    2188:	4608      	mov	r0, r1
    218a:	6023      	str	r3, [r4, #0]
    218c:	f000 f85e 	bl	224c <_close>
    2190:	1c43      	adds	r3, r0, #1
    2192:	d102      	bne.n	219a <_close_r+0x1a>
    2194:	6823      	ldr	r3, [r4, #0]
    2196:	b103      	cbz	r3, 219a <_close_r+0x1a>
    2198:	602b      	str	r3, [r5, #0]
    219a:	bd38      	pop	{r3, r4, r5, pc}
    219c:	20000090 	.word	0x20000090

000021a0 <_fstat_r>:
    21a0:	b538      	push	{r3, r4, r5, lr}
    21a2:	2300      	movs	r3, #0
    21a4:	4c06      	ldr	r4, [pc, #24]	; (21c0 <_fstat_r+0x20>)
    21a6:	4605      	mov	r5, r0
    21a8:	4608      	mov	r0, r1
    21aa:	4611      	mov	r1, r2
    21ac:	6023      	str	r3, [r4, #0]
    21ae:	f000 f855 	bl	225c <_fstat>
    21b2:	1c43      	adds	r3, r0, #1
    21b4:	d102      	bne.n	21bc <_fstat_r+0x1c>
    21b6:	6823      	ldr	r3, [r4, #0]
    21b8:	b103      	cbz	r3, 21bc <_fstat_r+0x1c>
    21ba:	602b      	str	r3, [r5, #0]
    21bc:	bd38      	pop	{r3, r4, r5, pc}
    21be:	bf00      	nop
    21c0:	20000090 	.word	0x20000090

000021c4 <_isatty_r>:
    21c4:	b538      	push	{r3, r4, r5, lr}
    21c6:	2300      	movs	r3, #0
    21c8:	4c05      	ldr	r4, [pc, #20]	; (21e0 <_isatty_r+0x1c>)
    21ca:	4605      	mov	r5, r0
    21cc:	4608      	mov	r0, r1
    21ce:	6023      	str	r3, [r4, #0]
    21d0:	f000 f84c 	bl	226c <_isatty>
    21d4:	1c43      	adds	r3, r0, #1
    21d6:	d102      	bne.n	21de <_isatty_r+0x1a>
    21d8:	6823      	ldr	r3, [r4, #0]
    21da:	b103      	cbz	r3, 21de <_isatty_r+0x1a>
    21dc:	602b      	str	r3, [r5, #0]
    21de:	bd38      	pop	{r3, r4, r5, pc}
    21e0:	20000090 	.word	0x20000090

000021e4 <_lseek_r>:
    21e4:	b538      	push	{r3, r4, r5, lr}
    21e6:	4605      	mov	r5, r0
    21e8:	4608      	mov	r0, r1
    21ea:	4611      	mov	r1, r2
    21ec:	2200      	movs	r2, #0
    21ee:	4c05      	ldr	r4, [pc, #20]	; (2204 <_lseek_r+0x20>)
    21f0:	6022      	str	r2, [r4, #0]
    21f2:	461a      	mov	r2, r3
    21f4:	f000 f842 	bl	227c <_lseek>
    21f8:	1c43      	adds	r3, r0, #1
    21fa:	d102      	bne.n	2202 <_lseek_r+0x1e>
    21fc:	6823      	ldr	r3, [r4, #0]
    21fe:	b103      	cbz	r3, 2202 <_lseek_r+0x1e>
    2200:	602b      	str	r3, [r5, #0]
    2202:	bd38      	pop	{r3, r4, r5, pc}
    2204:	20000090 	.word	0x20000090

00002208 <memchr>:
    2208:	b510      	push	{r4, lr}
    220a:	b2c9      	uxtb	r1, r1
    220c:	4402      	add	r2, r0
    220e:	4290      	cmp	r0, r2
    2210:	4603      	mov	r3, r0
    2212:	d101      	bne.n	2218 <memchr+0x10>
    2214:	2300      	movs	r3, #0
    2216:	e003      	b.n	2220 <memchr+0x18>
    2218:	781c      	ldrb	r4, [r3, #0]
    221a:	3001      	adds	r0, #1
    221c:	428c      	cmp	r4, r1
    221e:	d1f6      	bne.n	220e <memchr+0x6>
    2220:	4618      	mov	r0, r3
    2222:	bd10      	pop	{r4, pc}

00002224 <__malloc_lock>:
    2224:	4770      	bx	lr

00002226 <__malloc_unlock>:
    2226:	4770      	bx	lr

00002228 <_read_r>:
    2228:	b538      	push	{r3, r4, r5, lr}
    222a:	4605      	mov	r5, r0
    222c:	4608      	mov	r0, r1
    222e:	4611      	mov	r1, r2
    2230:	2200      	movs	r2, #0
    2232:	4c05      	ldr	r4, [pc, #20]	; (2248 <_read_r+0x20>)
    2234:	6022      	str	r2, [r4, #0]
    2236:	461a      	mov	r2, r3
    2238:	f000 f828 	bl	228c <_read>
    223c:	1c43      	adds	r3, r0, #1
    223e:	d102      	bne.n	2246 <_read_r+0x1e>
    2240:	6823      	ldr	r3, [r4, #0]
    2242:	b103      	cbz	r3, 2246 <_read_r+0x1e>
    2244:	602b      	str	r3, [r5, #0]
    2246:	bd38      	pop	{r3, r4, r5, pc}
    2248:	20000090 	.word	0x20000090

0000224c <_close>:
    224c:	2258      	movs	r2, #88	; 0x58
    224e:	4b02      	ldr	r3, [pc, #8]	; (2258 <_close+0xc>)
    2250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2254:	601a      	str	r2, [r3, #0]
    2256:	4770      	bx	lr
    2258:	20000090 	.word	0x20000090

0000225c <_fstat>:
    225c:	2258      	movs	r2, #88	; 0x58
    225e:	4b02      	ldr	r3, [pc, #8]	; (2268 <_fstat+0xc>)
    2260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2264:	601a      	str	r2, [r3, #0]
    2266:	4770      	bx	lr
    2268:	20000090 	.word	0x20000090

0000226c <_isatty>:
    226c:	2258      	movs	r2, #88	; 0x58
    226e:	4b02      	ldr	r3, [pc, #8]	; (2278 <_isatty+0xc>)
    2270:	2000      	movs	r0, #0
    2272:	601a      	str	r2, [r3, #0]
    2274:	4770      	bx	lr
    2276:	bf00      	nop
    2278:	20000090 	.word	0x20000090

0000227c <_lseek>:
    227c:	2258      	movs	r2, #88	; 0x58
    227e:	4b02      	ldr	r3, [pc, #8]	; (2288 <_lseek+0xc>)
    2280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2284:	601a      	str	r2, [r3, #0]
    2286:	4770      	bx	lr
    2288:	20000090 	.word	0x20000090

0000228c <_read>:
    228c:	2258      	movs	r2, #88	; 0x58
    228e:	4b02      	ldr	r3, [pc, #8]	; (2298 <_read+0xc>)
    2290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2294:	601a      	str	r2, [r3, #0]
    2296:	4770      	bx	lr
    2298:	20000090 	.word	0x20000090

0000229c <_sbrk>:
    229c:	4a04      	ldr	r2, [pc, #16]	; (22b0 <_sbrk+0x14>)
    229e:	4905      	ldr	r1, [pc, #20]	; (22b4 <_sbrk+0x18>)
    22a0:	6813      	ldr	r3, [r2, #0]
    22a2:	2b00      	cmp	r3, #0
    22a4:	bf08      	it	eq
    22a6:	460b      	moveq	r3, r1
    22a8:	4418      	add	r0, r3
    22aa:	6010      	str	r0, [r2, #0]
    22ac:	4618      	mov	r0, r3
    22ae:	4770      	bx	lr
    22b0:	2000007c 	.word	0x2000007c
    22b4:	20000098 	.word	0x20000098

000022b8 <_exit>:
    22b8:	e7fe      	b.n	22b8 <_exit>
    22ba:	bf00      	nop

000022bc <_init>:
    22bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22be:	bf00      	nop

000022c0 <_fini>:
    22c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22c2:	bf00      	nop

000022c4 <str_tx>:
    22c4:	6568 6c6c 206f 6f77 6c72 0064               hello world.

000022d0 <uart_str_length>:
    22d0:	000b 0000 0a0a 5249 4e51 4d55 203a 7525     ......IRQNUM: %u
    22e0:	202c 7865 6570 7463 6465 2520 0964 4146     , expected %d.FA
    22f0:	4c49 0a0a 0000 0000 0a0a 5249 4e51 4d55     IL........IRQNUM
    2300:	203a 7525 0909 4150 5353 0a0a 0000 0000     : %u..PASS......
    2310:	0a0a 000a 2a2b 2a2a 2a2a 2a2a 2a2a 2a2a     ....+***********
    2320:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 002b     **************+.
    2330:	202a 2020 2020 2020 2020 2020 2020 2020     *               
    2340:	2020 2020 2020 2020 2020 002a 202a 5420               *.*  T
    2350:	6d69 7265 2030 6e49 6574 7272 7075 2074     imer0 Interrupt 
    2360:	6564 6f6d 2020 002a 2a2b 2a2a 2a2a 2a2a     demo  *.+*******
    2370:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    2380:	2a2a 0a2b 000a 0000 2020 5420 6d69 7265     **+.....   Timer
    2390:	7420 7365 2074 6f64 656e 0000 202a 2020      test done..*   
    23a0:	4155 5452 4920 746e 7265 7572 7470 6420     UART Interrupt d
    23b0:	6d65 206f 2020 002a 7254 6e61 6d73 7469     emo   *.Transmit
    23c0:	6d20 7365 6173 6567 3a20 2520 0a73 0000      message : %s...
    23d0:	6552 6563 7669 6465 6d20 7365 6173 6567     Received message
    23e0:	3a20 2520 0a73 0000 202a 4720 4950 204f      : %s...*  GPIO 
    23f0:	4f50 5452 3a30 4920 746e 7265 7572 7470     PORT0: Interrupt
    2400:	2020 002a 202a 2020 2020 2020 2020 7845       *.*         Ex
    2410:	6d61 6c70 2065 2020 2020 2020 2020 002a     ample         *.
    2420:	6f4e 2074 6c61 206c 666f 4920 5152 255b     Not all of IRQ[%
    2430:	2064 6f74 2520 5d64 6120 6572 6120 6176     d to %d] are ava
    2440:	6c69 6261 656c 0a2e 7355 2065 6f63 626d     ilable..Use comb
    2450:	6e69 6465 4720 4950 204f 6e69 6574 7272     ined GPIO interr
    2460:	7075 2074 6f66 2072 6574 7473 0a0a 0000     upt for test....
    2470:	2020 2020 2e2e 542e 7365 2074 5047 4f49         ...Test GPIO
    2480:	5b30 5d37 2e2e 0a2e 0000 0000 2020 2020     0[7]........    
    2490:	2020 6948 6867 4c20 7665 6c65 4920 5152       High Level IRQ
    24a0:	0a3a 2020 2020 4420 7465 6365 6574 2064     :.     Detected 
    24b0:	6e4f 5020 6e69 3720 0a0a 0000 2020 2020     On Pin 7....    
    24c0:	2e2e 542e 7365 2074 5047 4f49 5b30 5d38     ...Test GPIO0[8]
    24d0:	2e2e 0a2e 0000 0000 2020 2020 2020 4c20     ........       L
    24e0:	776f 4c20 7665 6c65 4920 5152 200a 2020     ow Level IRQ.   
    24f0:	2020 6544 6574 7463 6465 4f20 206e 6950       Detected On Pi
    2500:	206e 0a38 000a 0000 2020 2020 2e2e 542e     n 8.....    ...T
    2510:	7365 2074 5047 4f49 5b30 5d39 2e2e 0a2e     est GPIO0[9]....
    2520:	0000 0000 2020 2020 2020 6952 6973 676e     ....      Rising
    2530:	4520 6764 2065 5249 0a51 2020 2020 4420      Edge IRQ.     D
    2540:	7465 6365 6574 2064 6e4f 5020 6e69 3920     etected On Pin 9
    2550:	0a0a 0000 2020 2020 2e2e 542e 7365 2074     ....    ...Test 
    2560:	5047 4f49 5b30 3031 2e5d 2e2e 000a 0000     GPIO0[10].......
    2570:	2020 2020 4620 6c61 696c 676e 4520 6764          Falling Edg
    2580:	2065 5249 3a51 200a 2020 2020 6544 6574     e IRQ:.     Dete
    2590:	7463 6465 4f20 206e 6950 206e 3031 0a0a     cted On Pin 10..
    25a0:	0000 0000 2020 2020 6c41 206c 6425 4920     ....    All %d I
    25b0:	5152 2073 6544 6574 7463 6465 0a0a 0000     RQs Detected....
    25c0:	2b20 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a      +**************
    25d0:	2a2a 2a2a 2a2a 2a2a 2b2a 0000 2a20 2020     *********+.. *  
    25e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
    25f0:	2020 2020 2a20 0000 2a20 2020 4720 4950          *.. *   GPI
    2600:	204f 2030 5249 2051 6554 7473 2073 2020     O 0 IRQ Tests   
    2610:	2a20 0000 2a20 2020 6150 7373 6465 5320      *.. *  Passed S
    2620:	6375 6563 7373 7566 6c6c 2079 2a20 0000     uccessfully  *..
    2630:	2b20 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a      +**************
    2640:	2a2a 2a2a 2a2a 2a2a 2b2a 000a 2a0a 202a     *********+...** 
    2650:	4554 5453 4620 4941 454c 2044 2a2a 4920     TEST FAILED ** I
    2660:	5152 5420 7365 7374 4520 7272 726f 4320     RQ Tests Error C
    2670:	646f 3a65 2820 7830 7825 000a 430a 726f     ode: (0x%x...Cor
    2680:	6574 2d78 334d 4420 7365 6769 536e 6174     tex-M3 DesignSta
    2690:	7472 2d20 4920 746e 7265 7572 7470 4420     rt - Interrupt D
    26a0:	6d65 206f 202d 6572 6976 6973 6e6f 2420     emo - revision $
    26b0:	6552 6976 6973 6e6f 203a 3432 3233 3934     Revision: 243249
    26c0:	2420 000a 6954 656d 2072 2030 6f6e 2074      $..Timer 0 not 
    26d0:	7270 7365 6e65 2e74 5420 6d69 7265 7845     present. TimerEx
    26e0:	6d61 6c70 2065 6b73 7069 6570 2e64 0000     ample skipped...
    26f0:	5047 4f49 3020 6e20 746f 7020 6572 6573     GPIO 0 not prese
    2700:	746e 202e 5047 4f49 6e49 4574 6178 706d     nt. GPIOIntExamp
    2710:	656c 7320 696b 7070 6465 002e 4155 5452     le skipped..UART
    2720:	3220 6f20 2072 4155 5452 3320 6e20 746f      2 or UART 3 not
    2730:	7020 6572 6573 746e 202e 6155 7472 7845      present. UartEx
    2740:	6d61 6c70 2065 6b73 7069 6570 2e64 0000     ample skipped...
    2750:	2a2a 5420 5345 2054 4150 5353 4445 2a20     ** TEST PASSED *
    2760:	202a 000a 2a2a 5420 5345 2054 4146 4c49     * ..** TEST FAIL
    2770:	4445 2a20 202a 000a 2020 5b20 6954 656d     ED ** ..   [Time
    2780:	2072 2030 5249 5d51 0000 0000               r 0 IRQ]....

0000278c <_global_impure_ptr>:
    278c:	0008 2000                                   ... 

00002790 <__sf_fake_stderr>:
	...

000027b0 <__sf_fake_stdin>:
	...

000027d0 <__sf_fake_stdout>:
	...
    27f0:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    2800:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    2810:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    2820:	6665                                         ef.
