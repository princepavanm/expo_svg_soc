apb_mux_tests.c:  puts("\nCortex-M3 DesignStart - APB slave mux test - revision $Revision: 243193 $\n");
apb_mux_tests.c:  puts(" - Detecting if default peripherals are present ...\n");
apb_mux_tests.c:  puts ("0: timer 0");
apb_mux_tests.c:  puts ("1: timer 1");
apb_mux_tests.c:  puts ("2: dual timer");
apb_mux_tests.c:  puts ("3: blank");
apb_mux_tests.c:  puts ("4: UART 0");
apb_mux_tests.c:  puts ("5: UART 1");
apb_mux_tests.c:  puts ("6: RTC");
apb_mux_tests.c:  puts ("7: blank");
apb_mux_tests.c:  puts ("8: Watchdog");
apb_mux_tests.c:  puts ("9: blank");
apb_mux_tests.c:  puts ("10: blank");
apb_mux_tests.c:  puts ("11: blank");
apb_mux_tests.c:  puts ("12: APB expansion port 12");
apb_mux_tests.c:  puts ("13: APB expansion port 13");
apb_mux_tests.c:  puts ("14: APB expansion port 14");
apb_mux_tests.c:  puts ("15: TRNG"); // read TRNG version register
apb_mux_tests.c:      puts ("  Version register matched   : device present\n");
apb_mux_tests.c:        puts ("  All ID values are 0   : device not present\n");
apb_mux_tests.c:        puts ("  ID value mismatch(es) : device unknown\n");
apb_mux_tests.c:        puts ("  All ID values matched : device present\n");
apb_mux_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
apb_mux_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
default_slaves_tests.c:  puts("\nCortex-M3 DesignStart - Default Slave Test - revision $Revision: 243193 $\n");
default_slaves_tests.c:  puts("Default slave tests - hard faults expected\n");
default_slaves_tests.c:  puts ("[Hard Fault Handler]");
default_slaves_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
gpio_driver_tests.c:  puts("Cortex-M3 DesignStart - GPIO Driver Test - revision $Revision: 242484 $\n");
gpio_driver_tests.c:    puts ("GPIO 0 not present. Test skipped.");
gpio_driver_tests.c:    puts("** TEST PASSED **\n");
gpio_driver_tests.c:  puts("Stage 1 - GPIO Output Enable Test\n");
gpio_driver_tests.c:  puts("- Stage 1a - Set GPIO Output Enable\n");
gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");
gpio_driver_tests.c:  puts("- Stage 1b - Clear GPIO Output Enable\n");
gpio_driver_tests.c:  else puts("Clear Output Enable Test Passed\n");
gpio_driver_tests.c:    - NOTE: it is these exact combinations as only AltFunc outputs can be set in the AltFunc register
gpio_driver_tests.c:            as inputs have no effect as they are just routed to two places and pins without an AltFunc
gpio_driver_tests.c:  puts("Stage 2 - GPIO Alternative Function Enable Test\n");
gpio_driver_tests.c:  puts("- Stage 2a - Set GPIO Alternative Function Enable\n");
gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");    //if the port did not set the AltFunc as expected display error*/
gpio_driver_tests.c:  puts("- Stage 2b - Clear GPIO Alternative Function Enable\n");
gpio_driver_tests.c:  else puts("Clear Enable Test Passed\n");  /*if the port did not clear the AltFunc as expected display error*/
gpio_driver_tests.c:  puts("Stage 3 - GPIO Pin IRQ Test\n");
gpio_driver_tests.c:  puts("- Stage 3a - GPIO High Level IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("High Level IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 3b - GPIO Rising Edge IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Rising Edge IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 3c - GPIO Falling Edge IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Falling Edge IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 3d - GPIO Low Level IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Low Level IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("Stage 4 - GPIO Masked Output Test\n");
gpio_driver_tests.c:  puts("- Stage 4a - GPIO Masked Output - Deterministic Test\n");
gpio_driver_tests.c:  if(!err_code) puts("Stage 4a Deterministic Masked Output Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 4b - GPIO Masked Output - Random Test\n");
gpio_driver_tests.c:  if(!err_code) puts("Stage 4b Random Masked Output Tests Passed Successfully\n");
gpio_driver_tests.c:  if(!err_code_all) puts("\nAll Masked Output Tests Passed Successfully\n");
gpio_tests.c:  puts("Cortex-M3 DesignStart - GPIO Test - revision $Revision: 243249 $\n");
gpio_tests.c:  puts("1) GPIO 0");
gpio_tests.c:    puts ("- GPIO #0 not present. Tests skipped.");
gpio_tests.c:  puts("\n2) GPIO 1");
gpio_tests.c:    puts ("- GPIO #1 not present. Tests skipped.");
gpio_tests.c:  puts("\n3) GPIO 2");
gpio_tests.c:    puts ("- GPIO #2 not present. Tests skipped.");
gpio_tests.c:  puts("\n3) GPIO 3");
gpio_tests.c:    puts ("- GPIO #3 not present. Tests skipped.");
gpio_tests.c:    puts ("- GPIO #4 not present. Tests skipped.");
gpio_tests.c:    puts ("- GPIO #5 not present. Tests skipped.");
gpio_tests.c:  puts("GPIO mask access test");
gpio_tests.c:  puts("- lower byte");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_masked_access_test'.");
gpio_tests.c:      puts("Lower Byte Mask Access Tests Passed\n");
gpio_tests.c:      puts("Lower Byte Mask Access Tests Failed\n");
gpio_tests.c:  puts("- upper byte");
gpio_tests.c:      puts("Upper Byte Mask Access Tests Passed\n");
gpio_tests.c:      puts("Upper Byte Mask Access Tests Failed\n");
gpio_tests.c:    else puts("Mask Access Tests Passed\n");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_register_rw_test'.");
gpio_tests.c:  puts("GPIO R/W test");
gpio_tests.c:  puts("- initial values");
gpio_tests.c:  puts ("- check ID values (WORD accesses)");
gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, lower) - should have no effect");
gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, lower)");
gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, upper) - should have no effect");
gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, upper)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 0) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 0)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 1) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 1)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 2) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 2)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 3) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 3)");
gpio_tests.c:  puts("- read/write");
gpio_tests.c:  puts("- INTSTATUS/INTCLEAR r/w");
gpio_tests.c:    puts("Less then 32 IRQ in design\n");
gpio_tests.c:  else puts("Register Read/Write Test Passed");
gpio_tests.c:  puts("GPIO Unused address test");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_unused_addresses_test'.");
gpio_tests.c:  else puts("- Unused addresses Test Passed");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_interrupt_test'.");
gpio_tests.c:  puts("GPIO interrupt test");
gpio_tests.c:      puts("Interrupt PORT0_ALL_IRQn not available.");
gpio_tests.c:      puts("Interrupt PORT1_ALL_IRQn not available.");
gpio_tests.c:      puts("Interrupt PORT2_ALL_IRQn not available.");
gpio_tests.c:      puts("Interrupt PORT3_ALL_IRQn not available.");
gpio_tests.c:    puts("Less then 32 IRQ in design\n");
gpio_tests.c:    else puts("Interrupt Test Passed");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 1 interrupt occurred.\n");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 2 interrupt occurred.\n");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 3 interrupt occurred.\n");
log:apb_mux_tests.c:  puts("\nCortex-M3 DesignStart - APB slave mux test - revision $Revision: 243193 $\n");
log:apb_mux_tests.c:  puts(" - Detecting if default peripherals are present ...\n");
log:apb_mux_tests.c:  puts ("0: timer 0");
log:apb_mux_tests.c:  puts ("1: timer 1");
log:apb_mux_tests.c:  puts ("2: dual timer");
log:apb_mux_tests.c:  puts ("3: blank");
log:apb_mux_tests.c:  puts ("4: UART 0");
log:apb_mux_tests.c:  puts ("5: UART 1");
log:apb_mux_tests.c:  puts ("6: RTC");
log:apb_mux_tests.c:  puts ("7: blank");
log:apb_mux_tests.c:  puts ("8: Watchdog");
log:apb_mux_tests.c:  puts ("9: blank");
log:apb_mux_tests.c:  puts ("10: blank");
log:apb_mux_tests.c:  puts ("11: blank");
log:apb_mux_tests.c:  puts ("12: APB expansion port 12");
log:apb_mux_tests.c:  puts ("13: APB expansion port 13");
log:apb_mux_tests.c:  puts ("14: APB expansion port 14");
log:apb_mux_tests.c:  puts ("15: TRNG"); // read TRNG version register
log:apb_mux_tests.c:      puts ("  Version register matched   : device present\n");
log:apb_mux_tests.c:        puts ("  All ID values are 0   : device not present\n");
log:apb_mux_tests.c:        puts ("  ID value mismatch(es) : device unknown\n");
log:apb_mux_tests.c:        puts ("  All ID values matched : device present\n");
log:apb_mux_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
log:apb_mux_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
log:default_slaves_tests.c:  puts("\nCortex-M3 DesignStart - Default Slave Test - revision $Revision: 243193 $\n");
log:default_slaves_tests.c:  puts("Default slave tests - hard faults expected\n");
log:default_slaves_tests.c:  puts ("[Hard Fault Handler]");
log:default_slaves_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
log:gpio_driver_tests.c:  puts("Cortex-M3 DesignStart - GPIO Driver Test - revision $Revision: 242484 $\n");
log:gpio_driver_tests.c:    puts ("GPIO 0 not present. Test skipped.");
log:gpio_driver_tests.c:    puts("** TEST PASSED **\n");
log:gpio_driver_tests.c:  puts("Stage 1 - GPIO Output Enable Test\n");
log:gpio_driver_tests.c:  puts("- Stage 1a - Set GPIO Output Enable\n");
log:gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");
log:gpio_driver_tests.c:  puts("- Stage 1b - Clear GPIO Output Enable\n");
log:gpio_driver_tests.c:  else puts("Clear Output Enable Test Passed\n");
log:gpio_driver_tests.c:    - NOTE: it is these exact combinations as only AltFunc outputs can be set in the AltFunc register
log:gpio_driver_tests.c:            as inputs have no effect as they are just routed to two places and pins without an AltFunc
log:gpio_driver_tests.c:  puts("Stage 2 - GPIO Alternative Function Enable Test\n");
log:gpio_driver_tests.c:  puts("- Stage 2a - Set GPIO Alternative Function Enable\n");
log:gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");    //if the port did not set the AltFunc as expected display error*/
log:gpio_driver_tests.c:  puts("- Stage 2b - Clear GPIO Alternative Function Enable\n");
log:gpio_driver_tests.c:  else puts("Clear Enable Test Passed\n");  /*if the port did not clear the AltFunc as expected display error*/
log:gpio_driver_tests.c:  puts("Stage 3 - GPIO Pin IRQ Test\n");
log:gpio_driver_tests.c:  puts("- Stage 3a - GPIO High Level IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("High Level IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 3b - GPIO Rising Edge IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Rising Edge IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 3c - GPIO Falling Edge IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Falling Edge IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 3d - GPIO Low Level IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Low Level IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("Stage 4 - GPIO Masked Output Test\n");
log:gpio_driver_tests.c:  puts("- Stage 4a - GPIO Masked Output - Deterministic Test\n");
log:gpio_driver_tests.c:  if(!err_code) puts("Stage 4a Deterministic Masked Output Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 4b - GPIO Masked Output - Random Test\n");
log:gpio_driver_tests.c:  if(!err_code) puts("Stage 4b Random Masked Output Tests Passed Successfully\n");
log:gpio_driver_tests.c:  if(!err_code_all) puts("\nAll Masked Output Tests Passed Successfully\n");
log:gpio_tests.c:  puts("Cortex-M3 DesignStart - GPIO Test - revision $Revision: 243249 $\n");
log:gpio_tests.c:  puts("1) GPIO 0");
log:gpio_tests.c:    puts ("- GPIO #0 not present. Tests skipped.");
log:gpio_tests.c:  puts("\n2) GPIO 1");
log:gpio_tests.c:    puts ("- GPIO #1 not present. Tests skipped.");
log:gpio_tests.c:  puts("\n3) GPIO 2");
log:gpio_tests.c:    puts ("- GPIO #2 not present. Tests skipped.");
log:gpio_tests.c:  puts("\n3) GPIO 3");
log:gpio_tests.c:    puts ("- GPIO #3 not present. Tests skipped.");
log:gpio_tests.c:    puts ("- GPIO #4 not present. Tests skipped.");
log:gpio_tests.c:    puts ("- GPIO #5 not present. Tests skipped.");
log:gpio_tests.c:  puts("GPIO mask access test");
log:gpio_tests.c:  puts("- lower byte");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_masked_access_test'.");
log:gpio_tests.c:      puts("Lower Byte Mask Access Tests Passed\n");
log:gpio_tests.c:      puts("Lower Byte Mask Access Tests Failed\n");
log:gpio_tests.c:  puts("- upper byte");
log:gpio_tests.c:      puts("Upper Byte Mask Access Tests Passed\n");
log:gpio_tests.c:      puts("Upper Byte Mask Access Tests Failed\n");
log:gpio_tests.c:    else puts("Mask Access Tests Passed\n");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_register_rw_test'.");
log:gpio_tests.c:  puts("GPIO R/W test");
log:gpio_tests.c:  puts("- initial values");
log:gpio_tests.c:  puts ("- check ID values (WORD accesses)");
log:gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, lower) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, lower)");
log:gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, upper) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, upper)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 0) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 0)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 1) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 1)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 2) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 2)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 3) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 3)");
log:gpio_tests.c:  puts("- read/write");
log:gpio_tests.c:  puts("- INTSTATUS/INTCLEAR r/w");
log:gpio_tests.c:    puts("Less then 32 IRQ in design\n");
log:gpio_tests.c:  else puts("Register Read/Write Test Passed");
log:gpio_tests.c:  puts("GPIO Unused address test");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_unused_addresses_test'.");
log:gpio_tests.c:  else puts("- Unused addresses Test Passed");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_interrupt_test'.");
log:gpio_tests.c:  puts("GPIO interrupt test");
log:gpio_tests.c:      puts("Interrupt PORT0_ALL_IRQn not available.");
log:gpio_tests.c:      puts("Interrupt PORT1_ALL_IRQn not available.");
log:gpio_tests.c:      puts("Interrupt PORT2_ALL_IRQn not available.");
log:gpio_tests.c:      puts("Interrupt PORT3_ALL_IRQn not available.");
log:gpio_tests.c:    puts("Less then 32 IRQ in design\n");
log:gpio_tests.c:    else puts("Interrupt Test Passed");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 1 interrupt occurred.\n");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 2 interrupt occurred.\n");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 3 interrupt occurred.\n");
log:memory_tests.c:  puts("\nCortex-M3 DesignStart - Simple memory test - revision $Revision: 243193 $\n");
log:memory_tests.c:  puts ("Checking ROM");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:  puts ("Checking SRAM");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:  puts ("Checking APB space");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:  puts ("Checking AHB I/O space");
log:memory_tests.c:  puts (" - GPIO #0 ID values");
log:memory_tests.c:  puts (" - GPIO #1 ID values");
log:memory_tests.c:  puts (" - System Controller ID values");
log:memory_tests.c:  puts (" - System Controller unused addresses");
log:memory_tests.c:  puts (" - Address range check");
log:memory_tests.c:    puts("ERROR:Expected bus fault at 0x41140000 did not take place");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
log:memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
log:memory_tests.c:    puts ("  All ID values matched : device present\n");
log:memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
log:memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
log:memory_tests.c:    puts ("  All ID values matched : device present\n");
log:memory_tests.c:  else puts("   Unused addresses Test Passed\n");
log:memory_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
log:memory_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
log:timer_driver_tests.c:  puts("\nCortex-M3 DesignStart - Timer Driver Test - revision $Revision: 243344 $\n");
log:timer_driver_tests.c:    puts ("** TEST SKIPPED ** Timer 0 not present.");
log:timer_driver_tests.c:    puts ("** TEST SKIPPED ** GPIO 0 not present.");
log:timer_driver_tests.c:    puts("** TEST PASSED **\n");
log:timer_driver_tests.c:  puts("\nStage 1 - Timer Initialisation\n");
log:timer_driver_tests.c:    puts("Timer Enabled");
log:timer_driver_tests.c:    puts("Ext Enable Not Selected");
log:timer_driver_tests.c:    puts("Ext Clock Not Selected");
log:timer_driver_tests.c:    puts("Timer IRQ Enabled");
log:timer_driver_tests.c:    puts("Reload Value of 0xF00");
log:timer_driver_tests.c:    puts("\nTimer Initialisation Successful\n");
log:timer_driver_tests.c:  puts("Stage 2 - interrupt\n");
log:timer_driver_tests.c:      puts ("Timer IRQ\n");
log:timer_driver_tests.c:      puts("Timer IRQ Disabled");
log:timer_driver_tests.c:        puts("Timer Reload Value Is Correct");   /*check for reload value */
log:timer_driver_tests.c:        puts("Timer Value Set to 300");    /*check for reload value */
log:timer_driver_tests.c:        puts("Timer IRQ enabled");
log:timer_driver_tests.c:    puts("\nTimer Stopped");
log:timer_driver_tests.c:     puts("** Timer IRQ Test Passed **\n");
log:timer_driver_tests.c:    puts("Timer Reload Initialised as 0xF00");   /*check for reload value */
log:timer_driver_tests.c:    puts("\nTimer Stopped");
log:timer_driver_tests.c:  if(!err_code) puts("** Timer Polling Test Passed\n");
log:timer_driver_tests.c:  puts ("\nStage 4 - Ext Stimuli\n");
log:timer_driver_tests.c:  puts ("\n -Stage 4a - Ext Clock\n");
log:timer_driver_tests.c:      puts ("Timer IRQ");
log:timer_driver_tests.c:  puts ("\n -Stage 4b - Ext Enable\n");
log:timer_driver_tests.c:  puts ("Timer 0 Enabled\n");
log:timer_driver_tests.c:        puts("Disable Test Passed");
log:timer_driver_tests.c:        puts("** TEST FAILED ** Disable Test");
log:timer_driver_tests.c:        puts("Enable Test Passed");
log:timer_driver_tests.c:        puts("** TEST FAILED ** Enable Test");
log:timer_driver_tests.c:    puts("\nExt Stimuli Tests Completed Successfully\n");
log:timer_tests.c:  puts("\nCortex-M3 DesignStart - Timer Test - revision $Revision: 243249 $\n");
log:timer_tests.c:  puts("1) Timer 0");
log:timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
log:timer_tests.c:    puts ("- Timer #0 not present. Tests skipped.");
log:timer_tests.c:  puts("\n2) Timer 1");
log:timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
log:timer_tests.c:    puts ("- Timer #1 not present. Tests skipped.");
log:timer_tests.c:  puts("Timer R/W test");
log:timer_tests.c:  puts("- initial values");
log:timer_tests.c:  puts("- read/write");
log:timer_tests.c:  puts("Timer start/stop test");
log:timer_tests.c:  puts("- timer enable");
log:timer_tests.c:     puts("ERROR : Timer not decrementing.");
log:timer_tests.c:  puts("- timer disable");
log:timer_tests.c:     puts("ERROR : Timer not stopping.");
log:timer_tests.c:  puts("- timer reload");
log:timer_tests.c:     puts("ERROR : Timer reload fail 1.");
log:timer_tests.c:     puts("ERROR : Timer reload fail 2.");
log:timer_tests.c:  puts ("Timer interrupt test");
log:timer_tests.c:  puts ("- Test interrupt generation enabled.");
log:timer_tests.c:     puts("ERROR : Timer interrupt enable fail.");
log:timer_tests.c:  puts ("- Test interrupt generation disabled.");
log:timer_tests.c:     puts("ERROR : Timer interrupt disable fail.");
log:timer_tests.c:  puts ("Timer external input test");
log:timer_tests.c:  /* Set external inputs low */
log:timer_tests.c:  puts("- timer use ext. input");
log:timer_tests.c:     puts("ERROR : Timer not stopping when external input is low.");
log:timer_tests.c:  puts("- use SysTick to generate ext. input pulse");
log:timer_tests.c:     puts("ERROR : Timer not trigger #1.");
log:timer_tests.c:    puts("ERROR : Timer not trigger #2.");
log:timer_tests.c:      puts("ERROR : Timer not clear.");
log:timer_tests.c:  puts("- use EXTIN as clock");
log:timer_tests.c:     puts("ERROR : Timer change unexpectedly 1.");
log:timer_tests.c:     puts("ERROR : Timer decrement failed.");
log:timer_tests.c:     puts("ERROR : Timer change unexpectedly 2.");
log:timer_tests.c:     puts("ERROR : Timer change unexpectedly 3.");
log:timer_tests.c:     puts("ERROR : Timer counting failed");
log:timer_tests.c:     puts("ERROR : Timer IRQ set unexpectedly.");
log:timer_tests.c:  puts("- IRQ at 1->0 transition");
log:timer_tests.c:    puts("ERROR : Timer not trigger.");
log:timer_tests.c:    puts("ERROR : Timer triggered unexpectedly.");
log:timer_tests.c:    puts ("ERROR : Unexpected Timer 0 interrupt occurred.\n");
log:timer_tests.c:    puts ("ERROR : Unexpected Timer 1 interrupt occurred.\n");
log:uart_driver_tests.c:  puts("\nCortex-M3 DesignStart - UART Driver Test - revision $Revision: 242484 $\n");
log:uart_driver_tests.c:    puts("** TEST SKIPPED ** UART 2 / UART 3 / GPIO 0 / GPIO 1 not available");
log:uart_driver_tests.c:    puts("** TEST PASSED **\n");
log:uart_driver_tests.c:  puts("\nStage 1 UART Initialization\n");        //initialise UART2 and UART3 with Baud divider of 32
log:uart_driver_tests.c:    puts("UART2 Initialization Failed\n");
log:uart_driver_tests.c:    puts("UART3 Initialization Failed\n");
log:uart_driver_tests.c:  puts("\nStage 2 Simple Transmission - TX and RX Test\n");
log:uart_driver_tests.c:  if(CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2)) puts("TX Buffer Full ...restarting transmission");
log:uart_driver_tests.c:    puts("** TEST FAILED **, Error : Strings DO Not Match!");
log:uart_driver_tests.c:  puts("\nStage 3 Polling");
log:uart_driver_tests.c:  puts("\n- Stage 3a Overrun Polling\n");
log:uart_driver_tests.c:    puts("TX Buffer Overrun Occurred");
log:uart_driver_tests.c:    puts("RX Buffer Overrun Occurred");                             //RX buffer overrun will occur as the data
log:uart_driver_tests.c:  puts("\n- Stage 3b TX & RX IRQ Polling\n");
log:uart_driver_tests.c:  else puts("Polling Test Passed");
log:uart_driver_tests.c:  puts("\nStage 4 IRQ\n");
log:uart_driver_tests.c:  puts("- Stage 4a Overrun IRQ\n");
log:uart_driver_tests.c:      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
log:uart_driver_tests.c:      puts("UART RX Overrun IRQ");
log:uart_driver_tests.c:  else puts("UART RX Overrun Passed");
log:uart_driver_tests.c:  puts("\n- Stage 4b TX/RX IRQ\n");
log:uart_driver_tests.c:      puts("UART TX IRQ ....data sent");                    //if the data has been received (which is set in the
log:uart_driver_tests.c:    puts("** TEST FAILED ** Strings Do Not Match!");
log:uart_tests.c:  puts("\nCortex-M3 DesignStart - UART Test - revision $Revision: 243483 $\n");
log:uart_tests.c:    puts("** TEST SKIPPED ** UART 1 / UART 2 / UART 3 / UART 4 / GPIO 0 / GPIO 1 not available");
log:uart_tests.c:  puts("\nUART 2 for transmit, UART 3 for receive\n");
log:uart_tests.c:  puts("\nUART 3 for transmit, UART 2 for receive\n");
log:uart_tests.c://  puts("\nUART0 interrupt connectivity test\n");
log:uart_tests.c://  puts("\nUART1 interrupt connectivity test\n");
log:uart_tests.c://  puts("\nUART4 interrupt connectivity test\n");
log:uart_tests.c:  puts("- check initial values");
log:uart_tests.c:  puts("Simple test");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_test'.");
log:uart_tests.c:  puts("Data transfer test\n");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_baud_test_single'.");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_enable_ctrl_test'.");
log:uart_tests.c:  puts ("UART enable test");
log:uart_tests.c:  puts ("- both TX and RX are enabled");
log:uart_tests.c:  puts ("- TX disabled");
log:uart_tests.c:  puts ("- RX disabled");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_irq_test'.");
log:uart_tests.c:  puts ("UART TX & RX IRQ test");
log:uart_tests.c:  puts ("- TX irq enable");
log:uart_tests.c:  puts ("- TX irq disable");
log:uart_tests.c:  puts ("- RX irq enable");
log:uart_tests.c:  puts ("- RX irq disable");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_overflow_test'.");
log:uart_tests.c:  puts ("UART TX & RX overflow test");
log:uart_tests.c:  puts ("- TX without overflow");
log:uart_tests.c:  puts ("- TX with overflow");
log:uart_tests.c:  puts ("- RX overflow");
log:uart_tests.c://  puts ("- UART TX IRQ");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_interrupt_test'.");
log:uart_tests.c://  puts ("\n- UART TX overflow IRQ");
log:uart_tests.c://  puts ("\n- UART RX IRQ");
log:uart_tests.c://  puts ("\n- UART RX overflow IRQ");
memory_tests.c:  puts("\nCortex-M3 DesignStart - Simple memory test - revision $Revision: 243193 $\n");
memory_tests.c:  puts ("Checking ROM");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:  puts ("Checking SRAM");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:  puts ("Checking APB space");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:  puts ("Checking AHB I/O space");
memory_tests.c:  puts (" - GPIO #0 ID values");
memory_tests.c:  puts (" - GPIO #1 ID values");
memory_tests.c:  puts (" - System Controller ID values");
memory_tests.c:  puts (" - System Controller unused addresses");
memory_tests.c:  puts (" - Address range check");
memory_tests.c:    puts("ERROR:Expected bus fault at 0x41140000 did not take place");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
memory_tests.c:    puts ("  All ID values matched : device present\n");
memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
memory_tests.c:    puts ("  All ID values matched : device present\n");
memory_tests.c:  else puts("   Unused addresses Test Passed\n");
memory_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
memory_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
timer_driver_tests.c:  puts("\nCortex-M3 DesignStart - Timer Driver Test - revision $Revision: 243344 $\n");
timer_driver_tests.c:    puts ("** TEST SKIPPED ** Timer 0 not present.");
timer_driver_tests.c:    puts ("** TEST SKIPPED ** GPIO 0 not present.");
timer_driver_tests.c:    puts("** TEST PASSED **\n");
timer_driver_tests.c:  puts("\nStage 1 - Timer Initialisation\n");
timer_driver_tests.c:    puts("Timer Enabled");
timer_driver_tests.c:    puts("Ext Enable Not Selected");
timer_driver_tests.c:    puts("Ext Clock Not Selected");
timer_driver_tests.c:    puts("Timer IRQ Enabled");
timer_driver_tests.c:    puts("Reload Value of 0xF00");
timer_driver_tests.c:    puts("\nTimer Initialisation Successful\n");
timer_driver_tests.c:  puts("Stage 2 - interrupt\n");
timer_driver_tests.c:      puts ("Timer IRQ\n");
timer_driver_tests.c:      puts("Timer IRQ Disabled");
timer_driver_tests.c:        puts("Timer Reload Value Is Correct");   /*check for reload value */
timer_driver_tests.c:        puts("Timer Value Set to 300");    /*check for reload value */
timer_driver_tests.c:        puts("Timer IRQ enabled");
timer_driver_tests.c:    puts("\nTimer Stopped");
timer_driver_tests.c:     puts("** Timer IRQ Test Passed **\n");
timer_driver_tests.c:    puts("Timer Reload Initialised as 0xF00");   /*check for reload value */
timer_driver_tests.c:    puts("\nTimer Stopped");
timer_driver_tests.c:  if(!err_code) puts("** Timer Polling Test Passed\n");
timer_driver_tests.c:  puts ("\nStage 4 - Ext Stimuli\n");
timer_driver_tests.c:  puts ("\n -Stage 4a - Ext Clock\n");
timer_driver_tests.c:      puts ("Timer IRQ");
timer_driver_tests.c:  puts ("\n -Stage 4b - Ext Enable\n");
timer_driver_tests.c:  puts ("Timer 0 Enabled\n");
timer_driver_tests.c:        puts("Disable Test Passed");
timer_driver_tests.c:        puts("** TEST FAILED ** Disable Test");
timer_driver_tests.c:        puts("Enable Test Passed");
timer_driver_tests.c:        puts("** TEST FAILED ** Enable Test");
timer_driver_tests.c:    puts("\nExt Stimuli Tests Completed Successfully\n");
timer_tests.c:  puts("\nCortex-M3 DesignStart - Timer Test - revision $Revision: 243249 $\n");
timer_tests.c:  puts("1) Timer 0");
timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
timer_tests.c:    puts ("- Timer #0 not present. Tests skipped.");
timer_tests.c:  puts("\n2) Timer 1");
timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
timer_tests.c:    puts ("- Timer #1 not present. Tests skipped.");
timer_tests.c:  puts("Timer R/W test");
timer_tests.c:  puts("- initial values");
timer_tests.c:  puts("- read/write");
timer_tests.c:  puts("Timer start/stop test");
timer_tests.c:  puts("- timer enable");
timer_tests.c:     puts("ERROR : Timer not decrementing.");
timer_tests.c:  puts("- timer disable");
timer_tests.c:     puts("ERROR : Timer not stopping.");
timer_tests.c:  puts("- timer reload");
timer_tests.c:     puts("ERROR : Timer reload fail 1.");
timer_tests.c:     puts("ERROR : Timer reload fail 2.");
timer_tests.c:  puts ("Timer interrupt test");
timer_tests.c:  puts ("- Test interrupt generation enabled.");
timer_tests.c:     puts("ERROR : Timer interrupt enable fail.");
timer_tests.c:  puts ("- Test interrupt generation disabled.");
timer_tests.c:     puts("ERROR : Timer interrupt disable fail.");
timer_tests.c:  puts ("Timer external input test");
timer_tests.c:  /* Set external inputs low */
timer_tests.c:  puts("- timer use ext. input");
timer_tests.c:     puts("ERROR : Timer not stopping when external input is low.");
timer_tests.c:  puts("- use SysTick to generate ext. input pulse");
timer_tests.c:     puts("ERROR : Timer not trigger #1.");
timer_tests.c:    puts("ERROR : Timer not trigger #2.");
timer_tests.c:      puts("ERROR : Timer not clear.");
timer_tests.c:  puts("- use EXTIN as clock");
timer_tests.c:     puts("ERROR : Timer change unexpectedly 1.");
timer_tests.c:     puts("ERROR : Timer decrement failed.");
timer_tests.c:     puts("ERROR : Timer change unexpectedly 2.");
timer_tests.c:     puts("ERROR : Timer change unexpectedly 3.");
timer_tests.c:     puts("ERROR : Timer counting failed");
timer_tests.c:     puts("ERROR : Timer IRQ set unexpectedly.");
timer_tests.c:  puts("- IRQ at 1->0 transition");
timer_tests.c:    puts("ERROR : Timer not trigger.");
timer_tests.c:    puts("ERROR : Timer triggered unexpectedly.");
timer_tests.c:    puts ("ERROR : Unexpected Timer 0 interrupt occurred.\n");
timer_tests.c:    puts ("ERROR : Unexpected Timer 1 interrupt occurred.\n");
uart_driver_tests.c:  puts("\nCortex-M3 DesignStart - UART Driver Test - revision $Revision: 242484 $\n");
uart_driver_tests.c:    puts("** TEST SKIPPED ** UART 2 / UART 3 / GPIO 0 / GPIO 1 not available");
uart_driver_tests.c:    puts("** TEST PASSED **\n");
uart_driver_tests.c:  puts("\nStage 1 UART Initialization\n");        //initialise UART2 and UART3 with Baud divider of 32
uart_driver_tests.c:    puts("UART2 Initialization Failed\n");
uart_driver_tests.c:    puts("UART3 Initialization Failed\n");
uart_driver_tests.c:  puts("\nStage 2 Simple Transmission - TX and RX Test\n");
uart_driver_tests.c:  if(CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2)) puts("TX Buffer Full ...restarting transmission");
uart_driver_tests.c:    puts("** TEST FAILED **, Error : Strings DO Not Match!");
uart_driver_tests.c:  puts("\nStage 3 Polling");
uart_driver_tests.c:  puts("\n- Stage 3a Overrun Polling\n");
uart_driver_tests.c:    puts("TX Buffer Overrun Occurred");
uart_driver_tests.c:    puts("RX Buffer Overrun Occurred");                             //RX buffer overrun will occur as the data
uart_driver_tests.c:  puts("\n- Stage 3b TX & RX IRQ Polling\n");
uart_driver_tests.c:  else puts("Polling Test Passed");
uart_driver_tests.c:  puts("\nStage 4 IRQ\n");
uart_driver_tests.c:  puts("- Stage 4a Overrun IRQ\n");
uart_driver_tests.c:      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
uart_driver_tests.c:      puts("UART RX Overrun IRQ");
uart_driver_tests.c:  else puts("UART RX Overrun Passed");
uart_driver_tests.c:  puts("\n- Stage 4b TX/RX IRQ\n");
uart_driver_tests.c:      puts("UART TX IRQ ....data sent");                    //if the data has been received (which is set in the
uart_driver_tests.c:    puts("** TEST FAILED ** Strings Do Not Match!");
uart_tests.c:  puts("\nCortex-M3 DesignStart - UART Test - revision $Revision: 243483 $\n");
uart_tests.c:    puts("** TEST SKIPPED ** UART 1 / UART 2 / UART 3 / UART 4 / GPIO 0 / GPIO 1 not available");
uart_tests.c:  puts("\nUART 2 for transmit, UART 3 for receive\n");
uart_tests.c:  puts("\nUART 3 for transmit, UART 2 for receive\n");
uart_tests.c://  puts("\nUART0 interrupt connectivity test\n");
uart_tests.c://  puts("\nUART1 interrupt connectivity test\n");
uart_tests.c://  puts("\nUART4 interrupt connectivity test\n");
uart_tests.c:  puts("- check initial values");
uart_tests.c:  puts("Simple test");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_test'.");
uart_tests.c:  puts("Data transfer test\n");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_baud_test_single'.");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_enable_ctrl_test'.");
uart_tests.c:  puts ("UART enable test");
uart_tests.c:  puts ("- both TX and RX are enabled");
uart_tests.c:  puts ("- TX disabled");
uart_tests.c:  puts ("- RX disabled");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_irq_test'.");
uart_tests.c:  puts ("UART TX & RX IRQ test");
uart_tests.c:  puts ("- TX irq enable");
uart_tests.c:  puts ("- TX irq disable");
uart_tests.c:  puts ("- RX irq enable");
uart_tests.c:  puts ("- RX irq disable");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_overflow_test'.");
uart_tests.c:  puts ("UART TX & RX overflow test");
uart_tests.c:  puts ("- TX without overflow");
uart_tests.c:  puts ("- TX with overflow");
uart_tests.c:  puts ("- RX overflow");
uart_tests.c://  puts ("- UART TX IRQ");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_interrupt_test'.");
uart_tests.c://  puts ("\n- UART TX overflow IRQ");
uart_tests.c://  puts ("\n- UART RX IRQ");
uart_tests.c://  puts ("\n- UART RX overflow IRQ");
apb_mux_tests.c:  puts("\nCortex-M3 DesignStart - APB slave mux test - revision $Revision: 243193 $\n");
apb_mux_tests.c:  puts(" - Detecting if default peripherals are present ...\n");
apb_mux_tests.c:  puts ("0: timer 0");
apb_mux_tests.c:  puts ("1: timer 1");
apb_mux_tests.c:  puts ("2: dual timer");
apb_mux_tests.c:  puts ("3: blank");
apb_mux_tests.c:  puts ("4: UART 0");
apb_mux_tests.c:  puts ("5: UART 1");
apb_mux_tests.c:  puts ("6: RTC");
apb_mux_tests.c:  puts ("7: blank");
apb_mux_tests.c:  puts ("8: Watchdog");
apb_mux_tests.c:  puts ("9: blank");
apb_mux_tests.c:  puts ("10: blank");
apb_mux_tests.c:  puts ("11: blank");
apb_mux_tests.c:  puts ("12: APB expansion port 12");
apb_mux_tests.c:  puts ("13: APB expansion port 13");
apb_mux_tests.c:  puts ("14: APB expansion port 14");
apb_mux_tests.c:  puts ("15: TRNG"); // read TRNG version register
apb_mux_tests.c:      puts ("  Version register matched   : device present\n");
apb_mux_tests.c:        puts ("  All ID values are 0   : device not present\n");
apb_mux_tests.c:        puts ("  ID value mismatch(es) : device unknown\n");
apb_mux_tests.c:        puts ("  All ID values matched : device present\n");
apb_mux_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
apb_mux_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
default_slaves_tests.c:  puts("\nCortex-M3 DesignStart - Default Slave Test - revision $Revision: 243193 $\n");
default_slaves_tests.c:  puts("Default slave tests - hard faults expected\n");
default_slaves_tests.c:  puts ("[Hard Fault Handler]");
default_slaves_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
gpio_driver_tests.c:  puts("Cortex-M3 DesignStart - GPIO Driver Test - revision $Revision: 242484 $\n");
gpio_driver_tests.c:    puts ("GPIO 0 not present. Test skipped.");
gpio_driver_tests.c:    puts("** TEST PASSED **\n");
gpio_driver_tests.c:  puts("Stage 1 - GPIO Output Enable Test\n");
gpio_driver_tests.c:  puts("- Stage 1a - Set GPIO Output Enable\n");
gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");
gpio_driver_tests.c:  puts("- Stage 1b - Clear GPIO Output Enable\n");
gpio_driver_tests.c:  else puts("Clear Output Enable Test Passed\n");
gpio_driver_tests.c:    - NOTE: it is these exact combinations as only AltFunc outputs can be set in the AltFunc register
gpio_driver_tests.c:            as inputs have no effect as they are just routed to two places and pins without an AltFunc
gpio_driver_tests.c:  puts("Stage 2 - GPIO Alternative Function Enable Test\n");
gpio_driver_tests.c:  puts("- Stage 2a - Set GPIO Alternative Function Enable\n");
gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");    //if the port did not set the AltFunc as expected display error*/
gpio_driver_tests.c:  puts("- Stage 2b - Clear GPIO Alternative Function Enable\n");
gpio_driver_tests.c:  else puts("Clear Enable Test Passed\n");  /*if the port did not clear the AltFunc as expected display error*/
gpio_driver_tests.c:  puts("Stage 3 - GPIO Pin IRQ Test\n");
gpio_driver_tests.c:  puts("- Stage 3a - GPIO High Level IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("High Level IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 3b - GPIO Rising Edge IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Rising Edge IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 3c - GPIO Falling Edge IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Falling Edge IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 3d - GPIO Low Level IRQ Test\n");
gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Low Level IRQ Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("Stage 4 - GPIO Masked Output Test\n");
gpio_driver_tests.c:  puts("- Stage 4a - GPIO Masked Output - Deterministic Test\n");
gpio_driver_tests.c:  if(!err_code) puts("Stage 4a Deterministic Masked Output Tests Passed Successfully\n");
gpio_driver_tests.c:  puts("- Stage 4b - GPIO Masked Output - Random Test\n");
gpio_driver_tests.c:  if(!err_code) puts("Stage 4b Random Masked Output Tests Passed Successfully\n");
gpio_driver_tests.c:  if(!err_code_all) puts("\nAll Masked Output Tests Passed Successfully\n");
gpio_tests.c:  puts("Cortex-M3 DesignStart - GPIO Test - revision $Revision: 243249 $\n");
gpio_tests.c:  puts("1) GPIO 0");
gpio_tests.c:    puts ("- GPIO #0 not present. Tests skipped.");
gpio_tests.c:  puts("\n2) GPIO 1");
gpio_tests.c:    puts ("- GPIO #1 not present. Tests skipped.");
gpio_tests.c:  puts("\n3) GPIO 2");
gpio_tests.c:    puts ("- GPIO #2 not present. Tests skipped.");
gpio_tests.c:  puts("\n3) GPIO 3");
gpio_tests.c:    puts ("- GPIO #3 not present. Tests skipped.");
gpio_tests.c:    puts ("- GPIO #4 not present. Tests skipped.");
gpio_tests.c:    puts ("- GPIO #5 not present. Tests skipped.");
gpio_tests.c:  puts("GPIO mask access test");
gpio_tests.c:  puts("- lower byte");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_masked_access_test'.");
gpio_tests.c:      puts("Lower Byte Mask Access Tests Passed\n");
gpio_tests.c:      puts("Lower Byte Mask Access Tests Failed\n");
gpio_tests.c:  puts("- upper byte");
gpio_tests.c:      puts("Upper Byte Mask Access Tests Passed\n");
gpio_tests.c:      puts("Upper Byte Mask Access Tests Failed\n");
gpio_tests.c:    else puts("Mask Access Tests Passed\n");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_register_rw_test'.");
gpio_tests.c:  puts("GPIO R/W test");
gpio_tests.c:  puts("- initial values");
gpio_tests.c:  puts ("- check ID values (WORD accesses)");
gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, lower) - should have no effect");
gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, lower)");
gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, upper) - should have no effect");
gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, upper)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 0) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 0)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 1) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 1)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 2) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 2)");
gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 3) - should have no effect");
gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 3)");
gpio_tests.c:  puts("- read/write");
gpio_tests.c:  puts("- INTSTATUS/INTCLEAR r/w");
gpio_tests.c:    puts("Less then 32 IRQ in design\n");
gpio_tests.c:  else puts("Register Read/Write Test Passed");
gpio_tests.c:  puts("GPIO Unused address test");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_unused_addresses_test'.");
gpio_tests.c:  else puts("- Unused addresses Test Passed");
gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_interrupt_test'.");
gpio_tests.c:  puts("GPIO interrupt test");
gpio_tests.c:      puts("Interrupt PORT0_ALL_IRQn not available.");
gpio_tests.c:      puts("Interrupt PORT1_ALL_IRQn not available.");
gpio_tests.c:      puts("Interrupt PORT2_ALL_IRQn not available.");
gpio_tests.c:      puts("Interrupt PORT3_ALL_IRQn not available.");
gpio_tests.c:    puts("Less then 32 IRQ in design\n");
gpio_tests.c:    else puts("Interrupt Test Passed");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 1 interrupt occurred.\n");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 2 interrupt occurred.\n");
gpio_tests.c:    puts ("ERROR : Unexpected GPIO 3 interrupt occurred.\n");
log:apb_mux_tests.c:  puts("\nCortex-M3 DesignStart - APB slave mux test - revision $Revision: 243193 $\n");
log:apb_mux_tests.c:  puts(" - Detecting if default peripherals are present ...\n");
log:apb_mux_tests.c:  puts ("0: timer 0");
log:apb_mux_tests.c:  puts ("1: timer 1");
log:apb_mux_tests.c:  puts ("2: dual timer");
log:apb_mux_tests.c:  puts ("3: blank");
log:apb_mux_tests.c:  puts ("4: UART 0");
log:apb_mux_tests.c:  puts ("5: UART 1");
log:apb_mux_tests.c:  puts ("6: RTC");
log:apb_mux_tests.c:  puts ("7: blank");
log:apb_mux_tests.c:  puts ("8: Watchdog");
log:apb_mux_tests.c:  puts ("9: blank");
log:apb_mux_tests.c:  puts ("10: blank");
log:apb_mux_tests.c:  puts ("11: blank");
log:apb_mux_tests.c:  puts ("12: APB expansion port 12");
log:apb_mux_tests.c:  puts ("13: APB expansion port 13");
log:apb_mux_tests.c:  puts ("14: APB expansion port 14");
log:apb_mux_tests.c:  puts ("15: TRNG"); // read TRNG version register
log:apb_mux_tests.c:      puts ("  Version register matched   : device present\n");
log:apb_mux_tests.c:        puts ("  All ID values are 0   : device not present\n");
log:apb_mux_tests.c:        puts ("  ID value mismatch(es) : device unknown\n");
log:apb_mux_tests.c:        puts ("  All ID values matched : device present\n");
log:apb_mux_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
log:apb_mux_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
log:default_slaves_tests.c:  puts("\nCortex-M3 DesignStart - Default Slave Test - revision $Revision: 243193 $\n");
log:default_slaves_tests.c:  puts("Default slave tests - hard faults expected\n");
log:default_slaves_tests.c:  puts ("[Hard Fault Handler]");
log:default_slaves_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
log:gpio_driver_tests.c:  puts("Cortex-M3 DesignStart - GPIO Driver Test - revision $Revision: 242484 $\n");
log:gpio_driver_tests.c:    puts ("GPIO 0 not present. Test skipped.");
log:gpio_driver_tests.c:    puts("** TEST PASSED **\n");
log:gpio_driver_tests.c:  puts("Stage 1 - GPIO Output Enable Test\n");
log:gpio_driver_tests.c:  puts("- Stage 1a - Set GPIO Output Enable\n");
log:gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");
log:gpio_driver_tests.c:  puts("- Stage 1b - Clear GPIO Output Enable\n");
log:gpio_driver_tests.c:  else puts("Clear Output Enable Test Passed\n");
log:gpio_driver_tests.c:    - NOTE: it is these exact combinations as only AltFunc outputs can be set in the AltFunc register
log:gpio_driver_tests.c:            as inputs have no effect as they are just routed to two places and pins without an AltFunc
log:gpio_driver_tests.c:  puts("Stage 2 - GPIO Alternative Function Enable Test\n");
log:gpio_driver_tests.c:  puts("- Stage 2a - Set GPIO Alternative Function Enable\n");
log:gpio_driver_tests.c:  else puts("Set Enable Test Passed\n");    //if the port did not set the AltFunc as expected display error*/
log:gpio_driver_tests.c:  puts("- Stage 2b - Clear GPIO Alternative Function Enable\n");
log:gpio_driver_tests.c:  else puts("Clear Enable Test Passed\n");  /*if the port did not clear the AltFunc as expected display error*/
log:gpio_driver_tests.c:  puts("Stage 3 - GPIO Pin IRQ Test\n");
log:gpio_driver_tests.c:  puts("- Stage 3a - GPIO High Level IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("High Level IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 3b - GPIO Rising Edge IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Rising Edge IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 3c - GPIO Falling Edge IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Falling Edge IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 3d - GPIO Low Level IRQ Test\n");
log:gpio_driver_tests.c:  if((irq_counter == 14) && (err_code == 0)) puts("Low Level IRQ Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("Stage 4 - GPIO Masked Output Test\n");
log:gpio_driver_tests.c:  puts("- Stage 4a - GPIO Masked Output - Deterministic Test\n");
log:gpio_driver_tests.c:  if(!err_code) puts("Stage 4a Deterministic Masked Output Tests Passed Successfully\n");
log:gpio_driver_tests.c:  puts("- Stage 4b - GPIO Masked Output - Random Test\n");
log:gpio_driver_tests.c:  if(!err_code) puts("Stage 4b Random Masked Output Tests Passed Successfully\n");
log:gpio_driver_tests.c:  if(!err_code_all) puts("\nAll Masked Output Tests Passed Successfully\n");
log:gpio_tests.c:  puts("Cortex-M3 DesignStart - GPIO Test - revision $Revision: 243249 $\n");
log:gpio_tests.c:  puts("1) GPIO 0");
log:gpio_tests.c:    puts ("- GPIO #0 not present. Tests skipped.");
log:gpio_tests.c:  puts("\n2) GPIO 1");
log:gpio_tests.c:    puts ("- GPIO #1 not present. Tests skipped.");
log:gpio_tests.c:  puts("\n3) GPIO 2");
log:gpio_tests.c:    puts ("- GPIO #2 not present. Tests skipped.");
log:gpio_tests.c:  puts("\n3) GPIO 3");
log:gpio_tests.c:    puts ("- GPIO #3 not present. Tests skipped.");
log:gpio_tests.c:    puts ("- GPIO #4 not present. Tests skipped.");
log:gpio_tests.c:    puts ("- GPIO #5 not present. Tests skipped.");
log:gpio_tests.c:  puts("GPIO mask access test");
log:gpio_tests.c:  puts("- lower byte");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_masked_access_test'.");
log:gpio_tests.c:      puts("Lower Byte Mask Access Tests Passed\n");
log:gpio_tests.c:      puts("Lower Byte Mask Access Tests Failed\n");
log:gpio_tests.c:  puts("- upper byte");
log:gpio_tests.c:      puts("Upper Byte Mask Access Tests Passed\n");
log:gpio_tests.c:      puts("Upper Byte Mask Access Tests Failed\n");
log:gpio_tests.c:    else puts("Mask Access Tests Passed\n");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_register_rw_test'.");
log:gpio_tests.c:  puts("GPIO R/W test");
log:gpio_tests.c:  puts("- initial values");
log:gpio_tests.c:  puts ("- check ID values (WORD accesses)");
log:gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, lower) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, lower)");
log:gpio_tests.c:  puts ("- write ID values (HALF WORD accesses, upper) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (HALF WORD accesses, upper)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 0) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 0)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 1) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 1)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 2) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 2)");
log:gpio_tests.c:  puts ("- write ID values (BYTE accesses, byte 3) - should have no effect");
log:gpio_tests.c:  puts ("- check ID values (BYTE accesses, byte 3)");
log:gpio_tests.c:  puts("- read/write");
log:gpio_tests.c:  puts("- INTSTATUS/INTCLEAR r/w");
log:gpio_tests.c:    puts("Less then 32 IRQ in design\n");
log:gpio_tests.c:  else puts("Register Read/Write Test Passed");
log:gpio_tests.c:  puts("GPIO Unused address test");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_unused_addresses_test'.");
log:gpio_tests.c:  else puts("- Unused addresses Test Passed");
log:gpio_tests.c:    puts ("ERROR: Input parameter invalid in function 'gpio_interrupt_test'.");
log:gpio_tests.c:  puts("GPIO interrupt test");
log:gpio_tests.c:      puts("Interrupt PORT0_ALL_IRQn not available.");
log:gpio_tests.c:      puts("Interrupt PORT1_ALL_IRQn not available.");
log:gpio_tests.c:      puts("Interrupt PORT2_ALL_IRQn not available.");
log:gpio_tests.c:      puts("Interrupt PORT3_ALL_IRQn not available.");
log:gpio_tests.c:    puts("Less then 32 IRQ in design\n");
log:gpio_tests.c:    else puts("Interrupt Test Passed");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 0 interrupt occurred.\n");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 1 interrupt occurred.\n");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 2 interrupt occurred.\n");
log:gpio_tests.c:    puts ("ERROR : Unexpected GPIO 3 interrupt occurred.\n");
log:memory_tests.c:  puts("\nCortex-M3 DesignStart - Simple memory test - revision $Revision: 243193 $\n");
log:memory_tests.c:  puts ("Checking ROM");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:  puts ("Checking SRAM");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:  puts ("Checking APB space");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:  puts ("Checking AHB I/O space");
log:memory_tests.c:  puts (" - GPIO #0 ID values");
log:memory_tests.c:  puts (" - GPIO #1 ID values");
log:memory_tests.c:  puts (" - System Controller ID values");
log:memory_tests.c:  puts (" - System Controller unused addresses");
log:memory_tests.c:  puts (" - Address range check");
log:memory_tests.c:    puts("ERROR:Expected bus fault at 0x41140000 did not take place");
log:memory_tests.c:    puts ("  Failed\n");
log:memory_tests.c:    puts ("  Passed\n");
log:memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
log:memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
log:memory_tests.c:    puts ("  All ID values matched : device present\n");
log:memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
log:memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
log:memory_tests.c:    puts ("  All ID values matched : device present\n");
log:memory_tests.c:  else puts("   Unused addresses Test Passed\n");
log:memory_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
log:memory_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
log:timer_driver_tests.c:  puts("\nCortex-M3 DesignStart - Timer Driver Test - revision $Revision: 243344 $\n");
log:timer_driver_tests.c:    puts ("** TEST SKIPPED ** Timer 0 not present.");
log:timer_driver_tests.c:    puts ("** TEST SKIPPED ** GPIO 0 not present.");
log:timer_driver_tests.c:    puts("** TEST PASSED **\n");
log:timer_driver_tests.c:  puts("\nStage 1 - Timer Initialisation\n");
log:timer_driver_tests.c:    puts("Timer Enabled");
log:timer_driver_tests.c:    puts("Ext Enable Not Selected");
log:timer_driver_tests.c:    puts("Ext Clock Not Selected");
log:timer_driver_tests.c:    puts("Timer IRQ Enabled");
log:timer_driver_tests.c:    puts("Reload Value of 0xF00");
log:timer_driver_tests.c:    puts("\nTimer Initialisation Successful\n");
log:timer_driver_tests.c:  puts("Stage 2 - interrupt\n");
log:timer_driver_tests.c:      puts ("Timer IRQ\n");
log:timer_driver_tests.c:      puts("Timer IRQ Disabled");
log:timer_driver_tests.c:        puts("Timer Reload Value Is Correct");   /*check for reload value */
log:timer_driver_tests.c:        puts("Timer Value Set to 300");    /*check for reload value */
log:timer_driver_tests.c:        puts("Timer IRQ enabled");
log:timer_driver_tests.c:    puts("\nTimer Stopped");
log:timer_driver_tests.c:     puts("** Timer IRQ Test Passed **\n");
log:timer_driver_tests.c:    puts("Timer Reload Initialised as 0xF00");   /*check for reload value */
log:timer_driver_tests.c:    puts("\nTimer Stopped");
log:timer_driver_tests.c:  if(!err_code) puts("** Timer Polling Test Passed\n");
log:timer_driver_tests.c:  puts ("\nStage 4 - Ext Stimuli\n");
log:timer_driver_tests.c:  puts ("\n -Stage 4a - Ext Clock\n");
log:timer_driver_tests.c:      puts ("Timer IRQ");
log:timer_driver_tests.c:  puts ("\n -Stage 4b - Ext Enable\n");
log:timer_driver_tests.c:  puts ("Timer 0 Enabled\n");
log:timer_driver_tests.c:        puts("Disable Test Passed");
log:timer_driver_tests.c:        puts("** TEST FAILED ** Disable Test");
log:timer_driver_tests.c:        puts("Enable Test Passed");
log:timer_driver_tests.c:        puts("** TEST FAILED ** Enable Test");
log:timer_driver_tests.c:    puts("\nExt Stimuli Tests Completed Successfully\n");
log:timer_tests.c:  puts("\nCortex-M3 DesignStart - Timer Test - revision $Revision: 243249 $\n");
log:timer_tests.c:  puts("1) Timer 0");
log:timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
log:timer_tests.c:    puts ("- Timer #0 not present. Tests skipped.");
log:timer_tests.c:  puts("\n2) Timer 1");
log:timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
log:timer_tests.c:    puts ("- Timer #1 not present. Tests skipped.");
log:timer_tests.c:  puts("Timer R/W test");
log:timer_tests.c:  puts("- initial values");
log:timer_tests.c:  puts("- read/write");
log:timer_tests.c:  puts("Timer start/stop test");
log:timer_tests.c:  puts("- timer enable");
log:timer_tests.c:     puts("ERROR : Timer not decrementing.");
log:timer_tests.c:  puts("- timer disable");
log:timer_tests.c:     puts("ERROR : Timer not stopping.");
log:timer_tests.c:  puts("- timer reload");
log:timer_tests.c:     puts("ERROR : Timer reload fail 1.");
log:timer_tests.c:     puts("ERROR : Timer reload fail 2.");
log:timer_tests.c:  puts ("Timer interrupt test");
log:timer_tests.c:  puts ("- Test interrupt generation enabled.");
log:timer_tests.c:     puts("ERROR : Timer interrupt enable fail.");
log:timer_tests.c:  puts ("- Test interrupt generation disabled.");
log:timer_tests.c:     puts("ERROR : Timer interrupt disable fail.");
log:timer_tests.c:  puts ("Timer external input test");
log:timer_tests.c:  /* Set external inputs low */
log:timer_tests.c:  puts("- timer use ext. input");
log:timer_tests.c:     puts("ERROR : Timer not stopping when external input is low.");
log:timer_tests.c:  puts("- use SysTick to generate ext. input pulse");
log:timer_tests.c:     puts("ERROR : Timer not trigger #1.");
log:timer_tests.c:    puts("ERROR : Timer not trigger #2.");
log:timer_tests.c:      puts("ERROR : Timer not clear.");
log:timer_tests.c:  puts("- use EXTIN as clock");
log:timer_tests.c:     puts("ERROR : Timer change unexpectedly 1.");
log:timer_tests.c:     puts("ERROR : Timer decrement failed.");
log:timer_tests.c:     puts("ERROR : Timer change unexpectedly 2.");
log:timer_tests.c:     puts("ERROR : Timer change unexpectedly 3.");
log:timer_tests.c:     puts("ERROR : Timer counting failed");
log:timer_tests.c:     puts("ERROR : Timer IRQ set unexpectedly.");
log:timer_tests.c:  puts("- IRQ at 1->0 transition");
log:timer_tests.c:    puts("ERROR : Timer not trigger.");
log:timer_tests.c:    puts("ERROR : Timer triggered unexpectedly.");
log:timer_tests.c:    puts ("ERROR : Unexpected Timer 0 interrupt occurred.\n");
log:timer_tests.c:    puts ("ERROR : Unexpected Timer 1 interrupt occurred.\n");
log:uart_driver_tests.c:  puts("\nCortex-M3 DesignStart - UART Driver Test - revision $Revision: 242484 $\n");
log:uart_driver_tests.c:    puts("** TEST SKIPPED ** UART 2 / UART 3 / GPIO 0 / GPIO 1 not available");
log:uart_driver_tests.c:    puts("** TEST PASSED **\n");
log:uart_driver_tests.c:  puts("\nStage 1 UART Initialization\n");        //initialise UART2 and UART3 with Baud divider of 32
log:uart_driver_tests.c:    puts("UART2 Initialization Failed\n");
log:uart_driver_tests.c:    puts("UART3 Initialization Failed\n");
log:uart_driver_tests.c:  puts("\nStage 2 Simple Transmission - TX and RX Test\n");
log:uart_driver_tests.c:  if(CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2)) puts("TX Buffer Full ...restarting transmission");
log:uart_driver_tests.c:    puts("** TEST FAILED **, Error : Strings DO Not Match!");
log:uart_driver_tests.c:  puts("\nStage 3 Polling");
log:uart_driver_tests.c:  puts("\n- Stage 3a Overrun Polling\n");
log:uart_driver_tests.c:    puts("TX Buffer Overrun Occurred");
log:uart_driver_tests.c:    puts("RX Buffer Overrun Occurred");                             //RX buffer overrun will occur as the data
log:uart_driver_tests.c:  puts("\n- Stage 3b TX & RX IRQ Polling\n");
log:uart_driver_tests.c:  else puts("Polling Test Passed");
log:uart_driver_tests.c:  puts("\nStage 4 IRQ\n");
log:uart_driver_tests.c:  puts("- Stage 4a Overrun IRQ\n");
log:uart_driver_tests.c:      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
log:uart_driver_tests.c:      puts("UART RX Overrun IRQ");
log:uart_driver_tests.c:  else puts("UART RX Overrun Passed");
log:uart_driver_tests.c:  puts("\n- Stage 4b TX/RX IRQ\n");
log:uart_driver_tests.c:      puts("UART TX IRQ ....data sent");                    //if the data has been received (which is set in the
log:uart_driver_tests.c:    puts("** TEST FAILED ** Strings Do Not Match!");
log:uart_tests.c:  puts("\nCortex-M3 DesignStart - UART Test - revision $Revision: 243483 $\n");
log:uart_tests.c:    puts("** TEST SKIPPED ** UART 1 / UART 2 / UART 3 / UART 4 / GPIO 0 / GPIO 1 not available");
log:uart_tests.c:  puts("\nUART 2 for transmit, UART 3 for receive\n");
log:uart_tests.c:  puts("\nUART 3 for transmit, UART 2 for receive\n");
log:uart_tests.c://  puts("\nUART0 interrupt connectivity test\n");
log:uart_tests.c://  puts("\nUART1 interrupt connectivity test\n");
log:uart_tests.c://  puts("\nUART4 interrupt connectivity test\n");
log:uart_tests.c:  puts("- check initial values");
log:uart_tests.c:  puts("Simple test");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_test'.");
log:uart_tests.c:  puts("Data transfer test\n");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_baud_test_single'.");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_enable_ctrl_test'.");
log:uart_tests.c:  puts ("UART enable test");
log:uart_tests.c:  puts ("- both TX and RX are enabled");
log:uart_tests.c:  puts ("- TX disabled");
log:uart_tests.c:  puts ("- RX disabled");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_irq_test'.");
log:uart_tests.c:  puts ("UART TX & RX IRQ test");
log:uart_tests.c:  puts ("- TX irq enable");
log:uart_tests.c:  puts ("- TX irq disable");
log:uart_tests.c:  puts ("- RX irq enable");
log:uart_tests.c:  puts ("- RX irq disable");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_overflow_test'.");
log:uart_tests.c:  puts ("UART TX & RX overflow test");
log:uart_tests.c:  puts ("- TX without overflow");
log:uart_tests.c:  puts ("- TX with overflow");
log:uart_tests.c:  puts ("- RX overflow");
log:uart_tests.c://  puts ("- UART TX IRQ");
log:uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_interrupt_test'.");
log:uart_tests.c://  puts ("\n- UART TX overflow IRQ");
log:uart_tests.c://  puts ("\n- UART RX IRQ");
log:uart_tests.c://  puts ("\n- UART RX overflow IRQ");
memory_tests.c:  puts("\nCortex-M3 DesignStart - Simple memory test - revision $Revision: 243193 $\n");
memory_tests.c:  puts ("Checking ROM");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:  puts ("Checking SRAM");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:  puts ("Checking APB space");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:  puts ("Checking AHB I/O space");
memory_tests.c:  puts (" - GPIO #0 ID values");
memory_tests.c:  puts (" - GPIO #1 ID values");
memory_tests.c:  puts (" - System Controller ID values");
memory_tests.c:  puts (" - System Controller unused addresses");
memory_tests.c:  puts (" - Address range check");
memory_tests.c:    puts("ERROR:Expected bus fault at 0x41140000 did not take place");
memory_tests.c:    puts ("  Failed\n");
memory_tests.c:    puts ("  Passed\n");
memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
memory_tests.c:    puts ("  All ID values matched : device present\n");
memory_tests.c:    puts ("  All ID values are 0   : device not present\n");
memory_tests.c:    puts ("  ID value mismatch(es) : device unknown\n");
memory_tests.c:    puts ("  All ID values matched : device present\n");
memory_tests.c:  else puts("   Unused addresses Test Passed\n");
memory_tests.c:  if (hardfault_verbose) puts ("[Hard Fault Handler]");
memory_tests.c:    puts ("ERROR : Unexpected HardFault interrupt occurred.\n");
timer_driver_tests.c:  puts("\nCortex-M3 DesignStart - Timer Driver Test - revision $Revision: 243344 $\n");
timer_driver_tests.c:    puts ("** TEST SKIPPED ** Timer 0 not present.");
timer_driver_tests.c:    puts ("** TEST SKIPPED ** GPIO 0 not present.");
timer_driver_tests.c:    puts("** TEST PASSED **\n");
timer_driver_tests.c:  puts("\nStage 1 - Timer Initialisation\n");
timer_driver_tests.c:    puts("Timer Enabled");
timer_driver_tests.c:    puts("Ext Enable Not Selected");
timer_driver_tests.c:    puts("Ext Clock Not Selected");
timer_driver_tests.c:    puts("Timer IRQ Enabled");
timer_driver_tests.c:    puts("Reload Value of 0xF00");
timer_driver_tests.c:    puts("\nTimer Initialisation Successful\n");
timer_driver_tests.c:  puts("Stage 2 - interrupt\n");
timer_driver_tests.c:      puts ("Timer IRQ\n");
timer_driver_tests.c:      puts("Timer IRQ Disabled");
timer_driver_tests.c:        puts("Timer Reload Value Is Correct");   /*check for reload value */
timer_driver_tests.c:        puts("Timer Value Set to 300");    /*check for reload value */
timer_driver_tests.c:        puts("Timer IRQ enabled");
timer_driver_tests.c:    puts("\nTimer Stopped");
timer_driver_tests.c:     puts("** Timer IRQ Test Passed **\n");
timer_driver_tests.c:    puts("Timer Reload Initialised as 0xF00");   /*check for reload value */
timer_driver_tests.c:    puts("\nTimer Stopped");
timer_driver_tests.c:  if(!err_code) puts("** Timer Polling Test Passed\n");
timer_driver_tests.c:  puts ("\nStage 4 - Ext Stimuli\n");
timer_driver_tests.c:  puts ("\n -Stage 4a - Ext Clock\n");
timer_driver_tests.c:      puts ("Timer IRQ");
timer_driver_tests.c:  puts ("\n -Stage 4b - Ext Enable\n");
timer_driver_tests.c:  puts ("Timer 0 Enabled\n");
timer_driver_tests.c:        puts("Disable Test Passed");
timer_driver_tests.c:        puts("** TEST FAILED ** Disable Test");
timer_driver_tests.c:        puts("Enable Test Passed");
timer_driver_tests.c:        puts("** TEST FAILED ** Enable Test");
timer_driver_tests.c:    puts("\nExt Stimuli Tests Completed Successfully\n");
timer_tests.c:  puts("\nCortex-M3 DesignStart - Timer Test - revision $Revision: 243249 $\n");
timer_tests.c:  puts("1) Timer 0");
timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
timer_tests.c:    puts ("- Timer #0 not present. Tests skipped.");
timer_tests.c:  puts("\n2) Timer 1");
timer_tests.c:      puts ("- GPIO #0 not present. Test skipped.");
timer_tests.c:    puts ("- Timer #1 not present. Tests skipped.");
timer_tests.c:  puts("Timer R/W test");
timer_tests.c:  puts("- initial values");
timer_tests.c:  puts("- read/write");
timer_tests.c:  puts("Timer start/stop test");
timer_tests.c:  puts("- timer enable");
timer_tests.c:     puts("ERROR : Timer not decrementing.");
timer_tests.c:  puts("- timer disable");
timer_tests.c:     puts("ERROR : Timer not stopping.");
timer_tests.c:  puts("- timer reload");
timer_tests.c:     puts("ERROR : Timer reload fail 1.");
timer_tests.c:     puts("ERROR : Timer reload fail 2.");
timer_tests.c:  puts ("Timer interrupt test");
timer_tests.c:  puts ("- Test interrupt generation enabled.");
timer_tests.c:     puts("ERROR : Timer interrupt enable fail.");
timer_tests.c:  puts ("- Test interrupt generation disabled.");
timer_tests.c:     puts("ERROR : Timer interrupt disable fail.");
timer_tests.c:  puts ("Timer external input test");
timer_tests.c:  /* Set external inputs low */
timer_tests.c:  puts("- timer use ext. input");
timer_tests.c:     puts("ERROR : Timer not stopping when external input is low.");
timer_tests.c:  puts("- use SysTick to generate ext. input pulse");
timer_tests.c:     puts("ERROR : Timer not trigger #1.");
timer_tests.c:    puts("ERROR : Timer not trigger #2.");
timer_tests.c:      puts("ERROR : Timer not clear.");
timer_tests.c:  puts("- use EXTIN as clock");
timer_tests.c:     puts("ERROR : Timer change unexpectedly 1.");
timer_tests.c:     puts("ERROR : Timer decrement failed.");
timer_tests.c:     puts("ERROR : Timer change unexpectedly 2.");
timer_tests.c:     puts("ERROR : Timer change unexpectedly 3.");
timer_tests.c:     puts("ERROR : Timer counting failed");
timer_tests.c:     puts("ERROR : Timer IRQ set unexpectedly.");
timer_tests.c:  puts("- IRQ at 1->0 transition");
timer_tests.c:    puts("ERROR : Timer not trigger.");
timer_tests.c:    puts("ERROR : Timer triggered unexpectedly.");
timer_tests.c:    puts ("ERROR : Unexpected Timer 0 interrupt occurred.\n");
timer_tests.c:    puts ("ERROR : Unexpected Timer 1 interrupt occurred.\n");
uart_driver_tests.c:  puts("\nCortex-M3 DesignStart - UART Driver Test - revision $Revision: 242484 $\n");
uart_driver_tests.c:    puts("** TEST SKIPPED ** UART 2 / UART 3 / GPIO 0 / GPIO 1 not available");
uart_driver_tests.c:    puts("** TEST PASSED **\n");
uart_driver_tests.c:  puts("\nStage 1 UART Initialization\n");        //initialise UART2 and UART3 with Baud divider of 32
uart_driver_tests.c:    puts("UART2 Initialization Failed\n");
uart_driver_tests.c:    puts("UART3 Initialization Failed\n");
uart_driver_tests.c:  puts("\nStage 2 Simple Transmission - TX and RX Test\n");
uart_driver_tests.c:  if(CM3DS_MPS2_uart_GetTxBufferFull(CM3DS_MPS2_UART2)) puts("TX Buffer Full ...restarting transmission");
uart_driver_tests.c:    puts("** TEST FAILED **, Error : Strings DO Not Match!");
uart_driver_tests.c:  puts("\nStage 3 Polling");
uart_driver_tests.c:  puts("\n- Stage 3a Overrun Polling\n");
uart_driver_tests.c:    puts("TX Buffer Overrun Occurred");
uart_driver_tests.c:    puts("RX Buffer Overrun Occurred");                             //RX buffer overrun will occur as the data
uart_driver_tests.c:  puts("\n- Stage 3b TX & RX IRQ Polling\n");
uart_driver_tests.c:  else puts("Polling Test Passed");
uart_driver_tests.c:  puts("\nStage 4 IRQ\n");
uart_driver_tests.c:  puts("- Stage 4a Overrun IRQ\n");
uart_driver_tests.c:      puts("UART TX Overrun IRQ");       //if an TX OR IRQ is performed then this variable is set,
uart_driver_tests.c:      puts("UART RX Overrun IRQ");
uart_driver_tests.c:  else puts("UART RX Overrun Passed");
uart_driver_tests.c:  puts("\n- Stage 4b TX/RX IRQ\n");
uart_driver_tests.c:      puts("UART TX IRQ ....data sent");                    //if the data has been received (which is set in the
uart_driver_tests.c:    puts("** TEST FAILED ** Strings Do Not Match!");
uart_tests.c:  puts("\nCortex-M3 DesignStart - UART Test - revision $Revision: 243483 $\n");
uart_tests.c:    puts("** TEST SKIPPED ** UART 1 / UART 2 / UART 3 / UART 4 / GPIO 0 / GPIO 1 not available");
uart_tests.c:  puts("\nUART 2 for transmit, UART 3 for receive\n");
uart_tests.c:  puts("\nUART 3 for transmit, UART 2 for receive\n");
uart_tests.c://  puts("\nUART0 interrupt connectivity test\n");
uart_tests.c://  puts("\nUART1 interrupt connectivity test\n");
uart_tests.c://  puts("\nUART4 interrupt connectivity test\n");
uart_tests.c:  puts("- check initial values");
uart_tests.c:  puts("Simple test");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_test'.");
uart_tests.c:  puts("Data transfer test\n");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'simple_uart_baud_test_single'.");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_enable_ctrl_test'.");
uart_tests.c:  puts ("UART enable test");
uart_tests.c:  puts ("- both TX and RX are enabled");
uart_tests.c:  puts ("- TX disabled");
uart_tests.c:  puts ("- RX disabled");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_irq_test'.");
uart_tests.c:  puts ("UART TX & RX IRQ test");
uart_tests.c:  puts ("- TX irq enable");
uart_tests.c:  puts ("- TX irq disable");
uart_tests.c:  puts ("- RX irq enable");
uart_tests.c:  puts ("- RX irq disable");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_tx_rx_overflow_test'.");
uart_tests.c:  puts ("UART TX & RX overflow test");
uart_tests.c:  puts ("- TX without overflow");
uart_tests.c:  puts ("- TX with overflow");
uart_tests.c:  puts ("- RX overflow");
uart_tests.c://  puts ("- UART TX IRQ");
uart_tests.c:    puts ("ERROR: Input parameter invalid in function 'uart_interrupt_test'.");
uart_tests.c://  puts ("\n- UART TX overflow IRQ");
uart_tests.c://  puts ("\n- UART RX IRQ");
uart_tests.c://  puts ("\n- UART RX overflow IRQ");
